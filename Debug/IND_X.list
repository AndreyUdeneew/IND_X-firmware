
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bd40  0800f7a8  0800f7a8  0001f7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b4e8  0801b4e8  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  0801b4e8  0801b4e8  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801b4e8  0801b4e8  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b4e8  0801b4e8  0002b4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b4ec  0801b4ec  0002b4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801b4f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013c4  20000074  0801b564  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001438  0801b564  00031438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bdf  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fa  00000000  00000000  00048c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0004c178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001770  00000000  00000000  0004da60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c552  00000000  00000000  0004f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3fa  00000000  00000000  0006b722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae46e  00000000  00000000  00087b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f0c  00000000  00000000  00135fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800f78c 	.word	0x0800f78c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	0800f78c 	.word	0x0800f78c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f000 ff2b 	bl	800125c <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f000 fe7b 	bl	800110c <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 ff1d 	bl	800125c <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 ff13 	bl	800125c <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fea3 	bl	8001190 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fe99 	bl	8001190 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_d2uiz>:
 800046c:	b570      	push	{r4, r5, r6, lr}
 800046e:	2200      	movs	r2, #0
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <__aeabi_d2uiz+0x38>)
 8000472:	0004      	movs	r4, r0
 8000474:	000d      	movs	r5, r1
 8000476:	f7ff ffef 	bl	8000458 <__aeabi_dcmpge>
 800047a:	2800      	cmp	r0, #0
 800047c:	d104      	bne.n	8000488 <__aeabi_d2uiz+0x1c>
 800047e:	0020      	movs	r0, r4
 8000480:	0029      	movs	r1, r5
 8000482:	f001 fd4d 	bl	8001f20 <__aeabi_d2iz>
 8000486:	bd70      	pop	{r4, r5, r6, pc}
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <__aeabi_d2uiz+0x38>)
 800048a:	2200      	movs	r2, #0
 800048c:	0020      	movs	r0, r4
 800048e:	0029      	movs	r1, r5
 8000490:	f001 f9b4 	bl	80017fc <__aeabi_dsub>
 8000494:	f001 fd44 	bl	8001f20 <__aeabi_d2iz>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	061b      	lsls	r3, r3, #24
 800049c:	469c      	mov	ip, r3
 800049e:	4460      	add	r0, ip
 80004a0:	e7f1      	b.n	8000486 <__aeabi_d2uiz+0x1a>
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	41e00000 	.word	0x41e00000

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	000d      	movs	r5, r1
 80004b2:	0004      	movs	r4, r0
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	001f      	movs	r7, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0328      	lsls	r0, r5, #12
 80004bc:	0f62      	lsrs	r2, r4, #29
 80004be:	0a40      	lsrs	r0, r0, #9
 80004c0:	4310      	orrs	r0, r2
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0d52      	lsrs	r2, r2, #21
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	4691      	mov	r9, r2
 80004cc:	0a64      	lsrs	r4, r4, #9
 80004ce:	0ffa      	lsrs	r2, r7, #31
 80004d0:	0f4f      	lsrs	r7, r1, #29
 80004d2:	006e      	lsls	r6, r5, #1
 80004d4:	4327      	orrs	r7, r4
 80004d6:	4692      	mov	sl, r2
 80004d8:	46b8      	mov	r8, r7
 80004da:	0d76      	lsrs	r6, r6, #21
 80004dc:	0fed      	lsrs	r5, r5, #31
 80004de:	00c9      	lsls	r1, r1, #3
 80004e0:	4295      	cmp	r5, r2
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e099      	b.n	800061a <__aeabi_dadd+0x172>
 80004e6:	464c      	mov	r4, r9
 80004e8:	1b34      	subs	r4, r6, r4
 80004ea:	46a4      	mov	ip, r4
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	dc00      	bgt.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e07c      	b.n	80005ec <__aeabi_dadd+0x144>
 80004f2:	464a      	mov	r2, r9
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e0b8      	b.n	800066c <__aeabi_dadd+0x1c4>
 80004fa:	4ac5      	ldr	r2, [pc, #788]	; (8000810 <__aeabi_dadd+0x368>)
 80004fc:	4296      	cmp	r6, r2
 80004fe:	d100      	bne.n	8000502 <__aeabi_dadd+0x5a>
 8000500:	e11c      	b.n	800073c <__aeabi_dadd+0x294>
 8000502:	2280      	movs	r2, #128	; 0x80
 8000504:	003c      	movs	r4, r7
 8000506:	0412      	lsls	r2, r2, #16
 8000508:	4314      	orrs	r4, r2
 800050a:	46a0      	mov	r8, r4
 800050c:	4662      	mov	r2, ip
 800050e:	2a38      	cmp	r2, #56	; 0x38
 8000510:	dd00      	ble.n	8000514 <__aeabi_dadd+0x6c>
 8000512:	e161      	b.n	80007d8 <__aeabi_dadd+0x330>
 8000514:	2a1f      	cmp	r2, #31
 8000516:	dd00      	ble.n	800051a <__aeabi_dadd+0x72>
 8000518:	e1cc      	b.n	80008b4 <__aeabi_dadd+0x40c>
 800051a:	4664      	mov	r4, ip
 800051c:	2220      	movs	r2, #32
 800051e:	1b12      	subs	r2, r2, r4
 8000520:	4644      	mov	r4, r8
 8000522:	4094      	lsls	r4, r2
 8000524:	000f      	movs	r7, r1
 8000526:	46a1      	mov	r9, r4
 8000528:	4664      	mov	r4, ip
 800052a:	4091      	lsls	r1, r2
 800052c:	40e7      	lsrs	r7, r4
 800052e:	464c      	mov	r4, r9
 8000530:	1e4a      	subs	r2, r1, #1
 8000532:	4191      	sbcs	r1, r2
 8000534:	433c      	orrs	r4, r7
 8000536:	4642      	mov	r2, r8
 8000538:	4321      	orrs	r1, r4
 800053a:	4664      	mov	r4, ip
 800053c:	40e2      	lsrs	r2, r4
 800053e:	1a80      	subs	r0, r0, r2
 8000540:	1a5c      	subs	r4, r3, r1
 8000542:	42a3      	cmp	r3, r4
 8000544:	419b      	sbcs	r3, r3
 8000546:	425f      	negs	r7, r3
 8000548:	1bc7      	subs	r7, r0, r7
 800054a:	023b      	lsls	r3, r7, #8
 800054c:	d400      	bmi.n	8000550 <__aeabi_dadd+0xa8>
 800054e:	e0d0      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000550:	027f      	lsls	r7, r7, #9
 8000552:	0a7f      	lsrs	r7, r7, #9
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_dadd+0xb2>
 8000558:	e0ff      	b.n	800075a <__aeabi_dadd+0x2b2>
 800055a:	0038      	movs	r0, r7
 800055c:	f001 fd6c 	bl	8002038 <__clzsi2>
 8000560:	0001      	movs	r1, r0
 8000562:	3908      	subs	r1, #8
 8000564:	2320      	movs	r3, #32
 8000566:	0022      	movs	r2, r4
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	408f      	lsls	r7, r1
 800056c:	40da      	lsrs	r2, r3
 800056e:	408c      	lsls	r4, r1
 8000570:	4317      	orrs	r7, r2
 8000572:	42b1      	cmp	r1, r6
 8000574:	da00      	bge.n	8000578 <__aeabi_dadd+0xd0>
 8000576:	e0ff      	b.n	8000778 <__aeabi_dadd+0x2d0>
 8000578:	1b89      	subs	r1, r1, r6
 800057a:	1c4b      	adds	r3, r1, #1
 800057c:	2b1f      	cmp	r3, #31
 800057e:	dd00      	ble.n	8000582 <__aeabi_dadd+0xda>
 8000580:	e0a8      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000582:	2220      	movs	r2, #32
 8000584:	0039      	movs	r1, r7
 8000586:	1ad2      	subs	r2, r2, r3
 8000588:	0020      	movs	r0, r4
 800058a:	4094      	lsls	r4, r2
 800058c:	4091      	lsls	r1, r2
 800058e:	40d8      	lsrs	r0, r3
 8000590:	1e62      	subs	r2, r4, #1
 8000592:	4194      	sbcs	r4, r2
 8000594:	40df      	lsrs	r7, r3
 8000596:	2600      	movs	r6, #0
 8000598:	4301      	orrs	r1, r0
 800059a:	430c      	orrs	r4, r1
 800059c:	0763      	lsls	r3, r4, #29
 800059e:	d009      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a0:	230f      	movs	r3, #15
 80005a2:	4023      	ands	r3, r4
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	d005      	beq.n	80005b4 <__aeabi_dadd+0x10c>
 80005a8:	1d23      	adds	r3, r4, #4
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	41a4      	sbcs	r4, r4
 80005ae:	4264      	negs	r4, r4
 80005b0:	193f      	adds	r7, r7, r4
 80005b2:	001c      	movs	r4, r3
 80005b4:	023b      	lsls	r3, r7, #8
 80005b6:	d400      	bmi.n	80005ba <__aeabi_dadd+0x112>
 80005b8:	e09e      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005ba:	4b95      	ldr	r3, [pc, #596]	; (8000810 <__aeabi_dadd+0x368>)
 80005bc:	3601      	adds	r6, #1
 80005be:	429e      	cmp	r6, r3
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x11c>
 80005c2:	e0b7      	b.n	8000734 <__aeabi_dadd+0x28c>
 80005c4:	4a93      	ldr	r2, [pc, #588]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c6:	08e4      	lsrs	r4, r4, #3
 80005c8:	4017      	ands	r7, r2
 80005ca:	077b      	lsls	r3, r7, #29
 80005cc:	0571      	lsls	r1, r6, #21
 80005ce:	027f      	lsls	r7, r7, #9
 80005d0:	4323      	orrs	r3, r4
 80005d2:	0b3f      	lsrs	r7, r7, #12
 80005d4:	0d4a      	lsrs	r2, r1, #21
 80005d6:	0512      	lsls	r2, r2, #20
 80005d8:	433a      	orrs	r2, r7
 80005da:	07ed      	lsls	r5, r5, #31
 80005dc:	432a      	orrs	r2, r5
 80005de:	0018      	movs	r0, r3
 80005e0:	0011      	movs	r1, r2
 80005e2:	bce0      	pop	{r5, r6, r7}
 80005e4:	46ba      	mov	sl, r7
 80005e6:	46b1      	mov	r9, r6
 80005e8:	46a8      	mov	r8, r5
 80005ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005ec:	2c00      	cmp	r4, #0
 80005ee:	d04b      	beq.n	8000688 <__aeabi_dadd+0x1e0>
 80005f0:	464c      	mov	r4, r9
 80005f2:	1ba4      	subs	r4, r4, r6
 80005f4:	46a4      	mov	ip, r4
 80005f6:	2e00      	cmp	r6, #0
 80005f8:	d000      	beq.n	80005fc <__aeabi_dadd+0x154>
 80005fa:	e123      	b.n	8000844 <__aeabi_dadd+0x39c>
 80005fc:	0004      	movs	r4, r0
 80005fe:	431c      	orrs	r4, r3
 8000600:	d100      	bne.n	8000604 <__aeabi_dadd+0x15c>
 8000602:	e1af      	b.n	8000964 <__aeabi_dadd+0x4bc>
 8000604:	4662      	mov	r2, ip
 8000606:	1e54      	subs	r4, r2, #1
 8000608:	2a01      	cmp	r2, #1
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x166>
 800060c:	e215      	b.n	8000a3a <__aeabi_dadd+0x592>
 800060e:	4d80      	ldr	r5, [pc, #512]	; (8000810 <__aeabi_dadd+0x368>)
 8000610:	45ac      	cmp	ip, r5
 8000612:	d100      	bne.n	8000616 <__aeabi_dadd+0x16e>
 8000614:	e1c8      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000616:	46a4      	mov	ip, r4
 8000618:	e11b      	b.n	8000852 <__aeabi_dadd+0x3aa>
 800061a:	464a      	mov	r2, r9
 800061c:	1ab2      	subs	r2, r6, r2
 800061e:	4694      	mov	ip, r2
 8000620:	2a00      	cmp	r2, #0
 8000622:	dc00      	bgt.n	8000626 <__aeabi_dadd+0x17e>
 8000624:	e0ac      	b.n	8000780 <__aeabi_dadd+0x2d8>
 8000626:	464a      	mov	r2, r9
 8000628:	2a00      	cmp	r2, #0
 800062a:	d043      	beq.n	80006b4 <__aeabi_dadd+0x20c>
 800062c:	4a78      	ldr	r2, [pc, #480]	; (8000810 <__aeabi_dadd+0x368>)
 800062e:	4296      	cmp	r6, r2
 8000630:	d100      	bne.n	8000634 <__aeabi_dadd+0x18c>
 8000632:	e1af      	b.n	8000994 <__aeabi_dadd+0x4ec>
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	003c      	movs	r4, r7
 8000638:	0412      	lsls	r2, r2, #16
 800063a:	4314      	orrs	r4, r2
 800063c:	46a0      	mov	r8, r4
 800063e:	4662      	mov	r2, ip
 8000640:	2a38      	cmp	r2, #56	; 0x38
 8000642:	dc67      	bgt.n	8000714 <__aeabi_dadd+0x26c>
 8000644:	2a1f      	cmp	r2, #31
 8000646:	dc00      	bgt.n	800064a <__aeabi_dadd+0x1a2>
 8000648:	e15f      	b.n	800090a <__aeabi_dadd+0x462>
 800064a:	4647      	mov	r7, r8
 800064c:	3a20      	subs	r2, #32
 800064e:	40d7      	lsrs	r7, r2
 8000650:	4662      	mov	r2, ip
 8000652:	2a20      	cmp	r2, #32
 8000654:	d005      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000656:	4664      	mov	r4, ip
 8000658:	2240      	movs	r2, #64	; 0x40
 800065a:	1b12      	subs	r2, r2, r4
 800065c:	4644      	mov	r4, r8
 800065e:	4094      	lsls	r4, r2
 8000660:	4321      	orrs	r1, r4
 8000662:	1e4a      	subs	r2, r1, #1
 8000664:	4191      	sbcs	r1, r2
 8000666:	000c      	movs	r4, r1
 8000668:	433c      	orrs	r4, r7
 800066a:	e057      	b.n	800071c <__aeabi_dadd+0x274>
 800066c:	003a      	movs	r2, r7
 800066e:	430a      	orrs	r2, r1
 8000670:	d100      	bne.n	8000674 <__aeabi_dadd+0x1cc>
 8000672:	e105      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000674:	0022      	movs	r2, r4
 8000676:	3a01      	subs	r2, #1
 8000678:	2c01      	cmp	r4, #1
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x1d6>
 800067c:	e182      	b.n	8000984 <__aeabi_dadd+0x4dc>
 800067e:	4c64      	ldr	r4, [pc, #400]	; (8000810 <__aeabi_dadd+0x368>)
 8000680:	45a4      	cmp	ip, r4
 8000682:	d05b      	beq.n	800073c <__aeabi_dadd+0x294>
 8000684:	4694      	mov	ip, r2
 8000686:	e741      	b.n	800050c <__aeabi_dadd+0x64>
 8000688:	4c63      	ldr	r4, [pc, #396]	; (8000818 <__aeabi_dadd+0x370>)
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	4227      	tst	r7, r4
 800068e:	d000      	beq.n	8000692 <__aeabi_dadd+0x1ea>
 8000690:	e0c4      	b.n	800081c <__aeabi_dadd+0x374>
 8000692:	0004      	movs	r4, r0
 8000694:	431c      	orrs	r4, r3
 8000696:	2e00      	cmp	r6, #0
 8000698:	d000      	beq.n	800069c <__aeabi_dadd+0x1f4>
 800069a:	e169      	b.n	8000970 <__aeabi_dadd+0x4c8>
 800069c:	2c00      	cmp	r4, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_dadd+0x1fa>
 80006a0:	e1bf      	b.n	8000a22 <__aeabi_dadd+0x57a>
 80006a2:	4644      	mov	r4, r8
 80006a4:	430c      	orrs	r4, r1
 80006a6:	d000      	beq.n	80006aa <__aeabi_dadd+0x202>
 80006a8:	e1d0      	b.n	8000a4c <__aeabi_dadd+0x5a4>
 80006aa:	0742      	lsls	r2, r0, #29
 80006ac:	08db      	lsrs	r3, r3, #3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	08c0      	lsrs	r0, r0, #3
 80006b2:	e029      	b.n	8000708 <__aeabi_dadd+0x260>
 80006b4:	003a      	movs	r2, r7
 80006b6:	430a      	orrs	r2, r1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x214>
 80006ba:	e170      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006bc:	4662      	mov	r2, ip
 80006be:	4664      	mov	r4, ip
 80006c0:	3a01      	subs	r2, #1
 80006c2:	2c01      	cmp	r4, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c51      	ldr	r4, [pc, #324]	; (8000810 <__aeabi_dadd+0x368>)
 80006ca:	45a4      	cmp	ip, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e161      	b.n	8000994 <__aeabi_dadd+0x4ec>
 80006d0:	4694      	mov	ip, r2
 80006d2:	e7b4      	b.n	800063e <__aeabi_dadd+0x196>
 80006d4:	003a      	movs	r2, r7
 80006d6:	391f      	subs	r1, #31
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	0011      	movs	r1, r2
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d003      	beq.n	80006e8 <__aeabi_dadd+0x240>
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	409f      	lsls	r7, r3
 80006e6:	433c      	orrs	r4, r7
 80006e8:	1e63      	subs	r3, r4, #1
 80006ea:	419c      	sbcs	r4, r3
 80006ec:	2700      	movs	r7, #0
 80006ee:	2600      	movs	r6, #0
 80006f0:	430c      	orrs	r4, r1
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e753      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80006f8:	46b4      	mov	ip, r6
 80006fa:	08e4      	lsrs	r4, r4, #3
 80006fc:	077b      	lsls	r3, r7, #29
 80006fe:	4323      	orrs	r3, r4
 8000700:	08f8      	lsrs	r0, r7, #3
 8000702:	4a43      	ldr	r2, [pc, #268]	; (8000810 <__aeabi_dadd+0x368>)
 8000704:	4594      	cmp	ip, r2
 8000706:	d01d      	beq.n	8000744 <__aeabi_dadd+0x29c>
 8000708:	4662      	mov	r2, ip
 800070a:	0307      	lsls	r7, r0, #12
 800070c:	0552      	lsls	r2, r2, #21
 800070e:	0b3f      	lsrs	r7, r7, #12
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	e760      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000714:	4644      	mov	r4, r8
 8000716:	430c      	orrs	r4, r1
 8000718:	1e62      	subs	r2, r4, #1
 800071a:	4194      	sbcs	r4, r2
 800071c:	18e4      	adds	r4, r4, r3
 800071e:	429c      	cmp	r4, r3
 8000720:	419b      	sbcs	r3, r3
 8000722:	425f      	negs	r7, r3
 8000724:	183f      	adds	r7, r7, r0
 8000726:	023b      	lsls	r3, r7, #8
 8000728:	d5e3      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <__aeabi_dadd+0x368>)
 800072c:	3601      	adds	r6, #1
 800072e:	429e      	cmp	r6, r3
 8000730:	d000      	beq.n	8000734 <__aeabi_dadd+0x28c>
 8000732:	e0b5      	b.n	80008a0 <__aeabi_dadd+0x3f8>
 8000734:	0032      	movs	r2, r6
 8000736:	2700      	movs	r7, #0
 8000738:	2300      	movs	r3, #0
 800073a:	e74c      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800073c:	0742      	lsls	r2, r0, #29
 800073e:	08db      	lsrs	r3, r3, #3
 8000740:	4313      	orrs	r3, r2
 8000742:	08c0      	lsrs	r0, r0, #3
 8000744:	001a      	movs	r2, r3
 8000746:	4302      	orrs	r2, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x2a4>
 800074a:	e1e1      	b.n	8000b10 <__aeabi_dadd+0x668>
 800074c:	2780      	movs	r7, #128	; 0x80
 800074e:	033f      	lsls	r7, r7, #12
 8000750:	4307      	orrs	r7, r0
 8000752:	033f      	lsls	r7, r7, #12
 8000754:	4a2e      	ldr	r2, [pc, #184]	; (8000810 <__aeabi_dadd+0x368>)
 8000756:	0b3f      	lsrs	r7, r7, #12
 8000758:	e73d      	b.n	80005d6 <__aeabi_dadd+0x12e>
 800075a:	0020      	movs	r0, r4
 800075c:	f001 fc6c 	bl	8002038 <__clzsi2>
 8000760:	0001      	movs	r1, r0
 8000762:	3118      	adds	r1, #24
 8000764:	291f      	cmp	r1, #31
 8000766:	dc00      	bgt.n	800076a <__aeabi_dadd+0x2c2>
 8000768:	e6fc      	b.n	8000564 <__aeabi_dadd+0xbc>
 800076a:	3808      	subs	r0, #8
 800076c:	4084      	lsls	r4, r0
 800076e:	0027      	movs	r7, r4
 8000770:	2400      	movs	r4, #0
 8000772:	42b1      	cmp	r1, r6
 8000774:	db00      	blt.n	8000778 <__aeabi_dadd+0x2d0>
 8000776:	e6ff      	b.n	8000578 <__aeabi_dadd+0xd0>
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <__aeabi_dadd+0x36c>)
 800077a:	1a76      	subs	r6, r6, r1
 800077c:	4017      	ands	r7, r2
 800077e:	e70d      	b.n	800059c <__aeabi_dadd+0xf4>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d02f      	beq.n	80007e4 <__aeabi_dadd+0x33c>
 8000784:	464a      	mov	r2, r9
 8000786:	1b92      	subs	r2, r2, r6
 8000788:	4694      	mov	ip, r2
 800078a:	2e00      	cmp	r6, #0
 800078c:	d100      	bne.n	8000790 <__aeabi_dadd+0x2e8>
 800078e:	e0ad      	b.n	80008ec <__aeabi_dadd+0x444>
 8000790:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <__aeabi_dadd+0x368>)
 8000792:	4591      	cmp	r9, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x2f0>
 8000796:	e10f      	b.n	80009b8 <__aeabi_dadd+0x510>
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0412      	lsls	r2, r2, #16
 800079c:	4310      	orrs	r0, r2
 800079e:	4662      	mov	r2, ip
 80007a0:	2a38      	cmp	r2, #56	; 0x38
 80007a2:	dd00      	ble.n	80007a6 <__aeabi_dadd+0x2fe>
 80007a4:	e10f      	b.n	80009c6 <__aeabi_dadd+0x51e>
 80007a6:	2a1f      	cmp	r2, #31
 80007a8:	dd00      	ble.n	80007ac <__aeabi_dadd+0x304>
 80007aa:	e180      	b.n	8000aae <__aeabi_dadd+0x606>
 80007ac:	4664      	mov	r4, ip
 80007ae:	2220      	movs	r2, #32
 80007b0:	001e      	movs	r6, r3
 80007b2:	1b12      	subs	r2, r2, r4
 80007b4:	4667      	mov	r7, ip
 80007b6:	0004      	movs	r4, r0
 80007b8:	4093      	lsls	r3, r2
 80007ba:	4094      	lsls	r4, r2
 80007bc:	40fe      	lsrs	r6, r7
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	4193      	sbcs	r3, r2
 80007c2:	40f8      	lsrs	r0, r7
 80007c4:	4334      	orrs	r4, r6
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4480      	add	r8, r0
 80007ca:	1864      	adds	r4, r4, r1
 80007cc:	428c      	cmp	r4, r1
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	464e      	mov	r6, r9
 80007d4:	4447      	add	r7, r8
 80007d6:	e7a6      	b.n	8000726 <__aeabi_dadd+0x27e>
 80007d8:	4642      	mov	r2, r8
 80007da:	430a      	orrs	r2, r1
 80007dc:	0011      	movs	r1, r2
 80007de:	1e4a      	subs	r2, r1, #1
 80007e0:	4191      	sbcs	r1, r2
 80007e2:	e6ad      	b.n	8000540 <__aeabi_dadd+0x98>
 80007e4:	4c0c      	ldr	r4, [pc, #48]	; (8000818 <__aeabi_dadd+0x370>)
 80007e6:	1c72      	adds	r2, r6, #1
 80007e8:	4222      	tst	r2, r4
 80007ea:	d000      	beq.n	80007ee <__aeabi_dadd+0x346>
 80007ec:	e0a1      	b.n	8000932 <__aeabi_dadd+0x48a>
 80007ee:	0002      	movs	r2, r0
 80007f0:	431a      	orrs	r2, r3
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_dadd+0x350>
 80007f6:	e0fa      	b.n	80009ee <__aeabi_dadd+0x546>
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x356>
 80007fc:	e145      	b.n	8000a8a <__aeabi_dadd+0x5e2>
 80007fe:	003a      	movs	r2, r7
 8000800:	430a      	orrs	r2, r1
 8000802:	d000      	beq.n	8000806 <__aeabi_dadd+0x35e>
 8000804:	e146      	b.n	8000a94 <__aeabi_dadd+0x5ec>
 8000806:	0742      	lsls	r2, r0, #29
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	4313      	orrs	r3, r2
 800080c:	08c0      	lsrs	r0, r0, #3
 800080e:	e77b      	b.n	8000708 <__aeabi_dadd+0x260>
 8000810:	000007ff 	.word	0x000007ff
 8000814:	ff7fffff 	.word	0xff7fffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	4647      	mov	r7, r8
 800081e:	1a5c      	subs	r4, r3, r1
 8000820:	1bc2      	subs	r2, r0, r7
 8000822:	42a3      	cmp	r3, r4
 8000824:	41bf      	sbcs	r7, r7
 8000826:	427f      	negs	r7, r7
 8000828:	46b9      	mov	r9, r7
 800082a:	0017      	movs	r7, r2
 800082c:	464a      	mov	r2, r9
 800082e:	1abf      	subs	r7, r7, r2
 8000830:	023a      	lsls	r2, r7, #8
 8000832:	d500      	bpl.n	8000836 <__aeabi_dadd+0x38e>
 8000834:	e08d      	b.n	8000952 <__aeabi_dadd+0x4aa>
 8000836:	0023      	movs	r3, r4
 8000838:	433b      	orrs	r3, r7
 800083a:	d000      	beq.n	800083e <__aeabi_dadd+0x396>
 800083c:	e68a      	b.n	8000554 <__aeabi_dadd+0xac>
 800083e:	2000      	movs	r0, #0
 8000840:	2500      	movs	r5, #0
 8000842:	e761      	b.n	8000708 <__aeabi_dadd+0x260>
 8000844:	4cb4      	ldr	r4, [pc, #720]	; (8000b18 <__aeabi_dadd+0x670>)
 8000846:	45a1      	cmp	r9, r4
 8000848:	d100      	bne.n	800084c <__aeabi_dadd+0x3a4>
 800084a:	e0ad      	b.n	80009a8 <__aeabi_dadd+0x500>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	0424      	lsls	r4, r4, #16
 8000850:	4320      	orrs	r0, r4
 8000852:	4664      	mov	r4, ip
 8000854:	2c38      	cmp	r4, #56	; 0x38
 8000856:	dc3d      	bgt.n	80008d4 <__aeabi_dadd+0x42c>
 8000858:	4662      	mov	r2, ip
 800085a:	2c1f      	cmp	r4, #31
 800085c:	dd00      	ble.n	8000860 <__aeabi_dadd+0x3b8>
 800085e:	e0b7      	b.n	80009d0 <__aeabi_dadd+0x528>
 8000860:	2520      	movs	r5, #32
 8000862:	001e      	movs	r6, r3
 8000864:	1b2d      	subs	r5, r5, r4
 8000866:	0004      	movs	r4, r0
 8000868:	40ab      	lsls	r3, r5
 800086a:	40ac      	lsls	r4, r5
 800086c:	40d6      	lsrs	r6, r2
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4642      	mov	r2, r8
 8000872:	1e5d      	subs	r5, r3, #1
 8000874:	41ab      	sbcs	r3, r5
 8000876:	4334      	orrs	r4, r6
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	4690      	mov	r8, r2
 800087c:	4323      	orrs	r3, r4
 800087e:	e02c      	b.n	80008da <__aeabi_dadd+0x432>
 8000880:	0742      	lsls	r2, r0, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c0      	lsrs	r0, r0, #3
 8000888:	e73b      	b.n	8000702 <__aeabi_dadd+0x25a>
 800088a:	185c      	adds	r4, r3, r1
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4440      	add	r0, r8
 8000892:	425b      	negs	r3, r3
 8000894:	18c7      	adds	r7, r0, r3
 8000896:	2601      	movs	r6, #1
 8000898:	023b      	lsls	r3, r7, #8
 800089a:	d400      	bmi.n	800089e <__aeabi_dadd+0x3f6>
 800089c:	e729      	b.n	80006f2 <__aeabi_dadd+0x24a>
 800089e:	2602      	movs	r6, #2
 80008a0:	4a9e      	ldr	r2, [pc, #632]	; (8000b1c <__aeabi_dadd+0x674>)
 80008a2:	0863      	lsrs	r3, r4, #1
 80008a4:	4017      	ands	r7, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	4014      	ands	r4, r2
 80008aa:	431c      	orrs	r4, r3
 80008ac:	07fb      	lsls	r3, r7, #31
 80008ae:	431c      	orrs	r4, r3
 80008b0:	087f      	lsrs	r7, r7, #1
 80008b2:	e673      	b.n	800059c <__aeabi_dadd+0xf4>
 80008b4:	4644      	mov	r4, r8
 80008b6:	3a20      	subs	r2, #32
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	4662      	mov	r2, ip
 80008bc:	2a20      	cmp	r2, #32
 80008be:	d005      	beq.n	80008cc <__aeabi_dadd+0x424>
 80008c0:	4667      	mov	r7, ip
 80008c2:	2240      	movs	r2, #64	; 0x40
 80008c4:	1bd2      	subs	r2, r2, r7
 80008c6:	4647      	mov	r7, r8
 80008c8:	4097      	lsls	r7, r2
 80008ca:	4339      	orrs	r1, r7
 80008cc:	1e4a      	subs	r2, r1, #1
 80008ce:	4191      	sbcs	r1, r2
 80008d0:	4321      	orrs	r1, r4
 80008d2:	e635      	b.n	8000540 <__aeabi_dadd+0x98>
 80008d4:	4303      	orrs	r3, r0
 80008d6:	1e58      	subs	r0, r3, #1
 80008d8:	4183      	sbcs	r3, r0
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	4655      	mov	r5, sl
 80008e6:	464e      	mov	r6, r9
 80008e8:	1bdf      	subs	r7, r3, r7
 80008ea:	e62e      	b.n	800054a <__aeabi_dadd+0xa2>
 80008ec:	0002      	movs	r2, r0
 80008ee:	431a      	orrs	r2, r3
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x44c>
 80008f2:	e0bd      	b.n	8000a70 <__aeabi_dadd+0x5c8>
 80008f4:	4662      	mov	r2, ip
 80008f6:	4664      	mov	r4, ip
 80008f8:	3a01      	subs	r2, #1
 80008fa:	2c01      	cmp	r4, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_dadd+0x458>
 80008fe:	e0e5      	b.n	8000acc <__aeabi_dadd+0x624>
 8000900:	4c85      	ldr	r4, [pc, #532]	; (8000b18 <__aeabi_dadd+0x670>)
 8000902:	45a4      	cmp	ip, r4
 8000904:	d058      	beq.n	80009b8 <__aeabi_dadd+0x510>
 8000906:	4694      	mov	ip, r2
 8000908:	e749      	b.n	800079e <__aeabi_dadd+0x2f6>
 800090a:	4664      	mov	r4, ip
 800090c:	2220      	movs	r2, #32
 800090e:	1b12      	subs	r2, r2, r4
 8000910:	4644      	mov	r4, r8
 8000912:	4094      	lsls	r4, r2
 8000914:	000f      	movs	r7, r1
 8000916:	46a1      	mov	r9, r4
 8000918:	4664      	mov	r4, ip
 800091a:	4091      	lsls	r1, r2
 800091c:	40e7      	lsrs	r7, r4
 800091e:	464c      	mov	r4, r9
 8000920:	1e4a      	subs	r2, r1, #1
 8000922:	4191      	sbcs	r1, r2
 8000924:	433c      	orrs	r4, r7
 8000926:	4642      	mov	r2, r8
 8000928:	430c      	orrs	r4, r1
 800092a:	4661      	mov	r1, ip
 800092c:	40ca      	lsrs	r2, r1
 800092e:	1880      	adds	r0, r0, r2
 8000930:	e6f4      	b.n	800071c <__aeabi_dadd+0x274>
 8000932:	4c79      	ldr	r4, [pc, #484]	; (8000b18 <__aeabi_dadd+0x670>)
 8000934:	42a2      	cmp	r2, r4
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x492>
 8000938:	e6fd      	b.n	8000736 <__aeabi_dadd+0x28e>
 800093a:	1859      	adds	r1, r3, r1
 800093c:	4299      	cmp	r1, r3
 800093e:	419b      	sbcs	r3, r3
 8000940:	4440      	add	r0, r8
 8000942:	425f      	negs	r7, r3
 8000944:	19c7      	adds	r7, r0, r7
 8000946:	07fc      	lsls	r4, r7, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	0016      	movs	r6, r2
 800094c:	430c      	orrs	r4, r1
 800094e:	087f      	lsrs	r7, r7, #1
 8000950:	e6cf      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000952:	1acc      	subs	r4, r1, r3
 8000954:	42a1      	cmp	r1, r4
 8000956:	41bf      	sbcs	r7, r7
 8000958:	4643      	mov	r3, r8
 800095a:	427f      	negs	r7, r7
 800095c:	1a18      	subs	r0, r3, r0
 800095e:	4655      	mov	r5, sl
 8000960:	1bc7      	subs	r7, r0, r7
 8000962:	e5f7      	b.n	8000554 <__aeabi_dadd+0xac>
 8000964:	08c9      	lsrs	r1, r1, #3
 8000966:	077b      	lsls	r3, r7, #29
 8000968:	4655      	mov	r5, sl
 800096a:	430b      	orrs	r3, r1
 800096c:	08f8      	lsrs	r0, r7, #3
 800096e:	e6c8      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000970:	2c00      	cmp	r4, #0
 8000972:	d000      	beq.n	8000976 <__aeabi_dadd+0x4ce>
 8000974:	e081      	b.n	8000a7a <__aeabi_dadd+0x5d2>
 8000976:	4643      	mov	r3, r8
 8000978:	430b      	orrs	r3, r1
 800097a:	d115      	bne.n	80009a8 <__aeabi_dadd+0x500>
 800097c:	2080      	movs	r0, #128	; 0x80
 800097e:	2500      	movs	r5, #0
 8000980:	0300      	lsls	r0, r0, #12
 8000982:	e6e3      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000984:	1a5c      	subs	r4, r3, r1
 8000986:	42a3      	cmp	r3, r4
 8000988:	419b      	sbcs	r3, r3
 800098a:	1bc7      	subs	r7, r0, r7
 800098c:	425b      	negs	r3, r3
 800098e:	2601      	movs	r6, #1
 8000990:	1aff      	subs	r7, r7, r3
 8000992:	e5da      	b.n	800054a <__aeabi_dadd+0xa2>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	e6d2      	b.n	8000744 <__aeabi_dadd+0x29c>
 800099e:	0742      	lsls	r2, r0, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	e6ac      	b.n	8000702 <__aeabi_dadd+0x25a>
 80009a8:	4643      	mov	r3, r8
 80009aa:	4642      	mov	r2, r8
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	075b      	lsls	r3, r3, #29
 80009b0:	4655      	mov	r5, sl
 80009b2:	430b      	orrs	r3, r1
 80009b4:	08d0      	lsrs	r0, r2, #3
 80009b6:	e6c5      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009b8:	4643      	mov	r3, r8
 80009ba:	4642      	mov	r2, r8
 80009bc:	075b      	lsls	r3, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	430b      	orrs	r3, r1
 80009c2:	08d0      	lsrs	r0, r2, #3
 80009c4:	e6be      	b.n	8000744 <__aeabi_dadd+0x29c>
 80009c6:	4303      	orrs	r3, r0
 80009c8:	001c      	movs	r4, r3
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	e6fc      	b.n	80007ca <__aeabi_dadd+0x322>
 80009d0:	0002      	movs	r2, r0
 80009d2:	3c20      	subs	r4, #32
 80009d4:	40e2      	lsrs	r2, r4
 80009d6:	0014      	movs	r4, r2
 80009d8:	4662      	mov	r2, ip
 80009da:	2a20      	cmp	r2, #32
 80009dc:	d003      	beq.n	80009e6 <__aeabi_dadd+0x53e>
 80009de:	2540      	movs	r5, #64	; 0x40
 80009e0:	1aad      	subs	r5, r5, r2
 80009e2:	40a8      	lsls	r0, r5
 80009e4:	4303      	orrs	r3, r0
 80009e6:	1e58      	subs	r0, r3, #1
 80009e8:	4183      	sbcs	r3, r0
 80009ea:	4323      	orrs	r3, r4
 80009ec:	e775      	b.n	80008da <__aeabi_dadd+0x432>
 80009ee:	2a00      	cmp	r2, #0
 80009f0:	d0e2      	beq.n	80009b8 <__aeabi_dadd+0x510>
 80009f2:	003a      	movs	r2, r7
 80009f4:	430a      	orrs	r2, r1
 80009f6:	d0cd      	beq.n	8000994 <__aeabi_dadd+0x4ec>
 80009f8:	0742      	lsls	r2, r0, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	08c0      	lsrs	r0, r0, #3
 8000a02:	0312      	lsls	r2, r2, #12
 8000a04:	4210      	tst	r0, r2
 8000a06:	d006      	beq.n	8000a16 <__aeabi_dadd+0x56e>
 8000a08:	08fc      	lsrs	r4, r7, #3
 8000a0a:	4214      	tst	r4, r2
 8000a0c:	d103      	bne.n	8000a16 <__aeabi_dadd+0x56e>
 8000a0e:	0020      	movs	r0, r4
 8000a10:	08cb      	lsrs	r3, r1, #3
 8000a12:	077a      	lsls	r2, r7, #29
 8000a14:	4313      	orrs	r3, r2
 8000a16:	0f5a      	lsrs	r2, r3, #29
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	0752      	lsls	r2, r2, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	e690      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a22:	4643      	mov	r3, r8
 8000a24:	430b      	orrs	r3, r1
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x582>
 8000a28:	e709      	b.n	800083e <__aeabi_dadd+0x396>
 8000a2a:	4643      	mov	r3, r8
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	075b      	lsls	r3, r3, #29
 8000a32:	4655      	mov	r5, sl
 8000a34:	430b      	orrs	r3, r1
 8000a36:	08d0      	lsrs	r0, r2, #3
 8000a38:	e666      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a3a:	1acc      	subs	r4, r1, r3
 8000a3c:	42a1      	cmp	r1, r4
 8000a3e:	4189      	sbcs	r1, r1
 8000a40:	1a3f      	subs	r7, r7, r0
 8000a42:	4249      	negs	r1, r1
 8000a44:	4655      	mov	r5, sl
 8000a46:	2601      	movs	r6, #1
 8000a48:	1a7f      	subs	r7, r7, r1
 8000a4a:	e57e      	b.n	800054a <__aeabi_dadd+0xa2>
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	1a5c      	subs	r4, r3, r1
 8000a50:	1a87      	subs	r7, r0, r2
 8000a52:	42a3      	cmp	r3, r4
 8000a54:	4192      	sbcs	r2, r2
 8000a56:	4252      	negs	r2, r2
 8000a58:	1abf      	subs	r7, r7, r2
 8000a5a:	023a      	lsls	r2, r7, #8
 8000a5c:	d53d      	bpl.n	8000ada <__aeabi_dadd+0x632>
 8000a5e:	1acc      	subs	r4, r1, r3
 8000a60:	42a1      	cmp	r1, r4
 8000a62:	4189      	sbcs	r1, r1
 8000a64:	4643      	mov	r3, r8
 8000a66:	4249      	negs	r1, r1
 8000a68:	1a1f      	subs	r7, r3, r0
 8000a6a:	4655      	mov	r5, sl
 8000a6c:	1a7f      	subs	r7, r7, r1
 8000a6e:	e595      	b.n	800059c <__aeabi_dadd+0xf4>
 8000a70:	077b      	lsls	r3, r7, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	430b      	orrs	r3, r1
 8000a76:	08f8      	lsrs	r0, r7, #3
 8000a78:	e643      	b.n	8000702 <__aeabi_dadd+0x25a>
 8000a7a:	4644      	mov	r4, r8
 8000a7c:	08db      	lsrs	r3, r3, #3
 8000a7e:	430c      	orrs	r4, r1
 8000a80:	d130      	bne.n	8000ae4 <__aeabi_dadd+0x63c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	4313      	orrs	r3, r2
 8000a86:	08c0      	lsrs	r0, r0, #3
 8000a88:	e65c      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000a8a:	077b      	lsls	r3, r7, #29
 8000a8c:	08c9      	lsrs	r1, r1, #3
 8000a8e:	430b      	orrs	r3, r1
 8000a90:	08f8      	lsrs	r0, r7, #3
 8000a92:	e639      	b.n	8000708 <__aeabi_dadd+0x260>
 8000a94:	185c      	adds	r4, r3, r1
 8000a96:	429c      	cmp	r4, r3
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	4440      	add	r0, r8
 8000a9c:	425b      	negs	r3, r3
 8000a9e:	18c7      	adds	r7, r0, r3
 8000aa0:	023b      	lsls	r3, r7, #8
 8000aa2:	d400      	bmi.n	8000aa6 <__aeabi_dadd+0x5fe>
 8000aa4:	e625      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <__aeabi_dadd+0x674>)
 8000aa8:	2601      	movs	r6, #1
 8000aaa:	401f      	ands	r7, r3
 8000aac:	e621      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aae:	0004      	movs	r4, r0
 8000ab0:	3a20      	subs	r2, #32
 8000ab2:	40d4      	lsrs	r4, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	2a20      	cmp	r2, #32
 8000ab8:	d004      	beq.n	8000ac4 <__aeabi_dadd+0x61c>
 8000aba:	2240      	movs	r2, #64	; 0x40
 8000abc:	4666      	mov	r6, ip
 8000abe:	1b92      	subs	r2, r2, r6
 8000ac0:	4090      	lsls	r0, r2
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	4193      	sbcs	r3, r2
 8000ac8:	431c      	orrs	r4, r3
 8000aca:	e67e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000acc:	185c      	adds	r4, r3, r1
 8000ace:	428c      	cmp	r4, r1
 8000ad0:	4189      	sbcs	r1, r1
 8000ad2:	4440      	add	r0, r8
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	1847      	adds	r7, r0, r1
 8000ad8:	e6dd      	b.n	8000896 <__aeabi_dadd+0x3ee>
 8000ada:	0023      	movs	r3, r4
 8000adc:	433b      	orrs	r3, r7
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e6ad      	b.n	800083e <__aeabi_dadd+0x396>
 8000ae2:	e606      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae4:	0744      	lsls	r4, r0, #29
 8000ae6:	4323      	orrs	r3, r4
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	08c0      	lsrs	r0, r0, #3
 8000aec:	0324      	lsls	r4, r4, #12
 8000aee:	4220      	tst	r0, r4
 8000af0:	d008      	beq.n	8000b04 <__aeabi_dadd+0x65c>
 8000af2:	4642      	mov	r2, r8
 8000af4:	08d6      	lsrs	r6, r2, #3
 8000af6:	4226      	tst	r6, r4
 8000af8:	d104      	bne.n	8000b04 <__aeabi_dadd+0x65c>
 8000afa:	4655      	mov	r5, sl
 8000afc:	0030      	movs	r0, r6
 8000afe:	08cb      	lsrs	r3, r1, #3
 8000b00:	0751      	lsls	r1, r2, #29
 8000b02:	430b      	orrs	r3, r1
 8000b04:	0f5a      	lsrs	r2, r3, #29
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	08db      	lsrs	r3, r3, #3
 8000b0a:	0752      	lsls	r2, r2, #29
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	e619      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000b10:	2300      	movs	r3, #0
 8000b12:	4a01      	ldr	r2, [pc, #4]	; (8000b18 <__aeabi_dadd+0x670>)
 8000b14:	001f      	movs	r7, r3
 8000b16:	e55e      	b.n	80005d6 <__aeabi_dadd+0x12e>
 8000b18:	000007ff 	.word	0x000007ff
 8000b1c:	ff7fffff 	.word	0xff7fffff

08000b20 <__aeabi_ddiv>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	4657      	mov	r7, sl
 8000b24:	464e      	mov	r6, r9
 8000b26:	4645      	mov	r5, r8
 8000b28:	46de      	mov	lr, fp
 8000b2a:	b5e0      	push	{r5, r6, r7, lr}
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	0005      	movs	r5, r0
 8000b30:	030c      	lsls	r4, r1, #12
 8000b32:	0048      	lsls	r0, r1, #1
 8000b34:	4692      	mov	sl, r2
 8000b36:	001f      	movs	r7, r3
 8000b38:	b085      	sub	sp, #20
 8000b3a:	0b24      	lsrs	r4, r4, #12
 8000b3c:	0d40      	lsrs	r0, r0, #21
 8000b3e:	0fce      	lsrs	r6, r1, #31
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_ddiv+0x26>
 8000b44:	e156      	b.n	8000df4 <__aeabi_ddiv+0x2d4>
 8000b46:	4bd4      	ldr	r3, [pc, #848]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_ddiv+0x2e>
 8000b4c:	e172      	b.n	8000e34 <__aeabi_ddiv+0x314>
 8000b4e:	0f6b      	lsrs	r3, r5, #29
 8000b50:	00e4      	lsls	r4, r4, #3
 8000b52:	431c      	orrs	r4, r3
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	4bcf      	ldr	r3, [pc, #828]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b5e:	00ed      	lsls	r5, r5, #3
 8000b60:	469b      	mov	fp, r3
 8000b62:	2300      	movs	r3, #0
 8000b64:	4699      	mov	r9, r3
 8000b66:	4483      	add	fp, r0
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	033c      	lsls	r4, r7, #12
 8000b6c:	007b      	lsls	r3, r7, #1
 8000b6e:	4650      	mov	r0, sl
 8000b70:	0b24      	lsrs	r4, r4, #12
 8000b72:	0d5b      	lsrs	r3, r3, #21
 8000b74:	0fff      	lsrs	r7, r7, #31
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <__aeabi_ddiv+0x5c>
 8000b7a:	e11f      	b.n	8000dbc <__aeabi_ddiv+0x29c>
 8000b7c:	4ac6      	ldr	r2, [pc, #792]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d100      	bne.n	8000b84 <__aeabi_ddiv+0x64>
 8000b82:	e162      	b.n	8000e4a <__aeabi_ddiv+0x32a>
 8000b84:	49c5      	ldr	r1, [pc, #788]	; (8000e9c <__aeabi_ddiv+0x37c>)
 8000b86:	0f42      	lsrs	r2, r0, #29
 8000b88:	468c      	mov	ip, r1
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	4659      	mov	r1, fp
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	2280      	movs	r2, #128	; 0x80
 8000b92:	4463      	add	r3, ip
 8000b94:	0412      	lsls	r2, r2, #16
 8000b96:	1acb      	subs	r3, r1, r3
 8000b98:	4314      	orrs	r4, r2
 8000b9a:	469b      	mov	fp, r3
 8000b9c:	00c2      	lsls	r2, r0, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	407b      	eors	r3, r7
 8000ba4:	469a      	mov	sl, r3
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d827      	bhi.n	8000bfc <__aeabi_ddiv+0xdc>
 8000bac:	49bc      	ldr	r1, [pc, #752]	; (8000ea0 <__aeabi_ddiv+0x380>)
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	58cb      	ldr	r3, [r1, r3]
 8000bb2:	469f      	mov	pc, r3
 8000bb4:	46b2      	mov	sl, r6
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d016      	beq.n	8000bea <__aeabi_ddiv+0xca>
 8000bbc:	2b03      	cmp	r3, #3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_ddiv+0xa2>
 8000bc0:	e28e      	b.n	80010e0 <__aeabi_ddiv+0x5c0>
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000bc6:	e0d9      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2400      	movs	r4, #0
 8000bcc:	2500      	movs	r5, #0
 8000bce:	4652      	mov	r2, sl
 8000bd0:	051b      	lsls	r3, r3, #20
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	07d2      	lsls	r2, r2, #31
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	0028      	movs	r0, r5
 8000bda:	0019      	movs	r1, r3
 8000bdc:	b005      	add	sp, #20
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	2400      	movs	r4, #0
 8000bec:	2500      	movs	r5, #0
 8000bee:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <__aeabi_ddiv+0x378>)
 8000bf0:	e7ed      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000bf2:	46ba      	mov	sl, r7
 8000bf4:	46a0      	mov	r8, r4
 8000bf6:	0015      	movs	r5, r2
 8000bf8:	9000      	str	r0, [sp, #0]
 8000bfa:	e7dc      	b.n	8000bb6 <__aeabi_ddiv+0x96>
 8000bfc:	4544      	cmp	r4, r8
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0xe2>
 8000c00:	e1c7      	b.n	8000f92 <__aeabi_ddiv+0x472>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0xe6>
 8000c04:	e1c2      	b.n	8000f8c <__aeabi_ddiv+0x46c>
 8000c06:	2301      	movs	r3, #1
 8000c08:	425b      	negs	r3, r3
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	002e      	movs	r6, r5
 8000c0e:	4640      	mov	r0, r8
 8000c10:	2500      	movs	r5, #0
 8000c12:	44e3      	add	fp, ip
 8000c14:	0223      	lsls	r3, r4, #8
 8000c16:	0e14      	lsrs	r4, r2, #24
 8000c18:	431c      	orrs	r4, r3
 8000c1a:	0c1b      	lsrs	r3, r3, #16
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	0423      	lsls	r3, r4, #16
 8000c20:	0c1f      	lsrs	r7, r3, #16
 8000c22:	0212      	lsls	r2, r2, #8
 8000c24:	4649      	mov	r1, r9
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	9701      	str	r7, [sp, #4]
 8000c2a:	f7ff faf1 	bl	8000210 <__aeabi_uidivmod>
 8000c2e:	0002      	movs	r2, r0
 8000c30:	437a      	muls	r2, r7
 8000c32:	040b      	lsls	r3, r1, #16
 8000c34:	0c31      	lsrs	r1, r6, #16
 8000c36:	4680      	mov	r8, r0
 8000c38:	4319      	orrs	r1, r3
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	d907      	bls.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425b      	negs	r3, r3
 8000c42:	469c      	mov	ip, r3
 8000c44:	1909      	adds	r1, r1, r4
 8000c46:	44e0      	add	r8, ip
 8000c48:	428c      	cmp	r4, r1
 8000c4a:	d800      	bhi.n	8000c4e <__aeabi_ddiv+0x12e>
 8000c4c:	e207      	b.n	800105e <__aeabi_ddiv+0x53e>
 8000c4e:	1a88      	subs	r0, r1, r2
 8000c50:	4649      	mov	r1, r9
 8000c52:	f7ff fadd 	bl	8000210 <__aeabi_uidivmod>
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	468c      	mov	ip, r1
 8000c5a:	0431      	lsls	r1, r6, #16
 8000c5c:	4666      	mov	r6, ip
 8000c5e:	9a01      	ldr	r2, [sp, #4]
 8000c60:	0c09      	lsrs	r1, r1, #16
 8000c62:	4342      	muls	r2, r0
 8000c64:	0003      	movs	r3, r0
 8000c66:	4331      	orrs	r1, r6
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	d904      	bls.n	8000c76 <__aeabi_ddiv+0x156>
 8000c6c:	1909      	adds	r1, r1, r4
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	428c      	cmp	r4, r1
 8000c72:	d800      	bhi.n	8000c76 <__aeabi_ddiv+0x156>
 8000c74:	e1ed      	b.n	8001052 <__aeabi_ddiv+0x532>
 8000c76:	1a88      	subs	r0, r1, r2
 8000c78:	4642      	mov	r2, r8
 8000c7a:	0412      	lsls	r2, r2, #16
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	4690      	mov	r8, r2
 8000c80:	4641      	mov	r1, r8
 8000c82:	9b00      	ldr	r3, [sp, #0]
 8000c84:	040e      	lsls	r6, r1, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	001f      	movs	r7, r3
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	9b00      	ldr	r3, [sp, #0]
 8000c8e:	0c36      	lsrs	r6, r6, #16
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	0c19      	lsrs	r1, r3, #16
 8000c94:	000b      	movs	r3, r1
 8000c96:	4373      	muls	r3, r6
 8000c98:	0c12      	lsrs	r2, r2, #16
 8000c9a:	437e      	muls	r6, r7
 8000c9c:	9103      	str	r1, [sp, #12]
 8000c9e:	4351      	muls	r1, r2
 8000ca0:	437a      	muls	r2, r7
 8000ca2:	0c1f      	lsrs	r7, r3, #16
 8000ca4:	46bc      	mov	ip, r7
 8000ca6:	1876      	adds	r6, r6, r1
 8000ca8:	4466      	add	r6, ip
 8000caa:	42b1      	cmp	r1, r6
 8000cac:	d903      	bls.n	8000cb6 <__aeabi_ddiv+0x196>
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0249      	lsls	r1, r1, #9
 8000cb2:	468c      	mov	ip, r1
 8000cb4:	4462      	add	r2, ip
 8000cb6:	0c31      	lsrs	r1, r6, #16
 8000cb8:	188a      	adds	r2, r1, r2
 8000cba:	0431      	lsls	r1, r6, #16
 8000cbc:	041e      	lsls	r6, r3, #16
 8000cbe:	0c36      	lsrs	r6, r6, #16
 8000cc0:	198e      	adds	r6, r1, r6
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d302      	bcc.n	8000ccc <__aeabi_ddiv+0x1ac>
 8000cc6:	d112      	bne.n	8000cee <__aeabi_ddiv+0x1ce>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d210      	bcs.n	8000cee <__aeabi_ddiv+0x1ce>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	1e59      	subs	r1, r3, #1
 8000cd0:	9b00      	ldr	r3, [sp, #0]
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	4465      	add	r5, ip
 8000cd6:	001f      	movs	r7, r3
 8000cd8:	429d      	cmp	r5, r3
 8000cda:	419b      	sbcs	r3, r3
 8000cdc:	425b      	negs	r3, r3
 8000cde:	191b      	adds	r3, r3, r4
 8000ce0:	18c0      	adds	r0, r0, r3
 8000ce2:	4284      	cmp	r4, r0
 8000ce4:	d200      	bcs.n	8000ce8 <__aeabi_ddiv+0x1c8>
 8000ce6:	e1a0      	b.n	800102a <__aeabi_ddiv+0x50a>
 8000ce8:	d100      	bne.n	8000cec <__aeabi_ddiv+0x1cc>
 8000cea:	e19b      	b.n	8001024 <__aeabi_ddiv+0x504>
 8000cec:	4688      	mov	r8, r1
 8000cee:	1bae      	subs	r6, r5, r6
 8000cf0:	42b5      	cmp	r5, r6
 8000cf2:	41ad      	sbcs	r5, r5
 8000cf4:	1a80      	subs	r0, r0, r2
 8000cf6:	426d      	negs	r5, r5
 8000cf8:	1b40      	subs	r0, r0, r5
 8000cfa:	4284      	cmp	r4, r0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_ddiv+0x1e0>
 8000cfe:	e1d5      	b.n	80010ac <__aeabi_ddiv+0x58c>
 8000d00:	4649      	mov	r1, r9
 8000d02:	f7ff fa85 	bl	8000210 <__aeabi_uidivmod>
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	040b      	lsls	r3, r1, #16
 8000d0a:	4342      	muls	r2, r0
 8000d0c:	0c31      	lsrs	r1, r6, #16
 8000d0e:	0005      	movs	r5, r0
 8000d10:	4319      	orrs	r1, r3
 8000d12:	428a      	cmp	r2, r1
 8000d14:	d900      	bls.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000d16:	e16c      	b.n	8000ff2 <__aeabi_ddiv+0x4d2>
 8000d18:	1a88      	subs	r0, r1, r2
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	f7ff fa78 	bl	8000210 <__aeabi_uidivmod>
 8000d20:	9a01      	ldr	r2, [sp, #4]
 8000d22:	0436      	lsls	r6, r6, #16
 8000d24:	4342      	muls	r2, r0
 8000d26:	0409      	lsls	r1, r1, #16
 8000d28:	0c36      	lsrs	r6, r6, #16
 8000d2a:	0003      	movs	r3, r0
 8000d2c:	430e      	orrs	r6, r1
 8000d2e:	42b2      	cmp	r2, r6
 8000d30:	d900      	bls.n	8000d34 <__aeabi_ddiv+0x214>
 8000d32:	e153      	b.n	8000fdc <__aeabi_ddiv+0x4bc>
 8000d34:	9803      	ldr	r0, [sp, #12]
 8000d36:	1ab6      	subs	r6, r6, r2
 8000d38:	0002      	movs	r2, r0
 8000d3a:	042d      	lsls	r5, r5, #16
 8000d3c:	431d      	orrs	r5, r3
 8000d3e:	9f02      	ldr	r7, [sp, #8]
 8000d40:	042b      	lsls	r3, r5, #16
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	435a      	muls	r2, r3
 8000d46:	437b      	muls	r3, r7
 8000d48:	469c      	mov	ip, r3
 8000d4a:	0c29      	lsrs	r1, r5, #16
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c13      	lsrs	r3, r2, #16
 8000d50:	4484      	add	ip, r0
 8000d52:	4463      	add	r3, ip
 8000d54:	4379      	muls	r1, r7
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d903      	bls.n	8000d62 <__aeabi_ddiv+0x242>
 8000d5a:	2080      	movs	r0, #128	; 0x80
 8000d5c:	0240      	lsls	r0, r0, #9
 8000d5e:	4684      	mov	ip, r0
 8000d60:	4461      	add	r1, ip
 8000d62:	0c18      	lsrs	r0, r3, #16
 8000d64:	0412      	lsls	r2, r2, #16
 8000d66:	041b      	lsls	r3, r3, #16
 8000d68:	0c12      	lsrs	r2, r2, #16
 8000d6a:	1841      	adds	r1, r0, r1
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	428e      	cmp	r6, r1
 8000d70:	d200      	bcs.n	8000d74 <__aeabi_ddiv+0x254>
 8000d72:	e0ff      	b.n	8000f74 <__aeabi_ddiv+0x454>
 8000d74:	d100      	bne.n	8000d78 <__aeabi_ddiv+0x258>
 8000d76:	e0fa      	b.n	8000f6e <__aeabi_ddiv+0x44e>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	431d      	orrs	r5, r3
 8000d7c:	4a49      	ldr	r2, [pc, #292]	; (8000ea4 <__aeabi_ddiv+0x384>)
 8000d7e:	445a      	add	r2, fp
 8000d80:	2a00      	cmp	r2, #0
 8000d82:	dc00      	bgt.n	8000d86 <__aeabi_ddiv+0x266>
 8000d84:	e0aa      	b.n	8000edc <__aeabi_ddiv+0x3bc>
 8000d86:	076b      	lsls	r3, r5, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_ddiv+0x26c>
 8000d8a:	e13d      	b.n	8001008 <__aeabi_ddiv+0x4e8>
 8000d8c:	08ed      	lsrs	r5, r5, #3
 8000d8e:	4643      	mov	r3, r8
 8000d90:	01db      	lsls	r3, r3, #7
 8000d92:	d506      	bpl.n	8000da2 <__aeabi_ddiv+0x282>
 8000d94:	4642      	mov	r2, r8
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <__aeabi_ddiv+0x388>)
 8000d98:	401a      	ands	r2, r3
 8000d9a:	4690      	mov	r8, r2
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	00d2      	lsls	r2, r2, #3
 8000da0:	445a      	add	r2, fp
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <__aeabi_ddiv+0x38c>)
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd00      	ble.n	8000daa <__aeabi_ddiv+0x28a>
 8000da8:	e71f      	b.n	8000bea <__aeabi_ddiv+0xca>
 8000daa:	4643      	mov	r3, r8
 8000dac:	075b      	lsls	r3, r3, #29
 8000dae:	431d      	orrs	r5, r3
 8000db0:	4643      	mov	r3, r8
 8000db2:	0552      	lsls	r2, r2, #21
 8000db4:	025c      	lsls	r4, r3, #9
 8000db6:	0b24      	lsrs	r4, r4, #12
 8000db8:	0d53      	lsrs	r3, r2, #21
 8000dba:	e708      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000dbc:	4652      	mov	r2, sl
 8000dbe:	4322      	orrs	r2, r4
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_ddiv+0x2a4>
 8000dc2:	e07b      	b.n	8000ebc <__aeabi_ddiv+0x39c>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0x2aa>
 8000dc8:	e0fa      	b.n	8000fc0 <__aeabi_ddiv+0x4a0>
 8000dca:	0020      	movs	r0, r4
 8000dcc:	f001 f934 	bl	8002038 <__clzsi2>
 8000dd0:	0002      	movs	r2, r0
 8000dd2:	3a0b      	subs	r2, #11
 8000dd4:	231d      	movs	r3, #29
 8000dd6:	0001      	movs	r1, r0
 8000dd8:	1a9b      	subs	r3, r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	3908      	subs	r1, #8
 8000dde:	40da      	lsrs	r2, r3
 8000de0:	408c      	lsls	r4, r1
 8000de2:	4314      	orrs	r4, r2
 8000de4:	4652      	mov	r2, sl
 8000de6:	408a      	lsls	r2, r1
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <__aeabi_ddiv+0x390>)
 8000dea:	4458      	add	r0, fp
 8000dec:	469b      	mov	fp, r3
 8000dee:	4483      	add	fp, r0
 8000df0:	2000      	movs	r0, #0
 8000df2:	e6d5      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000df4:	464b      	mov	r3, r9
 8000df6:	4323      	orrs	r3, r4
 8000df8:	4698      	mov	r8, r3
 8000dfa:	d044      	beq.n	8000e86 <__aeabi_ddiv+0x366>
 8000dfc:	2c00      	cmp	r4, #0
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x2e2>
 8000e00:	e0ce      	b.n	8000fa0 <__aeabi_ddiv+0x480>
 8000e02:	0020      	movs	r0, r4
 8000e04:	f001 f918 	bl	8002038 <__clzsi2>
 8000e08:	0001      	movs	r1, r0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	390b      	subs	r1, #11
 8000e0e:	231d      	movs	r3, #29
 8000e10:	1a5b      	subs	r3, r3, r1
 8000e12:	4649      	mov	r1, r9
 8000e14:	0010      	movs	r0, r2
 8000e16:	40d9      	lsrs	r1, r3
 8000e18:	3808      	subs	r0, #8
 8000e1a:	4084      	lsls	r4, r0
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	464d      	mov	r5, r9
 8000e20:	4323      	orrs	r3, r4
 8000e22:	4698      	mov	r8, r3
 8000e24:	4085      	lsls	r5, r0
 8000e26:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <__aeabi_ddiv+0x394>)
 8000e28:	1a83      	subs	r3, r0, r2
 8000e2a:	469b      	mov	fp, r3
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4699      	mov	r9, r3
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	e69a      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e34:	464b      	mov	r3, r9
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d11d      	bne.n	8000e78 <__aeabi_ddiv+0x358>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	4699      	mov	r9, r3
 8000e40:	3b06      	subs	r3, #6
 8000e42:	2500      	movs	r5, #0
 8000e44:	4683      	mov	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	e68f      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e4a:	4652      	mov	r2, sl
 8000e4c:	4322      	orrs	r2, r4
 8000e4e:	d109      	bne.n	8000e64 <__aeabi_ddiv+0x344>
 8000e50:	2302      	movs	r3, #2
 8000e52:	4649      	mov	r1, r9
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e58:	4689      	mov	r9, r1
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	2400      	movs	r4, #0
 8000e5e:	2002      	movs	r0, #2
 8000e60:	44e3      	add	fp, ip
 8000e62:	e69d      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e64:	2303      	movs	r3, #3
 8000e66:	464a      	mov	r2, r9
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <__aeabi_ddiv+0x398>)
 8000e6c:	4691      	mov	r9, r2
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4652      	mov	r2, sl
 8000e72:	2003      	movs	r0, #3
 8000e74:	44e3      	add	fp, ip
 8000e76:	e693      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000e78:	230c      	movs	r3, #12
 8000e7a:	4699      	mov	r9, r3
 8000e7c:	3b09      	subs	r3, #9
 8000e7e:	46a0      	mov	r8, r4
 8000e80:	4683      	mov	fp, r0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e671      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	4699      	mov	r9, r3
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2500      	movs	r5, #0
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	e669      	b.n	8000b6a <__aeabi_ddiv+0x4a>
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	000007ff 	.word	0x000007ff
 8000e9c:	fffffc01 	.word	0xfffffc01
 8000ea0:	0800f7ac 	.word	0x0800f7ac
 8000ea4:	000003ff 	.word	0x000003ff
 8000ea8:	feffffff 	.word	0xfeffffff
 8000eac:	000007fe 	.word	0x000007fe
 8000eb0:	000003f3 	.word	0x000003f3
 8000eb4:	fffffc0d 	.word	0xfffffc0d
 8000eb8:	fffff801 	.word	0xfffff801
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4319      	orrs	r1, r3
 8000ec2:	4689      	mov	r9, r1
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	e66a      	b.n	8000ba0 <__aeabi_ddiv+0x80>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2480      	movs	r4, #128	; 0x80
 8000ece:	469a      	mov	sl, r3
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	4b8a      	ldr	r3, [pc, #552]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000ed4:	0324      	lsls	r4, r4, #12
 8000ed6:	e67a      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000ed8:	2501      	movs	r5, #1
 8000eda:	426d      	negs	r5, r5
 8000edc:	2301      	movs	r3, #1
 8000ede:	1a9b      	subs	r3, r3, r2
 8000ee0:	2b38      	cmp	r3, #56	; 0x38
 8000ee2:	dd00      	ble.n	8000ee6 <__aeabi_ddiv+0x3c6>
 8000ee4:	e670      	b.n	8000bc8 <__aeabi_ddiv+0xa8>
 8000ee6:	2b1f      	cmp	r3, #31
 8000ee8:	dc00      	bgt.n	8000eec <__aeabi_ddiv+0x3cc>
 8000eea:	e0bf      	b.n	800106c <__aeabi_ddiv+0x54c>
 8000eec:	211f      	movs	r1, #31
 8000eee:	4249      	negs	r1, r1
 8000ef0:	1a8a      	subs	r2, r1, r2
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	40d1      	lsrs	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	2b20      	cmp	r3, #32
 8000efa:	d004      	beq.n	8000f06 <__aeabi_ddiv+0x3e6>
 8000efc:	4641      	mov	r1, r8
 8000efe:	4b80      	ldr	r3, [pc, #512]	; (8001100 <__aeabi_ddiv+0x5e0>)
 8000f00:	445b      	add	r3, fp
 8000f02:	4099      	lsls	r1, r3
 8000f04:	430d      	orrs	r5, r1
 8000f06:	1e6b      	subs	r3, r5, #1
 8000f08:	419d      	sbcs	r5, r3
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	432a      	orrs	r2, r5
 8000f0e:	001d      	movs	r5, r3
 8000f10:	2400      	movs	r4, #0
 8000f12:	4015      	ands	r5, r2
 8000f14:	4213      	tst	r3, r2
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x3fa>
 8000f18:	e0d4      	b.n	80010c4 <__aeabi_ddiv+0x5a4>
 8000f1a:	210f      	movs	r1, #15
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4011      	ands	r1, r2
 8000f20:	2904      	cmp	r1, #4
 8000f22:	d100      	bne.n	8000f26 <__aeabi_ddiv+0x406>
 8000f24:	e0cb      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f26:	1d11      	adds	r1, r2, #4
 8000f28:	4291      	cmp	r1, r2
 8000f2a:	4192      	sbcs	r2, r2
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	189b      	adds	r3, r3, r2
 8000f30:	000a      	movs	r2, r1
 8000f32:	0219      	lsls	r1, r3, #8
 8000f34:	d400      	bmi.n	8000f38 <__aeabi_ddiv+0x418>
 8000f36:	e0c2      	b.n	80010be <__aeabi_ddiv+0x59e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	2400      	movs	r4, #0
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	e646      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	4641      	mov	r1, r8
 8000f44:	031b      	lsls	r3, r3, #12
 8000f46:	4219      	tst	r1, r3
 8000f48:	d008      	beq.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4a:	421c      	tst	r4, r3
 8000f4c:	d106      	bne.n	8000f5c <__aeabi_ddiv+0x43c>
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	0324      	lsls	r4, r4, #12
 8000f52:	46ba      	mov	sl, r7
 8000f54:	0015      	movs	r5, r2
 8000f56:	4b69      	ldr	r3, [pc, #420]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f58:	0b24      	lsrs	r4, r4, #12
 8000f5a:	e638      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f5c:	2480      	movs	r4, #128	; 0x80
 8000f5e:	4643      	mov	r3, r8
 8000f60:	0324      	lsls	r4, r4, #12
 8000f62:	431c      	orrs	r4, r3
 8000f64:	0324      	lsls	r4, r4, #12
 8000f66:	46b2      	mov	sl, r6
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <__aeabi_ddiv+0x5dc>)
 8000f6a:	0b24      	lsrs	r4, r4, #12
 8000f6c:	e62f      	b.n	8000bce <__aeabi_ddiv+0xae>
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x454>
 8000f72:	e703      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 8000f74:	19a6      	adds	r6, r4, r6
 8000f76:	1e68      	subs	r0, r5, #1
 8000f78:	42a6      	cmp	r6, r4
 8000f7a:	d200      	bcs.n	8000f7e <__aeabi_ddiv+0x45e>
 8000f7c:	e08d      	b.n	800109a <__aeabi_ddiv+0x57a>
 8000f7e:	428e      	cmp	r6, r1
 8000f80:	d200      	bcs.n	8000f84 <__aeabi_ddiv+0x464>
 8000f82:	e0a3      	b.n	80010cc <__aeabi_ddiv+0x5ac>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x468>
 8000f86:	e0b3      	b.n	80010f0 <__aeabi_ddiv+0x5d0>
 8000f88:	0005      	movs	r5, r0
 8000f8a:	e6f5      	b.n	8000d78 <__aeabi_ddiv+0x258>
 8000f8c:	42aa      	cmp	r2, r5
 8000f8e:	d900      	bls.n	8000f92 <__aeabi_ddiv+0x472>
 8000f90:	e639      	b.n	8000c06 <__aeabi_ddiv+0xe6>
 8000f92:	4643      	mov	r3, r8
 8000f94:	07de      	lsls	r6, r3, #31
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	086b      	lsrs	r3, r5, #1
 8000f9a:	431e      	orrs	r6, r3
 8000f9c:	07ed      	lsls	r5, r5, #31
 8000f9e:	e639      	b.n	8000c14 <__aeabi_ddiv+0xf4>
 8000fa0:	4648      	mov	r0, r9
 8000fa2:	f001 f849 	bl	8002038 <__clzsi2>
 8000fa6:	0001      	movs	r1, r0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	3115      	adds	r1, #21
 8000fac:	3220      	adds	r2, #32
 8000fae:	291c      	cmp	r1, #28
 8000fb0:	dc00      	bgt.n	8000fb4 <__aeabi_ddiv+0x494>
 8000fb2:	e72c      	b.n	8000e0e <__aeabi_ddiv+0x2ee>
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	3808      	subs	r0, #8
 8000fb8:	4083      	lsls	r3, r0
 8000fba:	2500      	movs	r5, #0
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	e732      	b.n	8000e26 <__aeabi_ddiv+0x306>
 8000fc0:	f001 f83a 	bl	8002038 <__clzsi2>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	3215      	adds	r2, #21
 8000fca:	3020      	adds	r0, #32
 8000fcc:	2a1c      	cmp	r2, #28
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x4b2>
 8000fd0:	e700      	b.n	8000dd4 <__aeabi_ddiv+0x2b4>
 8000fd2:	4654      	mov	r4, sl
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	e705      	b.n	8000de8 <__aeabi_ddiv+0x2c8>
 8000fdc:	1936      	adds	r6, r6, r4
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	42b4      	cmp	r4, r6
 8000fe2:	d900      	bls.n	8000fe6 <__aeabi_ddiv+0x4c6>
 8000fe4:	e6a6      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fe6:	42b2      	cmp	r2, r6
 8000fe8:	d800      	bhi.n	8000fec <__aeabi_ddiv+0x4cc>
 8000fea:	e6a3      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000fec:	1e83      	subs	r3, r0, #2
 8000fee:	1936      	adds	r6, r6, r4
 8000ff0:	e6a0      	b.n	8000d34 <__aeabi_ddiv+0x214>
 8000ff2:	1909      	adds	r1, r1, r4
 8000ff4:	3d01      	subs	r5, #1
 8000ff6:	428c      	cmp	r4, r1
 8000ff8:	d900      	bls.n	8000ffc <__aeabi_ddiv+0x4dc>
 8000ffa:	e68d      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8000ffc:	428a      	cmp	r2, r1
 8000ffe:	d800      	bhi.n	8001002 <__aeabi_ddiv+0x4e2>
 8001000:	e68a      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001002:	1e85      	subs	r5, r0, #2
 8001004:	1909      	adds	r1, r1, r4
 8001006:	e687      	b.n	8000d18 <__aeabi_ddiv+0x1f8>
 8001008:	230f      	movs	r3, #15
 800100a:	402b      	ands	r3, r5
 800100c:	2b04      	cmp	r3, #4
 800100e:	d100      	bne.n	8001012 <__aeabi_ddiv+0x4f2>
 8001010:	e6bc      	b.n	8000d8c <__aeabi_ddiv+0x26c>
 8001012:	2305      	movs	r3, #5
 8001014:	425b      	negs	r3, r3
 8001016:	42ab      	cmp	r3, r5
 8001018:	419b      	sbcs	r3, r3
 800101a:	3504      	adds	r5, #4
 800101c:	425b      	negs	r3, r3
 800101e:	08ed      	lsrs	r5, r5, #3
 8001020:	4498      	add	r8, r3
 8001022:	e6b4      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 8001024:	42af      	cmp	r7, r5
 8001026:	d900      	bls.n	800102a <__aeabi_ddiv+0x50a>
 8001028:	e660      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 800102a:	4282      	cmp	r2, r0
 800102c:	d804      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 800102e:	d000      	beq.n	8001032 <__aeabi_ddiv+0x512>
 8001030:	e65c      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001032:	42ae      	cmp	r6, r5
 8001034:	d800      	bhi.n	8001038 <__aeabi_ddiv+0x518>
 8001036:	e659      	b.n	8000cec <__aeabi_ddiv+0x1cc>
 8001038:	2302      	movs	r3, #2
 800103a:	425b      	negs	r3, r3
 800103c:	469c      	mov	ip, r3
 800103e:	9b00      	ldr	r3, [sp, #0]
 8001040:	44e0      	add	r8, ip
 8001042:	469c      	mov	ip, r3
 8001044:	4465      	add	r5, ip
 8001046:	429d      	cmp	r5, r3
 8001048:	419b      	sbcs	r3, r3
 800104a:	425b      	negs	r3, r3
 800104c:	191b      	adds	r3, r3, r4
 800104e:	18c0      	adds	r0, r0, r3
 8001050:	e64d      	b.n	8000cee <__aeabi_ddiv+0x1ce>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x538>
 8001056:	e60e      	b.n	8000c76 <__aeabi_ddiv+0x156>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	1909      	adds	r1, r1, r4
 800105c:	e60b      	b.n	8000c76 <__aeabi_ddiv+0x156>
 800105e:	428a      	cmp	r2, r1
 8001060:	d800      	bhi.n	8001064 <__aeabi_ddiv+0x544>
 8001062:	e5f4      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 8001064:	1e83      	subs	r3, r0, #2
 8001066:	4698      	mov	r8, r3
 8001068:	1909      	adds	r1, r1, r4
 800106a:	e5f0      	b.n	8000c4e <__aeabi_ddiv+0x12e>
 800106c:	4925      	ldr	r1, [pc, #148]	; (8001104 <__aeabi_ddiv+0x5e4>)
 800106e:	0028      	movs	r0, r5
 8001070:	4459      	add	r1, fp
 8001072:	408d      	lsls	r5, r1
 8001074:	4642      	mov	r2, r8
 8001076:	408a      	lsls	r2, r1
 8001078:	1e69      	subs	r1, r5, #1
 800107a:	418d      	sbcs	r5, r1
 800107c:	4641      	mov	r1, r8
 800107e:	40d8      	lsrs	r0, r3
 8001080:	40d9      	lsrs	r1, r3
 8001082:	4302      	orrs	r2, r0
 8001084:	432a      	orrs	r2, r5
 8001086:	000b      	movs	r3, r1
 8001088:	0751      	lsls	r1, r2, #29
 800108a:	d100      	bne.n	800108e <__aeabi_ddiv+0x56e>
 800108c:	e751      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800108e:	210f      	movs	r1, #15
 8001090:	4011      	ands	r1, r2
 8001092:	2904      	cmp	r1, #4
 8001094:	d000      	beq.n	8001098 <__aeabi_ddiv+0x578>
 8001096:	e746      	b.n	8000f26 <__aeabi_ddiv+0x406>
 8001098:	e74b      	b.n	8000f32 <__aeabi_ddiv+0x412>
 800109a:	0005      	movs	r5, r0
 800109c:	428e      	cmp	r6, r1
 800109e:	d000      	beq.n	80010a2 <__aeabi_ddiv+0x582>
 80010a0:	e66a      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d000      	beq.n	80010aa <__aeabi_ddiv+0x58a>
 80010a8:	e666      	b.n	8000d78 <__aeabi_ddiv+0x258>
 80010aa:	e667      	b.n	8000d7c <__aeabi_ddiv+0x25c>
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <__aeabi_ddiv+0x5e8>)
 80010ae:	445a      	add	r2, fp
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x596>
 80010b4:	e710      	b.n	8000ed8 <__aeabi_ddiv+0x3b8>
 80010b6:	2301      	movs	r3, #1
 80010b8:	2500      	movs	r5, #0
 80010ba:	4498      	add	r8, r3
 80010bc:	e667      	b.n	8000d8e <__aeabi_ddiv+0x26e>
 80010be:	075d      	lsls	r5, r3, #29
 80010c0:	025b      	lsls	r3, r3, #9
 80010c2:	0b1c      	lsrs	r4, r3, #12
 80010c4:	08d2      	lsrs	r2, r2, #3
 80010c6:	2300      	movs	r3, #0
 80010c8:	4315      	orrs	r5, r2
 80010ca:	e580      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010cc:	9800      	ldr	r0, [sp, #0]
 80010ce:	3d02      	subs	r5, #2
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	4282      	cmp	r2, r0
 80010d4:	41bf      	sbcs	r7, r7
 80010d6:	427f      	negs	r7, r7
 80010d8:	193c      	adds	r4, r7, r4
 80010da:	1936      	adds	r6, r6, r4
 80010dc:	9200      	str	r2, [sp, #0]
 80010de:	e7dd      	b.n	800109c <__aeabi_ddiv+0x57c>
 80010e0:	2480      	movs	r4, #128	; 0x80
 80010e2:	4643      	mov	r3, r8
 80010e4:	0324      	lsls	r4, r4, #12
 80010e6:	431c      	orrs	r4, r3
 80010e8:	0324      	lsls	r4, r4, #12
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__aeabi_ddiv+0x5dc>)
 80010ec:	0b24      	lsrs	r4, r4, #12
 80010ee:	e56e      	b.n	8000bce <__aeabi_ddiv+0xae>
 80010f0:	9a00      	ldr	r2, [sp, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3ea      	bcc.n	80010cc <__aeabi_ddiv+0x5ac>
 80010f6:	0005      	movs	r5, r0
 80010f8:	e7d3      	b.n	80010a2 <__aeabi_ddiv+0x582>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000043e 	.word	0x0000043e
 8001104:	0000041e 	.word	0x0000041e
 8001108:	000003ff 	.word	0x000003ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464e      	mov	r6, r9
 8001110:	4645      	mov	r5, r8
 8001112:	46de      	mov	lr, fp
 8001114:	4657      	mov	r7, sl
 8001116:	4690      	mov	r8, r2
 8001118:	b5e0      	push	{r5, r6, r7, lr}
 800111a:	0017      	movs	r7, r2
 800111c:	031a      	lsls	r2, r3, #12
 800111e:	0b12      	lsrs	r2, r2, #12
 8001120:	0005      	movs	r5, r0
 8001122:	4684      	mov	ip, r0
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <__eqdf2+0x80>)
 8001126:	030e      	lsls	r6, r1, #12
 8001128:	004c      	lsls	r4, r1, #1
 800112a:	4691      	mov	r9, r2
 800112c:	005a      	lsls	r2, r3, #1
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	469b      	mov	fp, r3
 8001132:	0b36      	lsrs	r6, r6, #12
 8001134:	0d64      	lsrs	r4, r4, #21
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	0d52      	lsrs	r2, r2, #21
 800113a:	4284      	cmp	r4, r0
 800113c:	d019      	beq.n	8001172 <__eqdf2+0x66>
 800113e:	4282      	cmp	r2, r0
 8001140:	d010      	beq.n	8001164 <__eqdf2+0x58>
 8001142:	2001      	movs	r0, #1
 8001144:	4294      	cmp	r4, r2
 8001146:	d10e      	bne.n	8001166 <__eqdf2+0x5a>
 8001148:	454e      	cmp	r6, r9
 800114a:	d10c      	bne.n	8001166 <__eqdf2+0x5a>
 800114c:	2001      	movs	r0, #1
 800114e:	45c4      	cmp	ip, r8
 8001150:	d109      	bne.n	8001166 <__eqdf2+0x5a>
 8001152:	4559      	cmp	r1, fp
 8001154:	d017      	beq.n	8001186 <__eqdf2+0x7a>
 8001156:	2c00      	cmp	r4, #0
 8001158:	d105      	bne.n	8001166 <__eqdf2+0x5a>
 800115a:	0030      	movs	r0, r6
 800115c:	4328      	orrs	r0, r5
 800115e:	1e43      	subs	r3, r0, #1
 8001160:	4198      	sbcs	r0, r3
 8001162:	e000      	b.n	8001166 <__eqdf2+0x5a>
 8001164:	2001      	movs	r0, #1
 8001166:	bcf0      	pop	{r4, r5, r6, r7}
 8001168:	46bb      	mov	fp, r7
 800116a:	46b2      	mov	sl, r6
 800116c:	46a9      	mov	r9, r5
 800116e:	46a0      	mov	r8, r4
 8001170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001172:	0033      	movs	r3, r6
 8001174:	2001      	movs	r0, #1
 8001176:	432b      	orrs	r3, r5
 8001178:	d1f5      	bne.n	8001166 <__eqdf2+0x5a>
 800117a:	42a2      	cmp	r2, r4
 800117c:	d1f3      	bne.n	8001166 <__eqdf2+0x5a>
 800117e:	464b      	mov	r3, r9
 8001180:	433b      	orrs	r3, r7
 8001182:	d1f0      	bne.n	8001166 <__eqdf2+0x5a>
 8001184:	e7e2      	b.n	800114c <__eqdf2+0x40>
 8001186:	2000      	movs	r0, #0
 8001188:	e7ed      	b.n	8001166 <__eqdf2+0x5a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff

08001190 <__gedf2>:
 8001190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001192:	4647      	mov	r7, r8
 8001194:	46ce      	mov	lr, r9
 8001196:	0004      	movs	r4, r0
 8001198:	0018      	movs	r0, r3
 800119a:	0016      	movs	r6, r2
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	0b1b      	lsrs	r3, r3, #12
 80011a0:	4d2d      	ldr	r5, [pc, #180]	; (8001258 <__gedf2+0xc8>)
 80011a2:	004a      	lsls	r2, r1, #1
 80011a4:	4699      	mov	r9, r3
 80011a6:	b580      	push	{r7, lr}
 80011a8:	0043      	lsls	r3, r0, #1
 80011aa:	030f      	lsls	r7, r1, #12
 80011ac:	46a4      	mov	ip, r4
 80011ae:	46b0      	mov	r8, r6
 80011b0:	0b3f      	lsrs	r7, r7, #12
 80011b2:	0d52      	lsrs	r2, r2, #21
 80011b4:	0fc9      	lsrs	r1, r1, #31
 80011b6:	0d5b      	lsrs	r3, r3, #21
 80011b8:	0fc0      	lsrs	r0, r0, #31
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d021      	beq.n	8001202 <__gedf2+0x72>
 80011be:	42ab      	cmp	r3, r5
 80011c0:	d013      	beq.n	80011ea <__gedf2+0x5a>
 80011c2:	2a00      	cmp	r2, #0
 80011c4:	d122      	bne.n	800120c <__gedf2+0x7c>
 80011c6:	433c      	orrs	r4, r7
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d102      	bne.n	80011d2 <__gedf2+0x42>
 80011cc:	464d      	mov	r5, r9
 80011ce:	432e      	orrs	r6, r5
 80011d0:	d022      	beq.n	8001218 <__gedf2+0x88>
 80011d2:	2c00      	cmp	r4, #0
 80011d4:	d010      	beq.n	80011f8 <__gedf2+0x68>
 80011d6:	4281      	cmp	r1, r0
 80011d8:	d022      	beq.n	8001220 <__gedf2+0x90>
 80011da:	2002      	movs	r0, #2
 80011dc:	3901      	subs	r1, #1
 80011de:	4008      	ands	r0, r1
 80011e0:	3801      	subs	r0, #1
 80011e2:	bcc0      	pop	{r6, r7}
 80011e4:	46b9      	mov	r9, r7
 80011e6:	46b0      	mov	r8, r6
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	464d      	mov	r5, r9
 80011ec:	432e      	orrs	r6, r5
 80011ee:	d129      	bne.n	8001244 <__gedf2+0xb4>
 80011f0:	2a00      	cmp	r2, #0
 80011f2:	d1f0      	bne.n	80011d6 <__gedf2+0x46>
 80011f4:	433c      	orrs	r4, r7
 80011f6:	d1ee      	bne.n	80011d6 <__gedf2+0x46>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d1f2      	bne.n	80011e2 <__gedf2+0x52>
 80011fc:	2001      	movs	r0, #1
 80011fe:	4240      	negs	r0, r0
 8001200:	e7ef      	b.n	80011e2 <__gedf2+0x52>
 8001202:	003d      	movs	r5, r7
 8001204:	4325      	orrs	r5, r4
 8001206:	d11d      	bne.n	8001244 <__gedf2+0xb4>
 8001208:	4293      	cmp	r3, r2
 800120a:	d0ee      	beq.n	80011ea <__gedf2+0x5a>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1e2      	bne.n	80011d6 <__gedf2+0x46>
 8001210:	464c      	mov	r4, r9
 8001212:	4326      	orrs	r6, r4
 8001214:	d1df      	bne.n	80011d6 <__gedf2+0x46>
 8001216:	e7e0      	b.n	80011da <__gedf2+0x4a>
 8001218:	2000      	movs	r0, #0
 800121a:	2c00      	cmp	r4, #0
 800121c:	d0e1      	beq.n	80011e2 <__gedf2+0x52>
 800121e:	e7dc      	b.n	80011da <__gedf2+0x4a>
 8001220:	429a      	cmp	r2, r3
 8001222:	dc0a      	bgt.n	800123a <__gedf2+0xaa>
 8001224:	dbe8      	blt.n	80011f8 <__gedf2+0x68>
 8001226:	454f      	cmp	r7, r9
 8001228:	d8d7      	bhi.n	80011da <__gedf2+0x4a>
 800122a:	d00e      	beq.n	800124a <__gedf2+0xba>
 800122c:	2000      	movs	r0, #0
 800122e:	454f      	cmp	r7, r9
 8001230:	d2d7      	bcs.n	80011e2 <__gedf2+0x52>
 8001232:	2900      	cmp	r1, #0
 8001234:	d0e2      	beq.n	80011fc <__gedf2+0x6c>
 8001236:	0008      	movs	r0, r1
 8001238:	e7d3      	b.n	80011e2 <__gedf2+0x52>
 800123a:	4243      	negs	r3, r0
 800123c:	4158      	adcs	r0, r3
 800123e:	0040      	lsls	r0, r0, #1
 8001240:	3801      	subs	r0, #1
 8001242:	e7ce      	b.n	80011e2 <__gedf2+0x52>
 8001244:	2002      	movs	r0, #2
 8001246:	4240      	negs	r0, r0
 8001248:	e7cb      	b.n	80011e2 <__gedf2+0x52>
 800124a:	45c4      	cmp	ip, r8
 800124c:	d8c5      	bhi.n	80011da <__gedf2+0x4a>
 800124e:	2000      	movs	r0, #0
 8001250:	45c4      	cmp	ip, r8
 8001252:	d2c6      	bcs.n	80011e2 <__gedf2+0x52>
 8001254:	e7ed      	b.n	8001232 <__gedf2+0xa2>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff

0800125c <__ledf2>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	4647      	mov	r7, r8
 8001260:	46ce      	mov	lr, r9
 8001262:	0004      	movs	r4, r0
 8001264:	0018      	movs	r0, r3
 8001266:	0016      	movs	r6, r2
 8001268:	031b      	lsls	r3, r3, #12
 800126a:	0b1b      	lsrs	r3, r3, #12
 800126c:	4d2c      	ldr	r5, [pc, #176]	; (8001320 <__ledf2+0xc4>)
 800126e:	004a      	lsls	r2, r1, #1
 8001270:	4699      	mov	r9, r3
 8001272:	b580      	push	{r7, lr}
 8001274:	0043      	lsls	r3, r0, #1
 8001276:	030f      	lsls	r7, r1, #12
 8001278:	46a4      	mov	ip, r4
 800127a:	46b0      	mov	r8, r6
 800127c:	0b3f      	lsrs	r7, r7, #12
 800127e:	0d52      	lsrs	r2, r2, #21
 8001280:	0fc9      	lsrs	r1, r1, #31
 8001282:	0d5b      	lsrs	r3, r3, #21
 8001284:	0fc0      	lsrs	r0, r0, #31
 8001286:	42aa      	cmp	r2, r5
 8001288:	d00d      	beq.n	80012a6 <__ledf2+0x4a>
 800128a:	42ab      	cmp	r3, r5
 800128c:	d010      	beq.n	80012b0 <__ledf2+0x54>
 800128e:	2a00      	cmp	r2, #0
 8001290:	d127      	bne.n	80012e2 <__ledf2+0x86>
 8001292:	433c      	orrs	r4, r7
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <__ledf2+0x60>
 8001298:	464d      	mov	r5, r9
 800129a:	432e      	orrs	r6, r5
 800129c:	d10e      	bne.n	80012bc <__ledf2+0x60>
 800129e:	2000      	movs	r0, #0
 80012a0:	2c00      	cmp	r4, #0
 80012a2:	d015      	beq.n	80012d0 <__ledf2+0x74>
 80012a4:	e00e      	b.n	80012c4 <__ledf2+0x68>
 80012a6:	003d      	movs	r5, r7
 80012a8:	4325      	orrs	r5, r4
 80012aa:	d110      	bne.n	80012ce <__ledf2+0x72>
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d118      	bne.n	80012e2 <__ledf2+0x86>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d10b      	bne.n	80012ce <__ledf2+0x72>
 80012b6:	2a00      	cmp	r2, #0
 80012b8:	d102      	bne.n	80012c0 <__ledf2+0x64>
 80012ba:	433c      	orrs	r4, r7
 80012bc:	2c00      	cmp	r4, #0
 80012be:	d00b      	beq.n	80012d8 <__ledf2+0x7c>
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d014      	beq.n	80012ee <__ledf2+0x92>
 80012c4:	2002      	movs	r0, #2
 80012c6:	3901      	subs	r1, #1
 80012c8:	4008      	ands	r0, r1
 80012ca:	3801      	subs	r0, #1
 80012cc:	e000      	b.n	80012d0 <__ledf2+0x74>
 80012ce:	2002      	movs	r0, #2
 80012d0:	bcc0      	pop	{r6, r7}
 80012d2:	46b9      	mov	r9, r7
 80012d4:	46b0      	mov	r8, r6
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1f9      	bne.n	80012d0 <__ledf2+0x74>
 80012dc:	2001      	movs	r0, #1
 80012de:	4240      	negs	r0, r0
 80012e0:	e7f6      	b.n	80012d0 <__ledf2+0x74>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ec      	bne.n	80012c0 <__ledf2+0x64>
 80012e6:	464c      	mov	r4, r9
 80012e8:	4326      	orrs	r6, r4
 80012ea:	d1e9      	bne.n	80012c0 <__ledf2+0x64>
 80012ec:	e7ea      	b.n	80012c4 <__ledf2+0x68>
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd04      	ble.n	80012fc <__ledf2+0xa0>
 80012f2:	4243      	negs	r3, r0
 80012f4:	4158      	adcs	r0, r3
 80012f6:	0040      	lsls	r0, r0, #1
 80012f8:	3801      	subs	r0, #1
 80012fa:	e7e9      	b.n	80012d0 <__ledf2+0x74>
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbeb      	blt.n	80012d8 <__ledf2+0x7c>
 8001300:	454f      	cmp	r7, r9
 8001302:	d8df      	bhi.n	80012c4 <__ledf2+0x68>
 8001304:	d006      	beq.n	8001314 <__ledf2+0xb8>
 8001306:	2000      	movs	r0, #0
 8001308:	454f      	cmp	r7, r9
 800130a:	d2e1      	bcs.n	80012d0 <__ledf2+0x74>
 800130c:	2900      	cmp	r1, #0
 800130e:	d0e5      	beq.n	80012dc <__ledf2+0x80>
 8001310:	0008      	movs	r0, r1
 8001312:	e7dd      	b.n	80012d0 <__ledf2+0x74>
 8001314:	45c4      	cmp	ip, r8
 8001316:	d8d5      	bhi.n	80012c4 <__ledf2+0x68>
 8001318:	2000      	movs	r0, #0
 800131a:	45c4      	cmp	ip, r8
 800131c:	d2d8      	bcs.n	80012d0 <__ledf2+0x74>
 800131e:	e7f5      	b.n	800130c <__ledf2+0xb0>
 8001320:	000007ff 	.word	0x000007ff

08001324 <__aeabi_dmul>:
 8001324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001326:	4657      	mov	r7, sl
 8001328:	464e      	mov	r6, r9
 800132a:	4645      	mov	r5, r8
 800132c:	46de      	mov	lr, fp
 800132e:	b5e0      	push	{r5, r6, r7, lr}
 8001330:	4698      	mov	r8, r3
 8001332:	030c      	lsls	r4, r1, #12
 8001334:	004b      	lsls	r3, r1, #1
 8001336:	0006      	movs	r6, r0
 8001338:	4692      	mov	sl, r2
 800133a:	b087      	sub	sp, #28
 800133c:	0b24      	lsrs	r4, r4, #12
 800133e:	0d5b      	lsrs	r3, r3, #21
 8001340:	0fcf      	lsrs	r7, r1, #31
 8001342:	2b00      	cmp	r3, #0
 8001344:	d100      	bne.n	8001348 <__aeabi_dmul+0x24>
 8001346:	e15c      	b.n	8001602 <__aeabi_dmul+0x2de>
 8001348:	4ad9      	ldr	r2, [pc, #868]	; (80016b0 <__aeabi_dmul+0x38c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0x2c>
 800134e:	e175      	b.n	800163c <__aeabi_dmul+0x318>
 8001350:	0f42      	lsrs	r2, r0, #29
 8001352:	00e4      	lsls	r4, r4, #3
 8001354:	4314      	orrs	r4, r2
 8001356:	2280      	movs	r2, #128	; 0x80
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	4314      	orrs	r4, r2
 800135c:	4ad5      	ldr	r2, [pc, #852]	; (80016b4 <__aeabi_dmul+0x390>)
 800135e:	00c5      	lsls	r5, r0, #3
 8001360:	4694      	mov	ip, r2
 8001362:	4463      	add	r3, ip
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	4699      	mov	r9, r3
 800136a:	469b      	mov	fp, r3
 800136c:	4643      	mov	r3, r8
 800136e:	4642      	mov	r2, r8
 8001370:	031e      	lsls	r6, r3, #12
 8001372:	0fd2      	lsrs	r2, r2, #31
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4650      	mov	r0, sl
 8001378:	4690      	mov	r8, r2
 800137a:	0b36      	lsrs	r6, r6, #12
 800137c:	0d5b      	lsrs	r3, r3, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x5e>
 8001380:	e120      	b.n	80015c4 <__aeabi_dmul+0x2a0>
 8001382:	4acb      	ldr	r2, [pc, #812]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x66>
 8001388:	e162      	b.n	8001650 <__aeabi_dmul+0x32c>
 800138a:	49ca      	ldr	r1, [pc, #808]	; (80016b4 <__aeabi_dmul+0x390>)
 800138c:	0f42      	lsrs	r2, r0, #29
 800138e:	468c      	mov	ip, r1
 8001390:	9900      	ldr	r1, [sp, #0]
 8001392:	4463      	add	r3, ip
 8001394:	00f6      	lsls	r6, r6, #3
 8001396:	468c      	mov	ip, r1
 8001398:	4316      	orrs	r6, r2
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	449c      	add	ip, r3
 800139e:	0412      	lsls	r2, r2, #16
 80013a0:	4663      	mov	r3, ip
 80013a2:	4316      	orrs	r6, r2
 80013a4:	00c2      	lsls	r2, r0, #3
 80013a6:	2000      	movs	r0, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9900      	ldr	r1, [sp, #0]
 80013ac:	4643      	mov	r3, r8
 80013ae:	3101      	adds	r1, #1
 80013b0:	468c      	mov	ip, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	407b      	eors	r3, r7
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	290f      	cmp	r1, #15
 80013ba:	d826      	bhi.n	800140a <__aeabi_dmul+0xe6>
 80013bc:	4bbe      	ldr	r3, [pc, #760]	; (80016b8 <__aeabi_dmul+0x394>)
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	5859      	ldr	r1, [r3, r1]
 80013c2:	468f      	mov	pc, r1
 80013c4:	4643      	mov	r3, r8
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	0034      	movs	r4, r6
 80013ca:	0015      	movs	r5, r2
 80013cc:	4683      	mov	fp, r0
 80013ce:	465b      	mov	r3, fp
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d016      	beq.n	8001402 <__aeabi_dmul+0xde>
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d100      	bne.n	80013da <__aeabi_dmul+0xb6>
 80013d8:	e203      	b.n	80017e2 <__aeabi_dmul+0x4be>
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dmul+0xbc>
 80013de:	e0cd      	b.n	800157c <__aeabi_dmul+0x258>
 80013e0:	2200      	movs	r2, #0
 80013e2:	2400      	movs	r4, #0
 80013e4:	2500      	movs	r5, #0
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	0512      	lsls	r2, r2, #20
 80013ea:	4322      	orrs	r2, r4
 80013ec:	07db      	lsls	r3, r3, #31
 80013ee:	431a      	orrs	r2, r3
 80013f0:	0028      	movs	r0, r5
 80013f2:	0011      	movs	r1, r2
 80013f4:	b007      	add	sp, #28
 80013f6:	bcf0      	pop	{r4, r5, r6, r7}
 80013f8:	46bb      	mov	fp, r7
 80013fa:	46b2      	mov	sl, r6
 80013fc:	46a9      	mov	r9, r5
 80013fe:	46a0      	mov	r8, r4
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	2400      	movs	r4, #0
 8001404:	2500      	movs	r5, #0
 8001406:	4aaa      	ldr	r2, [pc, #680]	; (80016b0 <__aeabi_dmul+0x38c>)
 8001408:	e7ed      	b.n	80013e6 <__aeabi_dmul+0xc2>
 800140a:	0c28      	lsrs	r0, r5, #16
 800140c:	042d      	lsls	r5, r5, #16
 800140e:	0c2d      	lsrs	r5, r5, #16
 8001410:	002b      	movs	r3, r5
 8001412:	0c11      	lsrs	r1, r2, #16
 8001414:	0412      	lsls	r2, r2, #16
 8001416:	0c12      	lsrs	r2, r2, #16
 8001418:	4353      	muls	r3, r2
 800141a:	4698      	mov	r8, r3
 800141c:	0013      	movs	r3, r2
 800141e:	002f      	movs	r7, r5
 8001420:	4343      	muls	r3, r0
 8001422:	4699      	mov	r9, r3
 8001424:	434f      	muls	r7, r1
 8001426:	444f      	add	r7, r9
 8001428:	46bb      	mov	fp, r7
 800142a:	4647      	mov	r7, r8
 800142c:	000b      	movs	r3, r1
 800142e:	0c3f      	lsrs	r7, r7, #16
 8001430:	46ba      	mov	sl, r7
 8001432:	4343      	muls	r3, r0
 8001434:	44da      	add	sl, fp
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	45d1      	cmp	r9, sl
 800143a:	d904      	bls.n	8001446 <__aeabi_dmul+0x122>
 800143c:	2780      	movs	r7, #128	; 0x80
 800143e:	027f      	lsls	r7, r7, #9
 8001440:	46b9      	mov	r9, r7
 8001442:	444b      	add	r3, r9
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	4653      	mov	r3, sl
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	469b      	mov	fp, r3
 800144c:	4653      	mov	r3, sl
 800144e:	041f      	lsls	r7, r3, #16
 8001450:	4643      	mov	r3, r8
 8001452:	041b      	lsls	r3, r3, #16
 8001454:	0c1b      	lsrs	r3, r3, #16
 8001456:	4698      	mov	r8, r3
 8001458:	003b      	movs	r3, r7
 800145a:	4443      	add	r3, r8
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	0c33      	lsrs	r3, r6, #16
 8001460:	0436      	lsls	r6, r6, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	4698      	mov	r8, r3
 8001466:	0033      	movs	r3, r6
 8001468:	4343      	muls	r3, r0
 800146a:	4699      	mov	r9, r3
 800146c:	4643      	mov	r3, r8
 800146e:	4343      	muls	r3, r0
 8001470:	002f      	movs	r7, r5
 8001472:	469a      	mov	sl, r3
 8001474:	4643      	mov	r3, r8
 8001476:	4377      	muls	r7, r6
 8001478:	435d      	muls	r5, r3
 800147a:	0c38      	lsrs	r0, r7, #16
 800147c:	444d      	add	r5, r9
 800147e:	1945      	adds	r5, r0, r5
 8001480:	45a9      	cmp	r9, r5
 8001482:	d903      	bls.n	800148c <__aeabi_dmul+0x168>
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	025b      	lsls	r3, r3, #9
 8001488:	4699      	mov	r9, r3
 800148a:	44ca      	add	sl, r9
 800148c:	043f      	lsls	r7, r7, #16
 800148e:	0c28      	lsrs	r0, r5, #16
 8001490:	0c3f      	lsrs	r7, r7, #16
 8001492:	042d      	lsls	r5, r5, #16
 8001494:	19ed      	adds	r5, r5, r7
 8001496:	0c27      	lsrs	r7, r4, #16
 8001498:	0424      	lsls	r4, r4, #16
 800149a:	0c24      	lsrs	r4, r4, #16
 800149c:	0003      	movs	r3, r0
 800149e:	0020      	movs	r0, r4
 80014a0:	4350      	muls	r0, r2
 80014a2:	437a      	muls	r2, r7
 80014a4:	4691      	mov	r9, r2
 80014a6:	003a      	movs	r2, r7
 80014a8:	4453      	add	r3, sl
 80014aa:	9305      	str	r3, [sp, #20]
 80014ac:	0c03      	lsrs	r3, r0, #16
 80014ae:	469a      	mov	sl, r3
 80014b0:	434a      	muls	r2, r1
 80014b2:	4361      	muls	r1, r4
 80014b4:	4449      	add	r1, r9
 80014b6:	4451      	add	r1, sl
 80014b8:	44ab      	add	fp, r5
 80014ba:	4589      	cmp	r9, r1
 80014bc:	d903      	bls.n	80014c6 <__aeabi_dmul+0x1a2>
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	4699      	mov	r9, r3
 80014c4:	444a      	add	r2, r9
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	0c0b      	lsrs	r3, r1, #16
 80014ca:	0c00      	lsrs	r0, r0, #16
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	1809      	adds	r1, r1, r0
 80014d0:	0020      	movs	r0, r4
 80014d2:	4699      	mov	r9, r3
 80014d4:	4643      	mov	r3, r8
 80014d6:	4370      	muls	r0, r6
 80014d8:	435c      	muls	r4, r3
 80014da:	437e      	muls	r6, r7
 80014dc:	435f      	muls	r7, r3
 80014de:	0c03      	lsrs	r3, r0, #16
 80014e0:	4698      	mov	r8, r3
 80014e2:	19a4      	adds	r4, r4, r6
 80014e4:	4444      	add	r4, r8
 80014e6:	444a      	add	r2, r9
 80014e8:	9703      	str	r7, [sp, #12]
 80014ea:	42a6      	cmp	r6, r4
 80014ec:	d904      	bls.n	80014f8 <__aeabi_dmul+0x1d4>
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	025b      	lsls	r3, r3, #9
 80014f2:	4698      	mov	r8, r3
 80014f4:	4447      	add	r7, r8
 80014f6:	9703      	str	r7, [sp, #12]
 80014f8:	0423      	lsls	r3, r4, #16
 80014fa:	9e02      	ldr	r6, [sp, #8]
 80014fc:	469a      	mov	sl, r3
 80014fe:	9b05      	ldr	r3, [sp, #20]
 8001500:	445e      	add	r6, fp
 8001502:	4698      	mov	r8, r3
 8001504:	42ae      	cmp	r6, r5
 8001506:	41ad      	sbcs	r5, r5
 8001508:	1876      	adds	r6, r6, r1
 800150a:	428e      	cmp	r6, r1
 800150c:	4189      	sbcs	r1, r1
 800150e:	0400      	lsls	r0, r0, #16
 8001510:	0c00      	lsrs	r0, r0, #16
 8001512:	4450      	add	r0, sl
 8001514:	4440      	add	r0, r8
 8001516:	426d      	negs	r5, r5
 8001518:	1947      	adds	r7, r0, r5
 800151a:	46b8      	mov	r8, r7
 800151c:	4693      	mov	fp, r2
 800151e:	4249      	negs	r1, r1
 8001520:	4689      	mov	r9, r1
 8001522:	44c3      	add	fp, r8
 8001524:	44d9      	add	r9, fp
 8001526:	4298      	cmp	r0, r3
 8001528:	4180      	sbcs	r0, r0
 800152a:	45a8      	cmp	r8, r5
 800152c:	41ad      	sbcs	r5, r5
 800152e:	4593      	cmp	fp, r2
 8001530:	4192      	sbcs	r2, r2
 8001532:	4589      	cmp	r9, r1
 8001534:	4189      	sbcs	r1, r1
 8001536:	426d      	negs	r5, r5
 8001538:	4240      	negs	r0, r0
 800153a:	4328      	orrs	r0, r5
 800153c:	0c24      	lsrs	r4, r4, #16
 800153e:	4252      	negs	r2, r2
 8001540:	4249      	negs	r1, r1
 8001542:	430a      	orrs	r2, r1
 8001544:	9b03      	ldr	r3, [sp, #12]
 8001546:	1900      	adds	r0, r0, r4
 8001548:	1880      	adds	r0, r0, r2
 800154a:	18c7      	adds	r7, r0, r3
 800154c:	464b      	mov	r3, r9
 800154e:	0ddc      	lsrs	r4, r3, #23
 8001550:	9b04      	ldr	r3, [sp, #16]
 8001552:	0275      	lsls	r5, r6, #9
 8001554:	431d      	orrs	r5, r3
 8001556:	1e6a      	subs	r2, r5, #1
 8001558:	4195      	sbcs	r5, r2
 800155a:	464b      	mov	r3, r9
 800155c:	0df6      	lsrs	r6, r6, #23
 800155e:	027f      	lsls	r7, r7, #9
 8001560:	4335      	orrs	r5, r6
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	433c      	orrs	r4, r7
 8001566:	4315      	orrs	r5, r2
 8001568:	01fb      	lsls	r3, r7, #7
 800156a:	d400      	bmi.n	800156e <__aeabi_dmul+0x24a>
 800156c:	e11c      	b.n	80017a8 <__aeabi_dmul+0x484>
 800156e:	2101      	movs	r1, #1
 8001570:	086a      	lsrs	r2, r5, #1
 8001572:	400d      	ands	r5, r1
 8001574:	4315      	orrs	r5, r2
 8001576:	07e2      	lsls	r2, r4, #31
 8001578:	4315      	orrs	r5, r2
 800157a:	0864      	lsrs	r4, r4, #1
 800157c:	494f      	ldr	r1, [pc, #316]	; (80016bc <__aeabi_dmul+0x398>)
 800157e:	4461      	add	r1, ip
 8001580:	2900      	cmp	r1, #0
 8001582:	dc00      	bgt.n	8001586 <__aeabi_dmul+0x262>
 8001584:	e0b0      	b.n	80016e8 <__aeabi_dmul+0x3c4>
 8001586:	076b      	lsls	r3, r5, #29
 8001588:	d009      	beq.n	800159e <__aeabi_dmul+0x27a>
 800158a:	220f      	movs	r2, #15
 800158c:	402a      	ands	r2, r5
 800158e:	2a04      	cmp	r2, #4
 8001590:	d005      	beq.n	800159e <__aeabi_dmul+0x27a>
 8001592:	1d2a      	adds	r2, r5, #4
 8001594:	42aa      	cmp	r2, r5
 8001596:	41ad      	sbcs	r5, r5
 8001598:	426d      	negs	r5, r5
 800159a:	1964      	adds	r4, r4, r5
 800159c:	0015      	movs	r5, r2
 800159e:	01e3      	lsls	r3, r4, #7
 80015a0:	d504      	bpl.n	80015ac <__aeabi_dmul+0x288>
 80015a2:	2180      	movs	r1, #128	; 0x80
 80015a4:	4a46      	ldr	r2, [pc, #280]	; (80016c0 <__aeabi_dmul+0x39c>)
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	4014      	ands	r4, r2
 80015aa:	4461      	add	r1, ip
 80015ac:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <__aeabi_dmul+0x3a0>)
 80015ae:	4291      	cmp	r1, r2
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dmul+0x290>
 80015b2:	e726      	b.n	8001402 <__aeabi_dmul+0xde>
 80015b4:	0762      	lsls	r2, r4, #29
 80015b6:	08ed      	lsrs	r5, r5, #3
 80015b8:	0264      	lsls	r4, r4, #9
 80015ba:	0549      	lsls	r1, r1, #21
 80015bc:	4315      	orrs	r5, r2
 80015be:	0b24      	lsrs	r4, r4, #12
 80015c0:	0d4a      	lsrs	r2, r1, #21
 80015c2:	e710      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80015c4:	4652      	mov	r2, sl
 80015c6:	4332      	orrs	r2, r6
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0x2a8>
 80015ca:	e07f      	b.n	80016cc <__aeabi_dmul+0x3a8>
 80015cc:	2e00      	cmp	r6, #0
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0x2ae>
 80015d0:	e0dc      	b.n	800178c <__aeabi_dmul+0x468>
 80015d2:	0030      	movs	r0, r6
 80015d4:	f000 fd30 	bl	8002038 <__clzsi2>
 80015d8:	0002      	movs	r2, r0
 80015da:	3a0b      	subs	r2, #11
 80015dc:	231d      	movs	r3, #29
 80015de:	0001      	movs	r1, r0
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	4652      	mov	r2, sl
 80015e4:	3908      	subs	r1, #8
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	408e      	lsls	r6, r1
 80015ea:	4316      	orrs	r6, r2
 80015ec:	4652      	mov	r2, sl
 80015ee:	408a      	lsls	r2, r1
 80015f0:	9b00      	ldr	r3, [sp, #0]
 80015f2:	4935      	ldr	r1, [pc, #212]	; (80016c8 <__aeabi_dmul+0x3a4>)
 80015f4:	1a18      	subs	r0, r3, r0
 80015f6:	0003      	movs	r3, r0
 80015f8:	468c      	mov	ip, r1
 80015fa:	4463      	add	r3, ip
 80015fc:	2000      	movs	r0, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	e6d3      	b.n	80013aa <__aeabi_dmul+0x86>
 8001602:	0025      	movs	r5, r4
 8001604:	4305      	orrs	r5, r0
 8001606:	d04a      	beq.n	800169e <__aeabi_dmul+0x37a>
 8001608:	2c00      	cmp	r4, #0
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x2ea>
 800160c:	e0b0      	b.n	8001770 <__aeabi_dmul+0x44c>
 800160e:	0020      	movs	r0, r4
 8001610:	f000 fd12 	bl	8002038 <__clzsi2>
 8001614:	0001      	movs	r1, r0
 8001616:	0002      	movs	r2, r0
 8001618:	390b      	subs	r1, #11
 800161a:	231d      	movs	r3, #29
 800161c:	0010      	movs	r0, r2
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	0031      	movs	r1, r6
 8001622:	0035      	movs	r5, r6
 8001624:	3808      	subs	r0, #8
 8001626:	4084      	lsls	r4, r0
 8001628:	40d9      	lsrs	r1, r3
 800162a:	4085      	lsls	r5, r0
 800162c:	430c      	orrs	r4, r1
 800162e:	4826      	ldr	r0, [pc, #152]	; (80016c8 <__aeabi_dmul+0x3a4>)
 8001630:	1a83      	subs	r3, r0, r2
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2300      	movs	r3, #0
 8001636:	4699      	mov	r9, r3
 8001638:	469b      	mov	fp, r3
 800163a:	e697      	b.n	800136c <__aeabi_dmul+0x48>
 800163c:	0005      	movs	r5, r0
 800163e:	4325      	orrs	r5, r4
 8001640:	d126      	bne.n	8001690 <__aeabi_dmul+0x36c>
 8001642:	2208      	movs	r2, #8
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2302      	movs	r3, #2
 8001648:	2400      	movs	r4, #0
 800164a:	4691      	mov	r9, r2
 800164c:	469b      	mov	fp, r3
 800164e:	e68d      	b.n	800136c <__aeabi_dmul+0x48>
 8001650:	4652      	mov	r2, sl
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	4332      	orrs	r2, r6
 8001656:	d110      	bne.n	800167a <__aeabi_dmul+0x356>
 8001658:	4915      	ldr	r1, [pc, #84]	; (80016b0 <__aeabi_dmul+0x38c>)
 800165a:	2600      	movs	r6, #0
 800165c:	468c      	mov	ip, r1
 800165e:	4463      	add	r3, ip
 8001660:	4649      	mov	r1, r9
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2302      	movs	r3, #2
 8001666:	4319      	orrs	r1, r3
 8001668:	4689      	mov	r9, r1
 800166a:	2002      	movs	r0, #2
 800166c:	e69d      	b.n	80013aa <__aeabi_dmul+0x86>
 800166e:	465b      	mov	r3, fp
 8001670:	9701      	str	r7, [sp, #4]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d000      	beq.n	8001678 <__aeabi_dmul+0x354>
 8001676:	e6ad      	b.n	80013d4 <__aeabi_dmul+0xb0>
 8001678:	e6c3      	b.n	8001402 <__aeabi_dmul+0xde>
 800167a:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <__aeabi_dmul+0x38c>)
 800167c:	2003      	movs	r0, #3
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	464a      	mov	r2, r9
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2303      	movs	r3, #3
 8001688:	431a      	orrs	r2, r3
 800168a:	4691      	mov	r9, r2
 800168c:	4652      	mov	r2, sl
 800168e:	e68c      	b.n	80013aa <__aeabi_dmul+0x86>
 8001690:	220c      	movs	r2, #12
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2303      	movs	r3, #3
 8001696:	0005      	movs	r5, r0
 8001698:	4691      	mov	r9, r2
 800169a:	469b      	mov	fp, r3
 800169c:	e666      	b.n	800136c <__aeabi_dmul+0x48>
 800169e:	2304      	movs	r3, #4
 80016a0:	4699      	mov	r9, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	2400      	movs	r4, #0
 80016aa:	469b      	mov	fp, r3
 80016ac:	e65e      	b.n	800136c <__aeabi_dmul+0x48>
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	000007ff 	.word	0x000007ff
 80016b4:	fffffc01 	.word	0xfffffc01
 80016b8:	0800f7ec 	.word	0x0800f7ec
 80016bc:	000003ff 	.word	0x000003ff
 80016c0:	feffffff 	.word	0xfeffffff
 80016c4:	000007fe 	.word	0x000007fe
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	4649      	mov	r1, r9
 80016ce:	2301      	movs	r3, #1
 80016d0:	4319      	orrs	r1, r3
 80016d2:	4689      	mov	r9, r1
 80016d4:	2600      	movs	r6, #0
 80016d6:	2001      	movs	r0, #1
 80016d8:	e667      	b.n	80013aa <__aeabi_dmul+0x86>
 80016da:	2300      	movs	r3, #0
 80016dc:	2480      	movs	r4, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	4a43      	ldr	r2, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	0324      	lsls	r4, r4, #12
 80016e6:	e67e      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80016e8:	2001      	movs	r0, #1
 80016ea:	1a40      	subs	r0, r0, r1
 80016ec:	2838      	cmp	r0, #56	; 0x38
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dmul+0x3ce>
 80016f0:	e676      	b.n	80013e0 <__aeabi_dmul+0xbc>
 80016f2:	281f      	cmp	r0, #31
 80016f4:	dd5b      	ble.n	80017ae <__aeabi_dmul+0x48a>
 80016f6:	221f      	movs	r2, #31
 80016f8:	0023      	movs	r3, r4
 80016fa:	4252      	negs	r2, r2
 80016fc:	1a51      	subs	r1, r2, r1
 80016fe:	40cb      	lsrs	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	2820      	cmp	r0, #32
 8001704:	d003      	beq.n	800170e <__aeabi_dmul+0x3ea>
 8001706:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <__aeabi_dmul+0x4d0>)
 8001708:	4462      	add	r2, ip
 800170a:	4094      	lsls	r4, r2
 800170c:	4325      	orrs	r5, r4
 800170e:	1e6a      	subs	r2, r5, #1
 8001710:	4195      	sbcs	r5, r2
 8001712:	002a      	movs	r2, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	2107      	movs	r1, #7
 8001718:	000d      	movs	r5, r1
 800171a:	2400      	movs	r4, #0
 800171c:	4015      	ands	r5, r2
 800171e:	4211      	tst	r1, r2
 8001720:	d05b      	beq.n	80017da <__aeabi_dmul+0x4b6>
 8001722:	210f      	movs	r1, #15
 8001724:	2400      	movs	r4, #0
 8001726:	4011      	ands	r1, r2
 8001728:	2904      	cmp	r1, #4
 800172a:	d053      	beq.n	80017d4 <__aeabi_dmul+0x4b0>
 800172c:	1d11      	adds	r1, r2, #4
 800172e:	4291      	cmp	r1, r2
 8001730:	4192      	sbcs	r2, r2
 8001732:	4252      	negs	r2, r2
 8001734:	18a4      	adds	r4, r4, r2
 8001736:	000a      	movs	r2, r1
 8001738:	0223      	lsls	r3, r4, #8
 800173a:	d54b      	bpl.n	80017d4 <__aeabi_dmul+0x4b0>
 800173c:	2201      	movs	r2, #1
 800173e:	2400      	movs	r4, #0
 8001740:	2500      	movs	r5, #0
 8001742:	e650      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	031b      	lsls	r3, r3, #12
 8001748:	421c      	tst	r4, r3
 800174a:	d009      	beq.n	8001760 <__aeabi_dmul+0x43c>
 800174c:	421e      	tst	r6, r3
 800174e:	d107      	bne.n	8001760 <__aeabi_dmul+0x43c>
 8001750:	4333      	orrs	r3, r6
 8001752:	031c      	lsls	r4, r3, #12
 8001754:	4643      	mov	r3, r8
 8001756:	0015      	movs	r5, r2
 8001758:	0b24      	lsrs	r4, r4, #12
 800175a:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	e642      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4314      	orrs	r4, r2
 8001766:	0324      	lsls	r4, r4, #12
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4cc>)
 800176a:	0b24      	lsrs	r4, r4, #12
 800176c:	9701      	str	r7, [sp, #4]
 800176e:	e63a      	b.n	80013e6 <__aeabi_dmul+0xc2>
 8001770:	f000 fc62 	bl	8002038 <__clzsi2>
 8001774:	0001      	movs	r1, r0
 8001776:	0002      	movs	r2, r0
 8001778:	3115      	adds	r1, #21
 800177a:	3220      	adds	r2, #32
 800177c:	291c      	cmp	r1, #28
 800177e:	dc00      	bgt.n	8001782 <__aeabi_dmul+0x45e>
 8001780:	e74b      	b.n	800161a <__aeabi_dmul+0x2f6>
 8001782:	0034      	movs	r4, r6
 8001784:	3808      	subs	r0, #8
 8001786:	2500      	movs	r5, #0
 8001788:	4084      	lsls	r4, r0
 800178a:	e750      	b.n	800162e <__aeabi_dmul+0x30a>
 800178c:	f000 fc54 	bl	8002038 <__clzsi2>
 8001790:	0003      	movs	r3, r0
 8001792:	001a      	movs	r2, r3
 8001794:	3215      	adds	r2, #21
 8001796:	3020      	adds	r0, #32
 8001798:	2a1c      	cmp	r2, #28
 800179a:	dc00      	bgt.n	800179e <__aeabi_dmul+0x47a>
 800179c:	e71e      	b.n	80015dc <__aeabi_dmul+0x2b8>
 800179e:	4656      	mov	r6, sl
 80017a0:	3b08      	subs	r3, #8
 80017a2:	2200      	movs	r2, #0
 80017a4:	409e      	lsls	r6, r3
 80017a6:	e723      	b.n	80015f0 <__aeabi_dmul+0x2cc>
 80017a8:	9b00      	ldr	r3, [sp, #0]
 80017aa:	469c      	mov	ip, r3
 80017ac:	e6e6      	b.n	800157c <__aeabi_dmul+0x258>
 80017ae:	4912      	ldr	r1, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4d4>)
 80017b0:	0022      	movs	r2, r4
 80017b2:	4461      	add	r1, ip
 80017b4:	002e      	movs	r6, r5
 80017b6:	408d      	lsls	r5, r1
 80017b8:	408a      	lsls	r2, r1
 80017ba:	40c6      	lsrs	r6, r0
 80017bc:	1e69      	subs	r1, r5, #1
 80017be:	418d      	sbcs	r5, r1
 80017c0:	4332      	orrs	r2, r6
 80017c2:	432a      	orrs	r2, r5
 80017c4:	40c4      	lsrs	r4, r0
 80017c6:	0753      	lsls	r3, r2, #29
 80017c8:	d0b6      	beq.n	8001738 <__aeabi_dmul+0x414>
 80017ca:	210f      	movs	r1, #15
 80017cc:	4011      	ands	r1, r2
 80017ce:	2904      	cmp	r1, #4
 80017d0:	d1ac      	bne.n	800172c <__aeabi_dmul+0x408>
 80017d2:	e7b1      	b.n	8001738 <__aeabi_dmul+0x414>
 80017d4:	0765      	lsls	r5, r4, #29
 80017d6:	0264      	lsls	r4, r4, #9
 80017d8:	0b24      	lsrs	r4, r4, #12
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	4315      	orrs	r5, r2
 80017de:	2200      	movs	r2, #0
 80017e0:	e601      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0312      	lsls	r2, r2, #12
 80017e6:	4314      	orrs	r4, r2
 80017e8:	0324      	lsls	r4, r4, #12
 80017ea:	4a01      	ldr	r2, [pc, #4]	; (80017f0 <__aeabi_dmul+0x4cc>)
 80017ec:	0b24      	lsrs	r4, r4, #12
 80017ee:	e5fa      	b.n	80013e6 <__aeabi_dmul+0xc2>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000043e 	.word	0x0000043e
 80017f8:	0000041e 	.word	0x0000041e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	001e      	movs	r6, r3
 800180a:	0017      	movs	r7, r2
 800180c:	004a      	lsls	r2, r1, #1
 800180e:	030b      	lsls	r3, r1, #12
 8001810:	0d52      	lsrs	r2, r2, #21
 8001812:	0a5b      	lsrs	r3, r3, #9
 8001814:	4690      	mov	r8, r2
 8001816:	0f42      	lsrs	r2, r0, #29
 8001818:	431a      	orrs	r2, r3
 800181a:	0fcd      	lsrs	r5, r1, #31
 800181c:	4ccd      	ldr	r4, [pc, #820]	; (8001b54 <__aeabi_dsub+0x358>)
 800181e:	0331      	lsls	r1, r6, #12
 8001820:	00c3      	lsls	r3, r0, #3
 8001822:	4694      	mov	ip, r2
 8001824:	0070      	lsls	r0, r6, #1
 8001826:	0f7a      	lsrs	r2, r7, #29
 8001828:	0a49      	lsrs	r1, r1, #9
 800182a:	00ff      	lsls	r7, r7, #3
 800182c:	469a      	mov	sl, r3
 800182e:	46b9      	mov	r9, r7
 8001830:	0d40      	lsrs	r0, r0, #21
 8001832:	0ff6      	lsrs	r6, r6, #31
 8001834:	4311      	orrs	r1, r2
 8001836:	42a0      	cmp	r0, r4
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b1      	b.n	80019a0 <__aeabi_dsub+0x1a4>
 800183c:	2201      	movs	r2, #1
 800183e:	4056      	eors	r6, r2
 8001840:	46b3      	mov	fp, r6
 8001842:	42b5      	cmp	r5, r6
 8001844:	d100      	bne.n	8001848 <__aeabi_dsub+0x4c>
 8001846:	e088      	b.n	800195a <__aeabi_dsub+0x15e>
 8001848:	4642      	mov	r2, r8
 800184a:	1a12      	subs	r2, r2, r0
 800184c:	2a00      	cmp	r2, #0
 800184e:	dc00      	bgt.n	8001852 <__aeabi_dsub+0x56>
 8001850:	e0ae      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 8001852:	2800      	cmp	r0, #0
 8001854:	d100      	bne.n	8001858 <__aeabi_dsub+0x5c>
 8001856:	e0c1      	b.n	80019dc <__aeabi_dsub+0x1e0>
 8001858:	48be      	ldr	r0, [pc, #760]	; (8001b54 <__aeabi_dsub+0x358>)
 800185a:	4580      	cmp	r8, r0
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x64>
 800185e:	e151      	b.n	8001b04 <__aeabi_dsub+0x308>
 8001860:	2080      	movs	r0, #128	; 0x80
 8001862:	0400      	lsls	r0, r0, #16
 8001864:	4301      	orrs	r1, r0
 8001866:	2a38      	cmp	r2, #56	; 0x38
 8001868:	dd00      	ble.n	800186c <__aeabi_dsub+0x70>
 800186a:	e17b      	b.n	8001b64 <__aeabi_dsub+0x368>
 800186c:	2a1f      	cmp	r2, #31
 800186e:	dd00      	ble.n	8001872 <__aeabi_dsub+0x76>
 8001870:	e1ee      	b.n	8001c50 <__aeabi_dsub+0x454>
 8001872:	2020      	movs	r0, #32
 8001874:	003e      	movs	r6, r7
 8001876:	1a80      	subs	r0, r0, r2
 8001878:	000c      	movs	r4, r1
 800187a:	40d6      	lsrs	r6, r2
 800187c:	40d1      	lsrs	r1, r2
 800187e:	4087      	lsls	r7, r0
 8001880:	4662      	mov	r2, ip
 8001882:	4084      	lsls	r4, r0
 8001884:	1a52      	subs	r2, r2, r1
 8001886:	1e78      	subs	r0, r7, #1
 8001888:	4187      	sbcs	r7, r0
 800188a:	4694      	mov	ip, r2
 800188c:	4334      	orrs	r4, r6
 800188e:	4327      	orrs	r7, r4
 8001890:	1bdc      	subs	r4, r3, r7
 8001892:	42a3      	cmp	r3, r4
 8001894:	419b      	sbcs	r3, r3
 8001896:	4662      	mov	r2, ip
 8001898:	425b      	negs	r3, r3
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4699      	mov	r9, r3
 800189e:	464b      	mov	r3, r9
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	d400      	bmi.n	80018a6 <__aeabi_dsub+0xaa>
 80018a4:	e118      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 80018a6:	464b      	mov	r3, r9
 80018a8:	0258      	lsls	r0, r3, #9
 80018aa:	0a43      	lsrs	r3, r0, #9
 80018ac:	4699      	mov	r9, r3
 80018ae:	464b      	mov	r3, r9
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dsub+0xba>
 80018b4:	e137      	b.n	8001b26 <__aeabi_dsub+0x32a>
 80018b6:	4648      	mov	r0, r9
 80018b8:	f000 fbbe 	bl	8002038 <__clzsi2>
 80018bc:	0001      	movs	r1, r0
 80018be:	3908      	subs	r1, #8
 80018c0:	2320      	movs	r3, #32
 80018c2:	0022      	movs	r2, r4
 80018c4:	4648      	mov	r0, r9
 80018c6:	1a5b      	subs	r3, r3, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4088      	lsls	r0, r1
 80018cc:	408c      	lsls	r4, r1
 80018ce:	4643      	mov	r3, r8
 80018d0:	4310      	orrs	r0, r2
 80018d2:	4588      	cmp	r8, r1
 80018d4:	dd00      	ble.n	80018d8 <__aeabi_dsub+0xdc>
 80018d6:	e136      	b.n	8001b46 <__aeabi_dsub+0x34a>
 80018d8:	1ac9      	subs	r1, r1, r3
 80018da:	1c4b      	adds	r3, r1, #1
 80018dc:	2b1f      	cmp	r3, #31
 80018de:	dd00      	ble.n	80018e2 <__aeabi_dsub+0xe6>
 80018e0:	e0ea      	b.n	8001ab8 <__aeabi_dsub+0x2bc>
 80018e2:	2220      	movs	r2, #32
 80018e4:	0026      	movs	r6, r4
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	0001      	movs	r1, r0
 80018ea:	4094      	lsls	r4, r2
 80018ec:	40de      	lsrs	r6, r3
 80018ee:	40d8      	lsrs	r0, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	4091      	lsls	r1, r2
 80018f4:	1e62      	subs	r2, r4, #1
 80018f6:	4194      	sbcs	r4, r2
 80018f8:	4681      	mov	r9, r0
 80018fa:	4698      	mov	r8, r3
 80018fc:	4331      	orrs	r1, r6
 80018fe:	430c      	orrs	r4, r1
 8001900:	0763      	lsls	r3, r4, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dsub+0x11c>
 8001904:	230f      	movs	r3, #15
 8001906:	4023      	ands	r3, r4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dsub+0x11c>
 800190c:	1d23      	adds	r3, r4, #4
 800190e:	42a3      	cmp	r3, r4
 8001910:	41a4      	sbcs	r4, r4
 8001912:	4264      	negs	r4, r4
 8001914:	44a1      	add	r9, r4
 8001916:	001c      	movs	r4, r3
 8001918:	464b      	mov	r3, r9
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	d400      	bmi.n	8001920 <__aeabi_dsub+0x124>
 800191e:	e0de      	b.n	8001ade <__aeabi_dsub+0x2e2>
 8001920:	4641      	mov	r1, r8
 8001922:	4b8c      	ldr	r3, [pc, #560]	; (8001b54 <__aeabi_dsub+0x358>)
 8001924:	3101      	adds	r1, #1
 8001926:	4299      	cmp	r1, r3
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x130>
 800192a:	e0e7      	b.n	8001afc <__aeabi_dsub+0x300>
 800192c:	464b      	mov	r3, r9
 800192e:	488a      	ldr	r0, [pc, #552]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001930:	08e4      	lsrs	r4, r4, #3
 8001932:	4003      	ands	r3, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0549      	lsls	r1, r1, #21
 8001938:	075b      	lsls	r3, r3, #29
 800193a:	0240      	lsls	r0, r0, #9
 800193c:	4323      	orrs	r3, r4
 800193e:	0d4a      	lsrs	r2, r1, #21
 8001940:	0b04      	lsrs	r4, r0, #12
 8001942:	0512      	lsls	r2, r2, #20
 8001944:	07ed      	lsls	r5, r5, #31
 8001946:	4322      	orrs	r2, r4
 8001948:	432a      	orrs	r2, r5
 800194a:	0018      	movs	r0, r3
 800194c:	0011      	movs	r1, r2
 800194e:	bcf0      	pop	{r4, r5, r6, r7}
 8001950:	46bb      	mov	fp, r7
 8001952:	46b2      	mov	sl, r6
 8001954:	46a9      	mov	r9, r5
 8001956:	46a0      	mov	r8, r4
 8001958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800195a:	4642      	mov	r2, r8
 800195c:	1a12      	subs	r2, r2, r0
 800195e:	2a00      	cmp	r2, #0
 8001960:	dd52      	ble.n	8001a08 <__aeabi_dsub+0x20c>
 8001962:	2800      	cmp	r0, #0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x16c>
 8001966:	e09c      	b.n	8001aa2 <__aeabi_dsub+0x2a6>
 8001968:	45a0      	cmp	r8, r4
 800196a:	d100      	bne.n	800196e <__aeabi_dsub+0x172>
 800196c:	e0ca      	b.n	8001b04 <__aeabi_dsub+0x308>
 800196e:	2080      	movs	r0, #128	; 0x80
 8001970:	0400      	lsls	r0, r0, #16
 8001972:	4301      	orrs	r1, r0
 8001974:	2a38      	cmp	r2, #56	; 0x38
 8001976:	dd00      	ble.n	800197a <__aeabi_dsub+0x17e>
 8001978:	e149      	b.n	8001c0e <__aeabi_dsub+0x412>
 800197a:	2a1f      	cmp	r2, #31
 800197c:	dc00      	bgt.n	8001980 <__aeabi_dsub+0x184>
 800197e:	e197      	b.n	8001cb0 <__aeabi_dsub+0x4b4>
 8001980:	0010      	movs	r0, r2
 8001982:	000e      	movs	r6, r1
 8001984:	3820      	subs	r0, #32
 8001986:	40c6      	lsrs	r6, r0
 8001988:	2a20      	cmp	r2, #32
 800198a:	d004      	beq.n	8001996 <__aeabi_dsub+0x19a>
 800198c:	2040      	movs	r0, #64	; 0x40
 800198e:	1a82      	subs	r2, r0, r2
 8001990:	4091      	lsls	r1, r2
 8001992:	430f      	orrs	r7, r1
 8001994:	46b9      	mov	r9, r7
 8001996:	464c      	mov	r4, r9
 8001998:	1e62      	subs	r2, r4, #1
 800199a:	4194      	sbcs	r4, r2
 800199c:	4334      	orrs	r4, r6
 800199e:	e13a      	b.n	8001c16 <__aeabi_dsub+0x41a>
 80019a0:	000a      	movs	r2, r1
 80019a2:	433a      	orrs	r2, r7
 80019a4:	d028      	beq.n	80019f8 <__aeabi_dsub+0x1fc>
 80019a6:	46b3      	mov	fp, r6
 80019a8:	42b5      	cmp	r5, r6
 80019aa:	d02b      	beq.n	8001a04 <__aeabi_dsub+0x208>
 80019ac:	4a6b      	ldr	r2, [pc, #428]	; (8001b5c <__aeabi_dsub+0x360>)
 80019ae:	4442      	add	r2, r8
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d05d      	beq.n	8001a70 <__aeabi_dsub+0x274>
 80019b4:	4642      	mov	r2, r8
 80019b6:	4644      	mov	r4, r8
 80019b8:	1a82      	subs	r2, r0, r2
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dsub+0x1c4>
 80019be:	e0f5      	b.n	8001bac <__aeabi_dsub+0x3b0>
 80019c0:	4665      	mov	r5, ip
 80019c2:	431d      	orrs	r5, r3
 80019c4:	d100      	bne.n	80019c8 <__aeabi_dsub+0x1cc>
 80019c6:	e19c      	b.n	8001d02 <__aeabi_dsub+0x506>
 80019c8:	1e55      	subs	r5, r2, #1
 80019ca:	2a01      	cmp	r2, #1
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e1fb      	b.n	8001dc8 <__aeabi_dsub+0x5cc>
 80019d0:	4c60      	ldr	r4, [pc, #384]	; (8001b54 <__aeabi_dsub+0x358>)
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1dc>
 80019d6:	e1bd      	b.n	8001d54 <__aeabi_dsub+0x558>
 80019d8:	002a      	movs	r2, r5
 80019da:	e0f0      	b.n	8001bbe <__aeabi_dsub+0x3c2>
 80019dc:	0008      	movs	r0, r1
 80019de:	4338      	orrs	r0, r7
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dsub+0x1e8>
 80019e2:	e0c3      	b.n	8001b6c <__aeabi_dsub+0x370>
 80019e4:	1e50      	subs	r0, r2, #1
 80019e6:	2a01      	cmp	r2, #1
 80019e8:	d100      	bne.n	80019ec <__aeabi_dsub+0x1f0>
 80019ea:	e1a8      	b.n	8001d3e <__aeabi_dsub+0x542>
 80019ec:	4c59      	ldr	r4, [pc, #356]	; (8001b54 <__aeabi_dsub+0x358>)
 80019ee:	42a2      	cmp	r2, r4
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1f8>
 80019f2:	e087      	b.n	8001b04 <__aeabi_dsub+0x308>
 80019f4:	0002      	movs	r2, r0
 80019f6:	e736      	b.n	8001866 <__aeabi_dsub+0x6a>
 80019f8:	2201      	movs	r2, #1
 80019fa:	4056      	eors	r6, r2
 80019fc:	46b3      	mov	fp, r6
 80019fe:	42b5      	cmp	r5, r6
 8001a00:	d000      	beq.n	8001a04 <__aeabi_dsub+0x208>
 8001a02:	e721      	b.n	8001848 <__aeabi_dsub+0x4c>
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <__aeabi_dsub+0x360>)
 8001a06:	4442      	add	r2, r8
 8001a08:	2a00      	cmp	r2, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x212>
 8001a0c:	e0b5      	b.n	8001b7a <__aeabi_dsub+0x37e>
 8001a0e:	4642      	mov	r2, r8
 8001a10:	4644      	mov	r4, r8
 8001a12:	1a82      	subs	r2, r0, r2
 8001a14:	2c00      	cmp	r4, #0
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x21e>
 8001a18:	e138      	b.n	8001c8c <__aeabi_dsub+0x490>
 8001a1a:	4e4e      	ldr	r6, [pc, #312]	; (8001b54 <__aeabi_dsub+0x358>)
 8001a1c:	42b0      	cmp	r0, r6
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x226>
 8001a20:	e1de      	b.n	8001de0 <__aeabi_dsub+0x5e4>
 8001a22:	2680      	movs	r6, #128	; 0x80
 8001a24:	4664      	mov	r4, ip
 8001a26:	0436      	lsls	r6, r6, #16
 8001a28:	4334      	orrs	r4, r6
 8001a2a:	46a4      	mov	ip, r4
 8001a2c:	2a38      	cmp	r2, #56	; 0x38
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dsub+0x236>
 8001a30:	e196      	b.n	8001d60 <__aeabi_dsub+0x564>
 8001a32:	2a1f      	cmp	r2, #31
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x23c>
 8001a36:	e224      	b.n	8001e82 <__aeabi_dsub+0x686>
 8001a38:	2620      	movs	r6, #32
 8001a3a:	1ab4      	subs	r4, r6, r2
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	4664      	mov	r4, ip
 8001a40:	4656      	mov	r6, sl
 8001a42:	40b4      	lsls	r4, r6
 8001a44:	46a1      	mov	r9, r4
 8001a46:	001c      	movs	r4, r3
 8001a48:	464e      	mov	r6, r9
 8001a4a:	40d4      	lsrs	r4, r2
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	0034      	movs	r4, r6
 8001a50:	4656      	mov	r6, sl
 8001a52:	40b3      	lsls	r3, r6
 8001a54:	1e5e      	subs	r6, r3, #1
 8001a56:	41b3      	sbcs	r3, r6
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	4663      	mov	r3, ip
 8001a5c:	40d3      	lsrs	r3, r2
 8001a5e:	18c9      	adds	r1, r1, r3
 8001a60:	19e4      	adds	r4, r4, r7
 8001a62:	42bc      	cmp	r4, r7
 8001a64:	41bf      	sbcs	r7, r7
 8001a66:	427f      	negs	r7, r7
 8001a68:	46b9      	mov	r9, r7
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4489      	add	r9, r1
 8001a6e:	e0d8      	b.n	8001c22 <__aeabi_dsub+0x426>
 8001a70:	4640      	mov	r0, r8
 8001a72:	4c3b      	ldr	r4, [pc, #236]	; (8001b60 <__aeabi_dsub+0x364>)
 8001a74:	3001      	adds	r0, #1
 8001a76:	4220      	tst	r0, r4
 8001a78:	d000      	beq.n	8001a7c <__aeabi_dsub+0x280>
 8001a7a:	e0b4      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d000      	beq.n	8001a84 <__aeabi_dsub+0x288>
 8001a82:	e144      	b.n	8001d0e <__aeabi_dsub+0x512>
 8001a84:	4660      	mov	r0, ip
 8001a86:	4318      	orrs	r0, r3
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x290>
 8001a8a:	e190      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001a8c:	0008      	movs	r0, r1
 8001a8e:	4338      	orrs	r0, r7
 8001a90:	d000      	beq.n	8001a94 <__aeabi_dsub+0x298>
 8001a92:	e1aa      	b.n	8001dea <__aeabi_dsub+0x5ee>
 8001a94:	4661      	mov	r1, ip
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	0749      	lsls	r1, r1, #29
 8001a9a:	430b      	orrs	r3, r1
 8001a9c:	4661      	mov	r1, ip
 8001a9e:	08cc      	lsrs	r4, r1, #3
 8001aa0:	e027      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001aa2:	0008      	movs	r0, r1
 8001aa4:	4338      	orrs	r0, r7
 8001aa6:	d061      	beq.n	8001b6c <__aeabi_dsub+0x370>
 8001aa8:	1e50      	subs	r0, r2, #1
 8001aaa:	2a01      	cmp	r2, #1
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x2b4>
 8001aae:	e139      	b.n	8001d24 <__aeabi_dsub+0x528>
 8001ab0:	42a2      	cmp	r2, r4
 8001ab2:	d027      	beq.n	8001b04 <__aeabi_dsub+0x308>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	e75d      	b.n	8001974 <__aeabi_dsub+0x178>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	391f      	subs	r1, #31
 8001abc:	40ca      	lsrs	r2, r1
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d003      	beq.n	8001acc <__aeabi_dsub+0x2d0>
 8001ac4:	2240      	movs	r2, #64	; 0x40
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4098      	lsls	r0, r3
 8001aca:	4304      	orrs	r4, r0
 8001acc:	1e63      	subs	r3, r4, #1
 8001ace:	419c      	sbcs	r4, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4699      	mov	r9, r3
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	430c      	orrs	r4, r1
 8001ad8:	0763      	lsls	r3, r4, #29
 8001ada:	d000      	beq.n	8001ade <__aeabi_dsub+0x2e2>
 8001adc:	e712      	b.n	8001904 <__aeabi_dsub+0x108>
 8001ade:	464b      	mov	r3, r9
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	08e4      	lsrs	r4, r4, #3
 8001ae4:	075b      	lsls	r3, r3, #29
 8001ae6:	4323      	orrs	r3, r4
 8001ae8:	08d4      	lsrs	r4, r2, #3
 8001aea:	4642      	mov	r2, r8
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <__aeabi_dsub+0x358>)
 8001aee:	428a      	cmp	r2, r1
 8001af0:	d00e      	beq.n	8001b10 <__aeabi_dsub+0x314>
 8001af2:	0324      	lsls	r4, r4, #12
 8001af4:	0552      	lsls	r2, r2, #21
 8001af6:	0b24      	lsrs	r4, r4, #12
 8001af8:	0d52      	lsrs	r2, r2, #21
 8001afa:	e722      	b.n	8001942 <__aeabi_dsub+0x146>
 8001afc:	000a      	movs	r2, r1
 8001afe:	2400      	movs	r4, #0
 8001b00:	2300      	movs	r3, #0
 8001b02:	e71e      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	4662      	mov	r2, ip
 8001b08:	0752      	lsls	r2, r2, #29
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	4662      	mov	r2, ip
 8001b0e:	08d4      	lsrs	r4, r2, #3
 8001b10:	001a      	movs	r2, r3
 8001b12:	4322      	orrs	r2, r4
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dsub+0x31c>
 8001b16:	e1fc      	b.n	8001f12 <__aeabi_dsub+0x716>
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0312      	lsls	r2, r2, #12
 8001b1c:	4314      	orrs	r4, r2
 8001b1e:	0324      	lsls	r4, r4, #12
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <__aeabi_dsub+0x358>)
 8001b22:	0b24      	lsrs	r4, r4, #12
 8001b24:	e70d      	b.n	8001942 <__aeabi_dsub+0x146>
 8001b26:	0020      	movs	r0, r4
 8001b28:	f000 fa86 	bl	8002038 <__clzsi2>
 8001b2c:	0001      	movs	r1, r0
 8001b2e:	3118      	adds	r1, #24
 8001b30:	291f      	cmp	r1, #31
 8001b32:	dc00      	bgt.n	8001b36 <__aeabi_dsub+0x33a>
 8001b34:	e6c4      	b.n	80018c0 <__aeabi_dsub+0xc4>
 8001b36:	3808      	subs	r0, #8
 8001b38:	4084      	lsls	r4, r0
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	0020      	movs	r0, r4
 8001b3e:	2400      	movs	r4, #0
 8001b40:	4588      	cmp	r8, r1
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dsub+0x34a>
 8001b44:	e6c8      	b.n	80018d8 <__aeabi_dsub+0xdc>
 8001b46:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <__aeabi_dsub+0x35c>)
 8001b48:	1a5b      	subs	r3, r3, r1
 8001b4a:	4010      	ands	r0, r2
 8001b4c:	4698      	mov	r8, r3
 8001b4e:	4681      	mov	r9, r0
 8001b50:	e6d6      	b.n	8001900 <__aeabi_dsub+0x104>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	430f      	orrs	r7, r1
 8001b66:	1e7a      	subs	r2, r7, #1
 8001b68:	4197      	sbcs	r7, r2
 8001b6a:	e691      	b.n	8001890 <__aeabi_dsub+0x94>
 8001b6c:	4661      	mov	r1, ip
 8001b6e:	08db      	lsrs	r3, r3, #3
 8001b70:	0749      	lsls	r1, r1, #29
 8001b72:	430b      	orrs	r3, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	08cc      	lsrs	r4, r1, #3
 8001b78:	e7b8      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4cd3      	ldr	r4, [pc, #844]	; (8001ecc <__aeabi_dsub+0x6d0>)
 8001b7e:	3001      	adds	r0, #1
 8001b80:	4220      	tst	r0, r4
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x38a>
 8001b84:	e0a2      	b.n	8001ccc <__aeabi_dsub+0x4d0>
 8001b86:	4640      	mov	r0, r8
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d000      	beq.n	8001b8e <__aeabi_dsub+0x392>
 8001b8c:	e101      	b.n	8001d92 <__aeabi_dsub+0x596>
 8001b8e:	4660      	mov	r0, ip
 8001b90:	4318      	orrs	r0, r3
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x39a>
 8001b94:	e15e      	b.n	8001e54 <__aeabi_dsub+0x658>
 8001b96:	0008      	movs	r0, r1
 8001b98:	4338      	orrs	r0, r7
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dsub+0x3a2>
 8001b9c:	e15f      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001b9e:	4661      	mov	r1, ip
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	0749      	lsls	r1, r1, #29
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4661      	mov	r1, ip
 8001ba8:	08cc      	lsrs	r4, r1, #3
 8001baa:	e7a2      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001bac:	4dc8      	ldr	r5, [pc, #800]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x3b8>
 8001bb2:	e0cf      	b.n	8001d54 <__aeabi_dsub+0x558>
 8001bb4:	2580      	movs	r5, #128	; 0x80
 8001bb6:	4664      	mov	r4, ip
 8001bb8:	042d      	lsls	r5, r5, #16
 8001bba:	432c      	orrs	r4, r5
 8001bbc:	46a4      	mov	ip, r4
 8001bbe:	2a38      	cmp	r2, #56	; 0x38
 8001bc0:	dc56      	bgt.n	8001c70 <__aeabi_dsub+0x474>
 8001bc2:	2a1f      	cmp	r2, #31
 8001bc4:	dd00      	ble.n	8001bc8 <__aeabi_dsub+0x3cc>
 8001bc6:	e0d1      	b.n	8001d6c <__aeabi_dsub+0x570>
 8001bc8:	2520      	movs	r5, #32
 8001bca:	001e      	movs	r6, r3
 8001bcc:	1aad      	subs	r5, r5, r2
 8001bce:	4664      	mov	r4, ip
 8001bd0:	40ab      	lsls	r3, r5
 8001bd2:	40ac      	lsls	r4, r5
 8001bd4:	40d6      	lsrs	r6, r2
 8001bd6:	1e5d      	subs	r5, r3, #1
 8001bd8:	41ab      	sbcs	r3, r5
 8001bda:	4334      	orrs	r4, r6
 8001bdc:	4323      	orrs	r3, r4
 8001bde:	4664      	mov	r4, ip
 8001be0:	40d4      	lsrs	r4, r2
 8001be2:	1b09      	subs	r1, r1, r4
 8001be4:	e049      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001be6:	4660      	mov	r0, ip
 8001be8:	1bdc      	subs	r4, r3, r7
 8001bea:	1a46      	subs	r6, r0, r1
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4180      	sbcs	r0, r0
 8001bf0:	4240      	negs	r0, r0
 8001bf2:	4681      	mov	r9, r0
 8001bf4:	0030      	movs	r0, r6
 8001bf6:	464e      	mov	r6, r9
 8001bf8:	1b80      	subs	r0, r0, r6
 8001bfa:	4681      	mov	r9, r0
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	d476      	bmi.n	8001cee <__aeabi_dsub+0x4f2>
 8001c00:	464b      	mov	r3, r9
 8001c02:	4323      	orrs	r3, r4
 8001c04:	d000      	beq.n	8001c08 <__aeabi_dsub+0x40c>
 8001c06:	e652      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001c08:	2400      	movs	r4, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	e771      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001c0e:	4339      	orrs	r1, r7
 8001c10:	000c      	movs	r4, r1
 8001c12:	1e62      	subs	r2, r4, #1
 8001c14:	4194      	sbcs	r4, r2
 8001c16:	18e4      	adds	r4, r4, r3
 8001c18:	429c      	cmp	r4, r3
 8001c1a:	419b      	sbcs	r3, r3
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	4463      	add	r3, ip
 8001c20:	4699      	mov	r9, r3
 8001c22:	464b      	mov	r3, r9
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	d400      	bmi.n	8001c2a <__aeabi_dsub+0x42e>
 8001c28:	e756      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	469c      	mov	ip, r3
 8001c2e:	4ba8      	ldr	r3, [pc, #672]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c30:	44e0      	add	r8, ip
 8001c32:	4598      	cmp	r8, r3
 8001c34:	d038      	beq.n	8001ca8 <__aeabi_dsub+0x4ac>
 8001c36:	464b      	mov	r3, r9
 8001c38:	48a6      	ldr	r0, [pc, #664]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4003      	ands	r3, r0
 8001c3e:	0018      	movs	r0, r3
 8001c40:	0863      	lsrs	r3, r4, #1
 8001c42:	4014      	ands	r4, r2
 8001c44:	431c      	orrs	r4, r3
 8001c46:	07c3      	lsls	r3, r0, #31
 8001c48:	431c      	orrs	r4, r3
 8001c4a:	0843      	lsrs	r3, r0, #1
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	e657      	b.n	8001900 <__aeabi_dsub+0x104>
 8001c50:	0010      	movs	r0, r2
 8001c52:	000e      	movs	r6, r1
 8001c54:	3820      	subs	r0, #32
 8001c56:	40c6      	lsrs	r6, r0
 8001c58:	2a20      	cmp	r2, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_dsub+0x46a>
 8001c5c:	2040      	movs	r0, #64	; 0x40
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	4091      	lsls	r1, r2
 8001c62:	430f      	orrs	r7, r1
 8001c64:	46b9      	mov	r9, r7
 8001c66:	464f      	mov	r7, r9
 8001c68:	1e7a      	subs	r2, r7, #1
 8001c6a:	4197      	sbcs	r7, r2
 8001c6c:	4337      	orrs	r7, r6
 8001c6e:	e60f      	b.n	8001890 <__aeabi_dsub+0x94>
 8001c70:	4662      	mov	r2, ip
 8001c72:	431a      	orrs	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	1e5a      	subs	r2, r3, #1
 8001c78:	4193      	sbcs	r3, r2
 8001c7a:	1afc      	subs	r4, r7, r3
 8001c7c:	42a7      	cmp	r7, r4
 8001c7e:	41bf      	sbcs	r7, r7
 8001c80:	427f      	negs	r7, r7
 8001c82:	1bcb      	subs	r3, r1, r7
 8001c84:	4699      	mov	r9, r3
 8001c86:	465d      	mov	r5, fp
 8001c88:	4680      	mov	r8, r0
 8001c8a:	e608      	b.n	800189e <__aeabi_dsub+0xa2>
 8001c8c:	4666      	mov	r6, ip
 8001c8e:	431e      	orrs	r6, r3
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x498>
 8001c92:	e0be      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001c94:	1e56      	subs	r6, r2, #1
 8001c96:	2a01      	cmp	r2, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x4a0>
 8001c9a:	e109      	b.n	8001eb0 <__aeabi_dsub+0x6b4>
 8001c9c:	4c8c      	ldr	r4, [pc, #560]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001c9e:	42a2      	cmp	r2, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001ca2:	e119      	b.n	8001ed8 <__aeabi_dsub+0x6dc>
 8001ca4:	0032      	movs	r2, r6
 8001ca6:	e6c1      	b.n	8001a2c <__aeabi_dsub+0x230>
 8001ca8:	4642      	mov	r2, r8
 8001caa:	2400      	movs	r4, #0
 8001cac:	2300      	movs	r3, #0
 8001cae:	e648      	b.n	8001942 <__aeabi_dsub+0x146>
 8001cb0:	2020      	movs	r0, #32
 8001cb2:	000c      	movs	r4, r1
 8001cb4:	1a80      	subs	r0, r0, r2
 8001cb6:	003e      	movs	r6, r7
 8001cb8:	4087      	lsls	r7, r0
 8001cba:	4084      	lsls	r4, r0
 8001cbc:	40d6      	lsrs	r6, r2
 8001cbe:	1e78      	subs	r0, r7, #1
 8001cc0:	4187      	sbcs	r7, r0
 8001cc2:	40d1      	lsrs	r1, r2
 8001cc4:	4334      	orrs	r4, r6
 8001cc6:	433c      	orrs	r4, r7
 8001cc8:	448c      	add	ip, r1
 8001cca:	e7a4      	b.n	8001c16 <__aeabi_dsub+0x41a>
 8001ccc:	4a80      	ldr	r2, [pc, #512]	; (8001ed0 <__aeabi_dsub+0x6d4>)
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4d8>
 8001cd2:	e0e9      	b.n	8001ea8 <__aeabi_dsub+0x6ac>
 8001cd4:	19df      	adds	r7, r3, r7
 8001cd6:	429f      	cmp	r7, r3
 8001cd8:	419b      	sbcs	r3, r3
 8001cda:	4461      	add	r1, ip
 8001cdc:	425b      	negs	r3, r3
 8001cde:	18c9      	adds	r1, r1, r3
 8001ce0:	07cc      	lsls	r4, r1, #31
 8001ce2:	087f      	lsrs	r7, r7, #1
 8001ce4:	084b      	lsrs	r3, r1, #1
 8001ce6:	4699      	mov	r9, r3
 8001ce8:	4680      	mov	r8, r0
 8001cea:	433c      	orrs	r4, r7
 8001cec:	e6f4      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001cee:	1afc      	subs	r4, r7, r3
 8001cf0:	42a7      	cmp	r7, r4
 8001cf2:	41bf      	sbcs	r7, r7
 8001cf4:	4663      	mov	r3, ip
 8001cf6:	427f      	negs	r7, r7
 8001cf8:	1ac9      	subs	r1, r1, r3
 8001cfa:	1bcb      	subs	r3, r1, r7
 8001cfc:	4699      	mov	r9, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	e5d5      	b.n	80018ae <__aeabi_dsub+0xb2>
 8001d02:	08ff      	lsrs	r7, r7, #3
 8001d04:	074b      	lsls	r3, r1, #29
 8001d06:	465d      	mov	r5, fp
 8001d08:	433b      	orrs	r3, r7
 8001d0a:	08cc      	lsrs	r4, r1, #3
 8001d0c:	e6ee      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001d0e:	4662      	mov	r2, ip
 8001d10:	431a      	orrs	r2, r3
 8001d12:	d000      	beq.n	8001d16 <__aeabi_dsub+0x51a>
 8001d14:	e082      	b.n	8001e1c <__aeabi_dsub+0x620>
 8001d16:	000b      	movs	r3, r1
 8001d18:	433b      	orrs	r3, r7
 8001d1a:	d11b      	bne.n	8001d54 <__aeabi_dsub+0x558>
 8001d1c:	2480      	movs	r4, #128	; 0x80
 8001d1e:	2500      	movs	r5, #0
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e6f9      	b.n	8001b18 <__aeabi_dsub+0x31c>
 8001d24:	19dc      	adds	r4, r3, r7
 8001d26:	429c      	cmp	r4, r3
 8001d28:	419b      	sbcs	r3, r3
 8001d2a:	4461      	add	r1, ip
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	425b      	negs	r3, r3
 8001d30:	4499      	add	r9, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	d444      	bmi.n	8001dc2 <__aeabi_dsub+0x5c6>
 8001d38:	2301      	movs	r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	e6cc      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001d3e:	1bdc      	subs	r4, r3, r7
 8001d40:	4662      	mov	r2, ip
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	419b      	sbcs	r3, r3
 8001d46:	1a51      	subs	r1, r2, r1
 8001d48:	425b      	negs	r3, r3
 8001d4a:	1acb      	subs	r3, r1, r3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2301      	movs	r3, #1
 8001d50:	4698      	mov	r8, r3
 8001d52:	e5a4      	b.n	800189e <__aeabi_dsub+0xa2>
 8001d54:	08ff      	lsrs	r7, r7, #3
 8001d56:	074b      	lsls	r3, r1, #29
 8001d58:	465d      	mov	r5, fp
 8001d5a:	433b      	orrs	r3, r7
 8001d5c:	08cc      	lsrs	r4, r1, #3
 8001d5e:	e6d7      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d60:	4662      	mov	r2, ip
 8001d62:	431a      	orrs	r2, r3
 8001d64:	0014      	movs	r4, r2
 8001d66:	1e63      	subs	r3, r4, #1
 8001d68:	419c      	sbcs	r4, r3
 8001d6a:	e679      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001d6c:	0015      	movs	r5, r2
 8001d6e:	4664      	mov	r4, ip
 8001d70:	3d20      	subs	r5, #32
 8001d72:	40ec      	lsrs	r4, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d005      	beq.n	8001d86 <__aeabi_dsub+0x58a>
 8001d7a:	2540      	movs	r5, #64	; 0x40
 8001d7c:	4664      	mov	r4, ip
 8001d7e:	1aaa      	subs	r2, r5, r2
 8001d80:	4094      	lsls	r4, r2
 8001d82:	4323      	orrs	r3, r4
 8001d84:	469a      	mov	sl, r3
 8001d86:	4654      	mov	r4, sl
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	419c      	sbcs	r4, r3
 8001d8c:	4643      	mov	r3, r8
 8001d8e:	4323      	orrs	r3, r4
 8001d90:	e773      	b.n	8001c7a <__aeabi_dsub+0x47e>
 8001d92:	4662      	mov	r2, ip
 8001d94:	431a      	orrs	r2, r3
 8001d96:	d023      	beq.n	8001de0 <__aeabi_dsub+0x5e4>
 8001d98:	000a      	movs	r2, r1
 8001d9a:	433a      	orrs	r2, r7
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x5a4>
 8001d9e:	e0a0      	b.n	8001ee2 <__aeabi_dsub+0x6e6>
 8001da0:	4662      	mov	r2, ip
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	0752      	lsls	r2, r2, #29
 8001da6:	4313      	orrs	r3, r2
 8001da8:	4662      	mov	r2, ip
 8001daa:	08d4      	lsrs	r4, r2, #3
 8001dac:	e6b0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dae:	000b      	movs	r3, r1
 8001db0:	433b      	orrs	r3, r7
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dsub+0x5ba>
 8001db4:	e728      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001db6:	08ff      	lsrs	r7, r7, #3
 8001db8:	074b      	lsls	r3, r1, #29
 8001dba:	465d      	mov	r5, fp
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	08cc      	lsrs	r4, r1, #3
 8001dc0:	e697      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e736      	b.n	8001c36 <__aeabi_dsub+0x43a>
 8001dc8:	1afc      	subs	r4, r7, r3
 8001dca:	42a7      	cmp	r7, r4
 8001dcc:	41bf      	sbcs	r7, r7
 8001dce:	4663      	mov	r3, ip
 8001dd0:	427f      	negs	r7, r7
 8001dd2:	1ac9      	subs	r1, r1, r3
 8001dd4:	1bcb      	subs	r3, r1, r7
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e55e      	b.n	800189e <__aeabi_dsub+0xa2>
 8001de0:	074b      	lsls	r3, r1, #29
 8001de2:	08ff      	lsrs	r7, r7, #3
 8001de4:	433b      	orrs	r3, r7
 8001de6:	08cc      	lsrs	r4, r1, #3
 8001de8:	e692      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001dea:	1bdc      	subs	r4, r3, r7
 8001dec:	4660      	mov	r0, ip
 8001dee:	42a3      	cmp	r3, r4
 8001df0:	41b6      	sbcs	r6, r6
 8001df2:	1a40      	subs	r0, r0, r1
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	4681      	mov	r9, r0
 8001dfa:	0200      	lsls	r0, r0, #8
 8001dfc:	d560      	bpl.n	8001ec0 <__aeabi_dsub+0x6c4>
 8001dfe:	1afc      	subs	r4, r7, r3
 8001e00:	42a7      	cmp	r7, r4
 8001e02:	41bf      	sbcs	r7, r7
 8001e04:	4663      	mov	r3, ip
 8001e06:	427f      	negs	r7, r7
 8001e08:	1ac9      	subs	r1, r1, r3
 8001e0a:	1bcb      	subs	r3, r1, r7
 8001e0c:	4699      	mov	r9, r3
 8001e0e:	465d      	mov	r5, fp
 8001e10:	e576      	b.n	8001900 <__aeabi_dsub+0x104>
 8001e12:	08ff      	lsrs	r7, r7, #3
 8001e14:	074b      	lsls	r3, r1, #29
 8001e16:	433b      	orrs	r3, r7
 8001e18:	08cc      	lsrs	r4, r1, #3
 8001e1a:	e667      	b.n	8001aec <__aeabi_dsub+0x2f0>
 8001e1c:	000a      	movs	r2, r1
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	433a      	orrs	r2, r7
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x62a>
 8001e24:	e66f      	b.n	8001b06 <__aeabi_dsub+0x30a>
 8001e26:	4662      	mov	r2, ip
 8001e28:	0752      	lsls	r2, r2, #29
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	4662      	mov	r2, ip
 8001e2e:	08d4      	lsrs	r4, r2, #3
 8001e30:	2280      	movs	r2, #128	; 0x80
 8001e32:	0312      	lsls	r2, r2, #12
 8001e34:	4214      	tst	r4, r2
 8001e36:	d007      	beq.n	8001e48 <__aeabi_dsub+0x64c>
 8001e38:	08c8      	lsrs	r0, r1, #3
 8001e3a:	4210      	tst	r0, r2
 8001e3c:	d104      	bne.n	8001e48 <__aeabi_dsub+0x64c>
 8001e3e:	465d      	mov	r5, fp
 8001e40:	0004      	movs	r4, r0
 8001e42:	08fb      	lsrs	r3, r7, #3
 8001e44:	0749      	lsls	r1, r1, #29
 8001e46:	430b      	orrs	r3, r1
 8001e48:	0f5a      	lsrs	r2, r3, #29
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	0752      	lsls	r2, r2, #29
 8001e50:	4313      	orrs	r3, r2
 8001e52:	e65d      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e54:	074b      	lsls	r3, r1, #29
 8001e56:	08ff      	lsrs	r7, r7, #3
 8001e58:	433b      	orrs	r3, r7
 8001e5a:	08cc      	lsrs	r4, r1, #3
 8001e5c:	e649      	b.n	8001af2 <__aeabi_dsub+0x2f6>
 8001e5e:	19dc      	adds	r4, r3, r7
 8001e60:	429c      	cmp	r4, r3
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	4689      	mov	r9, r1
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4499      	add	r9, r3
 8001e6c:	464b      	mov	r3, r9
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	d400      	bmi.n	8001e74 <__aeabi_dsub+0x678>
 8001e72:	e631      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e74:	464a      	mov	r2, r9
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <__aeabi_dsub+0x6d8>)
 8001e78:	401a      	ands	r2, r3
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	4691      	mov	r9, r2
 8001e7e:	4698      	mov	r8, r3
 8001e80:	e62a      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001e82:	0016      	movs	r6, r2
 8001e84:	4664      	mov	r4, ip
 8001e86:	3e20      	subs	r6, #32
 8001e88:	40f4      	lsrs	r4, r6
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	2a20      	cmp	r2, #32
 8001e8e:	d005      	beq.n	8001e9c <__aeabi_dsub+0x6a0>
 8001e90:	2640      	movs	r6, #64	; 0x40
 8001e92:	4664      	mov	r4, ip
 8001e94:	1ab2      	subs	r2, r6, r2
 8001e96:	4094      	lsls	r4, r2
 8001e98:	4323      	orrs	r3, r4
 8001e9a:	469a      	mov	sl, r3
 8001e9c:	4654      	mov	r4, sl
 8001e9e:	1e63      	subs	r3, r4, #1
 8001ea0:	419c      	sbcs	r4, r3
 8001ea2:	4643      	mov	r3, r8
 8001ea4:	431c      	orrs	r4, r3
 8001ea6:	e5db      	b.n	8001a60 <__aeabi_dsub+0x264>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	2400      	movs	r4, #0
 8001eac:	2300      	movs	r3, #0
 8001eae:	e548      	b.n	8001942 <__aeabi_dsub+0x146>
 8001eb0:	19dc      	adds	r4, r3, r7
 8001eb2:	42bc      	cmp	r4, r7
 8001eb4:	41bf      	sbcs	r7, r7
 8001eb6:	4461      	add	r1, ip
 8001eb8:	4689      	mov	r9, r1
 8001eba:	427f      	negs	r7, r7
 8001ebc:	44b9      	add	r9, r7
 8001ebe:	e738      	b.n	8001d32 <__aeabi_dsub+0x536>
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4323      	orrs	r3, r4
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_dsub+0x6cc>
 8001ec6:	e69f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001ec8:	e606      	b.n	8001ad8 <__aeabi_dsub+0x2dc>
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	000007fe 	.word	0x000007fe
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	ff7fffff 	.word	0xff7fffff
 8001ed8:	08ff      	lsrs	r7, r7, #3
 8001eda:	074b      	lsls	r3, r1, #29
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e616      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	0752      	lsls	r2, r2, #29
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	4662      	mov	r2, ip
 8001eec:	08d4      	lsrs	r4, r2, #3
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	0312      	lsls	r2, r2, #12
 8001ef2:	4214      	tst	r4, r2
 8001ef4:	d007      	beq.n	8001f06 <__aeabi_dsub+0x70a>
 8001ef6:	08c8      	lsrs	r0, r1, #3
 8001ef8:	4210      	tst	r0, r2
 8001efa:	d104      	bne.n	8001f06 <__aeabi_dsub+0x70a>
 8001efc:	465d      	mov	r5, fp
 8001efe:	0004      	movs	r4, r0
 8001f00:	08fb      	lsrs	r3, r7, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	0f5a      	lsrs	r2, r3, #29
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	0752      	lsls	r2, r2, #29
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	e5fe      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001f12:	2300      	movs	r3, #0
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dsub+0x720>)
 8001f16:	001c      	movs	r4, r3
 8001f18:	e513      	b.n	8001942 <__aeabi_dsub+0x146>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff

08001f20 <__aeabi_d2iz>:
 8001f20:	000a      	movs	r2, r1
 8001f22:	b530      	push	{r4, r5, lr}
 8001f24:	4c13      	ldr	r4, [pc, #76]	; (8001f74 <__aeabi_d2iz+0x54>)
 8001f26:	0053      	lsls	r3, r2, #1
 8001f28:	0309      	lsls	r1, r1, #12
 8001f2a:	0005      	movs	r5, r0
 8001f2c:	0b09      	lsrs	r1, r1, #12
 8001f2e:	2000      	movs	r0, #0
 8001f30:	0d5b      	lsrs	r3, r3, #21
 8001f32:	0fd2      	lsrs	r2, r2, #31
 8001f34:	42a3      	cmp	r3, r4
 8001f36:	dd04      	ble.n	8001f42 <__aeabi_d2iz+0x22>
 8001f38:	480f      	ldr	r0, [pc, #60]	; (8001f78 <__aeabi_d2iz+0x58>)
 8001f3a:	4283      	cmp	r3, r0
 8001f3c:	dd02      	ble.n	8001f44 <__aeabi_d2iz+0x24>
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <__aeabi_d2iz+0x5c>)
 8001f40:	18d0      	adds	r0, r2, r3
 8001f42:	bd30      	pop	{r4, r5, pc}
 8001f44:	2080      	movs	r0, #128	; 0x80
 8001f46:	0340      	lsls	r0, r0, #13
 8001f48:	4301      	orrs	r1, r0
 8001f4a:	480d      	ldr	r0, [pc, #52]	; (8001f80 <__aeabi_d2iz+0x60>)
 8001f4c:	1ac0      	subs	r0, r0, r3
 8001f4e:	281f      	cmp	r0, #31
 8001f50:	dd08      	ble.n	8001f64 <__aeabi_d2iz+0x44>
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <__aeabi_d2iz+0x64>)
 8001f54:	1ac3      	subs	r3, r0, r3
 8001f56:	40d9      	lsrs	r1, r3
 8001f58:	000b      	movs	r3, r1
 8001f5a:	4258      	negs	r0, r3
 8001f5c:	2a00      	cmp	r2, #0
 8001f5e:	d1f0      	bne.n	8001f42 <__aeabi_d2iz+0x22>
 8001f60:	0018      	movs	r0, r3
 8001f62:	e7ee      	b.n	8001f42 <__aeabi_d2iz+0x22>
 8001f64:	4c08      	ldr	r4, [pc, #32]	; (8001f88 <__aeabi_d2iz+0x68>)
 8001f66:	40c5      	lsrs	r5, r0
 8001f68:	46a4      	mov	ip, r4
 8001f6a:	4463      	add	r3, ip
 8001f6c:	4099      	lsls	r1, r3
 8001f6e:	000b      	movs	r3, r1
 8001f70:	432b      	orrs	r3, r5
 8001f72:	e7f2      	b.n	8001f5a <__aeabi_d2iz+0x3a>
 8001f74:	000003fe 	.word	0x000003fe
 8001f78:	0000041d 	.word	0x0000041d
 8001f7c:	7fffffff 	.word	0x7fffffff
 8001f80:	00000433 	.word	0x00000433
 8001f84:	00000413 	.word	0x00000413
 8001f88:	fffffbed 	.word	0xfffffbed

08001f8c <__aeabi_i2d>:
 8001f8c:	b570      	push	{r4, r5, r6, lr}
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d016      	beq.n	8001fc0 <__aeabi_i2d+0x34>
 8001f92:	17c3      	asrs	r3, r0, #31
 8001f94:	18c5      	adds	r5, r0, r3
 8001f96:	405d      	eors	r5, r3
 8001f98:	0fc4      	lsrs	r4, r0, #31
 8001f9a:	0028      	movs	r0, r5
 8001f9c:	f000 f84c 	bl	8002038 <__clzsi2>
 8001fa0:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <__aeabi_i2d+0x5c>)
 8001fa2:	1a12      	subs	r2, r2, r0
 8001fa4:	280a      	cmp	r0, #10
 8001fa6:	dc16      	bgt.n	8001fd6 <__aeabi_i2d+0x4a>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	002e      	movs	r6, r5
 8001fac:	3315      	adds	r3, #21
 8001fae:	409e      	lsls	r6, r3
 8001fb0:	230b      	movs	r3, #11
 8001fb2:	1a18      	subs	r0, r3, r0
 8001fb4:	40c5      	lsrs	r5, r0
 8001fb6:	0552      	lsls	r2, r2, #21
 8001fb8:	032d      	lsls	r5, r5, #12
 8001fba:	0b2d      	lsrs	r5, r5, #12
 8001fbc:	0d53      	lsrs	r3, r2, #21
 8001fbe:	e003      	b.n	8001fc8 <__aeabi_i2d+0x3c>
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	2600      	movs	r6, #0
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	432b      	orrs	r3, r5
 8001fcc:	07e4      	lsls	r4, r4, #31
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	0030      	movs	r0, r6
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	bd70      	pop	{r4, r5, r6, pc}
 8001fd6:	380b      	subs	r0, #11
 8001fd8:	4085      	lsls	r5, r0
 8001fda:	0552      	lsls	r2, r2, #21
 8001fdc:	032d      	lsls	r5, r5, #12
 8001fde:	2600      	movs	r6, #0
 8001fe0:	0b2d      	lsrs	r5, r5, #12
 8001fe2:	0d53      	lsrs	r3, r2, #21
 8001fe4:	e7f0      	b.n	8001fc8 <__aeabi_i2d+0x3c>
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	0000041e 	.word	0x0000041e

08001fec <__aeabi_ui2d>:
 8001fec:	b510      	push	{r4, lr}
 8001fee:	1e04      	subs	r4, r0, #0
 8001ff0:	d010      	beq.n	8002014 <__aeabi_ui2d+0x28>
 8001ff2:	f000 f821 	bl	8002038 <__clzsi2>
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <__aeabi_ui2d+0x48>)
 8001ff8:	1a1b      	subs	r3, r3, r0
 8001ffa:	280a      	cmp	r0, #10
 8001ffc:	dc11      	bgt.n	8002022 <__aeabi_ui2d+0x36>
 8001ffe:	220b      	movs	r2, #11
 8002000:	0021      	movs	r1, r4
 8002002:	1a12      	subs	r2, r2, r0
 8002004:	40d1      	lsrs	r1, r2
 8002006:	3015      	adds	r0, #21
 8002008:	030a      	lsls	r2, r1, #12
 800200a:	055b      	lsls	r3, r3, #21
 800200c:	4084      	lsls	r4, r0
 800200e:	0b12      	lsrs	r2, r2, #12
 8002010:	0d5b      	lsrs	r3, r3, #21
 8002012:	e001      	b.n	8002018 <__aeabi_ui2d+0x2c>
 8002014:	2300      	movs	r3, #0
 8002016:	2200      	movs	r2, #0
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	4313      	orrs	r3, r2
 800201c:	0020      	movs	r0, r4
 800201e:	0019      	movs	r1, r3
 8002020:	bd10      	pop	{r4, pc}
 8002022:	0022      	movs	r2, r4
 8002024:	380b      	subs	r0, #11
 8002026:	4082      	lsls	r2, r0
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	0312      	lsls	r2, r2, #12
 800202c:	2400      	movs	r4, #0
 800202e:	0b12      	lsrs	r2, r2, #12
 8002030:	0d5b      	lsrs	r3, r3, #21
 8002032:	e7f1      	b.n	8002018 <__aeabi_ui2d+0x2c>
 8002034:	0000041e 	.word	0x0000041e

08002038 <__clzsi2>:
 8002038:	211c      	movs	r1, #28
 800203a:	2301      	movs	r3, #1
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	4298      	cmp	r0, r3
 8002040:	d301      	bcc.n	8002046 <__clzsi2+0xe>
 8002042:	0c00      	lsrs	r0, r0, #16
 8002044:	3910      	subs	r1, #16
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	4298      	cmp	r0, r3
 800204a:	d301      	bcc.n	8002050 <__clzsi2+0x18>
 800204c:	0a00      	lsrs	r0, r0, #8
 800204e:	3908      	subs	r1, #8
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	4298      	cmp	r0, r3
 8002054:	d301      	bcc.n	800205a <__clzsi2+0x22>
 8002056:	0900      	lsrs	r0, r0, #4
 8002058:	3904      	subs	r1, #4
 800205a:	a202      	add	r2, pc, #8	; (adr r2, 8002064 <__clzsi2+0x2c>)
 800205c:	5c10      	ldrb	r0, [r2, r0]
 800205e:	1840      	adds	r0, r0, r1
 8002060:	4770      	bx	lr
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	02020304 	.word	0x02020304
 8002068:	01010101 	.word	0x01010101
	...

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	0002      	movs	r2, r0
 800207c:	1dfb      	adds	r3, r7, #7
 800207e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002080:	1dfb      	adds	r3, r7, #7
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b7f      	cmp	r3, #127	; 0x7f
 8002086:	d809      	bhi.n	800209c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002088:	1dfb      	adds	r3, r7, #7
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	001a      	movs	r2, r3
 800208e:	231f      	movs	r3, #31
 8002090:	401a      	ands	r2, r3
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_EnableIRQ+0x30>)
 8002094:	2101      	movs	r1, #1
 8002096:	4091      	lsls	r1, r2
 8002098:	000a      	movs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800209c:	46c0      	nop			; (mov r8, r8)
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	1dfb      	adds	r3, r7, #7
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b7f      	cmp	r3, #127	; 0x7f
 80020bc:	d828      	bhi.n	8002110 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020be:	4a2f      	ldr	r2, [pc, #188]	; (800217c <__NVIC_SetPriority+0xd4>)
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	b25b      	sxtb	r3, r3
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	33c0      	adds	r3, #192	; 0xc0
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	589b      	ldr	r3, [r3, r2]
 80020ce:	1dfa      	adds	r2, r7, #7
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	0011      	movs	r1, r2
 80020d4:	2203      	movs	r2, #3
 80020d6:	400a      	ands	r2, r1
 80020d8:	00d2      	lsls	r2, r2, #3
 80020da:	21ff      	movs	r1, #255	; 0xff
 80020dc:	4091      	lsls	r1, r2
 80020de:	000a      	movs	r2, r1
 80020e0:	43d2      	mvns	r2, r2
 80020e2:	401a      	ands	r2, r3
 80020e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	22ff      	movs	r2, #255	; 0xff
 80020ec:	401a      	ands	r2, r3
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	0018      	movs	r0, r3
 80020f4:	2303      	movs	r3, #3
 80020f6:	4003      	ands	r3, r0
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fc:	481f      	ldr	r0, [pc, #124]	; (800217c <__NVIC_SetPriority+0xd4>)
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b25b      	sxtb	r3, r3
 8002104:	089b      	lsrs	r3, r3, #2
 8002106:	430a      	orrs	r2, r1
 8002108:	33c0      	adds	r3, #192	; 0xc0
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800210e:	e031      	b.n	8002174 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <__NVIC_SetPriority+0xd8>)
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	0019      	movs	r1, r3
 8002118:	230f      	movs	r3, #15
 800211a:	400b      	ands	r3, r1
 800211c:	3b08      	subs	r3, #8
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	3306      	adds	r3, #6
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	3304      	adds	r3, #4
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	1dfa      	adds	r2, r7, #7
 800212c:	7812      	ldrb	r2, [r2, #0]
 800212e:	0011      	movs	r1, r2
 8002130:	2203      	movs	r2, #3
 8002132:	400a      	ands	r2, r1
 8002134:	00d2      	lsls	r2, r2, #3
 8002136:	21ff      	movs	r1, #255	; 0xff
 8002138:	4091      	lsls	r1, r2
 800213a:	000a      	movs	r2, r1
 800213c:	43d2      	mvns	r2, r2
 800213e:	401a      	ands	r2, r3
 8002140:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	401a      	ands	r2, r3
 800214a:	1dfb      	adds	r3, r7, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	2303      	movs	r3, #3
 8002152:	4003      	ands	r3, r0
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002158:	4809      	ldr	r0, [pc, #36]	; (8002180 <__NVIC_SetPriority+0xd8>)
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	001c      	movs	r4, r3
 8002160:	230f      	movs	r3, #15
 8002162:	4023      	ands	r3, r4
 8002164:	3b08      	subs	r3, #8
 8002166:	089b      	lsrs	r3, r3, #2
 8002168:	430a      	orrs	r2, r1
 800216a:	3306      	adds	r3, #6
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	18c3      	adds	r3, r0, r3
 8002170:	3304      	adds	r3, #4
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b003      	add	sp, #12
 800217a:	bd90      	pop	{r4, r7, pc}
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a03      	ldr	r2, [pc, #12]	; (80021bc <LL_USART_DisableFIFO+0x1c>)
 80021ae:	401a      	ands	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	46c0      	nop			; (mov r8, r8)
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b002      	add	sp, #8
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	dfffffff 	.word	0xdfffffff

080021c0 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	075b      	lsls	r3, r3, #29
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <LL_USART_SetRXFIFOThreshold+0x24>)
 80021f4:	401a      	ands	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	065b      	lsls	r3, r3, #25
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	f1ffffff 	.word	0xf1ffffff

0800220c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <LL_USART_ConfigAsyncMode+0x2c>)
 800221a:	401a      	ands	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	222a      	movs	r2, #42	; 0x2a
 8002226:	4393      	bics	r3, r2
 8002228:	001a      	movs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	ffffb7ff 	.word	0xffffb7ff

0800223c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69da      	ldr	r2, [r3, #28]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	039b      	lsls	r3, r3, #14
 800224c:	401a      	ands	r2, r3
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	039b      	lsls	r3, r3, #14
 8002252:	429a      	cmp	r2, r3
 8002254:	d101      	bne.n	800225a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <LL_USART_IsActiveFlag_TEACK+0x20>
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	03db      	lsls	r3, r3, #15
 8002274:	401a      	ands	r2, r3
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	03db      	lsls	r3, r3, #15
 800227a:	429a      	cmp	r2, r3
 800227c:	d101      	bne.n	8002282 <LL_USART_IsActiveFlag_REACK+0x1e>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_USART_IsActiveFlag_REACK+0x20>
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b002      	add	sp, #8
 800228a:	bd80      	pop	{r7, pc}

0800228c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2220      	movs	r2, #32
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2201      	movs	r2, #1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	05db      	lsls	r3, r3, #23
 80022d4:	0ddb      	lsrs	r3, r3, #23
 80022d6:	b29b      	uxth	r3, r3
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b002      	add	sp, #8
 80022de:	bd80      	pop	{r7, pc}

080022e0 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <LL_SYSCFG_EnableFastModePlus+0x1c>)
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <LL_SYSCFG_EnableFastModePlus+0x1c>)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40010000 	.word	0x40010000

08002300 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	619a      	str	r2, [r3, #24]
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <LL_APB1_GRP1_EnableClock+0x28>)
 800233a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <LL_APB1_GRP1_EnableClock+0x28>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	430a      	orrs	r2, r1
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <LL_APB1_GRP1_EnableClock+0x28>)
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <LL_IOP_GRP1_EnableClock+0x28>)
 8002366:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <LL_IOP_GRP1_EnableClock+0x28>)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	430a      	orrs	r2, r1
 800236e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8002370:	4b04      	ldr	r3, [pc, #16]	; (8002384 <LL_IOP_GRP1_EnableClock+0x28>)
 8002372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4013      	ands	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000

08002388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b08d      	sub	sp, #52	; 0x34
 800238c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800238e:	2324      	movs	r3, #36	; 0x24
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	2200      	movs	r2, #0
 8002394:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8002396:	2322      	movs	r3, #34	; 0x22
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2200      	movs	r2, #0
 800239c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800239e:	2320      	movs	r3, #32
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2200      	movs	r2, #0
 80023a4:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80023a6:	231e      	movs	r3, #30
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80023ae:	231c      	movs	r3, #28
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2201      	movs	r2, #1
 80023b4:	4252      	negs	r2, r2
 80023b6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b8:	f004 fe6a 	bl	8007090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023bc:	f000 f8ee 	bl	800259c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023c0:	4b6e      	ldr	r3, [pc, #440]	; (800257c <main+0x1f4>)
 80023c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c4:	4b6d      	ldr	r3, [pc, #436]	; (800257c <main+0x1f4>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	430a      	orrs	r2, r1
 80023ca:	635a      	str	r2, [r3, #52]	; 0x34
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <main+0x1f4>)
 80023ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <main+0x1f4>)
 80023da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <main+0x1f4>)
 80023de:	2102      	movs	r1, #2
 80023e0:	430a      	orrs	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
 80023e4:	4b65      	ldr	r3, [pc, #404]	; (800257c <main+0x1f4>)
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	2202      	movs	r2, #2
 80023ea:	4013      	ands	r3, r2
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023f0:	4b62      	ldr	r3, [pc, #392]	; (800257c <main+0x1f4>)
 80023f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <main+0x1f4>)
 80023f6:	2104      	movs	r1, #4
 80023f8:	430a      	orrs	r2, r1
 80023fa:	635a      	str	r2, [r3, #52]	; 0x34
 80023fc:	4b5f      	ldr	r3, [pc, #380]	; (800257c <main+0x1f4>)
 80023fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002400:	2204      	movs	r2, #4
 8002402:	4013      	ands	r3, r2
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002408:	f000 fc30 	bl	8002c6c <MX_GPIO_Init>
  MX_DMA_Init();
 800240c:	f000 fc00 	bl	8002c10 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002410:	f000 fb1e 	bl	8002a50 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8002414:	f000 f942 	bl	800269c <MX_COMP1_Init>
  MX_TIM1_Init();
 8002418:	f000 fa20 	bl	800285c <MX_TIM1_Init>
  MX_USART3_Init();
 800241c:	f000 fbb6 	bl	8002b8c <MX_USART3_Init>
  MX_I2S1_Init();
 8002420:	f000 f9ae 	bl	8002780 <MX_I2S1_Init>
  MX_I2C1_Init();
 8002424:	f000 f96c 	bl	8002700 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002428:	f000 f9d4 	bl	80027d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 800242c:	4b54      	ldr	r3, [pc, #336]	; (8002580 <main+0x1f8>)
 800242e:	0018      	movs	r0, r3
 8002430:	f005 f8fc 	bl	800762c <HAL_COMP_Start>
	HAL_Delay(100);
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f004 feb1 	bl	800719c <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800243a:	f001 fd65 	bl	8003f08 <MEM_Reset>

	weoInit();
 800243e:	f000 fe77 	bl	8003130 <weoInit>
	HAL_Delay(1);
 8002442:	2001      	movs	r0, #1
 8002444:	f004 feaa 	bl	800719c <HAL_Delay>
	weoClear();
 8002448:	f000 fede 	bl	8003208 <weoClear>
	MEM_GetID();
 800244c:	f001 ffd0 	bl	80043f0 <MEM_GetID>
	soundSetup();
 8002450:	f001 f864 	bl	800351c <soundSetup>
	LIS3DHsetup();
 8002454:	f004 f968 	bl	8006728 <LIS3DHsetup>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 8002458:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <main+0x1fc>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b49      	ldr	r3, [pc, #292]	; (8002584 <main+0x1fc>)
 800245e:	494a      	ldr	r1, [pc, #296]	; (8002588 <main+0x200>)
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 8002464:	4b47      	ldr	r3, [pc, #284]	; (8002584 <main+0x1fc>)
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff ff10 	bl	800228c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 800246c:	4b45      	ldr	r3, [pc, #276]	; (8002584 <main+0x1fc>)
 800246e:	0018      	movs	r0, r3
 8002470:	f7ff ff1a 	bl	80022a8 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8002474:	4b43      	ldr	r3, [pc, #268]	; (8002584 <main+0x1fc>)
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <main+0x1fc>)
 800247a:	2108      	movs	r1, #8
 800247c:	430a      	orrs	r2, r1
 800247e:	621a      	str	r2, [r3, #32]

	squeak_generate();
 8002480:	f003 ff9c 	bl	80063bc <squeak_generate>

	I2C_SOUND_ChangePage(0x01);
 8002484:	2001      	movs	r0, #1
 8002486:	f001 f809 	bl	800349c <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800248a:	2100      	movs	r1, #0
 800248c:	2010      	movs	r0, #16
 800248e:	f001 f823 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002492:	2124      	movs	r1, #36	; 0x24
 8002494:	202e      	movs	r0, #46	; 0x2e
 8002496:	f001 f81f 	bl	80034d8 <WriteReg_I2C_SOUND>
    squeak_triple(signal);
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <main+0x204>)
 800249c:	0018      	movs	r0, r3
 800249e:	f004 f8e1 	bl	8006664 <squeak_triple>
//    squeak_long();

	uint8_t ASCII_X=0x02;
 80024a2:	231b      	movs	r3, #27
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	2202      	movs	r2, #2
 80024a8:	701a      	strb	r2, [r3, #0]
	uint8_t imY=0x04;
 80024aa:	231a      	movs	r3, #26
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	2204      	movs	r2, #4
 80024b0:	701a      	strb	r2, [r3, #0]
	uint8_t ASCII_height=0x26;
 80024b2:	2319      	movs	r3, #25
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2226      	movs	r2, #38	; 0x26
 80024b8:	701a      	strb	r2, [r3, #0]
	uint8_t X_increment=0x10;
 80024ba:	2318      	movs	r3, #24
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	2210      	movs	r2, #16
 80024c0:	701a      	strb	r2, [r3, #0]
	uint8_t decY=1;
 80024c2:	2127      	movs	r1, #39	; 0x27
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
	uint16_t k,j;
	uint8_t fontInfo=0xF1;
 80024ca:	2317      	movs	r3, #23
 80024cc:	18fb      	adds	r3, r7, r3
 80024ce:	22f1      	movs	r2, #241	; 0xf1
 80024d0:	701a      	strb	r2, [r3, #0]
	uint8_t fontCur;
	uint8_t curStr=1;
 80024d2:	2316      	movs	r3, #22
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
//	uint8_t curStr[4]={1,2,3,4};
	uint8_t strLen=4;
 80024da:	2315      	movs	r3, #21
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2204      	movs	r2, #4
 80024e0:	701a      	strb	r2, [r3, #0]
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(0xFF);
//					GPIOA->ODR |= 1 << 7;	//set dc
//					GPIOA->ODR |= 1 << 6;	//set cs

	uint8_t localWidth=0x07;
 80024e2:	2314      	movs	r3, #20
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2207      	movs	r2, #7
 80024e8:	701a      	strb	r2, [r3, #0]
		uint8_t localHeight=0x0E;
 80024ea:	2313      	movs	r3, #19
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	220e      	movs	r2, #14
 80024f0:	701a      	strb	r2, [r3, #0]
		uint8_t x = 1;
 80024f2:	2312      	movs	r3, #18
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
		uint8_t y = 1;
 80024fa:	2011      	movs	r0, #17
 80024fc:	183b      	adds	r3, r7, r0
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
				decY=0x01;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
				if(y % 2 !=0){
 8002508:	183b      	adds	r3, r7, r0
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <main+0x194>
					decY=0x02;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2202      	movs	r2, #2
 800251a:	701a      	strb	r2, [r3, #0]
				}
	weoDrawRectangleFilled(x,y,(x+localWidth-1),y+(localHeight-decY),0xFF,aim);
 800251c:	2012      	movs	r0, #18
 800251e:	183a      	adds	r2, r7, r0
 8002520:	2314      	movs	r3, #20
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	18d3      	adds	r3, r2, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b2dc      	uxtb	r4, r3
 8002530:	2313      	movs	r3, #19
 8002532:	18fa      	adds	r2, r7, r3
 8002534:	2327      	movs	r3, #39	; 0x27
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b2da      	uxtb	r2, r3
 8002540:	2111      	movs	r1, #17
 8002542:	187b      	adds	r3, r7, r1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	187b      	adds	r3, r7, r1
 800254c:	7819      	ldrb	r1, [r3, #0]
 800254e:	183b      	adds	r3, r7, r0
 8002550:	7818      	ldrb	r0, [r3, #0]
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <main+0x208>)
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	23ff      	movs	r3, #255	; 0xff
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	0013      	movs	r3, r2
 800255c:	0022      	movs	r2, r4
 800255e:	f000 feb7 	bl	80032d0 <weoDrawRectangleFilled>
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <main+0x20c>)
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <main+0x20c>)
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	430a      	orrs	r2, r1
 800256c:	615a      	str	r2, [r3, #20]
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <main+0x210>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	0018      	movs	r0, r3
 8002574:	f001 ff9e 	bl	80044b4 <cmdExecute>
 8002578:	e7f9      	b.n	800256e <main+0x1e6>
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	40021000 	.word	0x40021000
 8002580:	20000090 	.word	0x20000090
 8002584:	40004400 	.word	0x40004400
 8002588:	1000100d 	.word	0x1000100d
 800258c:	20000434 	.word	0x20000434
 8002590:	20000030 	.word	0x20000030
 8002594:	50000800 	.word	0x50000800
 8002598:	2000042a 	.word	0x2000042a

0800259c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b0a1      	sub	sp, #132	; 0x84
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	2448      	movs	r4, #72	; 0x48
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	0018      	movs	r0, r3
 80025a8:	2338      	movs	r3, #56	; 0x38
 80025aa:	001a      	movs	r2, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	f00c f8d7 	bl	800e760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b2:	2338      	movs	r3, #56	; 0x38
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	0018      	movs	r0, r3
 80025b8:	2310      	movs	r3, #16
 80025ba:	001a      	movs	r2, r3
 80025bc:	2100      	movs	r1, #0
 80025be:	f00c f8cf 	bl	800e760 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	0018      	movs	r0, r3
 80025c6:	2334      	movs	r3, #52	; 0x34
 80025c8:	001a      	movs	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	f00c f8c8 	bl	800e760 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f007 fb1f 	bl	8009c18 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	2280      	movs	r2, #128	; 0x80
 80025e4:	0052      	lsls	r2, r2, #1
 80025e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80025e8:	0021      	movs	r1, r4
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	2202      	movs	r2, #2
 80025fa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2202      	movs	r2, #2
 8002600:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2200      	movs	r2, #0
 8002606:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2208      	movs	r2, #8
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	0292      	lsls	r2, r2, #10
 8002614:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2280      	movs	r2, #128	; 0x80
 800261a:	0492      	lsls	r2, r2, #18
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800261e:	187b      	adds	r3, r7, r1
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	0592      	lsls	r2, r2, #22
 8002624:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002626:	187b      	adds	r3, r7, r1
 8002628:	0018      	movs	r0, r3
 800262a:	f007 fb41 	bl	8009cb0 <HAL_RCC_OscConfig>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d001      	beq.n	8002636 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002632:	f004 f8ab 	bl	800678c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002636:	2138      	movs	r1, #56	; 0x38
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2207      	movs	r2, #7
 800263c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800263e:	187b      	adds	r3, r7, r1
 8002640:	2202      	movs	r2, #2
 8002642:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002650:	187b      	adds	r3, r7, r1
 8002652:	2102      	movs	r1, #2
 8002654:	0018      	movs	r0, r3
 8002656:	f007 fe4b 	bl	800a2f0 <HAL_RCC_ClockConfig>
 800265a:	1e03      	subs	r3, r0, #0
 800265c:	d001      	beq.n	8002662 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800265e:	f004 f895 	bl	800678c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <SystemClock_Config+0xfc>)
 8002666:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800266e:	1d3b      	adds	r3, r7, #4
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	2200      	movs	r2, #0
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002680:	1d3b      	adds	r3, r7, #4
 8002682:	0018      	movs	r0, r3
 8002684:	f007 ffde 	bl	800a644 <HAL_RCCEx_PeriphCLKConfig>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d001      	beq.n	8002690 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800268c:	f004 f87e 	bl	800678c <Error_Handler>
  }
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	b021      	add	sp, #132	; 0x84
 8002696:	bd90      	pop	{r4, r7, pc}
 8002698:	00200822 	.word	0x00200822

0800269c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <MX_COMP1_Init+0x60>)
 80026a4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	0052      	lsls	r2, r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026b0:	2230      	movs	r2, #48	; 0x30
 80026b2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 80026ba:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	0392      	lsls	r2, r2, #14
 80026cc:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026dc:	2212      	movs	r2, #18
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <MX_COMP1_Init+0x5c>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f004 fe40 	bl	8007368 <HAL_COMP_Init>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d001      	beq.n	80026f0 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 80026ec:	f004 f84e 	bl	800678c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20000090 	.word	0x20000090
 80026fc:	40010200 	.word	0x40010200

08002700 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <MX_I2C1_Init+0x74>)
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <MX_I2C1_Init+0x78>)
 8002708:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <MX_I2C1_Init+0x74>)
 800270c:	4a1b      	ldr	r2, [pc, #108]	; (800277c <MX_I2C1_Init+0x7c>)
 800270e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002710:	4b18      	ldr	r3, [pc, #96]	; (8002774 <MX_I2C1_Init+0x74>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <MX_I2C1_Init+0x74>)
 8002718:	2201      	movs	r2, #1
 800271a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <MX_I2C1_Init+0x74>)
 800271e:	2200      	movs	r2, #0
 8002720:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <MX_I2C1_Init+0x74>)
 8002724:	2200      	movs	r2, #0
 8002726:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <MX_I2C1_Init+0x74>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_I2C1_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_I2C1_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_I2C1_Init+0x74>)
 800273c:	0018      	movs	r0, r3
 800273e:	f005 fcd1 	bl	80080e4 <HAL_I2C_Init>
 8002742:	1e03      	subs	r3, r0, #0
 8002744:	d001      	beq.n	800274a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002746:	f004 f821 	bl	800678c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_I2C1_Init+0x74>)
 800274c:	2100      	movs	r1, #0
 800274e:	0018      	movs	r0, r3
 8002750:	f006 fdbc 	bl	80092cc <HAL_I2CEx_ConfigAnalogFilter>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d001      	beq.n	800275c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002758:	f004 f818 	bl	800678c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <MX_I2C1_Init+0x74>)
 800275e:	2100      	movs	r1, #0
 8002760:	0018      	movs	r0, r3
 8002762:	f006 fdff 	bl	8009364 <HAL_I2CEx_ConfigDigitalFilter>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800276a:	f004 f80f 	bl	800678c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200000c0 	.word	0x200000c0
 8002778:	40005400 	.word	0x40005400
 800277c:	1094102c 	.word	0x1094102c

08002780 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <MX_I2S1_Init+0x4c>)
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <MX_I2S1_Init+0x50>)
 8002788:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <MX_I2S1_Init+0x4c>)
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	0092      	lsls	r2, r2, #2
 8002790:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8002792:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <MX_I2S1_Init+0x4c>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <MX_I2S1_Init+0x4c>)
 800279a:	2200      	movs	r2, #0
 800279c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <MX_I2S1_Init+0x4c>)
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <MX_I2S1_Init+0x4c>)
 80027a8:	22fa      	movs	r2, #250	; 0xfa
 80027aa:	0192      	lsls	r2, r2, #6
 80027ac:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <MX_I2S1_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <MX_I2S1_Init+0x4c>)
 80027b6:	0018      	movs	r0, r3
 80027b8:	f006 fe20 	bl	80093fc <HAL_I2S_Init>
 80027bc:	1e03      	subs	r3, r0, #0
 80027be:	d001      	beq.n	80027c4 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 80027c0:	f003 ffe4 	bl	800678c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	2000010c 	.word	0x2000010c
 80027d0:	40013000 	.word	0x40013000

080027d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80027d8:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <MX_SPI2_Init+0x80>)
 80027da:	2208      	movs	r2, #8
 80027dc:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <MX_SPI2_Init+0x80>)
 80027e0:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <MX_SPI2_Init+0x84>)
 80027e2:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_SPI2_Init+0x80>)
 80027e6:	2282      	movs	r2, #130	; 0x82
 80027e8:	0052      	lsls	r2, r2, #1
 80027ea:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <MX_SPI2_Init+0x80>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <MX_SPI2_Init+0x80>)
 80027f4:	22e0      	movs	r2, #224	; 0xe0
 80027f6:	00d2      	lsls	r2, r2, #3
 80027f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fa:	4b16      	ldr	r3, [pc, #88]	; (8002854 <MX_SPI2_Init+0x80>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <MX_SPI2_Init+0x80>)
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <MX_SPI2_Init+0x80>)
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_SPI2_Init+0x80>)
 8002810:	2210      	movs	r2, #16
 8002812:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <MX_SPI2_Init+0x80>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_SPI2_Init+0x80>)
 800281c:	2200      	movs	r2, #0
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_SPI2_Init+0x80>)
 8002822:	2200      	movs	r2, #0
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_SPI2_Init+0x80>)
 8002828:	2207      	movs	r2, #7
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_SPI2_Init+0x80>)
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_SPI2_Init+0x80>)
 8002834:	2208      	movs	r2, #8
 8002836:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_SPI2_Init+0x80>)
 800283a:	0018      	movs	r0, r3
 800283c:	f008 fc02 	bl	800b044 <HAL_SPI_Init>
 8002840:	1e03      	subs	r3, r0, #0
 8002842:	d001      	beq.n	8002848 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 8002844:	f003 ffa2 	bl	800678c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002848:	4b02      	ldr	r3, [pc, #8]	; (8002854 <MX_SPI2_Init+0x80>)
 800284a:	2208      	movs	r2, #8
 800284c:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	200001a4 	.word	0x200001a4
 8002858:	40003800 	.word	0x40003800

0800285c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b09e      	sub	sp, #120	; 0x78
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	2368      	movs	r3, #104	; 0x68
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	0018      	movs	r0, r3
 8002868:	2310      	movs	r3, #16
 800286a:	001a      	movs	r2, r3
 800286c:	2100      	movs	r1, #0
 800286e:	f00b ff77 	bl	800e760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002872:	235c      	movs	r3, #92	; 0x5c
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	0018      	movs	r0, r3
 8002878:	230c      	movs	r3, #12
 800287a:	001a      	movs	r2, r3
 800287c:	2100      	movs	r1, #0
 800287e:	f00b ff6f 	bl	800e760 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002882:	2350      	movs	r3, #80	; 0x50
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	0018      	movs	r0, r3
 8002888:	230c      	movs	r3, #12
 800288a:	001a      	movs	r2, r3
 800288c:	2100      	movs	r1, #0
 800288e:	f00b ff67 	bl	800e760 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002892:	2334      	movs	r3, #52	; 0x34
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	0018      	movs	r0, r3
 8002898:	231c      	movs	r3, #28
 800289a:	001a      	movs	r2, r3
 800289c:	2100      	movs	r1, #0
 800289e:	f00b ff5f 	bl	800e760 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80028a2:	003b      	movs	r3, r7
 80028a4:	0018      	movs	r0, r3
 80028a6:	2334      	movs	r3, #52	; 0x34
 80028a8:	001a      	movs	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f00b ff58 	bl	800e760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028b0:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028b2:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <MX_TIM1_Init+0x1ec>)
 80028b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028b6:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028bc:	4b61      	ldr	r3, [pc, #388]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028c4:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <MX_TIM1_Init+0x1f0>)
 80028c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c8:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028d4:	4b5b      	ldr	r3, [pc, #364]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028da:	4b5a      	ldr	r3, [pc, #360]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028dc:	0018      	movs	r0, r3
 80028de:	f009 fbc3 	bl	800c068 <HAL_TIM_Base_Init>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d001      	beq.n	80028ea <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80028e6:	f003 ff51 	bl	800678c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ea:	2168      	movs	r1, #104	; 0x68
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	0152      	lsls	r2, r2, #5
 80028f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028f4:	187a      	adds	r2, r7, r1
 80028f6:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80028f8:	0011      	movs	r1, r2
 80028fa:	0018      	movs	r0, r3
 80028fc:	f009 fe4c 	bl	800c598 <HAL_TIM_ConfigClockSource>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8002904:	f003 ff42 	bl	800678c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002908:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 800290a:	0018      	movs	r0, r3
 800290c:	f009 fc04 	bl	800c118 <HAL_TIM_PWM_Init>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002914:	f003 ff3a 	bl	800678c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002918:	215c      	movs	r1, #92	; 0x5c
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2200      	movs	r2, #0
 8002924:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800292c:	187a      	adds	r2, r7, r1
 800292e:	4b45      	ldr	r3, [pc, #276]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 8002930:	0011      	movs	r1, r2
 8002932:	0018      	movs	r0, r3
 8002934:	f00a fb00 	bl	800cf38 <HAL_TIMEx_MasterConfigSynchronization>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 800293c:	f003 ff26 	bl	800678c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002940:	2150      	movs	r1, #80	; 0x50
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2202      	movs	r2, #2
 8002946:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2201      	movs	r2, #1
 800294c:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002954:	187a      	adds	r2, r7, r1
 8002956:	4b3b      	ldr	r3, [pc, #236]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 8002958:	2101      	movs	r1, #1
 800295a:	0018      	movs	r0, r3
 800295c:	f00a fc00 	bl	800d160 <HAL_TIMEx_ConfigBreakInput>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8002964:	f003 ff12 	bl	800678c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002968:	2134      	movs	r1, #52	; 0x34
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2260      	movs	r2, #96	; 0x60
 800296e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2296      	movs	r2, #150	; 0x96
 8002974:	0052      	lsls	r2, r2, #1
 8002976:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002978:	187b      	adds	r3, r7, r1
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800297e:	187b      	adds	r3, r7, r1
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002984:	187b      	adds	r3, r7, r1
 8002986:	2204      	movs	r2, #4
 8002988:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002990:	187b      	adds	r3, r7, r1
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002996:	1879      	adds	r1, r7, r1
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 800299a:	2200      	movs	r2, #0
 800299c:	0018      	movs	r0, r3
 800299e:	f009 fd05 	bl	800c3ac <HAL_TIM_PWM_ConfigChannel>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80029a6:	f003 fef1 	bl	800678c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 80029aa:	2134      	movs	r1, #52	; 0x34
 80029ac:	187b      	adds	r3, r7, r1
 80029ae:	2232      	movs	r2, #50	; 0x32
 80029b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 80029b2:	1879      	adds	r1, r7, r1
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 80029b6:	2210      	movs	r2, #16
 80029b8:	0018      	movs	r0, r3
 80029ba:	f009 fcf7 	bl	800c3ac <HAL_TIM_PWM_ConfigChannel>
 80029be:	1e03      	subs	r3, r0, #0
 80029c0:	d001      	beq.n	80029c6 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 80029c2:	f003 fee3 	bl	800678c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80029c6:	003b      	movs	r3, r7
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80029ce:	003b      	movs	r3, r7
 80029d0:	2280      	movs	r2, #128	; 0x80
 80029d2:	00d2      	lsls	r2, r2, #3
 80029d4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029d6:	003b      	movs	r3, r7
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029dc:	003b      	movs	r3, r7
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80029e2:	003b      	movs	r3, r7
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	0152      	lsls	r2, r2, #5
 80029e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029ea:	003b      	movs	r3, r7
 80029ec:	2280      	movs	r2, #128	; 0x80
 80029ee:	0192      	lsls	r2, r2, #6
 80029f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 80029f2:	003b      	movs	r3, r7
 80029f4:	220a      	movs	r2, #10
 80029f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029f8:	003b      	movs	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029fe:	003b      	movs	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a04:	003b      	movs	r3, r7
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	0492      	lsls	r2, r2, #18
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a0c:	003b      	movs	r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a12:	003b      	movs	r3, r7
 8002a14:	2200      	movs	r2, #0
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8002a18:	003b      	movs	r3, r7
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	01d2      	lsls	r2, r2, #7
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a20:	003a      	movs	r2, r7
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f00a faf4 	bl	800d014 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a2c:	1e03      	subs	r3, r0, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8002a30:	f003 feac 	bl	800678c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <MX_TIM1_Init+0x1e8>)
 8002a36:	0018      	movs	r0, r3
 8002a38:	f004 f8ee 	bl	8006c18 <HAL_TIM_MspPostInit>

}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b01e      	add	sp, #120	; 0x78
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200002c0 	.word	0x200002c0
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	0000027f 	.word	0x0000027f

08002a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b08f      	sub	sp, #60	; 0x3c
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002a56:	2418      	movs	r4, #24
 8002a58:	193b      	adds	r3, r7, r4
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	001a      	movs	r2, r3
 8002a60:	2100      	movs	r1, #0
 8002a62:	f00b fe7d 	bl	800e760 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	003b      	movs	r3, r7
 8002a68:	0018      	movs	r0, r3
 8002a6a:	2318      	movs	r3, #24
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f00b fe76 	bl	800e760 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff fc59 	bl	8002330 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f7ff fc6c 	bl	800235c <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8002a84:	003b      	movs	r3, r7
 8002a86:	2204      	movs	r2, #4
 8002a88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a8a:	003b      	movs	r3, r7
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a90:	003b      	movs	r3, r7
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a96:	003b      	movs	r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a9c:	003b      	movs	r3, r7
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002aa2:	003b      	movs	r3, r7
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	003a      	movs	r2, r7
 8002aaa:	23a0      	movs	r3, #160	; 0xa0
 8002aac:	05db      	lsls	r3, r3, #23
 8002aae:	0011      	movs	r1, r2
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f00b fad7 	bl	800e064 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8002ab6:	003b      	movs	r3, r7
 8002ab8:	2208      	movs	r2, #8
 8002aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002abc:	003b      	movs	r3, r7
 8002abe:	2202      	movs	r2, #2
 8002ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ac2:	003b      	movs	r3, r7
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ac8:	003b      	movs	r3, r7
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ace:	003b      	movs	r3, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002ad4:	003b      	movs	r3, r7
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	003a      	movs	r2, r7
 8002adc:	23a0      	movs	r3, #160	; 0xa0
 8002ade:	05db      	lsls	r3, r3, #23
 8002ae0:	0011      	movs	r1, r2
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f00b fabe 	bl	800e064 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002ae8:	2100      	movs	r1, #0
 8002aea:	201c      	movs	r0, #28
 8002aec:	f7ff fadc 	bl	80020a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002af0:	201c      	movs	r0, #28
 8002af2:	f7ff fabf 	bl	8002074 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8002afc:	193b      	adds	r3, r7, r4
 8002afe:	22e1      	movs	r2, #225	; 0xe1
 8002b00:	0212      	lsls	r2, r2, #8
 8002b02:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	0152      	lsls	r2, r2, #5
 8002b0a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002b0c:	0021      	movs	r1, r4
 8002b0e:	187b      	adds	r3, r7, r1
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002b14:	187b      	adds	r3, r7, r1
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	220c      	movs	r2, #12
 8002b1e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2200      	movs	r2, #0
 8002b24:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2200      	movs	r2, #0
 8002b2a:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	4a16      	ldr	r2, [pc, #88]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b30:	0019      	movs	r1, r3
 8002b32:	0010      	movs	r0, r2
 8002b34:	f00b fd62 	bl	800e5fc <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7ff fb3f 	bl	80021c0 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b44:	2100      	movs	r1, #0
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff fb4c 	bl	80021e4 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff fb26 	bl	80021a0 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7ff fb58 	bl	800220c <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff fb10 	bl	8002184 <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8002b64:	46c0      	nop			; (mov r8, r8)
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff fb67 	bl	800223c <LL_USART_IsActiveFlag_TEACK>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d0f9      	beq.n	8002b66 <MX_USART2_UART_Init+0x116>
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <MX_USART2_UART_Init+0x138>)
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff fb75 	bl	8002264 <LL_USART_IsActiveFlag_REACK>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d0f3      	beq.n	8002b66 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b00f      	add	sp, #60	; 0x3c
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	40004400 	.word	0x40004400

08002b8c <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <MX_USART3_Init+0x78>)
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_USART3_Init+0x78>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0309      	lsls	r1, r1, #12
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002ba0:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <MX_USART3_Init+0x78>)
 8002ba2:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002ba6:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <MX_USART3_Init+0x80>)
 8002ba8:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bbe:	2208      	movs	r2, #8
 8002bc0:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	00d2      	lsls	r2, r2, #3
 8002bc8:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8002bca:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	0052      	lsls	r2, r2, #1
 8002bd8:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8002be0:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f00a fb59 	bl	800d2a0 <HAL_USART_Init>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8002bf2:	f003 fdcb 	bl	800678c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <MX_USART3_Init+0x7c>)
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <MX_USART3_Init+0x80>)
 8002bfa:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40004800 	.word	0x40004800
 8002c08:	2000030c 	.word	0x2000030c
 8002c0c:	007a1200 	.word	0x007a1200

08002c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <MX_DMA_Init+0x58>)
 8002c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <MX_DMA_Init+0x58>)
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	639a      	str	r2, [r3, #56]	; 0x38
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <MX_DMA_Init+0x58>)
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	2009      	movs	r0, #9
 8002c34:	f004 fdf8 	bl	8007828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c38:	2009      	movs	r0, #9
 8002c3a:	f004 fe0a 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	200a      	movs	r0, #10
 8002c44:	f004 fdf0 	bl	8007828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002c48:	200a      	movs	r0, #10
 8002c4a:	f004 fe02 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	200b      	movs	r0, #11
 8002c54:	f004 fde8 	bl	8007828 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8002c58:	200b      	movs	r0, #11
 8002c5a:	f004 fdfa 	bl	8007852 <HAL_NVIC_EnableIRQ>

}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	46bd      	mov	sp, r7
 8002c62:	b002      	add	sp, #8
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	40021000 	.word	0x40021000

08002c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c72:	003b      	movs	r3, r7
 8002c74:	0018      	movs	r0, r3
 8002c76:	2318      	movs	r3, #24
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f00b fd70 	bl	800e760 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8002c80:	2002      	movs	r0, #2
 8002c82:	f7ff fb6b 	bl	800235c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8002c86:	2004      	movs	r0, #4
 8002c88:	f7ff fb68 	bl	800235c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7ff fb65 	bl	800235c <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4aa0      	ldr	r2, [pc, #640]	; (8002f18 <MX_GPIO_Init+0x2ac>)
 8002c98:	0019      	movs	r1, r3
 8002c9a:	0010      	movs	r0, r2
 8002c9c:	f7ff fb30 	bl	8002300 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	01db      	lsls	r3, r3, #7
 8002ca4:	4a9d      	ldr	r2, [pc, #628]	; (8002f1c <MX_GPIO_Init+0x2b0>)
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	0010      	movs	r0, r2
 8002caa:	f7ff fb29 	bl	8002300 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8002cae:	2380      	movs	r3, #128	; 0x80
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	4a9a      	ldr	r2, [pc, #616]	; (8002f1c <MX_GPIO_Init+0x2b0>)
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	0010      	movs	r0, r2
 8002cb8:	f7ff fb22 	bl	8002300 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8002cbc:	23a0      	movs	r3, #160	; 0xa0
 8002cbe:	05db      	lsls	r3, r3, #23
 8002cc0:	2140      	movs	r1, #64	; 0x40
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff fb1c 	bl	8002300 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8002cc8:	23a0      	movs	r3, #160	; 0xa0
 8002cca:	05db      	lsls	r3, r3, #23
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff fb16 	bl	8002300 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8002cd4:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <MX_GPIO_Init+0x2b0>)
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7ff fb11 	bl	8002300 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	011a      	lsls	r2, r3, #4
 8002ce2:	23a0      	movs	r3, #160	; 0xa0
 8002ce4:	05db      	lsls	r3, r3, #23
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7ff fb15 	bl	8002318 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	23a0      	movs	r3, #160	; 0xa0
 8002cf4:	05db      	lsls	r3, r3, #23
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff fb0d 	bl	8002318 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8002cfe:	003b      	movs	r3, r7
 8002d00:	2280      	movs	r2, #128	; 0x80
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d06:	003b      	movs	r3, r7
 8002d08:	2201      	movs	r2, #1
 8002d0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	003b      	movs	r3, r7
 8002d0e:	2203      	movs	r2, #3
 8002d10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d12:	003b      	movs	r3, r7
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d18:	003b      	movs	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	003b      	movs	r3, r7
 8002d20:	4a7d      	ldr	r2, [pc, #500]	; (8002f18 <MX_GPIO_Init+0x2ac>)
 8002d22:	0019      	movs	r1, r3
 8002d24:	0010      	movs	r0, r2
 8002d26:	f00b f99d 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8002d2a:	003b      	movs	r3, r7
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	01d2      	lsls	r2, r2, #7
 8002d30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d32:	003b      	movs	r3, r7
 8002d34:	2201      	movs	r2, #1
 8002d36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d38:	003b      	movs	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d3e:	003b      	movs	r3, r7
 8002d40:	2200      	movs	r2, #0
 8002d42:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d44:	003b      	movs	r3, r7
 8002d46:	2200      	movs	r2, #0
 8002d48:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	003b      	movs	r3, r7
 8002d4c:	4a73      	ldr	r2, [pc, #460]	; (8002f1c <MX_GPIO_Init+0x2b0>)
 8002d4e:	0019      	movs	r1, r3
 8002d50:	0010      	movs	r0, r2
 8002d52:	f00b f987 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8002d56:	003b      	movs	r3, r7
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	0212      	lsls	r2, r2, #8
 8002d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002d5e:	003b      	movs	r3, r7
 8002d60:	2201      	movs	r2, #1
 8002d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002d64:	003b      	movs	r3, r7
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002d6a:	003b      	movs	r3, r7
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002d70:	003b      	movs	r3, r7
 8002d72:	2200      	movs	r2, #0
 8002d74:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8002d76:	003b      	movs	r3, r7
 8002d78:	4a68      	ldr	r2, [pc, #416]	; (8002f1c <MX_GPIO_Init+0x2b0>)
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f00b f971 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8002d82:	003b      	movs	r3, r7
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002d88:	003b      	movs	r3, r7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002d8e:	003b      	movs	r3, r7
 8002d90:	2201      	movs	r2, #1
 8002d92:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8002d94:	003a      	movs	r2, r7
 8002d96:	23a0      	movs	r3, #160	; 0xa0
 8002d98:	05db      	lsls	r3, r3, #23
 8002d9a:	0011      	movs	r1, r2
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f00b f961 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8002da2:	003b      	movs	r3, r7
 8002da4:	2202      	movs	r2, #2
 8002da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002da8:	003b      	movs	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002dae:	003b      	movs	r3, r7
 8002db0:	2201      	movs	r2, #1
 8002db2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8002db4:	003a      	movs	r2, r7
 8002db6:	23a0      	movs	r3, #160	; 0xa0
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	0011      	movs	r1, r2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f00b f951 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8002dc2:	003b      	movs	r3, r7
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002dc8:	003b      	movs	r3, r7
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002dce:	003b      	movs	r3, r7
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8002dd4:	003a      	movs	r2, r7
 8002dd6:	23a0      	movs	r3, #160	; 0xa0
 8002dd8:	05db      	lsls	r3, r3, #23
 8002dda:	0011      	movs	r1, r2
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f00b f941 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8002de2:	003b      	movs	r3, r7
 8002de4:	2240      	movs	r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002de8:	003b      	movs	r3, r7
 8002dea:	2201      	movs	r2, #1
 8002dec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	003b      	movs	r3, r7
 8002df0:	2203      	movs	r2, #3
 8002df2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002df4:	003b      	movs	r3, r7
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002dfa:	003b      	movs	r3, r7
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8002e00:	003a      	movs	r2, r7
 8002e02:	23a0      	movs	r3, #160	; 0xa0
 8002e04:	05db      	lsls	r3, r3, #23
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f00b f92b 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8002e0e:	003b      	movs	r3, r7
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e14:	003b      	movs	r3, r7
 8002e16:	2201      	movs	r2, #1
 8002e18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1a:	003b      	movs	r3, r7
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e20:	003b      	movs	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e26:	003b      	movs	r3, r7
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8002e2c:	003a      	movs	r2, r7
 8002e2e:	23a0      	movs	r3, #160	; 0xa0
 8002e30:	05db      	lsls	r3, r3, #23
 8002e32:	0011      	movs	r1, r2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f00b f915 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8002e3a:	003b      	movs	r3, r7
 8002e3c:	2240      	movs	r2, #64	; 0x40
 8002e3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e40:	003b      	movs	r3, r7
 8002e42:	2201      	movs	r2, #1
 8002e44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	003b      	movs	r3, r7
 8002e48:	2203      	movs	r2, #3
 8002e4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e4c:	003b      	movs	r3, r7
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e52:	003b      	movs	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8002e58:	003b      	movs	r3, r7
 8002e5a:	4a30      	ldr	r2, [pc, #192]	; (8002f1c <MX_GPIO_Init+0x2b0>)
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f00b f900 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8002e64:	003b      	movs	r3, r7
 8002e66:	2280      	movs	r2, #128	; 0x80
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e6c:	003b      	movs	r3, r7
 8002e6e:	2201      	movs	r2, #1
 8002e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	003b      	movs	r3, r7
 8002e74:	2203      	movs	r2, #3
 8002e76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e78:	003b      	movs	r3, r7
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e7e:	003b      	movs	r3, r7
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8002e84:	003a      	movs	r2, r7
 8002e86:	23a0      	movs	r3, #160	; 0xa0
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f00b f8e9 	bl	800e064 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8002e92:	003b      	movs	r3, r7
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0152      	lsls	r2, r2, #5
 8002e98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002e9a:	003b      	movs	r3, r7
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea0:	003b      	movs	r3, r7
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ea6:	003b      	movs	r3, r7
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002eac:	003b      	movs	r3, r7
 8002eae:	2200      	movs	r2, #0
 8002eb0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	003a      	movs	r2, r7
 8002eb4:	23a0      	movs	r3, #160	; 0xa0
 8002eb6:	05db      	lsls	r3, r3, #23
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f00b f8d2 	bl	800e064 <LL_GPIO_Init>

  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8002ec0:	003b      	movs	r3, r7
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	0192      	lsls	r2, r2, #6
 8002ec6:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002ec8:	003b      	movs	r3, r7
 8002eca:	2200      	movs	r2, #0
 8002ecc:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ece:	003b      	movs	r3, r7
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	003a      	movs	r2, r7
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	05db      	lsls	r3, r3, #23
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f00b f8c1 	bl	800e064 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8002ee2:	003b      	movs	r3, r7
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	01d2      	lsls	r2, r2, #7
 8002ee8:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002eea:	003b      	movs	r3, r7
 8002eec:	2200      	movs	r2, #0
 8002eee:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8002ef0:	003b      	movs	r3, r7
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	003a      	movs	r2, r7
 8002ef8:	23a0      	movs	r3, #160	; 0xa0
 8002efa:	05db      	lsls	r3, r3, #23
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f00b f8b0 	bl	800e064 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	031b      	lsls	r3, r3, #12
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff f9e9 	bl	80022e0 <LL_SYSCFG_EnableFastModePlus>

}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b006      	add	sp, #24
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	50000400 	.word	0x50000400
 8002f1c:	50000800 	.word	0x50000800

08002f20 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8002f24:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <USART2_RX_Callback+0x58>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f7ff f9cc 	bl	80022c4 <LL_USART_ReceiveData9>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	001a      	movs	r2, r3
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <USART2_RX_Callback+0x5c>)
 8002f32:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 8002f34:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <USART2_RX_Callback+0x60>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <USART2_RX_Callback+0x5c>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	001a      	movs	r2, r3
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d00a      	beq.n	8002f5e <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <USART2_RX_Callback+0x5c>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <USART2_RX_Callback+0x64>)
 8002f50:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <USART2_RX_Callback+0x68>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <USART2_RX_Callback+0x6c>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <USART2_RX_Callback+0x6c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d104      	bne.n	8002f70 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <USART2_RX_Callback+0x5c>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 f844 	bl	8002ff8 <cmdReceive>
  }
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	20000426 	.word	0x20000426
 8002f80:	20000424 	.word	0x20000424
 8002f84:	200003f4 	.word	0x200003f4
 8002f88:	20000428 	.word	0x20000428
 8002f8c:	20000425 	.word	0x20000425

08002f90 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8002f98:	23a0      	movs	r3, #160	; 0xa0
 8002f9a:	05db      	lsls	r3, r3, #23
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	23a0      	movs	r3, #160	; 0xa0
 8002fa0:	05db      	lsls	r3, r3, #23
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	438a      	bics	r2, r1
 8002fa6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8002fa8:	23a0      	movs	r3, #160	; 0xa0
 8002faa:	05db      	lsls	r3, r3, #23
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	23a0      	movs	r3, #160	; 0xa0
 8002fb0:	05db      	lsls	r3, r3, #23
 8002fb2:	2140      	movs	r1, #64	; 0x40
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_USART_TxCpltCallback+0x44>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_USART_TxCpltCallback+0x48>)
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_USART_TxCpltCallback+0x48>)
 8002fc4:	2140      	movs	r1, #64	; 0x40
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	615a      	str	r2, [r3, #20]
}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	2000042a 	.word	0x2000042a
 8002fd8:	50000800 	.word	0x50000800

08002fdc <HAL_I2S_TxCpltCallback>:
//	GPIOA->ODR |= 1 << 6;	//set cs		????????????????????????????????????????????????
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
//	if(numSound==1){
	soundReady=1;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_I2S_TxCpltCallback+0x18>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	701a      	strb	r2, [r3, #0]
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[1], 1, 50); //send address
//		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addr[0], 1, 50); //send address
//		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
//		curAddr+=sizeof(MEM_Buffer);
//    }
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	20000064 	.word	0x20000064

08002ff8 <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	0002      	movs	r2, r0
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8003004:	230f      	movs	r3, #15
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <cmdReceive+0xfc>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0fb      	beq.n	800300e <cmdReceive+0x16>
	  ByteReceived=0;
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <cmdReceive+0xfc>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <cmdReceive+0x100>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	001a      	movs	r2, r3
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b2d9      	uxtb	r1, r3
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <cmdReceive+0x104>)
 800302a:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 800302c:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <cmdReceive+0x100>)
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <cmdReceive+0x100>)
 8003036:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8003038:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <cmdReceive+0x100>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d04f      	beq.n	80030e0 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <cmdReceive+0x100>)
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	001a      	movs	r2, r3
 8003046:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <cmdReceive+0x104>)
 8003048:	785b      	ldrb	r3, [r3, #1]
 800304a:	3301      	adds	r3, #1
 800304c:	429a      	cmp	r2, r3
 800304e:	dd47      	ble.n	80030e0 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8003050:	230f      	movs	r3, #15
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e00f      	b.n	800307a <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800305a:	210f      	movs	r1, #15
 800305c:	187b      	adds	r3, r7, r1
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4a26      	ldr	r2, [pc, #152]	; (80030fc <cmdReceive+0x104>)
 8003062:	5cd2      	ldrb	r2, [r2, r3]
 8003064:	4b26      	ldr	r3, [pc, #152]	; (8003100 <cmdReceive+0x108>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	18d3      	adds	r3, r2, r3
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b24      	ldr	r3, [pc, #144]	; (8003100 <cmdReceive+0x108>)
 800306e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8003070:	187b      	adds	r3, r7, r1
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	187b      	adds	r3, r7, r1
 8003076:	3201      	adds	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <cmdReceive+0x104>)
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	210f      	movs	r1, #15
 8003082:	187b      	adds	r3, r7, r1
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	dae7      	bge.n	800305a <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <cmdReceive+0x108>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d022      	beq.n	80030d8 <cmdReceive+0xe0>
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <cmdReceive+0x100>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	001a      	movs	r2, r3
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <cmdReceive+0x104>)
 800309a:	785b      	ldrb	r3, [r3, #1]
 800309c:	3302      	adds	r3, #2
 800309e:	429a      	cmp	r2, r3
 80030a0:	d11a      	bne.n	80030d8 <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <cmdReceive+0x10c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e00a      	b.n	80030c6 <cmdReceive+0xce>
				 					 cmd[i]=0;
 80030b0:	200f      	movs	r0, #15
 80030b2:	183b      	adds	r3, r7, r0
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <cmdReceive+0x104>)
 80030b8:	2100      	movs	r1, #0
 80030ba:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 80030bc:	183b      	adds	r3, r7, r0
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	183b      	adds	r3, r7, r0
 80030c2:	3201      	adds	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <cmdReceive+0x104>)
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	230f      	movs	r3, #15
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	daec      	bge.n	80030b0 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 80030d6:	e003      	b.n	80030e0 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <cmdReceive+0x104>)
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 faa8 	bl	8003630 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <cmdReceive+0x110>)
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <cmdReceive+0x110>)
 80030e6:	2108      	movs	r1, #8
 80030e8:	430a      	orrs	r2, r1
 80030ea:	621a      	str	r2, [r3, #32]
	}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000424 	.word	0x20000424
 80030f8:	20000428 	.word	0x20000428
 80030fc:	200003f4 	.word	0x200003f4
 8003100:	2000042c 	.word	0x2000042c
 8003104:	20000425 	.word	0x20000425
 8003108:	40004400 	.word	0x40004400

0800310c <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	0002      	movs	r2, r0
 8003114:	1dfb      	adds	r3, r7, #7
 8003116:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8003118:	1df9      	adds	r1, r7, #7
 800311a:	4804      	ldr	r0, [pc, #16]	; (800312c <USART_AS_SPI_sendCMD+0x20>)
 800311c:	230a      	movs	r3, #10
 800311e:	2201      	movs	r2, #1
 8003120:	f00a f90e 	bl	800d340 <HAL_USART_Transmit>
		}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000030c 	.word	0x2000030c

08003130 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <weoInit+0xd0>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <weoInit+0xd0>)
 800313a:	2101      	movs	r1, #1
 800313c:	438a      	bics	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <weoInit+0xd0>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <weoInit+0xd0>)
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	0309      	lsls	r1, r1, #12
 800314a:	430a      	orrs	r2, r1
 800314c:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 800314e:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <weoInit+0xd0>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <weoInit+0xd0>)
 8003154:	2101      	movs	r1, #1
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 800315a:	2001      	movs	r0, #1
 800315c:	f004 f81e 	bl	800719c <HAL_Delay>
		HAL_Delay(1);
 8003160:	2001      	movs	r0, #1
 8003162:	f004 f81b 	bl	800719c <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003166:	4b27      	ldr	r3, [pc, #156]	; (8003204 <weoInit+0xd4>)
 8003168:	2100      	movs	r1, #0
 800316a:	0018      	movs	r0, r3
 800316c:	f009 f834 	bl	800c1d8 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8003170:	2001      	movs	r0, #1
 8003172:	f004 f813 	bl	800719c <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003176:	23a0      	movs	r3, #160	; 0xa0
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	23a0      	movs	r3, #160	; 0xa0
 800317e:	05db      	lsls	r3, r3, #23
 8003180:	2140      	movs	r1, #64	; 0x40
 8003182:	438a      	bics	r2, r1
 8003184:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	05db      	lsls	r3, r3, #23
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	23a0      	movs	r3, #160	; 0xa0
 800318e:	05db      	lsls	r3, r3, #23
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	438a      	bics	r2, r1
 8003194:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8003196:	20af      	movs	r0, #175	; 0xaf
 8003198:	f7ff ffb8 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 800319c:	20a0      	movs	r0, #160	; 0xa0
 800319e:	f7ff ffb5 	bl	800310c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0x51);
		USART_AS_SPI_sendCMD(0b01010010);// 0b01010010 = 0x52 is a proper remap 4 my bmp_2_bin converter, but pictures must b turned right @ 90 degrees.
 80031a2:	2052      	movs	r0, #82	; 0x52
 80031a4:	f7ff ffb2 	bl	800310c <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x41); //	0x51 is a proper remap 4 lcd image converter // 0b01010010 is a proper remap 4 left-turned images
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 80031a8:	2081      	movs	r0, #129	; 0x81
 80031aa:	f7ff ffaf 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80031ae:	20ff      	movs	r0, #255	; 0xff
 80031b0:	f7ff ffac 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80031b4:	20a1      	movs	r0, #161	; 0xa1
 80031b6:	f7ff ffa9 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff ffa6 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80031c0:	20a2      	movs	r0, #162	; 0xa2
 80031c2:	f7ff ffa3 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7ff ffa0 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80031cc:	20a8      	movs	r0, #168	; 0xa8
 80031ce:	f7ff ff9d 	bl	800310c <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80031d2:	207f      	movs	r0, #127	; 0x7f
 80031d4:	f7ff ff9a 	bl	800310c <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80031d8:	23a0      	movs	r3, #160	; 0xa0
 80031da:	05db      	lsls	r3, r3, #23
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	23a0      	movs	r3, #160	; 0xa0
 80031e0:	05db      	lsls	r3, r3, #23
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	430a      	orrs	r2, r1
 80031e6:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80031e8:	23a0      	movs	r3, #160	; 0xa0
 80031ea:	05db      	lsls	r3, r3, #23
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	23a0      	movs	r3, #160	; 0xa0
 80031f0:	05db      	lsls	r3, r3, #23
 80031f2:	2140      	movs	r1, #64	; 0x40
 80031f4:	430a      	orrs	r2, r1
 80031f6:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40004800 	.word	0x40004800
 8003204:	200002c0 	.word	0x200002c0

08003208 <weoClear>:
	void weoClear(void) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800320e:	23a0      	movs	r3, #160	; 0xa0
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	23a0      	movs	r3, #160	; 0xa0
 8003216:	05db      	lsls	r3, r3, #23
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	438a      	bics	r2, r1
 800321c:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 800321e:	23a0      	movs	r3, #160	; 0xa0
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	23a0      	movs	r3, #160	; 0xa0
 8003226:	05db      	lsls	r3, r3, #23
 8003228:	2180      	movs	r1, #128	; 0x80
 800322a:	438a      	bics	r2, r1
 800322c:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800322e:	2075      	movs	r0, #117	; 0x75
 8003230:	f7ff ff6c 	bl	800310c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003234:	2000      	movs	r0, #0
 8003236:	f7ff ff69 	bl	800310c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800323a:	207f      	movs	r0, #127	; 0x7f
 800323c:	f7ff ff66 	bl	800310c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003240:	2015      	movs	r0, #21
 8003242:	f7ff ff63 	bl	800310c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8003246:	2000      	movs	r0, #0
 8003248:	f7ff ff60 	bl	800310c <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800324c:	207f      	movs	r0, #127	; 0x7f
 800324e:	f7ff ff5d 	bl	800310c <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003252:	23a0      	movs	r3, #160	; 0xa0
 8003254:	05db      	lsls	r3, r3, #23
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	23a0      	movs	r3, #160	; 0xa0
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	2140      	movs	r1, #64	; 0x40
 800325e:	438a      	bics	r2, r1
 8003260:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8003262:	23a0      	movs	r3, #160	; 0xa0
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	695a      	ldr	r2, [r3, #20]
 8003268:	23a0      	movs	r3, #160	; 0xa0
 800326a:	05db      	lsls	r3, r3, #23
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	430a      	orrs	r2, r1
 8003270:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8003272:	1dbb      	adds	r3, r7, #6
 8003274:	2200      	movs	r2, #0
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	e00d      	b.n	8003296 <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <weoClear+0xc0>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	4013      	ands	r3, r2
 8003284:	d0fa      	beq.n	800327c <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <weoClear+0xc0>)
 8003288:	2200      	movs	r2, #0
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800328c:	1dbb      	adds	r3, r7, #6
 800328e:	881a      	ldrh	r2, [r3, #0]
 8003290:	1dbb      	adds	r3, r7, #6
 8003292:	3201      	adds	r2, #1
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	1dbb      	adds	r3, r7, #6
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	4a0c      	ldr	r2, [pc, #48]	; (80032cc <weoClear+0xc4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d9ec      	bls.n	800327a <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 80032a0:	23a0      	movs	r3, #160	; 0xa0
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	23a0      	movs	r3, #160	; 0xa0
 80032a8:	05db      	lsls	r3, r3, #23
 80032aa:	2180      	movs	r1, #128	; 0x80
 80032ac:	438a      	bics	r2, r1
 80032ae:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80032b0:	23a0      	movs	r3, #160	; 0xa0
 80032b2:	05db      	lsls	r3, r3, #23
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	23a0      	movs	r3, #160	; 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	430a      	orrs	r2, r1
 80032be:	615a      	str	r2, [r3, #20]
	}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b002      	add	sp, #8
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40004800 	.word	0x40004800
 80032cc:	00002001 	.word	0x00002001

080032d0 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	0005      	movs	r5, r0
 80032d8:	000c      	movs	r4, r1
 80032da:	0010      	movs	r0, r2
 80032dc:	0019      	movs	r1, r3
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	1c2a      	adds	r2, r5, #0
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	1dbb      	adds	r3, r7, #6
 80032e6:	1c22      	adds	r2, r4, #0
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	1d7b      	adds	r3, r7, #5
 80032ec:	1c02      	adds	r2, r0, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	1c0a      	adds	r2, r1, #0
 80032f4:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80032f6:	240e      	movs	r4, #14
 80032f8:	193b      	adds	r3, r7, r4
 80032fa:	2200      	movs	r2, #0
 80032fc:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80032fe:	1dfb      	adds	r3, r7, #7
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b25b      	sxtb	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	da00      	bge.n	800330a <weoDrawRectangleFilled+0x3a>
 8003308:	e0c1      	b.n	800348e <weoDrawRectangleFilled+0x1be>
 800330a:	1dbb      	adds	r3, r7, #6
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b25b      	sxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	da00      	bge.n	8003316 <weoDrawRectangleFilled+0x46>
 8003314:	e0bb      	b.n	800348e <weoDrawRectangleFilled+0x1be>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8003316:	1d7b      	adds	r3, r7, #5
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	b25b      	sxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	da00      	bge.n	8003322 <weoDrawRectangleFilled+0x52>
 8003320:	e0b5      	b.n	800348e <weoDrawRectangleFilled+0x1be>
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	b25b      	sxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	da00      	bge.n	800332e <weoDrawRectangleFilled+0x5e>
 800332c:	e0af      	b.n	800348e <weoDrawRectangleFilled+0x1be>
				return;
			}

			start_x_New=start_x;
 800332e:	250d      	movs	r5, #13
 8003330:	197b      	adds	r3, r7, r5
 8003332:	1dfa      	adds	r2, r7, #7
 8003334:	7812      	ldrb	r2, [r2, #0]
 8003336:	701a      	strb	r2, [r3, #0]
			start_y_New=start_y;
 8003338:	260c      	movs	r6, #12
 800333a:	19bb      	adds	r3, r7, r6
 800333c:	1dba      	adds	r2, r7, #6
 800333e:	7812      	ldrb	r2, [r2, #0]
 8003340:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8003342:	230b      	movs	r3, #11
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	1d7a      	adds	r2, r7, #5
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	701a      	strb	r2, [r3, #0]
			end_y_New=end_y;
 800334c:	220a      	movs	r2, #10
 800334e:	18bb      	adds	r3, r7, r2
 8003350:	1d3a      	adds	r2, r7, #4
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8003356:	23a0      	movs	r3, #160	; 0xa0
 8003358:	05db      	lsls	r3, r3, #23
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	23a0      	movs	r3, #160	; 0xa0
 800335e:	05db      	lsls	r3, r3, #23
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	438a      	bics	r2, r1
 8003364:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8003366:	23a0      	movs	r3, #160	; 0xa0
 8003368:	05db      	lsls	r3, r3, #23
 800336a:	695a      	ldr	r2, [r3, #20]
 800336c:	23a0      	movs	r3, #160	; 0xa0
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	438a      	bics	r2, r1
 8003374:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8003376:	2075      	movs	r0, #117	; 0x75
 8003378:	f7ff fec8 	bl	800310c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 800337c:	197b      	adds	r3, r7, r5
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fec3 	bl	800310c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8003386:	230b      	movs	r3, #11
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	0018      	movs	r0, r3
 800338e:	f7ff febd 	bl	800310c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8003392:	2015      	movs	r0, #21
 8003394:	f7ff feba 	bl	800310c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8003398:	19bb      	adds	r3, r7, r6
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7ff feb3 	bl	800310c <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80033a6:	220a      	movs	r2, #10
 80033a8:	18bb      	adds	r3, r7, r2
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff feab 	bl	800310c <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 80033b6:	23a0      	movs	r3, #160	; 0xa0
 80033b8:	05db      	lsls	r3, r3, #23
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	23a0      	movs	r3, #160	; 0xa0
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	430a      	orrs	r2, r1
 80033c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80033c6:	23a0      	movs	r3, #160	; 0xa0
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	23a0      	movs	r3, #160	; 0xa0
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	430a      	orrs	r2, r1
 80033d4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80033d6:	23a0      	movs	r3, #160	; 0xa0
 80033d8:	05db      	lsls	r3, r3, #23
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	23a0      	movs	r3, #160	; 0xa0
 80033de:	05db      	lsls	r3, r3, #23
 80033e0:	2140      	movs	r1, #64	; 0x40
 80033e2:	438a      	bics	r2, r1
 80033e4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80033e6:	23a0      	movs	r3, #160	; 0xa0
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	23a0      	movs	r3, #160	; 0xa0
 80033ee:	05db      	lsls	r3, r3, #23
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	430a      	orrs	r2, r1
 80033f4:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80033f6:	193b      	adds	r3, r7, r4
 80033f8:	2200      	movs	r2, #0
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	e012      	b.n	8003424 <weoDrawRectangleFilled+0x154>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <weoDrawRectangleFilled+0x1c8>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	4013      	ands	r3, r2
 8003408:	d0fa      	beq.n	8003400 <weoDrawRectangleFilled+0x130>
				USART3->TDR =MEM_Buffer[i];
 800340a:	210e      	movs	r1, #14
 800340c:	187b      	adds	r3, r7, r1
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003412:	18d3      	adds	r3, r2, r3
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <weoDrawRectangleFilled+0x1c8>)
 8003418:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800341a:	187b      	adds	r3, r7, r1
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	187b      	adds	r3, r7, r1
 8003420:	3201      	adds	r2, #1
 8003422:	801a      	strh	r2, [r3, #0]
 8003424:	230e      	movs	r3, #14
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	230b      	movs	r3, #11
 800342c:	18fb      	adds	r3, r7, r3
 800342e:	7819      	ldrb	r1, [r3, #0]
 8003430:	230d      	movs	r3, #13
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	1acb      	subs	r3, r1, r3
 8003438:	3301      	adds	r3, #1
 800343a:	210a      	movs	r1, #10
 800343c:	1879      	adds	r1, r7, r1
 800343e:	7809      	ldrb	r1, [r1, #0]
 8003440:	0849      	lsrs	r1, r1, #1
 8003442:	b2c9      	uxtb	r1, r1
 8003444:	0008      	movs	r0, r1
 8003446:	210c      	movs	r1, #12
 8003448:	1879      	adds	r1, r7, r1
 800344a:	7809      	ldrb	r1, [r1, #0]
 800344c:	0849      	lsrs	r1, r1, #1
 800344e:	b2c9      	uxtb	r1, r1
 8003450:	1a41      	subs	r1, r0, r1
 8003452:	3101      	adds	r1, #1
 8003454:	434b      	muls	r3, r1
 8003456:	429a      	cmp	r2, r3
 8003458:	dbd1      	blt.n	80033fe <weoDrawRectangleFilled+0x12e>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <weoDrawRectangleFilled+0x1c8>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	4013      	ands	r3, r2
 8003464:	d0fa      	beq.n	800345c <weoDrawRectangleFilled+0x18c>
			HAL_Delay(1);
 8003466:	2001      	movs	r0, #1
 8003468:	f003 fe98 	bl	800719c <HAL_Delay>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800346c:	23a0      	movs	r3, #160	; 0xa0
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	23a0      	movs	r3, #160	; 0xa0
 8003474:	05db      	lsls	r3, r3, #23
 8003476:	2180      	movs	r1, #128	; 0x80
 8003478:	438a      	bics	r2, r1
 800347a:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);

//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 800347c:	23a0      	movs	r3, #160	; 0xa0
 800347e:	05db      	lsls	r3, r3, #23
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	23a0      	movs	r3, #160	; 0xa0
 8003484:	05db      	lsls	r3, r3, #23
 8003486:	2140      	movs	r1, #64	; 0x40
 8003488:	430a      	orrs	r2, r1
 800348a:	615a      	str	r2, [r3, #20]
 800348c:	e000      	b.n	8003490 <weoDrawRectangleFilled+0x1c0>
				return;
 800348e:	46c0      	nop			; (mov r8, r8)
		}
 8003490:	46bd      	mov	sp, r7
 8003492:	b005      	add	sp, #20
 8003494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40004800 	.word	0x40004800

0800349c <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af02      	add	r7, sp, #8
 80034a2:	0002      	movs	r2, r0
 80034a4:	1dfb      	adds	r3, r7, #7
 80034a6:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 80034a8:	210c      	movs	r1, #12
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	1dfa      	adds	r2, r7, #7
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80034b8:	187a      	adds	r2, r7, r1
 80034ba:	4806      	ldr	r0, [pc, #24]	; (80034d4 <I2C_SOUND_ChangePage+0x38>)
 80034bc:	23fa      	movs	r3, #250	; 0xfa
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2302      	movs	r3, #2
 80034c4:	2130      	movs	r1, #48	; 0x30
 80034c6:	f004 fea3 	bl	8008210 <HAL_I2C_Master_Transmit>
	}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	200000c0 	.word	0x200000c0

080034d8 <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	0002      	movs	r2, r0
 80034e0:	1dfb      	adds	r3, r7, #7
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	1c0a      	adds	r2, r1, #0
 80034e8:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80034ea:	210c      	movs	r1, #12
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	1dfa      	adds	r2, r7, #7
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	1dba      	adds	r2, r7, #6
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80034fc:	187a      	adds	r2, r7, r1
 80034fe:	4806      	ldr	r0, [pc, #24]	; (8003518 <WriteReg_I2C_SOUND+0x40>)
 8003500:	23fa      	movs	r3, #250	; 0xfa
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2302      	movs	r3, #2
 8003508:	2130      	movs	r1, #48	; 0x30
 800350a:	f004 fe81 	bl	8008210 <HAL_I2C_Master_Transmit>
	}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	200000c0 	.word	0x200000c0

0800351c <soundSetup>:
	void soundSetup(void) {
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7ff ffbb 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 8003526:	2101      	movs	r1, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f7ff ffd5 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 800352e:	2001      	movs	r0, #1
 8003530:	f7ff ffb4 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8003534:	2100      	movs	r1, #0
 8003536:	2002      	movs	r0, #2
 8003538:	f7ff ffce 	bl	80034d8 <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 800353c:	200f      	movs	r0, #15
 800353e:	f003 fe2d 	bl	800719c <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 8003542:	2000      	movs	r0, #0
 8003544:	f7ff ffaa 	bl	800349c <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 8003548:	2103      	movs	r1, #3
 800354a:	2004      	movs	r0, #4
 800354c:	f7ff ffc4 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 8003550:	2191      	movs	r1, #145	; 0x91
 8003552:	2005      	movs	r0, #5
 8003554:	f7ff ffc0 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 8003558:	2104      	movs	r1, #4
 800355a:	2006      	movs	r0, #6
 800355c:	f7ff ffbc 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 8003560:	2100      	movs	r1, #0
 8003562:	2007      	movs	r0, #7
 8003564:	f7ff ffb8 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 8003568:	2100      	movs	r1, #0
 800356a:	2008      	movs	r0, #8
 800356c:	f7ff ffb4 	bl	80034d8 <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 8003570:	200f      	movs	r0, #15
 8003572:	f003 fe13 	bl	800719c <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 8003576:	2184      	movs	r1, #132	; 0x84
 8003578:	200b      	movs	r0, #11
 800357a:	f7ff ffad 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 800357e:	2182      	movs	r1, #130	; 0x82
 8003580:	200c      	movs	r0, #12
 8003582:	f7ff ffa9 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 8003586:	2100      	movs	r1, #0
 8003588:	200d      	movs	r0, #13
 800358a:	f7ff ffa5 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 800358e:	2180      	movs	r1, #128	; 0x80
 8003590:	200e      	movs	r0, #14
 8003592:	f7ff ffa1 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 8003596:	2100      	movs	r1, #0
 8003598:	201b      	movs	r0, #27
 800359a:	f7ff ff9d 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 800359e:	2100      	movs	r1, #0
 80035a0:	201c      	movs	r0, #28
 80035a2:	f7ff ff99 	bl	80034d8 <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 80035a6:	2102      	movs	r1, #2
 80035a8:	203c      	movs	r0, #60	; 0x3c
 80035aa:	f7ff ff95 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80035ae:	2001      	movs	r0, #1
 80035b0:	f7ff ff74 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 80035b4:	2110      	movs	r1, #16
 80035b6:	2001      	movs	r0, #1
 80035b8:	f7ff ff8e 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80035bc:	2100      	movs	r1, #0
 80035be:	200a      	movs	r0, #10
 80035c0:	f7ff ff8a 	bl	80034d8 <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80035c4:	2100      	movs	r1, #0
 80035c6:	200c      	movs	r0, #12
 80035c8:	f7ff ff86 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 80035cc:	2100      	movs	r1, #0
 80035ce:	2016      	movs	r0, #22
 80035d0:	f7ff ff82 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80035d4:	2100      	movs	r1, #0
 80035d6:	2018      	movs	r0, #24
 80035d8:	f7ff ff7e 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80035dc:	2100      	movs	r1, #0
 80035de:	2019      	movs	r0, #25
 80035e0:	f7ff ff7a 	bl	80034d8 <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80035e4:	2100      	movs	r1, #0
 80035e6:	2009      	movs	r0, #9
 80035e8:	f7ff ff76 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80035ec:	2100      	movs	r1, #0
 80035ee:	2010      	movs	r0, #16
 80035f0:	f7ff ff72 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80035f4:	2100      	movs	r1, #0
 80035f6:	202e      	movs	r0, #46	; 0x2e
 80035f8:	f7ff ff6e 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80035fc:	2110      	movs	r1, #16
 80035fe:	2030      	movs	r0, #48	; 0x30
 8003600:	f7ff ff6a 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 8003604:	2102      	movs	r1, #2
 8003606:	202d      	movs	r0, #45	; 0x2d
 8003608:	f7ff ff66 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800360c:	2000      	movs	r0, #0
 800360e:	f7ff ff45 	bl	800349c <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 8003612:	2190      	movs	r1, #144	; 0x90
 8003614:	203f      	movs	r0, #63	; 0x3f
 8003616:	f7ff ff5f 	bl	80034d8 <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 800361a:	2100      	movs	r1, #0
 800361c:	2041      	movs	r0, #65	; 0x41
 800361e:	f7ff ff5b 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 8003622:	2104      	movs	r1, #4
 8003624:	2040      	movs	r0, #64	; 0x40
 8003626:	f7ff ff57 	bl	80034d8 <WriteReg_I2C_SOUND>
	}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8003640:	230d      	movs	r3, #13
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 8003648:	4bd9      	ldr	r3, [pc, #868]	; (80039b0 <answer2CPU+0x380>)
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 800364e:	4bd9      	ldr	r3, [pc, #868]	; (80039b4 <answer2CPU+0x384>)
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x14)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b11      	cmp	r3, #17
 8003662:	d00f      	beq.n	8003684 <answer2CPU+0x54>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b12      	cmp	r3, #18
 800366a:	d00b      	beq.n	8003684 <answer2CPU+0x54>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b13      	cmp	r3, #19
 8003672:	d007      	beq.n	8003684 <answer2CPU+0x54>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b14      	cmp	r3, #20
 800367a:	d003      	beq.n	8003684 <answer2CPU+0x54>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b15      	cmp	r3, #21
 8003682:	d105      	bne.n	8003690 <answer2CPU+0x60>
 8003684:	4bcc      	ldr	r3, [pc, #816]	; (80039b8 <answer2CPU+0x388>)
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	4bcb      	ldr	r3, [pc, #812]	; (80039b8 <answer2CPU+0x388>)
 800368a:	2140      	movs	r1, #64	; 0x40
 800368c:	438a      	bics	r2, r1
 800368e:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b11      	cmp	r3, #17
 8003696:	d105      	bne.n	80036a4 <answer2CPU+0x74>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8003698:	4bc7      	ldr	r3, [pc, #796]	; (80039b8 <answer2CPU+0x388>)
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	4bc6      	ldr	r3, [pc, #792]	; (80039b8 <answer2CPU+0x388>)
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	438a      	bics	r2, r1
 80036a2:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	4252      	negs	r2, r2
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	4bc2      	ldr	r3, [pc, #776]	; (80039bc <answer2CPU+0x38c>)
 80036b4:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	d800      	bhi.n	80036c0 <answer2CPU+0x90>
 80036be:	e162      	b.n	8003986 <answer2CPU+0x356>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b15      	cmp	r3, #21
 80036c6:	d900      	bls.n	80036ca <answer2CPU+0x9a>
 80036c8:	e15d      	b.n	8003986 <answer2CPU+0x356>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80036ca:	23a0      	movs	r3, #160	; 0xa0
 80036cc:	05db      	lsls	r3, r3, #23
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2210      	movs	r2, #16
 80036d2:	4013      	ands	r3, r2
 80036d4:	d106      	bne.n	80036e4 <answer2CPU+0xb4>
					keyboard &= 0b11111110;
 80036d6:	220f      	movs	r2, #15
 80036d8:	18bb      	adds	r3, r7, r2
 80036da:	18ba      	adds	r2, r7, r2
 80036dc:	7812      	ldrb	r2, [r2, #0]
 80036de:	2101      	movs	r1, #1
 80036e0:	438a      	bics	r2, r1
 80036e2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80036e4:	23a0      	movs	r3, #160	; 0xa0
 80036e6:	05db      	lsls	r3, r3, #23
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d106      	bne.n	80036fe <answer2CPU+0xce>
					keyboard &= 0b11111101;
 80036f0:	220f      	movs	r2, #15
 80036f2:	18bb      	adds	r3, r7, r2
 80036f4:	18ba      	adds	r2, r7, r2
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	2102      	movs	r1, #2
 80036fa:	438a      	bics	r2, r1
 80036fc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80036fe:	23a0      	movs	r3, #160	; 0xa0
 8003700:	05db      	lsls	r3, r3, #23
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	2201      	movs	r2, #1
 8003706:	4013      	ands	r3, r2
 8003708:	d106      	bne.n	8003718 <answer2CPU+0xe8>
					keyboard &= 0b11111011;
 800370a:	220f      	movs	r2, #15
 800370c:	18bb      	adds	r3, r7, r2
 800370e:	18ba      	adds	r2, r7, r2
 8003710:	7812      	ldrb	r2, [r2, #0]
 8003712:	2104      	movs	r1, #4
 8003714:	438a      	bics	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8003718:	23a0      	movs	r3, #160	; 0xa0
 800371a:	05db      	lsls	r3, r3, #23
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	4013      	ands	r3, r2
 8003724:	d106      	bne.n	8003734 <answer2CPU+0x104>
					keyboard &= 0b11110111;
 8003726:	220f      	movs	r2, #15
 8003728:	18bb      	adds	r3, r7, r2
 800372a:	18ba      	adds	r2, r7, r2
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	2108      	movs	r1, #8
 8003730:	438a      	bics	r2, r1
 8003732:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8003734:	23a0      	movs	r3, #160	; 0xa0
 8003736:	05db      	lsls	r3, r3, #23
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	01db      	lsls	r3, r3, #7
 800373e:	4013      	ands	r3, r2
 8003740:	d106      	bne.n	8003750 <answer2CPU+0x120>
					keyboard &= 0b11101111;
 8003742:	220f      	movs	r2, #15
 8003744:	18bb      	adds	r3, r7, r2
 8003746:	18ba      	adds	r2, r7, r2
 8003748:	7812      	ldrb	r2, [r2, #0]
 800374a:	2110      	movs	r1, #16
 800374c:	438a      	bics	r2, r1
 800374e:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8003750:	210f      	movs	r1, #15
 8003752:	187b      	adds	r3, r7, r1
 8003754:	187a      	adds	r2, r7, r1
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	43d2      	mvns	r2, r2
 800375a:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800375c:	200c      	movs	r0, #12
 800375e:	183b      	adds	r3, r7, r0
 8003760:	2204      	movs	r2, #4
 8003762:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003764:	183b      	adds	r3, r7, r0
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b02      	subs	r3, #2
 800376c:	b29a      	uxth	r2, r3
 800376e:	4b93      	ldr	r3, [pc, #588]	; (80039bc <answer2CPU+0x38c>)
 8003770:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8003772:	187b      	adds	r3, r7, r1
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	b29a      	uxth	r2, r3
 8003778:	4b90      	ldr	r3, [pc, #576]	; (80039bc <answer2CPU+0x38c>)
 800377a:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800377c:	230e      	movs	r3, #14
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	2200      	movs	r2, #0
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	e011      	b.n	80037aa <answer2CPU+0x17a>
					myCS = myCS + ans[i];
 8003786:	200e      	movs	r0, #14
 8003788:	183b      	adds	r3, r7, r0
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	4b8b      	ldr	r3, [pc, #556]	; (80039bc <answer2CPU+0x38c>)
 800378e:	0052      	lsls	r2, r2, #1
 8003790:	5ad3      	ldrh	r3, [r2, r3]
 8003792:	b2d9      	uxtb	r1, r3
 8003794:	220d      	movs	r2, #13
 8003796:	18bb      	adds	r3, r7, r2
 8003798:	18ba      	adds	r2, r7, r2
 800379a:	7812      	ldrb	r2, [r2, #0]
 800379c:	188a      	adds	r2, r1, r2
 800379e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	183b      	adds	r3, r7, r0
 80037a6:	3201      	adds	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
 80037aa:	200e      	movs	r0, #14
 80037ac:	183b      	adds	r3, r7, r0
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	230c      	movs	r3, #12
 80037b2:	18fb      	adds	r3, r7, r3
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbe4      	blt.n	8003786 <answer2CPU+0x156>
				}
				myCS = 0 - myCS;
 80037bc:	210d      	movs	r1, #13
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	187a      	adds	r2, r7, r1
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	4252      	negs	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	4b7b      	ldr	r3, [pc, #492]	; (80039bc <answer2CPU+0x38c>)
 80037d0:	80da      	strh	r2, [r3, #6]
				i=0;
 80037d2:	183b      	adds	r3, r7, r0
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	4b79      	ldr	r3, [pc, #484]	; (80039c0 <answer2CPU+0x390>)
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	2280      	movs	r2, #128	; 0x80
 80037e0:	4013      	ands	r3, r2
 80037e2:	d0fa      	beq.n	80037da <answer2CPU+0x1aa>
				USART2->TDR = ans[0]|0x0100;
 80037e4:	4b75      	ldr	r3, [pc, #468]	; (80039bc <answer2CPU+0x38c>)
 80037e6:	881b      	ldrh	r3, [r3, #0]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	0052      	lsls	r2, r2, #1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	4b73      	ldr	r3, [pc, #460]	; (80039c0 <answer2CPU+0x390>)
 80037f2:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80037f4:	230e      	movs	r3, #14
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e013      	b.n	8003826 <answer2CPU+0x1f6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	4b6f      	ldr	r3, [pc, #444]	; (80039c0 <answer2CPU+0x390>)
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	4013      	ands	r3, r2
 8003808:	d0fa      	beq.n	8003800 <answer2CPU+0x1d0>
				    USART2->TDR = (uint8_t)ans[i];
 800380a:	210e      	movs	r1, #14
 800380c:	187b      	adds	r3, r7, r1
 800380e:	781a      	ldrb	r2, [r3, #0]
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <answer2CPU+0x38c>)
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	5ad3      	ldrh	r3, [r2, r3]
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b69      	ldr	r3, [pc, #420]	; (80039c0 <answer2CPU+0x390>)
 800381a:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800381c:	187b      	adds	r3, r7, r1
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	187b      	adds	r3, r7, r1
 8003822:	3201      	adds	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	230e      	movs	r3, #14
 8003828:	18fa      	adds	r2, r7, r3
 800382a:	230c      	movs	r3, #12
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d3e3      	bcc.n	80037fe <answer2CPU+0x1ce>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8003836:	4b62      	ldr	r3, [pc, #392]	; (80039c0 <answer2CPU+0x390>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <answer2CPU+0x390>)
 800383c:	2104      	movs	r1, #4
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8003842:	4b5b      	ldr	r3, [pc, #364]	; (80039b0 <answer2CPU+0x380>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b11      	cmp	r3, #17
 800384e:	d109      	bne.n	8003864 <answer2CPU+0x234>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	789a      	ldrb	r2, [r3, #2]
 8003854:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <answer2CPU+0x394>)
 8003856:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8003858:	4b56      	ldr	r3, [pc, #344]	; (80039b4 <answer2CPU+0x384>)
 800385a:	2211      	movs	r2, #17
 800385c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800385e:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <answer2CPU+0x398>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b12      	cmp	r3, #18
 800386a:	d115      	bne.n	8003898 <answer2CPU+0x268>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3302      	adds	r3, #2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	001a      	movs	r2, r3
 8003874:	4b55      	ldr	r3, [pc, #340]	; (80039cc <answer2CPU+0x39c>)
 8003876:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3303      	adds	r3, #3
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	001a      	movs	r2, r3
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <answer2CPU+0x3a0>)
 8003882:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	791a      	ldrb	r2, [r3, #4]
 8003888:	4b4e      	ldr	r3, [pc, #312]	; (80039c4 <answer2CPU+0x394>)
 800388a:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800388c:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <answer2CPU+0x384>)
 800388e:	2212      	movs	r2, #18
 8003890:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003892:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <answer2CPU+0x398>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b13      	cmp	r3, #19
 800389e:	d140      	bne.n	8003922 <answer2CPU+0x2f2>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3302      	adds	r3, #2
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	001a      	movs	r2, r3
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <answer2CPU+0x39c>)
 80038aa:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3303      	adds	r3, #3
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	001a      	movs	r2, r3
 80038b4:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <answer2CPU+0x3a0>)
 80038b6:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	791a      	ldrb	r2, [r3, #4]
 80038bc:	4b45      	ldr	r3, [pc, #276]	; (80039d4 <answer2CPU+0x3a4>)
 80038be:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 80038c0:	4b44      	ldr	r3, [pc, #272]	; (80039d4 <answer2CPU+0x3a4>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	4252      	negs	r2, r2
 80038c8:	4313      	orrs	r3, r2
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <answer2CPU+0x3a8>)
 80038ce:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3301      	adds	r3, #1
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	3b04      	subs	r3, #4
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b40      	ldr	r3, [pc, #256]	; (80039dc <answer2CPU+0x3ac>)
 80038dc:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80038de:	230e      	movs	r3, #14
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e00f      	b.n	8003908 <answer2CPU+0x2d8>
					dataASCII[i] = cmd[i+5];
 80038e8:	200e      	movs	r0, #14
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	3305      	adds	r3, #5
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	18d2      	adds	r2, r2, r3
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	7811      	ldrb	r1, [r2, #0]
 80038fa:	4a39      	ldr	r2, [pc, #228]	; (80039e0 <answer2CPU+0x3b0>)
 80038fc:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	183b      	adds	r3, r7, r0
 8003904:	3201      	adds	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
 8003908:	4b34      	ldr	r3, [pc, #208]	; (80039dc <answer2CPU+0x3ac>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	220e      	movs	r2, #14
 800390e:	18ba      	adds	r2, r7, r2
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d3e8      	bcc.n	80038e8 <answer2CPU+0x2b8>
				}
					cmd2Execute=0x13;
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <answer2CPU+0x384>)
 8003918:	2213      	movs	r2, #19
 800391a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800391c:	4b2a      	ldr	r3, [pc, #168]	; (80039c8 <answer2CPU+0x398>)
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b14      	cmp	r3, #20
 8003928:	d109      	bne.n	800393e <answer2CPU+0x30e>
					numSound = cmd[2];
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	789a      	ldrb	r2, [r3, #2]
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <answer2CPU+0x3b4>)
 8003930:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <answer2CPU+0x384>)
 8003934:	2214      	movs	r2, #20
 8003936:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003938:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <answer2CPU+0x398>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b15      	cmp	r3, #21
 8003944:	d10d      	bne.n	8003962 <answer2CPU+0x332>
					volume = cmd[2];
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	789a      	ldrb	r2, [r3, #2]
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <answer2CPU+0x3b8>)
 800394c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	78da      	ldrb	r2, [r3, #3]
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <answer2CPU+0x3bc>)
 8003954:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <answer2CPU+0x384>)
 8003958:	2215      	movs	r2, #21
 800395a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <answer2CPU+0x398>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b16      	cmp	r3, #22
 8003968:	d10d      	bne.n	8003986 <answer2CPU+0x356>
					volume = cmd[3];
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	78da      	ldrb	r2, [r3, #3]
 800396e:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <answer2CPU+0x3b8>)
 8003970:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	791a      	ldrb	r2, [r3, #4]
 8003976:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <answer2CPU+0x3bc>)
 8003978:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <answer2CPU+0x384>)
 800397c:	2216      	movs	r2, #22
 800397e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <answer2CPU+0x398>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d000      	beq.n	8003990 <answer2CPU+0x360>
 800398e:	e09f      	b.n	8003ad0 <answer2CPU+0x4a0>
				myLength = 0x14; //20 bytes length answer
 8003990:	210c      	movs	r1, #12
 8003992:	187b      	adds	r3, r7, r1
 8003994:	2214      	movs	r2, #20
 8003996:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003998:	187b      	adds	r3, r7, r1
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b02      	subs	r3, #2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <answer2CPU+0x38c>)
 80039a4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80039a6:	230e      	movs	r3, #14
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e030      	b.n	8003a12 <answer2CPU+0x3e2>
 80039b0:	200003c8 	.word	0x200003c8
 80039b4:	2000042a 	.word	0x2000042a
 80039b8:	50000800 	.word	0x50000800
 80039bc:	20000410 	.word	0x20000410
 80039c0:	40004400 	.word	0x40004400
 80039c4:	200003c9 	.word	0x200003c9
 80039c8:	2000042b 	.word	0x2000042b
 80039cc:	200003d0 	.word	0x200003d0
 80039d0:	200003d4 	.word	0x200003d4
 80039d4:	20000431 	.word	0x20000431
 80039d8:	20000432 	.word	0x20000432
 80039dc:	200003ce 	.word	0x200003ce
 80039e0:	200003dc 	.word	0x200003dc
 80039e4:	200003ca 	.word	0x200003ca
 80039e8:	200003cb 	.word	0x200003cb
 80039ec:	200003cc 	.word	0x200003cc
					ans[i + 2] = PCB_type[i];
 80039f0:	200e      	movs	r0, #14
 80039f2:	183b      	adds	r3, r7, r0
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	4acb      	ldr	r2, [pc, #812]	; (8003d24 <answer2CPU+0x6f4>)
 80039f8:	5cd1      	ldrb	r1, [r2, r3]
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	b289      	uxth	r1, r1
 8003a02:	4bc9      	ldr	r3, [pc, #804]	; (8003d28 <answer2CPU+0x6f8>)
 8003a04:	0052      	lsls	r2, r2, #1
 8003a06:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003a08:	183b      	adds	r3, r7, r0
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	3201      	adds	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	220e      	movs	r2, #14
 8003a14:	18bb      	adds	r3, r7, r2
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d9e9      	bls.n	80039f0 <answer2CPU+0x3c0>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003a1c:	18bb      	adds	r3, r7, r2
 8003a1e:	2200      	movs	r2, #0
 8003a20:	701a      	strb	r2, [r3, #0]
 8003a22:	e011      	b.n	8003a48 <answer2CPU+0x418>
					myCS = myCS + ans[i];
 8003a24:	200e      	movs	r0, #14
 8003a26:	183b      	adds	r3, r7, r0
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	4bbf      	ldr	r3, [pc, #764]	; (8003d28 <answer2CPU+0x6f8>)
 8003a2c:	0052      	lsls	r2, r2, #1
 8003a2e:	5ad3      	ldrh	r3, [r2, r3]
 8003a30:	b2d9      	uxtb	r1, r3
 8003a32:	220d      	movs	r2, #13
 8003a34:	18bb      	adds	r3, r7, r2
 8003a36:	18ba      	adds	r2, r7, r2
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	188a      	adds	r2, r1, r2
 8003a3c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8003a3e:	183b      	adds	r3, r7, r0
 8003a40:	781a      	ldrb	r2, [r3, #0]
 8003a42:	183b      	adds	r3, r7, r0
 8003a44:	3201      	adds	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	230e      	movs	r3, #14
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	781a      	ldrb	r2, [r3, #0]
 8003a4e:	200c      	movs	r0, #12
 8003a50:	183b      	adds	r3, r7, r0
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	3b01      	subs	r3, #1
 8003a56:	429a      	cmp	r2, r3
 8003a58:	dbe4      	blt.n	8003a24 <answer2CPU+0x3f4>
				}
				myCS = 0 - myCS;
 8003a5a:	210d      	movs	r1, #13
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	187a      	adds	r2, r7, r1
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	4252      	negs	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003a66:	183b      	adds	r3, r7, r0
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	1e5a      	subs	r2, r3, #1
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b299      	uxth	r1, r3
 8003a72:	4bad      	ldr	r3, [pc, #692]	; (8003d28 <answer2CPU+0x6f8>)
 8003a74:	0052      	lsls	r2, r2, #1
 8003a76:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	4bac      	ldr	r3, [pc, #688]	; (8003d2c <answer2CPU+0x6fc>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	4013      	ands	r3, r2
 8003a82:	d0fa      	beq.n	8003a7a <answer2CPU+0x44a>
				USART2->TDR = ans[0]|0x0100;
 8003a84:	4ba8      	ldr	r3, [pc, #672]	; (8003d28 <answer2CPU+0x6f8>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	0052      	lsls	r2, r2, #1
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	4ba6      	ldr	r3, [pc, #664]	; (8003d2c <answer2CPU+0x6fc>)
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003a94:	e014      	b.n	8003ac0 <answer2CPU+0x490>
				  {
				    i++;
 8003a96:	210e      	movs	r1, #14
 8003a98:	187b      	adds	r3, r7, r1
 8003a9a:	781a      	ldrb	r2, [r3, #0]
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	3201      	adds	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	4ba1      	ldr	r3, [pc, #644]	; (8003d2c <answer2CPU+0x6fc>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d0fa      	beq.n	8003aa4 <answer2CPU+0x474>
				    USART2->TDR = (uint8_t)ans[i];
 8003aae:	230e      	movs	r3, #14
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	4b9c      	ldr	r3, [pc, #624]	; (8003d28 <answer2CPU+0x6f8>)
 8003ab6:	0052      	lsls	r2, r2, #1
 8003ab8:	5ad3      	ldrh	r3, [r2, r3]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	4b9b      	ldr	r3, [pc, #620]	; (8003d2c <answer2CPU+0x6fc>)
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003ac0:	230e      	movs	r3, #14
 8003ac2:	18fb      	adds	r3, r7, r3
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	4b98      	ldr	r3, [pc, #608]	; (8003d28 <answer2CPU+0x6f8>)
 8003ac8:	0052      	lsls	r2, r2, #1
 8003aca:	5ad3      	ldrh	r3, [r2, r3]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e2      	bne.n	8003a96 <answer2CPU+0x466>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d000      	beq.n	8003ada <answer2CPU+0x4aa>
 8003ad8:	e07f      	b.n	8003bda <answer2CPU+0x5aa>
				myLength = 0x0B; //19 bytes length answer
 8003ada:	210c      	movs	r1, #12
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	220b      	movs	r2, #11
 8003ae0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b02      	subs	r3, #2
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	4b8e      	ldr	r3, [pc, #568]	; (8003d28 <answer2CPU+0x6f8>)
 8003aee:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003af0:	230e      	movs	r3, #14
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	e010      	b.n	8003b1c <answer2CPU+0x4ec>
					ans[i + 2] = PCB_rev[i];
 8003afa:	200e      	movs	r0, #14
 8003afc:	183b      	adds	r3, r7, r0
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	4a8b      	ldr	r2, [pc, #556]	; (8003d30 <answer2CPU+0x700>)
 8003b02:	5cd1      	ldrb	r1, [r2, r3]
 8003b04:	183b      	adds	r3, r7, r0
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	b289      	uxth	r1, r1
 8003b0c:	4b86      	ldr	r3, [pc, #536]	; (8003d28 <answer2CPU+0x6f8>)
 8003b0e:	0052      	lsls	r2, r2, #1
 8003b10:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003b12:	183b      	adds	r3, r7, r0
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	183b      	adds	r3, r7, r0
 8003b18:	3201      	adds	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	220e      	movs	r2, #14
 8003b1e:	18bb      	adds	r3, r7, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d9e9      	bls.n	8003afa <answer2CPU+0x4ca>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003b26:	18bb      	adds	r3, r7, r2
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	e011      	b.n	8003b52 <answer2CPU+0x522>
					myCS = myCS + ans[i];
 8003b2e:	200e      	movs	r0, #14
 8003b30:	183b      	adds	r3, r7, r0
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <answer2CPU+0x6f8>)
 8003b36:	0052      	lsls	r2, r2, #1
 8003b38:	5ad3      	ldrh	r3, [r2, r3]
 8003b3a:	b2d9      	uxtb	r1, r3
 8003b3c:	220d      	movs	r2, #13
 8003b3e:	18bb      	adds	r3, r7, r2
 8003b40:	18ba      	adds	r2, r7, r2
 8003b42:	7812      	ldrb	r2, [r2, #0]
 8003b44:	188a      	adds	r2, r1, r2
 8003b46:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8003b48:	183b      	adds	r3, r7, r0
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	3201      	adds	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	230e      	movs	r3, #14
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	200c      	movs	r0, #12
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	429a      	cmp	r2, r3
 8003b62:	dbe4      	blt.n	8003b2e <answer2CPU+0x4fe>
				}
				myCS = 0 - myCS;
 8003b64:	210d      	movs	r1, #13
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	187a      	adds	r2, r7, r1
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	4252      	negs	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003b70:	183b      	adds	r3, r7, r0
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	1e5a      	subs	r2, r3, #1
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	b299      	uxth	r1, r3
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <answer2CPU+0x6f8>)
 8003b7e:	0052      	lsls	r2, r2, #1
 8003b80:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <answer2CPU+0x6fc>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d0fa      	beq.n	8003b84 <answer2CPU+0x554>
				USART2->TDR = ans[0]|0x0100;
 8003b8e:	4b66      	ldr	r3, [pc, #408]	; (8003d28 <answer2CPU+0x6f8>)
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	2280      	movs	r2, #128	; 0x80
 8003b94:	0052      	lsls	r2, r2, #1
 8003b96:	4313      	orrs	r3, r2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	4b64      	ldr	r3, [pc, #400]	; (8003d2c <answer2CPU+0x6fc>)
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003b9e:	e014      	b.n	8003bca <answer2CPU+0x59a>
					  {
					    i++;
 8003ba0:	210e      	movs	r1, #14
 8003ba2:	187b      	adds	r3, r7, r1
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	3201      	adds	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <answer2CPU+0x6fc>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d0fa      	beq.n	8003bae <answer2CPU+0x57e>
					    USART2->TDR = (uint8_t)ans[i];
 8003bb8:	230e      	movs	r3, #14
 8003bba:	18fb      	adds	r3, r7, r3
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	4b5a      	ldr	r3, [pc, #360]	; (8003d28 <answer2CPU+0x6f8>)
 8003bc0:	0052      	lsls	r2, r2, #1
 8003bc2:	5ad3      	ldrh	r3, [r2, r3]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <answer2CPU+0x6fc>)
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8003bca:	230e      	movs	r3, #14
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <answer2CPU+0x6f8>)
 8003bd2:	0052      	lsls	r2, r2, #1
 8003bd4:	5ad3      	ldrh	r3, [r2, r3]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1e2      	bne.n	8003ba0 <answer2CPU+0x570>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d000      	beq.n	8003be4 <answer2CPU+0x5b4>
 8003be2:	e07f      	b.n	8003ce4 <answer2CPU+0x6b4>
				myLength = 0x13; //19 bytes length answer
 8003be4:	210c      	movs	r1, #12
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2213      	movs	r2, #19
 8003bea:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003bec:	187b      	adds	r3, r7, r1
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	3b02      	subs	r3, #2
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	4b4c      	ldr	r3, [pc, #304]	; (8003d28 <answer2CPU+0x6f8>)
 8003bf8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8003bfa:	230e      	movs	r3, #14
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	e010      	b.n	8003c26 <answer2CPU+0x5f6>
					ans[i + 2] = EmitterSN[i];
 8003c04:	200e      	movs	r0, #14
 8003c06:	183b      	adds	r3, r7, r0
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	4a4a      	ldr	r2, [pc, #296]	; (8003d34 <answer2CPU+0x704>)
 8003c0c:	5cd1      	ldrb	r1, [r2, r3]
 8003c0e:	183b      	adds	r3, r7, r0
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	1c9a      	adds	r2, r3, #2
 8003c14:	b289      	uxth	r1, r1
 8003c16:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <answer2CPU+0x6f8>)
 8003c18:	0052      	lsls	r2, r2, #1
 8003c1a:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8003c1c:	183b      	adds	r3, r7, r0
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	183b      	adds	r3, r7, r0
 8003c22:	3201      	adds	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	220e      	movs	r2, #14
 8003c28:	18bb      	adds	r3, r7, r2
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d9e9      	bls.n	8003c04 <answer2CPU+0x5d4>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003c30:	18bb      	adds	r3, r7, r2
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e011      	b.n	8003c5c <answer2CPU+0x62c>
					myCS = myCS + ans[i];
 8003c38:	200e      	movs	r0, #14
 8003c3a:	183b      	adds	r3, r7, r0
 8003c3c:	781a      	ldrb	r2, [r3, #0]
 8003c3e:	4b3a      	ldr	r3, [pc, #232]	; (8003d28 <answer2CPU+0x6f8>)
 8003c40:	0052      	lsls	r2, r2, #1
 8003c42:	5ad3      	ldrh	r3, [r2, r3]
 8003c44:	b2d9      	uxtb	r1, r3
 8003c46:	220d      	movs	r2, #13
 8003c48:	18bb      	adds	r3, r7, r2
 8003c4a:	18ba      	adds	r2, r7, r2
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	188a      	adds	r2, r1, r2
 8003c50:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8003c52:	183b      	adds	r3, r7, r0
 8003c54:	781a      	ldrb	r2, [r3, #0]
 8003c56:	183b      	adds	r3, r7, r0
 8003c58:	3201      	adds	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	230e      	movs	r3, #14
 8003c5e:	18fb      	adds	r3, r7, r3
 8003c60:	781a      	ldrb	r2, [r3, #0]
 8003c62:	200c      	movs	r0, #12
 8003c64:	183b      	adds	r3, r7, r0
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	dbe4      	blt.n	8003c38 <answer2CPU+0x608>
				}
				myCS = 0 - myCS;
 8003c6e:	210d      	movs	r1, #13
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	187a      	adds	r2, r7, r1
 8003c74:	7812      	ldrb	r2, [r2, #0]
 8003c76:	4252      	negs	r2, r2
 8003c78:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	1e5a      	subs	r2, r3, #1
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	b299      	uxth	r1, r3
 8003c86:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <answer2CPU+0x6f8>)
 8003c88:	0052      	lsls	r2, r2, #1
 8003c8a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <answer2CPU+0x6fc>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	4013      	ands	r3, r2
 8003c96:	d0fa      	beq.n	8003c8e <answer2CPU+0x65e>
				USART2->TDR = ans[0]|0x0100;
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <answer2CPU+0x6f8>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	0052      	lsls	r2, r2, #1
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	4b21      	ldr	r3, [pc, #132]	; (8003d2c <answer2CPU+0x6fc>)
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003ca8:	e014      	b.n	8003cd4 <answer2CPU+0x6a4>
				  {
				    i++;
 8003caa:	210e      	movs	r1, #14
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	3201      	adds	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	4b1c      	ldr	r3, [pc, #112]	; (8003d2c <answer2CPU+0x6fc>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d0fa      	beq.n	8003cb8 <answer2CPU+0x688>
				    	USART2->TDR = (uint8_t)ans[i];
 8003cc2:	230e      	movs	r3, #14
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781a      	ldrb	r2, [r3, #0]
 8003cc8:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <answer2CPU+0x6f8>)
 8003cca:	0052      	lsls	r2, r2, #1
 8003ccc:	5ad3      	ldrh	r3, [r2, r3]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <answer2CPU+0x6fc>)
 8003cd2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003cd4:	230e      	movs	r3, #14
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	781a      	ldrb	r2, [r3, #0]
 8003cda:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <answer2CPU+0x6f8>)
 8003cdc:	0052      	lsls	r2, r2, #1
 8003cde:	5ad3      	ldrh	r3, [r2, r3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e2      	bne.n	8003caa <answer2CPU+0x67a>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b03      	cmp	r3, #3
 8003cea:	d000      	beq.n	8003cee <answer2CPU+0x6be>
 8003cec:	e07c      	b.n	8003de8 <answer2CPU+0x7b8>
				myLength = 0x04; //4 bytes length answer
 8003cee:	210c      	movs	r1, #12
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b02      	subs	r3, #2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <answer2CPU+0x6f8>)
 8003d02:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <answer2CPU+0x708>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	4b07      	ldr	r3, [pc, #28]	; (8003d28 <answer2CPU+0x6f8>)
 8003d0c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003d0e:	230d      	movs	r3, #13
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <answer2CPU+0x6f8>)
 8003d18:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003d1a:	230e      	movs	r3, #14
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e01d      	b.n	8003d60 <answer2CPU+0x730>
 8003d24:	20000000 	.word	0x20000000
 8003d28:	20000410 	.word	0x20000410
 8003d2c:	40004400 	.word	0x40004400
 8003d30:	20000014 	.word	0x20000014
 8003d34:	20000020 	.word	0x20000020
 8003d38:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003d3c:	200e      	movs	r0, #14
 8003d3e:	183b      	adds	r3, r7, r0
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <answer2CPU+0x8c8>)
 8003d44:	0052      	lsls	r2, r2, #1
 8003d46:	5ad3      	ldrh	r3, [r2, r3]
 8003d48:	b2d9      	uxtb	r1, r3
 8003d4a:	220d      	movs	r2, #13
 8003d4c:	18bb      	adds	r3, r7, r2
 8003d4e:	18ba      	adds	r2, r7, r2
 8003d50:	7812      	ldrb	r2, [r2, #0]
 8003d52:	188a      	adds	r2, r1, r2
 8003d54:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003d56:	183b      	adds	r3, r7, r0
 8003d58:	781a      	ldrb	r2, [r3, #0]
 8003d5a:	183b      	adds	r3, r7, r0
 8003d5c:	3201      	adds	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	230e      	movs	r3, #14
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	200c      	movs	r0, #12
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	dbe4      	blt.n	8003d3c <answer2CPU+0x70c>
				}
				myCS = 0 - myCS;
 8003d72:	210d      	movs	r1, #13
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	187a      	adds	r2, r7, r1
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	4252      	negs	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003d7e:	183b      	adds	r3, r7, r0
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b299      	uxth	r1, r3
 8003d8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ef8 <answer2CPU+0x8c8>)
 8003d8c:	0052      	lsls	r2, r2, #1
 8003d8e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <answer2CPU+0x8cc>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d0fa      	beq.n	8003d92 <answer2CPU+0x762>
					USART2->TDR = ans[0]|0x0100;
 8003d9c:	4b56      	ldr	r3, [pc, #344]	; (8003ef8 <answer2CPU+0x8c8>)
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	0052      	lsls	r2, r2, #1
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	4b54      	ldr	r3, [pc, #336]	; (8003efc <answer2CPU+0x8cc>)
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003dac:	e014      	b.n	8003dd8 <answer2CPU+0x7a8>
						{
						  i++;
 8003dae:	210e      	movs	r1, #14
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	781a      	ldrb	r2, [r3, #0]
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	3201      	adds	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	4b4f      	ldr	r3, [pc, #316]	; (8003efc <answer2CPU+0x8cc>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2280      	movs	r2, #128	; 0x80
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d0fa      	beq.n	8003dbc <answer2CPU+0x78c>
						     USART2->TDR = (uint8_t)ans[i];
 8003dc6:	230e      	movs	r3, #14
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	4b4a      	ldr	r3, [pc, #296]	; (8003ef8 <answer2CPU+0x8c8>)
 8003dce:	0052      	lsls	r2, r2, #1
 8003dd0:	5ad3      	ldrh	r3, [r2, r3]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	4b49      	ldr	r3, [pc, #292]	; (8003efc <answer2CPU+0x8cc>)
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8003dd8:	230e      	movs	r3, #14
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	4b46      	ldr	r3, [pc, #280]	; (8003ef8 <answer2CPU+0x8c8>)
 8003de0:	0052      	lsls	r2, r2, #1
 8003de2:	5ad3      	ldrh	r3, [r2, r3]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e2      	bne.n	8003dae <answer2CPU+0x77e>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d000      	beq.n	8003df2 <answer2CPU+0x7c2>
 8003df0:	e076      	b.n	8003ee0 <answer2CPU+0x8b0>
				myLength = 0x04; //4 bytes length answer
 8003df2:	210c      	movs	r1, #12
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	2204      	movs	r2, #4
 8003df8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8003dfa:	187b      	adds	r3, r7, r1
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b02      	subs	r3, #2
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <answer2CPU+0x8c8>)
 8003e06:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	001a      	movs	r2, r3
 8003e10:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <answer2CPU+0x8d0>)
 8003e12:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8003e14:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <answer2CPU+0x8d4>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <answer2CPU+0x8c8>)
 8003e1c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8003e1e:	230d      	movs	r3, #13
 8003e20:	18fb      	adds	r3, r7, r3
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <answer2CPU+0x8c8>)
 8003e28:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8003e2a:	230e      	movs	r3, #14
 8003e2c:	18fb      	adds	r3, r7, r3
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e011      	b.n	8003e58 <answer2CPU+0x828>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8003e34:	200e      	movs	r0, #14
 8003e36:	183b      	adds	r3, r7, r0
 8003e38:	781a      	ldrb	r2, [r3, #0]
 8003e3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <answer2CPU+0x8c8>)
 8003e3c:	0052      	lsls	r2, r2, #1
 8003e3e:	5ad3      	ldrh	r3, [r2, r3]
 8003e40:	b2d9      	uxtb	r1, r3
 8003e42:	220d      	movs	r2, #13
 8003e44:	18bb      	adds	r3, r7, r2
 8003e46:	18ba      	adds	r2, r7, r2
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	188a      	adds	r2, r1, r2
 8003e4c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8003e4e:	183b      	adds	r3, r7, r0
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	3201      	adds	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	230e      	movs	r3, #14
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	200c      	movs	r0, #12
 8003e60:	183b      	adds	r3, r7, r0
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	429a      	cmp	r2, r3
 8003e68:	dbe4      	blt.n	8003e34 <answer2CPU+0x804>
				}
				myCS = 0 - myCS;
 8003e6a:	210d      	movs	r1, #13
 8003e6c:	187b      	adds	r3, r7, r1
 8003e6e:	187a      	adds	r2, r7, r1
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	4252      	negs	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8003e76:	183b      	adds	r3, r7, r0
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	1e5a      	subs	r2, r3, #1
 8003e7c:	187b      	adds	r3, r7, r1
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	b299      	uxth	r1, r3
 8003e82:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <answer2CPU+0x8c8>)
 8003e84:	0052      	lsls	r2, r2, #1
 8003e86:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <answer2CPU+0x8cc>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	4013      	ands	r3, r2
 8003e92:	d0fa      	beq.n	8003e8a <answer2CPU+0x85a>
				USART2->TDR = ans[0]|0x0100;
 8003e94:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <answer2CPU+0x8c8>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	2280      	movs	r2, #128	; 0x80
 8003e9a:	0052      	lsls	r2, r2, #1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <answer2CPU+0x8cc>)
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003ea4:	e014      	b.n	8003ed0 <answer2CPU+0x8a0>
				{
				  i++;
 8003ea6:	210e      	movs	r1, #14
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	3201      	adds	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <answer2CPU+0x8cc>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d0fa      	beq.n	8003eb4 <answer2CPU+0x884>
				  USART2->TDR = (uint8_t)ans[i];
 8003ebe:	230e      	movs	r3, #14
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	781a      	ldrb	r2, [r3, #0]
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <answer2CPU+0x8c8>)
 8003ec6:	0052      	lsls	r2, r2, #1
 8003ec8:	5ad3      	ldrh	r3, [r2, r3]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <answer2CPU+0x8cc>)
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8003ed0:	230e      	movs	r3, #14
 8003ed2:	18fb      	adds	r3, r7, r3
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <answer2CPU+0x8c8>)
 8003ed8:	0052      	lsls	r2, r2, #1
 8003eda:	5ad3      	ldrh	r3, [r2, r3]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e2      	bne.n	8003ea6 <answer2CPU+0x876>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <answer2CPU+0x8cc>)
 8003ee2:	6a1a      	ldr	r2, [r3, #32]
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <answer2CPU+0x8cc>)
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	20000410 	.word	0x20000410
 8003efc:	40004400 	.word	0x40004400
 8003f00:	200003d8 	.word	0x200003d8
 8003f04:	200003cd 	.word	0x200003cd

08003f08 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f003 f944 	bl	800719c <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8003f14:	4b28      	ldr	r3, [pc, #160]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f1a:	4928      	ldr	r1, [pc, #160]	; (8003fbc <MEM_Reset+0xb4>)
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8003f20:	1dfb      	adds	r3, r7, #7
 8003f22:	2266      	movs	r2, #102	; 0x66
 8003f24:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003f26:	1df9      	adds	r1, r7, #7
 8003f28:	4825      	ldr	r0, [pc, #148]	; (8003fc0 <MEM_Reset+0xb8>)
 8003f2a:	2305      	movs	r3, #5
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f007 f941 	bl	800b1b4 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8003f32:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f34:	695a      	ldr	r2, [r3, #20]
 8003f36:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	0089      	lsls	r1, r1, #2
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8003f40:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003f42:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003f44:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8003f46:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8003f48:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8003f4a:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f52:	491a      	ldr	r1, [pc, #104]	; (8003fbc <MEM_Reset+0xb4>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	2299      	movs	r2, #153	; 0x99
 8003f5c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8003f5e:	1df9      	adds	r1, r7, #7
 8003f60:	4817      	ldr	r0, [pc, #92]	; (8003fc0 <MEM_Reset+0xb8>)
 8003f62:	2305      	movs	r3, #5
 8003f64:	2201      	movs	r2, #1
 8003f66:	f007 f925 	bl	800b1b4 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	0089      	lsls	r1, r1, #2
 8003f74:	430a      	orrs	r2, r1
 8003f76:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f003 f90f 	bl	800719c <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	22b7      	movs	r2, #183	; 0xb7
 8003f82:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f8a:	490c      	ldr	r1, [pc, #48]	; (8003fbc <MEM_Reset+0xb4>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8003f90:	1df9      	adds	r1, r7, #7
 8003f92:	480b      	ldr	r0, [pc, #44]	; (8003fc0 <MEM_Reset+0xb8>)
 8003f94:	2305      	movs	r3, #5
 8003f96:	2201      	movs	r2, #1
 8003f98:	f007 f90c 	bl	800b1b4 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <MEM_Reset+0xb0>)
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	4b05      	ldr	r3, [pc, #20]	; (8003fb8 <MEM_Reset+0xb0>)
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	0089      	lsls	r1, r1, #2
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8003faa:	2001      	movs	r0, #1
 8003fac:	f003 f8f6 	bl	800719c <HAL_Delay>
	}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	50000400 	.word	0x50000400
 8003fbc:	fffffdff 	.word	0xfffffdff
 8003fc0:	200001a4 	.word	0x200001a4

08003fc4 <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	4c42      	ldr	r4, [pc, #264]	; (80040d0 <weoShowFullScreen+0x10c>)
 8003fc8:	44a5      	add	sp, r4
 8003fca:	af02      	add	r7, sp, #8
 8003fcc:	0002      	movs	r2, r0
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <weoShowFullScreen+0x110>)
 8003fd0:	4941      	ldr	r1, [pc, #260]	; (80040d8 <weoShowFullScreen+0x114>)
 8003fd2:	185b      	adds	r3, r3, r1
 8003fd4:	19db      	adds	r3, r3, r7
 8003fd6:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8003fd8:	4c40      	ldr	r4, [pc, #256]	; (80040dc <weoShowFullScreen+0x118>)
 8003fda:	193b      	adds	r3, r7, r4
 8003fdc:	2213      	movs	r2, #19
 8003fde:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8003fe0:	4b3c      	ldr	r3, [pc, #240]	; (80040d4 <weoShowFullScreen+0x110>)
 8003fe2:	185b      	adds	r3, r3, r1
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	035b      	lsls	r3, r3, #13
 8003fea:	483d      	ldr	r0, [pc, #244]	; (80040e0 <weoShowFullScreen+0x11c>)
 8003fec:	183a      	adds	r2, r7, r0
 8003fee:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8003ff0:	183b      	adds	r3, r7, r0
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <weoShowFullScreen+0x120>)
 8003ff8:	185b      	adds	r3, r3, r1
 8003ffa:	19db      	adds	r3, r3, r7
 8003ffc:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8003ffe:	183b      	adds	r3, r7, r0
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b37      	ldr	r3, [pc, #220]	; (80040e4 <weoShowFullScreen+0x120>)
 8004008:	185b      	adds	r3, r3, r1
 800400a:	19db      	adds	r3, r3, r7
 800400c:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800400e:	183b      	adds	r3, r7, r0
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4b33      	ldr	r3, [pc, #204]	; (80040e4 <weoShowFullScreen+0x120>)
 8004018:	185b      	adds	r3, r3, r1
 800401a:	19db      	adds	r3, r3, r7
 800401c:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800401e:	183b      	adds	r3, r7, r0
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	0e1b      	lsrs	r3, r3, #24
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4b2f      	ldr	r3, [pc, #188]	; (80040e4 <weoShowFullScreen+0x120>)
 8004028:	185b      	adds	r3, r3, r1
 800402a:	19db      	adds	r3, r3, r7
 800402c:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 800402e:	4b2e      	ldr	r3, [pc, #184]	; (80040e8 <weoShowFullScreen+0x124>)
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	4b2d      	ldr	r3, [pc, #180]	; (80040e8 <weoShowFullScreen+0x124>)
 8004034:	492d      	ldr	r1, [pc, #180]	; (80040ec <weoShowFullScreen+0x128>)
 8004036:	400a      	ands	r2, r1
 8004038:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800403a:	1939      	adds	r1, r7, r4
 800403c:	482c      	ldr	r0, [pc, #176]	; (80040f0 <weoShowFullScreen+0x12c>)
 800403e:	2332      	movs	r3, #50	; 0x32
 8004040:	2201      	movs	r2, #1
 8004042:	f007 f8b7 	bl	800b1b4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8004046:	2408      	movs	r4, #8
 8004048:	193b      	adds	r3, r7, r4
 800404a:	1cd9      	adds	r1, r3, #3
 800404c:	4828      	ldr	r0, [pc, #160]	; (80040f0 <weoShowFullScreen+0x12c>)
 800404e:	2332      	movs	r3, #50	; 0x32
 8004050:	2201      	movs	r2, #1
 8004052:	f007 f8af 	bl	800b1b4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8004056:	193b      	adds	r3, r7, r4
 8004058:	1c99      	adds	r1, r3, #2
 800405a:	4825      	ldr	r0, [pc, #148]	; (80040f0 <weoShowFullScreen+0x12c>)
 800405c:	2332      	movs	r3, #50	; 0x32
 800405e:	2201      	movs	r2, #1
 8004060:	f007 f8a8 	bl	800b1b4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8004064:	193b      	adds	r3, r7, r4
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	4821      	ldr	r0, [pc, #132]	; (80040f0 <weoShowFullScreen+0x12c>)
 800406a:	2332      	movs	r3, #50	; 0x32
 800406c:	2201      	movs	r2, #1
 800406e:	f007 f8a1 	bl	800b1b4 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8004072:	1939      	adds	r1, r7, r4
 8004074:	481e      	ldr	r0, [pc, #120]	; (80040f0 <weoShowFullScreen+0x12c>)
 8004076:	2332      	movs	r3, #50	; 0x32
 8004078:	2201      	movs	r2, #1
 800407a:	f007 f89b 	bl	800b1b4 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 800407e:	4c1d      	ldr	r4, [pc, #116]	; (80040f4 <weoShowFullScreen+0x130>)
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	2510      	movs	r5, #16
 8004086:	1979      	adds	r1, r7, r5
 8004088:	4819      	ldr	r0, [pc, #100]	; (80040f0 <weoShowFullScreen+0x12c>)
 800408a:	0023      	movs	r3, r4
 800408c:	f007 f9ea 	bl	800b464 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8004090:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <weoShowFullScreen+0x124>)
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <weoShowFullScreen+0x124>)
 8004096:	2180      	movs	r1, #128	; 0x80
 8004098:	0089      	lsls	r1, r1, #2
 800409a:	430a      	orrs	r2, r1
 800409c:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 800409e:	197b      	adds	r3, r7, r5
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	23ff      	movs	r3, #255	; 0xff
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	237f      	movs	r3, #127	; 0x7f
 80040a8:	227f      	movs	r2, #127	; 0x7f
 80040aa:	2100      	movs	r1, #0
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7ff f90f 	bl	80032d0 <weoDrawRectangleFilled>
		cmd2Execute=0;
 80040b2:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <weoShowFullScreen+0x134>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <weoShowFullScreen+0x138>)
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <weoShowFullScreen+0x138>)
 80040be:	2140      	movs	r1, #64	; 0x40
 80040c0:	430a      	orrs	r2, r1
 80040c2:	615a      	str	r2, [r3, #20]
	}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <weoShowFullScreen+0x114>)
 80040cc:	449d      	add	sp, r3
 80040ce:	bdb0      	pop	{r4, r5, r7, pc}
 80040d0:	ffffdfe0 	.word	0xffffdfe0
 80040d4:	ffffdfef 	.word	0xffffdfef
 80040d8:	00002018 	.word	0x00002018
 80040dc:	00002013 	.word	0x00002013
 80040e0:	00002014 	.word	0x00002014
 80040e4:	ffffdff0 	.word	0xffffdff0
 80040e8:	50000400 	.word	0x50000400
 80040ec:	fffffdff 	.word	0xfffffdff
 80040f0:	200001a4 	.word	0x200001a4
 80040f4:	00001388 	.word	0x00001388
 80040f8:	2000042a 	.word	0x2000042a
 80040fc:	50000800 	.word	0x50000800

08004100 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8004100:	b5b0      	push	{r4, r5, r7, lr}
 8004102:	4ca6      	ldr	r4, [pc, #664]	; (800439c <weoShowSmallImage+0x29c>)
 8004104:	44a5      	add	sp, r4
 8004106:	af02      	add	r7, sp, #8
 8004108:	0004      	movs	r4, r0
 800410a:	0008      	movs	r0, r1
 800410c:	0011      	movs	r1, r2
 800410e:	4ba4      	ldr	r3, [pc, #656]	; (80043a0 <weoShowSmallImage+0x2a0>)
 8004110:	4da4      	ldr	r5, [pc, #656]	; (80043a4 <weoShowSmallImage+0x2a4>)
 8004112:	195b      	adds	r3, r3, r5
 8004114:	19db      	adds	r3, r3, r7
 8004116:	1c22      	adds	r2, r4, #0
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	4ba3      	ldr	r3, [pc, #652]	; (80043a8 <weoShowSmallImage+0x2a8>)
 800411c:	002c      	movs	r4, r5
 800411e:	191b      	adds	r3, r3, r4
 8004120:	19db      	adds	r3, r3, r7
 8004122:	1c02      	adds	r2, r0, #0
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	4ba1      	ldr	r3, [pc, #644]	; (80043ac <weoShowSmallImage+0x2ac>)
 8004128:	0020      	movs	r0, r4
 800412a:	181b      	adds	r3, r3, r0
 800412c:	19db      	adds	r3, r3, r7
 800412e:	1c0a      	adds	r2, r1, #0
 8004130:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 8004132:	2300      	movs	r3, #0
 8004134:	4c9e      	ldr	r4, [pc, #632]	; (80043b0 <weoShowSmallImage+0x2b0>)
 8004136:	193a      	adds	r2, r7, r4
 8004138:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 800413a:	4d9e      	ldr	r5, [pc, #632]	; (80043b4 <weoShowSmallImage+0x2b4>)
 800413c:	197b      	adds	r3, r7, r5
 800413e:	2213      	movs	r2, #19
 8004140:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 8004142:	4b97      	ldr	r3, [pc, #604]	; (80043a0 <weoShowSmallImage+0x2a0>)
 8004144:	0001      	movs	r1, r0
 8004146:	185b      	adds	r3, r3, r1
 8004148:	19db      	adds	r3, r3, r7
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	33ff      	adds	r3, #255	; 0xff
 8004150:	035b      	lsls	r3, r3, #13
 8004152:	0020      	movs	r0, r4
 8004154:	183a      	adds	r2, r7, r0
 8004156:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8004158:	183b      	adds	r3, r7, r0
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b96      	ldr	r3, [pc, #600]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004160:	000c      	movs	r4, r1
 8004162:	191b      	adds	r3, r3, r4
 8004164:	19db      	adds	r3, r3, r7
 8004166:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8004168:	0001      	movs	r1, r0
 800416a:	187b      	adds	r3, r7, r1
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b91      	ldr	r3, [pc, #580]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004174:	191b      	adds	r3, r3, r4
 8004176:	19db      	adds	r3, r3, r7
 8004178:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800417a:	187b      	adds	r3, r7, r1
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	0c1b      	lsrs	r3, r3, #16
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4b8d      	ldr	r3, [pc, #564]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004184:	191b      	adds	r3, r3, r4
 8004186:	19db      	adds	r3, r3, r7
 8004188:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800418a:	187b      	adds	r3, r7, r1
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0e1b      	lsrs	r3, r3, #24
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4b89      	ldr	r3, [pc, #548]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004194:	191b      	adds	r3, r3, r4
 8004196:	19db      	adds	r3, r3, r7
 8004198:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 800419a:	4b88      	ldr	r3, [pc, #544]	; (80043bc <weoShowSmallImage+0x2bc>)
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	4b87      	ldr	r3, [pc, #540]	; (80043bc <weoShowSmallImage+0x2bc>)
 80041a0:	4987      	ldr	r1, [pc, #540]	; (80043c0 <weoShowSmallImage+0x2c0>)
 80041a2:	400a      	ands	r2, r1
 80041a4:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80041a6:	1979      	adds	r1, r7, r5
 80041a8:	4886      	ldr	r0, [pc, #536]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80041aa:	2332      	movs	r3, #50	; 0x32
 80041ac:	2201      	movs	r2, #1
 80041ae:	f007 f801 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80041b2:	2508      	movs	r5, #8
 80041b4:	197b      	adds	r3, r7, r5
 80041b6:	1cd9      	adds	r1, r3, #3
 80041b8:	4882      	ldr	r0, [pc, #520]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80041ba:	2332      	movs	r3, #50	; 0x32
 80041bc:	2201      	movs	r2, #1
 80041be:	f006 fff9 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80041c2:	197b      	adds	r3, r7, r5
 80041c4:	1c99      	adds	r1, r3, #2
 80041c6:	487f      	ldr	r0, [pc, #508]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80041c8:	2332      	movs	r3, #50	; 0x32
 80041ca:	2201      	movs	r2, #1
 80041cc:	f006 fff2 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80041d0:	197b      	adds	r3, r7, r5
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	487b      	ldr	r0, [pc, #492]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80041d6:	2332      	movs	r3, #50	; 0x32
 80041d8:	2201      	movs	r2, #1
 80041da:	f006 ffeb 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80041de:	1979      	adds	r1, r7, r5
 80041e0:	4878      	ldr	r0, [pc, #480]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80041e2:	2332      	movs	r3, #50	; 0x32
 80041e4:	2201      	movs	r2, #1
 80041e6:	f006 ffe5 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80041ea:	4b77      	ldr	r3, [pc, #476]	; (80043c8 <weoShowSmallImage+0x2c8>)
 80041ec:	220c      	movs	r2, #12
 80041ee:	18b9      	adds	r1, r7, r2
 80041f0:	4874      	ldr	r0, [pc, #464]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80041f2:	2202      	movs	r2, #2
 80041f4:	f007 f936 	bl	800b464 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80041f8:	4b70      	ldr	r3, [pc, #448]	; (80043bc <weoShowSmallImage+0x2bc>)
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	4b6f      	ldr	r3, [pc, #444]	; (80043bc <weoShowSmallImage+0x2bc>)
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	0089      	lsls	r1, r1, #2
 8004202:	430a      	orrs	r2, r1
 8004204:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 8004206:	4971      	ldr	r1, [pc, #452]	; (80043cc <weoShowSmallImage+0x2cc>)
 8004208:	187b      	adds	r3, r7, r1
 800420a:	4a71      	ldr	r2, [pc, #452]	; (80043d0 <weoShowSmallImage+0x2d0>)
 800420c:	1912      	adds	r2, r2, r4
 800420e:	19d2      	adds	r2, r2, r7
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8004214:	486f      	ldr	r0, [pc, #444]	; (80043d4 <weoShowSmallImage+0x2d4>)
 8004216:	183b      	adds	r3, r7, r0
 8004218:	4a6d      	ldr	r2, [pc, #436]	; (80043d0 <weoShowSmallImage+0x2d0>)
 800421a:	1912      	adds	r2, r2, r4
 800421c:	19d2      	adds	r2, r2, r7
 800421e:	7852      	ldrb	r2, [r2, #1]
 8004220:	701a      	strb	r2, [r3, #0]

		len=width*height/2+0;
 8004222:	187b      	adds	r3, r7, r1
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	183a      	adds	r2, r7, r0
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	4353      	muls	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	da00      	bge.n	8004232 <weoShowSmallImage+0x132>
 8004230:	3301      	adds	r3, #1
 8004232:	105b      	asrs	r3, r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	4b68      	ldr	r3, [pc, #416]	; (80043d8 <weoShowSmallImage+0x2d8>)
 8004238:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 800423a:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <weoShowSmallImage+0x2b0>)
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3302      	adds	r3, #2
 8004242:	4966      	ldr	r1, [pc, #408]	; (80043dc <weoShowSmallImage+0x2dc>)
 8004244:	187a      	adds	r2, r7, r1
 8004246:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8004248:	187b      	adds	r3, r7, r1
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4b5a      	ldr	r3, [pc, #360]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004250:	4c54      	ldr	r4, [pc, #336]	; (80043a4 <weoShowSmallImage+0x2a4>)
 8004252:	191b      	adds	r3, r3, r4
 8004254:	19db      	adds	r3, r3, r7
 8004256:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8004258:	187b      	adds	r3, r7, r1
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	b2da      	uxtb	r2, r3
 8004260:	4b55      	ldr	r3, [pc, #340]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004262:	191b      	adds	r3, r3, r4
 8004264:	19db      	adds	r3, r3, r7
 8004266:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8004268:	187b      	adds	r3, r7, r1
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2da      	uxtb	r2, r3
 8004270:	4b51      	ldr	r3, [pc, #324]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004272:	191b      	adds	r3, r3, r4
 8004274:	19db      	adds	r3, r3, r7
 8004276:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8004278:	187b      	adds	r3, r7, r1
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e1b      	lsrs	r3, r3, #24
 800427e:	b2da      	uxtb	r2, r3
 8004280:	4b4d      	ldr	r3, [pc, #308]	; (80043b8 <weoShowSmallImage+0x2b8>)
 8004282:	191b      	adds	r3, r3, r4
 8004284:	19db      	adds	r3, r3, r7
 8004286:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8004288:	4b55      	ldr	r3, [pc, #340]	; (80043e0 <weoShowSmallImage+0x2e0>)
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	4b54      	ldr	r3, [pc, #336]	; (80043e0 <weoShowSmallImage+0x2e0>)
 800428e:	2108      	movs	r1, #8
 8004290:	430a      	orrs	r2, r1
 8004292:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8004294:	4847      	ldr	r0, [pc, #284]	; (80043b4 <weoShowSmallImage+0x2b4>)
 8004296:	183b      	adds	r3, r7, r0
 8004298:	2213      	movs	r2, #19
 800429a:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 800429c:	4b47      	ldr	r3, [pc, #284]	; (80043bc <weoShowSmallImage+0x2bc>)
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	4b46      	ldr	r3, [pc, #280]	; (80043bc <weoShowSmallImage+0x2bc>)
 80042a2:	4947      	ldr	r1, [pc, #284]	; (80043c0 <weoShowSmallImage+0x2c0>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80042a8:	1839      	adds	r1, r7, r0
 80042aa:	4846      	ldr	r0, [pc, #280]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80042ac:	2332      	movs	r3, #50	; 0x32
 80042ae:	2201      	movs	r2, #1
 80042b0:	f006 ff80 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80042b4:	2508      	movs	r5, #8
 80042b6:	197b      	adds	r3, r7, r5
 80042b8:	1cd9      	adds	r1, r3, #3
 80042ba:	4842      	ldr	r0, [pc, #264]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80042bc:	2332      	movs	r3, #50	; 0x32
 80042be:	2201      	movs	r2, #1
 80042c0:	f006 ff78 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80042c4:	197b      	adds	r3, r7, r5
 80042c6:	1c99      	adds	r1, r3, #2
 80042c8:	483e      	ldr	r0, [pc, #248]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80042ca:	2332      	movs	r3, #50	; 0x32
 80042cc:	2201      	movs	r2, #1
 80042ce:	f006 ff71 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80042d2:	197b      	adds	r3, r7, r5
 80042d4:	1c59      	adds	r1, r3, #1
 80042d6:	483b      	ldr	r0, [pc, #236]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80042d8:	2332      	movs	r3, #50	; 0x32
 80042da:	2201      	movs	r2, #1
 80042dc:	f006 ff6a 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80042e0:	1979      	adds	r1, r7, r5
 80042e2:	4838      	ldr	r0, [pc, #224]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80042e4:	2332      	movs	r3, #50	; 0x32
 80042e6:	2201      	movs	r2, #1
 80042e8:	f006 ff64 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80042ec:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <weoShowSmallImage+0x2d8>)
 80042ee:	881a      	ldrh	r2, [r3, #0]
 80042f0:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <weoShowSmallImage+0x2c8>)
 80042f2:	2110      	movs	r1, #16
 80042f4:	1879      	adds	r1, r7, r1
 80042f6:	4833      	ldr	r0, [pc, #204]	; (80043c4 <weoShowSmallImage+0x2c4>)
 80042f8:	f007 f8b4 	bl	800b464 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80042fc:	4b2f      	ldr	r3, [pc, #188]	; (80043bc <weoShowSmallImage+0x2bc>)
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	4b2e      	ldr	r3, [pc, #184]	; (80043bc <weoShowSmallImage+0x2bc>)
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	0089      	lsls	r1, r1, #2
 8004306:	430a      	orrs	r2, r1
 8004308:	615a      	str	r2, [r3, #20]

		decY=0x01;
 800430a:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <weoShowSmallImage+0x2e4>)
 800430c:	2201      	movs	r2, #1
 800430e:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 8004310:	4b26      	ldr	r3, [pc, #152]	; (80043ac <weoShowSmallImage+0x2ac>)
 8004312:	191b      	adds	r3, r3, r4
 8004314:	19db      	adds	r3, r3, r7
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <weoShowSmallImage+0x228>
			decY=0x02;
 8004322:	4b30      	ldr	r3, [pc, #192]	; (80043e4 <weoShowSmallImage+0x2e4>)
 8004324:	2202      	movs	r2, #2
 8004326:	701a      	strb	r2, [r3, #0]
		}
//		imX = 128-imX-width;
//		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);//classic	// Здесь ещё работает 0xFF - затычка
		weoDrawRectangleFilled(imX, imY, (imX+width-1), imY+height-decY, 0xFF,MEM_Buffer);
 8004328:	4b1f      	ldr	r3, [pc, #124]	; (80043a8 <weoShowSmallImage+0x2a8>)
 800432a:	491e      	ldr	r1, [pc, #120]	; (80043a4 <weoShowSmallImage+0x2a4>)
 800432c:	185b      	adds	r3, r3, r1
 800432e:	19da      	adds	r2, r3, r7
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <weoShowSmallImage+0x2cc>)
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	7812      	ldrb	r2, [r2, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b2dc      	uxtb	r4, r3
 8004340:	4b1a      	ldr	r3, [pc, #104]	; (80043ac <weoShowSmallImage+0x2ac>)
 8004342:	185b      	adds	r3, r3, r1
 8004344:	19da      	adds	r2, r3, r7
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <weoShowSmallImage+0x2d4>)
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	7812      	ldrb	r2, [r2, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <weoShowSmallImage+0x2e4>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4b14      	ldr	r3, [pc, #80]	; (80043ac <weoShowSmallImage+0x2ac>)
 800435c:	0008      	movs	r0, r1
 800435e:	185b      	adds	r3, r3, r1
 8004360:	19db      	adds	r3, r3, r7
 8004362:	7819      	ldrb	r1, [r3, #0]
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <weoShowSmallImage+0x2a8>)
 8004366:	181b      	adds	r3, r3, r0
 8004368:	19db      	adds	r3, r3, r7
 800436a:	7818      	ldrb	r0, [r3, #0]
 800436c:	2310      	movs	r3, #16
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	9301      	str	r3, [sp, #4]
 8004372:	23ff      	movs	r3, #255	; 0xff
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	0013      	movs	r3, r2
 8004378:	0022      	movs	r2, r4
 800437a:	f7fe ffa9 	bl	80032d0 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <weoShowSmallImage+0x2e8>)
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <weoShowSmallImage+0x2ec>)
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <weoShowSmallImage+0x2ec>)
 800438a:	2140      	movs	r1, #64	; 0x40
 800438c:	430a      	orrs	r2, r1
 800438e:	615a      	str	r2, [r3, #20]
	}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <weoShowSmallImage+0x2a4>)
 8004398:	449d      	add	sp, r3
 800439a:	bdb0      	pop	{r4, r5, r7, pc}
 800439c:	ffffdfd8 	.word	0xffffdfd8
 80043a0:	ffffdfe7 	.word	0xffffdfe7
 80043a4:	00002020 	.word	0x00002020
 80043a8:	ffffdfe6 	.word	0xffffdfe6
 80043ac:	ffffdfe5 	.word	0xffffdfe5
 80043b0:	0000201c 	.word	0x0000201c
 80043b4:	00002013 	.word	0x00002013
 80043b8:	ffffdfe8 	.word	0xffffdfe8
 80043bc:	50000400 	.word	0x50000400
 80043c0:	fffffdff 	.word	0xfffffdff
 80043c4:	200001a4 	.word	0x200001a4
 80043c8:	00001388 	.word	0x00001388
 80043cc:	0000201b 	.word	0x0000201b
 80043d0:	ffffdfec 	.word	0xffffdfec
 80043d4:	0000201a 	.word	0x0000201a
 80043d8:	2000042e 	.word	0x2000042e
 80043dc:	00002014 	.word	0x00002014
 80043e0:	40004400 	.word	0x40004400
 80043e4:	20000430 	.word	0x20000430
 80043e8:	2000042a 	.word	0x2000042a
 80043ec:	50000800 	.word	0x50000800

080043f0 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <MEM_GetID+0xb0>)
 80043fa:	7812      	ldrb	r2, [r2, #0]
 80043fc:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80043fe:	1dfb      	adds	r3, r7, #7
 8004400:	229e      	movs	r2, #158	; 0x9e
 8004402:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8004404:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <MEM_GetID+0xb4>)
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <MEM_GetID+0xb4>)
 800440a:	4927      	ldr	r1, [pc, #156]	; (80044a8 <MEM_GetID+0xb8>)
 800440c:	400a      	ands	r2, r1
 800440e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8004410:	1df9      	adds	r1, r7, #7
 8004412:	4826      	ldr	r0, [pc, #152]	; (80044ac <MEM_GetID+0xbc>)
 8004414:	2332      	movs	r3, #50	; 0x32
 8004416:	2201      	movs	r2, #1
 8004418:	f006 fecc 	bl	800b1b4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800441c:	23fa      	movs	r3, #250	; 0xfa
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	1d39      	adds	r1, r7, #4
 8004422:	4822      	ldr	r0, [pc, #136]	; (80044ac <MEM_GetID+0xbc>)
 8004424:	2201      	movs	r2, #1
 8004426:	f007 f81d 	bl	800b464 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	001a      	movs	r2, r3
 8004430:	4b1f      	ldr	r3, [pc, #124]	; (80044b0 <MEM_GetID+0xc0>)
 8004432:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8004434:	4b1e      	ldr	r3, [pc, #120]	; (80044b0 <MEM_GetID+0xc0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <MEM_GetID+0xc0>)
 800443c:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800443e:	23fa      	movs	r3, #250	; 0xfa
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	1d39      	adds	r1, r7, #4
 8004444:	4819      	ldr	r0, [pc, #100]	; (80044ac <MEM_GetID+0xbc>)
 8004446:	2201      	movs	r2, #1
 8004448:	f007 f80c 	bl	800b464 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800444c:	1d3b      	adds	r3, r7, #4
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	001a      	movs	r2, r3
 8004452:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <MEM_GetID+0xc0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	18d2      	adds	r2, r2, r3
 8004458:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <MEM_GetID+0xc0>)
 800445a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <MEM_GetID+0xc0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <MEM_GetID+0xc0>)
 8004464:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8004466:	23fa      	movs	r3, #250	; 0xfa
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	1d39      	adds	r1, r7, #4
 800446c:	480f      	ldr	r0, [pc, #60]	; (80044ac <MEM_GetID+0xbc>)
 800446e:	2201      	movs	r2, #1
 8004470:	f006 fff8 	bl	800b464 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8004474:	1d3b      	adds	r3, r7, #4
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	001a      	movs	r2, r3
 800447a:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <MEM_GetID+0xc0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	18d2      	adds	r2, r2, r3
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <MEM_GetID+0xc0>)
 8004482:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <MEM_GetID+0xb4>)
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <MEM_GetID+0xb4>)
 800448a:	2180      	movs	r1, #128	; 0x80
 800448c:	0089      	lsls	r1, r1, #2
 800448e:	430a      	orrs	r2, r1
 8004490:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <MEM_GetID+0xc0>)
 8004494:	681b      	ldr	r3, [r3, #0]
	}
 8004496:	0018      	movs	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	b002      	add	sp, #8
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	0800f7a8 	.word	0x0800f7a8
 80044a4:	50000400 	.word	0x50000400
 80044a8:	fffffdff 	.word	0xfffffdff
 80044ac:	200001a4 	.word	0x200001a4
 80044b0:	200003f0 	.word	0x200003f0

080044b4 <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	0002      	movs	r2, r0
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80044c0:	4b84      	ldr	r3, [pc, #528]	; (80046d4 <cmdExecute+0x220>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d100      	bne.n	80044ca <cmdExecute+0x16>
 80044c8:	e0fb      	b.n	80046c2 <cmdExecute+0x20e>
		if(soundReady==0){return;}
 80044ca:	4b83      	ldr	r3, [pc, #524]	; (80046d8 <cmdExecute+0x224>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d100      	bne.n	80044d4 <cmdExecute+0x20>
 80044d2:	e0f8      	b.n	80046c6 <cmdExecute+0x212>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 80044d4:	4b81      	ldr	r3, [pc, #516]	; (80046dc <cmdExecute+0x228>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d000      	beq.n	80044de <cmdExecute+0x2a>
 80044dc:	e0f5      	b.n	80046ca <cmdExecute+0x216>
		USART2->ICR|=USART_ICR_ORECF;
 80044de:	4b80      	ldr	r3, [pc, #512]	; (80046e0 <cmdExecute+0x22c>)
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <cmdExecute+0x22c>)
 80044e4:	2108      	movs	r1, #8
 80044e6:	430a      	orrs	r2, r1
 80044e8:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b11      	cmp	r3, #17
 80044f0:	d113      	bne.n	800451a <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 80044f2:	4b7c      	ldr	r3, [pc, #496]	; (80046e4 <cmdExecute+0x230>)
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <cmdExecute+0x230>)
 80044f8:	2140      	movs	r1, #64	; 0x40
 80044fa:	438a      	bics	r2, r1
 80044fc:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 80044fe:	4b77      	ldr	r3, [pc, #476]	; (80046dc <cmdExecute+0x228>)
 8004500:	2211      	movs	r2, #17
 8004502:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8004504:	4b78      	ldr	r3, [pc, #480]	; (80046e8 <cmdExecute+0x234>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	0018      	movs	r0, r3
 800450a:	f7ff fd5b 	bl	8003fc4 <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 800450e:	4b74      	ldr	r3, [pc, #464]	; (80046e0 <cmdExecute+0x22c>)
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	4b73      	ldr	r3, [pc, #460]	; (80046e0 <cmdExecute+0x22c>)
 8004514:	2108      	movs	r1, #8
 8004516:	430a      	orrs	r2, r1
 8004518:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 800451a:	1dfb      	adds	r3, r7, #7
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b12      	cmp	r3, #18
 8004520:	d10d      	bne.n	800453e <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8004522:	4b6e      	ldr	r3, [pc, #440]	; (80046dc <cmdExecute+0x228>)
 8004524:	2212      	movs	r2, #18
 8004526:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8004528:	4b6f      	ldr	r3, [pc, #444]	; (80046e8 <cmdExecute+0x234>)
 800452a:	7818      	ldrb	r0, [r3, #0]
 800452c:	4b6f      	ldr	r3, [pc, #444]	; (80046ec <cmdExecute+0x238>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	b2d9      	uxtb	r1, r3
 8004532:	4b6f      	ldr	r3, [pc, #444]	; (80046f0 <cmdExecute+0x23c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	001a      	movs	r2, r3
 800453a:	f7ff fde1 	bl	8004100 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 800453e:	1dfb      	adds	r3, r7, #7
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b13      	cmp	r3, #19
 8004544:	d111      	bne.n	800456a <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <cmdExecute+0x228>)
 8004548:	2213      	movs	r2, #19
 800454a:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 800454c:	4b67      	ldr	r3, [pc, #412]	; (80046ec <cmdExecute+0x238>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2d8      	uxtb	r0, r3
 8004552:	4b67      	ldr	r3, [pc, #412]	; (80046f0 <cmdExecute+0x23c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	b2d9      	uxtb	r1, r3
 8004558:	4b66      	ldr	r3, [pc, #408]	; (80046f4 <cmdExecute+0x240>)
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	4b66      	ldr	r3, [pc, #408]	; (80046f8 <cmdExecute+0x244>)
 800455e:	781c      	ldrb	r4, [r3, #0]
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <cmdExecute+0x248>)
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	0023      	movs	r3, r4
 8004566:	f000 f8d3 	bl	8004710 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 800456a:	1dfb      	adds	r3, r7, #7
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b14      	cmp	r3, #20
 8004570:	d13e      	bne.n	80045f0 <cmdExecute+0x13c>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8004572:	4b5a      	ldr	r3, [pc, #360]	; (80046dc <cmdExecute+0x228>)
 8004574:	2214      	movs	r2, #20
 8004576:	701a      	strb	r2, [r3, #0]
			if(numSound==0x01){
 8004578:	4b61      	ldr	r3, [pc, #388]	; (8004700 <cmdExecute+0x24c>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d116      	bne.n	80045ae <cmdExecute+0xfa>
				if(soundReady!=0){
 8004580:	4b55      	ldr	r3, [pc, #340]	; (80046d8 <cmdExecute+0x224>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <cmdExecute+0xfa>
				soundReady=0;
 8004588:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <cmdExecute+0x224>)
 800458a:	2200      	movs	r2, #0
 800458c:	701a      	strb	r2, [r3, #0]
				USART2->ICR|=USART_ICR_ORECF;
 800458e:	4b54      	ldr	r3, [pc, #336]	; (80046e0 <cmdExecute+0x22c>)
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <cmdExecute+0x22c>)
 8004594:	2108      	movs	r1, #8
 8004596:	430a      	orrs	r2, r1
 8004598:	621a      	str	r2, [r3, #32]
				squeak_single(signal);
 800459a:	4b5a      	ldr	r3, [pc, #360]	; (8004704 <cmdExecute+0x250>)
 800459c:	0018      	movs	r0, r3
 800459e:	f001 ff71 	bl	8006484 <squeak_single>
				USART2->ICR|=USART_ICR_ORECF;
 80045a2:	4b4f      	ldr	r3, [pc, #316]	; (80046e0 <cmdExecute+0x22c>)
 80045a4:	6a1a      	ldr	r2, [r3, #32]
 80045a6:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <cmdExecute+0x22c>)
 80045a8:	2108      	movs	r1, #8
 80045aa:	430a      	orrs	r2, r1
 80045ac:	621a      	str	r2, [r3, #32]
				}
			}
			if(numSound==0x02){
 80045ae:	4b54      	ldr	r3, [pc, #336]	; (8004700 <cmdExecute+0x24c>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d103      	bne.n	80045be <cmdExecute+0x10a>
//				soundReady=0;
				squeak_double(signal);
 80045b6:	4b53      	ldr	r3, [pc, #332]	; (8004704 <cmdExecute+0x250>)
 80045b8:	0018      	movs	r0, r3
 80045ba:	f002 f81d 	bl	80065f8 <squeak_double>
			}
			if(numSound==0x03){
 80045be:	4b50      	ldr	r3, [pc, #320]	; (8004700 <cmdExecute+0x24c>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d103      	bne.n	80045ce <cmdExecute+0x11a>
//				soundReady=0;
				squeak_triple(signal);
 80045c6:	4b4f      	ldr	r3, [pc, #316]	; (8004704 <cmdExecute+0x250>)
 80045c8:	0018      	movs	r0, r3
 80045ca:	f002 f84b 	bl	8006664 <squeak_triple>
				}
			if(numSound==0x04){
 80045ce:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <cmdExecute+0x24c>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d103      	bne.n	80045de <cmdExecute+0x12a>
//				soundReady=0;
				squeak_long(signal);
 80045d6:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <cmdExecute+0x250>)
 80045d8:	0018      	movs	r0, r3
 80045da:	f001 ff93 	bl	8006504 <squeak_long>
				}
//			if(numSound!=1){
//			HAL_Delay(500);
//			}
			cmd2Execute=0;
 80045de:	1dfb      	adds	r3, r7, #7
 80045e0:	2200      	movs	r2, #0
 80045e2:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 80045e4:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <cmdExecute+0x230>)
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	4b3e      	ldr	r3, [pc, #248]	; (80046e4 <cmdExecute+0x230>)
 80045ea:	2140      	movs	r1, #64	; 0x40
 80045ec:	430a      	orrs	r2, r1
 80045ee:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 80045f0:	1dfb      	adds	r3, r7, #7
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b15      	cmp	r3, #21
 80045f6:	d153      	bne.n	80046a0 <cmdExecute+0x1ec>
			bf4me=0x15;	//set BF flag 4 me
 80045f8:	4b38      	ldr	r3, [pc, #224]	; (80046dc <cmdExecute+0x228>)
 80045fa:	2215      	movs	r2, #21
 80045fc:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fe ff4c 	bl	800349c <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8004604:	4b40      	ldr	r3, [pc, #256]	; (8004708 <cmdExecute+0x254>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <cmdExecute+0x166>
				I2C_SOUND_ChangePage(0x01);
 800460c:	2001      	movs	r0, #1
 800460e:	f7fe ff45 	bl	800349c <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8004612:	21ff      	movs	r1, #255	; 0xff
 8004614:	202e      	movs	r0, #46	; 0x2e
 8004616:	f7fe ff5f 	bl	80034d8 <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 800461a:	2001      	movs	r0, #1
 800461c:	f7fe ff3e 	bl	800349c <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8004620:	4b39      	ldr	r3, [pc, #228]	; (8004708 <cmdExecute+0x254>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	0019      	movs	r1, r3
 8004626:	202e      	movs	r0, #46	; 0x2e
 8004628:	f7fe ff56 	bl	80034d8 <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 800462c:	4b37      	ldr	r3, [pc, #220]	; (800470c <cmdExecute+0x258>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d102      	bne.n	800463a <cmdExecute+0x186>
				weoClear();
 8004634:	f7fe fde8 	bl	8003208 <weoClear>
 8004638:	e029      	b.n	800468e <cmdExecute+0x1da>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 800463a:	23a0      	movs	r3, #160	; 0xa0
 800463c:	05db      	lsls	r3, r3, #23
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	23a0      	movs	r3, #160	; 0xa0
 8004642:	05db      	lsls	r3, r3, #23
 8004644:	2140      	movs	r1, #64	; 0x40
 8004646:	438a      	bics	r2, r1
 8004648:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 800464a:	23a0      	movs	r3, #160	; 0xa0
 800464c:	05db      	lsls	r3, r3, #23
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	23a0      	movs	r3, #160	; 0xa0
 8004652:	05db      	lsls	r3, r3, #23
 8004654:	2180      	movs	r1, #128	; 0x80
 8004656:	438a      	bics	r2, r1
 8004658:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800465a:	2081      	movs	r0, #129	; 0x81
 800465c:	f7fe fd56 	bl	800310c <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8004660:	4b2a      	ldr	r3, [pc, #168]	; (800470c <cmdExecute+0x258>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	b2db      	uxtb	r3, r3
 8004668:	0018      	movs	r0, r3
 800466a:	f7fe fd4f 	bl	800310c <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 800466e:	23a0      	movs	r3, #160	; 0xa0
 8004670:	05db      	lsls	r3, r3, #23
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	23a0      	movs	r3, #160	; 0xa0
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	430a      	orrs	r2, r1
 800467c:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 800467e:	23a0      	movs	r3, #160	; 0xa0
 8004680:	05db      	lsls	r3, r3, #23
 8004682:	695a      	ldr	r2, [r3, #20]
 8004684:	23a0      	movs	r3, #160	; 0xa0
 8004686:	05db      	lsls	r3, r3, #23
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	430a      	orrs	r2, r1
 800468c:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <cmdExecute+0x230>)
 8004696:	695a      	ldr	r2, [r3, #20]
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <cmdExecute+0x230>)
 800469a:	2140      	movs	r1, #64	; 0x40
 800469c:	430a      	orrs	r2, r1
 800469e:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b16      	cmp	r3, #22
 80046a6:	d102      	bne.n	80046ae <cmdExecute+0x1fa>
			bf4me=0x16;	//set BF flag 4 me
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <cmdExecute+0x228>)
 80046aa:	2216      	movs	r2, #22
 80046ac:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80046ae:	1dfb      	adds	r3, r7, #7
 80046b0:	2200      	movs	r2, #0
 80046b2:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <cmdExecute+0x22c>)
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <cmdExecute+0x22c>)
 80046ba:	2108      	movs	r1, #8
 80046bc:	430a      	orrs	r2, r1
 80046be:	621a      	str	r2, [r3, #32]
 80046c0:	e004      	b.n	80046cc <cmdExecute+0x218>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	e002      	b.n	80046cc <cmdExecute+0x218>
		if(soundReady==0){return;}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	e000      	b.n	80046cc <cmdExecute+0x218>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 80046ca:	46c0      	nop			; (mov r8, r8)
	}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b003      	add	sp, #12
 80046d2:	bd90      	pop	{r4, r7, pc}
 80046d4:	200003f4 	.word	0x200003f4
 80046d8:	20000064 	.word	0x20000064
 80046dc:	2000042b 	.word	0x2000042b
 80046e0:	40004400 	.word	0x40004400
 80046e4:	50000800 	.word	0x50000800
 80046e8:	200003c9 	.word	0x200003c9
 80046ec:	200003d0 	.word	0x200003d0
 80046f0:	200003d4 	.word	0x200003d4
 80046f4:	200003ce 	.word	0x200003ce
 80046f8:	20000431 	.word	0x20000431
 80046fc:	200003dc 	.word	0x200003dc
 8004700:	200003ca 	.word	0x200003ca
 8004704:	20000434 	.word	0x20000434
 8004708:	200003cb 	.word	0x200003cb
 800470c:	200003cc 	.word	0x200003cc

08004710 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8004710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004712:	46ce      	mov	lr, r9
 8004714:	4647      	mov	r7, r8
 8004716:	b580      	push	{r7, lr}
 8004718:	b0e5      	sub	sp, #404	; 0x194
 800471a:	af02      	add	r7, sp, #8
 800471c:	0016      	movs	r6, r2
 800471e:	469c      	mov	ip, r3
 8004720:	2320      	movs	r3, #32
 8004722:	33ff      	adds	r3, #255	; 0xff
 8004724:	2208      	movs	r2, #8
 8004726:	189b      	adds	r3, r3, r2
 8004728:	19da      	adds	r2, r3, r7
 800472a:	1c03      	adds	r3, r0, #0
 800472c:	7013      	strb	r3, [r2, #0]
 800472e:	238f      	movs	r3, #143	; 0x8f
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	2208      	movs	r2, #8
 8004734:	189b      	adds	r3, r3, r2
 8004736:	19da      	adds	r2, r3, r7
 8004738:	1c0b      	adds	r3, r1, #0
 800473a:	7013      	strb	r3, [r2, #0]
 800473c:	221e      	movs	r2, #30
 800473e:	32ff      	adds	r2, #255	; 0xff
 8004740:	2308      	movs	r3, #8
 8004742:	18d3      	adds	r3, r2, r3
 8004744:	19da      	adds	r2, r3, r7
 8004746:	1c33      	adds	r3, r6, #0
 8004748:	7013      	strb	r3, [r2, #0]
 800474a:	268e      	movs	r6, #142	; 0x8e
 800474c:	0076      	lsls	r6, r6, #1
 800474e:	2308      	movs	r3, #8
 8004750:	18f3      	adds	r3, r6, r3
 8004752:	19da      	adds	r2, r3, r7
 8004754:	4663      	mov	r3, ip
 8004756:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8004758:	235f      	movs	r3, #95	; 0x5f
 800475a:	218c      	movs	r1, #140	; 0x8c
 800475c:	0049      	lsls	r1, r1, #1
 800475e:	185a      	adds	r2, r3, r1
 8004760:	2308      	movs	r3, #8
 8004762:	469c      	mov	ip, r3
 8004764:	44bc      	add	ip, r7
 8004766:	4462      	add	r2, ip
 8004768:	2020      	movs	r0, #32
 800476a:	30ff      	adds	r0, #255	; 0xff
 800476c:	2308      	movs	r3, #8
 800476e:	18c3      	adds	r3, r0, r3
 8004770:	19db      	adds	r3, r3, r7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8004776:	205e      	movs	r0, #94	; 0x5e
 8004778:	1842      	adds	r2, r0, r1
 800477a:	2308      	movs	r3, #8
 800477c:	469c      	mov	ip, r3
 800477e:	44bc      	add	ip, r7
 8004780:	4462      	add	r2, ip
 8004782:	2308      	movs	r3, #8
 8004784:	18f3      	adds	r3, r6, r3
 8004786:	19db      	adds	r3, r3, r7
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 800478e:	265d      	movs	r6, #93	; 0x5d
 8004790:	1872      	adds	r2, r6, r1
 8004792:	2308      	movs	r3, #8
 8004794:	469c      	mov	ip, r3
 8004796:	44bc      	add	ip, r7
 8004798:	4462      	add	r2, ip
 800479a:	1843      	adds	r3, r0, r1
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	2308      	movs	r3, #8
 80047a0:	469c      	mov	ip, r3
 80047a2:	44bc      	add	ip, r7
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4463      	add	r3, ip
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 80047ae:	235c      	movs	r3, #92	; 0x5c
 80047b0:	000a      	movs	r2, r1
 80047b2:	1859      	adds	r1, r3, r1
 80047b4:	2308      	movs	r3, #8
 80047b6:	469c      	mov	ip, r3
 80047b8:	44bc      	add	ip, r7
 80047ba:	4461      	add	r1, ip
 80047bc:	0013      	movs	r3, r2
 80047be:	18f2      	adds	r2, r6, r3
 80047c0:	2608      	movs	r6, #8
 80047c2:	46b4      	mov	ip, r6
 80047c4:	44bc      	add	ip, r7
 80047c6:	4462      	add	r2, ip
 80047c8:	001e      	movs	r6, r3
 80047ca:	18c0      	adds	r0, r0, r3
 80047cc:	2308      	movs	r3, #8
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	18c3      	adds	r3, r0, r3
 80047d2:	7812      	ldrb	r2, [r2, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 80047da:	2160      	movs	r1, #96	; 0x60
 80047dc:	0030      	movs	r0, r6
 80047de:	180a      	adds	r2, r1, r0
 80047e0:	2308      	movs	r3, #8
 80047e2:	469c      	mov	ip, r3
 80047e4:	44bc      	add	ip, r7
 80047e6:	4462      	add	r2, ip
 80047e8:	2301      	movs	r3, #1
 80047ea:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 80047ec:	238f      	movs	r3, #143	; 0x8f
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	2208      	movs	r2, #8
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	2301      	movs	r3, #1
 80047fa:	4013      	ands	r3, r2
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <printASCIIarray+0xfe>
				decY=0x02;
 8004802:	180b      	adds	r3, r1, r0
 8004804:	2208      	movs	r2, #8
 8004806:	18ba      	adds	r2, r7, r2
 8004808:	189a      	adds	r2, r3, r2
 800480a:	2302      	movs	r3, #2
 800480c:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 800480e:	2161      	movs	r1, #97	; 0x61
 8004810:	208c      	movs	r0, #140	; 0x8c
 8004812:	0040      	lsls	r0, r0, #1
 8004814:	180b      	adds	r3, r1, r0
 8004816:	2208      	movs	r2, #8
 8004818:	18ba      	adds	r2, r7, r2
 800481a:	189a      	adds	r2, r3, r2
 800481c:	2300      	movs	r3, #0
 800481e:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8004820:	238e      	movs	r3, #142	; 0x8e
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	2208      	movs	r2, #8
 8004826:	189b      	adds	r3, r3, r2
 8004828:	19db      	adds	r3, r3, r7
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	2301      	movs	r3, #1
 800482e:	4013      	ands	r3, r2
 8004830:	d005      	beq.n	800483e <printASCIIarray+0x12e>
				fontCur=1;
 8004832:	180b      	adds	r3, r1, r0
 8004834:	2208      	movs	r2, #8
 8004836:	18ba      	adds	r2, r7, r2
 8004838:	189a      	adds	r2, r3, r2
 800483a:	2301      	movs	r3, #1
 800483c:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 800483e:	238e      	movs	r3, #142	; 0x8e
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	2208      	movs	r2, #8
 8004844:	189b      	adds	r3, r3, r2
 8004846:	19db      	adds	r3, r3, r7
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	2302      	movs	r3, #2
 800484c:	4013      	ands	r3, r2
 800484e:	d008      	beq.n	8004862 <printASCIIarray+0x152>
				fontCur=2;
 8004850:	2361      	movs	r3, #97	; 0x61
 8004852:	228c      	movs	r2, #140	; 0x8c
 8004854:	0052      	lsls	r2, r2, #1
 8004856:	189b      	adds	r3, r3, r2
 8004858:	2208      	movs	r2, #8
 800485a:	18ba      	adds	r2, r7, r2
 800485c:	189a      	adds	r2, r3, r2
 800485e:	2302      	movs	r3, #2
 8004860:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8004862:	2361      	movs	r3, #97	; 0x61
 8004864:	268c      	movs	r6, #140	; 0x8c
 8004866:	0076      	lsls	r6, r6, #1
 8004868:	199b      	adds	r3, r3, r6
 800486a:	2208      	movs	r2, #8
 800486c:	4694      	mov	ip, r2
 800486e:	44bc      	add	ip, r7
 8004870:	4463      	add	r3, ip
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d000      	beq.n	800487a <printASCIIarray+0x16a>
 8004878:	e2a7      	b.n	8004dca <printASCIIarray+0x6ba>
 800487a:	466b      	mov	r3, sp
 800487c:	4698      	mov	r8, r3
				symLen=49;
 800487e:	215a      	movs	r1, #90	; 0x5a
 8004880:	198b      	adds	r3, r1, r6
 8004882:	2208      	movs	r2, #8
 8004884:	18ba      	adds	r2, r7, r2
 8004886:	189a      	adds	r2, r3, r2
 8004888:	2331      	movs	r3, #49	; 0x31
 800488a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800488c:	198b      	adds	r3, r1, r6
 800488e:	2208      	movs	r2, #8
 8004890:	4694      	mov	ip, r2
 8004892:	44bc      	add	ip, r7
 8004894:	4463      	add	r3, ip
 8004896:	881a      	ldrh	r2, [r3, #0]
 8004898:	0013      	movs	r3, r2
 800489a:	3b01      	subs	r3, #1
 800489c:	21b6      	movs	r1, #182	; 0xb6
 800489e:	0049      	lsls	r1, r1, #1
 80048a0:	2008      	movs	r0, #8
 80048a2:	1809      	adds	r1, r1, r0
 80048a4:	19c9      	adds	r1, r1, r7
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	2188      	movs	r1, #136	; 0x88
 80048aa:	2308      	movs	r3, #8
 80048ac:	18cb      	adds	r3, r1, r3
 80048ae:	19db      	adds	r3, r3, r7
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	2300      	movs	r3, #0
 80048b4:	208c      	movs	r0, #140	; 0x8c
 80048b6:	2608      	movs	r6, #8
 80048b8:	1980      	adds	r0, r0, r6
 80048ba:	19c0      	adds	r0, r0, r7
 80048bc:	6003      	str	r3, [r0, #0]
 80048be:	2308      	movs	r3, #8
 80048c0:	18cb      	adds	r3, r1, r3
 80048c2:	19db      	adds	r3, r3, r7
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	6859      	ldr	r1, [r3, #4]
 80048c8:	0003      	movs	r3, r0
 80048ca:	0f5b      	lsrs	r3, r3, #29
 80048cc:	000e      	movs	r6, r1
 80048ce:	00f5      	lsls	r5, r6, #3
 80048d0:	431d      	orrs	r5, r3
 80048d2:	0003      	movs	r3, r0
 80048d4:	00dc      	lsls	r4, r3, #3
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	2308      	movs	r3, #8
 80048da:	18cb      	adds	r3, r1, r3
 80048dc:	19db      	adds	r3, r3, r7
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	2300      	movs	r3, #0
 80048e2:	2084      	movs	r0, #132	; 0x84
 80048e4:	2408      	movs	r4, #8
 80048e6:	1900      	adds	r0, r0, r4
 80048e8:	19c0      	adds	r0, r0, r7
 80048ea:	6003      	str	r3, [r0, #0]
 80048ec:	2308      	movs	r3, #8
 80048ee:	18cb      	adds	r3, r1, r3
 80048f0:	19db      	adds	r3, r3, r7
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
 80048f6:	0003      	movs	r3, r0
 80048f8:	0f5b      	lsrs	r3, r3, #29
 80048fa:	000d      	movs	r5, r1
 80048fc:	00ed      	lsls	r5, r5, #3
 80048fe:	248a      	movs	r4, #138	; 0x8a
 8004900:	0064      	lsls	r4, r4, #1
 8004902:	2608      	movs	r6, #8
 8004904:	19a6      	adds	r6, r4, r6
 8004906:	19f6      	adds	r6, r6, r7
 8004908:	6035      	str	r5, [r6, #0]
 800490a:	2508      	movs	r5, #8
 800490c:	1965      	adds	r5, r4, r5
 800490e:	19ed      	adds	r5, r5, r7
 8004910:	682d      	ldr	r5, [r5, #0]
 8004912:	431d      	orrs	r5, r3
 8004914:	2308      	movs	r3, #8
 8004916:	18e3      	adds	r3, r4, r3
 8004918:	19db      	adds	r3, r3, r7
 800491a:	601d      	str	r5, [r3, #0]
 800491c:	0003      	movs	r3, r0
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	2188      	movs	r1, #136	; 0x88
 8004922:	0049      	lsls	r1, r1, #1
 8004924:	2008      	movs	r0, #8
 8004926:	1809      	adds	r1, r1, r0
 8004928:	19c9      	adds	r1, r1, r7
 800492a:	600b      	str	r3, [r1, #0]
 800492c:	0013      	movs	r3, r2
 800492e:	3307      	adds	r3, #7
 8004930:	08db      	lsrs	r3, r3, #3
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	466a      	mov	r2, sp
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	469d      	mov	sp, r3
 800493a:	ab02      	add	r3, sp, #8
 800493c:	3300      	adds	r3, #0
 800493e:	22b4      	movs	r2, #180	; 0xb4
 8004940:	0052      	lsls	r2, r2, #1
 8004942:	2108      	movs	r1, #8
 8004944:	1852      	adds	r2, r2, r1
 8004946:	19d2      	adds	r2, r2, r7
 8004948:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 800494a:	245a      	movs	r4, #90	; 0x5a
 800494c:	2390      	movs	r3, #144	; 0x90
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	601c      	str	r4, [r3, #0]
 8004954:	268c      	movs	r6, #140	; 0x8c
 8004956:	0076      	lsls	r6, r6, #1
 8004958:	19a3      	adds	r3, r4, r6
 800495a:	2208      	movs	r2, #8
 800495c:	4694      	mov	ip, r2
 800495e:	44bc      	add	ip, r7
 8004960:	4463      	add	r3, ip
 8004962:	881a      	ldrh	r2, [r3, #0]
 8004964:	0013      	movs	r3, r2
 8004966:	3b01      	subs	r3, #1
 8004968:	21b2      	movs	r1, #178	; 0xb2
 800496a:	0049      	lsls	r1, r1, #1
 800496c:	2008      	movs	r0, #8
 800496e:	1809      	adds	r1, r1, r0
 8004970:	19c9      	adds	r1, r1, r7
 8004972:	600b      	str	r3, [r1, #0]
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	2184      	movs	r1, #132	; 0x84
 800497e:	1879      	adds	r1, r7, r1
 8004980:	600b      	str	r3, [r1, #0]
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	6859      	ldr	r1, [r3, #4]
 800498a:	0003      	movs	r3, r0
 800498c:	0f5b      	lsrs	r3, r3, #29
 800498e:	469c      	mov	ip, r3
 8004990:	000d      	movs	r5, r1
 8004992:	00ed      	lsls	r5, r5, #3
 8004994:	2486      	movs	r4, #134	; 0x86
 8004996:	0064      	lsls	r4, r4, #1
 8004998:	2308      	movs	r3, #8
 800499a:	18e4      	adds	r4, r4, r3
 800499c:	19e4      	adds	r4, r4, r7
 800499e:	6025      	str	r5, [r4, #0]
 80049a0:	2586      	movs	r5, #134	; 0x86
 80049a2:	006d      	lsls	r5, r5, #1
 80049a4:	2308      	movs	r3, #8
 80049a6:	18eb      	adds	r3, r5, r3
 80049a8:	19dc      	adds	r4, r3, r7
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	4663      	mov	r3, ip
 80049ae:	431d      	orrs	r5, r3
 80049b0:	2386      	movs	r3, #134	; 0x86
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	2408      	movs	r4, #8
 80049b6:	191b      	adds	r3, r3, r4
 80049b8:	19db      	adds	r3, r3, r7
 80049ba:	601d      	str	r5, [r3, #0]
 80049bc:	0003      	movs	r3, r0
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	2184      	movs	r1, #132	; 0x84
 80049c2:	0049      	lsls	r1, r1, #1
 80049c4:	2008      	movs	r0, #8
 80049c6:	1809      	adds	r1, r1, r0
 80049c8:	19c9      	adds	r1, r1, r7
 80049ca:	600b      	str	r3, [r1, #0]
 80049cc:	67ba      	str	r2, [r7, #120]	; 0x78
 80049ce:	2300      	movs	r3, #0
 80049d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049d2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80049d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049d6:	0003      	movs	r3, r0
 80049d8:	0f5b      	lsrs	r3, r3, #29
 80049da:	000d      	movs	r5, r1
 80049dc:	00ed      	lsls	r5, r5, #3
 80049de:	2486      	movs	r4, #134	; 0x86
 80049e0:	0064      	lsls	r4, r4, #1
 80049e2:	193c      	adds	r4, r7, r4
 80049e4:	6025      	str	r5, [r4, #0]
 80049e6:	2486      	movs	r4, #134	; 0x86
 80049e8:	0064      	lsls	r4, r4, #1
 80049ea:	193c      	adds	r4, r7, r4
 80049ec:	6825      	ldr	r5, [r4, #0]
 80049ee:	431d      	orrs	r5, r3
 80049f0:	2386      	movs	r3, #134	; 0x86
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	601d      	str	r5, [r3, #0]
 80049f8:	0003      	movs	r3, r0
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	2184      	movs	r1, #132	; 0x84
 80049fe:	0049      	lsls	r1, r1, #1
 8004a00:	1879      	adds	r1, r7, r1
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	0013      	movs	r3, r2
 8004a06:	3307      	adds	r3, #7
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	466a      	mov	r2, sp
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	469d      	mov	sp, r3
 8004a12:	ab02      	add	r3, sp, #8
 8004a14:	3300      	adds	r3, #0
 8004a16:	22b0      	movs	r2, #176	; 0xb0
 8004a18:	0052      	lsls	r2, r2, #1
 8004a1a:	2108      	movs	r1, #8
 8004a1c:	1852      	adds	r2, r2, r1
 8004a1e:	19d2      	adds	r2, r2, r7
 8004a20:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8004a22:	2390      	movs	r3, #144	; 0x90
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	18fb      	adds	r3, r7, r3
 8004a28:	681c      	ldr	r4, [r3, #0]
 8004a2a:	0035      	movs	r5, r6
 8004a2c:	1963      	adds	r3, r4, r5
 8004a2e:	2208      	movs	r2, #8
 8004a30:	4694      	mov	ip, r2
 8004a32:	44bc      	add	ip, r7
 8004a34:	4463      	add	r3, ip
 8004a36:	881a      	ldrh	r2, [r3, #0]
 8004a38:	0013      	movs	r3, r2
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	21ae      	movs	r1, #174	; 0xae
 8004a3e:	0049      	lsls	r1, r1, #1
 8004a40:	2008      	movs	r0, #8
 8004a42:	1809      	adds	r1, r1, r0
 8004a44:	19c9      	adds	r1, r1, r7
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	673a      	str	r2, [r7, #112]	; 0x70
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004a4e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004a50:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004a52:	0003      	movs	r3, r0
 8004a54:	0f5b      	lsrs	r3, r3, #29
 8004a56:	000c      	movs	r4, r1
 8004a58:	00e4      	lsls	r4, r4, #3
 8004a5a:	26fc      	movs	r6, #252	; 0xfc
 8004a5c:	2508      	movs	r5, #8
 8004a5e:	1975      	adds	r5, r6, r5
 8004a60:	19ed      	adds	r5, r5, r7
 8004a62:	602c      	str	r4, [r5, #0]
 8004a64:	2408      	movs	r4, #8
 8004a66:	1934      	adds	r4, r6, r4
 8004a68:	19e4      	adds	r4, r4, r7
 8004a6a:	6824      	ldr	r4, [r4, #0]
 8004a6c:	431c      	orrs	r4, r3
 8004a6e:	2308      	movs	r3, #8
 8004a70:	18f3      	adds	r3, r6, r3
 8004a72:	19db      	adds	r3, r3, r7
 8004a74:	601c      	str	r4, [r3, #0]
 8004a76:	0003      	movs	r3, r0
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	21f8      	movs	r1, #248	; 0xf8
 8004a7c:	2008      	movs	r0, #8
 8004a7e:	1809      	adds	r1, r1, r0
 8004a80:	19c9      	adds	r1, r1, r7
 8004a82:	600b      	str	r3, [r1, #0]
 8004a84:	66ba      	str	r2, [r7, #104]	; 0x68
 8004a86:	2300      	movs	r3, #0
 8004a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a8a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004a8c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004a8e:	0003      	movs	r3, r0
 8004a90:	0f5b      	lsrs	r3, r3, #29
 8004a92:	000c      	movs	r4, r1
 8004a94:	00e4      	lsls	r4, r4, #3
 8004a96:	26f4      	movs	r6, #244	; 0xf4
 8004a98:	2508      	movs	r5, #8
 8004a9a:	1975      	adds	r5, r6, r5
 8004a9c:	19ed      	adds	r5, r5, r7
 8004a9e:	602c      	str	r4, [r5, #0]
 8004aa0:	2408      	movs	r4, #8
 8004aa2:	1934      	adds	r4, r6, r4
 8004aa4:	19e4      	adds	r4, r4, r7
 8004aa6:	6824      	ldr	r4, [r4, #0]
 8004aa8:	431c      	orrs	r4, r3
 8004aaa:	2308      	movs	r3, #8
 8004aac:	18f3      	adds	r3, r6, r3
 8004aae:	19db      	adds	r3, r3, r7
 8004ab0:	601c      	str	r4, [r3, #0]
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	21f0      	movs	r1, #240	; 0xf0
 8004ab8:	2008      	movs	r0, #8
 8004aba:	1809      	adds	r1, r1, r0
 8004abc:	19c9      	adds	r1, r1, r7
 8004abe:	600b      	str	r3, [r1, #0]
 8004ac0:	0013      	movs	r3, r2
 8004ac2:	3307      	adds	r3, #7
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	466a      	mov	r2, sp
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	469d      	mov	sp, r3
 8004ace:	ab02      	add	r3, sp, #8
 8004ad0:	3300      	adds	r3, #0
 8004ad2:	22ac      	movs	r2, #172	; 0xac
 8004ad4:	0052      	lsls	r2, r2, #1
 8004ad6:	2108      	movs	r1, #8
 8004ad8:	1852      	adds	r2, r2, r1
 8004ada:	19d2      	adds	r2, r2, r7
 8004adc:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8004ade:	233f      	movs	r3, #63	; 0x3f
 8004ae0:	258c      	movs	r5, #140	; 0x8c
 8004ae2:	006d      	lsls	r5, r5, #1
 8004ae4:	195b      	adds	r3, r3, r5
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	18ba      	adds	r2, r7, r2
 8004aea:	189a      	adds	r2, r3, r2
 8004aec:	2307      	movs	r3, #7
 8004aee:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 8004af0:	233e      	movs	r3, #62	; 0x3e
 8004af2:	195b      	adds	r3, r3, r5
 8004af4:	2208      	movs	r2, #8
 8004af6:	18ba      	adds	r2, r7, r2
 8004af8:	189a      	adds	r2, r3, r2
 8004afa:	230e      	movs	r3, #14
 8004afc:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8004afe:	2362      	movs	r3, #98	; 0x62
 8004b00:	195b      	adds	r3, r3, r5
 8004b02:	2208      	movs	r2, #8
 8004b04:	18ba      	adds	r2, r7, r2
 8004b06:	189a      	adds	r2, r3, r2
 8004b08:	2300      	movs	r3, #0
 8004b0a:	8013      	strh	r3, [r2, #0]
 8004b0c:	e110      	b.n	8004d30 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8004b0e:	2364      	movs	r3, #100	; 0x64
 8004b10:	228c      	movs	r2, #140	; 0x8c
 8004b12:	0052      	lsls	r2, r2, #1
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	2208      	movs	r2, #8
 8004b18:	18ba      	adds	r2, r7, r2
 8004b1a:	189a      	adds	r2, r3, r2
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	8013      	strh	r3, [r2, #0]
 8004b20:	e042      	b.n	8004ba8 <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8004b22:	2362      	movs	r3, #98	; 0x62
 8004b24:	218c      	movs	r1, #140	; 0x8c
 8004b26:	0049      	lsls	r1, r1, #1
 8004b28:	185b      	adds	r3, r3, r1
 8004b2a:	2208      	movs	r2, #8
 8004b2c:	4694      	mov	ip, r2
 8004b2e:	44bc      	add	ip, r7
 8004b30:	4463      	add	r3, ip
 8004b32:	881a      	ldrh	r2, [r3, #0]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	185b      	adds	r3, r3, r1
 8004b38:	2008      	movs	r0, #8
 8004b3a:	4684      	mov	ip, r0
 8004b3c:	2008      	movs	r0, #8
 8004b3e:	4681      	mov	r9, r0
 8004b40:	44b9      	add	r9, r7
 8004b42:	44cc      	add	ip, r9
 8004b44:	4463      	add	r3, ip
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	189b      	adds	r3, r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	001d      	movs	r5, r3
 8004b4e:	2264      	movs	r2, #100	; 0x64
 8004b50:	1853      	adds	r3, r2, r1
 8004b52:	2008      	movs	r0, #8
 8004b54:	4684      	mov	ip, r0
 8004b56:	44bc      	add	ip, r7
 8004b58:	4463      	add	r3, ip
 8004b5a:	8818      	ldrh	r0, [r3, #0]
 8004b5c:	0016      	movs	r6, r2
 8004b5e:	1853      	adds	r3, r2, r1
 8004b60:	2208      	movs	r2, #8
 8004b62:	4694      	mov	ip, r2
 8004b64:	44bc      	add	ip, r7
 8004b66:	4463      	add	r3, ip
 8004b68:	881c      	ldrh	r4, [r3, #0]
 8004b6a:	497e      	ldr	r1, [pc, #504]	; (8004d64 <printASCIIarray+0x654>)
 8004b6c:	002a      	movs	r2, r5
 8004b6e:	00d2      	lsls	r2, r2, #3
 8004b70:	1b52      	subs	r2, r2, r5
 8004b72:	00d3      	lsls	r3, r2, #3
 8004b74:	1a9b      	subs	r3, r3, r2
 8004b76:	18cb      	adds	r3, r1, r3
 8004b78:	5c1b      	ldrb	r3, [r3, r0]
 8004b7a:	22b4      	movs	r2, #180	; 0xb4
 8004b7c:	0052      	lsls	r2, r2, #1
 8004b7e:	2108      	movs	r1, #8
 8004b80:	1852      	adds	r2, r2, r1
 8004b82:	19d2      	adds	r2, r2, r7
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 8004b88:	0032      	movs	r2, r6
 8004b8a:	218c      	movs	r1, #140	; 0x8c
 8004b8c:	0049      	lsls	r1, r1, #1
 8004b8e:	1853      	adds	r3, r2, r1
 8004b90:	2008      	movs	r0, #8
 8004b92:	4684      	mov	ip, r0
 8004b94:	44bc      	add	ip, r7
 8004b96:	4463      	add	r3, ip
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	1852      	adds	r2, r2, r1
 8004b9c:	2108      	movs	r1, #8
 8004b9e:	468c      	mov	ip, r1
 8004ba0:	44bc      	add	ip, r7
 8004ba2:	4462      	add	r2, ip
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	8013      	strh	r3, [r2, #0]
 8004ba8:	2364      	movs	r3, #100	; 0x64
 8004baa:	218c      	movs	r1, #140	; 0x8c
 8004bac:	0049      	lsls	r1, r1, #1
 8004bae:	185b      	adds	r3, r3, r1
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	18ba      	adds	r2, r7, r2
 8004bb4:	189a      	adds	r2, r3, r2
 8004bb6:	235a      	movs	r3, #90	; 0x5a
 8004bb8:	185b      	adds	r3, r3, r1
 8004bba:	2008      	movs	r0, #8
 8004bbc:	4684      	mov	ip, r0
 8004bbe:	44bc      	add	ip, r7
 8004bc0:	4463      	add	r3, ip
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d3ab      	bcc.n	8004b22 <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 8004bca:	2366      	movs	r3, #102	; 0x66
 8004bcc:	185b      	adds	r3, r3, r1
 8004bce:	2208      	movs	r2, #8
 8004bd0:	18ba      	adds	r2, r7, r2
 8004bd2:	189a      	adds	r2, r3, r2
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	8013      	strh	r3, [r2, #0]
 8004bd8:	e030      	b.n	8004c3c <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8004bda:	2066      	movs	r0, #102	; 0x66
 8004bdc:	248c      	movs	r4, #140	; 0x8c
 8004bde:	0064      	lsls	r4, r4, #1
 8004be0:	1903      	adds	r3, r0, r4
 8004be2:	2208      	movs	r2, #8
 8004be4:	4694      	mov	ip, r2
 8004be6:	44bc      	add	ip, r7
 8004be8:	4463      	add	r3, ip
 8004bea:	881a      	ldrh	r2, [r3, #0]
 8004bec:	25b4      	movs	r5, #180	; 0xb4
 8004bee:	006d      	lsls	r5, r5, #1
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	18eb      	adds	r3, r5, r3
 8004bf4:	19db      	adds	r3, r3, r7
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	5c9a      	ldrb	r2, [r3, r2]
 8004bfa:	1903      	adds	r3, r0, r4
 8004bfc:	2108      	movs	r1, #8
 8004bfe:	468c      	mov	ip, r1
 8004c00:	44bc      	add	ip, r7
 8004c02:	4463      	add	r3, ip
 8004c04:	8819      	ldrh	r1, [r3, #0]
 8004c06:	235c      	movs	r3, #92	; 0x5c
 8004c08:	191b      	adds	r3, r3, r4
 8004c0a:	2608      	movs	r6, #8
 8004c0c:	46b4      	mov	ip, r6
 8004c0e:	44bc      	add	ip, r7
 8004c10:	4463      	add	r3, ip
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2208      	movs	r2, #8
 8004c1a:	18aa      	adds	r2, r5, r2
 8004c1c:	19d2      	adds	r2, r2, r7
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8004c22:	1903      	adds	r3, r0, r4
 8004c24:	2208      	movs	r2, #8
 8004c26:	4694      	mov	ip, r2
 8004c28:	44bc      	add	ip, r7
 8004c2a:	4463      	add	r3, ip
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	1902      	adds	r2, r0, r4
 8004c30:	2108      	movs	r1, #8
 8004c32:	468c      	mov	ip, r1
 8004c34:	44bc      	add	ip, r7
 8004c36:	4462      	add	r2, ip
 8004c38:	3301      	adds	r3, #1
 8004c3a:	8013      	strh	r3, [r2, #0]
 8004c3c:	2366      	movs	r3, #102	; 0x66
 8004c3e:	258c      	movs	r5, #140	; 0x8c
 8004c40:	006d      	lsls	r5, r5, #1
 8004c42:	195b      	adds	r3, r3, r5
 8004c44:	2208      	movs	r2, #8
 8004c46:	18ba      	adds	r2, r7, r2
 8004c48:	189a      	adds	r2, r3, r2
 8004c4a:	235a      	movs	r3, #90	; 0x5a
 8004c4c:	195b      	adds	r3, r3, r5
 8004c4e:	2108      	movs	r1, #8
 8004c50:	468c      	mov	ip, r1
 8004c52:	44bc      	add	ip, r7
 8004c54:	4463      	add	r3, ip
 8004c56:	8812      	ldrh	r2, [r2, #0]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d3bd      	bcc.n	8004bda <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 8004c5e:	205f      	movs	r0, #95	; 0x5f
 8004c60:	1943      	adds	r3, r0, r5
 8004c62:	2208      	movs	r2, #8
 8004c64:	18ba      	adds	r2, r7, r2
 8004c66:	189a      	adds	r2, r3, r2
 8004c68:	233f      	movs	r3, #63	; 0x3f
 8004c6a:	001e      	movs	r6, r3
 8004c6c:	195b      	adds	r3, r3, r5
 8004c6e:	2108      	movs	r1, #8
 8004c70:	468c      	mov	ip, r1
 8004c72:	44bc      	add	ip, r7
 8004c74:	4463      	add	r3, ip
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	18d3      	adds	r3, r2, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b2dc      	uxtb	r4, r3
 8004c82:	218f      	movs	r1, #143	; 0x8f
 8004c84:	0049      	lsls	r1, r1, #1
 8004c86:	2308      	movs	r3, #8
 8004c88:	18cb      	adds	r3, r1, r3
 8004c8a:	19da      	adds	r2, r3, r7
 8004c8c:	213e      	movs	r1, #62	; 0x3e
 8004c8e:	194b      	adds	r3, r1, r5
 8004c90:	2108      	movs	r1, #8
 8004c92:	468c      	mov	ip, r1
 8004c94:	44bc      	add	ip, r7
 8004c96:	4463      	add	r3, ip
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	18d3      	adds	r3, r2, r3
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	2160      	movs	r1, #96	; 0x60
 8004ca2:	194b      	adds	r3, r1, r5
 8004ca4:	2108      	movs	r1, #8
 8004ca6:	468c      	mov	ip, r1
 8004ca8:	44bc      	add	ip, r7
 8004caa:	4463      	add	r3, ip
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	4699      	mov	r9, r3
 8004cb4:	218f      	movs	r1, #143	; 0x8f
 8004cb6:	0049      	lsls	r1, r1, #1
 8004cb8:	2308      	movs	r3, #8
 8004cba:	18cb      	adds	r3, r1, r3
 8004cbc:	19db      	adds	r3, r3, r7
 8004cbe:	7819      	ldrb	r1, [r3, #0]
 8004cc0:	0005      	movs	r5, r0
 8004cc2:	238c      	movs	r3, #140	; 0x8c
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	18c3      	adds	r3, r0, r3
 8004cc8:	2208      	movs	r2, #8
 8004cca:	4694      	mov	ip, r2
 8004ccc:	44bc      	add	ip, r7
 8004cce:	4463      	add	r3, ip
 8004cd0:	7818      	ldrb	r0, [r3, #0]
 8004cd2:	23b4      	movs	r3, #180	; 0xb4
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	189b      	adds	r3, r3, r2
 8004cda:	19db      	adds	r3, r3, r7
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	23ff      	movs	r3, #255	; 0xff
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	0022      	movs	r2, r4
 8004ce8:	f7fe faf2 	bl	80032d0 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8004cec:	208c      	movs	r0, #140	; 0x8c
 8004cee:	0040      	lsls	r0, r0, #1
 8004cf0:	182b      	adds	r3, r5, r0
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	18ba      	adds	r2, r7, r2
 8004cf6:	1899      	adds	r1, r3, r2
 8004cf8:	182b      	adds	r3, r5, r0
 8004cfa:	2208      	movs	r2, #8
 8004cfc:	18ba      	adds	r2, r7, r2
 8004cfe:	189a      	adds	r2, r3, r2
 8004d00:	0033      	movs	r3, r6
 8004d02:	181b      	adds	r3, r3, r0
 8004d04:	2408      	movs	r4, #8
 8004d06:	46a4      	mov	ip, r4
 8004d08:	44bc      	add	ip, r7
 8004d0a:	4463      	add	r3, ip
 8004d0c:	7812      	ldrb	r2, [r2, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	18d3      	adds	r3, r2, r3
 8004d12:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8004d14:	2262      	movs	r2, #98	; 0x62
 8004d16:	1813      	adds	r3, r2, r0
 8004d18:	2108      	movs	r1, #8
 8004d1a:	468c      	mov	ip, r1
 8004d1c:	44bc      	add	ip, r7
 8004d1e:	4463      	add	r3, ip
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	1812      	adds	r2, r2, r0
 8004d24:	2108      	movs	r1, #8
 8004d26:	468c      	mov	ip, r1
 8004d28:	44bc      	add	ip, r7
 8004d2a:	4462      	add	r2, ip
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	8013      	strh	r3, [r2, #0]
 8004d30:	231e      	movs	r3, #30
 8004d32:	33ff      	adds	r3, #255	; 0xff
 8004d34:	2208      	movs	r2, #8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	19db      	adds	r3, r3, r7
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	2162      	movs	r1, #98	; 0x62
 8004d40:	208c      	movs	r0, #140	; 0x8c
 8004d42:	0040      	lsls	r0, r0, #1
 8004d44:	180b      	adds	r3, r1, r0
 8004d46:	2408      	movs	r4, #8
 8004d48:	46a4      	mov	ip, r4
 8004d4a:	44bc      	add	ip, r7
 8004d4c:	4463      	add	r3, ip
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d200      	bcs.n	8004d56 <printASCIIarray+0x646>
 8004d54:	e6db      	b.n	8004b0e <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 8004d56:	180b      	adds	r3, r1, r0
 8004d58:	2208      	movs	r2, #8
 8004d5a:	18ba      	adds	r2, r7, r2
 8004d5c:	189a      	adds	r2, r3, r2
 8004d5e:	2300      	movs	r3, #0
 8004d60:	8013      	strh	r3, [r2, #0]
 8004d62:	e020      	b.n	8004da6 <printASCIIarray+0x696>
 8004d64:	0800f82c 	.word	0x0800f82c
									weoBuffer[j]=0x00;
 8004d68:	2364      	movs	r3, #100	; 0x64
 8004d6a:	208c      	movs	r0, #140	; 0x8c
 8004d6c:	0040      	lsls	r0, r0, #1
 8004d6e:	181b      	adds	r3, r3, r0
 8004d70:	2208      	movs	r2, #8
 8004d72:	4694      	mov	ip, r2
 8004d74:	44bc      	add	ip, r7
 8004d76:	4463      	add	r3, ip
 8004d78:	8819      	ldrh	r1, [r3, #0]
 8004d7a:	23b4      	movs	r3, #180	; 0xb4
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	2208      	movs	r2, #8
 8004d80:	189b      	adds	r3, r3, r2
 8004d82:	19db      	adds	r3, r3, r7
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	2300      	movs	r3, #0
 8004d88:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 8004d8a:	2262      	movs	r2, #98	; 0x62
 8004d8c:	1813      	adds	r3, r2, r0
 8004d8e:	2108      	movs	r1, #8
 8004d90:	468c      	mov	ip, r1
 8004d92:	44bc      	add	ip, r7
 8004d94:	4463      	add	r3, ip
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	1812      	adds	r2, r2, r0
 8004d9a:	2108      	movs	r1, #8
 8004d9c:	468c      	mov	ip, r1
 8004d9e:	44bc      	add	ip, r7
 8004da0:	4462      	add	r2, ip
 8004da2:	3301      	adds	r3, #1
 8004da4:	8013      	strh	r3, [r2, #0]
 8004da6:	2362      	movs	r3, #98	; 0x62
 8004da8:	218c      	movs	r1, #140	; 0x8c
 8004daa:	0049      	lsls	r1, r1, #1
 8004dac:	185b      	adds	r3, r3, r1
 8004dae:	2208      	movs	r2, #8
 8004db0:	18ba      	adds	r2, r7, r2
 8004db2:	189a      	adds	r2, r3, r2
 8004db4:	235a      	movs	r3, #90	; 0x5a
 8004db6:	185b      	adds	r3, r3, r1
 8004db8:	2108      	movs	r1, #8
 8004dba:	468c      	mov	ip, r1
 8004dbc:	44bc      	add	ip, r7
 8004dbe:	4463      	add	r3, ip
 8004dc0:	8812      	ldrh	r2, [r2, #0]
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d3cf      	bcc.n	8004d68 <printASCIIarray+0x658>
 8004dc8:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 8004dca:	2361      	movs	r3, #97	; 0x61
 8004dcc:	228c      	movs	r2, #140	; 0x8c
 8004dce:	0052      	lsls	r2, r2, #1
 8004dd0:	189b      	adds	r3, r3, r2
 8004dd2:	2108      	movs	r1, #8
 8004dd4:	468c      	mov	ip, r1
 8004dd6:	44bc      	add	ip, r7
 8004dd8:	4463      	add	r3, ip
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d000      	beq.n	8004de2 <printASCIIarray+0x6d2>
 8004de0:	e29d      	b.n	800531e <printASCIIarray+0xc0e>
 8004de2:	466b      	mov	r3, sp
 8004de4:	4698      	mov	r8, r3
				symLen=99;
 8004de6:	245a      	movs	r4, #90	; 0x5a
 8004de8:	0015      	movs	r5, r2
 8004dea:	18a3      	adds	r3, r4, r2
 8004dec:	2208      	movs	r2, #8
 8004dee:	18ba      	adds	r2, r7, r2
 8004df0:	189a      	adds	r2, r3, r2
 8004df2:	2363      	movs	r3, #99	; 0x63
 8004df4:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8004df6:	2390      	movs	r3, #144	; 0x90
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	601c      	str	r4, [r3, #0]
 8004dfe:	1963      	adds	r3, r4, r5
 8004e00:	2208      	movs	r2, #8
 8004e02:	4694      	mov	ip, r2
 8004e04:	44bc      	add	ip, r7
 8004e06:	4463      	add	r3, ip
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	0013      	movs	r3, r2
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	21a8      	movs	r1, #168	; 0xa8
 8004e10:	0049      	lsls	r1, r1, #1
 8004e12:	2008      	movs	r0, #8
 8004e14:	1809      	adds	r1, r1, r0
 8004e16:	19c9      	adds	r1, r1, r7
 8004e18:	600b      	str	r3, [r1, #0]
 8004e1a:	663a      	str	r2, [r7, #96]	; 0x60
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	667b      	str	r3, [r7, #100]	; 0x64
 8004e20:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004e22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004e24:	0003      	movs	r3, r0
 8004e26:	0f5b      	lsrs	r3, r3, #29
 8004e28:	000d      	movs	r5, r1
 8004e2a:	00ed      	lsls	r5, r5, #3
 8004e2c:	26ec      	movs	r6, #236	; 0xec
 8004e2e:	2408      	movs	r4, #8
 8004e30:	1934      	adds	r4, r6, r4
 8004e32:	19e4      	adds	r4, r4, r7
 8004e34:	6025      	str	r5, [r4, #0]
 8004e36:	2408      	movs	r4, #8
 8004e38:	1934      	adds	r4, r6, r4
 8004e3a:	19e4      	adds	r4, r4, r7
 8004e3c:	6825      	ldr	r5, [r4, #0]
 8004e3e:	431d      	orrs	r5, r3
 8004e40:	2308      	movs	r3, #8
 8004e42:	18f3      	adds	r3, r6, r3
 8004e44:	19db      	adds	r3, r3, r7
 8004e46:	601d      	str	r5, [r3, #0]
 8004e48:	0003      	movs	r3, r0
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	21e8      	movs	r1, #232	; 0xe8
 8004e4e:	2008      	movs	r0, #8
 8004e50:	1809      	adds	r1, r1, r0
 8004e52:	19c9      	adds	r1, r1, r7
 8004e54:	600b      	str	r3, [r1, #0]
 8004e56:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e58:	2300      	movs	r3, #0
 8004e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004e5e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004e60:	0003      	movs	r3, r0
 8004e62:	0f5b      	lsrs	r3, r3, #29
 8004e64:	000d      	movs	r5, r1
 8004e66:	00ed      	lsls	r5, r5, #3
 8004e68:	26e4      	movs	r6, #228	; 0xe4
 8004e6a:	2408      	movs	r4, #8
 8004e6c:	1934      	adds	r4, r6, r4
 8004e6e:	19e4      	adds	r4, r4, r7
 8004e70:	6025      	str	r5, [r4, #0]
 8004e72:	2408      	movs	r4, #8
 8004e74:	1934      	adds	r4, r6, r4
 8004e76:	19e5      	adds	r5, r4, r7
 8004e78:	682d      	ldr	r5, [r5, #0]
 8004e7a:	431d      	orrs	r5, r3
 8004e7c:	2308      	movs	r3, #8
 8004e7e:	18f3      	adds	r3, r6, r3
 8004e80:	19db      	adds	r3, r3, r7
 8004e82:	601d      	str	r5, [r3, #0]
 8004e84:	0003      	movs	r3, r0
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	21e0      	movs	r1, #224	; 0xe0
 8004e8a:	2008      	movs	r0, #8
 8004e8c:	1809      	adds	r1, r1, r0
 8004e8e:	19c9      	adds	r1, r1, r7
 8004e90:	600b      	str	r3, [r1, #0]
 8004e92:	0013      	movs	r3, r2
 8004e94:	3307      	adds	r3, #7
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	466a      	mov	r2, sp
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	469d      	mov	sp, r3
 8004ea0:	ab02      	add	r3, sp, #8
 8004ea2:	3300      	adds	r3, #0
 8004ea4:	21a6      	movs	r1, #166	; 0xa6
 8004ea6:	0049      	lsls	r1, r1, #1
 8004ea8:	2208      	movs	r2, #8
 8004eaa:	188a      	adds	r2, r1, r2
 8004eac:	19d1      	adds	r1, r2, r7
 8004eae:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 8004eb0:	2390      	movs	r3, #144	; 0x90
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	681c      	ldr	r4, [r3, #0]
 8004eb8:	2390      	movs	r3, #144	; 0x90
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	601c      	str	r4, [r3, #0]
 8004ec0:	258c      	movs	r5, #140	; 0x8c
 8004ec2:	006d      	lsls	r5, r5, #1
 8004ec4:	1963      	adds	r3, r4, r5
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	4694      	mov	ip, r2
 8004eca:	44bc      	add	ip, r7
 8004ecc:	4463      	add	r3, ip
 8004ece:	881a      	ldrh	r2, [r3, #0]
 8004ed0:	0013      	movs	r3, r2
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	21a4      	movs	r1, #164	; 0xa4
 8004ed6:	0049      	lsls	r1, r1, #1
 8004ed8:	2008      	movs	r0, #8
 8004eda:	1809      	adds	r1, r1, r0
 8004edc:	19c9      	adds	r1, r1, r7
 8004ede:	600b      	str	r3, [r1, #0]
 8004ee0:	653a      	str	r2, [r7, #80]	; 0x50
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8004ee6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004ee8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eea:	0003      	movs	r3, r0
 8004eec:	0f5b      	lsrs	r3, r3, #29
 8004eee:	000d      	movs	r5, r1
 8004ef0:	00ed      	lsls	r5, r5, #3
 8004ef2:	26dc      	movs	r6, #220	; 0xdc
 8004ef4:	2408      	movs	r4, #8
 8004ef6:	1934      	adds	r4, r6, r4
 8004ef8:	19e4      	adds	r4, r4, r7
 8004efa:	6025      	str	r5, [r4, #0]
 8004efc:	2408      	movs	r4, #8
 8004efe:	1934      	adds	r4, r6, r4
 8004f00:	19e4      	adds	r4, r4, r7
 8004f02:	6825      	ldr	r5, [r4, #0]
 8004f04:	431d      	orrs	r5, r3
 8004f06:	2308      	movs	r3, #8
 8004f08:	18f3      	adds	r3, r6, r3
 8004f0a:	19db      	adds	r3, r3, r7
 8004f0c:	601d      	str	r5, [r3, #0]
 8004f0e:	0003      	movs	r3, r0
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	21d8      	movs	r1, #216	; 0xd8
 8004f14:	2008      	movs	r0, #8
 8004f16:	1809      	adds	r1, r1, r0
 8004f18:	19c9      	adds	r1, r1, r7
 8004f1a:	600b      	str	r3, [r1, #0]
 8004f1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f1e:	2300      	movs	r3, #0
 8004f20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f22:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004f24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f26:	0003      	movs	r3, r0
 8004f28:	0f5b      	lsrs	r3, r3, #29
 8004f2a:	000d      	movs	r5, r1
 8004f2c:	00ed      	lsls	r5, r5, #3
 8004f2e:	26d4      	movs	r6, #212	; 0xd4
 8004f30:	2408      	movs	r4, #8
 8004f32:	1934      	adds	r4, r6, r4
 8004f34:	19e4      	adds	r4, r4, r7
 8004f36:	6025      	str	r5, [r4, #0]
 8004f38:	2408      	movs	r4, #8
 8004f3a:	1934      	adds	r4, r6, r4
 8004f3c:	19e5      	adds	r5, r4, r7
 8004f3e:	682d      	ldr	r5, [r5, #0]
 8004f40:	431d      	orrs	r5, r3
 8004f42:	2308      	movs	r3, #8
 8004f44:	18f3      	adds	r3, r6, r3
 8004f46:	19db      	adds	r3, r3, r7
 8004f48:	601d      	str	r5, [r3, #0]
 8004f4a:	0003      	movs	r3, r0
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	21d0      	movs	r1, #208	; 0xd0
 8004f50:	2008      	movs	r0, #8
 8004f52:	1809      	adds	r1, r1, r0
 8004f54:	19c9      	adds	r1, r1, r7
 8004f56:	600b      	str	r3, [r1, #0]
 8004f58:	0013      	movs	r3, r2
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	466a      	mov	r2, sp
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	469d      	mov	sp, r3
 8004f66:	ab02      	add	r3, sp, #8
 8004f68:	3300      	adds	r3, #0
 8004f6a:	21a2      	movs	r1, #162	; 0xa2
 8004f6c:	0049      	lsls	r1, r1, #1
 8004f6e:	2208      	movs	r2, #8
 8004f70:	188a      	adds	r2, r1, r2
 8004f72:	19d1      	adds	r1, r2, r7
 8004f74:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 8004f76:	2390      	movs	r3, #144	; 0x90
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	681c      	ldr	r4, [r3, #0]
 8004f7e:	258c      	movs	r5, #140	; 0x8c
 8004f80:	006d      	lsls	r5, r5, #1
 8004f82:	1963      	adds	r3, r4, r5
 8004f84:	2208      	movs	r2, #8
 8004f86:	4694      	mov	ip, r2
 8004f88:	44bc      	add	ip, r7
 8004f8a:	4463      	add	r3, ip
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	0013      	movs	r3, r2
 8004f90:	3b01      	subs	r3, #1
 8004f92:	21a0      	movs	r1, #160	; 0xa0
 8004f94:	0049      	lsls	r1, r1, #1
 8004f96:	2008      	movs	r0, #8
 8004f98:	1809      	adds	r1, r1, r0
 8004f9a:	19c9      	adds	r1, r1, r7
 8004f9c:	600b      	str	r3, [r1, #0]
 8004f9e:	643a      	str	r2, [r7, #64]	; 0x40
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004fa8:	0003      	movs	r3, r0
 8004faa:	0f5b      	lsrs	r3, r3, #29
 8004fac:	000c      	movs	r4, r1
 8004fae:	00e4      	lsls	r4, r4, #3
 8004fb0:	26cc      	movs	r6, #204	; 0xcc
 8004fb2:	2508      	movs	r5, #8
 8004fb4:	1975      	adds	r5, r6, r5
 8004fb6:	19ed      	adds	r5, r5, r7
 8004fb8:	602c      	str	r4, [r5, #0]
 8004fba:	2408      	movs	r4, #8
 8004fbc:	1934      	adds	r4, r6, r4
 8004fbe:	19e4      	adds	r4, r4, r7
 8004fc0:	6824      	ldr	r4, [r4, #0]
 8004fc2:	431c      	orrs	r4, r3
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	18f3      	adds	r3, r6, r3
 8004fc8:	19db      	adds	r3, r3, r7
 8004fca:	601c      	str	r4, [r3, #0]
 8004fcc:	0003      	movs	r3, r0
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	21c8      	movs	r1, #200	; 0xc8
 8004fd2:	2008      	movs	r0, #8
 8004fd4:	1809      	adds	r1, r1, r0
 8004fd6:	19c9      	adds	r1, r1, r7
 8004fd8:	600b      	str	r3, [r1, #0]
 8004fda:	63ba      	str	r2, [r7, #56]	; 0x38
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	0f5b      	lsrs	r3, r3, #29
 8004fe8:	469c      	mov	ip, r3
 8004fea:	000c      	movs	r4, r1
 8004fec:	00e4      	lsls	r4, r4, #3
 8004fee:	26c4      	movs	r6, #196	; 0xc4
 8004ff0:	0035      	movs	r5, r6
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	18f6      	adds	r6, r6, r3
 8004ff6:	19f6      	adds	r6, r6, r7
 8004ff8:	6034      	str	r4, [r6, #0]
 8004ffa:	002c      	movs	r4, r5
 8004ffc:	0025      	movs	r5, r4
 8004ffe:	2308      	movs	r3, #8
 8005000:	18e3      	adds	r3, r4, r3
 8005002:	19de      	adds	r6, r3, r7
 8005004:	6834      	ldr	r4, [r6, #0]
 8005006:	4663      	mov	r3, ip
 8005008:	431c      	orrs	r4, r3
 800500a:	002b      	movs	r3, r5
 800500c:	2508      	movs	r5, #8
 800500e:	195b      	adds	r3, r3, r5
 8005010:	19db      	adds	r3, r3, r7
 8005012:	601c      	str	r4, [r3, #0]
 8005014:	0003      	movs	r3, r0
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	21c0      	movs	r1, #192	; 0xc0
 800501a:	2008      	movs	r0, #8
 800501c:	1809      	adds	r1, r1, r0
 800501e:	19c9      	adds	r1, r1, r7
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	0013      	movs	r3, r2
 8005024:	3307      	adds	r3, #7
 8005026:	08db      	lsrs	r3, r3, #3
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	466a      	mov	r2, sp
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	469d      	mov	sp, r3
 8005030:	ab02      	add	r3, sp, #8
 8005032:	3300      	adds	r3, #0
 8005034:	229e      	movs	r2, #158	; 0x9e
 8005036:	0052      	lsls	r2, r2, #1
 8005038:	2108      	movs	r1, #8
 800503a:	1852      	adds	r2, r2, r1
 800503c:	19d2      	adds	r2, r2, r7
 800503e:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8005040:	233f      	movs	r3, #63	; 0x3f
 8005042:	258c      	movs	r5, #140	; 0x8c
 8005044:	006d      	lsls	r5, r5, #1
 8005046:	195b      	adds	r3, r3, r5
 8005048:	2208      	movs	r2, #8
 800504a:	18ba      	adds	r2, r7, r2
 800504c:	189a      	adds	r2, r3, r2
 800504e:	2307      	movs	r3, #7
 8005050:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 8005052:	233e      	movs	r3, #62	; 0x3e
 8005054:	195b      	adds	r3, r3, r5
 8005056:	2208      	movs	r2, #8
 8005058:	18ba      	adds	r2, r7, r2
 800505a:	189a      	adds	r2, r3, r2
 800505c:	2312      	movs	r3, #18
 800505e:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8005060:	2362      	movs	r3, #98	; 0x62
 8005062:	195b      	adds	r3, r3, r5
 8005064:	2208      	movs	r2, #8
 8005066:	18ba      	adds	r2, r7, r2
 8005068:	189a      	adds	r2, r3, r2
 800506a:	2300      	movs	r3, #0
 800506c:	8013      	strh	r3, [r2, #0]
 800506e:	e109      	b.n	8005284 <printASCIIarray+0xb74>
					for(j=0;j<symLen;j++){
 8005070:	2364      	movs	r3, #100	; 0x64
 8005072:	228c      	movs	r2, #140	; 0x8c
 8005074:	0052      	lsls	r2, r2, #1
 8005076:	189b      	adds	r3, r3, r2
 8005078:	2208      	movs	r2, #8
 800507a:	18ba      	adds	r2, r7, r2
 800507c:	189a      	adds	r2, r3, r2
 800507e:	2300      	movs	r3, #0
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e041      	b.n	8005108 <printASCIIarray+0x9f8>
						weoBuffer[j]=F2[dataASCII[i]][j];
 8005084:	2362      	movs	r3, #98	; 0x62
 8005086:	218c      	movs	r1, #140	; 0x8c
 8005088:	0049      	lsls	r1, r1, #1
 800508a:	185b      	adds	r3, r3, r1
 800508c:	2208      	movs	r2, #8
 800508e:	4694      	mov	ip, r2
 8005090:	44bc      	add	ip, r7
 8005092:	4463      	add	r3, ip
 8005094:	881a      	ldrh	r2, [r3, #0]
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	185b      	adds	r3, r3, r1
 800509a:	2008      	movs	r0, #8
 800509c:	4684      	mov	ip, r0
 800509e:	2008      	movs	r0, #8
 80050a0:	4681      	mov	r9, r0
 80050a2:	44b9      	add	r9, r7
 80050a4:	44cc      	add	ip, r9
 80050a6:	4463      	add	r3, ip
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	189b      	adds	r3, r3, r2
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	001d      	movs	r5, r3
 80050b0:	2264      	movs	r2, #100	; 0x64
 80050b2:	1853      	adds	r3, r2, r1
 80050b4:	2008      	movs	r0, #8
 80050b6:	4684      	mov	ip, r0
 80050b8:	44bc      	add	ip, r7
 80050ba:	4463      	add	r3, ip
 80050bc:	8818      	ldrh	r0, [r3, #0]
 80050be:	000e      	movs	r6, r1
 80050c0:	1853      	adds	r3, r2, r1
 80050c2:	2208      	movs	r2, #8
 80050c4:	4694      	mov	ip, r2
 80050c6:	44bc      	add	ip, r7
 80050c8:	4463      	add	r3, ip
 80050ca:	881c      	ldrh	r4, [r3, #0]
 80050cc:	497a      	ldr	r1, [pc, #488]	; (80052b8 <printASCIIarray+0xba8>)
 80050ce:	002a      	movs	r2, r5
 80050d0:	0052      	lsls	r2, r2, #1
 80050d2:	1952      	adds	r2, r2, r5
 80050d4:	0153      	lsls	r3, r2, #5
 80050d6:	18d2      	adds	r2, r2, r3
 80050d8:	188b      	adds	r3, r1, r2
 80050da:	5c1b      	ldrb	r3, [r3, r0]
 80050dc:	22a6      	movs	r2, #166	; 0xa6
 80050de:	0052      	lsls	r2, r2, #1
 80050e0:	2108      	movs	r1, #8
 80050e2:	1852      	adds	r2, r2, r1
 80050e4:	19d2      	adds	r2, r2, r7
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80050ea:	2264      	movs	r2, #100	; 0x64
 80050ec:	0031      	movs	r1, r6
 80050ee:	1853      	adds	r3, r2, r1
 80050f0:	2008      	movs	r0, #8
 80050f2:	4684      	mov	ip, r0
 80050f4:	44bc      	add	ip, r7
 80050f6:	4463      	add	r3, ip
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	1852      	adds	r2, r2, r1
 80050fc:	2108      	movs	r1, #8
 80050fe:	468c      	mov	ip, r1
 8005100:	44bc      	add	ip, r7
 8005102:	4462      	add	r2, ip
 8005104:	3301      	adds	r3, #1
 8005106:	8013      	strh	r3, [r2, #0]
 8005108:	2364      	movs	r3, #100	; 0x64
 800510a:	218c      	movs	r1, #140	; 0x8c
 800510c:	0049      	lsls	r1, r1, #1
 800510e:	185b      	adds	r3, r3, r1
 8005110:	2208      	movs	r2, #8
 8005112:	18ba      	adds	r2, r7, r2
 8005114:	189a      	adds	r2, r3, r2
 8005116:	235a      	movs	r3, #90	; 0x5a
 8005118:	185b      	adds	r3, r3, r1
 800511a:	2008      	movs	r0, #8
 800511c:	4684      	mov	ip, r0
 800511e:	44bc      	add	ip, r7
 8005120:	4463      	add	r3, ip
 8005122:	8812      	ldrh	r2, [r2, #0]
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3ac      	bcc.n	8005084 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800512a:	2366      	movs	r3, #102	; 0x66
 800512c:	185b      	adds	r3, r3, r1
 800512e:	2208      	movs	r2, #8
 8005130:	18ba      	adds	r2, r7, r2
 8005132:	189a      	adds	r2, r3, r2
 8005134:	2300      	movs	r3, #0
 8005136:	8013      	strh	r3, [r2, #0]
 8005138:	e030      	b.n	800519c <printASCIIarray+0xa8c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800513a:	2066      	movs	r0, #102	; 0x66
 800513c:	248c      	movs	r4, #140	; 0x8c
 800513e:	0064      	lsls	r4, r4, #1
 8005140:	1903      	adds	r3, r0, r4
 8005142:	2208      	movs	r2, #8
 8005144:	4694      	mov	ip, r2
 8005146:	44bc      	add	ip, r7
 8005148:	4463      	add	r3, ip
 800514a:	881a      	ldrh	r2, [r3, #0]
 800514c:	25a6      	movs	r5, #166	; 0xa6
 800514e:	006d      	lsls	r5, r5, #1
 8005150:	2308      	movs	r3, #8
 8005152:	18eb      	adds	r3, r5, r3
 8005154:	19db      	adds	r3, r3, r7
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	5c9a      	ldrb	r2, [r3, r2]
 800515a:	1903      	adds	r3, r0, r4
 800515c:	2108      	movs	r1, #8
 800515e:	468c      	mov	ip, r1
 8005160:	44bc      	add	ip, r7
 8005162:	4463      	add	r3, ip
 8005164:	8819      	ldrh	r1, [r3, #0]
 8005166:	235c      	movs	r3, #92	; 0x5c
 8005168:	191b      	adds	r3, r3, r4
 800516a:	2608      	movs	r6, #8
 800516c:	46b4      	mov	ip, r6
 800516e:	44bc      	add	ip, r7
 8005170:	4463      	add	r3, ip
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	4013      	ands	r3, r2
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2208      	movs	r2, #8
 800517a:	18aa      	adds	r2, r5, r2
 800517c:	19d2      	adds	r2, r2, r7
 800517e:	6812      	ldr	r2, [r2, #0]
 8005180:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8005182:	1903      	adds	r3, r0, r4
 8005184:	2208      	movs	r2, #8
 8005186:	4694      	mov	ip, r2
 8005188:	44bc      	add	ip, r7
 800518a:	4463      	add	r3, ip
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	1902      	adds	r2, r0, r4
 8005190:	2108      	movs	r1, #8
 8005192:	468c      	mov	ip, r1
 8005194:	44bc      	add	ip, r7
 8005196:	4462      	add	r2, ip
 8005198:	3301      	adds	r3, #1
 800519a:	8013      	strh	r3, [r2, #0]
 800519c:	2366      	movs	r3, #102	; 0x66
 800519e:	258c      	movs	r5, #140	; 0x8c
 80051a0:	006d      	lsls	r5, r5, #1
 80051a2:	195b      	adds	r3, r3, r5
 80051a4:	2208      	movs	r2, #8
 80051a6:	18ba      	adds	r2, r7, r2
 80051a8:	189a      	adds	r2, r3, r2
 80051aa:	235a      	movs	r3, #90	; 0x5a
 80051ac:	195b      	adds	r3, r3, r5
 80051ae:	2108      	movs	r1, #8
 80051b0:	468c      	mov	ip, r1
 80051b2:	44bc      	add	ip, r7
 80051b4:	4463      	add	r3, ip
 80051b6:	8812      	ldrh	r2, [r2, #0]
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d3bd      	bcc.n	800513a <printASCIIarray+0xa2a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, (ASCII_X+X_increment-1), imY + ASCII_height - decY, 0xFF, weoBuffer);
 80051be:	205f      	movs	r0, #95	; 0x5f
 80051c0:	1943      	adds	r3, r0, r5
 80051c2:	2208      	movs	r2, #8
 80051c4:	18ba      	adds	r2, r7, r2
 80051c6:	189a      	adds	r2, r3, r2
 80051c8:	233f      	movs	r3, #63	; 0x3f
 80051ca:	195b      	adds	r3, r3, r5
 80051cc:	2108      	movs	r1, #8
 80051ce:	468c      	mov	ip, r1
 80051d0:	44bc      	add	ip, r7
 80051d2:	4463      	add	r3, ip
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	18d3      	adds	r3, r2, r3
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	3b01      	subs	r3, #1
 80051de:	b2dc      	uxtb	r4, r3
 80051e0:	268f      	movs	r6, #143	; 0x8f
 80051e2:	0076      	lsls	r6, r6, #1
 80051e4:	2308      	movs	r3, #8
 80051e6:	18f3      	adds	r3, r6, r3
 80051e8:	19da      	adds	r2, r3, r7
 80051ea:	213e      	movs	r1, #62	; 0x3e
 80051ec:	194b      	adds	r3, r1, r5
 80051ee:	2108      	movs	r1, #8
 80051f0:	468c      	mov	ip, r1
 80051f2:	44bc      	add	ip, r7
 80051f4:	4463      	add	r3, ip
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	18d3      	adds	r3, r2, r3
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	2160      	movs	r1, #96	; 0x60
 8005200:	1949      	adds	r1, r1, r5
 8005202:	2308      	movs	r3, #8
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	18cb      	adds	r3, r1, r3
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	b2da      	uxtb	r2, r3
 800520e:	2308      	movs	r3, #8
 8005210:	18f3      	adds	r3, r6, r3
 8005212:	19db      	adds	r3, r3, r7
 8005214:	7819      	ldrb	r1, [r3, #0]
 8005216:	0005      	movs	r5, r0
 8005218:	238c      	movs	r3, #140	; 0x8c
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	18c6      	adds	r6, r0, r3
 800521e:	2308      	movs	r3, #8
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	18f3      	adds	r3, r6, r3
 8005224:	7818      	ldrb	r0, [r3, #0]
 8005226:	26a6      	movs	r6, #166	; 0xa6
 8005228:	0076      	lsls	r6, r6, #1
 800522a:	2308      	movs	r3, #8
 800522c:	18f3      	adds	r3, r6, r3
 800522e:	19de      	adds	r6, r3, r7
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	23ff      	movs	r3, #255	; 0xff
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	0013      	movs	r3, r2
 800523a:	0022      	movs	r2, r4
 800523c:	f7fe f848 	bl	80032d0 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8005240:	208c      	movs	r0, #140	; 0x8c
 8005242:	0040      	lsls	r0, r0, #1
 8005244:	182b      	adds	r3, r5, r0
 8005246:	2208      	movs	r2, #8
 8005248:	18ba      	adds	r2, r7, r2
 800524a:	1899      	adds	r1, r3, r2
 800524c:	182b      	adds	r3, r5, r0
 800524e:	2208      	movs	r2, #8
 8005250:	18ba      	adds	r2, r7, r2
 8005252:	189a      	adds	r2, r3, r2
 8005254:	233f      	movs	r3, #63	; 0x3f
 8005256:	181b      	adds	r3, r3, r0
 8005258:	2408      	movs	r4, #8
 800525a:	46a4      	mov	ip, r4
 800525c:	44bc      	add	ip, r7
 800525e:	4463      	add	r3, ip
 8005260:	7812      	ldrb	r2, [r2, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8005268:	2262      	movs	r2, #98	; 0x62
 800526a:	1813      	adds	r3, r2, r0
 800526c:	2108      	movs	r1, #8
 800526e:	468c      	mov	ip, r1
 8005270:	44bc      	add	ip, r7
 8005272:	4463      	add	r3, ip
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	1812      	adds	r2, r2, r0
 8005278:	2108      	movs	r1, #8
 800527a:	468c      	mov	ip, r1
 800527c:	44bc      	add	ip, r7
 800527e:	4462      	add	r2, ip
 8005280:	3301      	adds	r3, #1
 8005282:	8013      	strh	r3, [r2, #0]
 8005284:	231e      	movs	r3, #30
 8005286:	33ff      	adds	r3, #255	; 0xff
 8005288:	2208      	movs	r2, #8
 800528a:	189b      	adds	r3, r3, r2
 800528c:	19db      	adds	r3, r3, r7
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	b29a      	uxth	r2, r3
 8005292:	2162      	movs	r1, #98	; 0x62
 8005294:	208c      	movs	r0, #140	; 0x8c
 8005296:	0040      	lsls	r0, r0, #1
 8005298:	180b      	adds	r3, r1, r0
 800529a:	2408      	movs	r4, #8
 800529c:	46a4      	mov	ip, r4
 800529e:	44bc      	add	ip, r7
 80052a0:	4463      	add	r3, ip
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d200      	bcs.n	80052aa <printASCIIarray+0xb9a>
 80052a8:	e6e2      	b.n	8005070 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 80052aa:	180b      	adds	r3, r1, r0
 80052ac:	2208      	movs	r2, #8
 80052ae:	18ba      	adds	r2, r7, r2
 80052b0:	189a      	adds	r2, r3, r2
 80052b2:	2300      	movs	r3, #0
 80052b4:	8013      	strh	r3, [r2, #0]
 80052b6:	e020      	b.n	80052fa <printASCIIarray+0xbea>
 80052b8:	0801292c 	.word	0x0801292c
									weoBuffer[j]=0x00;
 80052bc:	2364      	movs	r3, #100	; 0x64
 80052be:	208c      	movs	r0, #140	; 0x8c
 80052c0:	0040      	lsls	r0, r0, #1
 80052c2:	181b      	adds	r3, r3, r0
 80052c4:	2208      	movs	r2, #8
 80052c6:	4694      	mov	ip, r2
 80052c8:	44bc      	add	ip, r7
 80052ca:	4463      	add	r3, ip
 80052cc:	8819      	ldrh	r1, [r3, #0]
 80052ce:	23a6      	movs	r3, #166	; 0xa6
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2208      	movs	r2, #8
 80052d4:	189b      	adds	r3, r3, r2
 80052d6:	19db      	adds	r3, r3, r7
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	2300      	movs	r3, #0
 80052dc:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80052de:	2262      	movs	r2, #98	; 0x62
 80052e0:	1813      	adds	r3, r2, r0
 80052e2:	2108      	movs	r1, #8
 80052e4:	468c      	mov	ip, r1
 80052e6:	44bc      	add	ip, r7
 80052e8:	4463      	add	r3, ip
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	1812      	adds	r2, r2, r0
 80052ee:	2108      	movs	r1, #8
 80052f0:	468c      	mov	ip, r1
 80052f2:	44bc      	add	ip, r7
 80052f4:	4462      	add	r2, ip
 80052f6:	3301      	adds	r3, #1
 80052f8:	8013      	strh	r3, [r2, #0]
 80052fa:	2362      	movs	r3, #98	; 0x62
 80052fc:	218c      	movs	r1, #140	; 0x8c
 80052fe:	0049      	lsls	r1, r1, #1
 8005300:	185b      	adds	r3, r3, r1
 8005302:	2208      	movs	r2, #8
 8005304:	18ba      	adds	r2, r7, r2
 8005306:	189a      	adds	r2, r3, r2
 8005308:	235a      	movs	r3, #90	; 0x5a
 800530a:	185b      	adds	r3, r3, r1
 800530c:	2108      	movs	r1, #8
 800530e:	468c      	mov	ip, r1
 8005310:	44bc      	add	ip, r7
 8005312:	4463      	add	r3, ip
 8005314:	8812      	ldrh	r2, [r2, #0]
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	429a      	cmp	r2, r3
 800531a:	d3cf      	bcc.n	80052bc <printASCIIarray+0xbac>
 800531c:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 800531e:	2361      	movs	r3, #97	; 0x61
 8005320:	268c      	movs	r6, #140	; 0x8c
 8005322:	0076      	lsls	r6, r6, #1
 8005324:	199b      	adds	r3, r3, r6
 8005326:	2208      	movs	r2, #8
 8005328:	4694      	mov	ip, r2
 800532a:	44bc      	add	ip, r7
 800532c:	4463      	add	r3, ip
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d001      	beq.n	8005338 <printASCIIarray+0xc28>
 8005334:	f001 f82b 	bl	800638e <printASCIIarray+0x1c7e>
 8005338:	466b      	mov	r3, sp
 800533a:	001d      	movs	r5, r3
				symLen=304;
 800533c:	245a      	movs	r4, #90	; 0x5a
 800533e:	19a3      	adds	r3, r4, r6
 8005340:	2208      	movs	r2, #8
 8005342:	18ba      	adds	r2, r7, r2
 8005344:	189a      	adds	r2, r3, r2
 8005346:	2398      	movs	r3, #152	; 0x98
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 800534c:	607c      	str	r4, [r7, #4]
 800534e:	19a3      	adds	r3, r4, r6
 8005350:	2208      	movs	r2, #8
 8005352:	4694      	mov	ip, r2
 8005354:	44bc      	add	ip, r7
 8005356:	4463      	add	r3, ip
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	2290      	movs	r2, #144	; 0x90
 800535c:	0052      	lsls	r2, r2, #1
 800535e:	18ba      	adds	r2, r7, r2
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	2390      	movs	r3, #144	; 0x90
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3b01      	subs	r3, #1
 800536c:	219c      	movs	r1, #156	; 0x9c
 800536e:	0049      	lsls	r1, r1, #1
 8005370:	2208      	movs	r2, #8
 8005372:	188a      	adds	r2, r1, r2
 8005374:	19d1      	adds	r1, r2, r7
 8005376:	600b      	str	r3, [r1, #0]
 8005378:	2390      	movs	r3, #144	; 0x90
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	633b      	str	r3, [r7, #48]	; 0x30
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005388:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800538a:	0003      	movs	r3, r0
 800538c:	0f5b      	lsrs	r3, r3, #29
 800538e:	000e      	movs	r6, r1
 8005390:	00f6      	lsls	r6, r6, #3
 8005392:	24bc      	movs	r4, #188	; 0xbc
 8005394:	2208      	movs	r2, #8
 8005396:	18a2      	adds	r2, r4, r2
 8005398:	19d2      	adds	r2, r2, r7
 800539a:	6016      	str	r6, [r2, #0]
 800539c:	2208      	movs	r2, #8
 800539e:	18a2      	adds	r2, r4, r2
 80053a0:	19d6      	adds	r6, r2, r7
 80053a2:	6836      	ldr	r6, [r6, #0]
 80053a4:	431e      	orrs	r6, r3
 80053a6:	2308      	movs	r3, #8
 80053a8:	18e3      	adds	r3, r4, r3
 80053aa:	19db      	adds	r3, r3, r7
 80053ac:	601e      	str	r6, [r3, #0]
 80053ae:	0003      	movs	r3, r0
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	21b8      	movs	r1, #184	; 0xb8
 80053b4:	2208      	movs	r2, #8
 80053b6:	188a      	adds	r2, r1, r2
 80053b8:	19d1      	adds	r1, r2, r7
 80053ba:	600b      	str	r3, [r1, #0]
 80053bc:	2390      	movs	r3, #144	; 0x90
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	18fb      	adds	r3, r7, r3
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c6:	2300      	movs	r3, #0
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ce:	0003      	movs	r3, r0
 80053d0:	0f5b      	lsrs	r3, r3, #29
 80053d2:	469c      	mov	ip, r3
 80053d4:	000e      	movs	r6, r1
 80053d6:	00f6      	lsls	r6, r6, #3
 80053d8:	24b4      	movs	r4, #180	; 0xb4
 80053da:	0022      	movs	r2, r4
 80053dc:	2308      	movs	r3, #8
 80053de:	18e4      	adds	r4, r4, r3
 80053e0:	19e4      	adds	r4, r4, r7
 80053e2:	6026      	str	r6, [r4, #0]
 80053e4:	0016      	movs	r6, r2
 80053e6:	0032      	movs	r2, r6
 80053e8:	2308      	movs	r3, #8
 80053ea:	18f3      	adds	r3, r6, r3
 80053ec:	19dc      	adds	r4, r3, r7
 80053ee:	6826      	ldr	r6, [r4, #0]
 80053f0:	4663      	mov	r3, ip
 80053f2:	431e      	orrs	r6, r3
 80053f4:	0013      	movs	r3, r2
 80053f6:	2208      	movs	r2, #8
 80053f8:	189b      	adds	r3, r3, r2
 80053fa:	19db      	adds	r3, r3, r7
 80053fc:	601e      	str	r6, [r3, #0]
 80053fe:	0003      	movs	r3, r0
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	21b0      	movs	r1, #176	; 0xb0
 8005404:	2208      	movs	r2, #8
 8005406:	188a      	adds	r2, r1, r2
 8005408:	19d1      	adds	r1, r2, r7
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	2390      	movs	r3, #144	; 0x90
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3307      	adds	r3, #7
 8005416:	08db      	lsrs	r3, r3, #3
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	466a      	mov	r2, sp
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	469d      	mov	sp, r3
 8005420:	ab02      	add	r3, sp, #8
 8005422:	3300      	adds	r3, #0
 8005424:	229a      	movs	r2, #154	; 0x9a
 8005426:	0052      	lsls	r2, r2, #1
 8005428:	2108      	movs	r1, #8
 800542a:	1852      	adds	r2, r2, r1
 800542c:	19d2      	adds	r2, r2, r7
 800542e:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8005430:	687c      	ldr	r4, [r7, #4]
 8005432:	607c      	str	r4, [r7, #4]
 8005434:	268c      	movs	r6, #140	; 0x8c
 8005436:	0076      	lsls	r6, r6, #1
 8005438:	19a3      	adds	r3, r4, r6
 800543a:	2208      	movs	r2, #8
 800543c:	4694      	mov	ip, r2
 800543e:	44bc      	add	ip, r7
 8005440:	4463      	add	r3, ip
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	2290      	movs	r2, #144	; 0x90
 8005446:	0052      	lsls	r2, r2, #1
 8005448:	18ba      	adds	r2, r7, r2
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	2390      	movs	r3, #144	; 0x90
 800544e:	005b      	lsls	r3, r3, #1
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3b01      	subs	r3, #1
 8005456:	2198      	movs	r1, #152	; 0x98
 8005458:	0049      	lsls	r1, r1, #1
 800545a:	2208      	movs	r2, #8
 800545c:	188a      	adds	r2, r1, r2
 800545e:	19d1      	adds	r1, r2, r7
 8005460:	600b      	str	r3, [r1, #0]
 8005462:	2390      	movs	r3, #144	; 0x90
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	2300      	movs	r3, #0
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	6a38      	ldr	r0, [r7, #32]
 8005472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005474:	0003      	movs	r3, r0
 8005476:	0f5b      	lsrs	r3, r3, #29
 8005478:	000e      	movs	r6, r1
 800547a:	00f6      	lsls	r6, r6, #3
 800547c:	24ac      	movs	r4, #172	; 0xac
 800547e:	2208      	movs	r2, #8
 8005480:	18a2      	adds	r2, r4, r2
 8005482:	19d2      	adds	r2, r2, r7
 8005484:	6016      	str	r6, [r2, #0]
 8005486:	2208      	movs	r2, #8
 8005488:	18a2      	adds	r2, r4, r2
 800548a:	19d6      	adds	r6, r2, r7
 800548c:	6836      	ldr	r6, [r6, #0]
 800548e:	431e      	orrs	r6, r3
 8005490:	2308      	movs	r3, #8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	19db      	adds	r3, r3, r7
 8005496:	601e      	str	r6, [r3, #0]
 8005498:	0003      	movs	r3, r0
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	21a8      	movs	r1, #168	; 0xa8
 800549e:	2208      	movs	r2, #8
 80054a0:	188a      	adds	r2, r1, r2
 80054a2:	19d1      	adds	r1, r2, r7
 80054a4:	600b      	str	r3, [r1, #0]
 80054a6:	2390      	movs	r3, #144	; 0x90
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	2300      	movs	r3, #0
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	69b8      	ldr	r0, [r7, #24]
 80054b6:	69f9      	ldr	r1, [r7, #28]
 80054b8:	0003      	movs	r3, r0
 80054ba:	0f5b      	lsrs	r3, r3, #29
 80054bc:	469c      	mov	ip, r3
 80054be:	000e      	movs	r6, r1
 80054c0:	00f6      	lsls	r6, r6, #3
 80054c2:	24a4      	movs	r4, #164	; 0xa4
 80054c4:	0022      	movs	r2, r4
 80054c6:	2308      	movs	r3, #8
 80054c8:	18e4      	adds	r4, r4, r3
 80054ca:	19e4      	adds	r4, r4, r7
 80054cc:	6026      	str	r6, [r4, #0]
 80054ce:	0016      	movs	r6, r2
 80054d0:	0032      	movs	r2, r6
 80054d2:	2308      	movs	r3, #8
 80054d4:	18f3      	adds	r3, r6, r3
 80054d6:	19dc      	adds	r4, r3, r7
 80054d8:	6826      	ldr	r6, [r4, #0]
 80054da:	4663      	mov	r3, ip
 80054dc:	431e      	orrs	r6, r3
 80054de:	0013      	movs	r3, r2
 80054e0:	2208      	movs	r2, #8
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	19db      	adds	r3, r3, r7
 80054e6:	601e      	str	r6, [r3, #0]
 80054e8:	0003      	movs	r3, r0
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	21a0      	movs	r1, #160	; 0xa0
 80054ee:	2208      	movs	r2, #8
 80054f0:	188a      	adds	r2, r1, r2
 80054f2:	19d1      	adds	r1, r2, r7
 80054f4:	600b      	str	r3, [r1, #0]
 80054f6:	2390      	movs	r3, #144	; 0x90
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3307      	adds	r3, #7
 8005500:	08db      	lsrs	r3, r3, #3
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	466a      	mov	r2, sp
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	469d      	mov	sp, r3
 800550a:	ab02      	add	r3, sp, #8
 800550c:	3300      	adds	r3, #0
 800550e:	2296      	movs	r2, #150	; 0x96
 8005510:	0052      	lsls	r2, r2, #1
 8005512:	2108      	movs	r1, #8
 8005514:	1852      	adds	r2, r2, r1
 8005516:	19d2      	adds	r2, r2, r7
 8005518:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 800551a:	687c      	ldr	r4, [r7, #4]
 800551c:	268c      	movs	r6, #140	; 0x8c
 800551e:	0076      	lsls	r6, r6, #1
 8005520:	19a3      	adds	r3, r4, r6
 8005522:	2208      	movs	r2, #8
 8005524:	4694      	mov	ip, r2
 8005526:	44bc      	add	ip, r7
 8005528:	4463      	add	r3, ip
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	2290      	movs	r2, #144	; 0x90
 800552e:	0052      	lsls	r2, r2, #1
 8005530:	18ba      	adds	r2, r7, r2
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	2390      	movs	r3, #144	; 0x90
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	3a01      	subs	r2, #1
 800553e:	2194      	movs	r1, #148	; 0x94
 8005540:	0049      	lsls	r1, r1, #1
 8005542:	2308      	movs	r3, #8
 8005544:	18cb      	adds	r3, r1, r3
 8005546:	19d9      	adds	r1, r3, r7
 8005548:	600a      	str	r2, [r1, #0]
 800554a:	2390      	movs	r3, #144	; 0x90
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	2200      	movs	r2, #0
 8005556:	617a      	str	r2, [r7, #20]
 8005558:	6938      	ldr	r0, [r7, #16]
 800555a:	6979      	ldr	r1, [r7, #20]
 800555c:	0002      	movs	r2, r0
 800555e:	0f52      	lsrs	r2, r2, #29
 8005560:	000c      	movs	r4, r1
 8005562:	00e4      	lsls	r4, r4, #3
 8005564:	269c      	movs	r6, #156	; 0x9c
 8005566:	2308      	movs	r3, #8
 8005568:	18f3      	adds	r3, r6, r3
 800556a:	19db      	adds	r3, r3, r7
 800556c:	601c      	str	r4, [r3, #0]
 800556e:	2308      	movs	r3, #8
 8005570:	18f3      	adds	r3, r6, r3
 8005572:	19dc      	adds	r4, r3, r7
 8005574:	6824      	ldr	r4, [r4, #0]
 8005576:	4314      	orrs	r4, r2
 8005578:	2308      	movs	r3, #8
 800557a:	18f3      	adds	r3, r6, r3
 800557c:	19da      	adds	r2, r3, r7
 800557e:	6014      	str	r4, [r2, #0]
 8005580:	0002      	movs	r2, r0
 8005582:	00d2      	lsls	r2, r2, #3
 8005584:	2198      	movs	r1, #152	; 0x98
 8005586:	2308      	movs	r3, #8
 8005588:	18cb      	adds	r3, r1, r3
 800558a:	19d9      	adds	r1, r3, r7
 800558c:	600a      	str	r2, [r1, #0]
 800558e:	2390      	movs	r3, #144	; 0x90
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	60fa      	str	r2, [r7, #12]
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	0002      	movs	r2, r0
 80055a2:	0f52      	lsrs	r2, r2, #29
 80055a4:	000c      	movs	r4, r1
 80055a6:	00e4      	lsls	r4, r4, #3
 80055a8:	2694      	movs	r6, #148	; 0x94
 80055aa:	603e      	str	r6, [r7, #0]
 80055ac:	2308      	movs	r3, #8
 80055ae:	18f6      	adds	r6, r6, r3
 80055b0:	19f6      	adds	r6, r6, r7
 80055b2:	6034      	str	r4, [r6, #0]
 80055b4:	683c      	ldr	r4, [r7, #0]
 80055b6:	0023      	movs	r3, r4
 80055b8:	2608      	movs	r6, #8
 80055ba:	19a4      	adds	r4, r4, r6
 80055bc:	19e6      	adds	r6, r4, r7
 80055be:	6834      	ldr	r4, [r6, #0]
 80055c0:	4314      	orrs	r4, r2
 80055c2:	001a      	movs	r2, r3
 80055c4:	2308      	movs	r3, #8
 80055c6:	18d3      	adds	r3, r2, r3
 80055c8:	19da      	adds	r2, r3, r7
 80055ca:	6014      	str	r4, [r2, #0]
 80055cc:	0002      	movs	r2, r0
 80055ce:	00d2      	lsls	r2, r2, #3
 80055d0:	2190      	movs	r1, #144	; 0x90
 80055d2:	2308      	movs	r3, #8
 80055d4:	18cb      	adds	r3, r1, r3
 80055d6:	19d9      	adds	r1, r3, r7
 80055d8:	600a      	str	r2, [r1, #0]
 80055da:	2390      	movs	r3, #144	; 0x90
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3307      	adds	r3, #7
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	466a      	mov	r2, sp
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	469d      	mov	sp, r3
 80055ee:	ab02      	add	r3, sp, #8
 80055f0:	3300      	adds	r3, #0
 80055f2:	2292      	movs	r2, #146	; 0x92
 80055f4:	0052      	lsls	r2, r2, #1
 80055f6:	2108      	movs	r1, #8
 80055f8:	1852      	adds	r2, r2, r1
 80055fa:	19d2      	adds	r2, r2, r7
 80055fc:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 80055fe:	233f      	movs	r3, #63	; 0x3f
 8005600:	268c      	movs	r6, #140	; 0x8c
 8005602:	0076      	lsls	r6, r6, #1
 8005604:	199b      	adds	r3, r3, r6
 8005606:	2208      	movs	r2, #8
 8005608:	4694      	mov	ip, r2
 800560a:	44bc      	add	ip, r7
 800560c:	4463      	add	r3, ip
 800560e:	2210      	movs	r2, #16
 8005610:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8005612:	233e      	movs	r3, #62	; 0x3e
 8005614:	199b      	adds	r3, r3, r6
 8005616:	2208      	movs	r2, #8
 8005618:	4694      	mov	ip, r2
 800561a:	44bc      	add	ip, r7
 800561c:	4463      	add	r3, ip
 800561e:	2226      	movs	r2, #38	; 0x26
 8005620:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8005622:	2362      	movs	r3, #98	; 0x62
 8005624:	199b      	adds	r3, r3, r6
 8005626:	2208      	movs	r2, #8
 8005628:	4694      	mov	ip, r2
 800562a:	44bc      	add	ip, r7
 800562c:	4463      	add	r3, ip
 800562e:	2200      	movs	r2, #0
 8005630:	801a      	strh	r2, [r3, #0]
 8005632:	f000 fd30 	bl	8006096 <printASCIIarray+0x1986>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8005636:	2162      	movs	r1, #98	; 0x62
 8005638:	248c      	movs	r4, #140	; 0x8c
 800563a:	0064      	lsls	r4, r4, #1
 800563c:	190b      	adds	r3, r1, r4
 800563e:	2208      	movs	r2, #8
 8005640:	4694      	mov	ip, r2
 8005642:	44bc      	add	ip, r7
 8005644:	4463      	add	r3, ip
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	2080      	movs	r0, #128	; 0x80
 800564a:	1902      	adds	r2, r0, r4
 800564c:	2608      	movs	r6, #8
 800564e:	46b4      	mov	ip, r6
 8005650:	2608      	movs	r6, #8
 8005652:	46b0      	mov	r8, r6
 8005654:	44b8      	add	r8, r7
 8005656:	44c4      	add	ip, r8
 8005658:	4462      	add	r2, ip
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b20      	cmp	r3, #32
 8005662:	d111      	bne.n	8005688 <printASCIIarray+0xf78>
 8005664:	190b      	adds	r3, r1, r4
 8005666:	2208      	movs	r2, #8
 8005668:	4694      	mov	ip, r2
 800566a:	44bc      	add	ip, r7
 800566c:	4463      	add	r3, ip
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	1902      	adds	r2, r0, r4
 8005672:	2108      	movs	r1, #8
 8005674:	468c      	mov	ip, r1
 8005676:	2108      	movs	r1, #8
 8005678:	4688      	mov	r8, r1
 800567a:	44b8      	add	r8, r7
 800567c:	44c4      	add	ip, r8
 800567e:	4462      	add	r2, ip
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8005688:	2162      	movs	r1, #98	; 0x62
 800568a:	248c      	movs	r4, #140	; 0x8c
 800568c:	0064      	lsls	r4, r4, #1
 800568e:	190b      	adds	r3, r1, r4
 8005690:	2208      	movs	r2, #8
 8005692:	4694      	mov	ip, r2
 8005694:	44bc      	add	ip, r7
 8005696:	4463      	add	r3, ip
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	2080      	movs	r0, #128	; 0x80
 800569c:	1902      	adds	r2, r0, r4
 800569e:	2608      	movs	r6, #8
 80056a0:	46b4      	mov	ip, r6
 80056a2:	2608      	movs	r6, #8
 80056a4:	46b0      	mov	r8, r6
 80056a6:	44b8      	add	r8, r7
 80056a8:	44c4      	add	ip, r8
 80056aa:	4462      	add	r2, ip
 80056ac:	6812      	ldr	r2, [r2, #0]
 80056ae:	18d3      	adds	r3, r2, r3
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b21      	cmp	r3, #33	; 0x21
 80056b4:	d111      	bne.n	80056da <printASCIIarray+0xfca>
 80056b6:	190b      	adds	r3, r1, r4
 80056b8:	2208      	movs	r2, #8
 80056ba:	4694      	mov	ip, r2
 80056bc:	44bc      	add	ip, r7
 80056be:	4463      	add	r3, ip
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	1902      	adds	r2, r0, r4
 80056c4:	2108      	movs	r1, #8
 80056c6:	468c      	mov	ip, r1
 80056c8:	2108      	movs	r1, #8
 80056ca:	4688      	mov	r8, r1
 80056cc:	44b8      	add	r8, r7
 80056ce:	44c4      	add	ip, r8
 80056d0:	4462      	add	r2, ip
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	18d3      	adds	r3, r2, r3
 80056d6:	2201      	movs	r2, #1
 80056d8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 80056da:	2162      	movs	r1, #98	; 0x62
 80056dc:	248c      	movs	r4, #140	; 0x8c
 80056de:	0064      	lsls	r4, r4, #1
 80056e0:	190b      	adds	r3, r1, r4
 80056e2:	2208      	movs	r2, #8
 80056e4:	4694      	mov	ip, r2
 80056e6:	44bc      	add	ip, r7
 80056e8:	4463      	add	r3, ip
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	2080      	movs	r0, #128	; 0x80
 80056ee:	1902      	adds	r2, r0, r4
 80056f0:	2608      	movs	r6, #8
 80056f2:	46b4      	mov	ip, r6
 80056f4:	2608      	movs	r6, #8
 80056f6:	46b0      	mov	r8, r6
 80056f8:	44b8      	add	r8, r7
 80056fa:	44c4      	add	ip, r8
 80056fc:	4462      	add	r2, ip
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	18d3      	adds	r3, r2, r3
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b25      	cmp	r3, #37	; 0x25
 8005706:	d111      	bne.n	800572c <printASCIIarray+0x101c>
 8005708:	190b      	adds	r3, r1, r4
 800570a:	2208      	movs	r2, #8
 800570c:	4694      	mov	ip, r2
 800570e:	44bc      	add	ip, r7
 8005710:	4463      	add	r3, ip
 8005712:	881b      	ldrh	r3, [r3, #0]
 8005714:	1902      	adds	r2, r0, r4
 8005716:	2108      	movs	r1, #8
 8005718:	468c      	mov	ip, r1
 800571a:	2108      	movs	r1, #8
 800571c:	4688      	mov	r8, r1
 800571e:	44b8      	add	r8, r7
 8005720:	44c4      	add	ip, r8
 8005722:	4462      	add	r2, ip
 8005724:	6812      	ldr	r2, [r2, #0]
 8005726:	18d3      	adds	r3, r2, r3
 8005728:	2202      	movs	r2, #2
 800572a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 800572c:	2162      	movs	r1, #98	; 0x62
 800572e:	248c      	movs	r4, #140	; 0x8c
 8005730:	0064      	lsls	r4, r4, #1
 8005732:	190b      	adds	r3, r1, r4
 8005734:	2208      	movs	r2, #8
 8005736:	4694      	mov	ip, r2
 8005738:	44bc      	add	ip, r7
 800573a:	4463      	add	r3, ip
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	2080      	movs	r0, #128	; 0x80
 8005740:	1902      	adds	r2, r0, r4
 8005742:	2608      	movs	r6, #8
 8005744:	46b4      	mov	ip, r6
 8005746:	2608      	movs	r6, #8
 8005748:	46b0      	mov	r8, r6
 800574a:	44b8      	add	r8, r7
 800574c:	44c4      	add	ip, r8
 800574e:	4462      	add	r2, ip
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	18d3      	adds	r3, r2, r3
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b28      	cmp	r3, #40	; 0x28
 8005758:	d111      	bne.n	800577e <printASCIIarray+0x106e>
 800575a:	190b      	adds	r3, r1, r4
 800575c:	2208      	movs	r2, #8
 800575e:	4694      	mov	ip, r2
 8005760:	44bc      	add	ip, r7
 8005762:	4463      	add	r3, ip
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	1902      	adds	r2, r0, r4
 8005768:	2108      	movs	r1, #8
 800576a:	468c      	mov	ip, r1
 800576c:	2108      	movs	r1, #8
 800576e:	4688      	mov	r8, r1
 8005770:	44b8      	add	r8, r7
 8005772:	44c4      	add	ip, r8
 8005774:	4462      	add	r2, ip
 8005776:	6812      	ldr	r2, [r2, #0]
 8005778:	18d3      	adds	r3, r2, r3
 800577a:	2203      	movs	r2, #3
 800577c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 800577e:	2162      	movs	r1, #98	; 0x62
 8005780:	248c      	movs	r4, #140	; 0x8c
 8005782:	0064      	lsls	r4, r4, #1
 8005784:	190b      	adds	r3, r1, r4
 8005786:	2208      	movs	r2, #8
 8005788:	4694      	mov	ip, r2
 800578a:	44bc      	add	ip, r7
 800578c:	4463      	add	r3, ip
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	2080      	movs	r0, #128	; 0x80
 8005792:	1902      	adds	r2, r0, r4
 8005794:	2608      	movs	r6, #8
 8005796:	46b4      	mov	ip, r6
 8005798:	2608      	movs	r6, #8
 800579a:	46b0      	mov	r8, r6
 800579c:	44b8      	add	r8, r7
 800579e:	44c4      	add	ip, r8
 80057a0:	4462      	add	r2, ip
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	18d3      	adds	r3, r2, r3
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b29      	cmp	r3, #41	; 0x29
 80057aa:	d111      	bne.n	80057d0 <printASCIIarray+0x10c0>
 80057ac:	190b      	adds	r3, r1, r4
 80057ae:	2208      	movs	r2, #8
 80057b0:	4694      	mov	ip, r2
 80057b2:	44bc      	add	ip, r7
 80057b4:	4463      	add	r3, ip
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	1902      	adds	r2, r0, r4
 80057ba:	2108      	movs	r1, #8
 80057bc:	468c      	mov	ip, r1
 80057be:	2108      	movs	r1, #8
 80057c0:	4688      	mov	r8, r1
 80057c2:	44b8      	add	r8, r7
 80057c4:	44c4      	add	ip, r8
 80057c6:	4462      	add	r2, ip
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	18d3      	adds	r3, r2, r3
 80057cc:	2204      	movs	r2, #4
 80057ce:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 80057d0:	2162      	movs	r1, #98	; 0x62
 80057d2:	248c      	movs	r4, #140	; 0x8c
 80057d4:	0064      	lsls	r4, r4, #1
 80057d6:	190b      	adds	r3, r1, r4
 80057d8:	2208      	movs	r2, #8
 80057da:	4694      	mov	ip, r2
 80057dc:	44bc      	add	ip, r7
 80057de:	4463      	add	r3, ip
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	2080      	movs	r0, #128	; 0x80
 80057e4:	1902      	adds	r2, r0, r4
 80057e6:	2608      	movs	r6, #8
 80057e8:	46b4      	mov	ip, r6
 80057ea:	2608      	movs	r6, #8
 80057ec:	46b0      	mov	r8, r6
 80057ee:	44b8      	add	r8, r7
 80057f0:	44c4      	add	ip, r8
 80057f2:	4462      	add	r2, ip
 80057f4:	6812      	ldr	r2, [r2, #0]
 80057f6:	18d3      	adds	r3, r2, r3
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b2a      	cmp	r3, #42	; 0x2a
 80057fc:	d111      	bne.n	8005822 <printASCIIarray+0x1112>
 80057fe:	190b      	adds	r3, r1, r4
 8005800:	2208      	movs	r2, #8
 8005802:	4694      	mov	ip, r2
 8005804:	44bc      	add	ip, r7
 8005806:	4463      	add	r3, ip
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	1902      	adds	r2, r0, r4
 800580c:	2108      	movs	r1, #8
 800580e:	468c      	mov	ip, r1
 8005810:	2108      	movs	r1, #8
 8005812:	4688      	mov	r8, r1
 8005814:	44b8      	add	r8, r7
 8005816:	44c4      	add	ip, r8
 8005818:	4462      	add	r2, ip
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	18d3      	adds	r3, r2, r3
 800581e:	2205      	movs	r2, #5
 8005820:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8005822:	2162      	movs	r1, #98	; 0x62
 8005824:	248c      	movs	r4, #140	; 0x8c
 8005826:	0064      	lsls	r4, r4, #1
 8005828:	190b      	adds	r3, r1, r4
 800582a:	2208      	movs	r2, #8
 800582c:	4694      	mov	ip, r2
 800582e:	44bc      	add	ip, r7
 8005830:	4463      	add	r3, ip
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	2080      	movs	r0, #128	; 0x80
 8005836:	1902      	adds	r2, r0, r4
 8005838:	2608      	movs	r6, #8
 800583a:	46b4      	mov	ip, r6
 800583c:	2608      	movs	r6, #8
 800583e:	46b0      	mov	r8, r6
 8005840:	44b8      	add	r8, r7
 8005842:	44c4      	add	ip, r8
 8005844:	4462      	add	r2, ip
 8005846:	6812      	ldr	r2, [r2, #0]
 8005848:	18d3      	adds	r3, r2, r3
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b2b      	cmp	r3, #43	; 0x2b
 800584e:	d111      	bne.n	8005874 <printASCIIarray+0x1164>
 8005850:	190b      	adds	r3, r1, r4
 8005852:	2208      	movs	r2, #8
 8005854:	4694      	mov	ip, r2
 8005856:	44bc      	add	ip, r7
 8005858:	4463      	add	r3, ip
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	1902      	adds	r2, r0, r4
 800585e:	2108      	movs	r1, #8
 8005860:	468c      	mov	ip, r1
 8005862:	2108      	movs	r1, #8
 8005864:	4688      	mov	r8, r1
 8005866:	44b8      	add	r8, r7
 8005868:	44c4      	add	ip, r8
 800586a:	4462      	add	r2, ip
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	18d3      	adds	r3, r2, r3
 8005870:	2206      	movs	r2, #6
 8005872:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8005874:	2162      	movs	r1, #98	; 0x62
 8005876:	248c      	movs	r4, #140	; 0x8c
 8005878:	0064      	lsls	r4, r4, #1
 800587a:	190b      	adds	r3, r1, r4
 800587c:	2208      	movs	r2, #8
 800587e:	4694      	mov	ip, r2
 8005880:	44bc      	add	ip, r7
 8005882:	4463      	add	r3, ip
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	2080      	movs	r0, #128	; 0x80
 8005888:	1902      	adds	r2, r0, r4
 800588a:	2608      	movs	r6, #8
 800588c:	46b4      	mov	ip, r6
 800588e:	2608      	movs	r6, #8
 8005890:	46b0      	mov	r8, r6
 8005892:	44b8      	add	r8, r7
 8005894:	44c4      	add	ip, r8
 8005896:	4462      	add	r2, ip
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b2c      	cmp	r3, #44	; 0x2c
 80058a0:	d111      	bne.n	80058c6 <printASCIIarray+0x11b6>
 80058a2:	190b      	adds	r3, r1, r4
 80058a4:	2208      	movs	r2, #8
 80058a6:	4694      	mov	ip, r2
 80058a8:	44bc      	add	ip, r7
 80058aa:	4463      	add	r3, ip
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	1902      	adds	r2, r0, r4
 80058b0:	2108      	movs	r1, #8
 80058b2:	468c      	mov	ip, r1
 80058b4:	2108      	movs	r1, #8
 80058b6:	4688      	mov	r8, r1
 80058b8:	44b8      	add	r8, r7
 80058ba:	44c4      	add	ip, r8
 80058bc:	4462      	add	r2, ip
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	18d3      	adds	r3, r2, r3
 80058c2:	2207      	movs	r2, #7
 80058c4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 80058c6:	2162      	movs	r1, #98	; 0x62
 80058c8:	248c      	movs	r4, #140	; 0x8c
 80058ca:	0064      	lsls	r4, r4, #1
 80058cc:	190b      	adds	r3, r1, r4
 80058ce:	2208      	movs	r2, #8
 80058d0:	4694      	mov	ip, r2
 80058d2:	44bc      	add	ip, r7
 80058d4:	4463      	add	r3, ip
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	2080      	movs	r0, #128	; 0x80
 80058da:	1902      	adds	r2, r0, r4
 80058dc:	2608      	movs	r6, #8
 80058de:	46b4      	mov	ip, r6
 80058e0:	2608      	movs	r6, #8
 80058e2:	46b0      	mov	r8, r6
 80058e4:	44b8      	add	r8, r7
 80058e6:	44c4      	add	ip, r8
 80058e8:	4462      	add	r2, ip
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	18d3      	adds	r3, r2, r3
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b2d      	cmp	r3, #45	; 0x2d
 80058f2:	d111      	bne.n	8005918 <printASCIIarray+0x1208>
 80058f4:	190b      	adds	r3, r1, r4
 80058f6:	2208      	movs	r2, #8
 80058f8:	4694      	mov	ip, r2
 80058fa:	44bc      	add	ip, r7
 80058fc:	4463      	add	r3, ip
 80058fe:	881b      	ldrh	r3, [r3, #0]
 8005900:	1902      	adds	r2, r0, r4
 8005902:	2108      	movs	r1, #8
 8005904:	468c      	mov	ip, r1
 8005906:	2108      	movs	r1, #8
 8005908:	4688      	mov	r8, r1
 800590a:	44b8      	add	r8, r7
 800590c:	44c4      	add	ip, r8
 800590e:	4462      	add	r2, ip
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	18d3      	adds	r3, r2, r3
 8005914:	2208      	movs	r2, #8
 8005916:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 8005918:	2162      	movs	r1, #98	; 0x62
 800591a:	248c      	movs	r4, #140	; 0x8c
 800591c:	0064      	lsls	r4, r4, #1
 800591e:	190b      	adds	r3, r1, r4
 8005920:	2208      	movs	r2, #8
 8005922:	4694      	mov	ip, r2
 8005924:	44bc      	add	ip, r7
 8005926:	4463      	add	r3, ip
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	2080      	movs	r0, #128	; 0x80
 800592c:	1902      	adds	r2, r0, r4
 800592e:	2608      	movs	r6, #8
 8005930:	46b4      	mov	ip, r6
 8005932:	2608      	movs	r6, #8
 8005934:	46b0      	mov	r8, r6
 8005936:	44b8      	add	r8, r7
 8005938:	44c4      	add	ip, r8
 800593a:	4462      	add	r2, ip
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	18d3      	adds	r3, r2, r3
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b2e      	cmp	r3, #46	; 0x2e
 8005944:	d111      	bne.n	800596a <printASCIIarray+0x125a>
 8005946:	190b      	adds	r3, r1, r4
 8005948:	2208      	movs	r2, #8
 800594a:	4694      	mov	ip, r2
 800594c:	44bc      	add	ip, r7
 800594e:	4463      	add	r3, ip
 8005950:	881b      	ldrh	r3, [r3, #0]
 8005952:	1902      	adds	r2, r0, r4
 8005954:	2108      	movs	r1, #8
 8005956:	468c      	mov	ip, r1
 8005958:	2108      	movs	r1, #8
 800595a:	4688      	mov	r8, r1
 800595c:	44b8      	add	r8, r7
 800595e:	44c4      	add	ip, r8
 8005960:	4462      	add	r2, ip
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	2209      	movs	r2, #9
 8005968:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 800596a:	2162      	movs	r1, #98	; 0x62
 800596c:	248c      	movs	r4, #140	; 0x8c
 800596e:	0064      	lsls	r4, r4, #1
 8005970:	190b      	adds	r3, r1, r4
 8005972:	2208      	movs	r2, #8
 8005974:	4694      	mov	ip, r2
 8005976:	44bc      	add	ip, r7
 8005978:	4463      	add	r3, ip
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	2080      	movs	r0, #128	; 0x80
 800597e:	1902      	adds	r2, r0, r4
 8005980:	2608      	movs	r6, #8
 8005982:	46b4      	mov	ip, r6
 8005984:	2608      	movs	r6, #8
 8005986:	46b0      	mov	r8, r6
 8005988:	44b8      	add	r8, r7
 800598a:	44c4      	add	ip, r8
 800598c:	4462      	add	r2, ip
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	18d3      	adds	r3, r2, r3
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b2f      	cmp	r3, #47	; 0x2f
 8005996:	d111      	bne.n	80059bc <printASCIIarray+0x12ac>
 8005998:	190b      	adds	r3, r1, r4
 800599a:	2208      	movs	r2, #8
 800599c:	4694      	mov	ip, r2
 800599e:	44bc      	add	ip, r7
 80059a0:	4463      	add	r3, ip
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	1902      	adds	r2, r0, r4
 80059a6:	2108      	movs	r1, #8
 80059a8:	468c      	mov	ip, r1
 80059aa:	2108      	movs	r1, #8
 80059ac:	4688      	mov	r8, r1
 80059ae:	44b8      	add	r8, r7
 80059b0:	44c4      	add	ip, r8
 80059b2:	4462      	add	r2, ip
 80059b4:	6812      	ldr	r2, [r2, #0]
 80059b6:	18d3      	adds	r3, r2, r3
 80059b8:	220a      	movs	r2, #10
 80059ba:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 80059bc:	2162      	movs	r1, #98	; 0x62
 80059be:	248c      	movs	r4, #140	; 0x8c
 80059c0:	0064      	lsls	r4, r4, #1
 80059c2:	190b      	adds	r3, r1, r4
 80059c4:	2208      	movs	r2, #8
 80059c6:	4694      	mov	ip, r2
 80059c8:	44bc      	add	ip, r7
 80059ca:	4463      	add	r3, ip
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	2080      	movs	r0, #128	; 0x80
 80059d0:	1902      	adds	r2, r0, r4
 80059d2:	2608      	movs	r6, #8
 80059d4:	46b4      	mov	ip, r6
 80059d6:	2608      	movs	r6, #8
 80059d8:	46b0      	mov	r8, r6
 80059da:	44b8      	add	r8, r7
 80059dc:	44c4      	add	ip, r8
 80059de:	4462      	add	r2, ip
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b30      	cmp	r3, #48	; 0x30
 80059e8:	d111      	bne.n	8005a0e <printASCIIarray+0x12fe>
 80059ea:	190b      	adds	r3, r1, r4
 80059ec:	2208      	movs	r2, #8
 80059ee:	4694      	mov	ip, r2
 80059f0:	44bc      	add	ip, r7
 80059f2:	4463      	add	r3, ip
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	1902      	adds	r2, r0, r4
 80059f8:	2108      	movs	r1, #8
 80059fa:	468c      	mov	ip, r1
 80059fc:	2108      	movs	r1, #8
 80059fe:	4688      	mov	r8, r1
 8005a00:	44b8      	add	r8, r7
 8005a02:	44c4      	add	ip, r8
 8005a04:	4462      	add	r2, ip
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	18d3      	adds	r3, r2, r3
 8005a0a:	220b      	movs	r2, #11
 8005a0c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8005a0e:	2162      	movs	r1, #98	; 0x62
 8005a10:	248c      	movs	r4, #140	; 0x8c
 8005a12:	0064      	lsls	r4, r4, #1
 8005a14:	190b      	adds	r3, r1, r4
 8005a16:	2208      	movs	r2, #8
 8005a18:	4694      	mov	ip, r2
 8005a1a:	44bc      	add	ip, r7
 8005a1c:	4463      	add	r3, ip
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	2080      	movs	r0, #128	; 0x80
 8005a22:	1902      	adds	r2, r0, r4
 8005a24:	2608      	movs	r6, #8
 8005a26:	46b4      	mov	ip, r6
 8005a28:	2608      	movs	r6, #8
 8005a2a:	46b0      	mov	r8, r6
 8005a2c:	44b8      	add	r8, r7
 8005a2e:	44c4      	add	ip, r8
 8005a30:	4462      	add	r2, ip
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	18d3      	adds	r3, r2, r3
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b31      	cmp	r3, #49	; 0x31
 8005a3a:	d111      	bne.n	8005a60 <printASCIIarray+0x1350>
 8005a3c:	190b      	adds	r3, r1, r4
 8005a3e:	2208      	movs	r2, #8
 8005a40:	4694      	mov	ip, r2
 8005a42:	44bc      	add	ip, r7
 8005a44:	4463      	add	r3, ip
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	1902      	adds	r2, r0, r4
 8005a4a:	2108      	movs	r1, #8
 8005a4c:	468c      	mov	ip, r1
 8005a4e:	2108      	movs	r1, #8
 8005a50:	4688      	mov	r8, r1
 8005a52:	44b8      	add	r8, r7
 8005a54:	44c4      	add	ip, r8
 8005a56:	4462      	add	r2, ip
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	18d3      	adds	r3, r2, r3
 8005a5c:	220c      	movs	r2, #12
 8005a5e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8005a60:	2162      	movs	r1, #98	; 0x62
 8005a62:	248c      	movs	r4, #140	; 0x8c
 8005a64:	0064      	lsls	r4, r4, #1
 8005a66:	190b      	adds	r3, r1, r4
 8005a68:	2208      	movs	r2, #8
 8005a6a:	4694      	mov	ip, r2
 8005a6c:	44bc      	add	ip, r7
 8005a6e:	4463      	add	r3, ip
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	2080      	movs	r0, #128	; 0x80
 8005a74:	1902      	adds	r2, r0, r4
 8005a76:	2608      	movs	r6, #8
 8005a78:	46b4      	mov	ip, r6
 8005a7a:	2608      	movs	r6, #8
 8005a7c:	46b0      	mov	r8, r6
 8005a7e:	44b8      	add	r8, r7
 8005a80:	44c4      	add	ip, r8
 8005a82:	4462      	add	r2, ip
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	18d3      	adds	r3, r2, r3
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b32      	cmp	r3, #50	; 0x32
 8005a8c:	d111      	bne.n	8005ab2 <printASCIIarray+0x13a2>
 8005a8e:	190b      	adds	r3, r1, r4
 8005a90:	2208      	movs	r2, #8
 8005a92:	4694      	mov	ip, r2
 8005a94:	44bc      	add	ip, r7
 8005a96:	4463      	add	r3, ip
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	1902      	adds	r2, r0, r4
 8005a9c:	2108      	movs	r1, #8
 8005a9e:	468c      	mov	ip, r1
 8005aa0:	2108      	movs	r1, #8
 8005aa2:	4688      	mov	r8, r1
 8005aa4:	44b8      	add	r8, r7
 8005aa6:	44c4      	add	ip, r8
 8005aa8:	4462      	add	r2, ip
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	220d      	movs	r2, #13
 8005ab0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 8005ab2:	2162      	movs	r1, #98	; 0x62
 8005ab4:	248c      	movs	r4, #140	; 0x8c
 8005ab6:	0064      	lsls	r4, r4, #1
 8005ab8:	190b      	adds	r3, r1, r4
 8005aba:	2208      	movs	r2, #8
 8005abc:	4694      	mov	ip, r2
 8005abe:	44bc      	add	ip, r7
 8005ac0:	4463      	add	r3, ip
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	2080      	movs	r0, #128	; 0x80
 8005ac6:	1902      	adds	r2, r0, r4
 8005ac8:	2608      	movs	r6, #8
 8005aca:	46b4      	mov	ip, r6
 8005acc:	2608      	movs	r6, #8
 8005ace:	46b0      	mov	r8, r6
 8005ad0:	44b8      	add	r8, r7
 8005ad2:	44c4      	add	ip, r8
 8005ad4:	4462      	add	r2, ip
 8005ad6:	6812      	ldr	r2, [r2, #0]
 8005ad8:	18d3      	adds	r3, r2, r3
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b33      	cmp	r3, #51	; 0x33
 8005ade:	d111      	bne.n	8005b04 <printASCIIarray+0x13f4>
 8005ae0:	190b      	adds	r3, r1, r4
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	4694      	mov	ip, r2
 8005ae6:	44bc      	add	ip, r7
 8005ae8:	4463      	add	r3, ip
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	1902      	adds	r2, r0, r4
 8005aee:	2108      	movs	r1, #8
 8005af0:	468c      	mov	ip, r1
 8005af2:	2108      	movs	r1, #8
 8005af4:	4688      	mov	r8, r1
 8005af6:	44b8      	add	r8, r7
 8005af8:	44c4      	add	ip, r8
 8005afa:	4462      	add	r2, ip
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	18d3      	adds	r3, r2, r3
 8005b00:	220e      	movs	r2, #14
 8005b02:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 8005b04:	2162      	movs	r1, #98	; 0x62
 8005b06:	248c      	movs	r4, #140	; 0x8c
 8005b08:	0064      	lsls	r4, r4, #1
 8005b0a:	190b      	adds	r3, r1, r4
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	4694      	mov	ip, r2
 8005b10:	44bc      	add	ip, r7
 8005b12:	4463      	add	r3, ip
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	2080      	movs	r0, #128	; 0x80
 8005b18:	1902      	adds	r2, r0, r4
 8005b1a:	2608      	movs	r6, #8
 8005b1c:	46b4      	mov	ip, r6
 8005b1e:	2608      	movs	r6, #8
 8005b20:	46b0      	mov	r8, r6
 8005b22:	44b8      	add	r8, r7
 8005b24:	44c4      	add	ip, r8
 8005b26:	4462      	add	r2, ip
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	18d3      	adds	r3, r2, r3
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b34      	cmp	r3, #52	; 0x34
 8005b30:	d111      	bne.n	8005b56 <printASCIIarray+0x1446>
 8005b32:	190b      	adds	r3, r1, r4
 8005b34:	2208      	movs	r2, #8
 8005b36:	4694      	mov	ip, r2
 8005b38:	44bc      	add	ip, r7
 8005b3a:	4463      	add	r3, ip
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	1902      	adds	r2, r0, r4
 8005b40:	2108      	movs	r1, #8
 8005b42:	468c      	mov	ip, r1
 8005b44:	2108      	movs	r1, #8
 8005b46:	4688      	mov	r8, r1
 8005b48:	44b8      	add	r8, r7
 8005b4a:	44c4      	add	ip, r8
 8005b4c:	4462      	add	r2, ip
 8005b4e:	6812      	ldr	r2, [r2, #0]
 8005b50:	18d3      	adds	r3, r2, r3
 8005b52:	220f      	movs	r2, #15
 8005b54:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 8005b56:	2162      	movs	r1, #98	; 0x62
 8005b58:	248c      	movs	r4, #140	; 0x8c
 8005b5a:	0064      	lsls	r4, r4, #1
 8005b5c:	190b      	adds	r3, r1, r4
 8005b5e:	2208      	movs	r2, #8
 8005b60:	4694      	mov	ip, r2
 8005b62:	44bc      	add	ip, r7
 8005b64:	4463      	add	r3, ip
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	2080      	movs	r0, #128	; 0x80
 8005b6a:	1902      	adds	r2, r0, r4
 8005b6c:	2608      	movs	r6, #8
 8005b6e:	46b4      	mov	ip, r6
 8005b70:	2608      	movs	r6, #8
 8005b72:	46b0      	mov	r8, r6
 8005b74:	44b8      	add	r8, r7
 8005b76:	44c4      	add	ip, r8
 8005b78:	4462      	add	r2, ip
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	18d3      	adds	r3, r2, r3
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b35      	cmp	r3, #53	; 0x35
 8005b82:	d111      	bne.n	8005ba8 <printASCIIarray+0x1498>
 8005b84:	190b      	adds	r3, r1, r4
 8005b86:	2208      	movs	r2, #8
 8005b88:	4694      	mov	ip, r2
 8005b8a:	44bc      	add	ip, r7
 8005b8c:	4463      	add	r3, ip
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	1902      	adds	r2, r0, r4
 8005b92:	2108      	movs	r1, #8
 8005b94:	468c      	mov	ip, r1
 8005b96:	2108      	movs	r1, #8
 8005b98:	4688      	mov	r8, r1
 8005b9a:	44b8      	add	r8, r7
 8005b9c:	44c4      	add	ip, r8
 8005b9e:	4462      	add	r2, ip
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	18d3      	adds	r3, r2, r3
 8005ba4:	2210      	movs	r2, #16
 8005ba6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 8005ba8:	2162      	movs	r1, #98	; 0x62
 8005baa:	248c      	movs	r4, #140	; 0x8c
 8005bac:	0064      	lsls	r4, r4, #1
 8005bae:	190b      	adds	r3, r1, r4
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	4694      	mov	ip, r2
 8005bb4:	44bc      	add	ip, r7
 8005bb6:	4463      	add	r3, ip
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	2080      	movs	r0, #128	; 0x80
 8005bbc:	1902      	adds	r2, r0, r4
 8005bbe:	2608      	movs	r6, #8
 8005bc0:	46b4      	mov	ip, r6
 8005bc2:	2608      	movs	r6, #8
 8005bc4:	46b0      	mov	r8, r6
 8005bc6:	44b8      	add	r8, r7
 8005bc8:	44c4      	add	ip, r8
 8005bca:	4462      	add	r2, ip
 8005bcc:	6812      	ldr	r2, [r2, #0]
 8005bce:	18d3      	adds	r3, r2, r3
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b36      	cmp	r3, #54	; 0x36
 8005bd4:	d111      	bne.n	8005bfa <printASCIIarray+0x14ea>
 8005bd6:	190b      	adds	r3, r1, r4
 8005bd8:	2208      	movs	r2, #8
 8005bda:	4694      	mov	ip, r2
 8005bdc:	44bc      	add	ip, r7
 8005bde:	4463      	add	r3, ip
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	1902      	adds	r2, r0, r4
 8005be4:	2108      	movs	r1, #8
 8005be6:	468c      	mov	ip, r1
 8005be8:	2108      	movs	r1, #8
 8005bea:	4688      	mov	r8, r1
 8005bec:	44b8      	add	r8, r7
 8005bee:	44c4      	add	ip, r8
 8005bf0:	4462      	add	r2, ip
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	18d3      	adds	r3, r2, r3
 8005bf6:	2211      	movs	r2, #17
 8005bf8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 8005bfa:	2162      	movs	r1, #98	; 0x62
 8005bfc:	248c      	movs	r4, #140	; 0x8c
 8005bfe:	0064      	lsls	r4, r4, #1
 8005c00:	190b      	adds	r3, r1, r4
 8005c02:	2208      	movs	r2, #8
 8005c04:	4694      	mov	ip, r2
 8005c06:	44bc      	add	ip, r7
 8005c08:	4463      	add	r3, ip
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	2080      	movs	r0, #128	; 0x80
 8005c0e:	1902      	adds	r2, r0, r4
 8005c10:	2608      	movs	r6, #8
 8005c12:	46b4      	mov	ip, r6
 8005c14:	2608      	movs	r6, #8
 8005c16:	46b0      	mov	r8, r6
 8005c18:	44b8      	add	r8, r7
 8005c1a:	44c4      	add	ip, r8
 8005c1c:	4462      	add	r2, ip
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	18d3      	adds	r3, r2, r3
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b37      	cmp	r3, #55	; 0x37
 8005c26:	d111      	bne.n	8005c4c <printASCIIarray+0x153c>
 8005c28:	190b      	adds	r3, r1, r4
 8005c2a:	2208      	movs	r2, #8
 8005c2c:	4694      	mov	ip, r2
 8005c2e:	44bc      	add	ip, r7
 8005c30:	4463      	add	r3, ip
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	1902      	adds	r2, r0, r4
 8005c36:	2108      	movs	r1, #8
 8005c38:	468c      	mov	ip, r1
 8005c3a:	2108      	movs	r1, #8
 8005c3c:	4688      	mov	r8, r1
 8005c3e:	44b8      	add	r8, r7
 8005c40:	44c4      	add	ip, r8
 8005c42:	4462      	add	r2, ip
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	2212      	movs	r2, #18
 8005c4a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8005c4c:	2162      	movs	r1, #98	; 0x62
 8005c4e:	248c      	movs	r4, #140	; 0x8c
 8005c50:	0064      	lsls	r4, r4, #1
 8005c52:	190b      	adds	r3, r1, r4
 8005c54:	2208      	movs	r2, #8
 8005c56:	4694      	mov	ip, r2
 8005c58:	44bc      	add	ip, r7
 8005c5a:	4463      	add	r3, ip
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	2080      	movs	r0, #128	; 0x80
 8005c60:	1902      	adds	r2, r0, r4
 8005c62:	2608      	movs	r6, #8
 8005c64:	46b4      	mov	ip, r6
 8005c66:	2608      	movs	r6, #8
 8005c68:	46b0      	mov	r8, r6
 8005c6a:	44b8      	add	r8, r7
 8005c6c:	44c4      	add	ip, r8
 8005c6e:	4462      	add	r2, ip
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	18d3      	adds	r3, r2, r3
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b38      	cmp	r3, #56	; 0x38
 8005c78:	d111      	bne.n	8005c9e <printASCIIarray+0x158e>
 8005c7a:	190b      	adds	r3, r1, r4
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	4694      	mov	ip, r2
 8005c80:	44bc      	add	ip, r7
 8005c82:	4463      	add	r3, ip
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	1902      	adds	r2, r0, r4
 8005c88:	2108      	movs	r1, #8
 8005c8a:	468c      	mov	ip, r1
 8005c8c:	2108      	movs	r1, #8
 8005c8e:	4688      	mov	r8, r1
 8005c90:	44b8      	add	r8, r7
 8005c92:	44c4      	add	ip, r8
 8005c94:	4462      	add	r2, ip
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	18d3      	adds	r3, r2, r3
 8005c9a:	2213      	movs	r2, #19
 8005c9c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 8005c9e:	2162      	movs	r1, #98	; 0x62
 8005ca0:	248c      	movs	r4, #140	; 0x8c
 8005ca2:	0064      	lsls	r4, r4, #1
 8005ca4:	190b      	adds	r3, r1, r4
 8005ca6:	2208      	movs	r2, #8
 8005ca8:	4694      	mov	ip, r2
 8005caa:	44bc      	add	ip, r7
 8005cac:	4463      	add	r3, ip
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	2080      	movs	r0, #128	; 0x80
 8005cb2:	1902      	adds	r2, r0, r4
 8005cb4:	2608      	movs	r6, #8
 8005cb6:	46b4      	mov	ip, r6
 8005cb8:	2608      	movs	r6, #8
 8005cba:	46b0      	mov	r8, r6
 8005cbc:	44b8      	add	r8, r7
 8005cbe:	44c4      	add	ip, r8
 8005cc0:	4462      	add	r2, ip
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	18d3      	adds	r3, r2, r3
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b39      	cmp	r3, #57	; 0x39
 8005cca:	d111      	bne.n	8005cf0 <printASCIIarray+0x15e0>
 8005ccc:	190b      	adds	r3, r1, r4
 8005cce:	2208      	movs	r2, #8
 8005cd0:	4694      	mov	ip, r2
 8005cd2:	44bc      	add	ip, r7
 8005cd4:	4463      	add	r3, ip
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	1902      	adds	r2, r0, r4
 8005cda:	2108      	movs	r1, #8
 8005cdc:	468c      	mov	ip, r1
 8005cde:	2108      	movs	r1, #8
 8005ce0:	4688      	mov	r8, r1
 8005ce2:	44b8      	add	r8, r7
 8005ce4:	44c4      	add	ip, r8
 8005ce6:	4462      	add	r2, ip
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	18d3      	adds	r3, r2, r3
 8005cec:	2214      	movs	r2, #20
 8005cee:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 8005cf0:	2162      	movs	r1, #98	; 0x62
 8005cf2:	248c      	movs	r4, #140	; 0x8c
 8005cf4:	0064      	lsls	r4, r4, #1
 8005cf6:	190b      	adds	r3, r1, r4
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	4694      	mov	ip, r2
 8005cfc:	44bc      	add	ip, r7
 8005cfe:	4463      	add	r3, ip
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	2080      	movs	r0, #128	; 0x80
 8005d04:	1902      	adds	r2, r0, r4
 8005d06:	2608      	movs	r6, #8
 8005d08:	46b4      	mov	ip, r6
 8005d0a:	2608      	movs	r6, #8
 8005d0c:	46b0      	mov	r8, r6
 8005d0e:	44b8      	add	r8, r7
 8005d10:	44c4      	add	ip, r8
 8005d12:	4462      	add	r2, ip
 8005d14:	6812      	ldr	r2, [r2, #0]
 8005d16:	18d3      	adds	r3, r2, r3
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b3a      	cmp	r3, #58	; 0x3a
 8005d1c:	d111      	bne.n	8005d42 <printASCIIarray+0x1632>
 8005d1e:	190b      	adds	r3, r1, r4
 8005d20:	2208      	movs	r2, #8
 8005d22:	4694      	mov	ip, r2
 8005d24:	44bc      	add	ip, r7
 8005d26:	4463      	add	r3, ip
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	1902      	adds	r2, r0, r4
 8005d2c:	2108      	movs	r1, #8
 8005d2e:	468c      	mov	ip, r1
 8005d30:	2108      	movs	r1, #8
 8005d32:	4688      	mov	r8, r1
 8005d34:	44b8      	add	r8, r7
 8005d36:	44c4      	add	ip, r8
 8005d38:	4462      	add	r2, ip
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	18d3      	adds	r3, r2, r3
 8005d3e:	2215      	movs	r2, #21
 8005d40:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8005d42:	2162      	movs	r1, #98	; 0x62
 8005d44:	248c      	movs	r4, #140	; 0x8c
 8005d46:	0064      	lsls	r4, r4, #1
 8005d48:	190b      	adds	r3, r1, r4
 8005d4a:	2208      	movs	r2, #8
 8005d4c:	4694      	mov	ip, r2
 8005d4e:	44bc      	add	ip, r7
 8005d50:	4463      	add	r3, ip
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	2080      	movs	r0, #128	; 0x80
 8005d56:	1902      	adds	r2, r0, r4
 8005d58:	2608      	movs	r6, #8
 8005d5a:	46b4      	mov	ip, r6
 8005d5c:	2608      	movs	r6, #8
 8005d5e:	46b0      	mov	r8, r6
 8005d60:	44b8      	add	r8, r7
 8005d62:	44c4      	add	ip, r8
 8005d64:	4462      	add	r2, ip
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b3b      	cmp	r3, #59	; 0x3b
 8005d6e:	d111      	bne.n	8005d94 <printASCIIarray+0x1684>
 8005d70:	190b      	adds	r3, r1, r4
 8005d72:	2208      	movs	r2, #8
 8005d74:	4694      	mov	ip, r2
 8005d76:	44bc      	add	ip, r7
 8005d78:	4463      	add	r3, ip
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	1902      	adds	r2, r0, r4
 8005d7e:	2108      	movs	r1, #8
 8005d80:	468c      	mov	ip, r1
 8005d82:	2108      	movs	r1, #8
 8005d84:	4688      	mov	r8, r1
 8005d86:	44b8      	add	r8, r7
 8005d88:	44c4      	add	ip, r8
 8005d8a:	4462      	add	r2, ip
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	18d3      	adds	r3, r2, r3
 8005d90:	2216      	movs	r2, #22
 8005d92:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8005d94:	2162      	movs	r1, #98	; 0x62
 8005d96:	248c      	movs	r4, #140	; 0x8c
 8005d98:	0064      	lsls	r4, r4, #1
 8005d9a:	190b      	adds	r3, r1, r4
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	4694      	mov	ip, r2
 8005da0:	44bc      	add	ip, r7
 8005da2:	4463      	add	r3, ip
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	2080      	movs	r0, #128	; 0x80
 8005da8:	1902      	adds	r2, r0, r4
 8005daa:	2608      	movs	r6, #8
 8005dac:	46b4      	mov	ip, r6
 8005dae:	2608      	movs	r6, #8
 8005db0:	46b0      	mov	r8, r6
 8005db2:	44b8      	add	r8, r7
 8005db4:	44c4      	add	ip, r8
 8005db6:	4462      	add	r2, ip
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	18d3      	adds	r3, r2, r3
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b3c      	cmp	r3, #60	; 0x3c
 8005dc0:	d111      	bne.n	8005de6 <printASCIIarray+0x16d6>
 8005dc2:	190b      	adds	r3, r1, r4
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	4694      	mov	ip, r2
 8005dc8:	44bc      	add	ip, r7
 8005dca:	4463      	add	r3, ip
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	1902      	adds	r2, r0, r4
 8005dd0:	2108      	movs	r1, #8
 8005dd2:	468c      	mov	ip, r1
 8005dd4:	2108      	movs	r1, #8
 8005dd6:	4688      	mov	r8, r1
 8005dd8:	44b8      	add	r8, r7
 8005dda:	44c4      	add	ip, r8
 8005ddc:	4462      	add	r2, ip
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	18d3      	adds	r3, r2, r3
 8005de2:	2217      	movs	r2, #23
 8005de4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 8005de6:	2162      	movs	r1, #98	; 0x62
 8005de8:	248c      	movs	r4, #140	; 0x8c
 8005dea:	0064      	lsls	r4, r4, #1
 8005dec:	190b      	adds	r3, r1, r4
 8005dee:	2208      	movs	r2, #8
 8005df0:	4694      	mov	ip, r2
 8005df2:	44bc      	add	ip, r7
 8005df4:	4463      	add	r3, ip
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	2080      	movs	r0, #128	; 0x80
 8005dfa:	1902      	adds	r2, r0, r4
 8005dfc:	2608      	movs	r6, #8
 8005dfe:	46b4      	mov	ip, r6
 8005e00:	2608      	movs	r6, #8
 8005e02:	46b0      	mov	r8, r6
 8005e04:	44b8      	add	r8, r7
 8005e06:	44c4      	add	ip, r8
 8005e08:	4462      	add	r2, ip
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b3d      	cmp	r3, #61	; 0x3d
 8005e12:	d111      	bne.n	8005e38 <printASCIIarray+0x1728>
 8005e14:	190b      	adds	r3, r1, r4
 8005e16:	2208      	movs	r2, #8
 8005e18:	4694      	mov	ip, r2
 8005e1a:	44bc      	add	ip, r7
 8005e1c:	4463      	add	r3, ip
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	1902      	adds	r2, r0, r4
 8005e22:	2108      	movs	r1, #8
 8005e24:	468c      	mov	ip, r1
 8005e26:	2108      	movs	r1, #8
 8005e28:	4688      	mov	r8, r1
 8005e2a:	44b8      	add	r8, r7
 8005e2c:	44c4      	add	ip, r8
 8005e2e:	4462      	add	r2, ip
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	18d3      	adds	r3, r2, r3
 8005e34:	2218      	movs	r2, #24
 8005e36:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 8005e38:	2162      	movs	r1, #98	; 0x62
 8005e3a:	248c      	movs	r4, #140	; 0x8c
 8005e3c:	0064      	lsls	r4, r4, #1
 8005e3e:	190b      	adds	r3, r1, r4
 8005e40:	2208      	movs	r2, #8
 8005e42:	4694      	mov	ip, r2
 8005e44:	44bc      	add	ip, r7
 8005e46:	4463      	add	r3, ip
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	2080      	movs	r0, #128	; 0x80
 8005e4c:	1902      	adds	r2, r0, r4
 8005e4e:	2608      	movs	r6, #8
 8005e50:	46b4      	mov	ip, r6
 8005e52:	2608      	movs	r6, #8
 8005e54:	46b0      	mov	r8, r6
 8005e56:	44b8      	add	r8, r7
 8005e58:	44c4      	add	ip, r8
 8005e5a:	4462      	add	r2, ip
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	18d3      	adds	r3, r2, r3
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b3e      	cmp	r3, #62	; 0x3e
 8005e64:	d111      	bne.n	8005e8a <printASCIIarray+0x177a>
 8005e66:	190b      	adds	r3, r1, r4
 8005e68:	2208      	movs	r2, #8
 8005e6a:	4694      	mov	ip, r2
 8005e6c:	44bc      	add	ip, r7
 8005e6e:	4463      	add	r3, ip
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	1902      	adds	r2, r0, r4
 8005e74:	2108      	movs	r1, #8
 8005e76:	468c      	mov	ip, r1
 8005e78:	2108      	movs	r1, #8
 8005e7a:	4688      	mov	r8, r1
 8005e7c:	44b8      	add	r8, r7
 8005e7e:	44c4      	add	ip, r8
 8005e80:	4462      	add	r2, ip
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	18d3      	adds	r3, r2, r3
 8005e86:	2219      	movs	r2, #25
 8005e88:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 8005e8a:	2162      	movs	r1, #98	; 0x62
 8005e8c:	248c      	movs	r4, #140	; 0x8c
 8005e8e:	0064      	lsls	r4, r4, #1
 8005e90:	190b      	adds	r3, r1, r4
 8005e92:	2208      	movs	r2, #8
 8005e94:	4694      	mov	ip, r2
 8005e96:	44bc      	add	ip, r7
 8005e98:	4463      	add	r3, ip
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	2080      	movs	r0, #128	; 0x80
 8005e9e:	1902      	adds	r2, r0, r4
 8005ea0:	2608      	movs	r6, #8
 8005ea2:	46b4      	mov	ip, r6
 8005ea4:	2608      	movs	r6, #8
 8005ea6:	46b0      	mov	r8, r6
 8005ea8:	44b8      	add	r8, r7
 8005eaa:	44c4      	add	ip, r8
 8005eac:	4462      	add	r2, ip
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	18d3      	adds	r3, r2, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b3f      	cmp	r3, #63	; 0x3f
 8005eb6:	d111      	bne.n	8005edc <printASCIIarray+0x17cc>
 8005eb8:	190b      	adds	r3, r1, r4
 8005eba:	2208      	movs	r2, #8
 8005ebc:	4694      	mov	ip, r2
 8005ebe:	44bc      	add	ip, r7
 8005ec0:	4463      	add	r3, ip
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	1902      	adds	r2, r0, r4
 8005ec6:	2108      	movs	r1, #8
 8005ec8:	468c      	mov	ip, r1
 8005eca:	2108      	movs	r1, #8
 8005ecc:	4688      	mov	r8, r1
 8005ece:	44b8      	add	r8, r7
 8005ed0:	44c4      	add	ip, r8
 8005ed2:	4462      	add	r2, ip
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	18d3      	adds	r3, r2, r3
 8005ed8:	221a      	movs	r2, #26
 8005eda:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 8005edc:	2162      	movs	r1, #98	; 0x62
 8005ede:	248c      	movs	r4, #140	; 0x8c
 8005ee0:	0064      	lsls	r4, r4, #1
 8005ee2:	190b      	adds	r3, r1, r4
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	4694      	mov	ip, r2
 8005ee8:	44bc      	add	ip, r7
 8005eea:	4463      	add	r3, ip
 8005eec:	881b      	ldrh	r3, [r3, #0]
 8005eee:	2080      	movs	r0, #128	; 0x80
 8005ef0:	1902      	adds	r2, r0, r4
 8005ef2:	2608      	movs	r6, #8
 8005ef4:	46b4      	mov	ip, r6
 8005ef6:	2608      	movs	r6, #8
 8005ef8:	46b0      	mov	r8, r6
 8005efa:	44b8      	add	r8, r7
 8005efc:	44c4      	add	ip, r8
 8005efe:	4462      	add	r2, ip
 8005f00:	6812      	ldr	r2, [r2, #0]
 8005f02:	18d3      	adds	r3, r2, r3
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b5b      	cmp	r3, #91	; 0x5b
 8005f08:	d111      	bne.n	8005f2e <printASCIIarray+0x181e>
 8005f0a:	190b      	adds	r3, r1, r4
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	4694      	mov	ip, r2
 8005f10:	44bc      	add	ip, r7
 8005f12:	4463      	add	r3, ip
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	1902      	adds	r2, r0, r4
 8005f18:	2108      	movs	r1, #8
 8005f1a:	468c      	mov	ip, r1
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	4688      	mov	r8, r1
 8005f20:	44b8      	add	r8, r7
 8005f22:	44c4      	add	ip, r8
 8005f24:	4462      	add	r2, ip
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	18d3      	adds	r3, r2, r3
 8005f2a:	221b      	movs	r2, #27
 8005f2c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 8005f2e:	2162      	movs	r1, #98	; 0x62
 8005f30:	248c      	movs	r4, #140	; 0x8c
 8005f32:	0064      	lsls	r4, r4, #1
 8005f34:	190b      	adds	r3, r1, r4
 8005f36:	2208      	movs	r2, #8
 8005f38:	4694      	mov	ip, r2
 8005f3a:	44bc      	add	ip, r7
 8005f3c:	4463      	add	r3, ip
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	2080      	movs	r0, #128	; 0x80
 8005f42:	1902      	adds	r2, r0, r4
 8005f44:	2608      	movs	r6, #8
 8005f46:	46b4      	mov	ip, r6
 8005f48:	2608      	movs	r6, #8
 8005f4a:	46b0      	mov	r8, r6
 8005f4c:	44b8      	add	r8, r7
 8005f4e:	44c4      	add	ip, r8
 8005f50:	4462      	add	r2, ip
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b5c      	cmp	r3, #92	; 0x5c
 8005f5a:	d111      	bne.n	8005f80 <printASCIIarray+0x1870>
 8005f5c:	190b      	adds	r3, r1, r4
 8005f5e:	2208      	movs	r2, #8
 8005f60:	4694      	mov	ip, r2
 8005f62:	44bc      	add	ip, r7
 8005f64:	4463      	add	r3, ip
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	1902      	adds	r2, r0, r4
 8005f6a:	2108      	movs	r1, #8
 8005f6c:	468c      	mov	ip, r1
 8005f6e:	2108      	movs	r1, #8
 8005f70:	4688      	mov	r8, r1
 8005f72:	44b8      	add	r8, r7
 8005f74:	44c4      	add	ip, r8
 8005f76:	4462      	add	r2, ip
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	18d3      	adds	r3, r2, r3
 8005f7c:	221c      	movs	r2, #28
 8005f7e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8005f80:	2162      	movs	r1, #98	; 0x62
 8005f82:	248c      	movs	r4, #140	; 0x8c
 8005f84:	0064      	lsls	r4, r4, #1
 8005f86:	190b      	adds	r3, r1, r4
 8005f88:	2208      	movs	r2, #8
 8005f8a:	4694      	mov	ip, r2
 8005f8c:	44bc      	add	ip, r7
 8005f8e:	4463      	add	r3, ip
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	2080      	movs	r0, #128	; 0x80
 8005f94:	1902      	adds	r2, r0, r4
 8005f96:	2608      	movs	r6, #8
 8005f98:	46b4      	mov	ip, r6
 8005f9a:	2608      	movs	r6, #8
 8005f9c:	46b0      	mov	r8, r6
 8005f9e:	44b8      	add	r8, r7
 8005fa0:	44c4      	add	ip, r8
 8005fa2:	4462      	add	r2, ip
 8005fa4:	6812      	ldr	r2, [r2, #0]
 8005fa6:	18d3      	adds	r3, r2, r3
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b5d      	cmp	r3, #93	; 0x5d
 8005fac:	d111      	bne.n	8005fd2 <printASCIIarray+0x18c2>
 8005fae:	190b      	adds	r3, r1, r4
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	4694      	mov	ip, r2
 8005fb4:	44bc      	add	ip, r7
 8005fb6:	4463      	add	r3, ip
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	1902      	adds	r2, r0, r4
 8005fbc:	2108      	movs	r1, #8
 8005fbe:	468c      	mov	ip, r1
 8005fc0:	2108      	movs	r1, #8
 8005fc2:	4688      	mov	r8, r1
 8005fc4:	44b8      	add	r8, r7
 8005fc6:	44c4      	add	ip, r8
 8005fc8:	4462      	add	r2, ip
 8005fca:	6812      	ldr	r2, [r2, #0]
 8005fcc:	18d3      	adds	r3, r2, r3
 8005fce:	221d      	movs	r2, #29
 8005fd0:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 8005fd2:	2162      	movs	r1, #98	; 0x62
 8005fd4:	248c      	movs	r4, #140	; 0x8c
 8005fd6:	0064      	lsls	r4, r4, #1
 8005fd8:	190b      	adds	r3, r1, r4
 8005fda:	2208      	movs	r2, #8
 8005fdc:	4694      	mov	ip, r2
 8005fde:	44bc      	add	ip, r7
 8005fe0:	4463      	add	r3, ip
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	2080      	movs	r0, #128	; 0x80
 8005fe6:	1902      	adds	r2, r0, r4
 8005fe8:	2608      	movs	r6, #8
 8005fea:	46b4      	mov	ip, r6
 8005fec:	2608      	movs	r6, #8
 8005fee:	46b0      	mov	r8, r6
 8005ff0:	44b8      	add	r8, r7
 8005ff2:	44c4      	add	ip, r8
 8005ff4:	4462      	add	r2, ip
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	18d3      	adds	r3, r2, r3
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b5f      	cmp	r3, #95	; 0x5f
 8005ffe:	d111      	bne.n	8006024 <printASCIIarray+0x1914>
 8006000:	190b      	adds	r3, r1, r4
 8006002:	2208      	movs	r2, #8
 8006004:	4694      	mov	ip, r2
 8006006:	44bc      	add	ip, r7
 8006008:	4463      	add	r3, ip
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	1902      	adds	r2, r0, r4
 800600e:	2108      	movs	r1, #8
 8006010:	468c      	mov	ip, r1
 8006012:	2108      	movs	r1, #8
 8006014:	4688      	mov	r8, r1
 8006016:	44b8      	add	r8, r7
 8006018:	44c4      	add	ip, r8
 800601a:	4462      	add	r2, ip
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	18d3      	adds	r3, r2, r3
 8006020:	221e      	movs	r2, #30
 8006022:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8006024:	2162      	movs	r1, #98	; 0x62
 8006026:	248c      	movs	r4, #140	; 0x8c
 8006028:	0064      	lsls	r4, r4, #1
 800602a:	190b      	adds	r3, r1, r4
 800602c:	2208      	movs	r2, #8
 800602e:	4694      	mov	ip, r2
 8006030:	44bc      	add	ip, r7
 8006032:	4463      	add	r3, ip
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	2080      	movs	r0, #128	; 0x80
 8006038:	1902      	adds	r2, r0, r4
 800603a:	2608      	movs	r6, #8
 800603c:	46b4      	mov	ip, r6
 800603e:	2608      	movs	r6, #8
 8006040:	46b0      	mov	r8, r6
 8006042:	44b8      	add	r8, r7
 8006044:	44c4      	add	ip, r8
 8006046:	4462      	add	r2, ip
 8006048:	6812      	ldr	r2, [r2, #0]
 800604a:	18d3      	adds	r3, r2, r3
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b7c      	cmp	r3, #124	; 0x7c
 8006050:	d111      	bne.n	8006076 <printASCIIarray+0x1966>
 8006052:	190b      	adds	r3, r1, r4
 8006054:	2208      	movs	r2, #8
 8006056:	4694      	mov	ip, r2
 8006058:	44bc      	add	ip, r7
 800605a:	4463      	add	r3, ip
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	1902      	adds	r2, r0, r4
 8006060:	2108      	movs	r1, #8
 8006062:	468c      	mov	ip, r1
 8006064:	2108      	movs	r1, #8
 8006066:	4688      	mov	r8, r1
 8006068:	44b8      	add	r8, r7
 800606a:	44c4      	add	ip, r8
 800606c:	4462      	add	r2, ip
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	18d3      	adds	r3, r2, r3
 8006072:	221f      	movs	r2, #31
 8006074:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8006076:	2162      	movs	r1, #98	; 0x62
 8006078:	208c      	movs	r0, #140	; 0x8c
 800607a:	0040      	lsls	r0, r0, #1
 800607c:	180b      	adds	r3, r1, r0
 800607e:	2208      	movs	r2, #8
 8006080:	4694      	mov	ip, r2
 8006082:	44bc      	add	ip, r7
 8006084:	4463      	add	r3, ip
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	180b      	adds	r3, r1, r0
 800608a:	2108      	movs	r1, #8
 800608c:	468c      	mov	ip, r1
 800608e:	44bc      	add	ip, r7
 8006090:	4463      	add	r3, ip
 8006092:	3201      	adds	r2, #1
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	231e      	movs	r3, #30
 8006098:	33ff      	adds	r3, #255	; 0xff
 800609a:	2208      	movs	r2, #8
 800609c:	189b      	adds	r3, r3, r2
 800609e:	19db      	adds	r3, r3, r7
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2162      	movs	r1, #98	; 0x62
 80060a6:	208c      	movs	r0, #140	; 0x8c
 80060a8:	0040      	lsls	r0, r0, #1
 80060aa:	180a      	adds	r2, r1, r0
 80060ac:	2408      	movs	r4, #8
 80060ae:	46a4      	mov	ip, r4
 80060b0:	44bc      	add	ip, r7
 80060b2:	4462      	add	r2, ip
 80060b4:	8812      	ldrh	r2, [r2, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d201      	bcs.n	80060be <printASCIIarray+0x19ae>
 80060ba:	f7ff fabc 	bl	8005636 <printASCIIarray+0xf26>
				}
				for(i=0;i<strLen;i++){
 80060be:	180b      	adds	r3, r1, r0
 80060c0:	2208      	movs	r2, #8
 80060c2:	4694      	mov	ip, r2
 80060c4:	44bc      	add	ip, r7
 80060c6:	4463      	add	r3, ip
 80060c8:	2200      	movs	r2, #0
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	e113      	b.n	80062f6 <printASCIIarray+0x1be6>
					for(j=0;j<symLen;j++){
 80060ce:	2364      	movs	r3, #100	; 0x64
 80060d0:	228c      	movs	r2, #140	; 0x8c
 80060d2:	0052      	lsls	r2, r2, #1
 80060d4:	189b      	adds	r3, r3, r2
 80060d6:	2208      	movs	r2, #8
 80060d8:	4694      	mov	ip, r2
 80060da:	44bc      	add	ip, r7
 80060dc:	4463      	add	r3, ip
 80060de:	2200      	movs	r2, #0
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	e041      	b.n	8006168 <printASCIIarray+0x1a58>
						weoBuffer[j]=F3[dataASCII[i]][j];
 80060e4:	2362      	movs	r3, #98	; 0x62
 80060e6:	218c      	movs	r1, #140	; 0x8c
 80060e8:	0049      	lsls	r1, r1, #1
 80060ea:	185b      	adds	r3, r3, r1
 80060ec:	2208      	movs	r2, #8
 80060ee:	4694      	mov	ip, r2
 80060f0:	44bc      	add	ip, r7
 80060f2:	4463      	add	r3, ip
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	2280      	movs	r2, #128	; 0x80
 80060f8:	1852      	adds	r2, r2, r1
 80060fa:	2008      	movs	r0, #8
 80060fc:	4684      	mov	ip, r0
 80060fe:	2008      	movs	r0, #8
 8006100:	4680      	mov	r8, r0
 8006102:	44b8      	add	r8, r7
 8006104:	44c4      	add	ip, r8
 8006106:	4462      	add	r2, ip
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	18d3      	adds	r3, r2, r3
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	001a      	movs	r2, r3
 8006110:	2664      	movs	r6, #100	; 0x64
 8006112:	1873      	adds	r3, r6, r1
 8006114:	2008      	movs	r0, #8
 8006116:	4684      	mov	ip, r0
 8006118:	44bc      	add	ip, r7
 800611a:	4463      	add	r3, ip
 800611c:	8818      	ldrh	r0, [r3, #0]
 800611e:	1873      	adds	r3, r6, r1
 8006120:	2108      	movs	r1, #8
 8006122:	468c      	mov	ip, r1
 8006124:	44bc      	add	ip, r7
 8006126:	4463      	add	r3, ip
 8006128:	8819      	ldrh	r1, [r3, #0]
 800612a:	4ca1      	ldr	r4, [pc, #644]	; (80063b0 <printASCIIarray+0x1ca0>)
 800612c:	0013      	movs	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	189b      	adds	r3, r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	189b      	adds	r3, r3, r2
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	18e3      	adds	r3, r4, r3
 800613a:	5c1a      	ldrb	r2, [r3, r0]
 800613c:	239a      	movs	r3, #154	; 0x9a
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2008      	movs	r0, #8
 8006142:	181b      	adds	r3, r3, r0
 8006144:	19db      	adds	r3, r3, r7
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 800614a:	218c      	movs	r1, #140	; 0x8c
 800614c:	0049      	lsls	r1, r1, #1
 800614e:	1873      	adds	r3, r6, r1
 8006150:	2208      	movs	r2, #8
 8006152:	4694      	mov	ip, r2
 8006154:	44bc      	add	ip, r7
 8006156:	4463      	add	r3, ip
 8006158:	881a      	ldrh	r2, [r3, #0]
 800615a:	1873      	adds	r3, r6, r1
 800615c:	2108      	movs	r1, #8
 800615e:	468c      	mov	ip, r1
 8006160:	44bc      	add	ip, r7
 8006162:	4463      	add	r3, ip
 8006164:	3201      	adds	r2, #1
 8006166:	801a      	strh	r2, [r3, #0]
 8006168:	2364      	movs	r3, #100	; 0x64
 800616a:	218c      	movs	r1, #140	; 0x8c
 800616c:	0049      	lsls	r1, r1, #1
 800616e:	185b      	adds	r3, r3, r1
 8006170:	2208      	movs	r2, #8
 8006172:	18ba      	adds	r2, r7, r2
 8006174:	189a      	adds	r2, r3, r2
 8006176:	235a      	movs	r3, #90	; 0x5a
 8006178:	185b      	adds	r3, r3, r1
 800617a:	2008      	movs	r0, #8
 800617c:	4684      	mov	ip, r0
 800617e:	44bc      	add	ip, r7
 8006180:	4463      	add	r3, ip
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d3ac      	bcc.n	80060e4 <printASCIIarray+0x19d4>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800618a:	2366      	movs	r3, #102	; 0x66
 800618c:	185b      	adds	r3, r3, r1
 800618e:	2208      	movs	r2, #8
 8006190:	4694      	mov	ip, r2
 8006192:	44bc      	add	ip, r7
 8006194:	4463      	add	r3, ip
 8006196:	2200      	movs	r2, #0
 8006198:	801a      	strh	r2, [r3, #0]
 800619a:	e032      	b.n	8006202 <printASCIIarray+0x1af2>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800619c:	2066      	movs	r0, #102	; 0x66
 800619e:	248c      	movs	r4, #140	; 0x8c
 80061a0:	0064      	lsls	r4, r4, #1
 80061a2:	1903      	adds	r3, r0, r4
 80061a4:	2208      	movs	r2, #8
 80061a6:	4694      	mov	ip, r2
 80061a8:	44bc      	add	ip, r7
 80061aa:	4463      	add	r3, ip
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	269a      	movs	r6, #154	; 0x9a
 80061b0:	0076      	lsls	r6, r6, #1
 80061b2:	2208      	movs	r2, #8
 80061b4:	18b2      	adds	r2, r6, r2
 80061b6:	19d2      	adds	r2, r2, r7
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	5cd2      	ldrb	r2, [r2, r3]
 80061bc:	1903      	adds	r3, r0, r4
 80061be:	2108      	movs	r1, #8
 80061c0:	468c      	mov	ip, r1
 80061c2:	44bc      	add	ip, r7
 80061c4:	4463      	add	r3, ip
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	4698      	mov	r8, r3
 80061ca:	215c      	movs	r1, #92	; 0x5c
 80061cc:	1909      	adds	r1, r1, r4
 80061ce:	2308      	movs	r3, #8
 80061d0:	469c      	mov	ip, r3
 80061d2:	44bc      	add	ip, r7
 80061d4:	4461      	add	r1, ip
 80061d6:	7809      	ldrb	r1, [r1, #0]
 80061d8:	400a      	ands	r2, r1
 80061da:	b2d1      	uxtb	r1, r2
 80061dc:	2208      	movs	r2, #8
 80061de:	18b2      	adds	r2, r6, r2
 80061e0:	19d2      	adds	r2, r2, r7
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	4643      	mov	r3, r8
 80061e6:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 80061e8:	1903      	adds	r3, r0, r4
 80061ea:	2208      	movs	r2, #8
 80061ec:	4694      	mov	ip, r2
 80061ee:	44bc      	add	ip, r7
 80061f0:	4463      	add	r3, ip
 80061f2:	881a      	ldrh	r2, [r3, #0]
 80061f4:	1903      	adds	r3, r0, r4
 80061f6:	2108      	movs	r1, #8
 80061f8:	468c      	mov	ip, r1
 80061fa:	44bc      	add	ip, r7
 80061fc:	4463      	add	r3, ip
 80061fe:	3201      	adds	r2, #1
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	2366      	movs	r3, #102	; 0x66
 8006204:	268c      	movs	r6, #140	; 0x8c
 8006206:	0076      	lsls	r6, r6, #1
 8006208:	199b      	adds	r3, r3, r6
 800620a:	2208      	movs	r2, #8
 800620c:	18ba      	adds	r2, r7, r2
 800620e:	189a      	adds	r2, r3, r2
 8006210:	235a      	movs	r3, #90	; 0x5a
 8006212:	199b      	adds	r3, r3, r6
 8006214:	2108      	movs	r1, #8
 8006216:	468c      	mov	ip, r1
 8006218:	44bc      	add	ip, r7
 800621a:	4463      	add	r3, ip
 800621c:	8812      	ldrh	r2, [r2, #0]
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d3bb      	bcc.n	800619c <printASCIIarray+0x1a8c>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8006224:	205f      	movs	r0, #95	; 0x5f
 8006226:	1983      	adds	r3, r0, r6
 8006228:	2208      	movs	r2, #8
 800622a:	18ba      	adds	r2, r7, r2
 800622c:	189a      	adds	r2, r3, r2
 800622e:	233f      	movs	r3, #63	; 0x3f
 8006230:	199b      	adds	r3, r3, r6
 8006232:	2108      	movs	r1, #8
 8006234:	468c      	mov	ip, r1
 8006236:	44bc      	add	ip, r7
 8006238:	4463      	add	r3, ip
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	18d3      	adds	r3, r2, r3
 8006240:	b2db      	uxtb	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b2dc      	uxtb	r4, r3
 8006246:	218f      	movs	r1, #143	; 0x8f
 8006248:	0049      	lsls	r1, r1, #1
 800624a:	2308      	movs	r3, #8
 800624c:	18cb      	adds	r3, r1, r3
 800624e:	19da      	adds	r2, r3, r7
 8006250:	213e      	movs	r1, #62	; 0x3e
 8006252:	198b      	adds	r3, r1, r6
 8006254:	2108      	movs	r1, #8
 8006256:	468c      	mov	ip, r1
 8006258:	44bc      	add	ip, r7
 800625a:	4463      	add	r3, ip
 800625c:	7812      	ldrb	r2, [r2, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	18d3      	adds	r3, r2, r3
 8006262:	b2da      	uxtb	r2, r3
 8006264:	2160      	movs	r1, #96	; 0x60
 8006266:	198b      	adds	r3, r1, r6
 8006268:	2108      	movs	r1, #8
 800626a:	468c      	mov	ip, r1
 800626c:	44bc      	add	ip, r7
 800626e:	4463      	add	r3, ip
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	4698      	mov	r8, r3
 8006278:	218f      	movs	r1, #143	; 0x8f
 800627a:	0049      	lsls	r1, r1, #1
 800627c:	2308      	movs	r3, #8
 800627e:	18cb      	adds	r3, r1, r3
 8006280:	19db      	adds	r3, r3, r7
 8006282:	7819      	ldrb	r1, [r3, #0]
 8006284:	0006      	movs	r6, r0
 8006286:	238c      	movs	r3, #140	; 0x8c
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	18c3      	adds	r3, r0, r3
 800628c:	2208      	movs	r2, #8
 800628e:	4694      	mov	ip, r2
 8006290:	44bc      	add	ip, r7
 8006292:	4463      	add	r3, ip
 8006294:	7818      	ldrb	r0, [r3, #0]
 8006296:	239a      	movs	r3, #154	; 0x9a
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	2208      	movs	r2, #8
 800629c:	189b      	adds	r3, r3, r2
 800629e:	19db      	adds	r3, r3, r7
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	23ff      	movs	r3, #255	; 0xff
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4643      	mov	r3, r8
 80062aa:	0022      	movs	r2, r4
 80062ac:	f7fd f810 	bl	80032d0 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80062b0:	208c      	movs	r0, #140	; 0x8c
 80062b2:	0040      	lsls	r0, r0, #1
 80062b4:	1833      	adds	r3, r6, r0
 80062b6:	2208      	movs	r2, #8
 80062b8:	4694      	mov	ip, r2
 80062ba:	44bc      	add	ip, r7
 80062bc:	4463      	add	r3, ip
 80062be:	1832      	adds	r2, r6, r0
 80062c0:	2108      	movs	r1, #8
 80062c2:	1879      	adds	r1, r7, r1
 80062c4:	1851      	adds	r1, r2, r1
 80062c6:	223f      	movs	r2, #63	; 0x3f
 80062c8:	1812      	adds	r2, r2, r0
 80062ca:	2408      	movs	r4, #8
 80062cc:	46a4      	mov	ip, r4
 80062ce:	44bc      	add	ip, r7
 80062d0:	4462      	add	r2, ip
 80062d2:	7809      	ldrb	r1, [r1, #0]
 80062d4:	7812      	ldrb	r2, [r2, #0]
 80062d6:	188a      	adds	r2, r1, r2
 80062d8:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80062da:	2162      	movs	r1, #98	; 0x62
 80062dc:	180b      	adds	r3, r1, r0
 80062de:	2208      	movs	r2, #8
 80062e0:	4694      	mov	ip, r2
 80062e2:	44bc      	add	ip, r7
 80062e4:	4463      	add	r3, ip
 80062e6:	881a      	ldrh	r2, [r3, #0]
 80062e8:	180b      	adds	r3, r1, r0
 80062ea:	2108      	movs	r1, #8
 80062ec:	468c      	mov	ip, r1
 80062ee:	44bc      	add	ip, r7
 80062f0:	4463      	add	r3, ip
 80062f2:	3201      	adds	r2, #1
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	231e      	movs	r3, #30
 80062f8:	33ff      	adds	r3, #255	; 0xff
 80062fa:	2208      	movs	r2, #8
 80062fc:	189b      	adds	r3, r3, r2
 80062fe:	19db      	adds	r3, r3, r7
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	2162      	movs	r1, #98	; 0x62
 8006306:	208c      	movs	r0, #140	; 0x8c
 8006308:	0040      	lsls	r0, r0, #1
 800630a:	180a      	adds	r2, r1, r0
 800630c:	2408      	movs	r4, #8
 800630e:	46a4      	mov	ip, r4
 8006310:	44bc      	add	ip, r7
 8006312:	4462      	add	r2, ip
 8006314:	8812      	ldrh	r2, [r2, #0]
 8006316:	429a      	cmp	r2, r3
 8006318:	d200      	bcs.n	800631c <printASCIIarray+0x1c0c>
 800631a:	e6d8      	b.n	80060ce <printASCIIarray+0x19be>
				}
				for(i=0;i<symLen;i++){
 800631c:	180b      	adds	r3, r1, r0
 800631e:	2208      	movs	r2, #8
 8006320:	4694      	mov	ip, r2
 8006322:	44bc      	add	ip, r7
 8006324:	4463      	add	r3, ip
 8006326:	2200      	movs	r2, #0
 8006328:	801a      	strh	r2, [r3, #0]
 800632a:	e01e      	b.n	800636a <printASCIIarray+0x1c5a>
									weoBuffer[j]=0x00;
 800632c:	2364      	movs	r3, #100	; 0x64
 800632e:	208c      	movs	r0, #140	; 0x8c
 8006330:	0040      	lsls	r0, r0, #1
 8006332:	181b      	adds	r3, r3, r0
 8006334:	2208      	movs	r2, #8
 8006336:	4694      	mov	ip, r2
 8006338:	44bc      	add	ip, r7
 800633a:	4463      	add	r3, ip
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	229a      	movs	r2, #154	; 0x9a
 8006340:	0052      	lsls	r2, r2, #1
 8006342:	2108      	movs	r1, #8
 8006344:	1852      	adds	r2, r2, r1
 8006346:	19d2      	adds	r2, r2, r7
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	2100      	movs	r1, #0
 800634c:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 800634e:	2162      	movs	r1, #98	; 0x62
 8006350:	180b      	adds	r3, r1, r0
 8006352:	2208      	movs	r2, #8
 8006354:	4694      	mov	ip, r2
 8006356:	44bc      	add	ip, r7
 8006358:	4463      	add	r3, ip
 800635a:	881a      	ldrh	r2, [r3, #0]
 800635c:	180b      	adds	r3, r1, r0
 800635e:	2108      	movs	r1, #8
 8006360:	468c      	mov	ip, r1
 8006362:	44bc      	add	ip, r7
 8006364:	4463      	add	r3, ip
 8006366:	3201      	adds	r2, #1
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	2362      	movs	r3, #98	; 0x62
 800636c:	218c      	movs	r1, #140	; 0x8c
 800636e:	0049      	lsls	r1, r1, #1
 8006370:	185b      	adds	r3, r3, r1
 8006372:	2208      	movs	r2, #8
 8006374:	18ba      	adds	r2, r7, r2
 8006376:	189a      	adds	r2, r3, r2
 8006378:	235a      	movs	r3, #90	; 0x5a
 800637a:	185b      	adds	r3, r3, r1
 800637c:	2108      	movs	r1, #8
 800637e:	468c      	mov	ip, r1
 8006380:	44bc      	add	ip, r7
 8006382:	4463      	add	r3, ip
 8006384:	8812      	ldrh	r2, [r2, #0]
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d3cf      	bcc.n	800632c <printASCIIarray+0x1c1c>
 800638c:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 800638e:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <printASCIIarray+0x1ca4>)
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8006394:	4b08      	ldr	r3, [pc, #32]	; (80063b8 <printASCIIarray+0x1ca8>)
 8006396:	695a      	ldr	r2, [r3, #20]
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <printASCIIarray+0x1ca8>)
 800639a:	2140      	movs	r1, #64	; 0x40
 800639c:	430a      	orrs	r2, r1
 800639e:	615a      	str	r2, [r3, #20]

	}
 80063a0:	46c0      	nop			; (mov r8, r8)
 80063a2:	0018      	movs	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	b063      	add	sp, #396	; 0x18c
 80063a8:	bcc0      	pop	{r6, r7}
 80063aa:	46b9      	mov	r9, r7
 80063ac:	46b0      	mov	r8, r6
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b0:	08018c2c 	.word	0x08018c2c
 80063b4:	2000042a 	.word	0x2000042a
 80063b8:	50000800 	.word	0x50000800

080063bc <squeak_generate>:
//=============================================================================================================
	void squeak_generate(void){
 80063bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
			    uint16_t nsamples = sizeof(signal) / sizeof(signal[0]);
 80063c2:	230c      	movs	r3, #12
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	2280      	movs	r2, #128	; 0x80
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	801a      	strh	r2, [r3, #0]
			    uint16_t k = 0;
 80063cc:	230e      	movs	r3, #14
 80063ce:	18fb      	adds	r3, r7, r3
 80063d0:	2200      	movs	r2, #0
 80063d2:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 80063d4:	e040      	b.n	8006458 <squeak_generate+0x9c>
			        double t = ((double)k/2.0)/((double)nsamples);
 80063d6:	260e      	movs	r6, #14
 80063d8:	19bb      	adds	r3, r7, r6
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	0018      	movs	r0, r3
 80063de:	f7fb fe05 	bl	8001fec <__aeabi_ui2d>
 80063e2:	2200      	movs	r2, #0
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	05db      	lsls	r3, r3, #23
 80063e8:	f7fa fb9a 	bl	8000b20 <__aeabi_ddiv>
 80063ec:	0002      	movs	r2, r0
 80063ee:	000b      	movs	r3, r1
 80063f0:	0014      	movs	r4, r2
 80063f2:	001d      	movs	r5, r3
 80063f4:	230c      	movs	r3, #12
 80063f6:	18fb      	adds	r3, r7, r3
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7fb fdf6 	bl	8001fec <__aeabi_ui2d>
 8006400:	0002      	movs	r2, r0
 8006402:	000b      	movs	r3, r1
 8006404:	0020      	movs	r0, r4
 8006406:	0029      	movs	r1, r5
 8006408:	f7fa fb8a 	bl	8000b20 <__aeabi_ddiv>
 800640c:	0002      	movs	r2, r0
 800640e:	000b      	movs	r3, r1
 8006410:	603a      	str	r2, [r7, #0]
 8006412:	607b      	str	r3, [r7, #4]
			       signal[k] = 32767*sin(100.0 * TAU * t); // left
 8006414:	4a17      	ldr	r2, [pc, #92]	; (8006474 <squeak_generate+0xb8>)
 8006416:	4b18      	ldr	r3, [pc, #96]	; (8006478 <squeak_generate+0xbc>)
 8006418:	6838      	ldr	r0, [r7, #0]
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	f7fa ff82 	bl	8001324 <__aeabi_dmul>
 8006420:	0002      	movs	r2, r0
 8006422:	000b      	movs	r3, r1
 8006424:	0010      	movs	r0, r2
 8006426:	0019      	movs	r1, r3
 8006428:	f008 f9a2 	bl	800e770 <sin>
 800642c:	2200      	movs	r2, #0
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <squeak_generate+0xc0>)
 8006430:	f7fa ff78 	bl	8001324 <__aeabi_dmul>
 8006434:	0002      	movs	r2, r0
 8006436:	000b      	movs	r3, r1
 8006438:	19b9      	adds	r1, r7, r6
 800643a:	880c      	ldrh	r4, [r1, #0]
 800643c:	0010      	movs	r0, r2
 800643e:	0019      	movs	r1, r3
 8006440:	f7fa f814 	bl	800046c <__aeabi_d2uiz>
 8006444:	0003      	movs	r3, r0
 8006446:	b299      	uxth	r1, r3
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <squeak_generate+0xc4>)
 800644a:	0062      	lsls	r2, r4, #1
 800644c:	52d1      	strh	r1, [r2, r3]
			        k += 1;
 800644e:	19bb      	adds	r3, r7, r6
 8006450:	19ba      	adds	r2, r7, r6
 8006452:	8812      	ldrh	r2, [r2, #0]
 8006454:	3201      	adds	r2, #1
 8006456:	801a      	strh	r2, [r3, #0]
			    while(k < nsamples) {
 8006458:	230e      	movs	r3, #14
 800645a:	18fa      	adds	r2, r7, r3
 800645c:	230c      	movs	r3, #12
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	8812      	ldrh	r2, [r2, #0]
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	429a      	cmp	r2, r3
 8006466:	d3b6      	bcc.n	80063d6 <squeak_generate+0x1a>
			    }
		}
 8006468:	46c0      	nop			; (mov r8, r8)
 800646a:	46c0      	nop			; (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b005      	add	sp, #20
 8006470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	59d5433b 	.word	0x59d5433b
 8006478:	4083a28c 	.word	0x4083a28c
 800647c:	40dfffc0 	.word	0x40dfffc0
 8006480:	20000434 	.word	0x20000434

08006484 <squeak_single>:
//=============================================================================================================
	void squeak_single(uint16_t* signal){
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 800648c:	2001      	movs	r0, #1
 800648e:	f7fd f805 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006492:	2100      	movs	r1, #0
 8006494:	2001      	movs	r0, #1
 8006496:	f7fd f81f 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800649a:	2000      	movs	r0, #0
 800649c:	f7fc fffe 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 80064a0:	2130      	movs	r1, #48	; 0x30
 80064a2:	2041      	movs	r0, #65	; 0x41
 80064a4:	f7fd f818 	bl	80034d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 80064a8:	2001      	movs	r0, #1
 80064aa:	f7fc fff7 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80064ae:	2100      	movs	r1, #0
 80064b0:	2010      	movs	r0, #16
 80064b2:	f7fd f811 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 80064b6:	2124      	movs	r1, #36	; 0x24
 80064b8:	202e      	movs	r0, #46	; 0x2e
 80064ba:	f7fd f80d 	bl	80034d8 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (const uint16_t*)signal, nsamples); //HAL_MAX_DELAY
 80064be:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <squeak_single+0x74>)
 80064c0:	881a      	ldrh	r2, [r3, #0]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <squeak_single+0x78>)
 80064c6:	0018      	movs	r0, r3
 80064c8:	f003 f986 	bl	80097d8 <HAL_I2S_Transmit_DMA>
		USART2->ICR|=USART_ICR_ORECF;
 80064cc:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <squeak_single+0x7c>)
 80064ce:	6a1a      	ldr	r2, [r3, #32]
 80064d0:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <squeak_single+0x7c>)
 80064d2:	2108      	movs	r1, #8
 80064d4:	430a      	orrs	r2, r1
 80064d6:	621a      	str	r2, [r3, #32]
		USART2->ICR|=USART_ICR_FECF;
 80064d8:	4b09      	ldr	r3, [pc, #36]	; (8006500 <squeak_single+0x7c>)
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	4b08      	ldr	r3, [pc, #32]	; (8006500 <squeak_single+0x7c>)
 80064de:	2102      	movs	r1, #2
 80064e0:	430a      	orrs	r2, r1
 80064e2:	621a      	str	r2, [r3, #32]
		USART2->ICR|=USART_ICR_NECF;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <squeak_single+0x7c>)
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <squeak_single+0x7c>)
 80064ea:	2104      	movs	r1, #4
 80064ec:	430a      	orrs	r2, r1
 80064ee:	621a      	str	r2, [r3, #32]
//		HAL_Delay(100);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b002      	add	sp, #8
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000062 	.word	0x20000062
 80064fc:	2000010c 	.word	0x2000010c
 8006500:	40004400 	.word	0x40004400

08006504 <squeak_long>:
//==========================================================================================================================
	void squeak_long(uint16_t* signal){
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 800650c:	2001      	movs	r0, #1
 800650e:	f7fc ffc5 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006512:	2100      	movs	r1, #0
 8006514:	2001      	movs	r0, #1
 8006516:	f7fc ffdf 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800651a:	2000      	movs	r0, #0
 800651c:	f7fc ffbe 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8006520:	2130      	movs	r1, #48	; 0x30
 8006522:	2041      	movs	r0, #65	; 0x41
 8006524:	f7fc ffd8 	bl	80034d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8006528:	2001      	movs	r0, #1
 800652a:	f7fc ffb7 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800652e:	2100      	movs	r1, #0
 8006530:	2010      	movs	r0, #16
 8006532:	f7fc ffd1 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8006536:	2124      	movs	r1, #36	; 0x24
 8006538:	202e      	movs	r0, #46	; 0x2e
 800653a:	f7fc ffcd 	bl	80034d8 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 800653e:	4b29      	ldr	r3, [pc, #164]	; (80065e4 <squeak_long+0xe0>)
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	4b29      	ldr	r3, [pc, #164]	; (80065e8 <squeak_long+0xe4>)
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4829      	ldr	r0, [pc, #164]	; (80065ec <squeak_long+0xe8>)
 8006548:	f003 f84e 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 800654c:	4b25      	ldr	r3, [pc, #148]	; (80065e4 <squeak_long+0xe0>)
 800654e:	881a      	ldrh	r2, [r3, #0]
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <squeak_long+0xe4>)
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4825      	ldr	r0, [pc, #148]	; (80065ec <squeak_long+0xe8>)
 8006556:	f003 f847 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 800655a:	4b22      	ldr	r3, [pc, #136]	; (80065e4 <squeak_long+0xe0>)
 800655c:	881a      	ldrh	r2, [r3, #0]
 800655e:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <squeak_long+0xe4>)
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4822      	ldr	r0, [pc, #136]	; (80065ec <squeak_long+0xe8>)
 8006564:	f003 f840 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <squeak_long+0xe0>)
 800656a:	881a      	ldrh	r2, [r3, #0]
 800656c:	4b1e      	ldr	r3, [pc, #120]	; (80065e8 <squeak_long+0xe4>)
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	481e      	ldr	r0, [pc, #120]	; (80065ec <squeak_long+0xe8>)
 8006572:	f003 f839 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006576:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <squeak_long+0xe0>)
 8006578:	881a      	ldrh	r2, [r3, #0]
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <squeak_long+0xe4>)
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	481b      	ldr	r0, [pc, #108]	; (80065ec <squeak_long+0xe8>)
 8006580:	f003 f832 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006584:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <squeak_long+0xe0>)
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <squeak_long+0xe4>)
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4817      	ldr	r0, [pc, #92]	; (80065ec <squeak_long+0xe8>)
 800658e:	f003 f82b 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 8006592:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <squeak_long+0xe0>)
 8006594:	881a      	ldrh	r2, [r3, #0]
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <squeak_long+0xe4>)
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4814      	ldr	r0, [pc, #80]	; (80065ec <squeak_long+0xe8>)
 800659c:	f003 f824 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <squeak_long+0xe0>)
 80065a2:	881a      	ldrh	r2, [r3, #0]
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <squeak_long+0xe4>)
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4810      	ldr	r0, [pc, #64]	; (80065ec <squeak_long+0xe8>)
 80065aa:	f003 f81d 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <squeak_long+0xe0>)
 80065b0:	881a      	ldrh	r2, [r3, #0]
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <squeak_long+0xe4>)
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	480d      	ldr	r0, [pc, #52]	; (80065ec <squeak_long+0xe8>)
 80065b8:	f003 f816 	bl	80095e8 <HAL_I2S_Transmit>
		HAL_I2S_Transmit(&hi2s1, (uint16_t*)signal, nsamples,5000);
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <squeak_long+0xe0>)
 80065be:	881a      	ldrh	r2, [r3, #0]
 80065c0:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <squeak_long+0xe4>)
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	4809      	ldr	r0, [pc, #36]	; (80065ec <squeak_long+0xe8>)
 80065c6:	f003 f80f 	bl	80095e8 <HAL_I2S_Transmit>
//		HAL_Delay(500);
		GPIOC->ODR |= 1 << 6;	//set BF
 80065ca:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <squeak_long+0xec>)
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	4b08      	ldr	r3, [pc, #32]	; (80065f0 <squeak_long+0xec>)
 80065d0:	2140      	movs	r1, #64	; 0x40
 80065d2:	430a      	orrs	r2, r1
 80065d4:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <squeak_long+0xf0>)
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
	}
 80065dc:	46c0      	nop			; (mov r8, r8)
 80065de:	46bd      	mov	sp, r7
 80065e0:	b002      	add	sp, #8
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20000062 	.word	0x20000062
 80065e8:	00001388 	.word	0x00001388
 80065ec:	2000010c 	.word	0x2000010c
 80065f0:	50000800 	.word	0x50000800
 80065f4:	2000042a 	.word	0x2000042a

080065f8 <squeak_double>:
//=============================================================================================================
	void squeak_double(uint16_t* signal){
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 8006600:	2001      	movs	r0, #1
 8006602:	f7fc ff4b 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006606:	2100      	movs	r1, #0
 8006608:	2001      	movs	r0, #1
 800660a:	f7fc ff65 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800660e:	2000      	movs	r0, #0
 8006610:	f7fc ff44 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8006614:	2130      	movs	r1, #48	; 0x30
 8006616:	2041      	movs	r0, #65	; 0x41
 8006618:	f7fc ff5e 	bl	80034d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 800661c:	2001      	movs	r0, #1
 800661e:	f7fc ff3d 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8006622:	2100      	movs	r1, #0
 8006624:	2010      	movs	r0, #16
 8006626:	f7fc ff57 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 800662a:	2124      	movs	r1, #36	; 0x24
 800662c:	202e      	movs	r0, #46	; 0x2e
 800662e:	f7fc ff53 	bl	80034d8 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006632:	4b0a      	ldr	r3, [pc, #40]	; (800665c <squeak_double+0x64>)
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4b09      	ldr	r3, [pc, #36]	; (8006660 <squeak_double+0x68>)
 800663a:	0018      	movs	r0, r3
 800663c:	f003 f8cc 	bl	80097d8 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 8006640:	2064      	movs	r0, #100	; 0x64
 8006642:	f000 fdab 	bl	800719c <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <squeak_double+0x64>)
 8006648:	881a      	ldrh	r2, [r3, #0]
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	4b04      	ldr	r3, [pc, #16]	; (8006660 <squeak_double+0x68>)
 800664e:	0018      	movs	r0, r3
 8006650:	f003 f8c2 	bl	80097d8 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
	}
 8006654:	46c0      	nop			; (mov r8, r8)
 8006656:	46bd      	mov	sp, r7
 8006658:	b002      	add	sp, #8
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000062 	.word	0x20000062
 8006660:	2000010c 	.word	0x2000010c

08006664 <squeak_triple>:
//=============================================================================================================
	void squeak_triple(uint16_t* signal){
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]

		I2C_SOUND_ChangePage(0x01);
 800666c:	2001      	movs	r0, #1
 800666e:	f7fc ff15 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x00);
 8006672:	2100      	movs	r1, #0
 8006674:	2001      	movs	r0, #1
 8006676:	f7fc ff2f 	bl	80034d8 <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 800667a:	2000      	movs	r0, #0
 800667c:	f7fc ff0e 	bl	800349c <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x41, 0x30);// 0x81 - 0x30 available
 8006680:	2130      	movs	r1, #48	; 0x30
 8006682:	2041      	movs	r0, #65	; 0x41
 8006684:	f7fc ff28 	bl	80034d8 <WriteReg_I2C_SOUND>
	//	I2C_SOUND_ChangePage(0x00);
		I2C_SOUND_ChangePage(0x01);
 8006688:	2001      	movs	r0, #1
 800668a:	f7fc ff07 	bl	800349c <I2C_SOUND_ChangePage>
//		HAL_Delay(1000);
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 800668e:	2100      	movs	r1, #0
 8006690:	2010      	movs	r0, #16
 8006692:	f7fc ff21 	bl	80034d8 <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8006696:	2124      	movs	r1, #36	; 0x24
 8006698:	202e      	movs	r0, #46	; 0x2e
 800669a:	f7fc ff1d 	bl	80034d8 <WriteReg_I2C_SOUND>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <squeak_triple+0x78>)
 80066a0:	881a      	ldrh	r2, [r3, #0]
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4b0e      	ldr	r3, [pc, #56]	; (80066e0 <squeak_triple+0x7c>)
 80066a6:	0018      	movs	r0, r3
 80066a8:	f003 f896 	bl	80097d8 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 80066ac:	2064      	movs	r0, #100	; 0x64
 80066ae:	f000 fd75 	bl	800719c <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <squeak_triple+0x78>)
 80066b4:	881a      	ldrh	r2, [r3, #0]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <squeak_triple+0x7c>)
 80066ba:	0018      	movs	r0, r3
 80066bc:	f003 f88c 	bl	80097d8 <HAL_I2S_Transmit_DMA>
		HAL_Delay(100);
 80066c0:	2064      	movs	r0, #100	; 0x64
 80066c2:	f000 fd6b 	bl	800719c <HAL_Delay>
		HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*)signal, nsamples);
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <squeak_triple+0x78>)
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <squeak_triple+0x7c>)
 80066ce:	0018      	movs	r0, r3
 80066d0:	f003 f882 	bl	80097d8 <HAL_I2S_Transmit_DMA>
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
 80066d4:	46c0      	nop			; (mov r8, r8)
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b002      	add	sp, #8
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000062 	.word	0x20000062
 80066e0:	2000010c 	.word	0x2000010c

080066e4 <LIS3DHsendCMD>:
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	0002      	movs	r2, r0
 80066ec:	1dfb      	adds	r3, r7, #7
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	1dbb      	adds	r3, r7, #6
 80066f2:	1c0a      	adds	r2, r1, #0
 80066f4:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80066f6:	210c      	movs	r1, #12
 80066f8:	187b      	adds	r3, r7, r1
 80066fa:	1dfa      	adds	r2, r7, #7
 80066fc:	7812      	ldrb	r2, [r2, #0]
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	187b      	adds	r3, r7, r1
 8006702:	1dba      	adds	r2, r7, #6
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8006708:	187a      	adds	r2, r7, r1
 800670a:	4806      	ldr	r0, [pc, #24]	; (8006724 <LIS3DHsendCMD+0x40>)
 800670c:	23fa      	movs	r3, #250	; 0xfa
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	2302      	movs	r3, #2
 8006714:	2132      	movs	r1, #50	; 0x32
 8006716:	f001 fd7b 	bl	8008210 <HAL_I2C_Master_Transmit>
	}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	46bd      	mov	sp, r7
 800671e:	b004      	add	sp, #16
 8006720:	bd80      	pop	{r7, pc}
 8006722:	46c0      	nop			; (mov r8, r8)
 8006724:	200000c0 	.word	0x200000c0

08006728 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 800672e:	1dfb      	adds	r3, r7, #7
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8006734:	1dbb      	adds	r3, r7, #6
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 800673a:	1d7b      	adds	r3, r7, #5
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8006740:	1d3b      	adds	r3, r7, #4
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8006746:	1cfb      	adds	r3, r7, #3
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 800674c:	1cbb      	adds	r3, r7, #2
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8006752:	1c7b      	adds	r3, r7, #1
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8006758:	003b      	movs	r3, r7
 800675a:	2200      	movs	r2, #0
 800675c:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 800675e:	1dfb      	adds	r3, r7, #7
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2237      	movs	r2, #55	; 0x37
 8006764:	4313      	orrs	r3, r2
 8006766:	b2db      	uxtb	r3, r3
 8006768:	0019      	movs	r1, r3
 800676a:	2020      	movs	r0, #32
 800676c:	f7ff ffba 	bl	80066e4 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8006770:	1dbb      	adds	r3, r7, #6
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	227c      	movs	r2, #124	; 0x7c
 8006776:	4252      	negs	r2, r2
 8006778:	4313      	orrs	r3, r2
 800677a:	b2db      	uxtb	r3, r3
 800677c:	0019      	movs	r1, r3
 800677e:	2023      	movs	r0, #35	; 0x23
 8006780:	f7ff ffb0 	bl	80066e4 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8006784:	46c0      	nop			; (mov r8, r8)
 8006786:	46bd      	mov	sp, r7
 8006788:	b002      	add	sp, #8
 800678a:	bd80      	pop	{r7, pc}

0800678c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006790:	46c0      	nop			; (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800679e:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <HAL_MspInit+0x4c>)
 80067a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067a2:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <HAL_MspInit+0x4c>)
 80067a4:	2101      	movs	r1, #1
 80067a6:	430a      	orrs	r2, r1
 80067a8:	641a      	str	r2, [r3, #64]	; 0x40
 80067aa:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <HAL_MspInit+0x4c>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2201      	movs	r2, #1
 80067b0:	4013      	ands	r3, r2
 80067b2:	607b      	str	r3, [r7, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80067b6:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <HAL_MspInit+0x4c>)
 80067b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <HAL_MspInit+0x4c>)
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	0549      	lsls	r1, r1, #21
 80067c0:	430a      	orrs	r2, r1
 80067c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <HAL_MspInit+0x4c>)
 80067c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c8:	2380      	movs	r3, #128	; 0x80
 80067ca:	055b      	lsls	r3, r3, #21
 80067cc:	4013      	ands	r3, r2
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	0018      	movs	r0, r3
 80067d8:	f000 fd04 	bl	80071e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	b002      	add	sp, #8
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40021000 	.word	0x40021000

080067e8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b089      	sub	sp, #36	; 0x24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f0:	240c      	movs	r4, #12
 80067f2:	193b      	adds	r3, r7, r4
 80067f4:	0018      	movs	r0, r3
 80067f6:	2314      	movs	r3, #20
 80067f8:	001a      	movs	r2, r3
 80067fa:	2100      	movs	r1, #0
 80067fc:	f007 ffb0 	bl	800e760 <memset>
  if(hcomp->Instance==COMP1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a10      	ldr	r2, [pc, #64]	; (8006848 <HAL_COMP_MspInit+0x60>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d11a      	bne.n	8006840 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <HAL_COMP_MspInit+0x64>)
 800680c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <HAL_COMP_MspInit+0x64>)
 8006810:	2102      	movs	r1, #2
 8006812:	430a      	orrs	r2, r1
 8006814:	635a      	str	r2, [r3, #52]	; 0x34
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <HAL_COMP_MspInit+0x64>)
 8006818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681a:	2202      	movs	r2, #2
 800681c:	4013      	ands	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]
 8006820:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006822:	193b      	adds	r3, r7, r4
 8006824:	2204      	movs	r2, #4
 8006826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006828:	193b      	adds	r3, r7, r4
 800682a:	2203      	movs	r2, #3
 800682c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682e:	193b      	adds	r3, r7, r4
 8006830:	2200      	movs	r2, #0
 8006832:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006834:	193b      	adds	r3, r7, r4
 8006836:	4a06      	ldr	r2, [pc, #24]	; (8006850 <HAL_COMP_MspInit+0x68>)
 8006838:	0019      	movs	r1, r3
 800683a:	0010      	movs	r0, r2
 800683c:	f001 faee 	bl	8007e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8006840:	46c0      	nop			; (mov r8, r8)
 8006842:	46bd      	mov	sp, r7
 8006844:	b009      	add	sp, #36	; 0x24
 8006846:	bd90      	pop	{r4, r7, pc}
 8006848:	40010200 	.word	0x40010200
 800684c:	40021000 	.word	0x40021000
 8006850:	50000400 	.word	0x50000400

08006854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b08b      	sub	sp, #44	; 0x2c
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800685c:	2414      	movs	r4, #20
 800685e:	193b      	adds	r3, r7, r4
 8006860:	0018      	movs	r0, r3
 8006862:	2314      	movs	r3, #20
 8006864:	001a      	movs	r2, r3
 8006866:	2100      	movs	r1, #0
 8006868:	f007 ff7a 	bl	800e760 <memset>
  if(hi2c->Instance==I2C1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a20      	ldr	r2, [pc, #128]	; (80068f4 <HAL_I2C_MspInit+0xa0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d139      	bne.n	80068ea <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <HAL_I2C_MspInit+0xa4>)
 8006878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687a:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <HAL_I2C_MspInit+0xa4>)
 800687c:	2101      	movs	r1, #1
 800687e:	430a      	orrs	r2, r1
 8006880:	635a      	str	r2, [r3, #52]	; 0x34
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_I2C_MspInit+0xa4>)
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	2201      	movs	r2, #1
 8006888:	4013      	ands	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800688e:	193b      	adds	r3, r7, r4
 8006890:	22c0      	movs	r2, #192	; 0xc0
 8006892:	00d2      	lsls	r2, r2, #3
 8006894:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006896:	0021      	movs	r1, r4
 8006898:	187b      	adds	r3, r7, r1
 800689a:	2212      	movs	r2, #18
 800689c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800689e:	187b      	adds	r3, r7, r1
 80068a0:	2201      	movs	r2, #1
 80068a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a4:	187b      	adds	r3, r7, r1
 80068a6:	2200      	movs	r2, #0
 80068a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80068aa:	187b      	adds	r3, r7, r1
 80068ac:	2206      	movs	r2, #6
 80068ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068b0:	187a      	adds	r2, r7, r1
 80068b2:	23a0      	movs	r3, #160	; 0xa0
 80068b4:	05db      	lsls	r3, r3, #23
 80068b6:	0011      	movs	r1, r2
 80068b8:	0018      	movs	r0, r3
 80068ba:	f001 faaf 	bl	8007e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80068be:	4b0e      	ldr	r3, [pc, #56]	; (80068f8 <HAL_I2C_MspInit+0xa4>)
 80068c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <HAL_I2C_MspInit+0xa4>)
 80068c4:	2180      	movs	r1, #128	; 0x80
 80068c6:	0389      	lsls	r1, r1, #14
 80068c8:	430a      	orrs	r2, r1
 80068ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <HAL_I2C_MspInit+0xa4>)
 80068ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	039b      	lsls	r3, r3, #14
 80068d4:	4013      	ands	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80068da:	2200      	movs	r2, #0
 80068dc:	2100      	movs	r1, #0
 80068de:	2017      	movs	r0, #23
 80068e0:	f000 ffa2 	bl	8007828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80068e4:	2017      	movs	r0, #23
 80068e6:	f000 ffb4 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	46bd      	mov	sp, r7
 80068ee:	b00b      	add	sp, #44	; 0x2c
 80068f0:	bd90      	pop	{r4, r7, pc}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	40005400 	.word	0x40005400
 80068f8:	40021000 	.word	0x40021000

080068fc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80068fc:	b590      	push	{r4, r7, lr}
 80068fe:	b08b      	sub	sp, #44	; 0x2c
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006904:	2414      	movs	r4, #20
 8006906:	193b      	adds	r3, r7, r4
 8006908:	0018      	movs	r0, r3
 800690a:	2314      	movs	r3, #20
 800690c:	001a      	movs	r2, r3
 800690e:	2100      	movs	r1, #0
 8006910:	f007 ff26 	bl	800e760 <memset>
  if(hi2s->Instance==SPI1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a47      	ldr	r2, [pc, #284]	; (8006a38 <HAL_I2S_MspInit+0x13c>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d000      	beq.n	8006920 <HAL_I2S_MspInit+0x24>
 800691e:	e086      	b.n	8006a2e <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006920:	4b46      	ldr	r3, [pc, #280]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 8006922:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006924:	4b45      	ldr	r3, [pc, #276]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 8006926:	2180      	movs	r1, #128	; 0x80
 8006928:	0149      	lsls	r1, r1, #5
 800692a:	430a      	orrs	r2, r1
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
 800692e:	4b43      	ldr	r3, [pc, #268]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 8006930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006932:	2380      	movs	r3, #128	; 0x80
 8006934:	015b      	lsls	r3, r3, #5
 8006936:	4013      	ands	r3, r2
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800693c:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 800693e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006940:	4b3e      	ldr	r3, [pc, #248]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 8006942:	2101      	movs	r1, #1
 8006944:	430a      	orrs	r2, r1
 8006946:	635a      	str	r2, [r3, #52]	; 0x34
 8006948:	4b3c      	ldr	r3, [pc, #240]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	2201      	movs	r2, #1
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006954:	4b39      	ldr	r3, [pc, #228]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 8006956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006958:	4b38      	ldr	r3, [pc, #224]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 800695a:	2102      	movs	r1, #2
 800695c:	430a      	orrs	r2, r1
 800695e:	635a      	str	r2, [r3, #52]	; 0x34
 8006960:	4b36      	ldr	r3, [pc, #216]	; (8006a3c <HAL_I2S_MspInit+0x140>)
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	2202      	movs	r2, #2
 8006966:	4013      	ands	r3, r2
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800696c:	193b      	adds	r3, r7, r4
 800696e:	2280      	movs	r2, #128	; 0x80
 8006970:	0212      	lsls	r2, r2, #8
 8006972:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006974:	193b      	adds	r3, r7, r4
 8006976:	2202      	movs	r2, #2
 8006978:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800697a:	193b      	adds	r3, r7, r4
 800697c:	2200      	movs	r2, #0
 800697e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006980:	193b      	adds	r3, r7, r4
 8006982:	2200      	movs	r2, #0
 8006984:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006986:	193b      	adds	r3, r7, r4
 8006988:	2200      	movs	r2, #0
 800698a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698c:	193a      	adds	r2, r7, r4
 800698e:	23a0      	movs	r3, #160	; 0xa0
 8006990:	05db      	lsls	r3, r3, #23
 8006992:	0011      	movs	r1, r2
 8006994:	0018      	movs	r0, r3
 8006996:	f001 fa41 	bl	8007e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800699a:	0021      	movs	r1, r4
 800699c:	187b      	adds	r3, r7, r1
 800699e:	2238      	movs	r2, #56	; 0x38
 80069a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	2202      	movs	r2, #2
 80069a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	2200      	movs	r2, #0
 80069ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ae:	187b      	adds	r3, r7, r1
 80069b0:	2200      	movs	r2, #0
 80069b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80069b4:	187b      	adds	r3, r7, r1
 80069b6:	2200      	movs	r2, #0
 80069b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ba:	187b      	adds	r3, r7, r1
 80069bc:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <HAL_I2S_MspInit+0x144>)
 80069be:	0019      	movs	r1, r3
 80069c0:	0010      	movs	r0, r2
 80069c2:	f001 fa2b 	bl	8007e1c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80069c6:	4b1f      	ldr	r3, [pc, #124]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069c8:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <HAL_I2S_MspInit+0x14c>)
 80069ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80069cc:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069ce:	2211      	movs	r2, #17
 80069d0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069d2:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069d4:	2210      	movs	r2, #16
 80069d6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069d8:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069da:	2200      	movs	r2, #0
 80069dc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069de:	4b19      	ldr	r3, [pc, #100]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069e0:	2280      	movs	r2, #128	; 0x80
 80069e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069e6:	2280      	movs	r2, #128	; 0x80
 80069e8:	0052      	lsls	r2, r2, #1
 80069ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80069ec:	4b15      	ldr	r3, [pc, #84]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069ee:	2280      	movs	r2, #128	; 0x80
 80069f0:	00d2      	lsls	r2, r2, #3
 80069f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 80069fc:	22c0      	movs	r2, #192	; 0xc0
 80069fe:	0192      	lsls	r2, r2, #6
 8006a00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 8006a04:	0018      	movs	r0, r3
 8006a06:	f000 ff41 	bl	800788c <HAL_DMA_Init>
 8006a0a:	1e03      	subs	r3, r0, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 8006a0e:	f7ff febd 	bl	800678c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a0b      	ldr	r2, [pc, #44]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 8006a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <HAL_I2S_MspInit+0x148>)
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2100      	movs	r1, #0
 8006a22:	2019      	movs	r0, #25
 8006a24:	f000 ff00 	bl	8007828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8006a28:	2019      	movs	r0, #25
 8006a2a:	f000 ff12 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b00b      	add	sp, #44	; 0x2c
 8006a34:	bd90      	pop	{r4, r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	40013000 	.word	0x40013000
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	50000400 	.word	0x50000400
 8006a44:	20000148 	.word	0x20000148
 8006a48:	40020008 	.word	0x40020008

08006a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006a4c:	b590      	push	{r4, r7, lr}
 8006a4e:	b08b      	sub	sp, #44	; 0x2c
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a54:	2414      	movs	r4, #20
 8006a56:	193b      	adds	r3, r7, r4
 8006a58:	0018      	movs	r0, r3
 8006a5a:	2314      	movs	r3, #20
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	2100      	movs	r1, #0
 8006a60:	f007 fe7e 	bl	800e760 <memset>
  if(hspi->Instance==SPI2)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a54      	ldr	r2, [pc, #336]	; (8006bbc <HAL_SPI_MspInit+0x170>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d000      	beq.n	8006a70 <HAL_SPI_MspInit+0x24>
 8006a6e:	e0a0      	b.n	8006bb2 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006a70:	4b53      	ldr	r3, [pc, #332]	; (8006bc0 <HAL_SPI_MspInit+0x174>)
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	4b52      	ldr	r3, [pc, #328]	; (8006bc0 <HAL_SPI_MspInit+0x174>)
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	01c9      	lsls	r1, r1, #7
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a7e:	4b50      	ldr	r3, [pc, #320]	; (8006bc0 <HAL_SPI_MspInit+0x174>)
 8006a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a82:	2380      	movs	r3, #128	; 0x80
 8006a84:	01db      	lsls	r3, r3, #7
 8006a86:	4013      	ands	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a8c:	4b4c      	ldr	r3, [pc, #304]	; (8006bc0 <HAL_SPI_MspInit+0x174>)
 8006a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a90:	4b4b      	ldr	r3, [pc, #300]	; (8006bc0 <HAL_SPI_MspInit+0x174>)
 8006a92:	2102      	movs	r1, #2
 8006a94:	430a      	orrs	r2, r1
 8006a96:	635a      	str	r2, [r3, #52]	; 0x34
 8006a98:	4b49      	ldr	r3, [pc, #292]	; (8006bc0 <HAL_SPI_MspInit+0x174>)
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006aa4:	193b      	adds	r3, r7, r4
 8006aa6:	2240      	movs	r2, #64	; 0x40
 8006aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aaa:	193b      	adds	r3, r7, r4
 8006aac:	2202      	movs	r2, #2
 8006aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	193b      	adds	r3, r7, r4
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab6:	193b      	adds	r3, r7, r4
 8006ab8:	2200      	movs	r2, #0
 8006aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8006abc:	193b      	adds	r3, r7, r4
 8006abe:	2204      	movs	r2, #4
 8006ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ac2:	193b      	adds	r3, r7, r4
 8006ac4:	4a3f      	ldr	r2, [pc, #252]	; (8006bc4 <HAL_SPI_MspInit+0x178>)
 8006ac6:	0019      	movs	r1, r3
 8006ac8:	0010      	movs	r0, r2
 8006aca:	f001 f9a7 	bl	8007e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006ace:	0021      	movs	r1, r4
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	22c0      	movs	r2, #192	; 0xc0
 8006ad4:	0052      	lsls	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad8:	187b      	adds	r3, r7, r1
 8006ada:	2202      	movs	r2, #2
 8006adc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	2201      	movs	r2, #1
 8006aee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006af0:	187b      	adds	r3, r7, r1
 8006af2:	4a34      	ldr	r2, [pc, #208]	; (8006bc4 <HAL_SPI_MspInit+0x178>)
 8006af4:	0019      	movs	r1, r3
 8006af6:	0010      	movs	r0, r2
 8006af8:	f001 f990 	bl	8007e1c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8006afc:	4b32      	ldr	r3, [pc, #200]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006afe:	4a33      	ldr	r2, [pc, #204]	; (8006bcc <HAL_SPI_MspInit+0x180>)
 8006b00:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8006b02:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b04:	2212      	movs	r2, #18
 8006b06:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b08:	4b2f      	ldr	r3, [pc, #188]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b0e:	4b2e      	ldr	r3, [pc, #184]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b14:	4b2c      	ldr	r3, [pc, #176]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b16:	2280      	movs	r2, #128	; 0x80
 8006b18:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b1a:	4b2b      	ldr	r3, [pc, #172]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b20:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006b26:	4b28      	ldr	r3, [pc, #160]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006b2c:	4b26      	ldr	r3, [pc, #152]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b2e:	2280      	movs	r2, #128	; 0x80
 8006b30:	0192      	lsls	r2, r2, #6
 8006b32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006b34:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b36:	0018      	movs	r0, r3
 8006b38:	f000 fea8 	bl	800788c <HAL_DMA_Init>
 8006b3c:	1e03      	subs	r3, r0, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8006b40:	f7ff fe24 	bl	800678c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a20      	ldr	r2, [pc, #128]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b48:	659a      	str	r2, [r3, #88]	; 0x58
 8006b4a:	4b1f      	ldr	r3, [pc, #124]	; (8006bc8 <HAL_SPI_MspInit+0x17c>)
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8006b50:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b52:	4a20      	ldr	r2, [pc, #128]	; (8006bd4 <HAL_SPI_MspInit+0x188>)
 8006b54:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8006b56:	4b1e      	ldr	r3, [pc, #120]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b58:	2213      	movs	r2, #19
 8006b5a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b5c:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b5e:	2210      	movs	r2, #16
 8006b60:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b62:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b68:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b6a:	2280      	movs	r2, #128	; 0x80
 8006b6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b6e:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b74:	4b16      	ldr	r3, [pc, #88]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006b7a:	4b15      	ldr	r3, [pc, #84]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b80:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006b86:	4b12      	ldr	r3, [pc, #72]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f000 fe7f 	bl	800788c <HAL_DMA_Init>
 8006b8e:	1e03      	subs	r3, r0, #0
 8006b90:	d001      	beq.n	8006b96 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8006b92:	f7ff fdfb 	bl	800678c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a0d      	ldr	r2, [pc, #52]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b9a:	655a      	str	r2, [r3, #84]	; 0x54
 8006b9c:	4b0c      	ldr	r3, [pc, #48]	; (8006bd0 <HAL_SPI_MspInit+0x184>)
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	201a      	movs	r0, #26
 8006ba8:	f000 fe3e 	bl	8007828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006bac:	201a      	movs	r0, #26
 8006bae:	f000 fe50 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b00b      	add	sp, #44	; 0x2c
 8006bb8:	bd90      	pop	{r4, r7, pc}
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	40003800 	.word	0x40003800
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	50000400 	.word	0x50000400
 8006bc8:	20000208 	.word	0x20000208
 8006bcc:	4002001c 	.word	0x4002001c
 8006bd0:	20000264 	.word	0x20000264
 8006bd4:	40020030 	.word	0x40020030

08006bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0a      	ldr	r2, [pc, #40]	; (8006c10 <HAL_TIM_Base_MspInit+0x38>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d10d      	bne.n	8006c06 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_TIM_Base_MspInit+0x3c>)
 8006bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bee:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <HAL_TIM_Base_MspInit+0x3c>)
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	0109      	lsls	r1, r1, #4
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	641a      	str	r2, [r3, #64]	; 0x40
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <HAL_TIM_Base_MspInit+0x3c>)
 8006bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	4013      	ands	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b004      	add	sp, #16
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40021000 	.word	0x40021000

08006c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b089      	sub	sp, #36	; 0x24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c20:	240c      	movs	r4, #12
 8006c22:	193b      	adds	r3, r7, r4
 8006c24:	0018      	movs	r0, r3
 8006c26:	2314      	movs	r3, #20
 8006c28:	001a      	movs	r2, r3
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f007 fd98 	bl	800e760 <memset>
  if(htim->Instance==TIM1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a15      	ldr	r2, [pc, #84]	; (8006c8c <HAL_TIM_MspPostInit+0x74>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d123      	bne.n	8006c82 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c3a:	4b15      	ldr	r3, [pc, #84]	; (8006c90 <HAL_TIM_MspPostInit+0x78>)
 8006c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <HAL_TIM_MspPostInit+0x78>)
 8006c40:	2101      	movs	r1, #1
 8006c42:	430a      	orrs	r2, r1
 8006c44:	635a      	str	r2, [r3, #52]	; 0x34
 8006c46:	4b12      	ldr	r3, [pc, #72]	; (8006c90 <HAL_TIM_MspPostInit+0x78>)
 8006c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	2280      	movs	r2, #128	; 0x80
 8006c56:	0052      	lsls	r2, r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c5a:	0021      	movs	r1, r4
 8006c5c:	187b      	adds	r3, r7, r1
 8006c5e:	2202      	movs	r2, #2
 8006c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006c62:	187b      	adds	r3, r7, r1
 8006c64:	2202      	movs	r2, #2
 8006c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c68:	187b      	adds	r3, r7, r1
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006c6e:	187b      	adds	r3, r7, r1
 8006c70:	2202      	movs	r2, #2
 8006c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c74:	187a      	adds	r2, r7, r1
 8006c76:	23a0      	movs	r3, #160	; 0xa0
 8006c78:	05db      	lsls	r3, r3, #23
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f001 f8cd 	bl	8007e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006c82:	46c0      	nop			; (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	b009      	add	sp, #36	; 0x24
 8006c88:	bd90      	pop	{r4, r7, pc}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40021000 	.word	0x40021000

08006c94 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8006c94:	b590      	push	{r4, r7, lr}
 8006c96:	b08b      	sub	sp, #44	; 0x2c
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c9c:	2414      	movs	r4, #20
 8006c9e:	193b      	adds	r3, r7, r4
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	2314      	movs	r3, #20
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	f007 fd5a 	bl	800e760 <memset>
  if(husart->Instance==USART3)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a45      	ldr	r2, [pc, #276]	; (8006dc8 <HAL_USART_MspInit+0x134>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d000      	beq.n	8006cb8 <HAL_USART_MspInit+0x24>
 8006cb6:	e083      	b.n	8006dc0 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006cb8:	4b44      	ldr	r3, [pc, #272]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cbc:	4b43      	ldr	r3, [pc, #268]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cbe:	2180      	movs	r1, #128	; 0x80
 8006cc0:	02c9      	lsls	r1, r1, #11
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	63da      	str	r2, [r3, #60]	; 0x3c
 8006cc6:	4b41      	ldr	r3, [pc, #260]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cca:	2380      	movs	r3, #128	; 0x80
 8006ccc:	02db      	lsls	r3, r3, #11
 8006cce:	4013      	ands	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd4:	4b3d      	ldr	r3, [pc, #244]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd8:	4b3c      	ldr	r3, [pc, #240]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cda:	2101      	movs	r1, #1
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	635a      	str	r2, [r3, #52]	; 0x34
 8006ce0:	4b3a      	ldr	r3, [pc, #232]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cec:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	635a      	str	r2, [r3, #52]	; 0x34
 8006cf8:	4b34      	ldr	r3, [pc, #208]	; (8006dcc <HAL_USART_MspInit+0x138>)
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	4013      	ands	r3, r2
 8006d00:	60bb      	str	r3, [r7, #8]
 8006d02:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006d04:	193b      	adds	r3, r7, r4
 8006d06:	2220      	movs	r2, #32
 8006d08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d0a:	193b      	adds	r3, r7, r4
 8006d0c:	2202      	movs	r2, #2
 8006d0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d10:	193b      	adds	r3, r7, r4
 8006d12:	2200      	movs	r2, #0
 8006d14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d16:	193b      	adds	r3, r7, r4
 8006d18:	2203      	movs	r2, #3
 8006d1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006d1c:	193b      	adds	r3, r7, r4
 8006d1e:	2204      	movs	r2, #4
 8006d20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d22:	193a      	adds	r2, r7, r4
 8006d24:	23a0      	movs	r3, #160	; 0xa0
 8006d26:	05db      	lsls	r3, r3, #23
 8006d28:	0011      	movs	r1, r2
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f001 f876 	bl	8007e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d30:	0021      	movs	r1, r4
 8006d32:	187b      	adds	r3, r7, r1
 8006d34:	2203      	movs	r2, #3
 8006d36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d38:	187b      	adds	r3, r7, r1
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3e:	187b      	adds	r3, r7, r1
 8006d40:	2200      	movs	r2, #0
 8006d42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d44:	187b      	adds	r3, r7, r1
 8006d46:	2203      	movs	r2, #3
 8006d48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8006d4a:	187b      	adds	r3, r7, r1
 8006d4c:	2204      	movs	r2, #4
 8006d4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <HAL_USART_MspInit+0x13c>)
 8006d54:	0019      	movs	r1, r3
 8006d56:	0010      	movs	r0, r2
 8006d58:	f001 f860 	bl	8007e1c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8006d5c:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d5e:	4a1e      	ldr	r2, [pc, #120]	; (8006dd8 <HAL_USART_MspInit+0x144>)
 8006d60:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006d62:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d64:	2237      	movs	r2, #55	; 0x37
 8006d66:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d68:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d6e:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d74:	4b17      	ldr	r3, [pc, #92]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d7a:	4b16      	ldr	r3, [pc, #88]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d80:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006d86:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006d8c:	4b11      	ldr	r3, [pc, #68]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d8e:	2280      	movs	r2, #128	; 0x80
 8006d90:	0192      	lsls	r2, r2, #6
 8006d92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 fd78 	bl	800788c <HAL_DMA_Init>
 8006d9c:	1e03      	subs	r3, r0, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8006da0:	f7ff fcf4 	bl	800678c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a0b      	ldr	r2, [pc, #44]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006da8:	651a      	str	r2, [r3, #80]	; 0x50
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <HAL_USART_MspInit+0x140>)
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8006db0:	2200      	movs	r2, #0
 8006db2:	2100      	movs	r1, #0
 8006db4:	201d      	movs	r0, #29
 8006db6:	f000 fd37 	bl	8007828 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8006dba:	201d      	movs	r0, #29
 8006dbc:	f000 fd49 	bl	8007852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006dc0:	46c0      	nop			; (mov r8, r8)
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b00b      	add	sp, #44	; 0x2c
 8006dc6:	bd90      	pop	{r4, r7, pc}
 8006dc8:	40004800 	.word	0x40004800
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	50000400 	.word	0x50000400
 8006dd4:	2000036c 	.word	0x2000036c
 8006dd8:	40020044 	.word	0x40020044

08006ddc <LL_USART_IsActiveFlag_FE>:
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	2202      	movs	r2, #2
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d101      	bne.n	8006df4 <LL_USART_IsActiveFlag_FE+0x18>
 8006df0:	2301      	movs	r3, #1
 8006df2:	e000      	b.n	8006df6 <LL_USART_IsActiveFlag_FE+0x1a>
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	0018      	movs	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b002      	add	sp, #8
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <LL_USART_IsActiveFlag_NE>:
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d101      	bne.n	8006e16 <LL_USART_IsActiveFlag_NE+0x18>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <LL_USART_IsActiveFlag_NE+0x1a>
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b002      	add	sp, #8
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <LL_USART_IsActiveFlag_ORE>:
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b08      	cmp	r3, #8
 8006e32:	d101      	bne.n	8006e38 <LL_USART_IsActiveFlag_ORE+0x18>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <LL_USART_IsActiveFlag_ORE+0x1a>
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d101      	bne.n	8006e5a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b002      	add	sp, #8
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2220      	movs	r2, #32
 8006e72:	4013      	ands	r3, r2
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	d101      	bne.n	8006e7c <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	0018      	movs	r0, r3
 8006e80:	46bd      	mov	sp, r7
 8006e82:	b002      	add	sp, #8
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e94:	e7fe      	b.n	8006e94 <HardFault_Handler+0x4>

08006e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006e9a:	46c0      	nop			; (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006eae:	f000 f959 	bl	8007164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <DMA1_Channel1_IRQHandler+0x14>)
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f000 fe5e 	bl	8007b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	20000148 	.word	0x20000148

08006ed0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <DMA1_Channel2_3_IRQHandler+0x1c>)
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f000 fe52 	bl	8007b80 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006edc:	4b04      	ldr	r3, [pc, #16]	; (8006ef0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f000 fe4e 	bl	8007b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006ee4:	46c0      	nop			; (mov r8, r8)
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	20000208 	.word	0x20000208
 8006ef0:	20000264 	.word	0x20000264

08006ef4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006ef8:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 fe40 	bl	8007b80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8006f00:	46c0      	nop			; (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	2000036c 	.word	0x2000036c

08006f0c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <I2C1_IRQHandler+0x2c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	23e0      	movs	r3, #224	; 0xe0
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <I2C1_IRQHandler+0x2c>)
 8006f20:	0018      	movs	r0, r3
 8006f22:	f001 fa97 	bl	8008454 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8006f26:	e003      	b.n	8006f30 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8006f28:	4b03      	ldr	r3, [pc, #12]	; (8006f38 <I2C1_IRQHandler+0x2c>)
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f001 fa78 	bl	8008420 <HAL_I2C_EV_IRQHandler>
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	46c0      	nop			; (mov r8, r8)
 8006f38:	200000c0 	.word	0x200000c0

08006f3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8006f40:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <SPI1_IRQHandler+0x14>)
 8006f42:	0018      	movs	r0, r3
 8006f44:	f002 fcf4 	bl	8009930 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8006f48:	46c0      	nop			; (mov r8, r8)
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	2000010c 	.word	0x2000010c

08006f54 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8006f58:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <SPI2_IRQHandler+0x14>)
 8006f5a:	0018      	movs	r0, r3
 8006f5c:	f004 fda0 	bl	800baa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8006f60:	46c0      	nop			; (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	46c0      	nop			; (mov r8, r8)
 8006f68:	200001a4 	.word	0x200001a4

08006f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8006f70:	4b25      	ldr	r3, [pc, #148]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	4b24      	ldr	r3, [pc, #144]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f76:	2108      	movs	r1, #8
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8006f7c:	4b22      	ldr	r3, [pc, #136]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f7e:	6a1a      	ldr	r2, [r3, #32]
 8006f80:	4b21      	ldr	r3, [pc, #132]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f82:	2102      	movs	r1, #2
 8006f84:	430a      	orrs	r2, r1
 8006f86:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8006f88:	4b1f      	ldr	r3, [pc, #124]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f8a:	6a1a      	ldr	r2, [r3, #32]
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f8e:	2104      	movs	r1, #4
 8006f90:	430a      	orrs	r2, r1
 8006f92:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8006f94:	4b1c      	ldr	r3, [pc, #112]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006f96:	0018      	movs	r0, r3
 8006f98:	f7ff ff53 	bl	8006e42 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8006f9c:	1e03      	subs	r3, r0, #0
 8006f9e:	d009      	beq.n	8006fb4 <USART2_IRQHandler+0x48>
 8006fa0:	4b19      	ldr	r3, [pc, #100]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	f7ff ff5e 	bl	8006e64 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8006fa8:	1e03      	subs	r3, r0, #0
 8006faa:	d003      	beq.n	8006fb4 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8006fac:	f7fb ffb8 	bl	8002f20 <USART2_RX_Callback>
	  {
 8006fb0:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006fb2:	e025      	b.n	8007000 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8006fb4:	4b14      	ldr	r3, [pc, #80]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fb6:	6a1a      	ldr	r2, [r3, #32]
 8006fb8:	4b13      	ldr	r3, [pc, #76]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fba:	2108      	movs	r1, #8
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8006fc0:	4b11      	ldr	r3, [pc, #68]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f7ff ff2c 	bl	8006e20 <LL_USART_IsActiveFlag_ORE>
 8006fc8:	1e03      	subs	r3, r0, #0
 8006fca:	d008      	beq.n	8006fde <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fce:	6a1a      	ldr	r2, [r3, #32]
 8006fd0:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fd2:	2108      	movs	r1, #8
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006fdc:	e010      	b.n	8007000 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8006fde:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f7ff fefb 	bl	8006ddc <LL_USART_IsActiveFlag_FE>
 8006fe6:	1e03      	subs	r3, r0, #0
 8006fe8:	d002      	beq.n	8006ff0 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8006fea:	4b07      	ldr	r3, [pc, #28]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8006fee:	e007      	b.n	8007000 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8006ff0:	4b05      	ldr	r3, [pc, #20]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f7ff ff03 	bl	8006dfe <LL_USART_IsActiveFlag_NE>
 8006ff8:	1e03      	subs	r3, r0, #0
 8006ffa:	d001      	beq.n	8007000 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8006ffc:	4b02      	ldr	r3, [pc, #8]	; (8007008 <USART2_IRQHandler+0x9c>)
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8007000:	46c0      	nop			; (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	40004400 	.word	0x40004400

0800700c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <USART3_4_LPUART1_IRQHandler+0x14>)
 8007012:	0018      	movs	r0, r3
 8007014:	f006 fa52 	bl	800d4bc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8007018:	46c0      	nop			; (mov r8, r8)
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	2000030c 	.word	0x2000030c

08007024 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007028:	4b03      	ldr	r3, [pc, #12]	; (8007038 <SystemInit+0x14>)
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	0512      	lsls	r2, r2, #20
 800702e:	609a      	str	r2, [r3, #8]
#endif
}
 8007030:	46c0      	nop			; (mov r8, r8)
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	46c0      	nop			; (mov r8, r8)
 8007038:	e000ed00 	.word	0xe000ed00

0800703c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800703c:	480d      	ldr	r0, [pc, #52]	; (8007074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800703e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007040:	f7ff fff0 	bl	8007024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007044:	480c      	ldr	r0, [pc, #48]	; (8007078 <LoopForever+0x6>)
  ldr r1, =_edata
 8007046:	490d      	ldr	r1, [pc, #52]	; (800707c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007048:	4a0d      	ldr	r2, [pc, #52]	; (8007080 <LoopForever+0xe>)
  movs r3, #0
 800704a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800704c:	e002      	b.n	8007054 <LoopCopyDataInit>

0800704e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800704e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007052:	3304      	adds	r3, #4

08007054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007058:	d3f9      	bcc.n	800704e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800705a:	4a0a      	ldr	r2, [pc, #40]	; (8007084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800705c:	4c0a      	ldr	r4, [pc, #40]	; (8007088 <LoopForever+0x16>)
  movs r3, #0
 800705e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007060:	e001      	b.n	8007066 <LoopFillZerobss>

08007062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007064:	3204      	adds	r2, #4

08007066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007068:	d3fb      	bcc.n	8007062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800706a:	f007 fb55 	bl	800e718 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800706e:	f7fb f98b 	bl	8002388 <main>

08007072 <LoopForever>:

LoopForever:
  b LoopForever
 8007072:	e7fe      	b.n	8007072 <LoopForever>
  ldr   r0, =_estack
 8007074:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8007078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800707c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8007080:	0801b4f0 	.word	0x0801b4f0
  ldr r2, =_sbss
 8007084:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8007088:	20001438 	.word	0x20001438

0800708c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800708c:	e7fe      	b.n	800708c <ADC1_COMP_IRQHandler>
	...

08007090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007096:	1dfb      	adds	r3, r7, #7
 8007098:	2200      	movs	r2, #0
 800709a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <HAL_Init+0x3c>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <HAL_Init+0x3c>)
 80070a2:	2180      	movs	r1, #128	; 0x80
 80070a4:	0049      	lsls	r1, r1, #1
 80070a6:	430a      	orrs	r2, r1
 80070a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80070aa:	2000      	movs	r0, #0
 80070ac:	f000 f810 	bl	80070d0 <HAL_InitTick>
 80070b0:	1e03      	subs	r3, r0, #0
 80070b2:	d003      	beq.n	80070bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80070b4:	1dfb      	adds	r3, r7, #7
 80070b6:	2201      	movs	r2, #1
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	e001      	b.n	80070c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80070bc:	f7ff fb6c 	bl	8006798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80070c0:	1dfb      	adds	r3, r7, #7
 80070c2:	781b      	ldrb	r3, [r3, #0]
}
 80070c4:	0018      	movs	r0, r3
 80070c6:	46bd      	mov	sp, r7
 80070c8:	b002      	add	sp, #8
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40022000 	.word	0x40022000

080070d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80070d8:	230f      	movs	r3, #15
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80070e0:	4b1d      	ldr	r3, [pc, #116]	; (8007158 <HAL_InitTick+0x88>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d02b      	beq.n	8007140 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80070e8:	4b1c      	ldr	r3, [pc, #112]	; (800715c <HAL_InitTick+0x8c>)
 80070ea:	681c      	ldr	r4, [r3, #0]
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <HAL_InitTick+0x88>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	0019      	movs	r1, r3
 80070f2:	23fa      	movs	r3, #250	; 0xfa
 80070f4:	0098      	lsls	r0, r3, #2
 80070f6:	f7f9 f805 	bl	8000104 <__udivsi3>
 80070fa:	0003      	movs	r3, r0
 80070fc:	0019      	movs	r1, r3
 80070fe:	0020      	movs	r0, r4
 8007100:	f7f9 f800 	bl	8000104 <__udivsi3>
 8007104:	0003      	movs	r3, r0
 8007106:	0018      	movs	r0, r3
 8007108:	f000 fbb3 	bl	8007872 <HAL_SYSTICK_Config>
 800710c:	1e03      	subs	r3, r0, #0
 800710e:	d112      	bne.n	8007136 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b03      	cmp	r3, #3
 8007114:	d80a      	bhi.n	800712c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	2301      	movs	r3, #1
 800711a:	425b      	negs	r3, r3
 800711c:	2200      	movs	r2, #0
 800711e:	0018      	movs	r0, r3
 8007120:	f000 fb82 	bl	8007828 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007124:	4b0e      	ldr	r3, [pc, #56]	; (8007160 <HAL_InitTick+0x90>)
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e00d      	b.n	8007148 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800712c:	230f      	movs	r3, #15
 800712e:	18fb      	adds	r3, r7, r3
 8007130:	2201      	movs	r2, #1
 8007132:	701a      	strb	r2, [r3, #0]
 8007134:	e008      	b.n	8007148 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007136:	230f      	movs	r3, #15
 8007138:	18fb      	adds	r3, r7, r3
 800713a:	2201      	movs	r2, #1
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e003      	b.n	8007148 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007140:	230f      	movs	r3, #15
 8007142:	18fb      	adds	r3, r7, r3
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007148:	230f      	movs	r3, #15
 800714a:	18fb      	adds	r3, r7, r3
 800714c:	781b      	ldrb	r3, [r3, #0]
}
 800714e:	0018      	movs	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	b005      	add	sp, #20
 8007154:	bd90      	pop	{r4, r7, pc}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	20000070 	.word	0x20000070
 800715c:	20000068 	.word	0x20000068
 8007160:	2000006c 	.word	0x2000006c

08007164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_IncTick+0x1c>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	001a      	movs	r2, r3
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_IncTick+0x20>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	18d2      	adds	r2, r2, r3
 8007174:	4b03      	ldr	r3, [pc, #12]	; (8007184 <HAL_IncTick+0x20>)
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	46c0      	nop			; (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	20000070 	.word	0x20000070
 8007184:	20001434 	.word	0x20001434

08007188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  return uwTick;
 800718c:	4b02      	ldr	r3, [pc, #8]	; (8007198 <HAL_GetTick+0x10>)
 800718e:	681b      	ldr	r3, [r3, #0]
}
 8007190:	0018      	movs	r0, r3
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	20001434 	.word	0x20001434

0800719c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071a4:	f7ff fff0 	bl	8007188 <HAL_GetTick>
 80071a8:	0003      	movs	r3, r0
 80071aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	d005      	beq.n	80071c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071b6:	4b0a      	ldr	r3, [pc, #40]	; (80071e0 <HAL_Delay+0x44>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	001a      	movs	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	189b      	adds	r3, r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	f7ff ffe0 	bl	8007188 <HAL_GetTick>
 80071c8:	0002      	movs	r2, r0
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d8f7      	bhi.n	80071c4 <HAL_Delay+0x28>
  {
  }
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	46bd      	mov	sp, r7
 80071da:	b004      	add	sp, #16
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	46c0      	nop			; (mov r8, r8)
 80071e0:	20000070 	.word	0x20000070

080071e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a06      	ldr	r2, [pc, #24]	; (800720c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80071f2:	4013      	ands	r3, r2
 80071f4:	0019      	movs	r1, r3
 80071f6:	4b04      	ldr	r3, [pc, #16]	; (8007208 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	46c0      	nop			; (mov r8, r8)
 8007200:	46bd      	mov	sp, r7
 8007202:	b002      	add	sp, #8
 8007204:	bd80      	pop	{r7, pc}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	40010000 	.word	0x40010000
 800720c:	fffff9ff 	.word	0xfffff9ff

08007210 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007218:	4a05      	ldr	r2, [pc, #20]	; (8007230 <LL_EXTI_EnableIT_0_31+0x20>)
 800721a:	2380      	movs	r3, #128	; 0x80
 800721c:	58d2      	ldr	r2, [r2, r3]
 800721e:	4904      	ldr	r1, [pc, #16]	; (8007230 <LL_EXTI_EnableIT_0_31+0x20>)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4313      	orrs	r3, r2
 8007224:	2280      	movs	r2, #128	; 0x80
 8007226:	508b      	str	r3, [r1, r2]
}
 8007228:	46c0      	nop			; (mov r8, r8)
 800722a:	46bd      	mov	sp, r7
 800722c:	b002      	add	sp, #8
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40021800 	.word	0x40021800

08007234 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800723c:	4a06      	ldr	r2, [pc, #24]	; (8007258 <LL_EXTI_DisableIT_0_31+0x24>)
 800723e:	2380      	movs	r3, #128	; 0x80
 8007240:	58d3      	ldr	r3, [r2, r3]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	43d2      	mvns	r2, r2
 8007246:	4904      	ldr	r1, [pc, #16]	; (8007258 <LL_EXTI_DisableIT_0_31+0x24>)
 8007248:	4013      	ands	r3, r2
 800724a:	2280      	movs	r2, #128	; 0x80
 800724c:	508b      	str	r3, [r1, r2]
}
 800724e:	46c0      	nop			; (mov r8, r8)
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	40021800 	.word	0x40021800

0800725c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007264:	4a05      	ldr	r2, [pc, #20]	; (800727c <LL_EXTI_EnableEvent_0_31+0x20>)
 8007266:	2384      	movs	r3, #132	; 0x84
 8007268:	58d2      	ldr	r2, [r2, r3]
 800726a:	4904      	ldr	r1, [pc, #16]	; (800727c <LL_EXTI_EnableEvent_0_31+0x20>)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4313      	orrs	r3, r2
 8007270:	2284      	movs	r2, #132	; 0x84
 8007272:	508b      	str	r3, [r1, r2]

}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	46bd      	mov	sp, r7
 8007278:	b002      	add	sp, #8
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40021800 	.word	0x40021800

08007280 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007288:	4a06      	ldr	r2, [pc, #24]	; (80072a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800728a:	2384      	movs	r3, #132	; 0x84
 800728c:	58d3      	ldr	r3, [r2, r3]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	43d2      	mvns	r2, r2
 8007292:	4904      	ldr	r1, [pc, #16]	; (80072a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007294:	4013      	ands	r3, r2
 8007296:	2284      	movs	r2, #132	; 0x84
 8007298:	508b      	str	r3, [r1, r2]
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	b002      	add	sp, #8
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	40021800 	.word	0x40021800

080072a8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80072b0:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80072b2:	6819      	ldr	r1, [r3, #0]
 80072b4:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]

}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40021800 	.word	0x40021800

080072c8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	43d9      	mvns	r1, r3
 80072d8:	4b03      	ldr	r3, [pc, #12]	; (80072e8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80072da:	400a      	ands	r2, r1
 80072dc:	601a      	str	r2, [r3, #0]

}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b002      	add	sp, #8
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	40021800 	.word	0x40021800

080072ec <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	4b03      	ldr	r3, [pc, #12]	; (8007308 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	605a      	str	r2, [r3, #4]
}
 8007300:	46c0      	nop			; (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	b002      	add	sp, #8
 8007306:	bd80      	pop	{r7, pc}
 8007308:	40021800 	.word	0x40021800

0800730c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	43d9      	mvns	r1, r3
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800731e:	400a      	ands	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
}
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	46bd      	mov	sp, r7
 8007326:	b002      	add	sp, #8
 8007328:	bd80      	pop	{r7, pc}
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	40021800 	.word	0x40021800

08007330 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8007338:	4b03      	ldr	r3, [pc, #12]	; (8007348 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	611a      	str	r2, [r3, #16]
}
 800733e:	46c0      	nop			; (mov r8, r8)
 8007340:	46bd      	mov	sp, r7
 8007342:	b002      	add	sp, #8
 8007344:	bd80      	pop	{r7, pc}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	40021800 	.word	0x40021800

0800734c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8007354:	4b03      	ldr	r3, [pc, #12]	; (8007364 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	60da      	str	r2, [r3, #12]
}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	46bd      	mov	sp, r7
 800735e:	b002      	add	sp, #8
 8007360:	bd80      	pop	{r7, pc}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	40021800 	.word	0x40021800

08007368 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b088      	sub	sp, #32
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007374:	211f      	movs	r1, #31
 8007376:	187b      	adds	r3, r7, r1
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8007382:	187b      	adds	r3, r7, r1
 8007384:	2201      	movs	r2, #1
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	e13d      	b.n	8007606 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	0fdb      	lsrs	r3, r3, #31
 8007392:	07da      	lsls	r2, r3, #31
 8007394:	2380      	movs	r3, #128	; 0x80
 8007396:	061b      	lsls	r3, r3, #24
 8007398:	429a      	cmp	r2, r3
 800739a:	d104      	bne.n	80073a6 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 800739c:	231f      	movs	r3, #31
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	2201      	movs	r2, #1
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e12f      	b.n	8007606 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2229      	movs	r2, #41	; 0x29
 80073aa:	5c9b      	ldrb	r3, [r3, r2]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10a      	bne.n	80073c8 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2228      	movs	r2, #40	; 0x28
 80073b6:	2100      	movs	r1, #0
 80073b8:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f7ff fa10 	bl	80067e8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2230      	movs	r2, #48	; 0x30
 80073d0:	4013      	ands	r3, r2
 80073d2:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80073f4:	4313      	orrs	r3, r2
 80073f6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a85      	ldr	r2, [pc, #532]	; (8007614 <HAL_COMP_Init+0x2ac>)
 8007400:	4013      	ands	r3, r2
 8007402:	0019      	movs	r1, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	430a      	orrs	r2, r1
 800740c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	2380      	movs	r3, #128	; 0x80
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	429a      	cmp	r2, r3
 8007418:	d10d      	bne.n	8007436 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800741a:	4b7f      	ldr	r3, [pc, #508]	; (8007618 <HAL_COMP_Init+0x2b0>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4b7e      	ldr	r3, [pc, #504]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007420:	497e      	ldr	r1, [pc, #504]	; (800761c <HAL_COMP_Init+0x2b4>)
 8007422:	400a      	ands	r2, r1
 8007424:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8007426:	4b7c      	ldr	r3, [pc, #496]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	4b7b      	ldr	r3, [pc, #492]	; (8007618 <HAL_COMP_Init+0x2b0>)
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	0109      	lsls	r1, r1, #4
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	e01f      	b.n	8007476 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	23c0      	movs	r3, #192	; 0xc0
 800743c:	015b      	lsls	r3, r3, #5
 800743e:	429a      	cmp	r2, r3
 8007440:	d10d      	bne.n	800745e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8007442:	4b75      	ldr	r3, [pc, #468]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	4b74      	ldr	r3, [pc, #464]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	0109      	lsls	r1, r1, #4
 800744c:	430a      	orrs	r2, r1
 800744e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8007450:	4b71      	ldr	r3, [pc, #452]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	4b70      	ldr	r3, [pc, #448]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007456:	4971      	ldr	r1, [pc, #452]	; (800761c <HAL_COMP_Init+0x2b4>)
 8007458:	400a      	ands	r2, r1
 800745a:	605a      	str	r2, [r3, #4]
 800745c:	e00b      	b.n	8007476 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800745e:	4b6e      	ldr	r3, [pc, #440]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b6d      	ldr	r3, [pc, #436]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007464:	496d      	ldr	r1, [pc, #436]	; (800761c <HAL_COMP_Init+0x2b4>)
 8007466:	400a      	ands	r2, r1
 8007468:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800746a:	4b6b      	ldr	r3, [pc, #428]	; (8007618 <HAL_COMP_Init+0x2b0>)
 800746c:	685a      	ldr	r2, [r3, #4]
 800746e:	4b6a      	ldr	r3, [pc, #424]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007470:	496a      	ldr	r1, [pc, #424]	; (800761c <HAL_COMP_Init+0x2b4>)
 8007472:	400a      	ands	r2, r1
 8007474:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	22a0      	movs	r2, #160	; 0xa0
 800747c:	01d2      	lsls	r2, r2, #7
 800747e:	4293      	cmp	r3, r2
 8007480:	d017      	beq.n	80074b2 <HAL_COMP_Init+0x14a>
 8007482:	22a0      	movs	r2, #160	; 0xa0
 8007484:	01d2      	lsls	r2, r2, #7
 8007486:	4293      	cmp	r3, r2
 8007488:	d830      	bhi.n	80074ec <HAL_COMP_Init+0x184>
 800748a:	2b01      	cmp	r3, #1
 800748c:	d01f      	beq.n	80074ce <HAL_COMP_Init+0x166>
 800748e:	2280      	movs	r2, #128	; 0x80
 8007490:	01d2      	lsls	r2, r2, #7
 8007492:	4293      	cmp	r3, r2
 8007494:	d12a      	bne.n	80074ec <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8007496:	4b60      	ldr	r3, [pc, #384]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4b5f      	ldr	r3, [pc, #380]	; (8007618 <HAL_COMP_Init+0x2b0>)
 800749c:	2180      	movs	r1, #128	; 0x80
 800749e:	01c9      	lsls	r1, r1, #7
 80074a0:	430a      	orrs	r2, r1
 80074a2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80074a4:	4b5c      	ldr	r3, [pc, #368]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	4b5b      	ldr	r3, [pc, #364]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074aa:	495d      	ldr	r1, [pc, #372]	; (8007620 <HAL_COMP_Init+0x2b8>)
 80074ac:	400a      	ands	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
        break;
 80074b0:	e029      	b.n	8007506 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80074b2:	4b59      	ldr	r3, [pc, #356]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	4b58      	ldr	r3, [pc, #352]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074b8:	4959      	ldr	r1, [pc, #356]	; (8007620 <HAL_COMP_Init+0x2b8>)
 80074ba:	400a      	ands	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80074be:	4b56      	ldr	r3, [pc, #344]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	4b55      	ldr	r3, [pc, #340]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	01c9      	lsls	r1, r1, #7
 80074c8:	430a      	orrs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]
        break;
 80074cc:	e01b      	b.n	8007506 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80074ce:	4b52      	ldr	r3, [pc, #328]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b51      	ldr	r3, [pc, #324]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074d4:	2180      	movs	r1, #128	; 0x80
 80074d6:	01c9      	lsls	r1, r1, #7
 80074d8:	430a      	orrs	r2, r1
 80074da:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80074dc:	4b4e      	ldr	r3, [pc, #312]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	4b4d      	ldr	r3, [pc, #308]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	01c9      	lsls	r1, r1, #7
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
        break;
 80074ea:	e00c      	b.n	8007506 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80074ec:	4b4a      	ldr	r3, [pc, #296]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	4b49      	ldr	r3, [pc, #292]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074f2:	494b      	ldr	r1, [pc, #300]	; (8007620 <HAL_COMP_Init+0x2b8>)
 80074f4:	400a      	ands	r2, r1
 80074f6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80074f8:	4b47      	ldr	r3, [pc, #284]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	4b46      	ldr	r3, [pc, #280]	; (8007618 <HAL_COMP_Init+0x2b0>)
 80074fe:	4948      	ldr	r1, [pc, #288]	; (8007620 <HAL_COMP_Init+0x2b8>)
 8007500:	400a      	ands	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
        break;
 8007504:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2230      	movs	r2, #48	; 0x30
 800750e:	4013      	ands	r3, r2
 8007510:	d016      	beq.n	8007540 <HAL_COMP_Init+0x1d8>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d113      	bne.n	8007540 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007518:	4b42      	ldr	r3, [pc, #264]	; (8007624 <HAL_COMP_Init+0x2bc>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4942      	ldr	r1, [pc, #264]	; (8007628 <HAL_COMP_Init+0x2c0>)
 800751e:	0018      	movs	r0, r3
 8007520:	f7f8 fdf0 	bl	8000104 <__udivsi3>
 8007524:	0003      	movs	r3, r0
 8007526:	001a      	movs	r2, r3
 8007528:	0013      	movs	r3, r2
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	189b      	adds	r3, r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007532:	e002      	b.n	800753a <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3b01      	subs	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f9      	bne.n	8007534 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a34      	ldr	r2, [pc, #208]	; (8007618 <HAL_COMP_Init+0x2b0>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d102      	bne.n	8007550 <HAL_COMP_Init+0x1e8>
 800754a:	2380      	movs	r3, #128	; 0x80
 800754c:	029b      	lsls	r3, r3, #10
 800754e:	e001      	b.n	8007554 <HAL_COMP_Init+0x1ec>
 8007550:	2380      	movs	r3, #128	; 0x80
 8007552:	02db      	lsls	r3, r3, #11
 8007554:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2203      	movs	r2, #3
 800755c:	4013      	ands	r3, r2
 800755e:	d040      	beq.n	80075e2 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	2210      	movs	r2, #16
 8007566:	4013      	ands	r3, r2
 8007568:	d004      	beq.n	8007574 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	0018      	movs	r0, r3
 800756e:	f7ff fe9b 	bl	80072a8 <LL_EXTI_EnableRisingTrig_0_31>
 8007572:	e003      	b.n	800757c <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	0018      	movs	r0, r3
 8007578:	f7ff fea6 	bl	80072c8 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2220      	movs	r2, #32
 8007582:	4013      	ands	r3, r2
 8007584:	d004      	beq.n	8007590 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	0018      	movs	r0, r3
 800758a:	f7ff feaf 	bl	80072ec <LL_EXTI_EnableFallingTrig_0_31>
 800758e:	e003      	b.n	8007598 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	0018      	movs	r0, r3
 8007594:	f7ff feba 	bl	800730c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff fed6 	bl	800734c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7ff fec4 	bl	8007330 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	2202      	movs	r2, #2
 80075ae:	4013      	ands	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	0018      	movs	r0, r3
 80075b6:	f7ff fe51 	bl	800725c <LL_EXTI_EnableEvent_0_31>
 80075ba:	e003      	b.n	80075c4 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	0018      	movs	r0, r3
 80075c0:	f7ff fe5e 	bl	8007280 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2201      	movs	r2, #1
 80075ca:	4013      	ands	r3, r2
 80075cc:	d004      	beq.n	80075d8 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7ff fe1d 	bl	8007210 <LL_EXTI_EnableIT_0_31>
 80075d6:	e00c      	b.n	80075f2 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	0018      	movs	r0, r3
 80075dc:	f7ff fe2a 	bl	8007234 <LL_EXTI_DisableIT_0_31>
 80075e0:	e007      	b.n	80075f2 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	0018      	movs	r0, r3
 80075e6:	f7ff fe4b 	bl	8007280 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	0018      	movs	r0, r3
 80075ee:	f7ff fe21 	bl	8007234 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2229      	movs	r2, #41	; 0x29
 80075f6:	5c9b      	ldrb	r3, [r3, r2]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2229      	movs	r2, #41	; 0x29
 8007602:	2101      	movs	r1, #1
 8007604:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8007606:	231f      	movs	r3, #31
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	781b      	ldrb	r3, [r3, #0]
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b008      	add	sp, #32
 8007612:	bd80      	pop	{r7, pc}
 8007614:	fe00740f 	.word	0xfe00740f
 8007618:	40010200 	.word	0x40010200
 800761c:	fffff7ff 	.word	0xfffff7ff
 8007620:	ffffbfff 	.word	0xffffbfff
 8007624:	20000068 	.word	0x20000068
 8007628:	00030d40 	.word	0x00030d40

0800762c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007638:	210f      	movs	r1, #15
 800763a:	187b      	adds	r3, r7, r1
 800763c:	2200      	movs	r2, #0
 800763e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d103      	bne.n	800764e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8007646:	187b      	adds	r3, r7, r1
 8007648:	2201      	movs	r2, #1
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	e034      	b.n	80076b8 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	0fdb      	lsrs	r3, r3, #31
 8007656:	07da      	lsls	r2, r3, #31
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	061b      	lsls	r3, r3, #24
 800765c:	429a      	cmp	r2, r3
 800765e:	d104      	bne.n	800766a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8007660:	230f      	movs	r3, #15
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	2201      	movs	r2, #1
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	e026      	b.n	80076b8 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2229      	movs	r2, #41	; 0x29
 800766e:	5c9b      	ldrb	r3, [r3, r2]
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b01      	cmp	r3, #1
 8007674:	d11c      	bne.n	80076b0 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2101      	movs	r1, #1
 8007682:	430a      	orrs	r2, r1
 8007684:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2229      	movs	r2, #41	; 0x29
 800768a:	2102      	movs	r1, #2
 800768c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800768e:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <HAL_COMP_Start+0x9c>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	490e      	ldr	r1, [pc, #56]	; (80076cc <HAL_COMP_Start+0xa0>)
 8007694:	0018      	movs	r0, r3
 8007696:	f7f8 fd35 	bl	8000104 <__udivsi3>
 800769a:	0003      	movs	r3, r0
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80076a0:	e002      	b.n	80076a8 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f9      	bne.n	80076a2 <HAL_COMP_Start+0x76>
 80076ae:	e003      	b.n	80076b8 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80076b0:	230f      	movs	r3, #15
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80076b8:	230f      	movs	r3, #15
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	781b      	ldrb	r3, [r3, #0]
}
 80076be:	0018      	movs	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b004      	add	sp, #16
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	20000068 	.word	0x20000068
 80076cc:	00030d40 	.word	0x00030d40

080076d0 <__NVIC_EnableIRQ>:
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	0002      	movs	r2, r0
 80076d8:	1dfb      	adds	r3, r7, #7
 80076da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80076dc:	1dfb      	adds	r3, r7, #7
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b7f      	cmp	r3, #127	; 0x7f
 80076e2:	d809      	bhi.n	80076f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076e4:	1dfb      	adds	r3, r7, #7
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	001a      	movs	r2, r3
 80076ea:	231f      	movs	r3, #31
 80076ec:	401a      	ands	r2, r3
 80076ee:	4b04      	ldr	r3, [pc, #16]	; (8007700 <__NVIC_EnableIRQ+0x30>)
 80076f0:	2101      	movs	r1, #1
 80076f2:	4091      	lsls	r1, r2
 80076f4:	000a      	movs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]
}
 80076f8:	46c0      	nop			; (mov r8, r8)
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b002      	add	sp, #8
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	e000e100 	.word	0xe000e100

08007704 <__NVIC_SetPriority>:
{
 8007704:	b590      	push	{r4, r7, lr}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	0002      	movs	r2, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	1dfb      	adds	r3, r7, #7
 8007710:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007712:	1dfb      	adds	r3, r7, #7
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b7f      	cmp	r3, #127	; 0x7f
 8007718:	d828      	bhi.n	800776c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800771a:	4a2f      	ldr	r2, [pc, #188]	; (80077d8 <__NVIC_SetPriority+0xd4>)
 800771c:	1dfb      	adds	r3, r7, #7
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	b25b      	sxtb	r3, r3
 8007722:	089b      	lsrs	r3, r3, #2
 8007724:	33c0      	adds	r3, #192	; 0xc0
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	589b      	ldr	r3, [r3, r2]
 800772a:	1dfa      	adds	r2, r7, #7
 800772c:	7812      	ldrb	r2, [r2, #0]
 800772e:	0011      	movs	r1, r2
 8007730:	2203      	movs	r2, #3
 8007732:	400a      	ands	r2, r1
 8007734:	00d2      	lsls	r2, r2, #3
 8007736:	21ff      	movs	r1, #255	; 0xff
 8007738:	4091      	lsls	r1, r2
 800773a:	000a      	movs	r2, r1
 800773c:	43d2      	mvns	r2, r2
 800773e:	401a      	ands	r2, r3
 8007740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	019b      	lsls	r3, r3, #6
 8007746:	22ff      	movs	r2, #255	; 0xff
 8007748:	401a      	ands	r2, r3
 800774a:	1dfb      	adds	r3, r7, #7
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	0018      	movs	r0, r3
 8007750:	2303      	movs	r3, #3
 8007752:	4003      	ands	r3, r0
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007758:	481f      	ldr	r0, [pc, #124]	; (80077d8 <__NVIC_SetPriority+0xd4>)
 800775a:	1dfb      	adds	r3, r7, #7
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b25b      	sxtb	r3, r3
 8007760:	089b      	lsrs	r3, r3, #2
 8007762:	430a      	orrs	r2, r1
 8007764:	33c0      	adds	r3, #192	; 0xc0
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	501a      	str	r2, [r3, r0]
}
 800776a:	e031      	b.n	80077d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800776c:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <__NVIC_SetPriority+0xd8>)
 800776e:	1dfb      	adds	r3, r7, #7
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	0019      	movs	r1, r3
 8007774:	230f      	movs	r3, #15
 8007776:	400b      	ands	r3, r1
 8007778:	3b08      	subs	r3, #8
 800777a:	089b      	lsrs	r3, r3, #2
 800777c:	3306      	adds	r3, #6
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	18d3      	adds	r3, r2, r3
 8007782:	3304      	adds	r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	1dfa      	adds	r2, r7, #7
 8007788:	7812      	ldrb	r2, [r2, #0]
 800778a:	0011      	movs	r1, r2
 800778c:	2203      	movs	r2, #3
 800778e:	400a      	ands	r2, r1
 8007790:	00d2      	lsls	r2, r2, #3
 8007792:	21ff      	movs	r1, #255	; 0xff
 8007794:	4091      	lsls	r1, r2
 8007796:	000a      	movs	r2, r1
 8007798:	43d2      	mvns	r2, r2
 800779a:	401a      	ands	r2, r3
 800779c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	019b      	lsls	r3, r3, #6
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	401a      	ands	r2, r3
 80077a6:	1dfb      	adds	r3, r7, #7
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	0018      	movs	r0, r3
 80077ac:	2303      	movs	r3, #3
 80077ae:	4003      	ands	r3, r0
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80077b4:	4809      	ldr	r0, [pc, #36]	; (80077dc <__NVIC_SetPriority+0xd8>)
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	001c      	movs	r4, r3
 80077bc:	230f      	movs	r3, #15
 80077be:	4023      	ands	r3, r4
 80077c0:	3b08      	subs	r3, #8
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	430a      	orrs	r2, r1
 80077c6:	3306      	adds	r3, #6
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	18c3      	adds	r3, r0, r3
 80077cc:	3304      	adds	r3, #4
 80077ce:	601a      	str	r2, [r3, #0]
}
 80077d0:	46c0      	nop			; (mov r8, r8)
 80077d2:	46bd      	mov	sp, r7
 80077d4:	b003      	add	sp, #12
 80077d6:	bd90      	pop	{r4, r7, pc}
 80077d8:	e000e100 	.word	0xe000e100
 80077dc:	e000ed00 	.word	0xe000ed00

080077e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	1e5a      	subs	r2, r3, #1
 80077ec:	2380      	movs	r3, #128	; 0x80
 80077ee:	045b      	lsls	r3, r3, #17
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d301      	bcc.n	80077f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077f4:	2301      	movs	r3, #1
 80077f6:	e010      	b.n	800781a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077f8:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <SysTick_Config+0x44>)
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	3a01      	subs	r2, #1
 80077fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007800:	2301      	movs	r3, #1
 8007802:	425b      	negs	r3, r3
 8007804:	2103      	movs	r1, #3
 8007806:	0018      	movs	r0, r3
 8007808:	f7ff ff7c 	bl	8007704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <SysTick_Config+0x44>)
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007812:	4b04      	ldr	r3, [pc, #16]	; (8007824 <SysTick_Config+0x44>)
 8007814:	2207      	movs	r2, #7
 8007816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007818:	2300      	movs	r3, #0
}
 800781a:	0018      	movs	r0, r3
 800781c:	46bd      	mov	sp, r7
 800781e:	b002      	add	sp, #8
 8007820:	bd80      	pop	{r7, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	e000e010 	.word	0xe000e010

08007828 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
 8007832:	210f      	movs	r1, #15
 8007834:	187b      	adds	r3, r7, r1
 8007836:	1c02      	adds	r2, r0, #0
 8007838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	187b      	adds	r3, r7, r1
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b25b      	sxtb	r3, r3
 8007842:	0011      	movs	r1, r2
 8007844:	0018      	movs	r0, r3
 8007846:	f7ff ff5d 	bl	8007704 <__NVIC_SetPriority>
}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	46bd      	mov	sp, r7
 800784e:	b004      	add	sp, #16
 8007850:	bd80      	pop	{r7, pc}

08007852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	0002      	movs	r2, r0
 800785a:	1dfb      	adds	r3, r7, #7
 800785c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800785e:	1dfb      	adds	r3, r7, #7
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b25b      	sxtb	r3, r3
 8007864:	0018      	movs	r0, r3
 8007866:	f7ff ff33 	bl	80076d0 <__NVIC_EnableIRQ>
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	46bd      	mov	sp, r7
 800786e:	b002      	add	sp, #8
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0018      	movs	r0, r3
 800787e:	f7ff ffaf 	bl	80077e0 <SysTick_Config>
 8007882:	0003      	movs	r3, r0
}
 8007884:	0018      	movs	r0, r3
 8007886:	46bd      	mov	sp, r7
 8007888:	b002      	add	sp, #8
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e077      	b.n	800798e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a3d      	ldr	r2, [pc, #244]	; (8007998 <HAL_DMA_Init+0x10c>)
 80078a4:	4694      	mov	ip, r2
 80078a6:	4463      	add	r3, ip
 80078a8:	2114      	movs	r1, #20
 80078aa:	0018      	movs	r0, r3
 80078ac:	f7f8 fc2a 	bl	8000104 <__udivsi3>
 80078b0:	0003      	movs	r3, r0
 80078b2:	009a      	lsls	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2225      	movs	r2, #37	; 0x25
 80078bc:	2102      	movs	r1, #2
 80078be:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4934      	ldr	r1, [pc, #208]	; (800799c <HAL_DMA_Init+0x110>)
 80078cc:	400a      	ands	r2, r1
 80078ce:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6819      	ldr	r1, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	431a      	orrs	r2, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	431a      	orrs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0018      	movs	r0, r3
 800790a:	f000 fa37 	bl	8007d7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	2380      	movs	r3, #128	; 0x80
 8007914:	01db      	lsls	r3, r3, #7
 8007916:	429a      	cmp	r2, r3
 8007918:	d102      	bne.n	8007920 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007928:	213f      	movs	r1, #63	; 0x3f
 800792a:	400a      	ands	r2, r1
 800792c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007936:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d011      	beq.n	8007964 <HAL_DMA_Init+0xd8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b04      	cmp	r3, #4
 8007946:	d80d      	bhi.n	8007964 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	0018      	movs	r0, r3
 800794c:	f000 fa42 	bl	8007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	e008      	b.n	8007976 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2225      	movs	r2, #37	; 0x25
 8007980:	2101      	movs	r1, #1
 8007982:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2224      	movs	r2, #36	; 0x24
 8007988:	2100      	movs	r1, #0
 800798a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	0018      	movs	r0, r3
 8007990:	46bd      	mov	sp, r7
 8007992:	b002      	add	sp, #8
 8007994:	bd80      	pop	{r7, pc}
 8007996:	46c0      	nop			; (mov r8, r8)
 8007998:	bffdfff8 	.word	0xbffdfff8
 800799c:	ffff800f 	.word	0xffff800f

080079a0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2317      	movs	r3, #23
 80079b0:	18fb      	adds	r3, r7, r3
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2224      	movs	r2, #36	; 0x24
 80079ba:	5c9b      	ldrb	r3, [r3, r2]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_DMA_Start_IT+0x24>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e06f      	b.n	8007aa4 <HAL_DMA_Start_IT+0x104>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2224      	movs	r2, #36	; 0x24
 80079c8:	2101      	movs	r1, #1
 80079ca:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2225      	movs	r2, #37	; 0x25
 80079d0:	5c9b      	ldrb	r3, [r3, r2]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d157      	bne.n	8007a88 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2225      	movs	r2, #37	; 0x25
 80079dc:	2102      	movs	r1, #2
 80079de:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2101      	movs	r1, #1
 80079f2:	438a      	bics	r2, r1
 80079f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f97d 	bl	8007cfc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	210e      	movs	r1, #14
 8007a16:	430a      	orrs	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e00f      	b.n	8007a3c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2104      	movs	r1, #4
 8007a28:	438a      	bics	r2, r1
 8007a2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	210a      	movs	r1, #10
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	2380      	movs	r3, #128	; 0x80
 8007a44:	025b      	lsls	r3, r3, #9
 8007a46:	4013      	ands	r3, r2
 8007a48:	d008      	beq.n	8007a5c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	2180      	movs	r1, #128	; 0x80
 8007a56:	0049      	lsls	r1, r1, #1
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d008      	beq.n	8007a76 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	0049      	lsls	r1, r1, #1
 8007a72:	430a      	orrs	r2, r1
 8007a74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2101      	movs	r1, #1
 8007a82:	430a      	orrs	r2, r1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e00a      	b.n	8007a9e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2280      	movs	r2, #128	; 0x80
 8007a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2224      	movs	r2, #36	; 0x24
 8007a92:	2100      	movs	r1, #0
 8007a94:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8007a96:	2317      	movs	r3, #23
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007a9e:	2317      	movs	r3, #23
 8007aa0:	18fb      	adds	r3, r7, r3
 8007aa2:	781b      	ldrb	r3, [r3, #0]
}
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	b006      	add	sp, #24
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab4:	210f      	movs	r1, #15
 8007ab6:	187b      	adds	r3, r7, r1
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2225      	movs	r2, #37	; 0x25
 8007ac0:	5c9b      	ldrb	r3, [r3, r2]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d006      	beq.n	8007ad6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2204      	movs	r2, #4
 8007acc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007ace:	187b      	adds	r3, r7, r1
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e049      	b.n	8007b6a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	210e      	movs	r1, #14
 8007ae2:	438a      	bics	r2, r1
 8007ae4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2101      	movs	r1, #1
 8007af2:	438a      	bics	r2, r1
 8007af4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b00:	491d      	ldr	r1, [pc, #116]	; (8007b78 <HAL_DMA_Abort_IT+0xcc>)
 8007b02:	400a      	ands	r2, r1
 8007b04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007b06:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <HAL_DMA_Abort_IT+0xd0>)
 8007b08:	6859      	ldr	r1, [r3, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	221c      	movs	r2, #28
 8007b10:	4013      	ands	r3, r2
 8007b12:	2201      	movs	r2, #1
 8007b14:	409a      	lsls	r2, r3
 8007b16:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <HAL_DMA_Abort_IT+0xd0>)
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007b24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00c      	beq.n	8007b48 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b38:	490f      	ldr	r1, [pc, #60]	; (8007b78 <HAL_DMA_Abort_IT+0xcc>)
 8007b3a:	400a      	ands	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2225      	movs	r2, #37	; 0x25
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2224      	movs	r2, #36	; 0x24
 8007b54:	2100      	movs	r1, #0
 8007b56:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	0010      	movs	r0, r2
 8007b68:	4798      	blx	r3
    }
  }
  return status;
 8007b6a:	230f      	movs	r3, #15
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	781b      	ldrb	r3, [r3, #0]
}
 8007b70:	0018      	movs	r0, r3
 8007b72:	46bd      	mov	sp, r7
 8007b74:	b004      	add	sp, #16
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	fffffeff 	.word	0xfffffeff
 8007b7c:	40020000 	.word	0x40020000

08007b80 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007b88:	4b55      	ldr	r3, [pc, #340]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	221c      	movs	r2, #28
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	2204      	movs	r2, #4
 8007ba0:	409a      	lsls	r2, r3
 8007ba2:	0013      	movs	r3, r2
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	d027      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x7a>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2204      	movs	r2, #4
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d023      	beq.n	8007bfa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	4013      	ands	r3, r2
 8007bbc:	d107      	bne.n	8007bce <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2104      	movs	r1, #4
 8007bca:	438a      	bics	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007bce:	4b44      	ldr	r3, [pc, #272]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007bd0:	6859      	ldr	r1, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	221c      	movs	r2, #28
 8007bd8:	4013      	ands	r3, r2
 8007bda:	2204      	movs	r2, #4
 8007bdc:	409a      	lsls	r2, r3
 8007bde:	4b40      	ldr	r3, [pc, #256]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d100      	bne.n	8007bee <HAL_DMA_IRQHandler+0x6e>
 8007bec:	e073      	b.n	8007cd6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	0010      	movs	r0, r2
 8007bf6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007bf8:	e06d      	b.n	8007cd6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	221c      	movs	r2, #28
 8007c00:	4013      	ands	r3, r2
 8007c02:	2202      	movs	r2, #2
 8007c04:	409a      	lsls	r2, r3
 8007c06:	0013      	movs	r3, r2
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d02e      	beq.n	8007c6c <HAL_DMA_IRQHandler+0xec>
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2202      	movs	r2, #2
 8007c12:	4013      	ands	r3, r2
 8007c14:	d02a      	beq.n	8007c6c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d10b      	bne.n	8007c3a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	210a      	movs	r1, #10
 8007c2e:	438a      	bics	r2, r1
 8007c30:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2225      	movs	r2, #37	; 0x25
 8007c36:	2101      	movs	r1, #1
 8007c38:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007c3a:	4b29      	ldr	r3, [pc, #164]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	221c      	movs	r2, #28
 8007c44:	4013      	ands	r3, r2
 8007c46:	2202      	movs	r2, #2
 8007c48:	409a      	lsls	r2, r3
 8007c4a:	4b25      	ldr	r3, [pc, #148]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007c4c:	430a      	orrs	r2, r1
 8007c4e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2224      	movs	r2, #36	; 0x24
 8007c54:	2100      	movs	r1, #0
 8007c56:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d03a      	beq.n	8007cd6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	0010      	movs	r0, r2
 8007c68:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007c6a:	e034      	b.n	8007cd6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c70:	221c      	movs	r2, #28
 8007c72:	4013      	ands	r3, r2
 8007c74:	2208      	movs	r2, #8
 8007c76:	409a      	lsls	r2, r3
 8007c78:	0013      	movs	r3, r2
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	d02b      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x158>
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2208      	movs	r2, #8
 8007c84:	4013      	ands	r3, r2
 8007c86:	d027      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	210e      	movs	r1, #14
 8007c94:	438a      	bics	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007c98:	4b11      	ldr	r3, [pc, #68]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007c9a:	6859      	ldr	r1, [r3, #4]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	221c      	movs	r2, #28
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	4b0d      	ldr	r3, [pc, #52]	; (8007ce0 <HAL_DMA_IRQHandler+0x160>)
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2225      	movs	r2, #37	; 0x25
 8007cb8:	2101      	movs	r1, #1
 8007cba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2224      	movs	r2, #36	; 0x24
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	0010      	movs	r0, r2
 8007cd4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	46c0      	nop			; (mov r8, r8)
}
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	b004      	add	sp, #16
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	40020000 	.word	0x40020000

08007ce4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2225      	movs	r2, #37	; 0x25
 8007cf0:	5c9b      	ldrb	r3, [r3, r2]
 8007cf2:	b2db      	uxtb	r3, r3
}
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b002      	add	sp, #8
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007d24:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007d26:	4b14      	ldr	r3, [pc, #80]	; (8007d78 <DMA_SetConfig+0x7c>)
 8007d28:	6859      	ldr	r1, [r3, #4]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	221c      	movs	r2, #28
 8007d30:	4013      	ands	r3, r2
 8007d32:	2201      	movs	r2, #1
 8007d34:	409a      	lsls	r2, r3
 8007d36:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <DMA_SetConfig+0x7c>)
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b10      	cmp	r3, #16
 8007d4a:	d108      	bne.n	8007d5e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007d5c:	e007      	b.n	8007d6e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	60da      	str	r2, [r3, #12]
}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b004      	add	sp, #16
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			; (mov r8, r8)
 8007d78:	40020000 	.word	0x40020000

08007d7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	089b      	lsrs	r3, r3, #2
 8007d8a:	4a10      	ldr	r2, [pc, #64]	; (8007dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007d8c:	4694      	mov	ip, r2
 8007d8e:	4463      	add	r3, ip
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	001a      	movs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	001a      	movs	r2, r3
 8007d9e:	23ff      	movs	r3, #255	; 0xff
 8007da0:	4013      	ands	r3, r2
 8007da2:	3b08      	subs	r3, #8
 8007da4:	2114      	movs	r1, #20
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7f8 f9ac 	bl	8000104 <__udivsi3>
 8007dac:	0003      	movs	r3, r0
 8007dae:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a07      	ldr	r2, [pc, #28]	; (8007dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007db4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	221f      	movs	r2, #31
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	409a      	lsls	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007dc4:	46c0      	nop			; (mov r8, r8)
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b004      	add	sp, #16
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	10008200 	.word	0x10008200
 8007dd0:	40020880 	.word	0x40020880

08007dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	223f      	movs	r2, #63	; 0x3f
 8007de2:	4013      	ands	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4a0a      	ldr	r2, [pc, #40]	; (8007e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007dea:	4694      	mov	ip, r2
 8007dec:	4463      	add	r3, ip
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	001a      	movs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a07      	ldr	r2, [pc, #28]	; (8007e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2203      	movs	r2, #3
 8007e02:	4013      	ands	r3, r2
 8007e04:	2201      	movs	r2, #1
 8007e06:	409a      	lsls	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8007e0c:	46c0      	nop			; (mov r8, r8)
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	b004      	add	sp, #16
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	1000823f 	.word	0x1000823f
 8007e18:	40020940 	.word	0x40020940

08007e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e2a:	e147      	b.n	80080bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2101      	movs	r1, #1
 8007e32:	697a      	ldr	r2, [r7, #20]
 8007e34:	4091      	lsls	r1, r2
 8007e36:	000a      	movs	r2, r1
 8007e38:	4013      	ands	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d100      	bne.n	8007e44 <HAL_GPIO_Init+0x28>
 8007e42:	e138      	b.n	80080b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d00b      	beq.n	8007e64 <HAL_GPIO_Init+0x48>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d007      	beq.n	8007e64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e58:	2b11      	cmp	r3, #17
 8007e5a:	d003      	beq.n	8007e64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b12      	cmp	r3, #18
 8007e62:	d130      	bne.n	8007ec6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	2203      	movs	r2, #3
 8007e70:	409a      	lsls	r2, r3
 8007e72:	0013      	movs	r3, r2
 8007e74:	43da      	mvns	r2, r3
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	68da      	ldr	r2, [r3, #12]
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	409a      	lsls	r2, r3
 8007e86:	0013      	movs	r3, r2
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	0013      	movs	r3, r2
 8007ea2:	43da      	mvns	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	091b      	lsrs	r3, r3, #4
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	401a      	ands	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	0013      	movs	r3, r2
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	2203      	movs	r2, #3
 8007ed2:	409a      	lsls	r2, r3
 8007ed4:	0013      	movs	r3, r2
 8007ed6:	43da      	mvns	r2, r3
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4013      	ands	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	409a      	lsls	r2, r3
 8007ee8:	0013      	movs	r3, r2
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d003      	beq.n	8007f06 <HAL_GPIO_Init+0xea>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b12      	cmp	r3, #18
 8007f04:	d123      	bne.n	8007f4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	08da      	lsrs	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3208      	adds	r2, #8
 8007f0e:	0092      	lsls	r2, r2, #2
 8007f10:	58d3      	ldr	r3, [r2, r3]
 8007f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2207      	movs	r2, #7
 8007f18:	4013      	ands	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	220f      	movs	r2, #15
 8007f1e:	409a      	lsls	r2, r3
 8007f20:	0013      	movs	r3, r2
 8007f22:	43da      	mvns	r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	4013      	ands	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2107      	movs	r1, #7
 8007f32:	400b      	ands	r3, r1
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	409a      	lsls	r2, r3
 8007f38:	0013      	movs	r3, r2
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	08da      	lsrs	r2, r3, #3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	3208      	adds	r2, #8
 8007f48:	0092      	lsls	r2, r2, #2
 8007f4a:	6939      	ldr	r1, [r7, #16]
 8007f4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	2203      	movs	r2, #3
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	0013      	movs	r3, r2
 8007f5e:	43da      	mvns	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4013      	ands	r3, r2
 8007f64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	401a      	ands	r2, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	409a      	lsls	r2, r3
 8007f74:	0013      	movs	r3, r2
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	2380      	movs	r3, #128	; 0x80
 8007f88:	055b      	lsls	r3, r3, #21
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d100      	bne.n	8007f90 <HAL_GPIO_Init+0x174>
 8007f8e:	e092      	b.n	80080b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007f90:	4a50      	ldr	r2, [pc, #320]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	089b      	lsrs	r3, r3, #2
 8007f96:	3318      	adds	r3, #24
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	589b      	ldr	r3, [r3, r2]
 8007f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	00db      	lsls	r3, r3, #3
 8007fa6:	220f      	movs	r2, #15
 8007fa8:	409a      	lsls	r2, r3
 8007faa:	0013      	movs	r3, r2
 8007fac:	43da      	mvns	r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	23a0      	movs	r3, #160	; 0xa0
 8007fb8:	05db      	lsls	r3, r3, #23
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d013      	beq.n	8007fe6 <HAL_GPIO_Init+0x1ca>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a45      	ldr	r2, [pc, #276]	; (80080d8 <HAL_GPIO_Init+0x2bc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00d      	beq.n	8007fe2 <HAL_GPIO_Init+0x1c6>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a44      	ldr	r2, [pc, #272]	; (80080dc <HAL_GPIO_Init+0x2c0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d007      	beq.n	8007fde <HAL_GPIO_Init+0x1c2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a43      	ldr	r2, [pc, #268]	; (80080e0 <HAL_GPIO_Init+0x2c4>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d101      	bne.n	8007fda <HAL_GPIO_Init+0x1be>
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e006      	b.n	8007fe8 <HAL_GPIO_Init+0x1cc>
 8007fda:	2305      	movs	r3, #5
 8007fdc:	e004      	b.n	8007fe8 <HAL_GPIO_Init+0x1cc>
 8007fde:	2302      	movs	r3, #2
 8007fe0:	e002      	b.n	8007fe8 <HAL_GPIO_Init+0x1cc>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e000      	b.n	8007fe8 <HAL_GPIO_Init+0x1cc>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	2103      	movs	r1, #3
 8007fec:	400a      	ands	r2, r1
 8007fee:	00d2      	lsls	r2, r2, #3
 8007ff0:	4093      	lsls	r3, r2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007ff8:	4936      	ldr	r1, [pc, #216]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	089b      	lsrs	r3, r3, #2
 8007ffe:	3318      	adds	r3, #24
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008006:	4a33      	ldr	r2, [pc, #204]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 8008008:	2380      	movs	r3, #128	; 0x80
 800800a:	58d3      	ldr	r3, [r2, r3]
 800800c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	43da      	mvns	r2, r3
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4013      	ands	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	2380      	movs	r3, #128	; 0x80
 800801e:	025b      	lsls	r3, r3, #9
 8008020:	4013      	ands	r3, r2
 8008022:	d003      	beq.n	800802c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800802c:	4929      	ldr	r1, [pc, #164]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 800802e:	2280      	movs	r2, #128	; 0x80
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8008034:	4a27      	ldr	r2, [pc, #156]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 8008036:	2384      	movs	r3, #132	; 0x84
 8008038:	58d3      	ldr	r3, [r2, r3]
 800803a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	43da      	mvns	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4013      	ands	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	029b      	lsls	r3, r3, #10
 800804e:	4013      	ands	r3, r2
 8008050:	d003      	beq.n	800805a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800805a:	491e      	ldr	r1, [pc, #120]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 800805c:	2284      	movs	r2, #132	; 0x84
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008062:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	43da      	mvns	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	4013      	ands	r3, r2
 8008070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	2380      	movs	r3, #128	; 0x80
 8008078:	035b      	lsls	r3, r3, #13
 800807a:	4013      	ands	r3, r2
 800807c:	d003      	beq.n	8008086 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800808c:	4b11      	ldr	r3, [pc, #68]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	43da      	mvns	r2, r3
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	4013      	ands	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	2380      	movs	r3, #128	; 0x80
 80080a2:	039b      	lsls	r3, r3, #14
 80080a4:	4013      	ands	r3, r2
 80080a6:	d003      	beq.n	80080b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80080a8:	693a      	ldr	r2, [r7, #16]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80080b0:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <HAL_GPIO_Init+0x2b8>)
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	3301      	adds	r3, #1
 80080ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	40da      	lsrs	r2, r3
 80080c4:	1e13      	subs	r3, r2, #0
 80080c6:	d000      	beq.n	80080ca <HAL_GPIO_Init+0x2ae>
 80080c8:	e6b0      	b.n	8007e2c <HAL_GPIO_Init+0x10>
  }
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46c0      	nop			; (mov r8, r8)
 80080ce:	46bd      	mov	sp, r7
 80080d0:	b006      	add	sp, #24
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	40021800 	.word	0x40021800
 80080d8:	50000400 	.word	0x50000400
 80080dc:	50000800 	.word	0x50000800
 80080e0:	50000c00 	.word	0x50000c00

080080e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e082      	b.n	80081fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2241      	movs	r2, #65	; 0x41
 80080fa:	5c9b      	ldrb	r3, [r3, r2]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2240      	movs	r2, #64	; 0x40
 8008106:	2100      	movs	r1, #0
 8008108:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	0018      	movs	r0, r3
 800810e:	f7fe fba1 	bl	8006854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2241      	movs	r2, #65	; 0x41
 8008116:	2124      	movs	r1, #36	; 0x24
 8008118:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2101      	movs	r1, #1
 8008126:	438a      	bics	r2, r1
 8008128:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4934      	ldr	r1, [pc, #208]	; (8008204 <HAL_I2C_Init+0x120>)
 8008134:	400a      	ands	r2, r1
 8008136:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4931      	ldr	r1, [pc, #196]	; (8008208 <HAL_I2C_Init+0x124>)
 8008144:	400a      	ands	r2, r1
 8008146:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d108      	bne.n	8008162 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2180      	movs	r1, #128	; 0x80
 800815a:	0209      	lsls	r1, r1, #8
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]
 8008160:	e007      	b.n	8008172 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2184      	movs	r1, #132	; 0x84
 800816c:	0209      	lsls	r1, r1, #8
 800816e:	430a      	orrs	r2, r1
 8008170:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d104      	bne.n	8008184 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2280      	movs	r2, #128	; 0x80
 8008180:	0112      	lsls	r2, r2, #4
 8008182:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	491f      	ldr	r1, [pc, #124]	; (800820c <HAL_I2C_Init+0x128>)
 8008190:	430a      	orrs	r2, r1
 8008192:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	491a      	ldr	r1, [pc, #104]	; (8008208 <HAL_I2C_Init+0x124>)
 80081a0:	400a      	ands	r2, r1
 80081a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	431a      	orrs	r2, r3
 80081ae:	0011      	movs	r1, r2
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	021a      	lsls	r2, r3, #8
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69d9      	ldr	r1, [r3, #28]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1a      	ldr	r2, [r3, #32]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2101      	movs	r1, #1
 80081da:	430a      	orrs	r2, r1
 80081dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2241      	movs	r2, #65	; 0x41
 80081e8:	2120      	movs	r1, #32
 80081ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2242      	movs	r2, #66	; 0x42
 80081f6:	2100      	movs	r1, #0
 80081f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	0018      	movs	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}
 8008204:	f0ffffff 	.word	0xf0ffffff
 8008208:	ffff7fff 	.word	0xffff7fff
 800820c:	02008000 	.word	0x02008000

08008210 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b089      	sub	sp, #36	; 0x24
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	0008      	movs	r0, r1
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	0019      	movs	r1, r3
 800821e:	230a      	movs	r3, #10
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	1c02      	adds	r2, r0, #0
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	2308      	movs	r3, #8
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	1c0a      	adds	r2, r1, #0
 800822c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2241      	movs	r2, #65	; 0x41
 8008232:	5c9b      	ldrb	r3, [r3, r2]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b20      	cmp	r3, #32
 8008238:	d000      	beq.n	800823c <HAL_I2C_Master_Transmit+0x2c>
 800823a:	e0e7      	b.n	800840c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2240      	movs	r2, #64	; 0x40
 8008240:	5c9b      	ldrb	r3, [r3, r2]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_I2C_Master_Transmit+0x3a>
 8008246:	2302      	movs	r3, #2
 8008248:	e0e1      	b.n	800840e <HAL_I2C_Master_Transmit+0x1fe>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2240      	movs	r2, #64	; 0x40
 800824e:	2101      	movs	r1, #1
 8008250:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008252:	f7fe ff99 	bl	8007188 <HAL_GetTick>
 8008256:	0003      	movs	r3, r0
 8008258:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800825a:	2380      	movs	r3, #128	; 0x80
 800825c:	0219      	lsls	r1, r3, #8
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	2319      	movs	r3, #25
 8008266:	2201      	movs	r2, #1
 8008268:	f000 fe76 	bl	8008f58 <I2C_WaitOnFlagUntilTimeout>
 800826c:	1e03      	subs	r3, r0, #0
 800826e:	d001      	beq.n	8008274 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e0cc      	b.n	800840e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2241      	movs	r2, #65	; 0x41
 8008278:	2121      	movs	r1, #33	; 0x21
 800827a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2242      	movs	r2, #66	; 0x42
 8008280:	2110      	movs	r1, #16
 8008282:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2208      	movs	r2, #8
 8008294:	18ba      	adds	r2, r7, r2
 8008296:	8812      	ldrh	r2, [r2, #0]
 8008298:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	2bff      	cmp	r3, #255	; 0xff
 80082a8:	d911      	bls.n	80082ce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	22ff      	movs	r2, #255	; 0xff
 80082ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	2380      	movs	r3, #128	; 0x80
 80082b8:	045c      	lsls	r4, r3, #17
 80082ba:	230a      	movs	r3, #10
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	8819      	ldrh	r1, [r3, #0]
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	4b55      	ldr	r3, [pc, #340]	; (8008418 <HAL_I2C_Master_Transmit+0x208>)
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	0023      	movs	r3, r4
 80082c8:	f000 ff66 	bl	8009198 <I2C_TransferConfig>
 80082cc:	e075      	b.n	80083ba <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	2380      	movs	r3, #128	; 0x80
 80082e0:	049c      	lsls	r4, r3, #18
 80082e2:	230a      	movs	r3, #10
 80082e4:	18fb      	adds	r3, r7, r3
 80082e6:	8819      	ldrh	r1, [r3, #0]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	4b4b      	ldr	r3, [pc, #300]	; (8008418 <HAL_I2C_Master_Transmit+0x208>)
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	0023      	movs	r3, r4
 80082f0:	f000 ff52 	bl	8009198 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80082f4:	e061      	b.n	80083ba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f000 fe6a 	bl	8008fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8008302:	1e03      	subs	r3, r0, #0
 8008304:	d001      	beq.n	800830a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e081      	b.n	800840e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008332:	3b01      	subs	r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800833e:	b29b      	uxth	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	d03a      	beq.n	80083ba <HAL_I2C_Master_Transmit+0x1aa>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	d136      	bne.n	80083ba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800834c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	0013      	movs	r3, r2
 8008356:	2200      	movs	r2, #0
 8008358:	2180      	movs	r1, #128	; 0x80
 800835a:	f000 fdfd 	bl	8008f58 <I2C_WaitOnFlagUntilTimeout>
 800835e:	1e03      	subs	r3, r0, #0
 8008360:	d001      	beq.n	8008366 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e053      	b.n	800840e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836a:	b29b      	uxth	r3, r3
 800836c:	2bff      	cmp	r3, #255	; 0xff
 800836e:	d911      	bls.n	8008394 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	22ff      	movs	r2, #255	; 0xff
 8008374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837a:	b2da      	uxtb	r2, r3
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	045c      	lsls	r4, r3, #17
 8008380:	230a      	movs	r3, #10
 8008382:	18fb      	adds	r3, r7, r3
 8008384:	8819      	ldrh	r1, [r3, #0]
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	2300      	movs	r3, #0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	0023      	movs	r3, r4
 800838e:	f000 ff03 	bl	8009198 <I2C_TransferConfig>
 8008392:	e012      	b.n	80083ba <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008398:	b29a      	uxth	r2, r3
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	2380      	movs	r3, #128	; 0x80
 80083a6:	049c      	lsls	r4, r3, #18
 80083a8:	230a      	movs	r3, #10
 80083aa:	18fb      	adds	r3, r7, r3
 80083ac:	8819      	ldrh	r1, [r3, #0]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	2300      	movs	r3, #0
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	0023      	movs	r3, r4
 80083b6:	f000 feef 	bl	8009198 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d198      	bne.n	80082f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083c4:	697a      	ldr	r2, [r7, #20]
 80083c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	0018      	movs	r0, r3
 80083cc:	f000 fe42 	bl	8009054 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083d0:	1e03      	subs	r3, r0, #0
 80083d2:	d001      	beq.n	80083d8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e01a      	b.n	800840e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2220      	movs	r2, #32
 80083de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	490c      	ldr	r1, [pc, #48]	; (800841c <HAL_I2C_Master_Transmit+0x20c>)
 80083ec:	400a      	ands	r2, r1
 80083ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2241      	movs	r2, #65	; 0x41
 80083f4:	2120      	movs	r1, #32
 80083f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2242      	movs	r2, #66	; 0x42
 80083fc:	2100      	movs	r1, #0
 80083fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2240      	movs	r2, #64	; 0x40
 8008404:	2100      	movs	r1, #0
 8008406:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	e000      	b.n	800840e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800840c:	2302      	movs	r3, #2
  }
}
 800840e:	0018      	movs	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	b007      	add	sp, #28
 8008414:	bd90      	pop	{r4, r7, pc}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	80002000 	.word	0x80002000
 800841c:	fe00e800 	.word	0xfe00e800

08008420 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
  }
}
 800844c:	46c0      	nop			; (mov r8, r8)
 800844e:	46bd      	mov	sp, r7
 8008450:	b004      	add	sp, #16
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	0a1b      	lsrs	r3, r3, #8
 8008470:	001a      	movs	r2, r3
 8008472:	2301      	movs	r3, #1
 8008474:	4013      	ands	r3, r2
 8008476:	d010      	beq.n	800849a <HAL_I2C_ER_IRQHandler+0x46>
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	09db      	lsrs	r3, r3, #7
 800847c:	001a      	movs	r2, r3
 800847e:	2301      	movs	r3, #1
 8008480:	4013      	ands	r3, r2
 8008482:	d00a      	beq.n	800849a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008488:	2201      	movs	r2, #1
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2280      	movs	r2, #128	; 0x80
 8008496:	0052      	lsls	r2, r2, #1
 8008498:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	0a9b      	lsrs	r3, r3, #10
 800849e:	001a      	movs	r2, r3
 80084a0:	2301      	movs	r3, #1
 80084a2:	4013      	ands	r3, r2
 80084a4:	d010      	beq.n	80084c8 <HAL_I2C_ER_IRQHandler+0x74>
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	09db      	lsrs	r3, r3, #7
 80084aa:	001a      	movs	r2, r3
 80084ac:	2301      	movs	r3, #1
 80084ae:	4013      	ands	r3, r2
 80084b0:	d00a      	beq.n	80084c8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b6:	2208      	movs	r2, #8
 80084b8:	431a      	orrs	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2280      	movs	r2, #128	; 0x80
 80084c4:	00d2      	lsls	r2, r2, #3
 80084c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	0a5b      	lsrs	r3, r3, #9
 80084cc:	001a      	movs	r2, r3
 80084ce:	2301      	movs	r3, #1
 80084d0:	4013      	ands	r3, r2
 80084d2:	d010      	beq.n	80084f6 <HAL_I2C_ER_IRQHandler+0xa2>
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	09db      	lsrs	r3, r3, #7
 80084d8:	001a      	movs	r2, r3
 80084da:	2301      	movs	r3, #1
 80084dc:	4013      	ands	r3, r2
 80084de:	d00a      	beq.n	80084f6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e4:	2202      	movs	r2, #2
 80084e6:	431a      	orrs	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2280      	movs	r2, #128	; 0x80
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	220b      	movs	r2, #11
 8008500:	4013      	ands	r3, r2
 8008502:	d005      	beq.n	8008510 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	0011      	movs	r1, r2
 800850a:	0018      	movs	r0, r3
 800850c:	f000 fbd8 	bl	8008cc0 <I2C_ITError>
  }
}
 8008510:	46c0      	nop			; (mov r8, r8)
 8008512:	46bd      	mov	sp, r7
 8008514:	b006      	add	sp, #24
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008520:	46c0      	nop			; (mov r8, r8)
 8008522:	46bd      	mov	sp, r7
 8008524:	b002      	add	sp, #8
 8008526:	bd80      	pop	{r7, pc}

08008528 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008530:	46c0      	nop			; (mov r8, r8)
 8008532:	46bd      	mov	sp, r7
 8008534:	b002      	add	sp, #8
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	0008      	movs	r0, r1
 8008542:	0011      	movs	r1, r2
 8008544:	1cfb      	adds	r3, r7, #3
 8008546:	1c02      	adds	r2, r0, #0
 8008548:	701a      	strb	r2, [r3, #0]
 800854a:	003b      	movs	r3, r7
 800854c:	1c0a      	adds	r2, r1, #0
 800854e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008550:	46c0      	nop			; (mov r8, r8)
 8008552:	46bd      	mov	sp, r7
 8008554:	b002      	add	sp, #8
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008560:	46c0      	nop			; (mov r8, r8)
 8008562:	46bd      	mov	sp, r7
 8008564:	b002      	add	sp, #8
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008570:	46c0      	nop			; (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b002      	add	sp, #8
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008580:	46c0      	nop			; (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	b002      	add	sp, #8
 8008586:	bd80      	pop	{r7, pc}

08008588 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2240      	movs	r2, #64	; 0x40
 80085a2:	5c9b      	ldrb	r3, [r3, r2]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <I2C_Slave_ISR_IT+0x24>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e0fa      	b.n	80087a2 <I2C_Slave_ISR_IT+0x21a>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2240      	movs	r2, #64	; 0x40
 80085b0:	2101      	movs	r1, #1
 80085b2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	001a      	movs	r2, r3
 80085ba:	2301      	movs	r3, #1
 80085bc:	4013      	ands	r3, r2
 80085be:	d00b      	beq.n	80085d8 <I2C_Slave_ISR_IT+0x50>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	001a      	movs	r2, r3
 80085c6:	2301      	movs	r3, #1
 80085c8:	4013      	ands	r3, r2
 80085ca:	d005      	beq.n	80085d8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	0011      	movs	r1, r2
 80085d2:	0018      	movs	r0, r3
 80085d4:	f000 f9f6 	bl	80089c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	091b      	lsrs	r3, r3, #4
 80085dc:	001a      	movs	r2, r3
 80085de:	2301      	movs	r3, #1
 80085e0:	4013      	ands	r3, r2
 80085e2:	d054      	beq.n	800868e <I2C_Slave_ISR_IT+0x106>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	091b      	lsrs	r3, r3, #4
 80085e8:	001a      	movs	r2, r3
 80085ea:	2301      	movs	r3, #1
 80085ec:	4013      	ands	r3, r2
 80085ee:	d04e      	beq.n	800868e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d12d      	bne.n	8008656 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2241      	movs	r2, #65	; 0x41
 80085fe:	5c9b      	ldrb	r3, [r3, r2]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b28      	cmp	r3, #40	; 0x28
 8008604:	d10b      	bne.n	800861e <I2C_Slave_ISR_IT+0x96>
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	2380      	movs	r3, #128	; 0x80
 800860a:	049b      	lsls	r3, r3, #18
 800860c:	429a      	cmp	r2, r3
 800860e:	d106      	bne.n	800861e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	0011      	movs	r1, r2
 8008616:	0018      	movs	r0, r3
 8008618:	f000 faf8 	bl	8008c0c <I2C_ITListenCplt>
 800861c:	e036      	b.n	800868c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2241      	movs	r2, #65	; 0x41
 8008622:	5c9b      	ldrb	r3, [r3, r2]
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b29      	cmp	r3, #41	; 0x29
 8008628:	d110      	bne.n	800864c <I2C_Slave_ISR_IT+0xc4>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	4a5f      	ldr	r2, [pc, #380]	; (80087ac <I2C_Slave_ISR_IT+0x224>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00c      	beq.n	800864c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2210      	movs	r2, #16
 8008638:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	0018      	movs	r0, r3
 800863e:	f000 fc4a 	bl	8008ed6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	0018      	movs	r0, r3
 8008646:	f000 f957 	bl	80088f8 <I2C_ITSlaveSeqCplt>
 800864a:	e01f      	b.n	800868c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2210      	movs	r2, #16
 8008652:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008654:	e09d      	b.n	8008792 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2210      	movs	r2, #16
 800865c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008662:	2204      	movs	r2, #4
 8008664:	431a      	orrs	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <I2C_Slave_ISR_IT+0xf4>
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	2380      	movs	r3, #128	; 0x80
 8008674:	045b      	lsls	r3, r3, #17
 8008676:	429a      	cmp	r2, r3
 8008678:	d000      	beq.n	800867c <I2C_Slave_ISR_IT+0xf4>
 800867a:	e08a      	b.n	8008792 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	0011      	movs	r1, r2
 8008684:	0018      	movs	r0, r3
 8008686:	f000 fb1b 	bl	8008cc0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800868a:	e082      	b.n	8008792 <I2C_Slave_ISR_IT+0x20a>
 800868c:	e081      	b.n	8008792 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	089b      	lsrs	r3, r3, #2
 8008692:	001a      	movs	r2, r3
 8008694:	2301      	movs	r3, #1
 8008696:	4013      	ands	r3, r2
 8008698:	d031      	beq.n	80086fe <I2C_Slave_ISR_IT+0x176>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	089b      	lsrs	r3, r3, #2
 800869e:	001a      	movs	r2, r3
 80086a0:	2301      	movs	r3, #1
 80086a2:	4013      	ands	r3, r2
 80086a4:	d02b      	beq.n	80086fe <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d018      	beq.n	80086e2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d154      	bne.n	8008796 <I2C_Slave_ISR_IT+0x20e>
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <I2C_Slave_ISR_IT+0x224>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d050      	beq.n	8008796 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	0018      	movs	r0, r3
 80086f8:	f000 f8fe 	bl	80088f8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80086fc:	e04b      	b.n	8008796 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	08db      	lsrs	r3, r3, #3
 8008702:	001a      	movs	r2, r3
 8008704:	2301      	movs	r3, #1
 8008706:	4013      	ands	r3, r2
 8008708:	d00c      	beq.n	8008724 <I2C_Slave_ISR_IT+0x19c>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	08db      	lsrs	r3, r3, #3
 800870e:	001a      	movs	r2, r3
 8008710:	2301      	movs	r3, #1
 8008712:	4013      	ands	r3, r2
 8008714:	d006      	beq.n	8008724 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	0011      	movs	r1, r2
 800871c:	0018      	movs	r0, r3
 800871e:	f000 f847 	bl	80087b0 <I2C_ITAddrCplt>
 8008722:	e039      	b.n	8008798 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	085b      	lsrs	r3, r3, #1
 8008728:	001a      	movs	r2, r3
 800872a:	2301      	movs	r3, #1
 800872c:	4013      	ands	r3, r2
 800872e:	d033      	beq.n	8008798 <I2C_Slave_ISR_IT+0x210>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	085b      	lsrs	r3, r3, #1
 8008734:	001a      	movs	r2, r3
 8008736:	2301      	movs	r3, #1
 8008738:	4013      	ands	r3, r2
 800873a:	d02d      	beq.n	8008798 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d018      	beq.n	8008778 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008760:	b29b      	uxth	r3, r3
 8008762:	3b01      	subs	r3, #1
 8008764:	b29a      	uxth	r2, r3
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800876e:	3b01      	subs	r3, #1
 8008770:	b29a      	uxth	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	851a      	strh	r2, [r3, #40]	; 0x28
 8008776:	e00f      	b.n	8008798 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	2380      	movs	r3, #128	; 0x80
 800877c:	045b      	lsls	r3, r3, #17
 800877e:	429a      	cmp	r2, r3
 8008780:	d002      	beq.n	8008788 <I2C_Slave_ISR_IT+0x200>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d107      	bne.n	8008798 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0018      	movs	r0, r3
 800878c:	f000 f8b4 	bl	80088f8 <I2C_ITSlaveSeqCplt>
 8008790:	e002      	b.n	8008798 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	e000      	b.n	8008798 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8008796:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2240      	movs	r2, #64	; 0x40
 800879c:	2100      	movs	r1, #0
 800879e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b006      	add	sp, #24
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	ffff0000 	.word	0xffff0000

080087b0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087b0:	b5b0      	push	{r4, r5, r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2241      	movs	r2, #65	; 0x41
 80087be:	5c9b      	ldrb	r3, [r3, r2]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	001a      	movs	r2, r3
 80087c4:	2328      	movs	r3, #40	; 0x28
 80087c6:	4013      	ands	r3, r2
 80087c8:	2b28      	cmp	r3, #40	; 0x28
 80087ca:	d000      	beq.n	80087ce <I2C_ITAddrCplt+0x1e>
 80087cc:	e088      	b.n	80088e0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	0c1b      	lsrs	r3, r3, #16
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	250f      	movs	r5, #15
 80087da:	197b      	adds	r3, r7, r5
 80087dc:	2101      	movs	r1, #1
 80087de:	400a      	ands	r2, r1
 80087e0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	200c      	movs	r0, #12
 80087ee:	183b      	adds	r3, r7, r0
 80087f0:	21fe      	movs	r1, #254	; 0xfe
 80087f2:	400a      	ands	r2, r1
 80087f4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	b29a      	uxth	r2, r3
 80087fe:	240a      	movs	r4, #10
 8008800:	193b      	adds	r3, r7, r4
 8008802:	0592      	lsls	r2, r2, #22
 8008804:	0d92      	lsrs	r2, r2, #22
 8008806:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	b29a      	uxth	r2, r3
 8008810:	2308      	movs	r3, #8
 8008812:	18fb      	adds	r3, r7, r3
 8008814:	21fe      	movs	r1, #254	; 0xfe
 8008816:	400a      	ands	r2, r1
 8008818:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d148      	bne.n	80088b4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008822:	0021      	movs	r1, r4
 8008824:	187b      	adds	r3, r7, r1
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	09db      	lsrs	r3, r3, #7
 800882a:	b29a      	uxth	r2, r3
 800882c:	183b      	adds	r3, r7, r0
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	4053      	eors	r3, r2
 8008832:	b29b      	uxth	r3, r3
 8008834:	001a      	movs	r2, r3
 8008836:	2306      	movs	r3, #6
 8008838:	4013      	ands	r3, r2
 800883a:	d120      	bne.n	800887e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800883c:	183b      	adds	r3, r7, r0
 800883e:	187a      	adds	r2, r7, r1
 8008840:	8812      	ldrh	r2, [r2, #0]
 8008842:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008852:	2b02      	cmp	r3, #2
 8008854:	d14c      	bne.n	80088f0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2208      	movs	r2, #8
 8008862:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2240      	movs	r2, #64	; 0x40
 8008868:	2100      	movs	r1, #0
 800886a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800886c:	183b      	adds	r3, r7, r0
 800886e:	881a      	ldrh	r2, [r3, #0]
 8008870:	197b      	adds	r3, r7, r5
 8008872:	7819      	ldrb	r1, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	0018      	movs	r0, r3
 8008878:	f7ff fe5e 	bl	8008538 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800887c:	e038      	b.n	80088f0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800887e:	240c      	movs	r4, #12
 8008880:	193b      	adds	r3, r7, r4
 8008882:	2208      	movs	r2, #8
 8008884:	18ba      	adds	r2, r7, r2
 8008886:	8812      	ldrh	r2, [r2, #0]
 8008888:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800888a:	2380      	movs	r3, #128	; 0x80
 800888c:	021a      	lsls	r2, r3, #8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f000 fcb6 	bl	8009204 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2240      	movs	r2, #64	; 0x40
 800889c:	2100      	movs	r1, #0
 800889e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088a0:	193b      	adds	r3, r7, r4
 80088a2:	881a      	ldrh	r2, [r3, #0]
 80088a4:	230f      	movs	r3, #15
 80088a6:	18fb      	adds	r3, r7, r3
 80088a8:	7819      	ldrb	r1, [r3, #0]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	0018      	movs	r0, r3
 80088ae:	f7ff fe43 	bl	8008538 <HAL_I2C_AddrCallback>
}
 80088b2:	e01d      	b.n	80088f0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	021a      	lsls	r2, r3, #8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	0011      	movs	r1, r2
 80088bc:	0018      	movs	r0, r3
 80088be:	f000 fca1 	bl	8009204 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2240      	movs	r2, #64	; 0x40
 80088c6:	2100      	movs	r1, #0
 80088c8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80088ca:	230c      	movs	r3, #12
 80088cc:	18fb      	adds	r3, r7, r3
 80088ce:	881a      	ldrh	r2, [r3, #0]
 80088d0:	230f      	movs	r3, #15
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	7819      	ldrb	r1, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	0018      	movs	r0, r3
 80088da:	f7ff fe2d 	bl	8008538 <HAL_I2C_AddrCallback>
}
 80088de:	e007      	b.n	80088f0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2208      	movs	r2, #8
 80088e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2240      	movs	r2, #64	; 0x40
 80088ec:	2100      	movs	r1, #0
 80088ee:	5499      	strb	r1, [r3, r2]
}
 80088f0:	46c0      	nop			; (mov r8, r8)
 80088f2:	46bd      	mov	sp, r7
 80088f4:	b004      	add	sp, #16
 80088f6:	bdb0      	pop	{r4, r5, r7, pc}

080088f8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2242      	movs	r2, #66	; 0x42
 800890c:	2100      	movs	r1, #0
 800890e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	0b9b      	lsrs	r3, r3, #14
 8008914:	001a      	movs	r2, r3
 8008916:	2301      	movs	r3, #1
 8008918:	4013      	ands	r3, r2
 800891a:	d008      	beq.n	800892e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4925      	ldr	r1, [pc, #148]	; (80089bc <I2C_ITSlaveSeqCplt+0xc4>)
 8008928:	400a      	ands	r2, r1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e00d      	b.n	800894a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	0bdb      	lsrs	r3, r3, #15
 8008932:	001a      	movs	r2, r3
 8008934:	2301      	movs	r3, #1
 8008936:	4013      	ands	r3, r2
 8008938:	d007      	beq.n	800894a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	491e      	ldr	r1, [pc, #120]	; (80089c0 <I2C_ITSlaveSeqCplt+0xc8>)
 8008946:	400a      	ands	r2, r1
 8008948:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2241      	movs	r2, #65	; 0x41
 800894e:	5c9b      	ldrb	r3, [r3, r2]
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b29      	cmp	r3, #41	; 0x29
 8008954:	d114      	bne.n	8008980 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2241      	movs	r2, #65	; 0x41
 800895a:	2128      	movs	r1, #40	; 0x28
 800895c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2221      	movs	r2, #33	; 0x21
 8008962:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2101      	movs	r1, #1
 8008968:	0018      	movs	r0, r3
 800896a:	f000 fc4b 	bl	8009204 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2240      	movs	r2, #64	; 0x40
 8008972:	2100      	movs	r1, #0
 8008974:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	0018      	movs	r0, r3
 800897a:	f7ff fdcd 	bl	8008518 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800897e:	e019      	b.n	80089b4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2241      	movs	r2, #65	; 0x41
 8008984:	5c9b      	ldrb	r3, [r3, r2]
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b2a      	cmp	r3, #42	; 0x2a
 800898a:	d113      	bne.n	80089b4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2241      	movs	r2, #65	; 0x41
 8008990:	2128      	movs	r1, #40	; 0x28
 8008992:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2222      	movs	r2, #34	; 0x22
 8008998:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2102      	movs	r1, #2
 800899e:	0018      	movs	r0, r3
 80089a0:	f000 fc30 	bl	8009204 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2240      	movs	r2, #64	; 0x40
 80089a8:	2100      	movs	r1, #0
 80089aa:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	0018      	movs	r0, r3
 80089b0:	f7ff fdba 	bl	8008528 <HAL_I2C_SlaveRxCpltCallback>
}
 80089b4:	46c0      	nop			; (mov r8, r8)
 80089b6:	46bd      	mov	sp, r7
 80089b8:	b004      	add	sp, #16
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	ffffbfff 	.word	0xffffbfff
 80089c0:	ffff7fff 	.word	0xffff7fff

080089c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80089da:	200f      	movs	r0, #15
 80089dc:	183b      	adds	r3, r7, r0
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	2141      	movs	r1, #65	; 0x41
 80089e2:	5c52      	ldrb	r2, [r2, r1]
 80089e4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2220      	movs	r2, #32
 80089ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80089ee:	183b      	adds	r3, r7, r0
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b21      	cmp	r3, #33	; 0x21
 80089f4:	d003      	beq.n	80089fe <I2C_ITSlaveCplt+0x3a>
 80089f6:	183b      	adds	r3, r7, r0
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b29      	cmp	r3, #41	; 0x29
 80089fc:	d109      	bne.n	8008a12 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80089fe:	4a7d      	ldr	r2, [pc, #500]	; (8008bf4 <I2C_ITSlaveCplt+0x230>)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	0011      	movs	r1, r2
 8008a04:	0018      	movs	r0, r3
 8008a06:	f000 fbfd 	bl	8009204 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2221      	movs	r2, #33	; 0x21
 8008a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008a10:	e011      	b.n	8008a36 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a12:	220f      	movs	r2, #15
 8008a14:	18bb      	adds	r3, r7, r2
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b22      	cmp	r3, #34	; 0x22
 8008a1a:	d003      	beq.n	8008a24 <I2C_ITSlaveCplt+0x60>
 8008a1c:	18bb      	adds	r3, r7, r2
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b2a      	cmp	r3, #42	; 0x2a
 8008a22:	d108      	bne.n	8008a36 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008a24:	4a74      	ldr	r2, [pc, #464]	; (8008bf8 <I2C_ITSlaveCplt+0x234>)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0011      	movs	r1, r2
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f000 fbea 	bl	8009204 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2222      	movs	r2, #34	; 0x22
 8008a34:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2180      	movs	r1, #128	; 0x80
 8008a42:	0209      	lsls	r1, r1, #8
 8008a44:	430a      	orrs	r2, r1
 8008a46:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	496a      	ldr	r1, [pc, #424]	; (8008bfc <I2C_ITSlaveCplt+0x238>)
 8008a54:	400a      	ands	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	f000 fa3b 	bl	8008ed6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	0b9b      	lsrs	r3, r3, #14
 8008a64:	001a      	movs	r2, r3
 8008a66:	2301      	movs	r3, #1
 8008a68:	4013      	ands	r3, r2
 8008a6a:	d013      	beq.n	8008a94 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4962      	ldr	r1, [pc, #392]	; (8008c00 <I2C_ITSlaveCplt+0x23c>)
 8008a78:	400a      	ands	r2, r1
 8008a7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d020      	beq.n	8008ac6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008a92:	e018      	b.n	8008ac6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	0bdb      	lsrs	r3, r3, #15
 8008a98:	001a      	movs	r2, r3
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	d012      	beq.n	8008ac6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4956      	ldr	r1, [pc, #344]	; (8008c04 <I2C_ITSlaveCplt+0x240>)
 8008aac:	400a      	ands	r2, r1
 8008aae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d006      	beq.n	8008ac6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	089b      	lsrs	r3, r3, #2
 8008aca:	001a      	movs	r2, r3
 8008acc:	2301      	movs	r3, #1
 8008ace:	4013      	ands	r3, r2
 8008ad0:	d020      	beq.n	8008b14 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	4393      	bics	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008afe:	3b01      	subs	r3, #1
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d005      	beq.n	8008b2a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b22:	2204      	movs	r2, #4
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2242      	movs	r2, #66	; 0x42
 8008b2e:	2100      	movs	r1, #0
 8008b30:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d013      	beq.n	8008b68 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	0011      	movs	r1, r2
 8008b48:	0018      	movs	r0, r3
 8008b4a:	f000 f8b9 	bl	8008cc0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2241      	movs	r2, #65	; 0x41
 8008b52:	5c9b      	ldrb	r3, [r3, r2]
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b28      	cmp	r3, #40	; 0x28
 8008b58:	d147      	bne.n	8008bea <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	0011      	movs	r1, r2
 8008b60:	0018      	movs	r0, r3
 8008b62:	f000 f853 	bl	8008c0c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008b66:	e040      	b.n	8008bea <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <I2C_ITSlaveCplt+0x244>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d016      	beq.n	8008ba0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7ff febf 	bl	80088f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a22      	ldr	r2, [pc, #136]	; (8008c08 <I2C_ITSlaveCplt+0x244>)
 8008b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2241      	movs	r2, #65	; 0x41
 8008b84:	2120      	movs	r1, #32
 8008b86:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2240      	movs	r2, #64	; 0x40
 8008b92:	2100      	movs	r1, #0
 8008b94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0018      	movs	r0, r3
 8008b9a:	f7ff fcdd 	bl	8008558 <HAL_I2C_ListenCpltCallback>
}
 8008b9e:	e024      	b.n	8008bea <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2241      	movs	r2, #65	; 0x41
 8008ba4:	5c9b      	ldrb	r3, [r3, r2]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b22      	cmp	r3, #34	; 0x22
 8008baa:	d10f      	bne.n	8008bcc <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2241      	movs	r2, #65	; 0x41
 8008bb0:	2120      	movs	r1, #32
 8008bb2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2240      	movs	r2, #64	; 0x40
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f7ff fcaf 	bl	8008528 <HAL_I2C_SlaveRxCpltCallback>
}
 8008bca:	e00e      	b.n	8008bea <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2241      	movs	r2, #65	; 0x41
 8008bd0:	2120      	movs	r1, #32
 8008bd2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2240      	movs	r2, #64	; 0x40
 8008bde:	2100      	movs	r1, #0
 8008be0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	0018      	movs	r0, r3
 8008be6:	f7ff fc97 	bl	8008518 <HAL_I2C_SlaveTxCpltCallback>
}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	46bd      	mov	sp, r7
 8008bee:	b006      	add	sp, #24
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	00008001 	.word	0x00008001
 8008bf8:	00008002 	.word	0x00008002
 8008bfc:	fe00e800 	.word	0xfe00e800
 8008c00:	ffffbfff 	.word	0xffffbfff
 8008c04:	ffff7fff 	.word	0xffff7fff
 8008c08:	ffff0000 	.word	0xffff0000

08008c0c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a27      	ldr	r2, [pc, #156]	; (8008cb8 <I2C_ITListenCplt+0xac>)
 8008c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2241      	movs	r2, #65	; 0x41
 8008c26:	2120      	movs	r1, #32
 8008c28:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2242      	movs	r2, #66	; 0x42
 8008c2e:	2100      	movs	r1, #0
 8008c30:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	089b      	lsrs	r3, r3, #2
 8008c3c:	001a      	movs	r2, r3
 8008c3e:	2301      	movs	r3, #1
 8008c40:	4013      	ands	r3, r2
 8008c42:	d022      	beq.n	8008c8a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d012      	beq.n	8008c8a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c82:	2204      	movs	r2, #4
 8008c84:	431a      	orrs	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008c8a:	4a0c      	ldr	r2, [pc, #48]	; (8008cbc <I2C_ITListenCplt+0xb0>)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	0011      	movs	r1, r2
 8008c90:	0018      	movs	r0, r3
 8008c92:	f000 fab7 	bl	8009204 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2210      	movs	r2, #16
 8008c9c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2240      	movs	r2, #64	; 0x40
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	0018      	movs	r0, r3
 8008caa:	f7ff fc55 	bl	8008558 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	b002      	add	sp, #8
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	ffff0000 	.word	0xffff0000
 8008cbc:	00008003 	.word	0x00008003

08008cc0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008cca:	200f      	movs	r0, #15
 8008ccc:	183b      	adds	r3, r7, r0
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	2141      	movs	r1, #65	; 0x41
 8008cd2:	5c52      	ldrb	r2, [r2, r1]
 8008cd4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2242      	movs	r2, #66	; 0x42
 8008cda:	2100      	movs	r1, #0
 8008cdc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a62      	ldr	r2, [pc, #392]	; (8008e6c <I2C_ITError+0x1ac>)
 8008ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008cf6:	183b      	adds	r3, r7, r0
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b28      	cmp	r3, #40	; 0x28
 8008cfc:	d007      	beq.n	8008d0e <I2C_ITError+0x4e>
 8008cfe:	183b      	adds	r3, r7, r0
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	2b29      	cmp	r3, #41	; 0x29
 8008d04:	d003      	beq.n	8008d0e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008d06:	183b      	adds	r3, r7, r0
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d0c:	d10c      	bne.n	8008d28 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2103      	movs	r1, #3
 8008d12:	0018      	movs	r0, r3
 8008d14:	f000 fa76 	bl	8009204 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2241      	movs	r2, #65	; 0x41
 8008d1c:	2128      	movs	r1, #40	; 0x28
 8008d1e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a53      	ldr	r2, [pc, #332]	; (8008e70 <I2C_ITError+0x1b0>)
 8008d24:	635a      	str	r2, [r3, #52]	; 0x34
 8008d26:	e012      	b.n	8008d4e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008d28:	4a52      	ldr	r2, [pc, #328]	; (8008e74 <I2C_ITError+0x1b4>)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	0011      	movs	r1, r2
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f000 fa68 	bl	8009204 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2241      	movs	r2, #65	; 0x41
 8008d38:	5c9b      	ldrb	r3, [r3, r2]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b60      	cmp	r3, #96	; 0x60
 8008d3e:	d003      	beq.n	8008d48 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2241      	movs	r2, #65	; 0x41
 8008d44:	2120      	movs	r1, #32
 8008d46:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d52:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d03b      	beq.n	8008dd4 <I2C_ITError+0x114>
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b11      	cmp	r3, #17
 8008d60:	d002      	beq.n	8008d68 <I2C_ITError+0xa8>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b21      	cmp	r3, #33	; 0x21
 8008d66:	d135      	bne.n	8008dd4 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	2380      	movs	r3, #128	; 0x80
 8008d70:	01db      	lsls	r3, r3, #7
 8008d72:	401a      	ands	r2, r3
 8008d74:	2380      	movs	r3, #128	; 0x80
 8008d76:	01db      	lsls	r3, r3, #7
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d107      	bne.n	8008d8c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	493c      	ldr	r1, [pc, #240]	; (8008e78 <I2C_ITError+0x1b8>)
 8008d88:	400a      	ands	r2, r1
 8008d8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7fe ffa7 	bl	8007ce4 <HAL_DMA_GetState>
 8008d96:	0003      	movs	r3, r0
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d016      	beq.n	8008dca <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	4a36      	ldr	r2, [pc, #216]	; (8008e7c <I2C_ITError+0x1bc>)
 8008da2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2240      	movs	r2, #64	; 0x40
 8008da8:	2100      	movs	r1, #0
 8008daa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	0018      	movs	r0, r3
 8008db2:	f7fe fe7b 	bl	8007aac <HAL_DMA_Abort_IT>
 8008db6:	1e03      	subs	r3, r0, #0
 8008db8:	d051      	beq.n	8008e5e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008dc8:	e049      	b.n	8008e5e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f000 f859 	bl	8008e84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008dd2:	e044      	b.n	8008e5e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d03b      	beq.n	8008e54 <I2C_ITError+0x194>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b12      	cmp	r3, #18
 8008de0:	d002      	beq.n	8008de8 <I2C_ITError+0x128>
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b22      	cmp	r3, #34	; 0x22
 8008de6:	d135      	bne.n	8008e54 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	2380      	movs	r3, #128	; 0x80
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	401a      	ands	r2, r3
 8008df4:	2380      	movs	r3, #128	; 0x80
 8008df6:	021b      	lsls	r3, r3, #8
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d107      	bne.n	8008e0c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	491e      	ldr	r1, [pc, #120]	; (8008e80 <I2C_ITError+0x1c0>)
 8008e08:	400a      	ands	r2, r1
 8008e0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7fe ff67 	bl	8007ce4 <HAL_DMA_GetState>
 8008e16:	0003      	movs	r3, r0
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d016      	beq.n	8008e4a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e20:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <I2C_ITError+0x1bc>)
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2240      	movs	r2, #64	; 0x40
 8008e28:	2100      	movs	r1, #0
 8008e2a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	0018      	movs	r0, r3
 8008e32:	f7fe fe3b 	bl	8007aac <HAL_DMA_Abort_IT>
 8008e36:	1e03      	subs	r3, r0, #0
 8008e38:	d013      	beq.n	8008e62 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e44:	0018      	movs	r0, r3
 8008e46:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e48:	e00b      	b.n	8008e62 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f000 f819 	bl	8008e84 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e52:	e006      	b.n	8008e62 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 f814 	bl	8008e84 <I2C_TreatErrorCallback>
  }
}
 8008e5c:	e002      	b.n	8008e64 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008e5e:	46c0      	nop			; (mov r8, r8)
 8008e60:	e000      	b.n	8008e64 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e62:	46c0      	nop			; (mov r8, r8)
}
 8008e64:	46c0      	nop			; (mov r8, r8)
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b004      	add	sp, #16
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	ffff0000 	.word	0xffff0000
 8008e70:	08008589 	.word	0x08008589
 8008e74:	00008003 	.word	0x00008003
 8008e78:	ffffbfff 	.word	0xffffbfff
 8008e7c:	08008f1b 	.word	0x08008f1b
 8008e80:	ffff7fff 	.word	0xffff7fff

08008e84 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2241      	movs	r2, #65	; 0x41
 8008e90:	5c9b      	ldrb	r3, [r3, r2]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	2b60      	cmp	r3, #96	; 0x60
 8008e96:	d10f      	bne.n	8008eb8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2241      	movs	r2, #65	; 0x41
 8008e9c:	2120      	movs	r1, #32
 8008e9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2240      	movs	r2, #64	; 0x40
 8008eaa:	2100      	movs	r1, #0
 8008eac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7ff fb61 	bl	8008578 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008eb6:	e00a      	b.n	8008ece <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2240      	movs	r2, #64	; 0x40
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	0018      	movs	r0, r3
 8008eca:	f7ff fb4d 	bl	8008568 <HAL_I2C_ErrorCallback>
}
 8008ece:	46c0      	nop			; (mov r8, r8)
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	b002      	add	sp, #8
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	2202      	movs	r2, #2
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d103      	bne.n	8008ef4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	2201      	movs	r2, #1
 8008efc:	4013      	ands	r3, r2
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d007      	beq.n	8008f12 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	619a      	str	r2, [r3, #24]
  }
}
 8008f12:	46c0      	nop			; (mov r8, r8)
 8008f14:	46bd      	mov	sp, r7
 8008f16:	b002      	add	sp, #8
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d003      	beq.n	8008f38 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f34:	2200      	movs	r2, #0
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f44:	2200      	movs	r2, #0
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7ff ff9a 	bl	8008e84 <I2C_TreatErrorCallback>
}
 8008f50:	46c0      	nop			; (mov r8, r8)
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b004      	add	sp, #16
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	1dfb      	adds	r3, r7, #7
 8008f66:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008f68:	e021      	b.n	8008fae <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	d01e      	beq.n	8008fae <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f70:	f7fe f90a 	bl	8007188 <HAL_GetTick>
 8008f74:	0002      	movs	r2, r0
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d302      	bcc.n	8008f86 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d113      	bne.n	8008fae <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	431a      	orrs	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2241      	movs	r2, #65	; 0x41
 8008f96:	2120      	movs	r1, #32
 8008f98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2242      	movs	r2, #66	; 0x42
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2240      	movs	r2, #64	; 0x40
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e00f      	b.n	8008fce <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	425a      	negs	r2, r3
 8008fbe:	4153      	adcs	r3, r2
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	001a      	movs	r2, r3
 8008fc4:	1dfb      	adds	r3, r7, #7
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d0ce      	beq.n	8008f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	0018      	movs	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	b004      	add	sp, #16
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008fe2:	e02b      	b.n	800903c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0018      	movs	r0, r3
 8008fec:	f000 f86e 	bl	80090cc <I2C_IsAcknowledgeFailed>
 8008ff0:	1e03      	subs	r3, r0, #0
 8008ff2:	d001      	beq.n	8008ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e029      	b.n	800904c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	d01e      	beq.n	800903c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ffe:	f7fe f8c3 	bl	8007188 <HAL_GetTick>
 8009002:	0002      	movs	r2, r0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	d302      	bcc.n	8009014 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d113      	bne.n	800903c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009018:	2220      	movs	r2, #32
 800901a:	431a      	orrs	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2241      	movs	r2, #65	; 0x41
 8009024:	2120      	movs	r1, #32
 8009026:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2242      	movs	r2, #66	; 0x42
 800902c:	2100      	movs	r1, #0
 800902e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2240      	movs	r2, #64	; 0x40
 8009034:	2100      	movs	r1, #0
 8009036:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e007      	b.n	800904c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	2202      	movs	r2, #2
 8009044:	4013      	ands	r3, r2
 8009046:	2b02      	cmp	r3, #2
 8009048:	d1cc      	bne.n	8008fe4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	0018      	movs	r0, r3
 800904e:	46bd      	mov	sp, r7
 8009050:	b004      	add	sp, #16
 8009052:	bd80      	pop	{r7, pc}

08009054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009060:	e028      	b.n	80090b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	0018      	movs	r0, r3
 800906a:	f000 f82f 	bl	80090cc <I2C_IsAcknowledgeFailed>
 800906e:	1e03      	subs	r3, r0, #0
 8009070:	d001      	beq.n	8009076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e026      	b.n	80090c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009076:	f7fe f887 	bl	8007188 <HAL_GetTick>
 800907a:	0002      	movs	r2, r0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	429a      	cmp	r2, r3
 8009084:	d302      	bcc.n	800908c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d113      	bne.n	80090b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009090:	2220      	movs	r2, #32
 8009092:	431a      	orrs	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2241      	movs	r2, #65	; 0x41
 800909c:	2120      	movs	r1, #32
 800909e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2242      	movs	r2, #66	; 0x42
 80090a4:	2100      	movs	r1, #0
 80090a6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2240      	movs	r2, #64	; 0x40
 80090ac:	2100      	movs	r1, #0
 80090ae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e007      	b.n	80090c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	2220      	movs	r2, #32
 80090bc:	4013      	ands	r3, r2
 80090be:	2b20      	cmp	r3, #32
 80090c0:	d1cf      	bne.n	8009062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	0018      	movs	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b004      	add	sp, #16
 80090ca:	bd80      	pop	{r7, pc}

080090cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	2210      	movs	r2, #16
 80090e0:	4013      	ands	r3, r2
 80090e2:	2b10      	cmp	r3, #16
 80090e4:	d151      	bne.n	800918a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090e6:	e021      	b.n	800912c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	3301      	adds	r3, #1
 80090ec:	d01e      	beq.n	800912c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ee:	f7fe f84b 	bl	8007188 <HAL_GetTick>
 80090f2:	0002      	movs	r2, r0
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d302      	bcc.n	8009104 <I2C_IsAcknowledgeFailed+0x38>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d113      	bne.n	800912c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009108:	2220      	movs	r2, #32
 800910a:	431a      	orrs	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2241      	movs	r2, #65	; 0x41
 8009114:	2120      	movs	r1, #32
 8009116:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2242      	movs	r2, #66	; 0x42
 800911c:	2100      	movs	r1, #0
 800911e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2240      	movs	r2, #64	; 0x40
 8009124:	2100      	movs	r1, #0
 8009126:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e02f      	b.n	800918c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	2220      	movs	r2, #32
 8009134:	4013      	ands	r3, r2
 8009136:	2b20      	cmp	r3, #32
 8009138:	d1d6      	bne.n	80090e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2210      	movs	r2, #16
 8009140:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2220      	movs	r2, #32
 8009148:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	0018      	movs	r0, r3
 800914e:	f7ff fec2 	bl	8008ed6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	490d      	ldr	r1, [pc, #52]	; (8009194 <I2C_IsAcknowledgeFailed+0xc8>)
 800915e:	400a      	ands	r2, r1
 8009160:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	2204      	movs	r2, #4
 8009168:	431a      	orrs	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2241      	movs	r2, #65	; 0x41
 8009172:	2120      	movs	r1, #32
 8009174:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2242      	movs	r2, #66	; 0x42
 800917a:	2100      	movs	r1, #0
 800917c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2240      	movs	r2, #64	; 0x40
 8009182:	2100      	movs	r1, #0
 8009184:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e000      	b.n	800918c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	0018      	movs	r0, r3
 800918e:	46bd      	mov	sp, r7
 8009190:	b004      	add	sp, #16
 8009192:	bd80      	pop	{r7, pc}
 8009194:	fe00e800 	.word	0xfe00e800

08009198 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8009198:	b590      	push	{r4, r7, lr}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	0008      	movs	r0, r1
 80091a2:	0011      	movs	r1, r2
 80091a4:	607b      	str	r3, [r7, #4]
 80091a6:	240a      	movs	r4, #10
 80091a8:	193b      	adds	r3, r7, r4
 80091aa:	1c02      	adds	r2, r0, #0
 80091ac:	801a      	strh	r2, [r3, #0]
 80091ae:	2009      	movs	r0, #9
 80091b0:	183b      	adds	r3, r7, r0
 80091b2:	1c0a      	adds	r2, r1, #0
 80091b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	6a3a      	ldr	r2, [r7, #32]
 80091be:	0d51      	lsrs	r1, r2, #21
 80091c0:	2280      	movs	r2, #128	; 0x80
 80091c2:	00d2      	lsls	r2, r2, #3
 80091c4:	400a      	ands	r2, r1
 80091c6:	490e      	ldr	r1, [pc, #56]	; (8009200 <I2C_TransferConfig+0x68>)
 80091c8:	430a      	orrs	r2, r1
 80091ca:	43d2      	mvns	r2, r2
 80091cc:	401a      	ands	r2, r3
 80091ce:	0011      	movs	r1, r2
 80091d0:	193b      	adds	r3, r7, r4
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	059b      	lsls	r3, r3, #22
 80091d6:	0d9a      	lsrs	r2, r3, #22
 80091d8:	183b      	adds	r3, r7, r0
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	0418      	lsls	r0, r3, #16
 80091de:	23ff      	movs	r3, #255	; 0xff
 80091e0:	041b      	lsls	r3, r3, #16
 80091e2:	4003      	ands	r3, r0
 80091e4:	431a      	orrs	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	431a      	orrs	r2, r3
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	431a      	orrs	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	46bd      	mov	sp, r7
 80091fa:	b005      	add	sp, #20
 80091fc:	bd90      	pop	{r4, r7, pc}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	03ff63ff 	.word	0x03ff63ff

08009204 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	000a      	movs	r2, r1
 800920e:	1cbb      	adds	r3, r7, #2
 8009210:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009216:	1cbb      	adds	r3, r7, #2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	2201      	movs	r2, #1
 800921c:	4013      	ands	r3, r2
 800921e:	d010      	beq.n	8009242 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2242      	movs	r2, #66	; 0x42
 8009224:	4313      	orrs	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2241      	movs	r2, #65	; 0x41
 800922c:	5c9b      	ldrb	r3, [r3, r2]
 800922e:	b2db      	uxtb	r3, r3
 8009230:	001a      	movs	r2, r3
 8009232:	2328      	movs	r3, #40	; 0x28
 8009234:	4013      	ands	r3, r2
 8009236:	2b28      	cmp	r3, #40	; 0x28
 8009238:	d003      	beq.n	8009242 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	22b0      	movs	r2, #176	; 0xb0
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009242:	1cbb      	adds	r3, r7, #2
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	2202      	movs	r2, #2
 8009248:	4013      	ands	r3, r2
 800924a:	d010      	beq.n	800926e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2244      	movs	r2, #68	; 0x44
 8009250:	4313      	orrs	r3, r2
 8009252:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2241      	movs	r2, #65	; 0x41
 8009258:	5c9b      	ldrb	r3, [r3, r2]
 800925a:	b2db      	uxtb	r3, r3
 800925c:	001a      	movs	r2, r3
 800925e:	2328      	movs	r3, #40	; 0x28
 8009260:	4013      	ands	r3, r2
 8009262:	2b28      	cmp	r3, #40	; 0x28
 8009264:	d003      	beq.n	800926e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	22b0      	movs	r2, #176	; 0xb0
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800926e:	1cbb      	adds	r3, r7, #2
 8009270:	2200      	movs	r2, #0
 8009272:	5e9b      	ldrsh	r3, [r3, r2]
 8009274:	2b00      	cmp	r3, #0
 8009276:	da03      	bge.n	8009280 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	22b8      	movs	r2, #184	; 0xb8
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009280:	1cbb      	adds	r3, r7, #2
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	2b10      	cmp	r3, #16
 8009286:	d103      	bne.n	8009290 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2290      	movs	r2, #144	; 0x90
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009290:	1cbb      	adds	r3, r7, #2
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	2b20      	cmp	r3, #32
 8009296:	d103      	bne.n	80092a0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2220      	movs	r2, #32
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80092a0:	1cbb      	adds	r3, r7, #2
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d103      	bne.n	80092b0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2240      	movs	r2, #64	; 0x40
 80092ac:	4313      	orrs	r3, r2
 80092ae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	43d9      	mvns	r1, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	400a      	ands	r2, r1
 80092c0:	601a      	str	r2, [r3, #0]
}
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	46bd      	mov	sp, r7
 80092c6:	b004      	add	sp, #16
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2241      	movs	r2, #65	; 0x41
 80092da:	5c9b      	ldrb	r3, [r3, r2]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d138      	bne.n	8009354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2240      	movs	r2, #64	; 0x40
 80092e6:	5c9b      	ldrb	r3, [r3, r2]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e032      	b.n	8009356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2240      	movs	r2, #64	; 0x40
 80092f4:	2101      	movs	r1, #1
 80092f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2241      	movs	r2, #65	; 0x41
 80092fc:	2124      	movs	r1, #36	; 0x24
 80092fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2101      	movs	r1, #1
 800930c:	438a      	bics	r2, r1
 800930e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4911      	ldr	r1, [pc, #68]	; (8009360 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800931c:	400a      	ands	r2, r1
 800931e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6819      	ldr	r1, [r3, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2101      	movs	r1, #1
 800933c:	430a      	orrs	r2, r1
 800933e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2241      	movs	r2, #65	; 0x41
 8009344:	2120      	movs	r1, #32
 8009346:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2240      	movs	r2, #64	; 0x40
 800934c:	2100      	movs	r1, #0
 800934e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	e000      	b.n	8009356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009354:	2302      	movs	r3, #2
  }
}
 8009356:	0018      	movs	r0, r3
 8009358:	46bd      	mov	sp, r7
 800935a:	b002      	add	sp, #8
 800935c:	bd80      	pop	{r7, pc}
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	ffffefff 	.word	0xffffefff

08009364 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2241      	movs	r2, #65	; 0x41
 8009372:	5c9b      	ldrb	r3, [r3, r2]
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b20      	cmp	r3, #32
 8009378:	d139      	bne.n	80093ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2240      	movs	r2, #64	; 0x40
 800937e:	5c9b      	ldrb	r3, [r3, r2]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d101      	bne.n	8009388 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009384:	2302      	movs	r3, #2
 8009386:	e033      	b.n	80093f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	2101      	movs	r1, #1
 800938e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2241      	movs	r2, #65	; 0x41
 8009394:	2124      	movs	r1, #36	; 0x24
 8009396:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2101      	movs	r1, #1
 80093a4:	438a      	bics	r2, r1
 80093a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4a11      	ldr	r2, [pc, #68]	; (80093f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80093b4:	4013      	ands	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	021b      	lsls	r3, r3, #8
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2101      	movs	r1, #1
 80093d6:	430a      	orrs	r2, r1
 80093d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2241      	movs	r2, #65	; 0x41
 80093de:	2120      	movs	r1, #32
 80093e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2240      	movs	r2, #64	; 0x40
 80093e6:	2100      	movs	r1, #0
 80093e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	e000      	b.n	80093f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80093ee:	2302      	movs	r3, #2
  }
}
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b004      	add	sp, #16
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	fffff0ff 	.word	0xfffff0ff

080093fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e0e5      	b.n	80095da <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2235      	movs	r2, #53	; 0x35
 8009412:	5c9b      	ldrb	r3, [r3, r2]
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d107      	bne.n	800942a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2234      	movs	r2, #52	; 0x34
 800941e:	2100      	movs	r1, #0
 8009420:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	0018      	movs	r0, r3
 8009426:	f7fd fa69 	bl	80068fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2235      	movs	r2, #53	; 0x35
 800942e:	2102      	movs	r1, #2
 8009430:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69da      	ldr	r2, [r3, #28]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4969      	ldr	r1, [pc, #420]	; (80095e4 <HAL_I2S_Init+0x1e8>)
 800943e:	400a      	ands	r2, r1
 8009440:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2202      	movs	r2, #2
 8009448:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	2b02      	cmp	r3, #2
 8009450:	d100      	bne.n	8009454 <HAL_I2S_Init+0x58>
 8009452:	e076      	b.n	8009542 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800945c:	2310      	movs	r3, #16
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	e001      	b.n	8009466 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8009462:	2320      	movs	r3, #32
 8009464:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	2b20      	cmp	r3, #32
 800946c:	d802      	bhi.n	8009474 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8009474:	2380      	movs	r3, #128	; 0x80
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	0018      	movs	r0, r3
 800947a:	f001 fa9b 	bl	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800947e:	0003      	movs	r3, r0
 8009480:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	691a      	ldr	r2, [r3, #16]
 8009486:	2380      	movs	r3, #128	; 0x80
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	429a      	cmp	r2, r3
 800948c:	d131      	bne.n	80094f2 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d016      	beq.n	80094c4 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	0019      	movs	r1, r3
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7f6 fe31 	bl	8000104 <__udivsi3>
 80094a2:	0003      	movs	r3, r0
 80094a4:	001a      	movs	r2, r3
 80094a6:	0013      	movs	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	189b      	adds	r3, r3, r2
 80094ac:	005b      	lsls	r3, r3, #1
 80094ae:	001a      	movs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	0019      	movs	r1, r3
 80094b6:	0010      	movs	r0, r2
 80094b8:	f7f6 fe24 	bl	8000104 <__udivsi3>
 80094bc:	0003      	movs	r3, r0
 80094be:	3305      	adds	r3, #5
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	e02a      	b.n	800951a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	00db      	lsls	r3, r3, #3
 80094c8:	0019      	movs	r1, r3
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f7f6 fe1a 	bl	8000104 <__udivsi3>
 80094d0:	0003      	movs	r3, r0
 80094d2:	001a      	movs	r2, r3
 80094d4:	0013      	movs	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	189b      	adds	r3, r3, r2
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	001a      	movs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	0019      	movs	r1, r3
 80094e4:	0010      	movs	r0, r2
 80094e6:	f7f6 fe0d 	bl	8000104 <__udivsi3>
 80094ea:	0003      	movs	r3, r0
 80094ec:	3305      	adds	r3, #5
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	e013      	b.n	800951a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80094f2:	6979      	ldr	r1, [r7, #20]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7f6 fe05 	bl	8000104 <__udivsi3>
 80094fa:	0003      	movs	r3, r0
 80094fc:	001a      	movs	r2, r3
 80094fe:	0013      	movs	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	189b      	adds	r3, r3, r2
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	001a      	movs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	695b      	ldr	r3, [r3, #20]
 800950c:	0019      	movs	r1, r3
 800950e:	0010      	movs	r0, r2
 8009510:	f7f6 fdf8 	bl	8000104 <__udivsi3>
 8009514:	0003      	movs	r3, r0
 8009516:	3305      	adds	r3, #5
 8009518:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	210a      	movs	r1, #10
 800951e:	0018      	movs	r0, r3
 8009520:	f7f6 fdf0 	bl	8000104 <__udivsi3>
 8009524:	0003      	movs	r3, r0
 8009526:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2201      	movs	r2, #1
 800952c:	4013      	ands	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	085b      	lsrs	r3, r3, #1
 8009538:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	e003      	b.n	800954a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8009542:	2302      	movs	r3, #2
 8009544:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d902      	bls.n	8009556 <HAL_I2S_Init+0x15a>
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	2bff      	cmp	r3, #255	; 0xff
 8009554:	d907      	bls.n	8009566 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955a:	2210      	movs	r2, #16
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e039      	b.n	80095da <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691a      	ldr	r2, [r3, #16]
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	431a      	orrs	r2, r3
 800956e:	0011      	movs	r1, r2
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	430a      	orrs	r2, r1
 8009578:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	4a18      	ldr	r2, [pc, #96]	; (80095e4 <HAL_I2S_Init+0x1e8>)
 8009582:	401a      	ands	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6859      	ldr	r1, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	4319      	orrs	r1, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	4319      	orrs	r1, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	430b      	orrs	r3, r1
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2180      	movs	r1, #128	; 0x80
 80095a2:	0109      	lsls	r1, r1, #4
 80095a4:	430a      	orrs	r2, r1
 80095a6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	2b30      	cmp	r3, #48	; 0x30
 80095ae:	d003      	beq.n	80095b8 <HAL_I2S_Init+0x1bc>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	2bb0      	cmp	r3, #176	; 0xb0
 80095b6:	d108      	bne.n	80095ca <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69da      	ldr	r2, [r3, #28]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2180      	movs	r1, #128	; 0x80
 80095c4:	0149      	lsls	r1, r1, #5
 80095c6:	430a      	orrs	r2, r1
 80095c8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2235      	movs	r2, #53	; 0x35
 80095d4:	2101      	movs	r1, #1
 80095d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	0018      	movs	r0, r3
 80095dc:	46bd      	mov	sp, r7
 80095de:	b008      	add	sp, #32
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	46c0      	nop			; (mov r8, r8)
 80095e4:	fffff040 	.word	0xfffff040

080095e8 <HAL_I2S_Transmit>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	1dbb      	adds	r3, r7, #6
 80095f6:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <HAL_I2S_Transmit+0x1e>
 80095fe:	1dbb      	adds	r3, r7, #6
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_I2S_Transmit+0x22>
  {
    return  HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e0e2      	b.n	80097d0 <HAL_I2S_Transmit+0x1e8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2234      	movs	r2, #52	; 0x34
 800960e:	5c9b      	ldrb	r3, [r3, r2]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b01      	cmp	r3, #1
 8009614:	d101      	bne.n	800961a <HAL_I2S_Transmit+0x32>
 8009616:	2302      	movs	r3, #2
 8009618:	e0da      	b.n	80097d0 <HAL_I2S_Transmit+0x1e8>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2234      	movs	r2, #52	; 0x34
 800961e:	2101      	movs	r1, #1
 8009620:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2235      	movs	r2, #53	; 0x35
 8009626:	5c9b      	ldrb	r3, [r3, r2]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b01      	cmp	r3, #1
 800962c:	d005      	beq.n	800963a <HAL_I2S_Transmit+0x52>
  {
    __HAL_UNLOCK(hi2s);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2234      	movs	r2, #52	; 0x34
 8009632:	2100      	movs	r1, #0
 8009634:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009636:	2302      	movs	r3, #2
 8009638:	e0ca      	b.n	80097d0 <HAL_I2S_Transmit+0x1e8>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2235      	movs	r2, #53	; 0x35
 800963e:	2103      	movs	r1, #3
 8009640:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	2207      	movs	r2, #7
 8009656:	4013      	ands	r3, r2
 8009658:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d002      	beq.n	8009666 <HAL_I2S_Transmit+0x7e>
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2b05      	cmp	r3, #5
 8009664:	d10c      	bne.n	8009680 <HAL_I2S_Transmit+0x98>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009666:	1dbb      	adds	r3, r7, #6
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	18db      	adds	r3, r3, r3
 800966c:	b29a      	uxth	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8009672:	1dbb      	adds	r3, r7, #6
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	18db      	adds	r3, r3, r3
 8009678:	b29a      	uxth	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	845a      	strh	r2, [r3, #34]	; 0x22
 800967e:	e007      	b.n	8009690 <HAL_I2S_Transmit+0xa8>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	1dba      	adds	r2, r7, #6
 8009684:	8812      	ldrh	r2, [r2, #0]
 8009686:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	1dba      	adds	r2, r7, #6
 800968c:	8812      	ldrh	r2, [r2, #0]
 800968e:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  tmpreg_cfgr = hi2s->Instance->I2SCFGR;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	617b      	str	r3, [r7, #20]

  /* Check if the I2S is already enabled */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	69da      	ldr	r2, [r3, #28]
 800969e:	2380      	movs	r3, #128	; 0x80
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	401a      	ands	r2, r3
 80096a4:	2380      	movs	r3, #128	; 0x80
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d008      	beq.n	80096be <HAL_I2S_Transmit+0xd6>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69da      	ldr	r2, [r3, #28]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2180      	movs	r1, #128	; 0x80
 80096b8:	00c9      	lsls	r1, r1, #3
 80096ba:	430a      	orrs	r2, r1
 80096bc:	61da      	str	r2, [r3, #28]
  }

  /* Wait until TXE flag is set */
  if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	2201      	movs	r2, #1
 80096c4:	2102      	movs	r1, #2
 80096c6:	f000 fa6d 	bl	8009ba4 <I2S_WaitFlagStateUntilTimeout>
 80096ca:	1e03      	subs	r3, r0, #0
 80096cc:	d04d      	beq.n	800976a <HAL_I2S_Transmit+0x182>
  {
    /* Set the error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	2201      	movs	r2, #1
 80096d4:	431a      	orrs	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2235      	movs	r2, #53	; 0x35
 80096de:	2101      	movs	r1, #1
 80096e0:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2s);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2234      	movs	r2, #52	; 0x34
 80096e6:	2100      	movs	r1, #0
 80096e8:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e070      	b.n	80097d0 <HAL_I2S_Transmit+0x1e8>
  }

  while (hi2s->TxXferCount > 0U)
  {
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	69db      	ldr	r3, [r3, #28]
 80096f2:	881a      	ldrh	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60da      	str	r2, [r3, #12]
    hi2s->pTxBuffPtr++;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	1c9a      	adds	r2, r3, #2
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	61da      	str	r2, [r3, #28]
    hi2s->TxXferCount--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	845a      	strh	r2, [r3, #34]	; 0x22

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, Timeout) != HAL_OK)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68f8      	ldr	r0, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	2102      	movs	r1, #2
 800971a:	f000 fa43 	bl	8009ba4 <I2S_WaitFlagStateUntilTimeout>
 800971e:	1e03      	subs	r3, r0, #0
 8009720:	d00f      	beq.n	8009742 <HAL_I2S_Transmit+0x15a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	2201      	movs	r2, #1
 8009728:	431a      	orrs	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2235      	movs	r2, #53	; 0x35
 8009732:	2101      	movs	r1, #1
 8009734:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2234      	movs	r2, #52	; 0x34
 800973a:	2100      	movs	r1, #0
 800973c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e046      	b.n	80097d0 <HAL_I2S_Transmit+0x1e8>
    }

    /* Check if an underrun occurs */
    if (__HAL_I2S_GET_FLAG(hi2s, I2S_FLAG_UDR) == SET)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2208      	movs	r2, #8
 800974a:	4013      	ands	r3, r2
 800974c:	2b08      	cmp	r3, #8
 800974e:	d10c      	bne.n	800976a <HAL_I2S_Transmit+0x182>
    {
      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8009750:	2300      	movs	r3, #0
 8009752:	613b      	str	r3, [r7, #16]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	613b      	str	r3, [r7, #16]
 800975c:	693b      	ldr	r3, [r7, #16]

      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	2204      	movs	r2, #4
 8009764:	431a      	orrs	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
  while (hi2s->TxXferCount > 0U)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800976e:	b29b      	uxth	r3, r3
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1bc      	bne.n	80096ee <HAL_I2S_Transmit+0x106>
    }
  }

  /* Check if Slave mode is selected */
  if (((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX)
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	23c0      	movs	r3, #192	; 0xc0
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4013      	ands	r3, r2
 800977c:	d007      	beq.n	800978e <HAL_I2S_Transmit+0x1a6>
      || ((tmpreg_cfgr & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_RX))
 800977e:	697a      	ldr	r2, [r7, #20]
 8009780:	23c0      	movs	r3, #192	; 0xc0
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	401a      	ands	r2, r3
 8009786:	2380      	movs	r3, #128	; 0x80
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	429a      	cmp	r2, r3
 800978c:	d117      	bne.n	80097be <HAL_I2S_Transmit+0x1d6>
  {
    /* Wait until Busy flag is reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	2180      	movs	r1, #128	; 0x80
 8009796:	f000 fa05 	bl	8009ba4 <I2S_WaitFlagStateUntilTimeout>
 800979a:	1e03      	subs	r3, r0, #0
 800979c:	d00f      	beq.n	80097be <HAL_I2S_Transmit+0x1d6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	2201      	movs	r2, #1
 80097a4:	431a      	orrs	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2235      	movs	r2, #53	; 0x35
 80097ae:	2101      	movs	r1, #1
 80097b0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2s);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2234      	movs	r2, #52	; 0x34
 80097b6:	2100      	movs	r1, #0
 80097b8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e008      	b.n	80097d0 <HAL_I2S_Transmit+0x1e8>
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2235      	movs	r2, #53	; 0x35
 80097c2:	2101      	movs	r1, #1
 80097c4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hi2s);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2234      	movs	r2, #52	; 0x34
 80097ca:	2100      	movs	r1, #0
 80097cc:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	0018      	movs	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	b006      	add	sp, #24
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	1dbb      	adds	r3, r7, #6
 80097e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_I2S_Transmit_DMA+0x1c>
 80097ec:	1dbb      	adds	r3, r7, #6
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e091      	b.n	800991c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2234      	movs	r2, #52	; 0x34
 80097fc:	5c9b      	ldrb	r3, [r3, r2]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_I2S_Transmit_DMA+0x30>
 8009804:	2302      	movs	r3, #2
 8009806:	e089      	b.n	800991c <HAL_I2S_Transmit_DMA+0x144>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2234      	movs	r2, #52	; 0x34
 800980c:	2101      	movs	r1, #1
 800980e:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2235      	movs	r2, #53	; 0x35
 8009814:	5c9b      	ldrb	r3, [r3, r2]
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b01      	cmp	r3, #1
 800981a:	d005      	beq.n	8009828 <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2234      	movs	r2, #52	; 0x34
 8009820:	2100      	movs	r1, #0
 8009822:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8009824:	2302      	movs	r3, #2
 8009826:	e079      	b.n	800991c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2235      	movs	r2, #53	; 0x35
 800982c:	2103      	movs	r1, #3
 800982e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	2207      	movs	r2, #7
 8009844:	4013      	ands	r3, r2
 8009846:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2b03      	cmp	r3, #3
 800984c:	d002      	beq.n	8009854 <HAL_I2S_Transmit_DMA+0x7c>
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b05      	cmp	r3, #5
 8009852:	d10c      	bne.n	800986e <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8009854:	1dbb      	adds	r3, r7, #6
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	18db      	adds	r3, r3, r3
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8009860:	1dbb      	adds	r3, r7, #6
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	18db      	adds	r3, r3, r3
 8009866:	b29a      	uxth	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	845a      	strh	r2, [r3, #34]	; 0x22
 800986c:	e007      	b.n	800987e <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1dba      	adds	r2, r7, #6
 8009872:	8812      	ldrh	r2, [r2, #0]
 8009874:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1dba      	adds	r2, r7, #6
 800987a:	8812      	ldrh	r2, [r2, #0]
 800987c:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	4a28      	ldr	r2, [pc, #160]	; (8009924 <HAL_I2S_Transmit_DMA+0x14c>)
 8009884:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	4a27      	ldr	r2, [pc, #156]	; (8009928 <HAL_I2S_Transmit_DMA+0x150>)
 800988c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	4a26      	ldr	r2, [pc, #152]	; (800992c <HAL_I2S_Transmit_DMA+0x154>)
 8009894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800989e:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80098a6:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8c1b      	ldrh	r3, [r3, #32]
 80098ac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80098ae:	f7fe f877 	bl	80079a0 <HAL_DMA_Start_IT>
 80098b2:	1e03      	subs	r3, r0, #0
 80098b4:	d00f      	beq.n	80098d6 <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ba:	2208      	movs	r2, #8
 80098bc:	431a      	orrs	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2235      	movs	r2, #53	; 0x35
 80098c6:	2101      	movs	r1, #1
 80098c8:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2234      	movs	r2, #52	; 0x34
 80098ce:	2100      	movs	r1, #0
 80098d0:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e022      	b.n	800991c <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69da      	ldr	r2, [r3, #28]
 80098dc:	2380      	movs	r3, #128	; 0x80
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	4013      	ands	r3, r2
 80098e2:	d108      	bne.n	80098f6 <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69da      	ldr	r2, [r3, #28]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2180      	movs	r1, #128	; 0x80
 80098f0:	00c9      	lsls	r1, r1, #3
 80098f2:	430a      	orrs	r2, r1
 80098f4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	2202      	movs	r2, #2
 80098fe:	4013      	ands	r3, r2
 8009900:	d107      	bne.n	8009912 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2102      	movs	r1, #2
 800990e:	430a      	orrs	r2, r1
 8009910:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2234      	movs	r2, #52	; 0x34
 8009916:	2100      	movs	r1, #0
 8009918:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	0018      	movs	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	b006      	add	sp, #24
 8009922:	bd80      	pop	{r7, pc}
 8009924:	08009a7b 	.word	0x08009a7b
 8009928:	08009a37 	.word	0x08009a37
 800992c:	08009a99 	.word	0x08009a99

08009930 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	099b      	lsrs	r3, r3, #6
 800994c:	001a      	movs	r2, r3
 800994e:	2301      	movs	r3, #1
 8009950:	4013      	ands	r3, r2
 8009952:	d10e      	bne.n	8009972 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2201      	movs	r2, #1
 8009958:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 800995a:	d00a      	beq.n	8009972 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	099b      	lsrs	r3, r3, #6
 8009960:	001a      	movs	r2, r3
 8009962:	2301      	movs	r3, #1
 8009964:	4013      	ands	r3, r2
 8009966:	d004      	beq.n	8009972 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	0018      	movs	r0, r3
 800996c:	f000 f8ea 	bl	8009b44 <I2S_Receive_IT>
    return;
 8009970:	e046      	b.n	8009a00 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	085b      	lsrs	r3, r3, #1
 8009976:	001a      	movs	r2, r3
 8009978:	2301      	movs	r3, #1
 800997a:	4013      	ands	r3, r2
 800997c:	d00a      	beq.n	8009994 <HAL_I2S_IRQHandler+0x64>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	09db      	lsrs	r3, r3, #7
 8009982:	001a      	movs	r2, r3
 8009984:	2301      	movs	r3, #1
 8009986:	4013      	ands	r3, r2
 8009988:	d004      	beq.n	8009994 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	0018      	movs	r0, r3
 800998e:	f000 f8aa 	bl	8009ae6 <I2S_Transmit_IT>
    return;
 8009992:	e035      	b.n	8009a00 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	095b      	lsrs	r3, r3, #5
 8009998:	001a      	movs	r2, r3
 800999a:	2301      	movs	r3, #1
 800999c:	4013      	ands	r3, r2
 800999e:	d02f      	beq.n	8009a00 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	099b      	lsrs	r3, r3, #6
 80099a4:	001a      	movs	r2, r3
 80099a6:	2301      	movs	r3, #1
 80099a8:	4013      	ands	r3, r2
 80099aa:	d00d      	beq.n	80099c8 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2160      	movs	r1, #96	; 0x60
 80099b8:	438a      	bics	r2, r1
 80099ba:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c0:	2202      	movs	r2, #2
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	08db      	lsrs	r3, r3, #3
 80099cc:	001a      	movs	r2, r3
 80099ce:	2301      	movs	r3, #1
 80099d0:	4013      	ands	r3, r2
 80099d2:	d00d      	beq.n	80099f0 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	685a      	ldr	r2, [r3, #4]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	21a0      	movs	r1, #160	; 0xa0
 80099e0:	438a      	bics	r2, r1
 80099e2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e8:	2204      	movs	r2, #4
 80099ea:	431a      	orrs	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2235      	movs	r2, #53	; 0x35
 80099f4:	2101      	movs	r1, #1
 80099f6:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	0018      	movs	r0, r3
 80099fc:	f000 f813 	bl	8009a26 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009a00:	46bd      	mov	sp, r7
 8009a02:	b004      	add	sp, #16
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b082      	sub	sp, #8
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	46bd      	mov	sp, r7
 8009a12:	b002      	add	sp, #8
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8009a1e:	46c0      	nop			; (mov r8, r8)
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b002      	add	sp, #8
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	46bd      	mov	sp, r7
 8009a32:	b002      	add	sp, #8
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10e      	bne.n	8009a6a <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685a      	ldr	r2, [r3, #4]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2102      	movs	r1, #2
 8009a58:	438a      	bics	r2, r1
 8009a5a:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2235      	movs	r2, #53	; 0x35
 8009a66:	2101      	movs	r1, #1
 8009a68:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	0018      	movs	r0, r3
 8009a6e:	f7f9 fab5 	bl	8002fdc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009a72:	46c0      	nop			; (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b004      	add	sp, #16
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f7ff ffbb 	bl	8009a06 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009a90:	46c0      	nop			; (mov r8, r8)
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b004      	add	sp, #16
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2103      	movs	r1, #3
 8009ab2:	438a      	bics	r2, r1
 8009ab4:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2235      	movs	r2, #53	; 0x35
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	2208      	movs	r2, #8
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	0018      	movs	r0, r3
 8009ada:	f7ff ffa4 	bl	8009a26 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	b004      	add	sp, #16
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	881a      	ldrh	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	1c9a      	adds	r2, r3, #2
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10f      	bne.n	8009b3c <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	21a0      	movs	r1, #160	; 0xa0
 8009b28:	438a      	bics	r2, r1
 8009b2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2235      	movs	r2, #53	; 0x35
 8009b30:	2101      	movs	r1, #1
 8009b32:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	0018      	movs	r0, r3
 8009b38:	f7f9 fa50 	bl	8002fdc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009b3c:	46c0      	nop			; (mov r8, r8)
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	b002      	add	sp, #8
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	68da      	ldr	r2, [r3, #12]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	b292      	uxth	r2, r2
 8009b58:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	1c9a      	adds	r2, r3, #2
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10f      	bne.n	8009b9c <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2160      	movs	r1, #96	; 0x60
 8009b88:	438a      	bics	r2, r1
 8009b8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2235      	movs	r2, #53	; 0x35
 8009b90:	2101      	movs	r1, #1
 8009b92:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	0018      	movs	r0, r3
 8009b98:	f7ff ff3d 	bl	8009a16 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8009b9c:	46c0      	nop			; (mov r8, r8)
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	b002      	add	sp, #8
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	603b      	str	r3, [r7, #0]
 8009bb0:	1dfb      	adds	r3, r7, #7
 8009bb2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bb4:	f7fd fae8 	bl	8007188 <HAL_GetTick>
 8009bb8:	0003      	movs	r3, r0
 8009bba:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009bbc:	e017      	b.n	8009bee <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	d014      	beq.n	8009bee <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8009bc4:	f7fd fae0 	bl	8007188 <HAL_GetTick>
 8009bc8:	0002      	movs	r2, r0
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d902      	bls.n	8009bda <I2S_WaitFlagStateUntilTimeout+0x36>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d109      	bne.n	8009bee <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2235      	movs	r2, #53	; 0x35
 8009bde:	2101      	movs	r1, #1
 8009be0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2234      	movs	r2, #52	; 0x34
 8009be6:	2100      	movs	r1, #0
 8009be8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e00f      	b.n	8009c0e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	425a      	negs	r2, r3
 8009bfe:	4153      	adcs	r3, r2
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	001a      	movs	r2, r3
 8009c04:	1dfb      	adds	r3, r7, #7
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d1d8      	bne.n	8009bbe <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	0018      	movs	r0, r3
 8009c10:	46bd      	mov	sp, r7
 8009c12:	b006      	add	sp, #24
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009c20:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a19      	ldr	r2, [pc, #100]	; (8009c8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009c26:	4013      	ands	r3, r2
 8009c28:	0019      	movs	r1, r3
 8009c2a:	4b17      	ldr	r3, [pc, #92]	; (8009c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	2380      	movs	r3, #128	; 0x80
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d11f      	bne.n	8009c7c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8009c3c:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	0013      	movs	r3, r2
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	189b      	adds	r3, r3, r2
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	4912      	ldr	r1, [pc, #72]	; (8009c94 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f7f6 fa5a 	bl	8000104 <__udivsi3>
 8009c50:	0003      	movs	r3, r0
 8009c52:	3301      	adds	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c56:	e008      	b.n	8009c6a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e001      	b.n	8009c6a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e009      	b.n	8009c7e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009c6c:	695a      	ldr	r2, [r3, #20]
 8009c6e:	2380      	movs	r3, #128	; 0x80
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	401a      	ands	r2, r3
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	00db      	lsls	r3, r3, #3
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d0ed      	beq.n	8009c58 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	0018      	movs	r0, r3
 8009c80:	46bd      	mov	sp, r7
 8009c82:	b004      	add	sp, #16
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	46c0      	nop			; (mov r8, r8)
 8009c88:	40007000 	.word	0x40007000
 8009c8c:	fffff9ff 	.word	0xfffff9ff
 8009c90:	20000068 	.word	0x20000068
 8009c94:	000f4240 	.word	0x000f4240

08009c98 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009c9c:	4b03      	ldr	r3, [pc, #12]	; (8009cac <LL_RCC_GetAPB1Prescaler+0x14>)
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	23e0      	movs	r3, #224	; 0xe0
 8009ca2:	01db      	lsls	r3, r3, #7
 8009ca4:	4013      	ands	r3, r2
}
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	40021000 	.word	0x40021000

08009cb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e304      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	4013      	ands	r3, r2
 8009cca:	d100      	bne.n	8009cce <HAL_RCC_OscConfig+0x1e>
 8009ccc:	e07c      	b.n	8009dc8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cce:	4bc3      	ldr	r3, [pc, #780]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	2238      	movs	r2, #56	; 0x38
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009cd8:	4bc0      	ldr	r3, [pc, #768]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	2203      	movs	r2, #3
 8009cde:	4013      	ands	r3, r2
 8009ce0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d102      	bne.n	8009cee <HAL_RCC_OscConfig+0x3e>
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d002      	beq.n	8009cf4 <HAL_RCC_OscConfig+0x44>
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d10b      	bne.n	8009d0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009cf4:	4bb9      	ldr	r3, [pc, #740]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	029b      	lsls	r3, r3, #10
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	d062      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x116>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d15e      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e2df      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	2380      	movs	r3, #128	; 0x80
 8009d12:	025b      	lsls	r3, r3, #9
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d107      	bne.n	8009d28 <HAL_RCC_OscConfig+0x78>
 8009d18:	4bb0      	ldr	r3, [pc, #704]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	4baf      	ldr	r3, [pc, #700]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d1e:	2180      	movs	r1, #128	; 0x80
 8009d20:	0249      	lsls	r1, r1, #9
 8009d22:	430a      	orrs	r2, r1
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	e020      	b.n	8009d6a <HAL_RCC_OscConfig+0xba>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685a      	ldr	r2, [r3, #4]
 8009d2c:	23a0      	movs	r3, #160	; 0xa0
 8009d2e:	02db      	lsls	r3, r3, #11
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d10e      	bne.n	8009d52 <HAL_RCC_OscConfig+0xa2>
 8009d34:	4ba9      	ldr	r3, [pc, #676]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	4ba8      	ldr	r3, [pc, #672]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d3a:	2180      	movs	r1, #128	; 0x80
 8009d3c:	02c9      	lsls	r1, r1, #11
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	4ba6      	ldr	r3, [pc, #664]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4ba5      	ldr	r3, [pc, #660]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d48:	2180      	movs	r1, #128	; 0x80
 8009d4a:	0249      	lsls	r1, r1, #9
 8009d4c:	430a      	orrs	r2, r1
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	e00b      	b.n	8009d6a <HAL_RCC_OscConfig+0xba>
 8009d52:	4ba2      	ldr	r3, [pc, #648]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4ba1      	ldr	r3, [pc, #644]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d58:	49a1      	ldr	r1, [pc, #644]	; (8009fe0 <HAL_RCC_OscConfig+0x330>)
 8009d5a:	400a      	ands	r2, r1
 8009d5c:	601a      	str	r2, [r3, #0]
 8009d5e:	4b9f      	ldr	r3, [pc, #636]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	4b9e      	ldr	r3, [pc, #632]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d64:	499f      	ldr	r1, [pc, #636]	; (8009fe4 <HAL_RCC_OscConfig+0x334>)
 8009d66:	400a      	ands	r2, r1
 8009d68:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d014      	beq.n	8009d9c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d72:	f7fd fa09 	bl	8007188 <HAL_GetTick>
 8009d76:	0003      	movs	r3, r0
 8009d78:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d7a:	e008      	b.n	8009d8e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d7c:	f7fd fa04 	bl	8007188 <HAL_GetTick>
 8009d80:	0002      	movs	r2, r0
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	2b64      	cmp	r3, #100	; 0x64
 8009d88:	d901      	bls.n	8009d8e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e29e      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d8e:	4b93      	ldr	r3, [pc, #588]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	2380      	movs	r3, #128	; 0x80
 8009d94:	029b      	lsls	r3, r3, #10
 8009d96:	4013      	ands	r3, r2
 8009d98:	d0f0      	beq.n	8009d7c <HAL_RCC_OscConfig+0xcc>
 8009d9a:	e015      	b.n	8009dc8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d9c:	f7fd f9f4 	bl	8007188 <HAL_GetTick>
 8009da0:	0003      	movs	r3, r0
 8009da2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009da4:	e008      	b.n	8009db8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009da6:	f7fd f9ef 	bl	8007188 <HAL_GetTick>
 8009daa:	0002      	movs	r2, r0
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	2b64      	cmp	r3, #100	; 0x64
 8009db2:	d901      	bls.n	8009db8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e289      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009db8:	4b88      	ldr	r3, [pc, #544]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	2380      	movs	r3, #128	; 0x80
 8009dbe:	029b      	lsls	r3, r3, #10
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	d1f0      	bne.n	8009da6 <HAL_RCC_OscConfig+0xf6>
 8009dc4:	e000      	b.n	8009dc8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009dc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	4013      	ands	r3, r2
 8009dd0:	d100      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x124>
 8009dd2:	e099      	b.n	8009f08 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dd4:	4b81      	ldr	r3, [pc, #516]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	2238      	movs	r2, #56	; 0x38
 8009dda:	4013      	ands	r3, r2
 8009ddc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009dde:	4b7f      	ldr	r3, [pc, #508]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009de0:	68db      	ldr	r3, [r3, #12]
 8009de2:	2203      	movs	r2, #3
 8009de4:	4013      	ands	r3, r2
 8009de6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	2b10      	cmp	r3, #16
 8009dec:	d102      	bne.n	8009df4 <HAL_RCC_OscConfig+0x144>
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d002      	beq.n	8009dfa <HAL_RCC_OscConfig+0x14a>
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d135      	bne.n	8009e66 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009dfa:	4b78      	ldr	r3, [pc, #480]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	2380      	movs	r3, #128	; 0x80
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	4013      	ands	r3, r2
 8009e04:	d005      	beq.n	8009e12 <HAL_RCC_OscConfig+0x162>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d101      	bne.n	8009e12 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e25c      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e12:	4b72      	ldr	r3, [pc, #456]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	4a74      	ldr	r2, [pc, #464]	; (8009fe8 <HAL_RCC_OscConfig+0x338>)
 8009e18:	4013      	ands	r3, r2
 8009e1a:	0019      	movs	r1, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	695b      	ldr	r3, [r3, #20]
 8009e20:	021a      	lsls	r2, r3, #8
 8009e22:	4b6e      	ldr	r3, [pc, #440]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d112      	bne.n	8009e54 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e2e:	4b6b      	ldr	r3, [pc, #428]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a6e      	ldr	r2, [pc, #440]	; (8009fec <HAL_RCC_OscConfig+0x33c>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	0019      	movs	r1, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	4b67      	ldr	r3, [pc, #412]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009e42:	4b66      	ldr	r3, [pc, #408]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	0adb      	lsrs	r3, r3, #11
 8009e48:	2207      	movs	r2, #7
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	4a68      	ldr	r2, [pc, #416]	; (8009ff0 <HAL_RCC_OscConfig+0x340>)
 8009e4e:	40da      	lsrs	r2, r3
 8009e50:	4b68      	ldr	r3, [pc, #416]	; (8009ff4 <HAL_RCC_OscConfig+0x344>)
 8009e52:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009e54:	4b68      	ldr	r3, [pc, #416]	; (8009ff8 <HAL_RCC_OscConfig+0x348>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f7fd f939 	bl	80070d0 <HAL_InitTick>
 8009e5e:	1e03      	subs	r3, r0, #0
 8009e60:	d051      	beq.n	8009f06 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e232      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d030      	beq.n	8009ed0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009e6e:	4b5b      	ldr	r3, [pc, #364]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a5e      	ldr	r2, [pc, #376]	; (8009fec <HAL_RCC_OscConfig+0x33c>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	0019      	movs	r1, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	691a      	ldr	r2, [r3, #16]
 8009e7c:	4b57      	ldr	r3, [pc, #348]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009e82:	4b56      	ldr	r3, [pc, #344]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4b55      	ldr	r3, [pc, #340]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009e88:	2180      	movs	r1, #128	; 0x80
 8009e8a:	0049      	lsls	r1, r1, #1
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e90:	f7fd f97a 	bl	8007188 <HAL_GetTick>
 8009e94:	0003      	movs	r3, r0
 8009e96:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009e98:	e008      	b.n	8009eac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e9a:	f7fd f975 	bl	8007188 <HAL_GetTick>
 8009e9e:	0002      	movs	r2, r0
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	1ad3      	subs	r3, r2, r3
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d901      	bls.n	8009eac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e20f      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009eac:	4b4b      	ldr	r3, [pc, #300]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	d0f0      	beq.n	8009e9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eb8:	4b48      	ldr	r3, [pc, #288]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4a4a      	ldr	r2, [pc, #296]	; (8009fe8 <HAL_RCC_OscConfig+0x338>)
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	0019      	movs	r1, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	021a      	lsls	r2, r3, #8
 8009ec8:	4b44      	ldr	r3, [pc, #272]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
 8009ece:	e01b      	b.n	8009f08 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009ed0:	4b42      	ldr	r3, [pc, #264]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b41      	ldr	r3, [pc, #260]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009ed6:	4949      	ldr	r1, [pc, #292]	; (8009ffc <HAL_RCC_OscConfig+0x34c>)
 8009ed8:	400a      	ands	r2, r1
 8009eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009edc:	f7fd f954 	bl	8007188 <HAL_GetTick>
 8009ee0:	0003      	movs	r3, r0
 8009ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ee4:	e008      	b.n	8009ef8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ee6:	f7fd f94f 	bl	8007188 <HAL_GetTick>
 8009eea:	0002      	movs	r2, r0
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d901      	bls.n	8009ef8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	e1e9      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ef8:	4b38      	ldr	r3, [pc, #224]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	2380      	movs	r3, #128	; 0x80
 8009efe:	00db      	lsls	r3, r3, #3
 8009f00:	4013      	ands	r3, r2
 8009f02:	d1f0      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x236>
 8009f04:	e000      	b.n	8009f08 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2208      	movs	r2, #8
 8009f0e:	4013      	ands	r3, r2
 8009f10:	d047      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009f12:	4b32      	ldr	r3, [pc, #200]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	2238      	movs	r2, #56	; 0x38
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2b18      	cmp	r3, #24
 8009f1c:	d10a      	bne.n	8009f34 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009f1e:	4b2f      	ldr	r3, [pc, #188]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f22:	2202      	movs	r2, #2
 8009f24:	4013      	ands	r3, r2
 8009f26:	d03c      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d138      	bne.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e1cb      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d019      	beq.n	8009f70 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009f3c:	4b27      	ldr	r3, [pc, #156]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f40:	4b26      	ldr	r3, [pc, #152]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f42:	2101      	movs	r1, #1
 8009f44:	430a      	orrs	r2, r1
 8009f46:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f48:	f7fd f91e 	bl	8007188 <HAL_GetTick>
 8009f4c:	0003      	movs	r3, r0
 8009f4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f52:	f7fd f919 	bl	8007188 <HAL_GetTick>
 8009f56:	0002      	movs	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e1b3      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009f64:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f68:	2202      	movs	r2, #2
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	d0f1      	beq.n	8009f52 <HAL_RCC_OscConfig+0x2a2>
 8009f6e:	e018      	b.n	8009fa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009f70:	4b1a      	ldr	r3, [pc, #104]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f74:	4b19      	ldr	r3, [pc, #100]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f76:	2101      	movs	r1, #1
 8009f78:	438a      	bics	r2, r1
 8009f7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f7c:	f7fd f904 	bl	8007188 <HAL_GetTick>
 8009f80:	0003      	movs	r3, r0
 8009f82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f84:	e008      	b.n	8009f98 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f86:	f7fd f8ff 	bl	8007188 <HAL_GetTick>
 8009f8a:	0002      	movs	r2, r0
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d901      	bls.n	8009f98 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e199      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009f98:	4b10      	ldr	r3, [pc, #64]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	d1f1      	bne.n	8009f86 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	4013      	ands	r3, r2
 8009faa:	d100      	bne.n	8009fae <HAL_RCC_OscConfig+0x2fe>
 8009fac:	e0c6      	b.n	800a13c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fae:	231f      	movs	r3, #31
 8009fb0:	18fb      	adds	r3, r7, r3
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2238      	movs	r2, #56	; 0x38
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	2b20      	cmp	r3, #32
 8009fc0:	d11e      	bne.n	800a000 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <HAL_RCC_OscConfig+0x32c>)
 8009fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	4013      	ands	r3, r2
 8009fca:	d100      	bne.n	8009fce <HAL_RCC_OscConfig+0x31e>
 8009fcc:	e0b6      	b.n	800a13c <HAL_RCC_OscConfig+0x48c>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d000      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x328>
 8009fd6:	e0b1      	b.n	800a13c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e177      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
 8009fdc:	40021000 	.word	0x40021000
 8009fe0:	fffeffff 	.word	0xfffeffff
 8009fe4:	fffbffff 	.word	0xfffbffff
 8009fe8:	ffff80ff 	.word	0xffff80ff
 8009fec:	ffffc7ff 	.word	0xffffc7ff
 8009ff0:	00f42400 	.word	0x00f42400
 8009ff4:	20000068 	.word	0x20000068
 8009ff8:	2000006c 	.word	0x2000006c
 8009ffc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a000:	4bb4      	ldr	r3, [pc, #720]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a004:	2380      	movs	r3, #128	; 0x80
 800a006:	055b      	lsls	r3, r3, #21
 800a008:	4013      	ands	r3, r2
 800a00a:	d101      	bne.n	800a010 <HAL_RCC_OscConfig+0x360>
 800a00c:	2301      	movs	r3, #1
 800a00e:	e000      	b.n	800a012 <HAL_RCC_OscConfig+0x362>
 800a010:	2300      	movs	r3, #0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d011      	beq.n	800a03a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800a016:	4baf      	ldr	r3, [pc, #700]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a01a:	4bae      	ldr	r3, [pc, #696]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a01c:	2180      	movs	r1, #128	; 0x80
 800a01e:	0549      	lsls	r1, r1, #21
 800a020:	430a      	orrs	r2, r1
 800a022:	63da      	str	r2, [r3, #60]	; 0x3c
 800a024:	4bab      	ldr	r3, [pc, #684]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a028:	2380      	movs	r3, #128	; 0x80
 800a02a:	055b      	lsls	r3, r3, #21
 800a02c:	4013      	ands	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800a032:	231f      	movs	r3, #31
 800a034:	18fb      	adds	r3, r7, r3
 800a036:	2201      	movs	r2, #1
 800a038:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a03a:	4ba7      	ldr	r3, [pc, #668]	; (800a2d8 <HAL_RCC_OscConfig+0x628>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	2380      	movs	r3, #128	; 0x80
 800a040:	005b      	lsls	r3, r3, #1
 800a042:	4013      	ands	r3, r2
 800a044:	d11a      	bne.n	800a07c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a046:	4ba4      	ldr	r3, [pc, #656]	; (800a2d8 <HAL_RCC_OscConfig+0x628>)
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4ba3      	ldr	r3, [pc, #652]	; (800a2d8 <HAL_RCC_OscConfig+0x628>)
 800a04c:	2180      	movs	r1, #128	; 0x80
 800a04e:	0049      	lsls	r1, r1, #1
 800a050:	430a      	orrs	r2, r1
 800a052:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800a054:	f7fd f898 	bl	8007188 <HAL_GetTick>
 800a058:	0003      	movs	r3, r0
 800a05a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a05c:	e008      	b.n	800a070 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a05e:	f7fd f893 	bl	8007188 <HAL_GetTick>
 800a062:	0002      	movs	r2, r0
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	1ad3      	subs	r3, r2, r3
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d901      	bls.n	800a070 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e12d      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a070:	4b99      	ldr	r3, [pc, #612]	; (800a2d8 <HAL_RCC_OscConfig+0x628>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	2380      	movs	r3, #128	; 0x80
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	4013      	ands	r3, r2
 800a07a:	d0f0      	beq.n	800a05e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d106      	bne.n	800a092 <HAL_RCC_OscConfig+0x3e2>
 800a084:	4b93      	ldr	r3, [pc, #588]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a088:	4b92      	ldr	r3, [pc, #584]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a08a:	2101      	movs	r1, #1
 800a08c:	430a      	orrs	r2, r1
 800a08e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a090:	e01c      	b.n	800a0cc <HAL_RCC_OscConfig+0x41c>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	2b05      	cmp	r3, #5
 800a098:	d10c      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x404>
 800a09a:	4b8e      	ldr	r3, [pc, #568]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a09c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a09e:	4b8d      	ldr	r3, [pc, #564]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0a0:	2104      	movs	r1, #4
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0a6:	4b8b      	ldr	r3, [pc, #556]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0aa:	4b8a      	ldr	r3, [pc, #552]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0b2:	e00b      	b.n	800a0cc <HAL_RCC_OscConfig+0x41c>
 800a0b4:	4b87      	ldr	r3, [pc, #540]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0b8:	4b86      	ldr	r3, [pc, #536]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	438a      	bics	r2, r1
 800a0be:	65da      	str	r2, [r3, #92]	; 0x5c
 800a0c0:	4b84      	ldr	r3, [pc, #528]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0c4:	4b83      	ldr	r3, [pc, #524]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0c6:	2104      	movs	r1, #4
 800a0c8:	438a      	bics	r2, r1
 800a0ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d014      	beq.n	800a0fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0d4:	f7fd f858 	bl	8007188 <HAL_GetTick>
 800a0d8:	0003      	movs	r3, r0
 800a0da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0dc:	e009      	b.n	800a0f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0de:	f7fd f853 	bl	8007188 <HAL_GetTick>
 800a0e2:	0002      	movs	r2, r0
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	4a7c      	ldr	r2, [pc, #496]	; (800a2dc <HAL_RCC_OscConfig+0x62c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e0ec      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0f2:	4b78      	ldr	r3, [pc, #480]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	d0f0      	beq.n	800a0de <HAL_RCC_OscConfig+0x42e>
 800a0fc:	e013      	b.n	800a126 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0fe:	f7fd f843 	bl	8007188 <HAL_GetTick>
 800a102:	0003      	movs	r3, r0
 800a104:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a106:	e009      	b.n	800a11c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a108:	f7fd f83e 	bl	8007188 <HAL_GetTick>
 800a10c:	0002      	movs	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	4a72      	ldr	r2, [pc, #456]	; (800a2dc <HAL_RCC_OscConfig+0x62c>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d901      	bls.n	800a11c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e0d7      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a11c:	4b6d      	ldr	r3, [pc, #436]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a11e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a120:	2202      	movs	r2, #2
 800a122:	4013      	ands	r3, r2
 800a124:	d1f0      	bne.n	800a108 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800a126:	231f      	movs	r3, #31
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d105      	bne.n	800a13c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800a130:	4b68      	ldr	r3, [pc, #416]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a134:	4b67      	ldr	r3, [pc, #412]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a136:	496a      	ldr	r1, [pc, #424]	; (800a2e0 <HAL_RCC_OscConfig+0x630>)
 800a138:	400a      	ands	r2, r1
 800a13a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d100      	bne.n	800a146 <HAL_RCC_OscConfig+0x496>
 800a144:	e0c1      	b.n	800a2ca <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a146:	4b63      	ldr	r3, [pc, #396]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	2238      	movs	r2, #56	; 0x38
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b10      	cmp	r3, #16
 800a150:	d100      	bne.n	800a154 <HAL_RCC_OscConfig+0x4a4>
 800a152:	e081      	b.n	800a258 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d156      	bne.n	800a20a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a15c:	4b5d      	ldr	r3, [pc, #372]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	4b5c      	ldr	r3, [pc, #368]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a162:	4960      	ldr	r1, [pc, #384]	; (800a2e4 <HAL_RCC_OscConfig+0x634>)
 800a164:	400a      	ands	r2, r1
 800a166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a168:	f7fd f80e 	bl	8007188 <HAL_GetTick>
 800a16c:	0003      	movs	r3, r0
 800a16e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a170:	e008      	b.n	800a184 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a172:	f7fd f809 	bl	8007188 <HAL_GetTick>
 800a176:	0002      	movs	r2, r0
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d901      	bls.n	800a184 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e0a3      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a184:	4b53      	ldr	r3, [pc, #332]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	049b      	lsls	r3, r3, #18
 800a18c:	4013      	ands	r3, r2
 800a18e:	d1f0      	bne.n	800a172 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a190:	4b50      	ldr	r3, [pc, #320]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	4a54      	ldr	r2, [pc, #336]	; (800a2e8 <HAL_RCC_OscConfig+0x638>)
 800a196:	4013      	ands	r3, r2
 800a198:	0019      	movs	r1, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1a      	ldr	r2, [r3, #32]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	4b45      	ldr	r3, [pc, #276]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1c4:	4b43      	ldr	r3, [pc, #268]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b42      	ldr	r3, [pc, #264]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a1ca:	2180      	movs	r1, #128	; 0x80
 800a1cc:	0449      	lsls	r1, r1, #17
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800a1d2:	4b40      	ldr	r3, [pc, #256]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	4b3f      	ldr	r3, [pc, #252]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a1d8:	2180      	movs	r1, #128	; 0x80
 800a1da:	0549      	lsls	r1, r1, #21
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e0:	f7fc ffd2 	bl	8007188 <HAL_GetTick>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1e8:	e008      	b.n	800a1fc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ea:	f7fc ffcd 	bl	8007188 <HAL_GetTick>
 800a1ee:	0002      	movs	r2, r0
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d901      	bls.n	800a1fc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e067      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a1fc:	4b35      	ldr	r3, [pc, #212]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	2380      	movs	r3, #128	; 0x80
 800a202:	049b      	lsls	r3, r3, #18
 800a204:	4013      	ands	r3, r2
 800a206:	d0f0      	beq.n	800a1ea <HAL_RCC_OscConfig+0x53a>
 800a208:	e05f      	b.n	800a2ca <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a20a:	4b32      	ldr	r3, [pc, #200]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b31      	ldr	r3, [pc, #196]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a210:	4934      	ldr	r1, [pc, #208]	; (800a2e4 <HAL_RCC_OscConfig+0x634>)
 800a212:	400a      	ands	r2, r1
 800a214:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800a216:	4b2f      	ldr	r3, [pc, #188]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	4b2e      	ldr	r3, [pc, #184]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a21c:	2103      	movs	r1, #3
 800a21e:	438a      	bics	r2, r1
 800a220:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800a222:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a224:	68da      	ldr	r2, [r3, #12]
 800a226:	4b2b      	ldr	r3, [pc, #172]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a228:	4930      	ldr	r1, [pc, #192]	; (800a2ec <HAL_RCC_OscConfig+0x63c>)
 800a22a:	400a      	ands	r2, r1
 800a22c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a22e:	f7fc ffab 	bl	8007188 <HAL_GetTick>
 800a232:	0003      	movs	r3, r0
 800a234:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a236:	e008      	b.n	800a24a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a238:	f7fc ffa6 	bl	8007188 <HAL_GetTick>
 800a23c:	0002      	movs	r2, r0
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	2b02      	cmp	r3, #2
 800a244:	d901      	bls.n	800a24a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	e040      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a24a:	4b22      	ldr	r3, [pc, #136]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	2380      	movs	r3, #128	; 0x80
 800a250:	049b      	lsls	r3, r3, #18
 800a252:	4013      	ands	r3, r2
 800a254:	d1f0      	bne.n	800a238 <HAL_RCC_OscConfig+0x588>
 800a256:	e038      	b.n	800a2ca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	69db      	ldr	r3, [r3, #28]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e033      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800a264:	4b1b      	ldr	r3, [pc, #108]	; (800a2d4 <HAL_RCC_OscConfig+0x624>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	2203      	movs	r2, #3
 800a26e:	401a      	ands	r2, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	429a      	cmp	r2, r3
 800a276:	d126      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2270      	movs	r2, #112	; 0x70
 800a27c:	401a      	ands	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a282:	429a      	cmp	r2, r3
 800a284:	d11f      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	23fe      	movs	r3, #254	; 0xfe
 800a28a:	01db      	lsls	r3, r3, #7
 800a28c:	401a      	ands	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a292:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a294:	429a      	cmp	r2, r3
 800a296:	d116      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	23f8      	movs	r3, #248	; 0xf8
 800a29c:	039b      	lsls	r3, r3, #14
 800a29e:	401a      	ands	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d10e      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	23e0      	movs	r3, #224	; 0xe0
 800a2ac:	051b      	lsls	r3, r3, #20
 800a2ae:	401a      	ands	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d106      	bne.n	800a2c6 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	0f5b      	lsrs	r3, r3, #29
 800a2bc:	075a      	lsls	r2, r3, #29
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d001      	beq.n	800a2ca <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e000      	b.n	800a2cc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	b008      	add	sp, #32
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	40021000 	.word	0x40021000
 800a2d8:	40007000 	.word	0x40007000
 800a2dc:	00001388 	.word	0x00001388
 800a2e0:	efffffff 	.word	0xefffffff
 800a2e4:	feffffff 	.word	0xfeffffff
 800a2e8:	11c1808c 	.word	0x11c1808c
 800a2ec:	eefeffff 	.word	0xeefeffff

0800a2f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	e0e9      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a304:	4b76      	ldr	r3, [pc, #472]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2207      	movs	r2, #7
 800a30a:	4013      	ands	r3, r2
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d91e      	bls.n	800a350 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a312:	4b73      	ldr	r3, [pc, #460]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2207      	movs	r2, #7
 800a318:	4393      	bics	r3, r2
 800a31a:	0019      	movs	r1, r3
 800a31c:	4b70      	ldr	r3, [pc, #448]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a324:	f7fc ff30 	bl	8007188 <HAL_GetTick>
 800a328:	0003      	movs	r3, r0
 800a32a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a32c:	e009      	b.n	800a342 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a32e:	f7fc ff2b 	bl	8007188 <HAL_GetTick>
 800a332:	0002      	movs	r2, r0
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	1ad3      	subs	r3, r2, r3
 800a338:	4a6a      	ldr	r2, [pc, #424]	; (800a4e4 <HAL_RCC_ClockConfig+0x1f4>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d901      	bls.n	800a342 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e0ca      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a342:	4b67      	ldr	r3, [pc, #412]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2207      	movs	r2, #7
 800a348:	4013      	ands	r3, r2
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d1ee      	bne.n	800a32e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2202      	movs	r2, #2
 800a356:	4013      	ands	r3, r2
 800a358:	d015      	beq.n	800a386 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2204      	movs	r2, #4
 800a360:	4013      	ands	r3, r2
 800a362:	d006      	beq.n	800a372 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a364:	4b60      	ldr	r3, [pc, #384]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	4b5f      	ldr	r3, [pc, #380]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a36a:	21e0      	movs	r1, #224	; 0xe0
 800a36c:	01c9      	lsls	r1, r1, #7
 800a36e:	430a      	orrs	r2, r1
 800a370:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a372:	4b5d      	ldr	r3, [pc, #372]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	4a5d      	ldr	r2, [pc, #372]	; (800a4ec <HAL_RCC_ClockConfig+0x1fc>)
 800a378:	4013      	ands	r3, r2
 800a37a:	0019      	movs	r1, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	4b59      	ldr	r3, [pc, #356]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a382:	430a      	orrs	r2, r1
 800a384:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2201      	movs	r2, #1
 800a38c:	4013      	ands	r3, r2
 800a38e:	d057      	beq.n	800a440 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d107      	bne.n	800a3a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a398:	4b53      	ldr	r3, [pc, #332]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	2380      	movs	r3, #128	; 0x80
 800a39e:	029b      	lsls	r3, r3, #10
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	d12b      	bne.n	800a3fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e097      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d107      	bne.n	800a3c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3b0:	4b4d      	ldr	r3, [pc, #308]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a3b2:	681a      	ldr	r2, [r3, #0]
 800a3b4:	2380      	movs	r3, #128	; 0x80
 800a3b6:	049b      	lsls	r3, r3, #18
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	d11f      	bne.n	800a3fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e08b      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d107      	bne.n	800a3d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a3c8:	4b47      	ldr	r3, [pc, #284]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	d113      	bne.n	800a3fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e07f      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	2b03      	cmp	r3, #3
 800a3de:	d106      	bne.n	800a3ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3e0:	4b41      	ldr	r3, [pc, #260]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a3e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	d108      	bne.n	800a3fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e074      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3ee:	4b3e      	ldr	r3, [pc, #248]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a3f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	d101      	bne.n	800a3fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e06d      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3fc:	4b3a      	ldr	r3, [pc, #232]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	2207      	movs	r2, #7
 800a402:	4393      	bics	r3, r2
 800a404:	0019      	movs	r1, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	4b37      	ldr	r3, [pc, #220]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a40c:	430a      	orrs	r2, r1
 800a40e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a410:	f7fc feba 	bl	8007188 <HAL_GetTick>
 800a414:	0003      	movs	r3, r0
 800a416:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a418:	e009      	b.n	800a42e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a41a:	f7fc feb5 	bl	8007188 <HAL_GetTick>
 800a41e:	0002      	movs	r2, r0
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	4a2f      	ldr	r2, [pc, #188]	; (800a4e4 <HAL_RCC_ClockConfig+0x1f4>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d901      	bls.n	800a42e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e054      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a42e:	4b2e      	ldr	r3, [pc, #184]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	2238      	movs	r2, #56	; 0x38
 800a434:	401a      	ands	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d1ec      	bne.n	800a41a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a440:	4b27      	ldr	r3, [pc, #156]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2207      	movs	r2, #7
 800a446:	4013      	ands	r3, r2
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d21e      	bcs.n	800a48c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a44e:	4b24      	ldr	r3, [pc, #144]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2207      	movs	r2, #7
 800a454:	4393      	bics	r3, r2
 800a456:	0019      	movs	r1, r3
 800a458:	4b21      	ldr	r3, [pc, #132]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a460:	f7fc fe92 	bl	8007188 <HAL_GetTick>
 800a464:	0003      	movs	r3, r0
 800a466:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a468:	e009      	b.n	800a47e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a46a:	f7fc fe8d 	bl	8007188 <HAL_GetTick>
 800a46e:	0002      	movs	r2, r0
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	4a1b      	ldr	r2, [pc, #108]	; (800a4e4 <HAL_RCC_ClockConfig+0x1f4>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e02c      	b.n	800a4d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a47e:	4b18      	ldr	r3, [pc, #96]	; (800a4e0 <HAL_RCC_ClockConfig+0x1f0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2207      	movs	r2, #7
 800a484:	4013      	ands	r3, r2
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d1ee      	bne.n	800a46a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2204      	movs	r2, #4
 800a492:	4013      	ands	r3, r2
 800a494:	d009      	beq.n	800a4aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a496:	4b14      	ldr	r3, [pc, #80]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <HAL_RCC_ClockConfig+0x200>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	0019      	movs	r1, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68da      	ldr	r2, [r3, #12]
 800a4a4:	4b10      	ldr	r3, [pc, #64]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a4aa:	f000 f829 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800a4ae:	0001      	movs	r1, r0
 800a4b0:	4b0d      	ldr	r3, [pc, #52]	; (800a4e8 <HAL_RCC_ClockConfig+0x1f8>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	0a1b      	lsrs	r3, r3, #8
 800a4b6:	220f      	movs	r2, #15
 800a4b8:	401a      	ands	r2, r3
 800a4ba:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <HAL_RCC_ClockConfig+0x204>)
 800a4bc:	0092      	lsls	r2, r2, #2
 800a4be:	58d3      	ldr	r3, [r2, r3]
 800a4c0:	221f      	movs	r2, #31
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	000a      	movs	r2, r1
 800a4c6:	40da      	lsrs	r2, r3
 800a4c8:	4b0b      	ldr	r3, [pc, #44]	; (800a4f8 <HAL_RCC_ClockConfig+0x208>)
 800a4ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a4cc:	4b0b      	ldr	r3, [pc, #44]	; (800a4fc <HAL_RCC_ClockConfig+0x20c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f7fc fdfd 	bl	80070d0 <HAL_InitTick>
 800a4d6:	0003      	movs	r3, r0
}
 800a4d8:	0018      	movs	r0, r3
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b004      	add	sp, #16
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	40022000 	.word	0x40022000
 800a4e4:	00001388 	.word	0x00001388
 800a4e8:	40021000 	.word	0x40021000
 800a4ec:	fffff0ff 	.word	0xfffff0ff
 800a4f0:	ffff8fff 	.word	0xffff8fff
 800a4f4:	0801b22c 	.word	0x0801b22c
 800a4f8:	20000068 	.word	0x20000068
 800a4fc:	2000006c 	.word	0x2000006c

0800a500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a506:	4b3c      	ldr	r3, [pc, #240]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	2238      	movs	r2, #56	; 0x38
 800a50c:	4013      	ands	r3, r2
 800a50e:	d10f      	bne.n	800a530 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a510:	4b39      	ldr	r3, [pc, #228]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	0adb      	lsrs	r3, r3, #11
 800a516:	2207      	movs	r2, #7
 800a518:	4013      	ands	r3, r2
 800a51a:	2201      	movs	r2, #1
 800a51c:	409a      	lsls	r2, r3
 800a51e:	0013      	movs	r3, r2
 800a520:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	4835      	ldr	r0, [pc, #212]	; (800a5fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800a526:	f7f5 fded 	bl	8000104 <__udivsi3>
 800a52a:	0003      	movs	r3, r0
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	e05d      	b.n	800a5ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a530:	4b31      	ldr	r3, [pc, #196]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2238      	movs	r2, #56	; 0x38
 800a536:	4013      	ands	r3, r2
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d102      	bne.n	800a542 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a53c:	4b30      	ldr	r3, [pc, #192]	; (800a600 <HAL_RCC_GetSysClockFreq+0x100>)
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	e054      	b.n	800a5ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a542:	4b2d      	ldr	r3, [pc, #180]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	2238      	movs	r2, #56	; 0x38
 800a548:	4013      	ands	r3, r2
 800a54a:	2b10      	cmp	r3, #16
 800a54c:	d138      	bne.n	800a5c0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a54e:	4b2a      	ldr	r3, [pc, #168]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	2203      	movs	r2, #3
 800a554:	4013      	ands	r3, r2
 800a556:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a558:	4b27      	ldr	r3, [pc, #156]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	091b      	lsrs	r3, r3, #4
 800a55e:	2207      	movs	r2, #7
 800a560:	4013      	ands	r3, r2
 800a562:	3301      	adds	r3, #1
 800a564:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d10d      	bne.n	800a588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	4824      	ldr	r0, [pc, #144]	; (800a600 <HAL_RCC_GetSysClockFreq+0x100>)
 800a570:	f7f5 fdc8 	bl	8000104 <__udivsi3>
 800a574:	0003      	movs	r3, r0
 800a576:	0019      	movs	r1, r3
 800a578:	4b1f      	ldr	r3, [pc, #124]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	0a1b      	lsrs	r3, r3, #8
 800a57e:	227f      	movs	r2, #127	; 0x7f
 800a580:	4013      	ands	r3, r2
 800a582:	434b      	muls	r3, r1
 800a584:	617b      	str	r3, [r7, #20]
        break;
 800a586:	e00d      	b.n	800a5a4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a588:	68b9      	ldr	r1, [r7, #8]
 800a58a:	481c      	ldr	r0, [pc, #112]	; (800a5fc <HAL_RCC_GetSysClockFreq+0xfc>)
 800a58c:	f7f5 fdba 	bl	8000104 <__udivsi3>
 800a590:	0003      	movs	r3, r0
 800a592:	0019      	movs	r1, r3
 800a594:	4b18      	ldr	r3, [pc, #96]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	0a1b      	lsrs	r3, r3, #8
 800a59a:	227f      	movs	r2, #127	; 0x7f
 800a59c:	4013      	ands	r3, r2
 800a59e:	434b      	muls	r3, r1
 800a5a0:	617b      	str	r3, [r7, #20]
        break;
 800a5a2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a5a4:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	0f5b      	lsrs	r3, r3, #29
 800a5aa:	2207      	movs	r2, #7
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	6978      	ldr	r0, [r7, #20]
 800a5b6:	f7f5 fda5 	bl	8000104 <__udivsi3>
 800a5ba:	0003      	movs	r3, r0
 800a5bc:	613b      	str	r3, [r7, #16]
 800a5be:	e015      	b.n	800a5ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a5c0:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	2238      	movs	r2, #56	; 0x38
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	2b20      	cmp	r3, #32
 800a5ca:	d103      	bne.n	800a5d4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a5cc:	2380      	movs	r3, #128	; 0x80
 800a5ce:	021b      	lsls	r3, r3, #8
 800a5d0:	613b      	str	r3, [r7, #16]
 800a5d2:	e00b      	b.n	800a5ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a5d4:	4b08      	ldr	r3, [pc, #32]	; (800a5f8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	2238      	movs	r2, #56	; 0x38
 800a5da:	4013      	ands	r3, r2
 800a5dc:	2b18      	cmp	r3, #24
 800a5de:	d103      	bne.n	800a5e8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a5e0:	23fa      	movs	r3, #250	; 0xfa
 800a5e2:	01db      	lsls	r3, r3, #7
 800a5e4:	613b      	str	r3, [r7, #16]
 800a5e6:	e001      	b.n	800a5ec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a5ec:	693b      	ldr	r3, [r7, #16]
}
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	b006      	add	sp, #24
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	40021000 	.word	0x40021000
 800a5fc:	00f42400 	.word	0x00f42400
 800a600:	007a1200 	.word	0x007a1200

0800a604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <HAL_RCC_GetHCLKFreq+0x10>)
 800a60a:	681b      	ldr	r3, [r3, #0]
}
 800a60c:	0018      	movs	r0, r3
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	46c0      	nop			; (mov r8, r8)
 800a614:	20000068 	.word	0x20000068

0800a618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a618:	b5b0      	push	{r4, r5, r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a61c:	f7ff fff2 	bl	800a604 <HAL_RCC_GetHCLKFreq>
 800a620:	0004      	movs	r4, r0
 800a622:	f7ff fb39 	bl	8009c98 <LL_RCC_GetAPB1Prescaler>
 800a626:	0003      	movs	r3, r0
 800a628:	0b1a      	lsrs	r2, r3, #12
 800a62a:	4b05      	ldr	r3, [pc, #20]	; (800a640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a62c:	0092      	lsls	r2, r2, #2
 800a62e:	58d3      	ldr	r3, [r2, r3]
 800a630:	221f      	movs	r2, #31
 800a632:	4013      	ands	r3, r2
 800a634:	40dc      	lsrs	r4, r3
 800a636:	0023      	movs	r3, r4
}
 800a638:	0018      	movs	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bdb0      	pop	{r4, r5, r7, pc}
 800a63e:	46c0      	nop			; (mov r8, r8)
 800a640:	0801b26c 	.word	0x0801b26c

0800a644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a64c:	2313      	movs	r3, #19
 800a64e:	18fb      	adds	r3, r7, r3
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a654:	2312      	movs	r3, #18
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	029b      	lsls	r3, r3, #10
 800a664:	4013      	ands	r3, r2
 800a666:	d100      	bne.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a668:	e0a3      	b.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a66a:	2011      	movs	r0, #17
 800a66c:	183b      	adds	r3, r7, r0
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a672:	4bc3      	ldr	r3, [pc, #780]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a674:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a676:	2380      	movs	r3, #128	; 0x80
 800a678:	055b      	lsls	r3, r3, #21
 800a67a:	4013      	ands	r3, r2
 800a67c:	d110      	bne.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a67e:	4bc0      	ldr	r3, [pc, #768]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a682:	4bbf      	ldr	r3, [pc, #764]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a684:	2180      	movs	r1, #128	; 0x80
 800a686:	0549      	lsls	r1, r1, #21
 800a688:	430a      	orrs	r2, r1
 800a68a:	63da      	str	r2, [r3, #60]	; 0x3c
 800a68c:	4bbc      	ldr	r3, [pc, #752]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a68e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a690:	2380      	movs	r3, #128	; 0x80
 800a692:	055b      	lsls	r3, r3, #21
 800a694:	4013      	ands	r3, r2
 800a696:	60bb      	str	r3, [r7, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a69a:	183b      	adds	r3, r7, r0
 800a69c:	2201      	movs	r2, #1
 800a69e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a6a0:	4bb8      	ldr	r3, [pc, #736]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	4bb7      	ldr	r3, [pc, #732]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a6a6:	2180      	movs	r1, #128	; 0x80
 800a6a8:	0049      	lsls	r1, r1, #1
 800a6aa:	430a      	orrs	r2, r1
 800a6ac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a6ae:	f7fc fd6b 	bl	8007188 <HAL_GetTick>
 800a6b2:	0003      	movs	r3, r0
 800a6b4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6b6:	e00b      	b.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6b8:	f7fc fd66 	bl	8007188 <HAL_GetTick>
 800a6bc:	0002      	movs	r2, r0
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d904      	bls.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a6c6:	2313      	movs	r3, #19
 800a6c8:	18fb      	adds	r3, r7, r3
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	701a      	strb	r2, [r3, #0]
        break;
 800a6ce:	e005      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6d0:	4bac      	ldr	r3, [pc, #688]	; (800a984 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	4013      	ands	r3, r2
 800a6da:	d0ed      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a6dc:	2313      	movs	r3, #19
 800a6de:	18fb      	adds	r3, r7, r3
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d154      	bne.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a6e6:	4ba6      	ldr	r3, [pc, #664]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a6e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6ea:	23c0      	movs	r3, #192	; 0xc0
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d019      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d014      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a702:	4b9f      	ldr	r3, [pc, #636]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a706:	4aa0      	ldr	r2, [pc, #640]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a708:	4013      	ands	r3, r2
 800a70a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a70c:	4b9c      	ldr	r3, [pc, #624]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a70e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a710:	4b9b      	ldr	r3, [pc, #620]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a712:	2180      	movs	r1, #128	; 0x80
 800a714:	0249      	lsls	r1, r1, #9
 800a716:	430a      	orrs	r2, r1
 800a718:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a71a:	4b99      	ldr	r3, [pc, #612]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a71c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a71e:	4b98      	ldr	r3, [pc, #608]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a720:	499a      	ldr	r1, [pc, #616]	; (800a98c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800a722:	400a      	ands	r2, r1
 800a724:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a726:	4b96      	ldr	r3, [pc, #600]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	2201      	movs	r2, #1
 800a730:	4013      	ands	r3, r2
 800a732:	d016      	beq.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a734:	f7fc fd28 	bl	8007188 <HAL_GetTick>
 800a738:	0003      	movs	r3, r0
 800a73a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a73c:	e00c      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a73e:	f7fc fd23 	bl	8007188 <HAL_GetTick>
 800a742:	0002      	movs	r2, r0
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	4a91      	ldr	r2, [pc, #580]	; (800a990 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d904      	bls.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a74e:	2313      	movs	r3, #19
 800a750:	18fb      	adds	r3, r7, r3
 800a752:	2203      	movs	r2, #3
 800a754:	701a      	strb	r2, [r3, #0]
            break;
 800a756:	e004      	b.n	800a762 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a758:	4b89      	ldr	r3, [pc, #548]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a75a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a75c:	2202      	movs	r2, #2
 800a75e:	4013      	ands	r3, r2
 800a760:	d0ed      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a762:	2313      	movs	r3, #19
 800a764:	18fb      	adds	r3, r7, r3
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a76c:	4b84      	ldr	r3, [pc, #528]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a770:	4a85      	ldr	r2, [pc, #532]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800a772:	4013      	ands	r3, r2
 800a774:	0019      	movs	r1, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a77a:	4b81      	ldr	r3, [pc, #516]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a77c:	430a      	orrs	r2, r1
 800a77e:	65da      	str	r2, [r3, #92]	; 0x5c
 800a780:	e00c      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a782:	2312      	movs	r3, #18
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	2213      	movs	r2, #19
 800a788:	18ba      	adds	r2, r7, r2
 800a78a:	7812      	ldrb	r2, [r2, #0]
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e005      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a790:	2312      	movs	r3, #18
 800a792:	18fb      	adds	r3, r7, r3
 800a794:	2213      	movs	r2, #19
 800a796:	18ba      	adds	r2, r7, r2
 800a798:	7812      	ldrb	r2, [r2, #0]
 800a79a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a79c:	2311      	movs	r3, #17
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d105      	bne.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7a6:	4b76      	ldr	r3, [pc, #472]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7aa:	4b75      	ldr	r3, [pc, #468]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7ac:	4979      	ldr	r1, [pc, #484]	; (800a994 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800a7ae:	400a      	ands	r2, r1
 800a7b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4013      	ands	r3, r2
 800a7ba:	d009      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a7bc:	4b70      	ldr	r3, [pc, #448]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c0:	2203      	movs	r2, #3
 800a7c2:	4393      	bics	r3, r2
 800a7c4:	0019      	movs	r1, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	4b6d      	ldr	r3, [pc, #436]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2202      	movs	r2, #2
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	d009      	beq.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a7da:	4b69      	ldr	r3, [pc, #420]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	220c      	movs	r2, #12
 800a7e0:	4393      	bics	r3, r2
 800a7e2:	0019      	movs	r1, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	4b65      	ldr	r3, [pc, #404]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2210      	movs	r2, #16
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	d009      	beq.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7f8:	4b61      	ldr	r3, [pc, #388]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a7fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7fc:	4a66      	ldr	r2, [pc, #408]	; (800a998 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800a7fe:	4013      	ands	r3, r2
 800a800:	0019      	movs	r1, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68da      	ldr	r2, [r3, #12]
 800a806:	4b5e      	ldr	r3, [pc, #376]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a808:	430a      	orrs	r2, r1
 800a80a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	2380      	movs	r3, #128	; 0x80
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4013      	ands	r3, r2
 800a816:	d009      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a818:	4b59      	ldr	r3, [pc, #356]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81c:	4a5f      	ldr	r2, [pc, #380]	; (800a99c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800a81e:	4013      	ands	r3, r2
 800a820:	0019      	movs	r1, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699a      	ldr	r2, [r3, #24]
 800a826:	4b56      	ldr	r3, [pc, #344]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a828:	430a      	orrs	r2, r1
 800a82a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	2380      	movs	r3, #128	; 0x80
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	4013      	ands	r3, r2
 800a836:	d009      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a838:	4b51      	ldr	r3, [pc, #324]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83c:	4a58      	ldr	r2, [pc, #352]	; (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a83e:	4013      	ands	r3, r2
 800a840:	0019      	movs	r1, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	69da      	ldr	r2, [r3, #28]
 800a846:	4b4e      	ldr	r3, [pc, #312]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a848:	430a      	orrs	r2, r1
 800a84a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2220      	movs	r2, #32
 800a852:	4013      	ands	r3, r2
 800a854:	d009      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a856:	4b4a      	ldr	r3, [pc, #296]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a85a:	4a52      	ldr	r2, [pc, #328]	; (800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	0019      	movs	r1, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	4b46      	ldr	r3, [pc, #280]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a866:	430a      	orrs	r2, r1
 800a868:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	2380      	movs	r3, #128	; 0x80
 800a870:	01db      	lsls	r3, r3, #7
 800a872:	4013      	ands	r3, r2
 800a874:	d015      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a876:	4b42      	ldr	r3, [pc, #264]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	0899      	lsrs	r1, r3, #2
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1a      	ldr	r2, [r3, #32]
 800a882:	4b3f      	ldr	r3, [pc, #252]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a884:	430a      	orrs	r2, r1
 800a886:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a1a      	ldr	r2, [r3, #32]
 800a88c:	2380      	movs	r3, #128	; 0x80
 800a88e:	05db      	lsls	r3, r3, #23
 800a890:	429a      	cmp	r2, r3
 800a892:	d106      	bne.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a894:	4b3a      	ldr	r3, [pc, #232]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	4b39      	ldr	r3, [pc, #228]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a89a:	2180      	movs	r1, #128	; 0x80
 800a89c:	0249      	lsls	r1, r1, #9
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	2380      	movs	r3, #128	; 0x80
 800a8a8:	031b      	lsls	r3, r3, #12
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	d009      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8ae:	4b34      	ldr	r3, [pc, #208]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b2:	2240      	movs	r2, #64	; 0x40
 800a8b4:	4393      	bics	r3, r2
 800a8b6:	0019      	movs	r1, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8bc:	4b30      	ldr	r3, [pc, #192]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8be:	430a      	orrs	r2, r1
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	2380      	movs	r3, #128	; 0x80
 800a8c8:	039b      	lsls	r3, r3, #14
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	d016      	beq.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a8ce:	4b2c      	ldr	r3, [pc, #176]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d2:	4a35      	ldr	r2, [pc, #212]	; (800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	0019      	movs	r1, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8dc:	4b28      	ldr	r3, [pc, #160]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8e6:	2380      	movs	r3, #128	; 0x80
 800a8e8:	03db      	lsls	r3, r3, #15
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d106      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a8ee:	4b24      	ldr	r3, [pc, #144]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8f0:	68da      	ldr	r2, [r3, #12]
 800a8f2:	4b23      	ldr	r3, [pc, #140]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a8f4:	2180      	movs	r1, #128	; 0x80
 800a8f6:	0449      	lsls	r1, r1, #17
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	03db      	lsls	r3, r3, #15
 800a904:	4013      	ands	r3, r2
 800a906:	d016      	beq.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a908:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a90a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a90c:	4a27      	ldr	r2, [pc, #156]	; (800a9ac <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800a90e:	4013      	ands	r3, r2
 800a910:	0019      	movs	r1, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a916:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a918:	430a      	orrs	r2, r1
 800a91a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a920:	2380      	movs	r3, #128	; 0x80
 800a922:	045b      	lsls	r3, r3, #17
 800a924:	429a      	cmp	r2, r3
 800a926:	d106      	bne.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a928:	4b15      	ldr	r3, [pc, #84]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a92a:	68da      	ldr	r2, [r3, #12]
 800a92c:	4b14      	ldr	r3, [pc, #80]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a92e:	2180      	movs	r1, #128	; 0x80
 800a930:	0449      	lsls	r1, r1, #17
 800a932:	430a      	orrs	r2, r1
 800a934:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	2380      	movs	r3, #128	; 0x80
 800a93c:	011b      	lsls	r3, r3, #4
 800a93e:	4013      	ands	r3, r2
 800a940:	d016      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a942:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	4a1a      	ldr	r2, [pc, #104]	; (800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800a948:	4013      	ands	r3, r2
 800a94a:	0019      	movs	r1, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	695a      	ldr	r2, [r3, #20]
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a952:	430a      	orrs	r2, r1
 800a954:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	695a      	ldr	r2, [r3, #20]
 800a95a:	2380      	movs	r3, #128	; 0x80
 800a95c:	01db      	lsls	r3, r3, #7
 800a95e:	429a      	cmp	r2, r3
 800a960:	d106      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a962:	4b07      	ldr	r3, [pc, #28]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a964:	68da      	ldr	r2, [r3, #12]
 800a966:	4b06      	ldr	r3, [pc, #24]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800a968:	2180      	movs	r1, #128	; 0x80
 800a96a:	0249      	lsls	r1, r1, #9
 800a96c:	430a      	orrs	r2, r1
 800a96e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a970:	2312      	movs	r3, #18
 800a972:	18fb      	adds	r3, r7, r3
 800a974:	781b      	ldrb	r3, [r3, #0]
}
 800a976:	0018      	movs	r0, r3
 800a978:	46bd      	mov	sp, r7
 800a97a:	b006      	add	sp, #24
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	46c0      	nop			; (mov r8, r8)
 800a980:	40021000 	.word	0x40021000
 800a984:	40007000 	.word	0x40007000
 800a988:	fffffcff 	.word	0xfffffcff
 800a98c:	fffeffff 	.word	0xfffeffff
 800a990:	00001388 	.word	0x00001388
 800a994:	efffffff 	.word	0xefffffff
 800a998:	fffff3ff 	.word	0xfffff3ff
 800a99c:	fff3ffff 	.word	0xfff3ffff
 800a9a0:	ffcfffff 	.word	0xffcfffff
 800a9a4:	ffffcfff 	.word	0xffffcfff
 800a9a8:	ffbfffff 	.word	0xffbfffff
 800a9ac:	feffffff 	.word	0xfeffffff
 800a9b0:	ffff3fff 	.word	0xffff3fff

0800a9b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b086      	sub	sp, #24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	2380      	movs	r3, #128	; 0x80
 800a9c4:	029b      	lsls	r3, r3, #10
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d136      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a9ca:	4bcd      	ldr	r3, [pc, #820]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800a9cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9ce:	23c0      	movs	r3, #192	; 0xc0
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a9d6:	4bca      	ldr	r3, [pc, #808]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800a9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9da:	2202      	movs	r2, #2
 800a9dc:	4013      	ands	r3, r2
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d108      	bne.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	2380      	movs	r3, #128	; 0x80
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d103      	bne.n	800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 800a9ec:	2380      	movs	r3, #128	; 0x80
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	617b      	str	r3, [r7, #20]
 800a9f2:	e31c      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a9f4:	4bc2      	ldr	r3, [pc, #776]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800a9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	d108      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	2380      	movs	r3, #128	; 0x80
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d103      	bne.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 800aa0a:	23fa      	movs	r3, #250	; 0xfa
 800aa0c:	01db      	lsls	r3, r3, #7
 800aa0e:	617b      	str	r3, [r7, #20]
 800aa10:	e30d      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800aa12:	4bbb      	ldr	r3, [pc, #748]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	2380      	movs	r3, #128	; 0x80
 800aa18:	029b      	lsls	r3, r3, #10
 800aa1a:	401a      	ands	r2, r3
 800aa1c:	2380      	movs	r3, #128	; 0x80
 800aa1e:	029b      	lsls	r3, r3, #10
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d000      	beq.n	800aa26 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800aa24:	e303      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	23c0      	movs	r3, #192	; 0xc0
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d000      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 800aa30:	e2fd      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 800aa32:	4bb4      	ldr	r3, [pc, #720]	; (800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e2fa      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800aa38:	4bb1      	ldr	r3, [pc, #708]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	4013      	ands	r3, r2
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d102      	bne.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800aa44:	4bb0      	ldr	r3, [pc, #704]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	e00a      	b.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800aa4a:	4bad      	ldr	r3, [pc, #692]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	2203      	movs	r2, #3
 800aa50:	4013      	ands	r3, r2
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	d102      	bne.n	800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800aa56:	4bad      	ldr	r3, [pc, #692]	; (800ad0c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800aa58:	613b      	str	r3, [r7, #16]
 800aa5a:	e001      	b.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800aa60:	4ba7      	ldr	r3, [pc, #668]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	091b      	lsrs	r3, r3, #4
 800aa66:	2207      	movs	r2, #7
 800aa68:	4013      	ands	r3, r2
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	0019      	movs	r1, r3
 800aa6e:	6938      	ldr	r0, [r7, #16]
 800aa70:	f7f5 fb48 	bl	8000104 <__udivsi3>
 800aa74:	0003      	movs	r3, r0
 800aa76:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	2380      	movs	r3, #128	; 0x80
 800aa7c:	03db      	lsls	r3, r3, #15
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d100      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800aa82:	e28e      	b.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	2380      	movs	r3, #128	; 0x80
 800aa88:	03db      	lsls	r3, r3, #15
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d900      	bls.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800aa8e:	e2b7      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	2380      	movs	r3, #128	; 0x80
 800aa94:	039b      	lsls	r3, r3, #14
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d100      	bne.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800aa9a:	e253      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	2380      	movs	r3, #128	; 0x80
 800aaa0:	039b      	lsls	r3, r3, #14
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d900      	bls.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800aaa6:	e2ab      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	2380      	movs	r3, #128	; 0x80
 800aaac:	031b      	lsls	r3, r3, #12
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d100      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800aab2:	e0b2      	b.n	800ac1a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	2380      	movs	r3, #128	; 0x80
 800aab8:	031b      	lsls	r3, r3, #12
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d900      	bls.n	800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800aabe:	e29f      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	2380      	movs	r3, #128	; 0x80
 800aac4:	01db      	lsls	r3, r3, #7
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d100      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800aaca:	e103      	b.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	2380      	movs	r3, #128	; 0x80
 800aad0:	01db      	lsls	r3, r3, #7
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d900      	bls.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800aad6:	e293      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	2380      	movs	r3, #128	; 0x80
 800aadc:	011b      	lsls	r3, r3, #4
 800aade:	429a      	cmp	r2, r3
 800aae0:	d100      	bne.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800aae2:	e165      	b.n	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	2380      	movs	r3, #128	; 0x80
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d900      	bls.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800aaee:	e287      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	2380      	movs	r3, #128	; 0x80
 800aaf4:	00db      	lsls	r3, r3, #3
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d100      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 800aafa:	e1e3      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	2380      	movs	r3, #128	; 0x80
 800ab00:	00db      	lsls	r3, r3, #3
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d900      	bls.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800ab06:	e27b      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	2380      	movs	r3, #128	; 0x80
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d100      	bne.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800ab12:	e197      	b.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	2380      	movs	r3, #128	; 0x80
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d900      	bls.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800ab1e:	e26f      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d100      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800ab26:	e118      	b.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b20      	cmp	r3, #32
 800ab2c:	d900      	bls.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 800ab2e:	e267      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b10      	cmp	r3, #16
 800ab34:	d100      	bne.n	800ab38 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800ab36:	e093      	b.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b10      	cmp	r3, #16
 800ab3c:	d900      	bls.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800ab3e:	e25f      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d003      	beq.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d033      	beq.n	800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 800ab4c:	e258      	b.n	800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ab4e:	4b6c      	ldr	r3, [pc, #432]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ab50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab52:	2203      	movs	r2, #3
 800ab54:	4013      	ands	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d104      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ab5e:	f7ff fd5b 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800ab62:	0003      	movs	r3, r0
 800ab64:	617b      	str	r3, [r7, #20]
        break;
 800ab66:	e24d      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d104      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 800ab6e:	f7ff fcc7 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800ab72:	0003      	movs	r3, r0
 800ab74:	617b      	str	r3, [r7, #20]
        break;
 800ab76:	e245      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ab78:	4b61      	ldr	r3, [pc, #388]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	2380      	movs	r3, #128	; 0x80
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	401a      	ands	r2, r3
 800ab82:	2380      	movs	r3, #128	; 0x80
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d105      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d102      	bne.n	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 800ab90:	4b5d      	ldr	r3, [pc, #372]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800ab92:	617b      	str	r3, [r7, #20]
        break;
 800ab94:	e236      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ab96:	4b5a      	ldr	r3, [pc, #360]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ab98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d000      	beq.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800aba2:	e22f      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b03      	cmp	r3, #3
 800aba8:	d000      	beq.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800abaa:	e22b      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 800abac:	2380      	movs	r3, #128	; 0x80
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	617b      	str	r3, [r7, #20]
        break;
 800abb2:	e227      	b.n	800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800abb4:	4b52      	ldr	r3, [pc, #328]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800abb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb8:	220c      	movs	r2, #12
 800abba:	4013      	ands	r3, r2
 800abbc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d104      	bne.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800abc4:	f7ff fd28 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800abc8:	0003      	movs	r3, r0
 800abca:	617b      	str	r3, [r7, #20]
        break;
 800abcc:	e21c      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d104      	bne.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 800abd4:	f7ff fc94 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800abd8:	0003      	movs	r3, r0
 800abda:	617b      	str	r3, [r7, #20]
        break;
 800abdc:	e214      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800abde:	4b48      	ldr	r3, [pc, #288]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	2380      	movs	r3, #128	; 0x80
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	401a      	ands	r2, r3
 800abe8:	2380      	movs	r3, #128	; 0x80
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	429a      	cmp	r2, r3
 800abee:	d105      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b08      	cmp	r3, #8
 800abf4:	d102      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800abf6:	4b44      	ldr	r3, [pc, #272]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800abf8:	617b      	str	r3, [r7, #20]
        break;
 800abfa:	e205      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800abfc:	4b40      	ldr	r3, [pc, #256]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800abfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac00:	2202      	movs	r2, #2
 800ac02:	4013      	ands	r3, r2
 800ac04:	2b02      	cmp	r3, #2
 800ac06:	d000      	beq.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ac08:	e1fe      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b0c      	cmp	r3, #12
 800ac0e:	d000      	beq.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800ac10:	e1fa      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800ac12:	2380      	movs	r3, #128	; 0x80
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	617b      	str	r3, [r7, #20]
        break;
 800ac18:	e1f6      	b.n	800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800ac1a:	4b39      	ldr	r3, [pc, #228]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	4013      	ands	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 800ac24:	4b36      	ldr	r3, [pc, #216]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	2380      	movs	r3, #128	; 0x80
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	401a      	ands	r2, r3
 800ac2e:	2380      	movs	r3, #128	; 0x80
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d105      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d102      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 800ac3c:	4b34      	ldr	r3, [pc, #208]	; (800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 800ac3e:	617b      	str	r3, [r7, #20]
        break;
 800ac40:	e1e4      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800ac42:	4b2f      	ldr	r3, [pc, #188]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac46:	2202      	movs	r2, #2
 800ac48:	4013      	ands	r3, r2
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d000      	beq.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800ac4e:	e1dd      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b40      	cmp	r3, #64	; 0x40
 800ac54:	d000      	beq.n	800ac58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800ac56:	e1d9      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 800ac58:	2380      	movs	r3, #128	; 0x80
 800ac5a:	021b      	lsls	r3, r3, #8
 800ac5c:	617b      	str	r3, [r7, #20]
        break;
 800ac5e:	e1d5      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ac60:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac64:	23c0      	movs	r3, #192	; 0xc0
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	4013      	ands	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d104      	bne.n	800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ac72:	f7ff fcd1 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800ac76:	0003      	movs	r3, r0
 800ac78:	617b      	str	r3, [r7, #20]
        break;
 800ac7a:	e1c9      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	2380      	movs	r3, #128	; 0x80
 800ac80:	00db      	lsls	r3, r3, #3
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d104      	bne.n	800ac90 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800ac86:	f7ff fc3b 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800ac8a:	0003      	movs	r3, r0
 800ac8c:	617b      	str	r3, [r7, #20]
        break;
 800ac8e:	e1bf      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800ac90:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	2380      	movs	r3, #128	; 0x80
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	401a      	ands	r2, r3
 800ac9a:	2380      	movs	r3, #128	; 0x80
 800ac9c:	00db      	lsls	r3, r3, #3
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d107      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	2380      	movs	r3, #128	; 0x80
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d102      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 800acac:	4b16      	ldr	r3, [pc, #88]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800acae:	617b      	str	r3, [r7, #20]
        break;
 800acb0:	e1ae      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800acb2:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800acb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb6:	2202      	movs	r2, #2
 800acb8:	4013      	ands	r3, r2
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d000      	beq.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800acbe:	e1a7      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	23c0      	movs	r3, #192	; 0xc0
 800acc4:	011b      	lsls	r3, r3, #4
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d000      	beq.n	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800acca:	e1a1      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 800accc:	2380      	movs	r3, #128	; 0x80
 800acce:	021b      	lsls	r3, r3, #8
 800acd0:	617b      	str	r3, [r7, #20]
        break;
 800acd2:	e19d      	b.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800acd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acd8:	0f9b      	lsrs	r3, r3, #30
 800acda:	079b      	lsls	r3, r3, #30
 800acdc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d104      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 800ace4:	f7ff fc0c 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800ace8:	0003      	movs	r3, r0
 800acea:	617b      	str	r3, [r7, #20]
        break;
 800acec:	e192      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	2380      	movs	r3, #128	; 0x80
 800acf2:	061b      	lsls	r3, r3, #24
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d10d      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 800acf8:	4b03      	ldr	r3, [pc, #12]	; (800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800acfa:	617b      	str	r3, [r7, #20]
        break;
 800acfc:	e18a      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800acfe:	46c0      	nop			; (mov r8, r8)
 800ad00:	40021000 	.word	0x40021000
 800ad04:	0003d090 	.word	0x0003d090
 800ad08:	00f42400 	.word	0x00f42400
 800ad0c:	007a1200 	.word	0x007a1200
 800ad10:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	2380      	movs	r3, #128	; 0x80
 800ad18:	05db      	lsls	r3, r3, #23
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d000      	beq.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 800ad1e:	e179      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800ad20:	4bc5      	ldr	r3, [pc, #788]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ad22:	68da      	ldr	r2, [r3, #12]
 800ad24:	2380      	movs	r3, #128	; 0x80
 800ad26:	025b      	lsls	r3, r3, #9
 800ad28:	4013      	ands	r3, r2
 800ad2a:	d100      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800ad2c:	e172      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800ad2e:	4bc2      	ldr	r3, [pc, #776]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	0a1b      	lsrs	r3, r3, #8
 800ad34:	227f      	movs	r2, #127	; 0x7f
 800ad36:	4013      	ands	r3, r2
 800ad38:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	68ba      	ldr	r2, [r7, #8]
 800ad3e:	435a      	muls	r2, r3
 800ad40:	4bbd      	ldr	r3, [pc, #756]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	0c5b      	lsrs	r3, r3, #17
 800ad46:	211f      	movs	r1, #31
 800ad48:	400b      	ands	r3, r1
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	0019      	movs	r1, r3
 800ad4e:	0010      	movs	r0, r2
 800ad50:	f7f5 f9d8 	bl	8000104 <__udivsi3>
 800ad54:	0003      	movs	r3, r0
 800ad56:	617b      	str	r3, [r7, #20]
        break;
 800ad58:	e15c      	b.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800ad5a:	4bb7      	ldr	r3, [pc, #732]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ad5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad5e:	23c0      	movs	r3, #192	; 0xc0
 800ad60:	019b      	lsls	r3, r3, #6
 800ad62:	4013      	ands	r3, r2
 800ad64:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d104      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ad6c:	f7ff fc54 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800ad70:	0003      	movs	r3, r0
 800ad72:	617b      	str	r3, [r7, #20]
        break;
 800ad74:	e150      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	015b      	lsls	r3, r3, #5
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d104      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 800ad80:	f7ff fbbe 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800ad84:	0003      	movs	r3, r0
 800ad86:	617b      	str	r3, [r7, #20]
        break;
 800ad88:	e146      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ad8a:	4bab      	ldr	r3, [pc, #684]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	2380      	movs	r3, #128	; 0x80
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	401a      	ands	r2, r3
 800ad94:	2380      	movs	r3, #128	; 0x80
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d000      	beq.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800ad9c:	e13c      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	2380      	movs	r3, #128	; 0x80
 800ada2:	019b      	lsls	r3, r3, #6
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d000      	beq.n	800adaa <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800ada8:	e136      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 800adaa:	4ba4      	ldr	r3, [pc, #656]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800adac:	617b      	str	r3, [r7, #20]
        break;
 800adae:	e133      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 800adb0:	4ba1      	ldr	r3, [pc, #644]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800adb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adb4:	23c0      	movs	r3, #192	; 0xc0
 800adb6:	021b      	lsls	r3, r3, #8
 800adb8:	4013      	ands	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	2380      	movs	r3, #128	; 0x80
 800adc0:	01db      	lsls	r3, r3, #7
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d11c      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800adc6:	4b9c      	ldr	r3, [pc, #624]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800adc8:	68da      	ldr	r2, [r3, #12]
 800adca:	2380      	movs	r3, #128	; 0x80
 800adcc:	025b      	lsls	r3, r3, #9
 800adce:	4013      	ands	r3, r2
 800add0:	d100      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800add2:	e123      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800add4:	4b98      	ldr	r3, [pc, #608]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	0a1b      	lsrs	r3, r3, #8
 800adda:	227f      	movs	r2, #127	; 0x7f
 800addc:	4013      	ands	r3, r2
 800adde:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	435a      	muls	r2, r3
 800ade6:	4b94      	ldr	r3, [pc, #592]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	0c5b      	lsrs	r3, r3, #17
 800adec:	211f      	movs	r1, #31
 800adee:	400b      	ands	r3, r1
 800adf0:	3301      	adds	r3, #1
 800adf2:	0019      	movs	r1, r3
 800adf4:	0010      	movs	r0, r2
 800adf6:	f7f5 f985 	bl	8000104 <__udivsi3>
 800adfa:	0003      	movs	r3, r0
 800adfc:	617b      	str	r3, [r7, #20]
        break;
 800adfe:	e10d      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d104      	bne.n	800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800ae06:	f7ff fb7b 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800ae0a:	0003      	movs	r3, r0
 800ae0c:	617b      	str	r3, [r7, #20]
        break;
 800ae0e:	e105      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 800ae10:	4b89      	ldr	r3, [pc, #548]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	2380      	movs	r3, #128	; 0x80
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	401a      	ands	r2, r3
 800ae1a:	2380      	movs	r3, #128	; 0x80
 800ae1c:	00db      	lsls	r3, r3, #3
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d107      	bne.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	2380      	movs	r3, #128	; 0x80
 800ae26:	021b      	lsls	r3, r3, #8
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d102      	bne.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 800ae2c:	4b83      	ldr	r3, [pc, #524]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800ae2e:	617b      	str	r3, [r7, #20]
        break;
 800ae30:	e0f4      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	23c0      	movs	r3, #192	; 0xc0
 800ae36:	021b      	lsls	r3, r3, #8
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d000      	beq.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ae3c:	e0ee      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 800ae3e:	4b80      	ldr	r3, [pc, #512]	; (800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 800ae40:	617b      	str	r3, [r7, #20]
        break;
 800ae42:	e0eb      	b.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ae44:	4b7c      	ldr	r3, [pc, #496]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae48:	23c0      	movs	r3, #192	; 0xc0
 800ae4a:	031b      	lsls	r3, r3, #12
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d104      	bne.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800ae56:	f7ff fbdf 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800ae5a:	0003      	movs	r3, r0
 800ae5c:	617b      	str	r3, [r7, #20]
        break;
 800ae5e:	e0df      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800ae60:	4b75      	ldr	r3, [pc, #468]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae64:	2202      	movs	r2, #2
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b02      	cmp	r3, #2
 800ae6a:	d108      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800ae6c:	68fa      	ldr	r2, [r7, #12]
 800ae6e:	2380      	movs	r3, #128	; 0x80
 800ae70:	02db      	lsls	r3, r3, #11
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d103      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800ae76:	23fa      	movs	r3, #250	; 0xfa
 800ae78:	01db      	lsls	r3, r3, #7
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e021      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ae7e:	4b6e      	ldr	r3, [pc, #440]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	2380      	movs	r3, #128	; 0x80
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	401a      	ands	r2, r3
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d107      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	2380      	movs	r3, #128	; 0x80
 800ae94:	031b      	lsls	r3, r3, #12
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d102      	bne.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800ae9a:	4b68      	ldr	r3, [pc, #416]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800ae9c:	617b      	str	r3, [r7, #20]
 800ae9e:	e010      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800aea0:	4b65      	ldr	r3, [pc, #404]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800aea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea4:	2202      	movs	r2, #2
 800aea6:	4013      	ands	r3, r2
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d000      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800aeac:	e0b8      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	23c0      	movs	r3, #192	; 0xc0
 800aeb2:	031b      	lsls	r3, r3, #12
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d000      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800aeb8:	e0b2      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800aeba:	2380      	movs	r3, #128	; 0x80
 800aebc:	021b      	lsls	r3, r3, #8
 800aebe:	617b      	str	r3, [r7, #20]
        break;
 800aec0:	e0ae      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800aec2:	e0ad      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800aec4:	4b5c      	ldr	r3, [pc, #368]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800aec6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aec8:	23c0      	movs	r3, #192	; 0xc0
 800aeca:	039b      	lsls	r3, r3, #14
 800aecc:	4013      	ands	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d104      	bne.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aed6:	f7ff fb9f 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800aeda:	0003      	movs	r3, r0
 800aedc:	617b      	str	r3, [r7, #20]
        break;
 800aede:	e0a1      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800aee0:	4b55      	ldr	r3, [pc, #340]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800aee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee4:	2202      	movs	r2, #2
 800aee6:	4013      	ands	r3, r2
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d108      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	2380      	movs	r3, #128	; 0x80
 800aef0:	035b      	lsls	r3, r3, #13
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d103      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800aef6:	23fa      	movs	r3, #250	; 0xfa
 800aef8:	01db      	lsls	r3, r3, #7
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	e021      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800aefe:	4b4e      	ldr	r3, [pc, #312]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	2380      	movs	r3, #128	; 0x80
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	401a      	ands	r2, r3
 800af08:	2380      	movs	r3, #128	; 0x80
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d107      	bne.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	2380      	movs	r3, #128	; 0x80
 800af14:	039b      	lsls	r3, r3, #14
 800af16:	429a      	cmp	r2, r3
 800af18:	d102      	bne.n	800af20 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800af1a:	4b48      	ldr	r3, [pc, #288]	; (800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e010      	b.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800af20:	4b45      	ldr	r3, [pc, #276]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af24:	2202      	movs	r2, #2
 800af26:	4013      	ands	r3, r2
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d000      	beq.n	800af2e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800af2c:	e07a      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	23c0      	movs	r3, #192	; 0xc0
 800af32:	039b      	lsls	r3, r3, #14
 800af34:	429a      	cmp	r2, r3
 800af36:	d000      	beq.n	800af3a <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800af38:	e074      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800af3a:	2380      	movs	r3, #128	; 0x80
 800af3c:	021b      	lsls	r3, r3, #8
 800af3e:	617b      	str	r3, [r7, #20]
        break;
 800af40:	e070      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800af42:	e06f      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800af44:	4b3c      	ldr	r3, [pc, #240]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af48:	2380      	movs	r3, #128	; 0x80
 800af4a:	03db      	lsls	r3, r3, #15
 800af4c:	4013      	ands	r3, r2
 800af4e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	2380      	movs	r3, #128	; 0x80
 800af54:	03db      	lsls	r3, r3, #15
 800af56:	429a      	cmp	r2, r3
 800af58:	d11b      	bne.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800af5a:	4b37      	ldr	r3, [pc, #220]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af5c:	68da      	ldr	r2, [r3, #12]
 800af5e:	2380      	movs	r3, #128	; 0x80
 800af60:	045b      	lsls	r3, r3, #17
 800af62:	4013      	ands	r3, r2
 800af64:	d060      	beq.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800af66:	4b34      	ldr	r3, [pc, #208]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	0a1b      	lsrs	r3, r3, #8
 800af6c:	227f      	movs	r2, #127	; 0x7f
 800af6e:	4013      	ands	r3, r2
 800af70:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	68ba      	ldr	r2, [r7, #8]
 800af76:	435a      	muls	r2, r3
 800af78:	4b2f      	ldr	r3, [pc, #188]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	0e5b      	lsrs	r3, r3, #25
 800af7e:	2107      	movs	r1, #7
 800af80:	400b      	ands	r3, r1
 800af82:	3301      	adds	r3, #1
 800af84:	0019      	movs	r1, r3
 800af86:	0010      	movs	r0, r2
 800af88:	f7f5 f8bc 	bl	8000104 <__udivsi3>
 800af8c:	0003      	movs	r3, r0
 800af8e:	617b      	str	r3, [r7, #20]
        break;
 800af90:	e04a      	b.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d147      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 800af98:	f7ff fb3e 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800af9c:	0003      	movs	r3, r0
 800af9e:	617b      	str	r3, [r7, #20]
        break;
 800afa0:	e042      	b.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800afa2:	4b25      	ldr	r3, [pc, #148]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800afa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afa6:	2380      	movs	r3, #128	; 0x80
 800afa8:	045b      	lsls	r3, r3, #17
 800afaa:	4013      	ands	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	2380      	movs	r3, #128	; 0x80
 800afb2:	045b      	lsls	r3, r3, #17
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d11b      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800afb8:	4b1f      	ldr	r3, [pc, #124]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800afba:	68da      	ldr	r2, [r3, #12]
 800afbc:	2380      	movs	r3, #128	; 0x80
 800afbe:	045b      	lsls	r3, r3, #17
 800afc0:	4013      	ands	r3, r2
 800afc2:	d033      	beq.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	0a1b      	lsrs	r3, r3, #8
 800afca:	227f      	movs	r2, #127	; 0x7f
 800afcc:	4013      	ands	r3, r2
 800afce:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	68ba      	ldr	r2, [r7, #8]
 800afd4:	435a      	muls	r2, r3
 800afd6:	4b18      	ldr	r3, [pc, #96]	; (800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	0e5b      	lsrs	r3, r3, #25
 800afdc:	2107      	movs	r1, #7
 800afde:	400b      	ands	r3, r1
 800afe0:	3301      	adds	r3, #1
 800afe2:	0019      	movs	r1, r3
 800afe4:	0010      	movs	r0, r2
 800afe6:	f7f5 f88d 	bl	8000104 <__udivsi3>
 800afea:	0003      	movs	r3, r0
 800afec:	617b      	str	r3, [r7, #20]
        break;
 800afee:	e01d      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d11a      	bne.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800aff6:	f7ff fb0f 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800affa:	0003      	movs	r3, r0
 800affc:	617b      	str	r3, [r7, #20]
        break;
 800affe:	e015      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 800b000:	46c0      	nop			; (mov r8, r8)
 800b002:	e014      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b004:	46c0      	nop			; (mov r8, r8)
 800b006:	e012      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b008:	46c0      	nop			; (mov r8, r8)
 800b00a:	e010      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b00c:	46c0      	nop			; (mov r8, r8)
 800b00e:	e00e      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b010:	46c0      	nop			; (mov r8, r8)
 800b012:	e00c      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b014:	46c0      	nop			; (mov r8, r8)
 800b016:	e00a      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b018:	46c0      	nop			; (mov r8, r8)
 800b01a:	e008      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b01c:	46c0      	nop			; (mov r8, r8)
 800b01e:	e006      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b020:	46c0      	nop			; (mov r8, r8)
 800b022:	e004      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b024:	46c0      	nop			; (mov r8, r8)
 800b026:	e002      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b028:	46c0      	nop			; (mov r8, r8)
 800b02a:	e000      	b.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800b02c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800b02e:	697b      	ldr	r3, [r7, #20]
}
 800b030:	0018      	movs	r0, r3
 800b032:	46bd      	mov	sp, r7
 800b034:	b006      	add	sp, #24
 800b036:	bd80      	pop	{r7, pc}
 800b038:	40021000 	.word	0x40021000
 800b03c:	00f42400 	.word	0x00f42400
 800b040:	0000bb80 	.word	0x0000bb80

0800b044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e0a8      	b.n	800b1a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d109      	bne.n	800b072 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	2382      	movs	r3, #130	; 0x82
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	429a      	cmp	r2, r3
 800b068:	d009      	beq.n	800b07e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	61da      	str	r2, [r3, #28]
 800b070:	e005      	b.n	800b07e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	225d      	movs	r2, #93	; 0x5d
 800b088:	5c9b      	ldrb	r3, [r3, r2]
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d107      	bne.n	800b0a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	225c      	movs	r2, #92	; 0x5c
 800b094:	2100      	movs	r1, #0
 800b096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	0018      	movs	r0, r3
 800b09c:	f7fb fcd6 	bl	8006a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	225d      	movs	r2, #93	; 0x5d
 800b0a4:	2102      	movs	r1, #2
 800b0a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2140      	movs	r1, #64	; 0x40
 800b0b4:	438a      	bics	r2, r1
 800b0b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68da      	ldr	r2, [r3, #12]
 800b0bc:	23e0      	movs	r3, #224	; 0xe0
 800b0be:	00db      	lsls	r3, r3, #3
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d902      	bls.n	800b0ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	e002      	b.n	800b0d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b0ca:	2380      	movs	r3, #128	; 0x80
 800b0cc:	015b      	lsls	r3, r3, #5
 800b0ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	68da      	ldr	r2, [r3, #12]
 800b0d4:	23f0      	movs	r3, #240	; 0xf0
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d008      	beq.n	800b0ee <HAL_SPI_Init+0xaa>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	68da      	ldr	r2, [r3, #12]
 800b0e0:	23e0      	movs	r3, #224	; 0xe0
 800b0e2:	00db      	lsls	r3, r3, #3
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d002      	beq.n	800b0ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685a      	ldr	r2, [r3, #4]
 800b0f2:	2382      	movs	r3, #130	; 0x82
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	401a      	ands	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6899      	ldr	r1, [r3, #8]
 800b0fc:	2384      	movs	r3, #132	; 0x84
 800b0fe:	021b      	lsls	r3, r3, #8
 800b100:	400b      	ands	r3, r1
 800b102:	431a      	orrs	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2102      	movs	r1, #2
 800b10a:	400b      	ands	r3, r1
 800b10c:	431a      	orrs	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	695b      	ldr	r3, [r3, #20]
 800b112:	2101      	movs	r1, #1
 800b114:	400b      	ands	r3, r1
 800b116:	431a      	orrs	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6999      	ldr	r1, [r3, #24]
 800b11c:	2380      	movs	r3, #128	; 0x80
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	400b      	ands	r3, r1
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	2138      	movs	r1, #56	; 0x38
 800b12a:	400b      	ands	r3, r1
 800b12c:	431a      	orrs	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	2180      	movs	r1, #128	; 0x80
 800b134:	400b      	ands	r3, r1
 800b136:	431a      	orrs	r2, r3
 800b138:	0011      	movs	r1, r2
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b13e:	2380      	movs	r3, #128	; 0x80
 800b140:	019b      	lsls	r3, r3, #6
 800b142:	401a      	ands	r2, r3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	0c1b      	lsrs	r3, r3, #16
 800b152:	2204      	movs	r2, #4
 800b154:	401a      	ands	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2110      	movs	r1, #16
 800b15c:	400b      	ands	r3, r1
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b164:	2108      	movs	r1, #8
 800b166:	400b      	ands	r3, r1
 800b168:	431a      	orrs	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	68d9      	ldr	r1, [r3, #12]
 800b16e:	23f0      	movs	r3, #240	; 0xf0
 800b170:	011b      	lsls	r3, r3, #4
 800b172:	400b      	ands	r3, r1
 800b174:	431a      	orrs	r2, r3
 800b176:	0011      	movs	r1, r2
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	2380      	movs	r3, #128	; 0x80
 800b17c:	015b      	lsls	r3, r3, #5
 800b17e:	401a      	ands	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	430a      	orrs	r2, r1
 800b186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	69da      	ldr	r2, [r3, #28]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4907      	ldr	r1, [pc, #28]	; (800b1b0 <HAL_SPI_Init+0x16c>)
 800b194:	400a      	ands	r2, r1
 800b196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	225d      	movs	r2, #93	; 0x5d
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1a6:	2300      	movs	r3, #0
}
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	b004      	add	sp, #16
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	fffff7ff 	.word	0xfffff7ff

0800b1b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	603b      	str	r3, [r7, #0]
 800b1c0:	1dbb      	adds	r3, r7, #6
 800b1c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b1c4:	231f      	movs	r3, #31
 800b1c6:	18fb      	adds	r3, r7, r3
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	225c      	movs	r2, #92	; 0x5c
 800b1d0:	5c9b      	ldrb	r3, [r3, r2]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d101      	bne.n	800b1da <HAL_SPI_Transmit+0x26>
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	e140      	b.n	800b45c <HAL_SPI_Transmit+0x2a8>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	225c      	movs	r2, #92	; 0x5c
 800b1de:	2101      	movs	r1, #1
 800b1e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1e2:	f7fb ffd1 	bl	8007188 <HAL_GetTick>
 800b1e6:	0003      	movs	r3, r0
 800b1e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800b1ea:	2316      	movs	r3, #22
 800b1ec:	18fb      	adds	r3, r7, r3
 800b1ee:	1dba      	adds	r2, r7, #6
 800b1f0:	8812      	ldrh	r2, [r2, #0]
 800b1f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	225d      	movs	r2, #93	; 0x5d
 800b1f8:	5c9b      	ldrb	r3, [r3, r2]
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d004      	beq.n	800b20a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800b200:	231f      	movs	r3, #31
 800b202:	18fb      	adds	r3, r7, r3
 800b204:	2202      	movs	r2, #2
 800b206:	701a      	strb	r2, [r3, #0]
    goto error;
 800b208:	e11d      	b.n	800b446 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <HAL_SPI_Transmit+0x64>
 800b210:	1dbb      	adds	r3, r7, #6
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d104      	bne.n	800b222 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800b218:	231f      	movs	r3, #31
 800b21a:	18fb      	adds	r3, r7, r3
 800b21c:	2201      	movs	r2, #1
 800b21e:	701a      	strb	r2, [r3, #0]
    goto error;
 800b220:	e111      	b.n	800b446 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	225d      	movs	r2, #93	; 0x5d
 800b226:	2103      	movs	r1, #3
 800b228:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1dba      	adds	r2, r7, #6
 800b23a:	8812      	ldrh	r2, [r2, #0]
 800b23c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	1dba      	adds	r2, r7, #6
 800b242:	8812      	ldrh	r2, [r2, #0]
 800b244:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2244      	movs	r2, #68	; 0x44
 800b250:	2100      	movs	r1, #0
 800b252:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2246      	movs	r2, #70	; 0x46
 800b258:	2100      	movs	r1, #0
 800b25a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	2380      	movs	r3, #128	; 0x80
 800b26e:	021b      	lsls	r3, r3, #8
 800b270:	429a      	cmp	r2, r3
 800b272:	d110      	bne.n	800b296 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2140      	movs	r1, #64	; 0x40
 800b280:	438a      	bics	r2, r1
 800b282:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2180      	movs	r1, #128	; 0x80
 800b290:	01c9      	lsls	r1, r1, #7
 800b292:	430a      	orrs	r2, r1
 800b294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2240      	movs	r2, #64	; 0x40
 800b29e:	4013      	ands	r3, r2
 800b2a0:	2b40      	cmp	r3, #64	; 0x40
 800b2a2:	d007      	beq.n	800b2b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2140      	movs	r1, #64	; 0x40
 800b2b0:	430a      	orrs	r2, r1
 800b2b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68da      	ldr	r2, [r3, #12]
 800b2b8:	23e0      	movs	r3, #224	; 0xe0
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d94e      	bls.n	800b35e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d004      	beq.n	800b2d2 <HAL_SPI_Transmit+0x11e>
 800b2c8:	2316      	movs	r3, #22
 800b2ca:	18fb      	adds	r3, r7, r3
 800b2cc:	881b      	ldrh	r3, [r3, #0]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d13f      	bne.n	800b352 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d6:	881a      	ldrh	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e2:	1c9a      	adds	r2, r3, #2
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b2f6:	e02c      	b.n	800b352 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2202      	movs	r2, #2
 800b300:	4013      	ands	r3, r2
 800b302:	2b02      	cmp	r3, #2
 800b304:	d112      	bne.n	800b32c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30a:	881a      	ldrh	r2, [r3, #0]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	1c9a      	adds	r2, r3, #2
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b320:	b29b      	uxth	r3, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	b29a      	uxth	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b32a:	e012      	b.n	800b352 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b32c:	f7fb ff2c 	bl	8007188 <HAL_GetTick>
 800b330:	0002      	movs	r2, r0
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d802      	bhi.n	800b342 <HAL_SPI_Transmit+0x18e>
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	3301      	adds	r3, #1
 800b340:	d102      	bne.n	800b348 <HAL_SPI_Transmit+0x194>
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d104      	bne.n	800b352 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800b348:	231f      	movs	r3, #31
 800b34a:	18fb      	adds	r3, r7, r3
 800b34c:	2203      	movs	r2, #3
 800b34e:	701a      	strb	r2, [r3, #0]
          goto error;
 800b350:	e079      	b.n	800b446 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b356:	b29b      	uxth	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1cd      	bne.n	800b2f8 <HAL_SPI_Transmit+0x144>
 800b35c:	e04f      	b.n	800b3fe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d004      	beq.n	800b370 <HAL_SPI_Transmit+0x1bc>
 800b366:	2316      	movs	r3, #22
 800b368:	18fb      	adds	r3, r7, r3
 800b36a:	881b      	ldrh	r3, [r3, #0]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d141      	bne.n	800b3f4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	330c      	adds	r3, #12
 800b37a:	7812      	ldrb	r2, [r2, #0]
 800b37c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b382:	1c5a      	adds	r2, r3, #1
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	3b01      	subs	r3, #1
 800b390:	b29a      	uxth	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800b396:	e02d      	b.n	800b3f4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	2202      	movs	r2, #2
 800b3a0:	4013      	ands	r3, r2
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d113      	bne.n	800b3ce <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	330c      	adds	r3, #12
 800b3b0:	7812      	ldrb	r2, [r2, #0]
 800b3b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	1c5a      	adds	r2, r3, #1
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b3cc:	e012      	b.n	800b3f4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3ce:	f7fb fedb 	bl	8007188 <HAL_GetTick>
 800b3d2:	0002      	movs	r2, r0
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d802      	bhi.n	800b3e4 <HAL_SPI_Transmit+0x230>
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	d102      	bne.n	800b3ea <HAL_SPI_Transmit+0x236>
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d104      	bne.n	800b3f4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800b3ea:	231f      	movs	r3, #31
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	2203      	movs	r2, #3
 800b3f0:	701a      	strb	r2, [r3, #0]
          goto error;
 800b3f2:	e028      	b.n	800b446 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1cc      	bne.n	800b398 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	0018      	movs	r0, r3
 800b406:	f000 fde9 	bl	800bfdc <SPI_EndRxTxTransaction>
 800b40a:	1e03      	subs	r3, r0, #0
 800b40c:	d002      	beq.n	800b414 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2220      	movs	r2, #32
 800b412:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d10a      	bne.n	800b432 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b41c:	2300      	movs	r3, #0
 800b41e:	613b      	str	r3, [r7, #16]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	613b      	str	r3, [r7, #16]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	613b      	str	r3, [r7, #16]
 800b430:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800b43a:	231f      	movs	r3, #31
 800b43c:	18fb      	adds	r3, r7, r3
 800b43e:	2201      	movs	r2, #1
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	e000      	b.n	800b446 <HAL_SPI_Transmit+0x292>
  }

error:
 800b444:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	225d      	movs	r2, #93	; 0x5d
 800b44a:	2101      	movs	r1, #1
 800b44c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	225c      	movs	r2, #92	; 0x5c
 800b452:	2100      	movs	r1, #0
 800b454:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b456:	231f      	movs	r3, #31
 800b458:	18fb      	adds	r3, r7, r3
 800b45a:	781b      	ldrb	r3, [r3, #0]
}
 800b45c:	0018      	movs	r0, r3
 800b45e:	46bd      	mov	sp, r7
 800b460:	b008      	add	sp, #32
 800b462:	bd80      	pop	{r7, pc}

0800b464 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b464:	b590      	push	{r4, r7, lr}
 800b466:	b089      	sub	sp, #36	; 0x24
 800b468:	af02      	add	r7, sp, #8
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	1dbb      	adds	r3, r7, #6
 800b472:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b474:	2317      	movs	r3, #23
 800b476:	18fb      	adds	r3, r7, r3
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	2382      	movs	r3, #130	; 0x82
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	429a      	cmp	r2, r3
 800b486:	d113      	bne.n	800b4b0 <HAL_SPI_Receive+0x4c>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10f      	bne.n	800b4b0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	225d      	movs	r2, #93	; 0x5d
 800b494:	2104      	movs	r1, #4
 800b496:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b498:	1dbb      	adds	r3, r7, #6
 800b49a:	881c      	ldrh	r4, [r3, #0]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	68b9      	ldr	r1, [r7, #8]
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	0023      	movs	r3, r4
 800b4a8:	f000 f928 	bl	800b6fc <HAL_SPI_TransmitReceive>
 800b4ac:	0003      	movs	r3, r0
 800b4ae:	e11c      	b.n	800b6ea <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	225c      	movs	r2, #92	; 0x5c
 800b4b4:	5c9b      	ldrb	r3, [r3, r2]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d101      	bne.n	800b4be <HAL_SPI_Receive+0x5a>
 800b4ba:	2302      	movs	r3, #2
 800b4bc:	e115      	b.n	800b6ea <HAL_SPI_Receive+0x286>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	225c      	movs	r2, #92	; 0x5c
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4c6:	f7fb fe5f 	bl	8007188 <HAL_GetTick>
 800b4ca:	0003      	movs	r3, r0
 800b4cc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	225d      	movs	r2, #93	; 0x5d
 800b4d2:	5c9b      	ldrb	r3, [r3, r2]
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d004      	beq.n	800b4e4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800b4da:	2317      	movs	r3, #23
 800b4dc:	18fb      	adds	r3, r7, r3
 800b4de:	2202      	movs	r2, #2
 800b4e0:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4e2:	e0f7      	b.n	800b6d4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <HAL_SPI_Receive+0x8e>
 800b4ea:	1dbb      	adds	r3, r7, #6
 800b4ec:	881b      	ldrh	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d104      	bne.n	800b4fc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800b4f2:	2317      	movs	r3, #23
 800b4f4:	18fb      	adds	r3, r7, r3
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
    goto error;
 800b4fa:	e0eb      	b.n	800b6d4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	225d      	movs	r2, #93	; 0x5d
 800b500:	2104      	movs	r1, #4
 800b502:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	1dba      	adds	r2, r7, #6
 800b514:	2144      	movs	r1, #68	; 0x44
 800b516:	8812      	ldrh	r2, [r2, #0]
 800b518:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	1dba      	adds	r2, r7, #6
 800b51e:	2146      	movs	r1, #70	; 0x46
 800b520:	8812      	ldrh	r2, [r2, #0]
 800b522:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2200      	movs	r2, #0
 800b52e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	23e0      	movs	r3, #224	; 0xe0
 800b548:	00db      	lsls	r3, r3, #3
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d908      	bls.n	800b560 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4966      	ldr	r1, [pc, #408]	; (800b6f4 <HAL_SPI_Receive+0x290>)
 800b55a:	400a      	ands	r2, r1
 800b55c:	605a      	str	r2, [r3, #4]
 800b55e:	e008      	b.n	800b572 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	2180      	movs	r1, #128	; 0x80
 800b56c:	0149      	lsls	r1, r1, #5
 800b56e:	430a      	orrs	r2, r1
 800b570:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	689a      	ldr	r2, [r3, #8]
 800b576:	2380      	movs	r3, #128	; 0x80
 800b578:	021b      	lsls	r3, r3, #8
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d10f      	bne.n	800b59e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2140      	movs	r1, #64	; 0x40
 800b58a:	438a      	bics	r2, r1
 800b58c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4957      	ldr	r1, [pc, #348]	; (800b6f8 <HAL_SPI_Receive+0x294>)
 800b59a:	400a      	ands	r2, r1
 800b59c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	2240      	movs	r2, #64	; 0x40
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	2b40      	cmp	r3, #64	; 0x40
 800b5aa:	d007      	beq.n	800b5bc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2140      	movs	r1, #64	; 0x40
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	68da      	ldr	r2, [r3, #12]
 800b5c0:	23e0      	movs	r3, #224	; 0xe0
 800b5c2:	00db      	lsls	r3, r3, #3
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d900      	bls.n	800b5ca <HAL_SPI_Receive+0x166>
 800b5c8:	e069      	b.n	800b69e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5ca:	e031      	b.n	800b630 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	4013      	ands	r3, r2
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d117      	bne.n	800b60a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	330c      	adds	r3, #12
 800b5e0:	001a      	movs	r2, r3
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e6:	7812      	ldrb	r2, [r2, #0]
 800b5e8:	b2d2      	uxtb	r2, r2
 800b5ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2246      	movs	r2, #70	; 0x46
 800b5fa:	5a9b      	ldrh	r3, [r3, r2]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b299      	uxth	r1, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2246      	movs	r2, #70	; 0x46
 800b606:	5299      	strh	r1, [r3, r2]
 800b608:	e012      	b.n	800b630 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b60a:	f7fb fdbd 	bl	8007188 <HAL_GetTick>
 800b60e:	0002      	movs	r2, r0
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d802      	bhi.n	800b620 <HAL_SPI_Receive+0x1bc>
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	3301      	adds	r3, #1
 800b61e:	d102      	bne.n	800b626 <HAL_SPI_Receive+0x1c2>
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d104      	bne.n	800b630 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800b626:	2317      	movs	r3, #23
 800b628:	18fb      	adds	r3, r7, r3
 800b62a:	2203      	movs	r2, #3
 800b62c:	701a      	strb	r2, [r3, #0]
          goto error;
 800b62e:	e051      	b.n	800b6d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2246      	movs	r2, #70	; 0x46
 800b634:	5a9b      	ldrh	r3, [r3, r2]
 800b636:	b29b      	uxth	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1c7      	bne.n	800b5cc <HAL_SPI_Receive+0x168>
 800b63c:	e035      	b.n	800b6aa <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2201      	movs	r2, #1
 800b646:	4013      	ands	r3, r2
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d115      	bne.n	800b678 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	b292      	uxth	r2, r2
 800b658:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65e:	1c9a      	adds	r2, r3, #2
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2246      	movs	r2, #70	; 0x46
 800b668:	5a9b      	ldrh	r3, [r3, r2]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	b299      	uxth	r1, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2246      	movs	r2, #70	; 0x46
 800b674:	5299      	strh	r1, [r3, r2]
 800b676:	e012      	b.n	800b69e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b678:	f7fb fd86 	bl	8007188 <HAL_GetTick>
 800b67c:	0002      	movs	r2, r0
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	d802      	bhi.n	800b68e <HAL_SPI_Receive+0x22a>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	3301      	adds	r3, #1
 800b68c:	d102      	bne.n	800b694 <HAL_SPI_Receive+0x230>
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d104      	bne.n	800b69e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800b694:	2317      	movs	r3, #23
 800b696:	18fb      	adds	r3, r7, r3
 800b698:	2203      	movs	r2, #3
 800b69a:	701a      	strb	r2, [r3, #0]
          goto error;
 800b69c:	e01a      	b.n	800b6d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2246      	movs	r2, #70	; 0x46
 800b6a2:	5a9b      	ldrh	r3, [r3, r2]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1c9      	bne.n	800b63e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f000 fc35 	bl	800bf20 <SPI_EndRxTransaction>
 800b6b6:	1e03      	subs	r3, r0, #0
 800b6b8:	d002      	beq.n	800b6c0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800b6c8:	2317      	movs	r3, #23
 800b6ca:	18fb      	adds	r3, r7, r3
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	701a      	strb	r2, [r3, #0]
 800b6d0:	e000      	b.n	800b6d4 <HAL_SPI_Receive+0x270>
  }

error :
 800b6d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	225d      	movs	r2, #93	; 0x5d
 800b6d8:	2101      	movs	r1, #1
 800b6da:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	225c      	movs	r2, #92	; 0x5c
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800b6e4:	2317      	movs	r3, #23
 800b6e6:	18fb      	adds	r3, r7, r3
 800b6e8:	781b      	ldrb	r3, [r3, #0]
}
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	b007      	add	sp, #28
 800b6f0:	bd90      	pop	{r4, r7, pc}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	ffffefff 	.word	0xffffefff
 800b6f8:	ffffbfff 	.word	0xffffbfff

0800b6fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b08a      	sub	sp, #40	; 0x28
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
 800b708:	001a      	movs	r2, r3
 800b70a:	1cbb      	adds	r3, r7, #2
 800b70c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b70e:	2301      	movs	r3, #1
 800b710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b712:	2323      	movs	r3, #35	; 0x23
 800b714:	18fb      	adds	r3, r7, r3
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	225c      	movs	r2, #92	; 0x5c
 800b71e:	5c9b      	ldrb	r3, [r3, r2]
 800b720:	2b01      	cmp	r3, #1
 800b722:	d101      	bne.n	800b728 <HAL_SPI_TransmitReceive+0x2c>
 800b724:	2302      	movs	r3, #2
 800b726:	e1b5      	b.n	800ba94 <HAL_SPI_TransmitReceive+0x398>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	225c      	movs	r2, #92	; 0x5c
 800b72c:	2101      	movs	r1, #1
 800b72e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b730:	f7fb fd2a 	bl	8007188 <HAL_GetTick>
 800b734:	0003      	movs	r3, r0
 800b736:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b738:	201b      	movs	r0, #27
 800b73a:	183b      	adds	r3, r7, r0
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	215d      	movs	r1, #93	; 0x5d
 800b740:	5c52      	ldrb	r2, [r2, r1]
 800b742:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800b74a:	2312      	movs	r3, #18
 800b74c:	18fb      	adds	r3, r7, r3
 800b74e:	1cba      	adds	r2, r7, #2
 800b750:	8812      	ldrh	r2, [r2, #0]
 800b752:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b754:	183b      	adds	r3, r7, r0
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d011      	beq.n	800b780 <HAL_SPI_TransmitReceive+0x84>
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	2382      	movs	r3, #130	; 0x82
 800b760:	005b      	lsls	r3, r3, #1
 800b762:	429a      	cmp	r2, r3
 800b764:	d107      	bne.n	800b776 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <HAL_SPI_TransmitReceive+0x7a>
 800b76e:	183b      	adds	r3, r7, r0
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	2b04      	cmp	r3, #4
 800b774:	d004      	beq.n	800b780 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800b776:	2323      	movs	r3, #35	; 0x23
 800b778:	18fb      	adds	r3, r7, r3
 800b77a:	2202      	movs	r2, #2
 800b77c:	701a      	strb	r2, [r3, #0]
    goto error;
 800b77e:	e17e      	b.n	800ba7e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d006      	beq.n	800b794 <HAL_SPI_TransmitReceive+0x98>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <HAL_SPI_TransmitReceive+0x98>
 800b78c:	1cbb      	adds	r3, r7, #2
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d104      	bne.n	800b79e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800b794:	2323      	movs	r3, #35	; 0x23
 800b796:	18fb      	adds	r3, r7, r3
 800b798:	2201      	movs	r2, #1
 800b79a:	701a      	strb	r2, [r3, #0]
    goto error;
 800b79c:	e16f      	b.n	800ba7e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	225d      	movs	r2, #93	; 0x5d
 800b7a2:	5c9b      	ldrb	r3, [r3, r2]
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b04      	cmp	r3, #4
 800b7a8:	d003      	beq.n	800b7b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	225d      	movs	r2, #93	; 0x5d
 800b7ae:	2105      	movs	r1, #5
 800b7b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	1cba      	adds	r2, r7, #2
 800b7c2:	2146      	movs	r1, #70	; 0x46
 800b7c4:	8812      	ldrh	r2, [r2, #0]
 800b7c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	1cba      	adds	r2, r7, #2
 800b7cc:	2144      	movs	r1, #68	; 0x44
 800b7ce:	8812      	ldrh	r2, [r2, #0]
 800b7d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	1cba      	adds	r2, r7, #2
 800b7dc:	8812      	ldrh	r2, [r2, #0]
 800b7de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	1cba      	adds	r2, r7, #2
 800b7e4:	8812      	ldrh	r2, [r2, #0]
 800b7e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	68da      	ldr	r2, [r3, #12]
 800b7f8:	23e0      	movs	r3, #224	; 0xe0
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d908      	bls.n	800b812 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	685a      	ldr	r2, [r3, #4]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	49a4      	ldr	r1, [pc, #656]	; (800ba9c <HAL_SPI_TransmitReceive+0x3a0>)
 800b80c:	400a      	ands	r2, r1
 800b80e:	605a      	str	r2, [r3, #4]
 800b810:	e008      	b.n	800b824 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2180      	movs	r1, #128	; 0x80
 800b81e:	0149      	lsls	r1, r1, #5
 800b820:	430a      	orrs	r2, r1
 800b822:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2240      	movs	r2, #64	; 0x40
 800b82c:	4013      	ands	r3, r2
 800b82e:	2b40      	cmp	r3, #64	; 0x40
 800b830:	d007      	beq.n	800b842 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2140      	movs	r1, #64	; 0x40
 800b83e:	430a      	orrs	r2, r1
 800b840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	68da      	ldr	r2, [r3, #12]
 800b846:	23e0      	movs	r3, #224	; 0xe0
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d800      	bhi.n	800b850 <HAL_SPI_TransmitReceive+0x154>
 800b84e:	e07f      	b.n	800b950 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d005      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x168>
 800b858:	2312      	movs	r3, #18
 800b85a:	18fb      	adds	r3, r7, r3
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d000      	beq.n	800b864 <HAL_SPI_TransmitReceive+0x168>
 800b862:	e069      	b.n	800b938 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	881a      	ldrh	r2, [r3, #0]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b874:	1c9a      	adds	r2, r3, #2
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b87e:	b29b      	uxth	r3, r3
 800b880:	3b01      	subs	r3, #1
 800b882:	b29a      	uxth	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b888:	e056      	b.n	800b938 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	2202      	movs	r2, #2
 800b892:	4013      	ands	r3, r2
 800b894:	2b02      	cmp	r3, #2
 800b896:	d11b      	bne.n	800b8d0 <HAL_SPI_TransmitReceive+0x1d4>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d016      	beq.n	800b8d0 <HAL_SPI_TransmitReceive+0x1d4>
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d113      	bne.n	800b8d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ac:	881a      	ldrh	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	1c9a      	adds	r2, r3, #2
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	4013      	ands	r3, r2
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d11c      	bne.n	800b918 <HAL_SPI_TransmitReceive+0x21c>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2246      	movs	r2, #70	; 0x46
 800b8e2:	5a9b      	ldrh	r3, [r3, r2]
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d016      	beq.n	800b918 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f4:	b292      	uxth	r2, r2
 800b8f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fc:	1c9a      	adds	r2, r3, #2
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2246      	movs	r2, #70	; 0x46
 800b906:	5a9b      	ldrh	r3, [r3, r2]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	3b01      	subs	r3, #1
 800b90c:	b299      	uxth	r1, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2246      	movs	r2, #70	; 0x46
 800b912:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b914:	2301      	movs	r3, #1
 800b916:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b918:	f7fb fc36 	bl	8007188 <HAL_GetTick>
 800b91c:	0002      	movs	r2, r0
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b924:	429a      	cmp	r2, r3
 800b926:	d807      	bhi.n	800b938 <HAL_SPI_TransmitReceive+0x23c>
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	3301      	adds	r3, #1
 800b92c:	d004      	beq.n	800b938 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800b92e:	2323      	movs	r3, #35	; 0x23
 800b930:	18fb      	adds	r3, r7, r3
 800b932:	2203      	movs	r2, #3
 800b934:	701a      	strb	r2, [r3, #0]
        goto error;
 800b936:	e0a2      	b.n	800ba7e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1a3      	bne.n	800b88a <HAL_SPI_TransmitReceive+0x18e>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2246      	movs	r2, #70	; 0x46
 800b946:	5a9b      	ldrh	r3, [r3, r2]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d19d      	bne.n	800b88a <HAL_SPI_TransmitReceive+0x18e>
 800b94e:	e085      	b.n	800ba5c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <HAL_SPI_TransmitReceive+0x268>
 800b958:	2312      	movs	r3, #18
 800b95a:	18fb      	adds	r3, r7, r3
 800b95c:	881b      	ldrh	r3, [r3, #0]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d000      	beq.n	800b964 <HAL_SPI_TransmitReceive+0x268>
 800b962:	e070      	b.n	800ba46 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	330c      	adds	r3, #12
 800b96e:	7812      	ldrb	r2, [r2, #0]
 800b970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b980:	b29b      	uxth	r3, r3
 800b982:	3b01      	subs	r3, #1
 800b984:	b29a      	uxth	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b98a:	e05c      	b.n	800ba46 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	2202      	movs	r2, #2
 800b994:	4013      	ands	r3, r2
 800b996:	2b02      	cmp	r3, #2
 800b998:	d11c      	bne.n	800b9d4 <HAL_SPI_TransmitReceive+0x2d8>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d017      	beq.n	800b9d4 <HAL_SPI_TransmitReceive+0x2d8>
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d114      	bne.n	800b9d4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	330c      	adds	r3, #12
 800b9b4:	7812      	ldrb	r2, [r2, #0]
 800b9b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9bc:	1c5a      	adds	r2, r3, #1
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	4013      	ands	r3, r2
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d11e      	bne.n	800ba20 <HAL_SPI_TransmitReceive+0x324>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2246      	movs	r2, #70	; 0x46
 800b9e6:	5a9b      	ldrh	r3, [r3, r2]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d018      	beq.n	800ba20 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	330c      	adds	r3, #12
 800b9f4:	001a      	movs	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fa:	7812      	ldrb	r2, [r2, #0]
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba04:	1c5a      	adds	r2, r3, #1
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2246      	movs	r2, #70	; 0x46
 800ba0e:	5a9b      	ldrh	r3, [r3, r2]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b299      	uxth	r1, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2246      	movs	r2, #70	; 0x46
 800ba1a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ba20:	f7fb fbb2 	bl	8007188 <HAL_GetTick>
 800ba24:	0002      	movs	r2, r0
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d802      	bhi.n	800ba36 <HAL_SPI_TransmitReceive+0x33a>
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	3301      	adds	r3, #1
 800ba34:	d102      	bne.n	800ba3c <HAL_SPI_TransmitReceive+0x340>
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d104      	bne.n	800ba46 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800ba3c:	2323      	movs	r3, #35	; 0x23
 800ba3e:	18fb      	adds	r3, r7, r3
 800ba40:	2203      	movs	r2, #3
 800ba42:	701a      	strb	r2, [r3, #0]
        goto error;
 800ba44:	e01b      	b.n	800ba7e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d19d      	bne.n	800b98c <HAL_SPI_TransmitReceive+0x290>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2246      	movs	r2, #70	; 0x46
 800ba54:	5a9b      	ldrh	r3, [r3, r2]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d197      	bne.n	800b98c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ba5c:	69fa      	ldr	r2, [r7, #28]
 800ba5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	0018      	movs	r0, r3
 800ba64:	f000 faba 	bl	800bfdc <SPI_EndRxTxTransaction>
 800ba68:	1e03      	subs	r3, r0, #0
 800ba6a:	d007      	beq.n	800ba7c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800ba6c:	2323      	movs	r3, #35	; 0x23
 800ba6e:	18fb      	adds	r3, r7, r3
 800ba70:	2201      	movs	r2, #1
 800ba72:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2220      	movs	r2, #32
 800ba78:	661a      	str	r2, [r3, #96]	; 0x60
 800ba7a:	e000      	b.n	800ba7e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800ba7c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	225d      	movs	r2, #93	; 0x5d
 800ba82:	2101      	movs	r1, #1
 800ba84:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	225c      	movs	r2, #92	; 0x5c
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ba8e:	2323      	movs	r3, #35	; 0x23
 800ba90:	18fb      	adds	r3, r7, r3
 800ba92:	781b      	ldrb	r3, [r3, #0]
}
 800ba94:	0018      	movs	r0, r3
 800ba96:	46bd      	mov	sp, r7
 800ba98:	b00a      	add	sp, #40	; 0x28
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	ffffefff 	.word	0xffffefff

0800baa0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	099b      	lsrs	r3, r3, #6
 800babc:	001a      	movs	r2, r3
 800babe:	2301      	movs	r3, #1
 800bac0:	4013      	ands	r3, r2
 800bac2:	d10f      	bne.n	800bae4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	2201      	movs	r2, #1
 800bac8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800baca:	d00b      	beq.n	800bae4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	099b      	lsrs	r3, r3, #6
 800bad0:	001a      	movs	r2, r3
 800bad2:	2301      	movs	r3, #1
 800bad4:	4013      	ands	r3, r2
 800bad6:	d005      	beq.n	800bae4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	0010      	movs	r0, r2
 800bae0:	4798      	blx	r3
    return;
 800bae2:	e0d5      	b.n	800bc90 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	001a      	movs	r2, r3
 800baea:	2301      	movs	r3, #1
 800baec:	4013      	ands	r3, r2
 800baee:	d00b      	beq.n	800bb08 <HAL_SPI_IRQHandler+0x68>
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	09db      	lsrs	r3, r3, #7
 800baf4:	001a      	movs	r2, r3
 800baf6:	2301      	movs	r3, #1
 800baf8:	4013      	ands	r3, r2
 800bafa:	d005      	beq.n	800bb08 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	0010      	movs	r0, r2
 800bb04:	4798      	blx	r3
    return;
 800bb06:	e0c3      	b.n	800bc90 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	001a      	movs	r2, r3
 800bb0e:	2301      	movs	r3, #1
 800bb10:	4013      	ands	r3, r2
 800bb12:	d10c      	bne.n	800bb2e <HAL_SPI_IRQHandler+0x8e>
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	099b      	lsrs	r3, r3, #6
 800bb18:	001a      	movs	r2, r3
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	d106      	bne.n	800bb2e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bb20:	69bb      	ldr	r3, [r7, #24]
 800bb22:	0a1b      	lsrs	r3, r3, #8
 800bb24:	001a      	movs	r2, r3
 800bb26:	2301      	movs	r3, #1
 800bb28:	4013      	ands	r3, r2
 800bb2a:	d100      	bne.n	800bb2e <HAL_SPI_IRQHandler+0x8e>
 800bb2c:	e0b0      	b.n	800bc90 <HAL_SPI_IRQHandler+0x1f0>
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	095b      	lsrs	r3, r3, #5
 800bb32:	001a      	movs	r2, r3
 800bb34:	2301      	movs	r3, #1
 800bb36:	4013      	ands	r3, r2
 800bb38:	d100      	bne.n	800bb3c <HAL_SPI_IRQHandler+0x9c>
 800bb3a:	e0a9      	b.n	800bc90 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	099b      	lsrs	r3, r3, #6
 800bb40:	001a      	movs	r2, r3
 800bb42:	2301      	movs	r3, #1
 800bb44:	4013      	ands	r3, r2
 800bb46:	d023      	beq.n	800bb90 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	225d      	movs	r2, #93	; 0x5d
 800bb4c:	5c9b      	ldrb	r3, [r3, r2]
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d011      	beq.n	800bb78 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb58:	2204      	movs	r2, #4
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	617b      	str	r3, [r7, #20]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	e00b      	b.n	800bb90 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb78:	2300      	movs	r3, #0
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	613b      	str	r3, [r7, #16]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	613b      	str	r3, [r7, #16]
 800bb8c:	693b      	ldr	r3, [r7, #16]
        return;
 800bb8e:	e07f      	b.n	800bc90 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	095b      	lsrs	r3, r3, #5
 800bb94:	001a      	movs	r2, r3
 800bb96:	2301      	movs	r3, #1
 800bb98:	4013      	ands	r3, r2
 800bb9a:	d014      	beq.n	800bbc6 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bba0:	2201      	movs	r2, #1
 800bba2:	431a      	orrs	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bba8:	2300      	movs	r3, #0
 800bbaa:	60fb      	str	r3, [r7, #12]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2140      	movs	r1, #64	; 0x40
 800bbc0:	438a      	bics	r2, r1
 800bbc2:	601a      	str	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bbc6:	69bb      	ldr	r3, [r7, #24]
 800bbc8:	0a1b      	lsrs	r3, r3, #8
 800bbca:	001a      	movs	r2, r3
 800bbcc:	2301      	movs	r3, #1
 800bbce:	4013      	ands	r3, r2
 800bbd0:	d00c      	beq.n	800bbec <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbd6:	2208      	movs	r2, #8
 800bbd8:	431a      	orrs	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	60bb      	str	r3, [r7, #8]
 800bbea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d04c      	beq.n	800bc8e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	21e0      	movs	r1, #224	; 0xe0
 800bc00:	438a      	bics	r2, r1
 800bc02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	225d      	movs	r2, #93	; 0x5d
 800bc08:	2101      	movs	r1, #1
 800bc0a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	2202      	movs	r2, #2
 800bc10:	4013      	ands	r3, r2
 800bc12:	d103      	bne.n	800bc1c <HAL_SPI_IRQHandler+0x17c>
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	2201      	movs	r2, #1
 800bc18:	4013      	ands	r3, r2
 800bc1a:	d032      	beq.n	800bc82 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	685a      	ldr	r2, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2103      	movs	r1, #3
 800bc28:	438a      	bics	r2, r1
 800bc2a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d010      	beq.n	800bc56 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc38:	4a17      	ldr	r2, [pc, #92]	; (800bc98 <HAL_SPI_IRQHandler+0x1f8>)
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc40:	0018      	movs	r0, r3
 800bc42:	f7fb ff33 	bl	8007aac <HAL_DMA_Abort_IT>
 800bc46:	1e03      	subs	r3, r0, #0
 800bc48:	d005      	beq.n	800bc56 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc4e:	2240      	movs	r2, #64	; 0x40
 800bc50:	431a      	orrs	r2, r3
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d016      	beq.n	800bc8c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc62:	4a0d      	ldr	r2, [pc, #52]	; (800bc98 <HAL_SPI_IRQHandler+0x1f8>)
 800bc64:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f7fb ff1e 	bl	8007aac <HAL_DMA_Abort_IT>
 800bc70:	1e03      	subs	r3, r0, #0
 800bc72:	d00b      	beq.n	800bc8c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc78:	2240      	movs	r2, #64	; 0x40
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800bc80:	e004      	b.n	800bc8c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	0018      	movs	r0, r3
 800bc86:	f000 f809 	bl	800bc9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc8a:	e000      	b.n	800bc8e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800bc8c:	46c0      	nop			; (mov r8, r8)
    return;
 800bc8e:	46c0      	nop			; (mov r8, r8)
  }
}
 800bc90:	46bd      	mov	sp, r7
 800bc92:	b008      	add	sp, #32
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	46c0      	nop			; (mov r8, r8)
 800bc98:	0800bcad 	.word	0x0800bcad

0800bc9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bca4:	46c0      	nop			; (mov r8, r8)
 800bca6:	46bd      	mov	sp, r7
 800bca8:	b002      	add	sp, #8
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2246      	movs	r2, #70	; 0x46
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	0018      	movs	r0, r3
 800bccc:	f7ff ffe6 	bl	800bc9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bcd0:	46c0      	nop			; (mov r8, r8)
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	b004      	add	sp, #16
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b088      	sub	sp, #32
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	603b      	str	r3, [r7, #0]
 800bce4:	1dfb      	adds	r3, r7, #7
 800bce6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bce8:	f7fb fa4e 	bl	8007188 <HAL_GetTick>
 800bcec:	0002      	movs	r2, r0
 800bcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf0:	1a9b      	subs	r3, r3, r2
 800bcf2:	683a      	ldr	r2, [r7, #0]
 800bcf4:	18d3      	adds	r3, r2, r3
 800bcf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bcf8:	f7fb fa46 	bl	8007188 <HAL_GetTick>
 800bcfc:	0003      	movs	r3, r0
 800bcfe:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bd00:	4b3a      	ldr	r3, [pc, #232]	; (800bdec <SPI_WaitFlagStateUntilTimeout+0x114>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	015b      	lsls	r3, r3, #5
 800bd06:	0d1b      	lsrs	r3, r3, #20
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	4353      	muls	r3, r2
 800bd0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd0e:	e058      	b.n	800bdc2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	3301      	adds	r3, #1
 800bd14:	d055      	beq.n	800bdc2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bd16:	f7fb fa37 	bl	8007188 <HAL_GetTick>
 800bd1a:	0002      	movs	r2, r0
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	69fa      	ldr	r2, [r7, #28]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d902      	bls.n	800bd2c <SPI_WaitFlagStateUntilTimeout+0x54>
 800bd26:	69fb      	ldr	r3, [r7, #28]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d142      	bne.n	800bdb2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	21e0      	movs	r1, #224	; 0xe0
 800bd38:	438a      	bics	r2, r1
 800bd3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	2382      	movs	r3, #130	; 0x82
 800bd42:	005b      	lsls	r3, r3, #1
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d113      	bne.n	800bd70 <SPI_WaitFlagStateUntilTimeout+0x98>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	2380      	movs	r3, #128	; 0x80
 800bd4e:	021b      	lsls	r3, r3, #8
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d005      	beq.n	800bd60 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	689a      	ldr	r2, [r3, #8]
 800bd58:	2380      	movs	r3, #128	; 0x80
 800bd5a:	00db      	lsls	r3, r3, #3
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d107      	bne.n	800bd70 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2140      	movs	r1, #64	; 0x40
 800bd6c:	438a      	bics	r2, r1
 800bd6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd74:	2380      	movs	r3, #128	; 0x80
 800bd76:	019b      	lsls	r3, r3, #6
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d110      	bne.n	800bd9e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	491a      	ldr	r1, [pc, #104]	; (800bdf0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800bd88:	400a      	ands	r2, r1
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	2180      	movs	r1, #128	; 0x80
 800bd98:	0189      	lsls	r1, r1, #6
 800bd9a:	430a      	orrs	r2, r1
 800bd9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	225d      	movs	r2, #93	; 0x5d
 800bda2:	2101      	movs	r1, #1
 800bda4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	225c      	movs	r2, #92	; 0x5c
 800bdaa:	2100      	movs	r1, #0
 800bdac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bdae:	2303      	movs	r3, #3
 800bdb0:	e017      	b.n	800bde2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	68ba      	ldr	r2, [r7, #8]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	425a      	negs	r2, r3
 800bdd2:	4153      	adcs	r3, r2
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	001a      	movs	r2, r3
 800bdd8:	1dfb      	adds	r3, r7, #7
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d197      	bne.n	800bd10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	0018      	movs	r0, r3
 800bde4:	46bd      	mov	sp, r7
 800bde6:	b008      	add	sp, #32
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	20000068 	.word	0x20000068
 800bdf0:	ffffdfff 	.word	0xffffdfff

0800bdf4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800be02:	f7fb f9c1 	bl	8007188 <HAL_GetTick>
 800be06:	0002      	movs	r2, r0
 800be08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	18d3      	adds	r3, r2, r3
 800be10:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800be12:	f7fb f9b9 	bl	8007188 <HAL_GetTick>
 800be16:	0003      	movs	r3, r0
 800be18:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800be1a:	4b3f      	ldr	r3, [pc, #252]	; (800bf18 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	0013      	movs	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	189b      	adds	r3, r3, r2
 800be24:	00da      	lsls	r2, r3, #3
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	0d1b      	lsrs	r3, r3, #20
 800be2a:	69fa      	ldr	r2, [r7, #28]
 800be2c:	4353      	muls	r3, r2
 800be2e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800be30:	e064      	b.n	800befc <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800be32:	68ba      	ldr	r2, [r7, #8]
 800be34:	23c0      	movs	r3, #192	; 0xc0
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	429a      	cmp	r2, r3
 800be3a:	d106      	bne.n	800be4a <SPI_WaitFifoStateUntilTimeout+0x56>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d103      	bne.n	800be4a <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	330c      	adds	r3, #12
 800be48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	d055      	beq.n	800befc <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800be50:	f7fb f99a 	bl	8007188 <HAL_GetTick>
 800be54:	0002      	movs	r2, r0
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	69fa      	ldr	r2, [r7, #28]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d902      	bls.n	800be66 <SPI_WaitFifoStateUntilTimeout+0x72>
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d142      	bne.n	800beec <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	21e0      	movs	r1, #224	; 0xe0
 800be72:	438a      	bics	r2, r1
 800be74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	2382      	movs	r3, #130	; 0x82
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	429a      	cmp	r2, r3
 800be80:	d113      	bne.n	800beaa <SPI_WaitFifoStateUntilTimeout+0xb6>
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	2380      	movs	r3, #128	; 0x80
 800be88:	021b      	lsls	r3, r3, #8
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d005      	beq.n	800be9a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	689a      	ldr	r2, [r3, #8]
 800be92:	2380      	movs	r3, #128	; 0x80
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	429a      	cmp	r2, r3
 800be98:	d107      	bne.n	800beaa <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2140      	movs	r1, #64	; 0x40
 800bea6:	438a      	bics	r2, r1
 800bea8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beae:	2380      	movs	r3, #128	; 0x80
 800beb0:	019b      	lsls	r3, r3, #6
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d110      	bne.n	800bed8 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4916      	ldr	r1, [pc, #88]	; (800bf1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800bec2:	400a      	ands	r2, r1
 800bec4:	601a      	str	r2, [r3, #0]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2180      	movs	r1, #128	; 0x80
 800bed2:	0189      	lsls	r1, r1, #6
 800bed4:	430a      	orrs	r2, r1
 800bed6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	225d      	movs	r2, #93	; 0x5d
 800bedc:	2101      	movs	r1, #1
 800bede:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	225c      	movs	r2, #92	; 0x5c
 800bee4:	2100      	movs	r1, #0
 800bee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e010      	b.n	800bf0e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800bef2:	2300      	movs	r3, #0
 800bef4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	3b01      	subs	r3, #1
 800befa:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	4013      	ands	r3, r2
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d192      	bne.n	800be32 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	0018      	movs	r0, r3
 800bf10:	46bd      	mov	sp, r7
 800bf12:	b008      	add	sp, #32
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	46c0      	nop			; (mov r8, r8)
 800bf18:	20000068 	.word	0x20000068
 800bf1c:	ffffdfff 	.word	0xffffdfff

0800bf20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af02      	add	r7, sp, #8
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	2382      	movs	r3, #130	; 0x82
 800bf32:	005b      	lsls	r3, r3, #1
 800bf34:	429a      	cmp	r2, r3
 800bf36:	d113      	bne.n	800bf60 <SPI_EndRxTransaction+0x40>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	021b      	lsls	r3, r3, #8
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d005      	beq.n	800bf50 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	2380      	movs	r3, #128	; 0x80
 800bf4a:	00db      	lsls	r3, r3, #3
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d107      	bne.n	800bf60 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2140      	movs	r1, #64	; 0x40
 800bf5c:	438a      	bics	r2, r1
 800bf5e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	0013      	movs	r3, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2180      	movs	r1, #128	; 0x80
 800bf6e:	f7ff feb3 	bl	800bcd8 <SPI_WaitFlagStateUntilTimeout>
 800bf72:	1e03      	subs	r3, r0, #0
 800bf74:	d007      	beq.n	800bf86 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	431a      	orrs	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bf82:	2303      	movs	r3, #3
 800bf84:	e026      	b.n	800bfd4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	2382      	movs	r3, #130	; 0x82
 800bf8c:	005b      	lsls	r3, r3, #1
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d11f      	bne.n	800bfd2 <SPI_EndRxTransaction+0xb2>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	689a      	ldr	r2, [r3, #8]
 800bf96:	2380      	movs	r3, #128	; 0x80
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d005      	beq.n	800bfaa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	689a      	ldr	r2, [r3, #8]
 800bfa2:	2380      	movs	r3, #128	; 0x80
 800bfa4:	00db      	lsls	r3, r3, #3
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d113      	bne.n	800bfd2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfaa:	68ba      	ldr	r2, [r7, #8]
 800bfac:	23c0      	movs	r3, #192	; 0xc0
 800bfae:	00d9      	lsls	r1, r3, #3
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	0013      	movs	r3, r2
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f7ff ff1b 	bl	800bdf4 <SPI_WaitFifoStateUntilTimeout>
 800bfbe:	1e03      	subs	r3, r0, #0
 800bfc0:	d007      	beq.n	800bfd2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfc6:	2220      	movs	r2, #32
 800bfc8:	431a      	orrs	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bfce:	2303      	movs	r3, #3
 800bfd0:	e000      	b.n	800bfd4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	b004      	add	sp, #16
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af02      	add	r7, sp, #8
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	23c0      	movs	r3, #192	; 0xc0
 800bfec:	0159      	lsls	r1, r3, #5
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	0013      	movs	r3, r2
 800bff6:	2200      	movs	r2, #0
 800bff8:	f7ff fefc 	bl	800bdf4 <SPI_WaitFifoStateUntilTimeout>
 800bffc:	1e03      	subs	r3, r0, #0
 800bffe:	d007      	beq.n	800c010 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c004:	2220      	movs	r2, #32
 800c006:	431a      	orrs	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c00c:	2303      	movs	r3, #3
 800c00e:	e027      	b.n	800c060 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	0013      	movs	r3, r2
 800c01a:	2200      	movs	r2, #0
 800c01c:	2180      	movs	r1, #128	; 0x80
 800c01e:	f7ff fe5b 	bl	800bcd8 <SPI_WaitFlagStateUntilTimeout>
 800c022:	1e03      	subs	r3, r0, #0
 800c024:	d007      	beq.n	800c036 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c02a:	2220      	movs	r2, #32
 800c02c:	431a      	orrs	r2, r3
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	e014      	b.n	800c060 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	23c0      	movs	r3, #192	; 0xc0
 800c03a:	00d9      	lsls	r1, r3, #3
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	0013      	movs	r3, r2
 800c044:	2200      	movs	r2, #0
 800c046:	f7ff fed5 	bl	800bdf4 <SPI_WaitFifoStateUntilTimeout>
 800c04a:	1e03      	subs	r3, r0, #0
 800c04c:	d007      	beq.n	800c05e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c052:	2220      	movs	r2, #32
 800c054:	431a      	orrs	r2, r3
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800c05a:	2303      	movs	r3, #3
 800c05c:	e000      	b.n	800c060 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	0018      	movs	r0, r3
 800c062:	46bd      	mov	sp, r7
 800c064:	b004      	add	sp, #16
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d101      	bne.n	800c07a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e04a      	b.n	800c110 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	223d      	movs	r2, #61	; 0x3d
 800c07e:	5c9b      	ldrb	r3, [r3, r2]
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d107      	bne.n	800c096 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	223c      	movs	r2, #60	; 0x3c
 800c08a:	2100      	movs	r1, #0
 800c08c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	0018      	movs	r0, r3
 800c092:	f7fa fda1 	bl	8006bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	223d      	movs	r2, #61	; 0x3d
 800c09a:	2102      	movs	r1, #2
 800c09c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	0019      	movs	r1, r3
 800c0a8:	0010      	movs	r0, r2
 800c0aa:	f000 fb41 	bl	800c730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2248      	movs	r2, #72	; 0x48
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	223e      	movs	r2, #62	; 0x3e
 800c0ba:	2101      	movs	r1, #1
 800c0bc:	5499      	strb	r1, [r3, r2]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	223f      	movs	r2, #63	; 0x3f
 800c0c2:	2101      	movs	r1, #1
 800c0c4:	5499      	strb	r1, [r3, r2]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2240      	movs	r2, #64	; 0x40
 800c0ca:	2101      	movs	r1, #1
 800c0cc:	5499      	strb	r1, [r3, r2]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2241      	movs	r2, #65	; 0x41
 800c0d2:	2101      	movs	r1, #1
 800c0d4:	5499      	strb	r1, [r3, r2]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2242      	movs	r2, #66	; 0x42
 800c0da:	2101      	movs	r1, #1
 800c0dc:	5499      	strb	r1, [r3, r2]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2243      	movs	r2, #67	; 0x43
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2244      	movs	r2, #68	; 0x44
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	5499      	strb	r1, [r3, r2]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2245      	movs	r2, #69	; 0x45
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	5499      	strb	r1, [r3, r2]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2246      	movs	r2, #70	; 0x46
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	5499      	strb	r1, [r3, r2]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2247      	movs	r2, #71	; 0x47
 800c102:	2101      	movs	r1, #1
 800c104:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	223d      	movs	r2, #61	; 0x3d
 800c10a:	2101      	movs	r1, #1
 800c10c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	0018      	movs	r0, r3
 800c112:	46bd      	mov	sp, r7
 800c114:	b002      	add	sp, #8
 800c116:	bd80      	pop	{r7, pc}

0800c118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e04a      	b.n	800c1c0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	223d      	movs	r2, #61	; 0x3d
 800c12e:	5c9b      	ldrb	r3, [r3, r2]
 800c130:	b2db      	uxtb	r3, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	d107      	bne.n	800c146 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	223c      	movs	r2, #60	; 0x3c
 800c13a:	2100      	movs	r1, #0
 800c13c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	0018      	movs	r0, r3
 800c142:	f000 f841 	bl	800c1c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	223d      	movs	r2, #61	; 0x3d
 800c14a:	2102      	movs	r1, #2
 800c14c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3304      	adds	r3, #4
 800c156:	0019      	movs	r1, r3
 800c158:	0010      	movs	r0, r2
 800c15a:	f000 fae9 	bl	800c730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2248      	movs	r2, #72	; 0x48
 800c162:	2101      	movs	r1, #1
 800c164:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	223e      	movs	r2, #62	; 0x3e
 800c16a:	2101      	movs	r1, #1
 800c16c:	5499      	strb	r1, [r3, r2]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	223f      	movs	r2, #63	; 0x3f
 800c172:	2101      	movs	r1, #1
 800c174:	5499      	strb	r1, [r3, r2]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2240      	movs	r2, #64	; 0x40
 800c17a:	2101      	movs	r1, #1
 800c17c:	5499      	strb	r1, [r3, r2]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2241      	movs	r2, #65	; 0x41
 800c182:	2101      	movs	r1, #1
 800c184:	5499      	strb	r1, [r3, r2]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2242      	movs	r2, #66	; 0x42
 800c18a:	2101      	movs	r1, #1
 800c18c:	5499      	strb	r1, [r3, r2]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2243      	movs	r2, #67	; 0x43
 800c192:	2101      	movs	r1, #1
 800c194:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2244      	movs	r2, #68	; 0x44
 800c19a:	2101      	movs	r1, #1
 800c19c:	5499      	strb	r1, [r3, r2]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2245      	movs	r2, #69	; 0x45
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	5499      	strb	r1, [r3, r2]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2246      	movs	r2, #70	; 0x46
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	5499      	strb	r1, [r3, r2]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2247      	movs	r2, #71	; 0x47
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	223d      	movs	r2, #61	; 0x3d
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c1be:	2300      	movs	r3, #0
}
 800c1c0:	0018      	movs	r0, r3
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	b002      	add	sp, #8
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c1d0:	46c0      	nop			; (mov r8, r8)
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	b002      	add	sp, #8
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d108      	bne.n	800c1fa <HAL_TIM_PWM_Start+0x22>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	223e      	movs	r2, #62	; 0x3e
 800c1ec:	5c9b      	ldrb	r3, [r3, r2]
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	1e5a      	subs	r2, r3, #1
 800c1f4:	4193      	sbcs	r3, r2
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	e037      	b.n	800c26a <HAL_TIM_PWM_Start+0x92>
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	2b04      	cmp	r3, #4
 800c1fe:	d108      	bne.n	800c212 <HAL_TIM_PWM_Start+0x3a>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	223f      	movs	r2, #63	; 0x3f
 800c204:	5c9b      	ldrb	r3, [r3, r2]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	3b01      	subs	r3, #1
 800c20a:	1e5a      	subs	r2, r3, #1
 800c20c:	4193      	sbcs	r3, r2
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	e02b      	b.n	800c26a <HAL_TIM_PWM_Start+0x92>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b08      	cmp	r3, #8
 800c216:	d108      	bne.n	800c22a <HAL_TIM_PWM_Start+0x52>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2240      	movs	r2, #64	; 0x40
 800c21c:	5c9b      	ldrb	r3, [r3, r2]
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	3b01      	subs	r3, #1
 800c222:	1e5a      	subs	r2, r3, #1
 800c224:	4193      	sbcs	r3, r2
 800c226:	b2db      	uxtb	r3, r3
 800c228:	e01f      	b.n	800c26a <HAL_TIM_PWM_Start+0x92>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b0c      	cmp	r3, #12
 800c22e:	d108      	bne.n	800c242 <HAL_TIM_PWM_Start+0x6a>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2241      	movs	r2, #65	; 0x41
 800c234:	5c9b      	ldrb	r3, [r3, r2]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	3b01      	subs	r3, #1
 800c23a:	1e5a      	subs	r2, r3, #1
 800c23c:	4193      	sbcs	r3, r2
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	e013      	b.n	800c26a <HAL_TIM_PWM_Start+0x92>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b10      	cmp	r3, #16
 800c246:	d108      	bne.n	800c25a <HAL_TIM_PWM_Start+0x82>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2242      	movs	r2, #66	; 0x42
 800c24c:	5c9b      	ldrb	r3, [r3, r2]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	3b01      	subs	r3, #1
 800c252:	1e5a      	subs	r2, r3, #1
 800c254:	4193      	sbcs	r3, r2
 800c256:	b2db      	uxtb	r3, r3
 800c258:	e007      	b.n	800c26a <HAL_TIM_PWM_Start+0x92>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2243      	movs	r2, #67	; 0x43
 800c25e:	5c9b      	ldrb	r3, [r3, r2]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	3b01      	subs	r3, #1
 800c264:	1e5a      	subs	r2, r3, #1
 800c266:	4193      	sbcs	r3, r2
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d001      	beq.n	800c272 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e08b      	b.n	800c38a <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d104      	bne.n	800c282 <HAL_TIM_PWM_Start+0xaa>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	223e      	movs	r2, #62	; 0x3e
 800c27c:	2102      	movs	r1, #2
 800c27e:	5499      	strb	r1, [r3, r2]
 800c280:	e023      	b.n	800c2ca <HAL_TIM_PWM_Start+0xf2>
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	2b04      	cmp	r3, #4
 800c286:	d104      	bne.n	800c292 <HAL_TIM_PWM_Start+0xba>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	223f      	movs	r2, #63	; 0x3f
 800c28c:	2102      	movs	r1, #2
 800c28e:	5499      	strb	r1, [r3, r2]
 800c290:	e01b      	b.n	800c2ca <HAL_TIM_PWM_Start+0xf2>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2b08      	cmp	r3, #8
 800c296:	d104      	bne.n	800c2a2 <HAL_TIM_PWM_Start+0xca>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2240      	movs	r2, #64	; 0x40
 800c29c:	2102      	movs	r1, #2
 800c29e:	5499      	strb	r1, [r3, r2]
 800c2a0:	e013      	b.n	800c2ca <HAL_TIM_PWM_Start+0xf2>
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b0c      	cmp	r3, #12
 800c2a6:	d104      	bne.n	800c2b2 <HAL_TIM_PWM_Start+0xda>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2241      	movs	r2, #65	; 0x41
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	5499      	strb	r1, [r3, r2]
 800c2b0:	e00b      	b.n	800c2ca <HAL_TIM_PWM_Start+0xf2>
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b10      	cmp	r3, #16
 800c2b6:	d104      	bne.n	800c2c2 <HAL_TIM_PWM_Start+0xea>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2242      	movs	r2, #66	; 0x42
 800c2bc:	2102      	movs	r1, #2
 800c2be:	5499      	strb	r1, [r3, r2]
 800c2c0:	e003      	b.n	800c2ca <HAL_TIM_PWM_Start+0xf2>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2243      	movs	r2, #67	; 0x43
 800c2c6:	2102      	movs	r1, #2
 800c2c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6839      	ldr	r1, [r7, #0]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	f000 fe0c 	bl	800cef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a2d      	ldr	r2, [pc, #180]	; (800c394 <HAL_TIM_PWM_Start+0x1bc>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d00e      	beq.n	800c300 <HAL_TIM_PWM_Start+0x128>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a2c      	ldr	r2, [pc, #176]	; (800c398 <HAL_TIM_PWM_Start+0x1c0>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d009      	beq.n	800c300 <HAL_TIM_PWM_Start+0x128>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a2a      	ldr	r2, [pc, #168]	; (800c39c <HAL_TIM_PWM_Start+0x1c4>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d004      	beq.n	800c300 <HAL_TIM_PWM_Start+0x128>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a29      	ldr	r2, [pc, #164]	; (800c3a0 <HAL_TIM_PWM_Start+0x1c8>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d101      	bne.n	800c304 <HAL_TIM_PWM_Start+0x12c>
 800c300:	2301      	movs	r3, #1
 800c302:	e000      	b.n	800c306 <HAL_TIM_PWM_Start+0x12e>
 800c304:	2300      	movs	r3, #0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d008      	beq.n	800c31c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2180      	movs	r1, #128	; 0x80
 800c316:	0209      	lsls	r1, r1, #8
 800c318:	430a      	orrs	r2, r1
 800c31a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a1c      	ldr	r2, [pc, #112]	; (800c394 <HAL_TIM_PWM_Start+0x1bc>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d00f      	beq.n	800c346 <HAL_TIM_PWM_Start+0x16e>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	2380      	movs	r3, #128	; 0x80
 800c32c:	05db      	lsls	r3, r3, #23
 800c32e:	429a      	cmp	r2, r3
 800c330:	d009      	beq.n	800c346 <HAL_TIM_PWM_Start+0x16e>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a1b      	ldr	r2, [pc, #108]	; (800c3a4 <HAL_TIM_PWM_Start+0x1cc>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d004      	beq.n	800c346 <HAL_TIM_PWM_Start+0x16e>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a15      	ldr	r2, [pc, #84]	; (800c398 <HAL_TIM_PWM_Start+0x1c0>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d116      	bne.n	800c374 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	4a16      	ldr	r2, [pc, #88]	; (800c3a8 <HAL_TIM_PWM_Start+0x1d0>)
 800c34e:	4013      	ands	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b06      	cmp	r3, #6
 800c356:	d016      	beq.n	800c386 <HAL_TIM_PWM_Start+0x1ae>
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	2380      	movs	r3, #128	; 0x80
 800c35c:	025b      	lsls	r3, r3, #9
 800c35e:	429a      	cmp	r2, r3
 800c360:	d011      	beq.n	800c386 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2101      	movs	r1, #1
 800c36e:	430a      	orrs	r2, r1
 800c370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c372:	e008      	b.n	800c386 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2101      	movs	r1, #1
 800c380:	430a      	orrs	r2, r1
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	e000      	b.n	800c388 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c386:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	0018      	movs	r0, r3
 800c38c:	46bd      	mov	sp, r7
 800c38e:	b004      	add	sp, #16
 800c390:	bd80      	pop	{r7, pc}
 800c392:	46c0      	nop			; (mov r8, r8)
 800c394:	40012c00 	.word	0x40012c00
 800c398:	40014000 	.word	0x40014000
 800c39c:	40014400 	.word	0x40014400
 800c3a0:	40014800 	.word	0x40014800
 800c3a4:	40000400 	.word	0x40000400
 800c3a8:	00010007 	.word	0x00010007

0800c3ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	223c      	movs	r2, #60	; 0x3c
 800c3bc:	5c9b      	ldrb	r3, [r3, r2]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d101      	bne.n	800c3c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	e0df      	b.n	800c586 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	223c      	movs	r2, #60	; 0x3c
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b14      	cmp	r3, #20
 800c3d2:	d900      	bls.n	800c3d6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800c3d4:	e0d1      	b.n	800c57a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	009a      	lsls	r2, r3, #2
 800c3da:	4b6d      	ldr	r3, [pc, #436]	; (800c590 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800c3dc:	18d3      	adds	r3, r2, r3
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	0011      	movs	r1, r2
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	f000 fa20 	bl	800c830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2108      	movs	r1, #8
 800c3fc:	430a      	orrs	r2, r1
 800c3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	699a      	ldr	r2, [r3, #24]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	2104      	movs	r1, #4
 800c40c:	438a      	bics	r2, r1
 800c40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6999      	ldr	r1, [r3, #24]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	691a      	ldr	r2, [r3, #16]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	430a      	orrs	r2, r1
 800c420:	619a      	str	r2, [r3, #24]
      break;
 800c422:	e0ab      	b.n	800c57c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	0011      	movs	r1, r2
 800c42c:	0018      	movs	r0, r3
 800c42e:	f000 fa89 	bl	800c944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	699a      	ldr	r2, [r3, #24]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2180      	movs	r1, #128	; 0x80
 800c43e:	0109      	lsls	r1, r1, #4
 800c440:	430a      	orrs	r2, r1
 800c442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	699a      	ldr	r2, [r3, #24]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4951      	ldr	r1, [pc, #324]	; (800c594 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800c450:	400a      	ands	r2, r1
 800c452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6999      	ldr	r1, [r3, #24]
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	021a      	lsls	r2, r3, #8
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	430a      	orrs	r2, r1
 800c466:	619a      	str	r2, [r3, #24]
      break;
 800c468:	e088      	b.n	800c57c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68ba      	ldr	r2, [r7, #8]
 800c470:	0011      	movs	r1, r2
 800c472:	0018      	movs	r0, r3
 800c474:	f000 faea 	bl	800ca4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	69da      	ldr	r2, [r3, #28]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2108      	movs	r1, #8
 800c484:	430a      	orrs	r2, r1
 800c486:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	69da      	ldr	r2, [r3, #28]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2104      	movs	r1, #4
 800c494:	438a      	bics	r2, r1
 800c496:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	69d9      	ldr	r1, [r3, #28]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	61da      	str	r2, [r3, #28]
      break;
 800c4aa:	e067      	b.n	800c57c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	0011      	movs	r1, r2
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	f000 fb51 	bl	800cb5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	69da      	ldr	r2, [r3, #28]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2180      	movs	r1, #128	; 0x80
 800c4c6:	0109      	lsls	r1, r1, #4
 800c4c8:	430a      	orrs	r2, r1
 800c4ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	69da      	ldr	r2, [r3, #28]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	492f      	ldr	r1, [pc, #188]	; (800c594 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800c4d8:	400a      	ands	r2, r1
 800c4da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	69d9      	ldr	r1, [r3, #28]
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	021a      	lsls	r2, r3, #8
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	430a      	orrs	r2, r1
 800c4ee:	61da      	str	r2, [r3, #28]
      break;
 800c4f0:	e044      	b.n	800c57c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	0011      	movs	r1, r2
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	f000 fb98 	bl	800cc30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2108      	movs	r1, #8
 800c50c:	430a      	orrs	r2, r1
 800c50e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2104      	movs	r1, #4
 800c51c:	438a      	bics	r2, r1
 800c51e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	691a      	ldr	r2, [r3, #16]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	430a      	orrs	r2, r1
 800c530:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c532:	e023      	b.n	800c57c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	0011      	movs	r1, r2
 800c53c:	0018      	movs	r0, r3
 800c53e:	f000 fbd7 	bl	800ccf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2180      	movs	r1, #128	; 0x80
 800c54e:	0109      	lsls	r1, r1, #4
 800c550:	430a      	orrs	r2, r1
 800c552:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	490d      	ldr	r1, [pc, #52]	; (800c594 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800c560:	400a      	ands	r2, r1
 800c562:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	021a      	lsls	r2, r3, #8
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c578:	e000      	b.n	800c57c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800c57a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	223c      	movs	r2, #60	; 0x3c
 800c580:	2100      	movs	r1, #0
 800c582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	0018      	movs	r0, r3
 800c588:	46bd      	mov	sp, r7
 800c58a:	b004      	add	sp, #16
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	46c0      	nop			; (mov r8, r8)
 800c590:	0801b28c 	.word	0x0801b28c
 800c594:	fffffbff 	.word	0xfffffbff

0800c598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	223c      	movs	r2, #60	; 0x3c
 800c5a6:	5c9b      	ldrb	r3, [r3, r2]
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d101      	bne.n	800c5b0 <HAL_TIM_ConfigClockSource+0x18>
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	e0b7      	b.n	800c720 <HAL_TIM_ConfigClockSource+0x188>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	223c      	movs	r2, #60	; 0x3c
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	223d      	movs	r2, #61	; 0x3d
 800c5bc:	2102      	movs	r1, #2
 800c5be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	4a57      	ldr	r2, [pc, #348]	; (800c728 <HAL_TIM_ConfigClockSource+0x190>)
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	4a56      	ldr	r2, [pc, #344]	; (800c72c <HAL_TIM_ConfigClockSource+0x194>)
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2280      	movs	r2, #128	; 0x80
 800c5e6:	0192      	lsls	r2, r2, #6
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d040      	beq.n	800c66e <HAL_TIM_ConfigClockSource+0xd6>
 800c5ec:	2280      	movs	r2, #128	; 0x80
 800c5ee:	0192      	lsls	r2, r2, #6
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d900      	bls.n	800c5f6 <HAL_TIM_ConfigClockSource+0x5e>
 800c5f4:	e088      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c5f6:	2280      	movs	r2, #128	; 0x80
 800c5f8:	0152      	lsls	r2, r2, #5
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d100      	bne.n	800c600 <HAL_TIM_ConfigClockSource+0x68>
 800c5fe:	e085      	b.n	800c70c <HAL_TIM_ConfigClockSource+0x174>
 800c600:	2280      	movs	r2, #128	; 0x80
 800c602:	0152      	lsls	r2, r2, #5
 800c604:	4293      	cmp	r3, r2
 800c606:	d900      	bls.n	800c60a <HAL_TIM_ConfigClockSource+0x72>
 800c608:	e07e      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c60a:	2b70      	cmp	r3, #112	; 0x70
 800c60c:	d018      	beq.n	800c640 <HAL_TIM_ConfigClockSource+0xa8>
 800c60e:	d900      	bls.n	800c612 <HAL_TIM_ConfigClockSource+0x7a>
 800c610:	e07a      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c612:	2b60      	cmp	r3, #96	; 0x60
 800c614:	d04f      	beq.n	800c6b6 <HAL_TIM_ConfigClockSource+0x11e>
 800c616:	d900      	bls.n	800c61a <HAL_TIM_ConfigClockSource+0x82>
 800c618:	e076      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c61a:	2b50      	cmp	r3, #80	; 0x50
 800c61c:	d03b      	beq.n	800c696 <HAL_TIM_ConfigClockSource+0xfe>
 800c61e:	d900      	bls.n	800c622 <HAL_TIM_ConfigClockSource+0x8a>
 800c620:	e072      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c622:	2b40      	cmp	r3, #64	; 0x40
 800c624:	d057      	beq.n	800c6d6 <HAL_TIM_ConfigClockSource+0x13e>
 800c626:	d900      	bls.n	800c62a <HAL_TIM_ConfigClockSource+0x92>
 800c628:	e06e      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c62a:	2b30      	cmp	r3, #48	; 0x30
 800c62c:	d063      	beq.n	800c6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800c62e:	d86b      	bhi.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c630:	2b20      	cmp	r3, #32
 800c632:	d060      	beq.n	800c6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800c634:	d868      	bhi.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
 800c636:	2b00      	cmp	r3, #0
 800c638:	d05d      	beq.n	800c6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800c63a:	2b10      	cmp	r3, #16
 800c63c:	d05b      	beq.n	800c6f6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c63e:	e063      	b.n	800c708 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	6899      	ldr	r1, [r3, #8]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f000 fc2e 	bl	800ceb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2277      	movs	r2, #119	; 0x77
 800c660:	4313      	orrs	r3, r2
 800c662:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	609a      	str	r2, [r3, #8]
      break;
 800c66c:	e04f      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6818      	ldr	r0, [r3, #0]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	6899      	ldr	r1, [r3, #8]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	685a      	ldr	r2, [r3, #4]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	f000 fc17 	bl	800ceb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2180      	movs	r1, #128	; 0x80
 800c68e:	01c9      	lsls	r1, r1, #7
 800c690:	430a      	orrs	r2, r1
 800c692:	609a      	str	r2, [r3, #8]
      break;
 800c694:	e03b      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6818      	ldr	r0, [r3, #0]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	6859      	ldr	r1, [r3, #4]
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	001a      	movs	r2, r3
 800c6a4:	f000 fb88 	bl	800cdb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2150      	movs	r1, #80	; 0x50
 800c6ae:	0018      	movs	r0, r3
 800c6b0:	f000 fbe2 	bl	800ce78 <TIM_ITRx_SetConfig>
      break;
 800c6b4:	e02b      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6818      	ldr	r0, [r3, #0]
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	6859      	ldr	r1, [r3, #4]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	001a      	movs	r2, r3
 800c6c4:	f000 fba6 	bl	800ce14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2160      	movs	r1, #96	; 0x60
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	f000 fbd2 	bl	800ce78 <TIM_ITRx_SetConfig>
      break;
 800c6d4:	e01b      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	6859      	ldr	r1, [r3, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	68db      	ldr	r3, [r3, #12]
 800c6e2:	001a      	movs	r2, r3
 800c6e4:	f000 fb68 	bl	800cdb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2140      	movs	r1, #64	; 0x40
 800c6ee:	0018      	movs	r0, r3
 800c6f0:	f000 fbc2 	bl	800ce78 <TIM_ITRx_SetConfig>
      break;
 800c6f4:	e00b      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	0019      	movs	r1, r3
 800c700:	0010      	movs	r0, r2
 800c702:	f000 fbb9 	bl	800ce78 <TIM_ITRx_SetConfig>
        break;
 800c706:	e002      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800c708:	46c0      	nop			; (mov r8, r8)
 800c70a:	e000      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800c70c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	223d      	movs	r2, #61	; 0x3d
 800c712:	2101      	movs	r1, #1
 800c714:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	223c      	movs	r2, #60	; 0x3c
 800c71a:	2100      	movs	r1, #0
 800c71c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	0018      	movs	r0, r3
 800c722:	46bd      	mov	sp, r7
 800c724:	b004      	add	sp, #16
 800c726:	bd80      	pop	{r7, pc}
 800c728:	ffceff88 	.word	0xffceff88
 800c72c:	ffff00ff 	.word	0xffff00ff

0800c730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a34      	ldr	r2, [pc, #208]	; (800c814 <TIM_Base_SetConfig+0xe4>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d008      	beq.n	800c75a <TIM_Base_SetConfig+0x2a>
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	2380      	movs	r3, #128	; 0x80
 800c74c:	05db      	lsls	r3, r3, #23
 800c74e:	429a      	cmp	r2, r3
 800c750:	d003      	beq.n	800c75a <TIM_Base_SetConfig+0x2a>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a30      	ldr	r2, [pc, #192]	; (800c818 <TIM_Base_SetConfig+0xe8>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d108      	bne.n	800c76c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2270      	movs	r2, #112	; 0x70
 800c75e:	4393      	bics	r3, r2
 800c760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	4313      	orrs	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a29      	ldr	r2, [pc, #164]	; (800c814 <TIM_Base_SetConfig+0xe4>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d018      	beq.n	800c7a6 <TIM_Base_SetConfig+0x76>
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	2380      	movs	r3, #128	; 0x80
 800c778:	05db      	lsls	r3, r3, #23
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d013      	beq.n	800c7a6 <TIM_Base_SetConfig+0x76>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a25      	ldr	r2, [pc, #148]	; (800c818 <TIM_Base_SetConfig+0xe8>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d00f      	beq.n	800c7a6 <TIM_Base_SetConfig+0x76>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a24      	ldr	r2, [pc, #144]	; (800c81c <TIM_Base_SetConfig+0xec>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d00b      	beq.n	800c7a6 <TIM_Base_SetConfig+0x76>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a23      	ldr	r2, [pc, #140]	; (800c820 <TIM_Base_SetConfig+0xf0>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d007      	beq.n	800c7a6 <TIM_Base_SetConfig+0x76>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a22      	ldr	r2, [pc, #136]	; (800c824 <TIM_Base_SetConfig+0xf4>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d003      	beq.n	800c7a6 <TIM_Base_SetConfig+0x76>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a21      	ldr	r2, [pc, #132]	; (800c828 <TIM_Base_SetConfig+0xf8>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d108      	bne.n	800c7b8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	4a20      	ldr	r2, [pc, #128]	; (800c82c <TIM_Base_SetConfig+0xfc>)
 800c7aa:	4013      	ands	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2280      	movs	r2, #128	; 0x80
 800c7bc:	4393      	bics	r3, r2
 800c7be:	001a      	movs	r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	689a      	ldr	r2, [r3, #8]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a0c      	ldr	r2, [pc, #48]	; (800c814 <TIM_Base_SetConfig+0xe4>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d00b      	beq.n	800c7fe <TIM_Base_SetConfig+0xce>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a0d      	ldr	r2, [pc, #52]	; (800c820 <TIM_Base_SetConfig+0xf0>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d007      	beq.n	800c7fe <TIM_Base_SetConfig+0xce>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a0c      	ldr	r2, [pc, #48]	; (800c824 <TIM_Base_SetConfig+0xf4>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d003      	beq.n	800c7fe <TIM_Base_SetConfig+0xce>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a0b      	ldr	r2, [pc, #44]	; (800c828 <TIM_Base_SetConfig+0xf8>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d103      	bne.n	800c806 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	691a      	ldr	r2, [r3, #16]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2201      	movs	r2, #1
 800c80a:	615a      	str	r2, [r3, #20]
}
 800c80c:	46c0      	nop			; (mov r8, r8)
 800c80e:	46bd      	mov	sp, r7
 800c810:	b004      	add	sp, #16
 800c812:	bd80      	pop	{r7, pc}
 800c814:	40012c00 	.word	0x40012c00
 800c818:	40000400 	.word	0x40000400
 800c81c:	40002000 	.word	0x40002000
 800c820:	40014000 	.word	0x40014000
 800c824:	40014400 	.word	0x40014400
 800c828:	40014800 	.word	0x40014800
 800c82c:	fffffcff 	.word	0xfffffcff

0800c830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	2201      	movs	r2, #1
 800c840:	4393      	bics	r3, r2
 800c842:	001a      	movs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	4a32      	ldr	r2, [pc, #200]	; (800c928 <TIM_OC1_SetConfig+0xf8>)
 800c85e:	4013      	ands	r3, r2
 800c860:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2203      	movs	r2, #3
 800c866:	4393      	bics	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	4313      	orrs	r3, r2
 800c872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	2202      	movs	r2, #2
 800c878:	4393      	bics	r3, r2
 800c87a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4313      	orrs	r3, r2
 800c884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a28      	ldr	r2, [pc, #160]	; (800c92c <TIM_OC1_SetConfig+0xfc>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d00b      	beq.n	800c8a6 <TIM_OC1_SetConfig+0x76>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a27      	ldr	r2, [pc, #156]	; (800c930 <TIM_OC1_SetConfig+0x100>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d007      	beq.n	800c8a6 <TIM_OC1_SetConfig+0x76>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a26      	ldr	r2, [pc, #152]	; (800c934 <TIM_OC1_SetConfig+0x104>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d003      	beq.n	800c8a6 <TIM_OC1_SetConfig+0x76>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4a25      	ldr	r2, [pc, #148]	; (800c938 <TIM_OC1_SetConfig+0x108>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d10c      	bne.n	800c8c0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2208      	movs	r2, #8
 800c8aa:	4393      	bics	r3, r2
 800c8ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	2204      	movs	r2, #4
 800c8bc:	4393      	bics	r3, r2
 800c8be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a1a      	ldr	r2, [pc, #104]	; (800c92c <TIM_OC1_SetConfig+0xfc>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d00b      	beq.n	800c8e0 <TIM_OC1_SetConfig+0xb0>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a19      	ldr	r2, [pc, #100]	; (800c930 <TIM_OC1_SetConfig+0x100>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d007      	beq.n	800c8e0 <TIM_OC1_SetConfig+0xb0>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a18      	ldr	r2, [pc, #96]	; (800c934 <TIM_OC1_SetConfig+0x104>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d003      	beq.n	800c8e0 <TIM_OC1_SetConfig+0xb0>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a17      	ldr	r2, [pc, #92]	; (800c938 <TIM_OC1_SetConfig+0x108>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d111      	bne.n	800c904 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	4a16      	ldr	r2, [pc, #88]	; (800c93c <TIM_OC1_SetConfig+0x10c>)
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	4a15      	ldr	r2, [pc, #84]	; (800c940 <TIM_OC1_SetConfig+0x110>)
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	4313      	orrs	r3, r2
 800c902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	621a      	str	r2, [r3, #32]
}
 800c91e:	46c0      	nop			; (mov r8, r8)
 800c920:	46bd      	mov	sp, r7
 800c922:	b006      	add	sp, #24
 800c924:	bd80      	pop	{r7, pc}
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	fffeff8f 	.word	0xfffeff8f
 800c92c:	40012c00 	.word	0x40012c00
 800c930:	40014000 	.word	0x40014000
 800c934:	40014400 	.word	0x40014400
 800c938:	40014800 	.word	0x40014800
 800c93c:	fffffeff 	.word	0xfffffeff
 800c940:	fffffdff 	.word	0xfffffdff

0800c944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b086      	sub	sp, #24
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	2210      	movs	r2, #16
 800c954:	4393      	bics	r3, r2
 800c956:	001a      	movs	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	699b      	ldr	r3, [r3, #24]
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	4a2e      	ldr	r2, [pc, #184]	; (800ca2c <TIM_OC2_SetConfig+0xe8>)
 800c972:	4013      	ands	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4a2d      	ldr	r2, [pc, #180]	; (800ca30 <TIM_OC2_SetConfig+0xec>)
 800c97a:	4013      	ands	r3, r2
 800c97c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	021b      	lsls	r3, r3, #8
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4313      	orrs	r3, r2
 800c988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2220      	movs	r2, #32
 800c98e:	4393      	bics	r3, r2
 800c990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	011b      	lsls	r3, r3, #4
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a24      	ldr	r2, [pc, #144]	; (800ca34 <TIM_OC2_SetConfig+0xf0>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d10d      	bne.n	800c9c2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2280      	movs	r2, #128	; 0x80
 800c9aa:	4393      	bics	r3, r2
 800c9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	011b      	lsls	r3, r3, #4
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	2240      	movs	r2, #64	; 0x40
 800c9be:	4393      	bics	r3, r2
 800c9c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	4a1b      	ldr	r2, [pc, #108]	; (800ca34 <TIM_OC2_SetConfig+0xf0>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d00b      	beq.n	800c9e2 <TIM_OC2_SetConfig+0x9e>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4a1a      	ldr	r2, [pc, #104]	; (800ca38 <TIM_OC2_SetConfig+0xf4>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d007      	beq.n	800c9e2 <TIM_OC2_SetConfig+0x9e>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	4a19      	ldr	r2, [pc, #100]	; (800ca3c <TIM_OC2_SetConfig+0xf8>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d003      	beq.n	800c9e2 <TIM_OC2_SetConfig+0x9e>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4a18      	ldr	r2, [pc, #96]	; (800ca40 <TIM_OC2_SetConfig+0xfc>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d113      	bne.n	800ca0a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	4a17      	ldr	r2, [pc, #92]	; (800ca44 <TIM_OC2_SetConfig+0x100>)
 800c9e6:	4013      	ands	r3, r2
 800c9e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	4a16      	ldr	r2, [pc, #88]	; (800ca48 <TIM_OC2_SetConfig+0x104>)
 800c9ee:	4013      	ands	r3, r2
 800c9f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	699b      	ldr	r3, [r3, #24]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	68fa      	ldr	r2, [r7, #12]
 800ca14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	697a      	ldr	r2, [r7, #20]
 800ca22:	621a      	str	r2, [r3, #32]
}
 800ca24:	46c0      	nop			; (mov r8, r8)
 800ca26:	46bd      	mov	sp, r7
 800ca28:	b006      	add	sp, #24
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	feff8fff 	.word	0xfeff8fff
 800ca30:	fffffcff 	.word	0xfffffcff
 800ca34:	40012c00 	.word	0x40012c00
 800ca38:	40014000 	.word	0x40014000
 800ca3c:	40014400 	.word	0x40014400
 800ca40:	40014800 	.word	0x40014800
 800ca44:	fffffbff 	.word	0xfffffbff
 800ca48:	fffff7ff 	.word	0xfffff7ff

0800ca4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b086      	sub	sp, #24
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	4a35      	ldr	r2, [pc, #212]	; (800cb30 <TIM_OC3_SetConfig+0xe4>)
 800ca5c:	401a      	ands	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	4a2f      	ldr	r2, [pc, #188]	; (800cb34 <TIM_OC3_SetConfig+0xe8>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2203      	movs	r2, #3
 800ca80:	4393      	bics	r3, r2
 800ca82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	4a29      	ldr	r2, [pc, #164]	; (800cb38 <TIM_OC3_SetConfig+0xec>)
 800ca92:	4013      	ands	r3, r2
 800ca94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	021b      	lsls	r3, r3, #8
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a25      	ldr	r2, [pc, #148]	; (800cb3c <TIM_OC3_SetConfig+0xf0>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d10d      	bne.n	800cac6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	4a24      	ldr	r2, [pc, #144]	; (800cb40 <TIM_OC3_SetConfig+0xf4>)
 800caae:	4013      	ands	r3, r2
 800cab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	021b      	lsls	r3, r3, #8
 800cab8:	697a      	ldr	r2, [r7, #20]
 800caba:	4313      	orrs	r3, r2
 800cabc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	4a20      	ldr	r2, [pc, #128]	; (800cb44 <TIM_OC3_SetConfig+0xf8>)
 800cac2:	4013      	ands	r3, r2
 800cac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a1c      	ldr	r2, [pc, #112]	; (800cb3c <TIM_OC3_SetConfig+0xf0>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d00b      	beq.n	800cae6 <TIM_OC3_SetConfig+0x9a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a1d      	ldr	r2, [pc, #116]	; (800cb48 <TIM_OC3_SetConfig+0xfc>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d007      	beq.n	800cae6 <TIM_OC3_SetConfig+0x9a>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a1c      	ldr	r2, [pc, #112]	; (800cb4c <TIM_OC3_SetConfig+0x100>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d003      	beq.n	800cae6 <TIM_OC3_SetConfig+0x9a>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <TIM_OC3_SetConfig+0x104>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d113      	bne.n	800cb0e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	4a1a      	ldr	r2, [pc, #104]	; (800cb54 <TIM_OC3_SetConfig+0x108>)
 800caea:	4013      	ands	r3, r2
 800caec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	4a19      	ldr	r2, [pc, #100]	; (800cb58 <TIM_OC3_SetConfig+0x10c>)
 800caf2:	4013      	ands	r3, r2
 800caf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	011b      	lsls	r3, r3, #4
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	011b      	lsls	r3, r3, #4
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	621a      	str	r2, [r3, #32]
}
 800cb28:	46c0      	nop			; (mov r8, r8)
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	b006      	add	sp, #24
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	fffffeff 	.word	0xfffffeff
 800cb34:	fffeff8f 	.word	0xfffeff8f
 800cb38:	fffffdff 	.word	0xfffffdff
 800cb3c:	40012c00 	.word	0x40012c00
 800cb40:	fffff7ff 	.word	0xfffff7ff
 800cb44:	fffffbff 	.word	0xfffffbff
 800cb48:	40014000 	.word	0x40014000
 800cb4c:	40014400 	.word	0x40014400
 800cb50:	40014800 	.word	0x40014800
 800cb54:	ffffefff 	.word	0xffffefff
 800cb58:	ffffdfff 	.word	0xffffdfff

0800cb5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a1b      	ldr	r3, [r3, #32]
 800cb6a:	4a28      	ldr	r2, [pc, #160]	; (800cc0c <TIM_OC4_SetConfig+0xb0>)
 800cb6c:	401a      	ands	r2, r3
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a1b      	ldr	r3, [r3, #32]
 800cb76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	69db      	ldr	r3, [r3, #28]
 800cb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	4a22      	ldr	r2, [pc, #136]	; (800cc10 <TIM_OC4_SetConfig+0xb4>)
 800cb88:	4013      	ands	r3, r2
 800cb8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	4a21      	ldr	r2, [pc, #132]	; (800cc14 <TIM_OC4_SetConfig+0xb8>)
 800cb90:	4013      	ands	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	021b      	lsls	r3, r3, #8
 800cb9a:	68fa      	ldr	r2, [r7, #12]
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	4a1d      	ldr	r2, [pc, #116]	; (800cc18 <TIM_OC4_SetConfig+0xbc>)
 800cba4:	4013      	ands	r3, r2
 800cba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	031b      	lsls	r3, r3, #12
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4a19      	ldr	r2, [pc, #100]	; (800cc1c <TIM_OC4_SetConfig+0xc0>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d00b      	beq.n	800cbd4 <TIM_OC4_SetConfig+0x78>
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	4a18      	ldr	r2, [pc, #96]	; (800cc20 <TIM_OC4_SetConfig+0xc4>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d007      	beq.n	800cbd4 <TIM_OC4_SetConfig+0x78>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	4a17      	ldr	r2, [pc, #92]	; (800cc24 <TIM_OC4_SetConfig+0xc8>)
 800cbc8:	4293      	cmp	r3, r2
 800cbca:	d003      	beq.n	800cbd4 <TIM_OC4_SetConfig+0x78>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a16      	ldr	r2, [pc, #88]	; (800cc28 <TIM_OC4_SetConfig+0xcc>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d109      	bne.n	800cbe8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	4a15      	ldr	r2, [pc, #84]	; (800cc2c <TIM_OC4_SetConfig+0xd0>)
 800cbd8:	4013      	ands	r3, r2
 800cbda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	695b      	ldr	r3, [r3, #20]
 800cbe0:	019b      	lsls	r3, r3, #6
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	621a      	str	r2, [r3, #32]
}
 800cc02:	46c0      	nop			; (mov r8, r8)
 800cc04:	46bd      	mov	sp, r7
 800cc06:	b006      	add	sp, #24
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	46c0      	nop			; (mov r8, r8)
 800cc0c:	ffffefff 	.word	0xffffefff
 800cc10:	feff8fff 	.word	0xfeff8fff
 800cc14:	fffffcff 	.word	0xfffffcff
 800cc18:	ffffdfff 	.word	0xffffdfff
 800cc1c:	40012c00 	.word	0x40012c00
 800cc20:	40014000 	.word	0x40014000
 800cc24:	40014400 	.word	0x40014400
 800cc28:	40014800 	.word	0x40014800
 800cc2c:	ffffbfff 	.word	0xffffbfff

0800cc30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	4a25      	ldr	r2, [pc, #148]	; (800ccd4 <TIM_OC5_SetConfig+0xa4>)
 800cc40:	401a      	ands	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	4a1f      	ldr	r2, [pc, #124]	; (800ccd8 <TIM_OC5_SetConfig+0xa8>)
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	4a1b      	ldr	r2, [pc, #108]	; (800ccdc <TIM_OC5_SetConfig+0xac>)
 800cc6e:	4013      	ands	r3, r2
 800cc70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	041b      	lsls	r3, r3, #16
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a17      	ldr	r2, [pc, #92]	; (800cce0 <TIM_OC5_SetConfig+0xb0>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d00b      	beq.n	800cc9e <TIM_OC5_SetConfig+0x6e>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a16      	ldr	r2, [pc, #88]	; (800cce4 <TIM_OC5_SetConfig+0xb4>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d007      	beq.n	800cc9e <TIM_OC5_SetConfig+0x6e>
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	4a15      	ldr	r2, [pc, #84]	; (800cce8 <TIM_OC5_SetConfig+0xb8>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d003      	beq.n	800cc9e <TIM_OC5_SetConfig+0x6e>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a14      	ldr	r2, [pc, #80]	; (800ccec <TIM_OC5_SetConfig+0xbc>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d109      	bne.n	800ccb2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	4a0c      	ldr	r2, [pc, #48]	; (800ccd4 <TIM_OC5_SetConfig+0xa4>)
 800cca2:	4013      	ands	r3, r2
 800cca4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	021b      	lsls	r3, r3, #8
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	697a      	ldr	r2, [r7, #20]
 800ccb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	621a      	str	r2, [r3, #32]
}
 800cccc:	46c0      	nop			; (mov r8, r8)
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	b006      	add	sp, #24
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	fffeffff 	.word	0xfffeffff
 800ccd8:	fffeff8f 	.word	0xfffeff8f
 800ccdc:	fffdffff 	.word	0xfffdffff
 800cce0:	40012c00 	.word	0x40012c00
 800cce4:	40014000 	.word	0x40014000
 800cce8:	40014400 	.word	0x40014400
 800ccec:	40014800 	.word	0x40014800

0800ccf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	4a26      	ldr	r2, [pc, #152]	; (800cd98 <TIM_OC6_SetConfig+0xa8>)
 800cd00:	401a      	ands	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4a20      	ldr	r2, [pc, #128]	; (800cd9c <TIM_OC6_SetConfig+0xac>)
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	021b      	lsls	r3, r3, #8
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	4a1c      	ldr	r2, [pc, #112]	; (800cda0 <TIM_OC6_SetConfig+0xb0>)
 800cd30:	4013      	ands	r3, r2
 800cd32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	051b      	lsls	r3, r3, #20
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	4313      	orrs	r3, r2
 800cd3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a18      	ldr	r2, [pc, #96]	; (800cda4 <TIM_OC6_SetConfig+0xb4>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d00b      	beq.n	800cd60 <TIM_OC6_SetConfig+0x70>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a17      	ldr	r2, [pc, #92]	; (800cda8 <TIM_OC6_SetConfig+0xb8>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d007      	beq.n	800cd60 <TIM_OC6_SetConfig+0x70>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	4a16      	ldr	r2, [pc, #88]	; (800cdac <TIM_OC6_SetConfig+0xbc>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d003      	beq.n	800cd60 <TIM_OC6_SetConfig+0x70>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a15      	ldr	r2, [pc, #84]	; (800cdb0 <TIM_OC6_SetConfig+0xc0>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d109      	bne.n	800cd74 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	4a14      	ldr	r2, [pc, #80]	; (800cdb4 <TIM_OC6_SetConfig+0xc4>)
 800cd64:	4013      	ands	r3, r2
 800cd66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	029b      	lsls	r3, r3, #10
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	621a      	str	r2, [r3, #32]
}
 800cd8e:	46c0      	nop			; (mov r8, r8)
 800cd90:	46bd      	mov	sp, r7
 800cd92:	b006      	add	sp, #24
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	46c0      	nop			; (mov r8, r8)
 800cd98:	ffefffff 	.word	0xffefffff
 800cd9c:	feff8fff 	.word	0xfeff8fff
 800cda0:	ffdfffff 	.word	0xffdfffff
 800cda4:	40012c00 	.word	0x40012c00
 800cda8:	40014000 	.word	0x40014000
 800cdac:	40014400 	.word	0x40014400
 800cdb0:	40014800 	.word	0x40014800
 800cdb4:	fffbffff 	.word	0xfffbffff

0800cdb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6a1b      	ldr	r3, [r3, #32]
 800cdc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4393      	bics	r3, r2
 800cdd2:	001a      	movs	r2, r3
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	699b      	ldr	r3, [r3, #24]
 800cddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	22f0      	movs	r2, #240	; 0xf0
 800cde2:	4393      	bics	r3, r2
 800cde4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	220a      	movs	r2, #10
 800cdf4:	4393      	bics	r3, r2
 800cdf6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	697a      	ldr	r2, [r7, #20]
 800ce0a:	621a      	str	r2, [r3, #32]
}
 800ce0c:	46c0      	nop			; (mov r8, r8)
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	b006      	add	sp, #24
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6a1b      	ldr	r3, [r3, #32]
 800ce24:	2210      	movs	r2, #16
 800ce26:	4393      	bics	r3, r2
 800ce28:	001a      	movs	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6a1b      	ldr	r3, [r3, #32]
 800ce38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	4a0d      	ldr	r2, [pc, #52]	; (800ce74 <TIM_TI2_ConfigInputStage+0x60>)
 800ce3e:	4013      	ands	r3, r2
 800ce40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	031b      	lsls	r3, r3, #12
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	22a0      	movs	r2, #160	; 0xa0
 800ce50:	4393      	bics	r3, r2
 800ce52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	011b      	lsls	r3, r3, #4
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	697a      	ldr	r2, [r7, #20]
 800ce62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	693a      	ldr	r2, [r7, #16]
 800ce68:	621a      	str	r2, [r3, #32]
}
 800ce6a:	46c0      	nop			; (mov r8, r8)
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	b006      	add	sp, #24
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	46c0      	nop			; (mov r8, r8)
 800ce74:	ffff0fff 	.word	0xffff0fff

0800ce78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	4a08      	ldr	r2, [pc, #32]	; (800ceac <TIM_ITRx_SetConfig+0x34>)
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	2207      	movs	r2, #7
 800ce98:	4313      	orrs	r3, r2
 800ce9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	609a      	str	r2, [r3, #8]
}
 800cea2:	46c0      	nop			; (mov r8, r8)
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b004      	add	sp, #16
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			; (mov r8, r8)
 800ceac:	ffcfff8f 	.word	0xffcfff8f

0800ceb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	4a09      	ldr	r2, [pc, #36]	; (800ceec <TIM_ETR_SetConfig+0x3c>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	021a      	lsls	r2, r3, #8
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	431a      	orrs	r2, r3
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	609a      	str	r2, [r3, #8]
}
 800cee4:	46c0      	nop			; (mov r8, r8)
 800cee6:	46bd      	mov	sp, r7
 800cee8:	b006      	add	sp, #24
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	ffff00ff 	.word	0xffff00ff

0800cef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b086      	sub	sp, #24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	221f      	movs	r2, #31
 800cf00:	4013      	ands	r3, r2
 800cf02:	2201      	movs	r2, #1
 800cf04:	409a      	lsls	r2, r3
 800cf06:	0013      	movs	r3, r2
 800cf08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6a1b      	ldr	r3, [r3, #32]
 800cf0e:	697a      	ldr	r2, [r7, #20]
 800cf10:	43d2      	mvns	r2, r2
 800cf12:	401a      	ands	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	6a1a      	ldr	r2, [r3, #32]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	211f      	movs	r1, #31
 800cf20:	400b      	ands	r3, r1
 800cf22:	6879      	ldr	r1, [r7, #4]
 800cf24:	4099      	lsls	r1, r3
 800cf26:	000b      	movs	r3, r1
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	621a      	str	r2, [r3, #32]
}
 800cf2e:	46c0      	nop			; (mov r8, r8)
 800cf30:	46bd      	mov	sp, r7
 800cf32:	b006      	add	sp, #24
 800cf34:	bd80      	pop	{r7, pc}
	...

0800cf38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	223c      	movs	r2, #60	; 0x3c
 800cf46:	5c9b      	ldrb	r3, [r3, r2]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d101      	bne.n	800cf50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e055      	b.n	800cffc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	223c      	movs	r2, #60	; 0x3c
 800cf54:	2101      	movs	r1, #1
 800cf56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	223d      	movs	r2, #61	; 0x3d
 800cf5c:	2102      	movs	r1, #2
 800cf5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a23      	ldr	r2, [pc, #140]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d108      	bne.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	4a22      	ldr	r2, [pc, #136]	; (800d008 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cf7e:	4013      	ands	r3, r2
 800cf80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2270      	movs	r2, #112	; 0x70
 800cf90:	4393      	bics	r3, r2
 800cf92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	68fa      	ldr	r2, [r7, #12]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a16      	ldr	r2, [pc, #88]	; (800d004 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d00f      	beq.n	800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	2380      	movs	r3, #128	; 0x80
 800cfb6:	05db      	lsls	r3, r3, #23
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d009      	beq.n	800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a12      	ldr	r2, [pc, #72]	; (800d00c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d004      	beq.n	800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a11      	ldr	r2, [pc, #68]	; (800d010 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d10c      	bne.n	800cfea <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	2280      	movs	r2, #128	; 0x80
 800cfd4:	4393      	bics	r3, r2
 800cfd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	223d      	movs	r2, #61	; 0x3d
 800cfee:	2101      	movs	r1, #1
 800cff0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	223c      	movs	r2, #60	; 0x3c
 800cff6:	2100      	movs	r1, #0
 800cff8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cffa:	2300      	movs	r3, #0
}
 800cffc:	0018      	movs	r0, r3
 800cffe:	46bd      	mov	sp, r7
 800d000:	b004      	add	sp, #16
 800d002:	bd80      	pop	{r7, pc}
 800d004:	40012c00 	.word	0x40012c00
 800d008:	ff0fffff 	.word	0xff0fffff
 800d00c:	40000400 	.word	0x40000400
 800d010:	40014000 	.word	0x40014000

0800d014 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d01e:	2300      	movs	r3, #0
 800d020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	223c      	movs	r2, #60	; 0x3c
 800d026:	5c9b      	ldrb	r3, [r3, r2]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d101      	bne.n	800d030 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d02c:	2302      	movs	r3, #2
 800d02e:	e079      	b.n	800d124 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	223c      	movs	r2, #60	; 0x3c
 800d034:	2101      	movs	r1, #1
 800d036:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	22ff      	movs	r2, #255	; 0xff
 800d03c:	4393      	bics	r3, r2
 800d03e:	001a      	movs	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	4313      	orrs	r3, r2
 800d046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	4a38      	ldr	r2, [pc, #224]	; (800d12c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800d04c:	401a      	ands	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	4313      	orrs	r3, r2
 800d054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	4a35      	ldr	r2, [pc, #212]	; (800d130 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800d05a:	401a      	ands	r2, r3
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	4313      	orrs	r3, r2
 800d062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4a33      	ldr	r2, [pc, #204]	; (800d134 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800d068:	401a      	ands	r2, r3
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4313      	orrs	r3, r2
 800d070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4a30      	ldr	r2, [pc, #192]	; (800d138 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800d076:	401a      	ands	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	691b      	ldr	r3, [r3, #16]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4a2e      	ldr	r2, [pc, #184]	; (800d13c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800d084:	401a      	ands	r2, r3
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	4a2b      	ldr	r2, [pc, #172]	; (800d140 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800d092:	401a      	ands	r2, r3
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d098:	4313      	orrs	r3, r2
 800d09a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	4a29      	ldr	r2, [pc, #164]	; (800d144 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800d0a0:	401a      	ands	r2, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	041b      	lsls	r3, r3, #16
 800d0a8:	4313      	orrs	r3, r2
 800d0aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a25      	ldr	r2, [pc, #148]	; (800d148 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d106      	bne.n	800d0c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	4a24      	ldr	r2, [pc, #144]	; (800d14c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d0ba:	401a      	ands	r2, r3
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	69db      	ldr	r3, [r3, #28]
 800d0c0:	4313      	orrs	r3, r2
 800d0c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a1f      	ldr	r2, [pc, #124]	; (800d148 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d121      	bne.n	800d112 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	4a1f      	ldr	r2, [pc, #124]	; (800d150 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d0d2:	401a      	ands	r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d8:	051b      	lsls	r3, r3, #20
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	4a1c      	ldr	r2, [pc, #112]	; (800d154 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800d0e2:	401a      	ands	r2, r3
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	6a1b      	ldr	r3, [r3, #32]
 800d0e8:	4313      	orrs	r3, r2
 800d0ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4a1a      	ldr	r2, [pc, #104]	; (800d158 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800d0f0:	401a      	ands	r2, r3
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4a12      	ldr	r2, [pc, #72]	; (800d148 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d106      	bne.n	800d112 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	4a15      	ldr	r2, [pc, #84]	; (800d15c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800d108:	401a      	ands	r2, r3
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d10e:	4313      	orrs	r3, r2
 800d110:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	223c      	movs	r2, #60	; 0x3c
 800d11e:	2100      	movs	r1, #0
 800d120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	0018      	movs	r0, r3
 800d126:	46bd      	mov	sp, r7
 800d128:	b004      	add	sp, #16
 800d12a:	bd80      	pop	{r7, pc}
 800d12c:	fffffcff 	.word	0xfffffcff
 800d130:	fffffbff 	.word	0xfffffbff
 800d134:	fffff7ff 	.word	0xfffff7ff
 800d138:	ffffefff 	.word	0xffffefff
 800d13c:	ffffdfff 	.word	0xffffdfff
 800d140:	ffffbfff 	.word	0xffffbfff
 800d144:	fff0ffff 	.word	0xfff0ffff
 800d148:	40012c00 	.word	0x40012c00
 800d14c:	efffffff 	.word	0xefffffff
 800d150:	ff0fffff 	.word	0xff0fffff
 800d154:	feffffff 	.word	0xfeffffff
 800d158:	fdffffff 	.word	0xfdffffff
 800d15c:	dfffffff 	.word	0xdfffffff

0800d160 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08a      	sub	sp, #40	; 0x28
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	223c      	movs	r2, #60	; 0x3c
 800d170:	5c9b      	ldrb	r3, [r3, r2]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d101      	bne.n	800d17a <HAL_TIMEx_ConfigBreakInput+0x1a>
 800d176:	2302      	movs	r3, #2
 800d178:	e08e      	b.n	800d298 <HAL_TIMEx_ConfigBreakInput+0x138>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	223c      	movs	r2, #60	; 0x3c
 800d17e:	2101      	movs	r1, #1
 800d180:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b04      	cmp	r3, #4
 800d188:	d019      	beq.n	800d1be <HAL_TIMEx_ConfigBreakInput+0x5e>
 800d18a:	d822      	bhi.n	800d1d2 <HAL_TIMEx_ConfigBreakInput+0x72>
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d002      	beq.n	800d196 <HAL_TIMEx_ConfigBreakInput+0x36>
 800d190:	2b02      	cmp	r3, #2
 800d192:	d00a      	beq.n	800d1aa <HAL_TIMEx_ConfigBreakInput+0x4a>
 800d194:	e01d      	b.n	800d1d2 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800d196:	2301      	movs	r3, #1
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800d19a:	2300      	movs	r3, #0
 800d19c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800d19e:	2380      	movs	r3, #128	; 0x80
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800d1a4:	2309      	movs	r3, #9
 800d1a6:	61bb      	str	r3, [r7, #24]
      break;
 800d1a8:	e01c      	b.n	800d1e4 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800d1b2:	2380      	movs	r3, #128	; 0x80
 800d1b4:	00db      	lsls	r3, r3, #3
 800d1b6:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800d1b8:	230a      	movs	r3, #10
 800d1ba:	61bb      	str	r3, [r7, #24]
      break;
 800d1bc:	e012      	b.n	800d1e4 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800d1be:	2304      	movs	r3, #4
 800d1c0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800d1c6:	2380      	movs	r3, #128	; 0x80
 800d1c8:	011b      	lsls	r3, r3, #4
 800d1ca:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800d1cc:	230b      	movs	r3, #11
 800d1ce:	61bb      	str	r3, [r7, #24]
      break;
 800d1d0:	e008      	b.n	800d1e4 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	61bb      	str	r3, [r7, #24]
      break;
 800d1e2:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d003      	beq.n	800d1f2 <HAL_TIMEx_ConfigBreakInput+0x92>
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d027      	beq.n	800d240 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800d1f0:	e04d      	b.n	800d28e <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1f8:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	43da      	mvns	r2, r3
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	4013      	ands	r3, r2
 800d202:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	409a      	lsls	r2, r3
 800d20c:	0013      	movs	r3, r2
 800d20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d210:	4013      	ands	r3, r2
 800d212:	697a      	ldr	r2, [r7, #20]
 800d214:	4313      	orrs	r3, r2
 800d216:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	43da      	mvns	r2, r3
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	4013      	ands	r3, r2
 800d220:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	689a      	ldr	r2, [r3, #8]
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	409a      	lsls	r2, r3
 800d22a:	0013      	movs	r3, r2
 800d22c:	6a3a      	ldr	r2, [r7, #32]
 800d22e:	4013      	ands	r3, r2
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	4313      	orrs	r3, r2
 800d234:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800d23e:	e026      	b.n	800d28e <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d246:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	43da      	mvns	r2, r3
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	4013      	ands	r3, r2
 800d250:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	409a      	lsls	r2, r3
 800d25a:	0013      	movs	r3, r2
 800d25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d25e:	4013      	ands	r3, r2
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	4313      	orrs	r3, r2
 800d264:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	43da      	mvns	r2, r3
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	4013      	ands	r3, r2
 800d26e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	689a      	ldr	r2, [r3, #8]
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	409a      	lsls	r2, r3
 800d278:	0013      	movs	r3, r2
 800d27a:	6a3a      	ldr	r2, [r7, #32]
 800d27c:	4013      	ands	r3, r2
 800d27e:	697a      	ldr	r2, [r7, #20]
 800d280:	4313      	orrs	r3, r2
 800d282:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800d28c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	223c      	movs	r2, #60	; 0x3c
 800d292:	2100      	movs	r1, #0
 800d294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d296:	2300      	movs	r3, #0
}
 800d298:	0018      	movs	r0, r3
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b00a      	add	sp, #40	; 0x28
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e03f      	b.n	800d332 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2259      	movs	r2, #89	; 0x59
 800d2b6:	5c9b      	ldrb	r3, [r3, r2]
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d107      	bne.n	800d2ce <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2258      	movs	r2, #88	; 0x58
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f7f9 fce3 	bl	8006c94 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2259      	movs	r2, #89	; 0x59
 800d2d2:	2102      	movs	r1, #2
 800d2d4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	438a      	bics	r2, r1
 800d2e4:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	0018      	movs	r0, r3
 800d2ea:	f000 facf 	bl	800d88c <USART_SetConfig>
 800d2ee:	0003      	movs	r3, r0
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d101      	bne.n	800d2f8 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	e01c      	b.n	800d332 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	490e      	ldr	r1, [pc, #56]	; (800d33c <HAL_USART_Init+0x9c>)
 800d304:	400a      	ands	r2, r1
 800d306:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	689a      	ldr	r2, [r3, #8]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	212a      	movs	r1, #42	; 0x2a
 800d314:	438a      	bics	r2, r1
 800d316:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2101      	movs	r1, #1
 800d324:	430a      	orrs	r2, r1
 800d326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	0018      	movs	r0, r3
 800d32c:	f000 fd4a 	bl	800ddc4 <USART_CheckIdleState>
 800d330:	0003      	movs	r3, r0
}
 800d332:	0018      	movs	r0, r3
 800d334:	46bd      	mov	sp, r7
 800d336:	b002      	add	sp, #8
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	46c0      	nop			; (mov r8, r8)
 800d33c:	ffffbfff 	.word	0xffffbfff

0800d340 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b08a      	sub	sp, #40	; 0x28
 800d344:	af02      	add	r7, sp, #8
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	603b      	str	r3, [r7, #0]
 800d34c:	1dbb      	adds	r3, r7, #6
 800d34e:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2259      	movs	r2, #89	; 0x59
 800d354:	5c9b      	ldrb	r3, [r3, r2]
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b01      	cmp	r3, #1
 800d35a:	d000      	beq.n	800d35e <HAL_USART_Transmit+0x1e>
 800d35c:	e0a9      	b.n	800d4b2 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d003      	beq.n	800d36c <HAL_USART_Transmit+0x2c>
 800d364:	1dbb      	adds	r3, r7, #6
 800d366:	881b      	ldrh	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	e0a1      	b.n	800d4b4 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	689a      	ldr	r2, [r3, #8]
 800d374:	2380      	movs	r3, #128	; 0x80
 800d376:	015b      	lsls	r3, r3, #5
 800d378:	429a      	cmp	r2, r3
 800d37a:	d109      	bne.n	800d390 <HAL_USART_Transmit+0x50>
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d105      	bne.n	800d390 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2201      	movs	r2, #1
 800d388:	4013      	ands	r3, r2
 800d38a:	d001      	beq.n	800d390 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	e091      	b.n	800d4b4 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2258      	movs	r2, #88	; 0x58
 800d394:	5c9b      	ldrb	r3, [r3, r2]
 800d396:	2b01      	cmp	r3, #1
 800d398:	d101      	bne.n	800d39e <HAL_USART_Transmit+0x5e>
 800d39a:	2302      	movs	r3, #2
 800d39c:	e08a      	b.n	800d4b4 <HAL_USART_Transmit+0x174>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2258      	movs	r2, #88	; 0x58
 800d3a2:	2101      	movs	r1, #1
 800d3a4:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2259      	movs	r2, #89	; 0x59
 800d3b0:	2112      	movs	r1, #18
 800d3b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d3b4:	f7f9 fee8 	bl	8007188 <HAL_GetTick>
 800d3b8:	0003      	movs	r3, r0
 800d3ba:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	1dba      	adds	r2, r7, #6
 800d3c0:	8812      	ldrh	r2, [r2, #0]
 800d3c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	1dba      	adds	r2, r7, #6
 800d3c8:	8812      	ldrh	r2, [r2, #0]
 800d3ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	689a      	ldr	r2, [r3, #8]
 800d3d0:	2380      	movs	r3, #128	; 0x80
 800d3d2:	015b      	lsls	r3, r3, #5
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d108      	bne.n	800d3ea <HAL_USART_Transmit+0xaa>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d104      	bne.n	800d3ea <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	61bb      	str	r3, [r7, #24]
 800d3e8:	e003      	b.n	800d3f2 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800d3f2:	e02a      	b.n	800d44a <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	9300      	str	r3, [sp, #0]
 800d3fc:	0013      	movs	r3, r2
 800d3fe:	2200      	movs	r2, #0
 800d400:	2180      	movs	r1, #128	; 0x80
 800d402:	f000 fa0e 	bl	800d822 <USART_WaitOnFlagUntilTimeout>
 800d406:	1e03      	subs	r3, r0, #0
 800d408:	d001      	beq.n	800d40e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800d40a:	2303      	movs	r3, #3
 800d40c:	e052      	b.n	800d4b4 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10b      	bne.n	800d42c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	001a      	movs	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	05d2      	lsls	r2, r2, #23
 800d420:	0dd2      	lsrs	r2, r2, #23
 800d422:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	3302      	adds	r3, #2
 800d428:	61bb      	str	r3, [r7, #24]
 800d42a:	e007      	b.n	800d43c <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	781a      	ldrb	r2, [r3, #0]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	3301      	adds	r3, #1
 800d43a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d440:	b29b      	uxth	r3, r3
 800d442:	3b01      	subs	r3, #1
 800d444:	b29a      	uxth	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d44e:	b29b      	uxth	r3, r3
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1cf      	bne.n	800d3f4 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d454:	697a      	ldr	r2, [r7, #20]
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	0013      	movs	r3, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	2140      	movs	r1, #64	; 0x40
 800d462:	f000 f9de 	bl	800d822 <USART_WaitOnFlagUntilTimeout>
 800d466:	1e03      	subs	r3, r0, #0
 800d468:	d001      	beq.n	800d46e <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e022      	b.n	800d4b4 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2240      	movs	r2, #64	; 0x40
 800d474:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2208      	movs	r2, #8
 800d47c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	699a      	ldr	r2, [r3, #24]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2108      	movs	r1, #8
 800d48a:	430a      	orrs	r2, r1
 800d48c:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	699a      	ldr	r2, [r3, #24]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2110      	movs	r1, #16
 800d49a:	430a      	orrs	r2, r1
 800d49c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2259      	movs	r2, #89	; 0x59
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2258      	movs	r2, #88	; 0x58
 800d4aa:	2100      	movs	r1, #0
 800d4ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e000      	b.n	800d4b4 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d4b2:	2302      	movs	r3, #2
  }
}
 800d4b4:	0018      	movs	r0, r3
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	b008      	add	sp, #32
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b088      	sub	sp, #32
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	4aab      	ldr	r2, [pc, #684]	; (800d78c <HAL_USART_IRQHandler+0x2d0>)
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d117      	bne.n	800d51a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	d013      	beq.n	800d51a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	d104      	bne.n	800d504 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4fa:	697a      	ldr	r2, [r7, #20]
 800d4fc:	2380      	movs	r3, #128	; 0x80
 800d4fe:	055b      	lsls	r3, r3, #21
 800d500:	4013      	ands	r3, r2
 800d502:	d00a      	beq.n	800d51a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d100      	bne.n	800d50e <HAL_USART_IRQHandler+0x52>
 800d50c:	e135      	b.n	800d77a <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	0010      	movs	r0, r2
 800d516:	4798      	blx	r3
      }
      return;
 800d518:	e12f      	b.n	800d77a <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d100      	bne.n	800d522 <HAL_USART_IRQHandler+0x66>
 800d520:	e0eb      	b.n	800d6fa <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	4a9a      	ldr	r2, [pc, #616]	; (800d790 <HAL_USART_IRQHandler+0x2d4>)
 800d526:	4013      	ands	r3, r2
 800d528:	d105      	bne.n	800d536 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800d52a:	69ba      	ldr	r2, [r7, #24]
 800d52c:	2390      	movs	r3, #144	; 0x90
 800d52e:	005b      	lsls	r3, r3, #1
 800d530:	4013      	ands	r3, r2
 800d532:	d100      	bne.n	800d536 <HAL_USART_IRQHandler+0x7a>
 800d534:	e0e1      	b.n	800d6fa <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	2201      	movs	r2, #1
 800d53a:	4013      	ands	r3, r2
 800d53c:	d00e      	beq.n	800d55c <HAL_USART_IRQHandler+0xa0>
 800d53e:	69ba      	ldr	r2, [r7, #24]
 800d540:	2380      	movs	r3, #128	; 0x80
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	4013      	ands	r3, r2
 800d546:	d009      	beq.n	800d55c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2201      	movs	r2, #1
 800d54e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d554:	2201      	movs	r2, #1
 800d556:	431a      	orrs	r2, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	2202      	movs	r2, #2
 800d560:	4013      	ands	r3, r2
 800d562:	d00d      	beq.n	800d580 <HAL_USART_IRQHandler+0xc4>
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	2201      	movs	r2, #1
 800d568:	4013      	ands	r3, r2
 800d56a:	d009      	beq.n	800d580 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2202      	movs	r2, #2
 800d572:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d578:	2204      	movs	r2, #4
 800d57a:	431a      	orrs	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2204      	movs	r2, #4
 800d584:	4013      	ands	r3, r2
 800d586:	d00d      	beq.n	800d5a4 <HAL_USART_IRQHandler+0xe8>
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	2201      	movs	r2, #1
 800d58c:	4013      	ands	r3, r2
 800d58e:	d009      	beq.n	800d5a4 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2204      	movs	r2, #4
 800d596:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d59c:	2202      	movs	r2, #2
 800d59e:	431a      	orrs	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d5a4:	69fb      	ldr	r3, [r7, #28]
 800d5a6:	2208      	movs	r2, #8
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	d011      	beq.n	800d5d0 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	d103      	bne.n	800d5bc <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	4a76      	ldr	r2, [pc, #472]	; (800d790 <HAL_USART_IRQHandler+0x2d4>)
 800d5b8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d5ba:	d009      	beq.n	800d5d0 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2208      	movs	r2, #8
 800d5c2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5c8:	2208      	movs	r2, #8
 800d5ca:	431a      	orrs	r2, r3
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d5d0:	69fa      	ldr	r2, [r7, #28]
 800d5d2:	2380      	movs	r3, #128	; 0x80
 800d5d4:	019b      	lsls	r3, r3, #6
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	d01a      	beq.n	800d610 <HAL_USART_IRQHandler+0x154>
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	4013      	ands	r3, r2
 800d5e0:	d016      	beq.n	800d610 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2259      	movs	r2, #89	; 0x59
 800d5e6:	5c9b      	ldrb	r3, [r3, r2]
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b22      	cmp	r3, #34	; 0x22
 800d5ec:	d105      	bne.n	800d5fa <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	2280      	movs	r2, #128	; 0x80
 800d5f4:	0192      	lsls	r2, r2, #6
 800d5f6:	621a      	str	r2, [r3, #32]
        return;
 800d5f8:	e0c4      	b.n	800d784 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2280      	movs	r2, #128	; 0x80
 800d600:	0192      	lsls	r2, r2, #6
 800d602:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d608:	2220      	movs	r2, #32
 800d60a:	431a      	orrs	r2, r3
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d614:	2b00      	cmp	r3, #0
 800d616:	d100      	bne.n	800d61a <HAL_USART_IRQHandler+0x15e>
 800d618:	e0b1      	b.n	800d77e <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	2220      	movs	r2, #32
 800d61e:	4013      	ands	r3, r2
 800d620:	d011      	beq.n	800d646 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	2220      	movs	r2, #32
 800d626:	4013      	ands	r3, r2
 800d628:	d104      	bne.n	800d634 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	2380      	movs	r3, #128	; 0x80
 800d62e:	055b      	lsls	r3, r3, #21
 800d630:	4013      	ands	r3, r2
 800d632:	d008      	beq.n	800d646 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d004      	beq.n	800d646 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	0010      	movs	r0, r2
 800d644:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d64a:	2208      	movs	r2, #8
 800d64c:	4013      	ands	r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	2240      	movs	r2, #64	; 0x40
 800d658:	4013      	ands	r3, r2
 800d65a:	2b40      	cmp	r3, #64	; 0x40
 800d65c:	d002      	beq.n	800d664 <HAL_USART_IRQHandler+0x1a8>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d040      	beq.n	800d6e6 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	0018      	movs	r0, r3
 800d668:	f000 f8a6 	bl	800d7b8 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	2240      	movs	r2, #64	; 0x40
 800d674:	4013      	ands	r3, r2
 800d676:	2b40      	cmp	r3, #64	; 0x40
 800d678:	d130      	bne.n	800d6dc <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2140      	movs	r1, #64	; 0x40
 800d686:	438a      	bics	r2, r1
 800d688:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d008      	beq.n	800d6a4 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d696:	2200      	movs	r2, #0
 800d698:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d69e:	0018      	movs	r0, r3
 800d6a0:	f7fa fa04 	bl	8007aac <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d012      	beq.n	800d6d2 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6b0:	4a38      	ldr	r2, [pc, #224]	; (800d794 <HAL_USART_IRQHandler+0x2d8>)
 800d6b2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6b8:	0018      	movs	r0, r3
 800d6ba:	f7fa f9f7 	bl	8007aac <HAL_DMA_Abort_IT>
 800d6be:	1e03      	subs	r3, r0, #0
 800d6c0:	d019      	beq.n	800d6f6 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6cc:	0018      	movs	r0, r3
 800d6ce:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d6d0:	e011      	b.n	800d6f6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	0018      	movs	r0, r3
 800d6d6:	f000 f867 	bl	800d7a8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d6da:	e00c      	b.n	800d6f6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	0018      	movs	r0, r3
 800d6e0:	f000 f862 	bl	800d7a8 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d6e4:	e007      	b.n	800d6f6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f000 f85d 	bl	800d7a8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800d6f4:	e043      	b.n	800d77e <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800d6f6:	46c0      	nop			; (mov r8, r8)
    return;
 800d6f8:	e041      	b.n	800d77e <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	2280      	movs	r2, #128	; 0x80
 800d6fe:	4013      	ands	r3, r2
 800d700:	d012      	beq.n	800d728 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	2280      	movs	r2, #128	; 0x80
 800d706:	4013      	ands	r3, r2
 800d708:	d104      	bne.n	800d714 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d70a:	697a      	ldr	r2, [r7, #20]
 800d70c:	2380      	movs	r3, #128	; 0x80
 800d70e:	041b      	lsls	r3, r3, #16
 800d710:	4013      	ands	r3, r2
 800d712:	d009      	beq.n	800d728 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d032      	beq.n	800d782 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	0010      	movs	r0, r2
 800d724:	4798      	blx	r3
    }
    return;
 800d726:	e02c      	b.n	800d782 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	2240      	movs	r2, #64	; 0x40
 800d72c:	4013      	ands	r3, r2
 800d72e:	d008      	beq.n	800d742 <HAL_USART_IRQHandler+0x286>
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2240      	movs	r2, #64	; 0x40
 800d734:	4013      	ands	r3, r2
 800d736:	d004      	beq.n	800d742 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	0018      	movs	r0, r3
 800d73c:	f000 fb86 	bl	800de4c <USART_EndTransmit_IT>
    return;
 800d740:	e020      	b.n	800d784 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d742:	69fa      	ldr	r2, [r7, #28]
 800d744:	2380      	movs	r3, #128	; 0x80
 800d746:	041b      	lsls	r3, r3, #16
 800d748:	4013      	ands	r3, r2
 800d74a:	d009      	beq.n	800d760 <HAL_USART_IRQHandler+0x2a4>
 800d74c:	69ba      	ldr	r2, [r7, #24]
 800d74e:	2380      	movs	r3, #128	; 0x80
 800d750:	05db      	lsls	r3, r3, #23
 800d752:	4013      	ands	r3, r2
 800d754:	d004      	beq.n	800d760 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	0018      	movs	r0, r3
 800d75a:	f000 fbc2 	bl	800dee2 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800d75e:	e011      	b.n	800d784 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d760:	69fa      	ldr	r2, [r7, #28]
 800d762:	2380      	movs	r3, #128	; 0x80
 800d764:	045b      	lsls	r3, r3, #17
 800d766:	4013      	ands	r3, r2
 800d768:	d00c      	beq.n	800d784 <HAL_USART_IRQHandler+0x2c8>
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	da09      	bge.n	800d784 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	0018      	movs	r0, r3
 800d774:	f000 fbad 	bl	800ded2 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800d778:	e004      	b.n	800d784 <HAL_USART_IRQHandler+0x2c8>
      return;
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	e002      	b.n	800d784 <HAL_USART_IRQHandler+0x2c8>
    return;
 800d77e:	46c0      	nop			; (mov r8, r8)
 800d780:	e000      	b.n	800d784 <HAL_USART_IRQHandler+0x2c8>
    return;
 800d782:	46c0      	nop			; (mov r8, r8)
  }
}
 800d784:	46bd      	mov	sp, r7
 800d786:	b008      	add	sp, #32
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	0000200f 	.word	0x0000200f
 800d790:	10000001 	.word	0x10000001
 800d794:	0800d7f9 	.word	0x0800d7f9

0800d798 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800d7a0:	46c0      	nop			; (mov r8, r8)
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	b002      	add	sp, #8
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800d7b0:	46c0      	nop			; (mov r8, r8)
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	b002      	add	sp, #8
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4909      	ldr	r1, [pc, #36]	; (800d7f0 <USART_EndTransfer+0x38>)
 800d7cc:	400a      	ands	r2, r1
 800d7ce:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	689a      	ldr	r2, [r3, #8]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4906      	ldr	r1, [pc, #24]	; (800d7f4 <USART_EndTransfer+0x3c>)
 800d7dc:	400a      	ands	r2, r1
 800d7de:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2259      	movs	r2, #89	; 0x59
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	5499      	strb	r1, [r3, r2]
}
 800d7e8:	46c0      	nop			; (mov r8, r8)
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	b002      	add	sp, #8
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	fffffe1f 	.word	0xfffffe1f
 800d7f4:	ef7ffffe 	.word	0xef7ffffe

0800d7f8 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d804:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2200      	movs	r2, #0
 800d80a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	0018      	movs	r0, r3
 800d816:	f7ff ffc7 	bl	800d7a8 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800d81a:	46c0      	nop			; (mov r8, r8)
 800d81c:	46bd      	mov	sp, r7
 800d81e:	b004      	add	sp, #16
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	60f8      	str	r0, [r7, #12]
 800d82a:	60b9      	str	r1, [r7, #8]
 800d82c:	603b      	str	r3, [r7, #0]
 800d82e:	1dfb      	adds	r3, r7, #7
 800d830:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800d832:	e017      	b.n	800d864 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	3301      	adds	r3, #1
 800d838:	d014      	beq.n	800d864 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d83a:	f7f9 fca5 	bl	8007188 <HAL_GetTick>
 800d83e:	0002      	movs	r2, r0
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	1ad3      	subs	r3, r2, r3
 800d844:	69ba      	ldr	r2, [r7, #24]
 800d846:	429a      	cmp	r2, r3
 800d848:	d302      	bcc.n	800d850 <USART_WaitOnFlagUntilTimeout+0x2e>
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d109      	bne.n	800d864 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2259      	movs	r2, #89	; 0x59
 800d854:	2101      	movs	r1, #1
 800d856:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2258      	movs	r2, #88	; 0x58
 800d85c:	2100      	movs	r1, #0
 800d85e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800d860:	2303      	movs	r3, #3
 800d862:	e00f      	b.n	800d884 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	69db      	ldr	r3, [r3, #28]
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	4013      	ands	r3, r2
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	425a      	negs	r2, r3
 800d874:	4153      	adcs	r3, r2
 800d876:	b2db      	uxtb	r3, r3
 800d878:	001a      	movs	r2, r3
 800d87a:	1dfb      	adds	r3, r7, #7
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d0d8      	beq.n	800d834 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	0018      	movs	r0, r3
 800d886:	46bd      	mov	sp, r7
 800d888:	b004      	add	sp, #16
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b088      	sub	sp, #32
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800d894:	231e      	movs	r3, #30
 800d896:	18fb      	adds	r3, r7, r3
 800d898:	2200      	movs	r2, #0
 800d89a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800d89c:	2300      	movs	r3, #0
 800d89e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	431a      	orrs	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	2280      	movs	r2, #128	; 0x80
 800d8b2:	0212      	lsls	r2, r2, #8
 800d8b4:	4313      	orrs	r3, r2
 800d8b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4ab1      	ldr	r2, [pc, #708]	; (800db84 <USART_SetConfig+0x2f8>)
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	0019      	movs	r1, r3
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800d8ce:	2380      	movs	r3, #128	; 0x80
 800d8d0:	011b      	lsls	r3, r3, #4
 800d8d2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6a1b      	ldr	r3, [r3, #32]
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	699a      	ldr	r2, [r3, #24]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	69db      	ldr	r3, [r3, #28]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	697a      	ldr	r2, [r7, #20]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	68db      	ldr	r3, [r3, #12]
 800d8f2:	697a      	ldr	r2, [r7, #20]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	4aa2      	ldr	r2, [pc, #648]	; (800db88 <USART_SetConfig+0x2fc>)
 800d900:	4013      	ands	r3, r2
 800d902:	0019      	movs	r1, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	697a      	ldr	r2, [r7, #20]
 800d90a:	430a      	orrs	r2, r1
 800d90c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	220f      	movs	r2, #15
 800d916:	4393      	bics	r3, r2
 800d918:	0019      	movs	r1, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	430a      	orrs	r2, r1
 800d924:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a98      	ldr	r2, [pc, #608]	; (800db8c <USART_SetConfig+0x300>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d127      	bne.n	800d980 <USART_SetConfig+0xf4>
 800d930:	4b97      	ldr	r3, [pc, #604]	; (800db90 <USART_SetConfig+0x304>)
 800d932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d934:	2203      	movs	r2, #3
 800d936:	4013      	ands	r3, r2
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d017      	beq.n	800d96c <USART_SetConfig+0xe0>
 800d93c:	d81b      	bhi.n	800d976 <USART_SetConfig+0xea>
 800d93e:	2b02      	cmp	r3, #2
 800d940:	d00a      	beq.n	800d958 <USART_SetConfig+0xcc>
 800d942:	d818      	bhi.n	800d976 <USART_SetConfig+0xea>
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <USART_SetConfig+0xc2>
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d00a      	beq.n	800d962 <USART_SetConfig+0xd6>
 800d94c:	e013      	b.n	800d976 <USART_SetConfig+0xea>
 800d94e:	231f      	movs	r3, #31
 800d950:	18fb      	adds	r3, r7, r3
 800d952:	2200      	movs	r2, #0
 800d954:	701a      	strb	r2, [r3, #0]
 800d956:	e058      	b.n	800da0a <USART_SetConfig+0x17e>
 800d958:	231f      	movs	r3, #31
 800d95a:	18fb      	adds	r3, r7, r3
 800d95c:	2202      	movs	r2, #2
 800d95e:	701a      	strb	r2, [r3, #0]
 800d960:	e053      	b.n	800da0a <USART_SetConfig+0x17e>
 800d962:	231f      	movs	r3, #31
 800d964:	18fb      	adds	r3, r7, r3
 800d966:	2204      	movs	r2, #4
 800d968:	701a      	strb	r2, [r3, #0]
 800d96a:	e04e      	b.n	800da0a <USART_SetConfig+0x17e>
 800d96c:	231f      	movs	r3, #31
 800d96e:	18fb      	adds	r3, r7, r3
 800d970:	2208      	movs	r2, #8
 800d972:	701a      	strb	r2, [r3, #0]
 800d974:	e049      	b.n	800da0a <USART_SetConfig+0x17e>
 800d976:	231f      	movs	r3, #31
 800d978:	18fb      	adds	r3, r7, r3
 800d97a:	2210      	movs	r2, #16
 800d97c:	701a      	strb	r2, [r3, #0]
 800d97e:	e044      	b.n	800da0a <USART_SetConfig+0x17e>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a83      	ldr	r2, [pc, #524]	; (800db94 <USART_SetConfig+0x308>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d127      	bne.n	800d9da <USART_SetConfig+0x14e>
 800d98a:	4b81      	ldr	r3, [pc, #516]	; (800db90 <USART_SetConfig+0x304>)
 800d98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d98e:	220c      	movs	r2, #12
 800d990:	4013      	ands	r3, r2
 800d992:	2b0c      	cmp	r3, #12
 800d994:	d017      	beq.n	800d9c6 <USART_SetConfig+0x13a>
 800d996:	d81b      	bhi.n	800d9d0 <USART_SetConfig+0x144>
 800d998:	2b08      	cmp	r3, #8
 800d99a:	d00a      	beq.n	800d9b2 <USART_SetConfig+0x126>
 800d99c:	d818      	bhi.n	800d9d0 <USART_SetConfig+0x144>
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d002      	beq.n	800d9a8 <USART_SetConfig+0x11c>
 800d9a2:	2b04      	cmp	r3, #4
 800d9a4:	d00a      	beq.n	800d9bc <USART_SetConfig+0x130>
 800d9a6:	e013      	b.n	800d9d0 <USART_SetConfig+0x144>
 800d9a8:	231f      	movs	r3, #31
 800d9aa:	18fb      	adds	r3, r7, r3
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	701a      	strb	r2, [r3, #0]
 800d9b0:	e02b      	b.n	800da0a <USART_SetConfig+0x17e>
 800d9b2:	231f      	movs	r3, #31
 800d9b4:	18fb      	adds	r3, r7, r3
 800d9b6:	2202      	movs	r2, #2
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	e026      	b.n	800da0a <USART_SetConfig+0x17e>
 800d9bc:	231f      	movs	r3, #31
 800d9be:	18fb      	adds	r3, r7, r3
 800d9c0:	2204      	movs	r2, #4
 800d9c2:	701a      	strb	r2, [r3, #0]
 800d9c4:	e021      	b.n	800da0a <USART_SetConfig+0x17e>
 800d9c6:	231f      	movs	r3, #31
 800d9c8:	18fb      	adds	r3, r7, r3
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	701a      	strb	r2, [r3, #0]
 800d9ce:	e01c      	b.n	800da0a <USART_SetConfig+0x17e>
 800d9d0:	231f      	movs	r3, #31
 800d9d2:	18fb      	adds	r3, r7, r3
 800d9d4:	2210      	movs	r2, #16
 800d9d6:	701a      	strb	r2, [r3, #0]
 800d9d8:	e017      	b.n	800da0a <USART_SetConfig+0x17e>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a6e      	ldr	r2, [pc, #440]	; (800db98 <USART_SetConfig+0x30c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d104      	bne.n	800d9ee <USART_SetConfig+0x162>
 800d9e4:	231f      	movs	r3, #31
 800d9e6:	18fb      	adds	r3, r7, r3
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	701a      	strb	r2, [r3, #0]
 800d9ec:	e00d      	b.n	800da0a <USART_SetConfig+0x17e>
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a6a      	ldr	r2, [pc, #424]	; (800db9c <USART_SetConfig+0x310>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d104      	bne.n	800da02 <USART_SetConfig+0x176>
 800d9f8:	231f      	movs	r3, #31
 800d9fa:	18fb      	adds	r3, r7, r3
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e003      	b.n	800da0a <USART_SetConfig+0x17e>
 800da02:	231f      	movs	r3, #31
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	2210      	movs	r2, #16
 800da08:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800da0a:	231f      	movs	r3, #31
 800da0c:	18fb      	adds	r3, r7, r3
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	2b08      	cmp	r3, #8
 800da12:	d100      	bne.n	800da16 <USART_SetConfig+0x18a>
 800da14:	e139      	b.n	800dc8a <USART_SetConfig+0x3fe>
 800da16:	dd00      	ble.n	800da1a <USART_SetConfig+0x18e>
 800da18:	e195      	b.n	800dd46 <USART_SetConfig+0x4ba>
 800da1a:	2b04      	cmp	r3, #4
 800da1c:	d100      	bne.n	800da20 <USART_SetConfig+0x194>
 800da1e:	e0d3      	b.n	800dbc8 <USART_SetConfig+0x33c>
 800da20:	dd00      	ble.n	800da24 <USART_SetConfig+0x198>
 800da22:	e190      	b.n	800dd46 <USART_SetConfig+0x4ba>
 800da24:	2b00      	cmp	r3, #0
 800da26:	d003      	beq.n	800da30 <USART_SetConfig+0x1a4>
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d100      	bne.n	800da2e <USART_SetConfig+0x1a2>
 800da2c:	e061      	b.n	800daf2 <USART_SetConfig+0x266>
 800da2e:	e18a      	b.n	800dd46 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800da30:	f7fc fdf2 	bl	800a618 <HAL_RCC_GetPCLK1Freq>
 800da34:	0003      	movs	r3, r0
 800da36:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d044      	beq.n	800daca <USART_SetConfig+0x23e>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da44:	2b01      	cmp	r3, #1
 800da46:	d03e      	beq.n	800dac6 <USART_SetConfig+0x23a>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d038      	beq.n	800dac2 <USART_SetConfig+0x236>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da54:	2b03      	cmp	r3, #3
 800da56:	d032      	beq.n	800dabe <USART_SetConfig+0x232>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	2b04      	cmp	r3, #4
 800da5e:	d02c      	beq.n	800daba <USART_SetConfig+0x22e>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da64:	2b05      	cmp	r3, #5
 800da66:	d026      	beq.n	800dab6 <USART_SetConfig+0x22a>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6c:	2b06      	cmp	r3, #6
 800da6e:	d020      	beq.n	800dab2 <USART_SetConfig+0x226>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da74:	2b07      	cmp	r3, #7
 800da76:	d01a      	beq.n	800daae <USART_SetConfig+0x222>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7c:	2b08      	cmp	r3, #8
 800da7e:	d014      	beq.n	800daaa <USART_SetConfig+0x21e>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	2b09      	cmp	r3, #9
 800da86:	d00e      	beq.n	800daa6 <USART_SetConfig+0x21a>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8c:	2b0a      	cmp	r3, #10
 800da8e:	d008      	beq.n	800daa2 <USART_SetConfig+0x216>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	2b0b      	cmp	r3, #11
 800da96:	d102      	bne.n	800da9e <USART_SetConfig+0x212>
 800da98:	2380      	movs	r3, #128	; 0x80
 800da9a:	005b      	lsls	r3, r3, #1
 800da9c:	e016      	b.n	800dacc <USART_SetConfig+0x240>
 800da9e:	2301      	movs	r3, #1
 800daa0:	e014      	b.n	800dacc <USART_SetConfig+0x240>
 800daa2:	2380      	movs	r3, #128	; 0x80
 800daa4:	e012      	b.n	800dacc <USART_SetConfig+0x240>
 800daa6:	2340      	movs	r3, #64	; 0x40
 800daa8:	e010      	b.n	800dacc <USART_SetConfig+0x240>
 800daaa:	2320      	movs	r3, #32
 800daac:	e00e      	b.n	800dacc <USART_SetConfig+0x240>
 800daae:	2310      	movs	r3, #16
 800dab0:	e00c      	b.n	800dacc <USART_SetConfig+0x240>
 800dab2:	230c      	movs	r3, #12
 800dab4:	e00a      	b.n	800dacc <USART_SetConfig+0x240>
 800dab6:	230a      	movs	r3, #10
 800dab8:	e008      	b.n	800dacc <USART_SetConfig+0x240>
 800daba:	2308      	movs	r3, #8
 800dabc:	e006      	b.n	800dacc <USART_SetConfig+0x240>
 800dabe:	2306      	movs	r3, #6
 800dac0:	e004      	b.n	800dacc <USART_SetConfig+0x240>
 800dac2:	2304      	movs	r3, #4
 800dac4:	e002      	b.n	800dacc <USART_SetConfig+0x240>
 800dac6:	2302      	movs	r3, #2
 800dac8:	e000      	b.n	800dacc <USART_SetConfig+0x240>
 800daca:	2301      	movs	r3, #1
 800dacc:	0019      	movs	r1, r3
 800dace:	6938      	ldr	r0, [r7, #16]
 800dad0:	f7f2 fb18 	bl	8000104 <__udivsi3>
 800dad4:	0003      	movs	r3, r0
 800dad6:	005a      	lsls	r2, r3, #1
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	085b      	lsrs	r3, r3, #1
 800dade:	18d2      	adds	r2, r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	0019      	movs	r1, r3
 800dae6:	0010      	movs	r0, r2
 800dae8:	f7f2 fb0c 	bl	8000104 <__udivsi3>
 800daec:	0003      	movs	r3, r0
 800daee:	61bb      	str	r3, [r7, #24]
      break;
 800daf0:	e12e      	b.n	800dd50 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d052      	beq.n	800dba0 <USART_SetConfig+0x314>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d03e      	beq.n	800db80 <USART_SetConfig+0x2f4>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db06:	2b02      	cmp	r3, #2
 800db08:	d038      	beq.n	800db7c <USART_SetConfig+0x2f0>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d032      	beq.n	800db78 <USART_SetConfig+0x2ec>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db16:	2b04      	cmp	r3, #4
 800db18:	d02c      	beq.n	800db74 <USART_SetConfig+0x2e8>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1e:	2b05      	cmp	r3, #5
 800db20:	d026      	beq.n	800db70 <USART_SetConfig+0x2e4>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	2b06      	cmp	r3, #6
 800db28:	d020      	beq.n	800db6c <USART_SetConfig+0x2e0>
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db2e:	2b07      	cmp	r3, #7
 800db30:	d01a      	beq.n	800db68 <USART_SetConfig+0x2dc>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db36:	2b08      	cmp	r3, #8
 800db38:	d014      	beq.n	800db64 <USART_SetConfig+0x2d8>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3e:	2b09      	cmp	r3, #9
 800db40:	d00e      	beq.n	800db60 <USART_SetConfig+0x2d4>
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db46:	2b0a      	cmp	r3, #10
 800db48:	d008      	beq.n	800db5c <USART_SetConfig+0x2d0>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4e:	2b0b      	cmp	r3, #11
 800db50:	d102      	bne.n	800db58 <USART_SetConfig+0x2cc>
 800db52:	2380      	movs	r3, #128	; 0x80
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	e024      	b.n	800dba2 <USART_SetConfig+0x316>
 800db58:	2301      	movs	r3, #1
 800db5a:	e022      	b.n	800dba2 <USART_SetConfig+0x316>
 800db5c:	2380      	movs	r3, #128	; 0x80
 800db5e:	e020      	b.n	800dba2 <USART_SetConfig+0x316>
 800db60:	2340      	movs	r3, #64	; 0x40
 800db62:	e01e      	b.n	800dba2 <USART_SetConfig+0x316>
 800db64:	2320      	movs	r3, #32
 800db66:	e01c      	b.n	800dba2 <USART_SetConfig+0x316>
 800db68:	2310      	movs	r3, #16
 800db6a:	e01a      	b.n	800dba2 <USART_SetConfig+0x316>
 800db6c:	230c      	movs	r3, #12
 800db6e:	e018      	b.n	800dba2 <USART_SetConfig+0x316>
 800db70:	230a      	movs	r3, #10
 800db72:	e016      	b.n	800dba2 <USART_SetConfig+0x316>
 800db74:	2308      	movs	r3, #8
 800db76:	e014      	b.n	800dba2 <USART_SetConfig+0x316>
 800db78:	2306      	movs	r3, #6
 800db7a:	e012      	b.n	800dba2 <USART_SetConfig+0x316>
 800db7c:	2304      	movs	r3, #4
 800db7e:	e010      	b.n	800dba2 <USART_SetConfig+0x316>
 800db80:	2302      	movs	r3, #2
 800db82:	e00e      	b.n	800dba2 <USART_SetConfig+0x316>
 800db84:	cfff69f3 	.word	0xcfff69f3
 800db88:	ffffc0f6 	.word	0xffffc0f6
 800db8c:	40013800 	.word	0x40013800
 800db90:	40021000 	.word	0x40021000
 800db94:	40004400 	.word	0x40004400
 800db98:	40004800 	.word	0x40004800
 800db9c:	40004c00 	.word	0x40004c00
 800dba0:	2301      	movs	r3, #1
 800dba2:	0019      	movs	r1, r3
 800dba4:	4886      	ldr	r0, [pc, #536]	; (800ddc0 <USART_SetConfig+0x534>)
 800dba6:	f7f2 faad 	bl	8000104 <__udivsi3>
 800dbaa:	0003      	movs	r3, r0
 800dbac:	005a      	lsls	r2, r3, #1
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	085b      	lsrs	r3, r3, #1
 800dbb4:	18d2      	adds	r2, r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	0019      	movs	r1, r3
 800dbbc:	0010      	movs	r0, r2
 800dbbe:	f7f2 faa1 	bl	8000104 <__udivsi3>
 800dbc2:	0003      	movs	r3, r0
 800dbc4:	61bb      	str	r3, [r7, #24]
      break;
 800dbc6:	e0c3      	b.n	800dd50 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800dbc8:	f7fc fc9a 	bl	800a500 <HAL_RCC_GetSysClockFreq>
 800dbcc:	0003      	movs	r3, r0
 800dbce:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d044      	beq.n	800dc62 <USART_SetConfig+0x3d6>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d03e      	beq.n	800dc5e <USART_SetConfig+0x3d2>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d038      	beq.n	800dc5a <USART_SetConfig+0x3ce>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbec:	2b03      	cmp	r3, #3
 800dbee:	d032      	beq.n	800dc56 <USART_SetConfig+0x3ca>
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d02c      	beq.n	800dc52 <USART_SetConfig+0x3c6>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	2b05      	cmp	r3, #5
 800dbfe:	d026      	beq.n	800dc4e <USART_SetConfig+0x3c2>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc04:	2b06      	cmp	r3, #6
 800dc06:	d020      	beq.n	800dc4a <USART_SetConfig+0x3be>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0c:	2b07      	cmp	r3, #7
 800dc0e:	d01a      	beq.n	800dc46 <USART_SetConfig+0x3ba>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc14:	2b08      	cmp	r3, #8
 800dc16:	d014      	beq.n	800dc42 <USART_SetConfig+0x3b6>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc1c:	2b09      	cmp	r3, #9
 800dc1e:	d00e      	beq.n	800dc3e <USART_SetConfig+0x3b2>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc24:	2b0a      	cmp	r3, #10
 800dc26:	d008      	beq.n	800dc3a <USART_SetConfig+0x3ae>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc2c:	2b0b      	cmp	r3, #11
 800dc2e:	d102      	bne.n	800dc36 <USART_SetConfig+0x3aa>
 800dc30:	2380      	movs	r3, #128	; 0x80
 800dc32:	005b      	lsls	r3, r3, #1
 800dc34:	e016      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc36:	2301      	movs	r3, #1
 800dc38:	e014      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc3a:	2380      	movs	r3, #128	; 0x80
 800dc3c:	e012      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc3e:	2340      	movs	r3, #64	; 0x40
 800dc40:	e010      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc42:	2320      	movs	r3, #32
 800dc44:	e00e      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc46:	2310      	movs	r3, #16
 800dc48:	e00c      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc4a:	230c      	movs	r3, #12
 800dc4c:	e00a      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc4e:	230a      	movs	r3, #10
 800dc50:	e008      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc52:	2308      	movs	r3, #8
 800dc54:	e006      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc56:	2306      	movs	r3, #6
 800dc58:	e004      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc5a:	2304      	movs	r3, #4
 800dc5c:	e002      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc5e:	2302      	movs	r3, #2
 800dc60:	e000      	b.n	800dc64 <USART_SetConfig+0x3d8>
 800dc62:	2301      	movs	r3, #1
 800dc64:	0019      	movs	r1, r3
 800dc66:	6938      	ldr	r0, [r7, #16]
 800dc68:	f7f2 fa4c 	bl	8000104 <__udivsi3>
 800dc6c:	0003      	movs	r3, r0
 800dc6e:	005a      	lsls	r2, r3, #1
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	085b      	lsrs	r3, r3, #1
 800dc76:	18d2      	adds	r2, r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	685b      	ldr	r3, [r3, #4]
 800dc7c:	0019      	movs	r1, r3
 800dc7e:	0010      	movs	r0, r2
 800dc80:	f7f2 fa40 	bl	8000104 <__udivsi3>
 800dc84:	0003      	movs	r3, r0
 800dc86:	61bb      	str	r3, [r7, #24]
      break;
 800dc88:	e062      	b.n	800dd50 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d044      	beq.n	800dd1c <USART_SetConfig+0x490>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d03e      	beq.n	800dd18 <USART_SetConfig+0x48c>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d038      	beq.n	800dd14 <USART_SetConfig+0x488>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	2b03      	cmp	r3, #3
 800dca8:	d032      	beq.n	800dd10 <USART_SetConfig+0x484>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcae:	2b04      	cmp	r3, #4
 800dcb0:	d02c      	beq.n	800dd0c <USART_SetConfig+0x480>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb6:	2b05      	cmp	r3, #5
 800dcb8:	d026      	beq.n	800dd08 <USART_SetConfig+0x47c>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbe:	2b06      	cmp	r3, #6
 800dcc0:	d020      	beq.n	800dd04 <USART_SetConfig+0x478>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc6:	2b07      	cmp	r3, #7
 800dcc8:	d01a      	beq.n	800dd00 <USART_SetConfig+0x474>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcce:	2b08      	cmp	r3, #8
 800dcd0:	d014      	beq.n	800dcfc <USART_SetConfig+0x470>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd6:	2b09      	cmp	r3, #9
 800dcd8:	d00e      	beq.n	800dcf8 <USART_SetConfig+0x46c>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcde:	2b0a      	cmp	r3, #10
 800dce0:	d008      	beq.n	800dcf4 <USART_SetConfig+0x468>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce6:	2b0b      	cmp	r3, #11
 800dce8:	d102      	bne.n	800dcf0 <USART_SetConfig+0x464>
 800dcea:	2380      	movs	r3, #128	; 0x80
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	e016      	b.n	800dd1e <USART_SetConfig+0x492>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e014      	b.n	800dd1e <USART_SetConfig+0x492>
 800dcf4:	2380      	movs	r3, #128	; 0x80
 800dcf6:	e012      	b.n	800dd1e <USART_SetConfig+0x492>
 800dcf8:	2340      	movs	r3, #64	; 0x40
 800dcfa:	e010      	b.n	800dd1e <USART_SetConfig+0x492>
 800dcfc:	2320      	movs	r3, #32
 800dcfe:	e00e      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd00:	2310      	movs	r3, #16
 800dd02:	e00c      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd04:	230c      	movs	r3, #12
 800dd06:	e00a      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd08:	230a      	movs	r3, #10
 800dd0a:	e008      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd0c:	2308      	movs	r3, #8
 800dd0e:	e006      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd10:	2306      	movs	r3, #6
 800dd12:	e004      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd14:	2304      	movs	r3, #4
 800dd16:	e002      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd18:	2302      	movs	r3, #2
 800dd1a:	e000      	b.n	800dd1e <USART_SetConfig+0x492>
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	0019      	movs	r1, r3
 800dd20:	2380      	movs	r3, #128	; 0x80
 800dd22:	0218      	lsls	r0, r3, #8
 800dd24:	f7f2 f9ee 	bl	8000104 <__udivsi3>
 800dd28:	0003      	movs	r3, r0
 800dd2a:	005a      	lsls	r2, r3, #1
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	085b      	lsrs	r3, r3, #1
 800dd32:	18d2      	adds	r2, r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	0019      	movs	r1, r3
 800dd3a:	0010      	movs	r0, r2
 800dd3c:	f7f2 f9e2 	bl	8000104 <__udivsi3>
 800dd40:	0003      	movs	r3, r0
 800dd42:	61bb      	str	r3, [r7, #24]
      break;
 800dd44:	e004      	b.n	800dd50 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800dd46:	231e      	movs	r3, #30
 800dd48:	18fb      	adds	r3, r7, r3
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	701a      	strb	r2, [r3, #0]
      break;
 800dd4e:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	2b0f      	cmp	r3, #15
 800dd54:	d91c      	bls.n	800dd90 <USART_SetConfig+0x504>
 800dd56:	69ba      	ldr	r2, [r7, #24]
 800dd58:	2380      	movs	r3, #128	; 0x80
 800dd5a:	025b      	lsls	r3, r3, #9
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d217      	bcs.n	800dd90 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd60:	69bb      	ldr	r3, [r7, #24]
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	200e      	movs	r0, #14
 800dd66:	183b      	adds	r3, r7, r0
 800dd68:	210f      	movs	r1, #15
 800dd6a:	438a      	bics	r2, r1
 800dd6c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	085b      	lsrs	r3, r3, #1
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	2207      	movs	r2, #7
 800dd76:	4013      	ands	r3, r2
 800dd78:	b299      	uxth	r1, r3
 800dd7a:	183b      	adds	r3, r7, r0
 800dd7c:	183a      	adds	r2, r7, r0
 800dd7e:	8812      	ldrh	r2, [r2, #0]
 800dd80:	430a      	orrs	r2, r1
 800dd82:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	183a      	adds	r2, r7, r0
 800dd8a:	8812      	ldrh	r2, [r2, #0]
 800dd8c:	60da      	str	r2, [r3, #12]
 800dd8e:	e003      	b.n	800dd98 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800dd90:	231e      	movs	r3, #30
 800dd92:	18fb      	adds	r3, r7, r3
 800dd94:	2201      	movs	r2, #1
 800dd96:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800ddb0:	231e      	movs	r3, #30
 800ddb2:	18fb      	adds	r3, r7, r3
 800ddb4:	781b      	ldrb	r3, [r3, #0]
}
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	b008      	add	sp, #32
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	46c0      	nop			; (mov r8, r8)
 800ddc0:	00f42400 	.word	0x00f42400

0800ddc4 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ddd2:	f7f9 f9d9 	bl	8007188 <HAL_GetTick>
 800ddd6:	0003      	movs	r3, r0
 800ddd8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2208      	movs	r2, #8
 800dde2:	4013      	ands	r3, r2
 800dde4:	2b08      	cmp	r3, #8
 800dde6:	d10e      	bne.n	800de06 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	2380      	movs	r3, #128	; 0x80
 800ddec:	0399      	lsls	r1, r3, #14
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	23fa      	movs	r3, #250	; 0xfa
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	0013      	movs	r3, r2
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f7ff fd12 	bl	800d822 <USART_WaitOnFlagUntilTimeout>
 800ddfe:	1e03      	subs	r3, r0, #0
 800de00:	d001      	beq.n	800de06 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de02:	2303      	movs	r3, #3
 800de04:	e01e      	b.n	800de44 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2204      	movs	r2, #4
 800de0e:	4013      	ands	r3, r2
 800de10:	2b04      	cmp	r3, #4
 800de12:	d10e      	bne.n	800de32 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	2380      	movs	r3, #128	; 0x80
 800de18:	03d9      	lsls	r1, r3, #15
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	23fa      	movs	r3, #250	; 0xfa
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	0013      	movs	r3, r2
 800de24:	2200      	movs	r2, #0
 800de26:	f7ff fcfc 	bl	800d822 <USART_WaitOnFlagUntilTimeout>
 800de2a:	1e03      	subs	r3, r0, #0
 800de2c:	d001      	beq.n	800de32 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de2e:	2303      	movs	r3, #3
 800de30:	e008      	b.n	800de44 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2259      	movs	r2, #89	; 0x59
 800de36:	2101      	movs	r1, #1
 800de38:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2258      	movs	r2, #88	; 0x58
 800de3e:	2100      	movs	r1, #0
 800de40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	0018      	movs	r0, r3
 800de46:	46bd      	mov	sp, r7
 800de48:	b004      	add	sp, #16
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2140      	movs	r1, #64	; 0x40
 800de60:	438a      	bics	r2, r1
 800de62:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689a      	ldr	r2, [r3, #8]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2101      	movs	r1, #1
 800de70:	438a      	bics	r2, r1
 800de72:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2259      	movs	r2, #89	; 0x59
 800de7e:	5c9b      	ldrb	r3, [r3, r2]
 800de80:	b2db      	uxtb	r3, r3
 800de82:	2b12      	cmp	r3, #18
 800de84:	d114      	bne.n	800deb0 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2208      	movs	r2, #8
 800de8c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	699a      	ldr	r2, [r3, #24]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2108      	movs	r1, #8
 800de9a:	430a      	orrs	r2, r1
 800de9c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2259      	movs	r2, #89	; 0x59
 800dea2:	2101      	movs	r1, #1
 800dea4:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	0018      	movs	r0, r3
 800deaa:	f7f5 f871 	bl	8002f90 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800deae:	e00c      	b.n	800deca <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d107      	bne.n	800deca <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2259      	movs	r2, #89	; 0x59
 800debe:	2101      	movs	r1, #1
 800dec0:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	0018      	movs	r0, r3
 800dec6:	f7ff fc67 	bl	800d798 <HAL_USART_TxRxCpltCallback>
}
 800deca:	46c0      	nop			; (mov r8, r8)
 800decc:	46bd      	mov	sp, r7
 800dece:	b002      	add	sp, #8
 800ded0:	bd80      	pop	{r7, pc}

0800ded2 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b082      	sub	sp, #8
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800deda:	46c0      	nop			; (mov r8, r8)
 800dedc:	46bd      	mov	sp, r7
 800dede:	b002      	add	sp, #8
 800dee0:	bd80      	pop	{r7, pc}

0800dee2 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b082      	sub	sp, #8
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800deea:	46c0      	nop			; (mov r8, r8)
 800deec:	46bd      	mov	sp, r7
 800deee:	b002      	add	sp, #8
 800def0:	bd80      	pop	{r7, pc}

0800def2 <LL_GPIO_SetPinMode>:
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	60f8      	str	r0, [r7, #12]
 800defa:	60b9      	str	r1, [r7, #8]
 800defc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	6819      	ldr	r1, [r3, #0]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	435b      	muls	r3, r3
 800df06:	001a      	movs	r2, r3
 800df08:	0013      	movs	r3, r2
 800df0a:	005b      	lsls	r3, r3, #1
 800df0c:	189b      	adds	r3, r3, r2
 800df0e:	43db      	mvns	r3, r3
 800df10:	400b      	ands	r3, r1
 800df12:	001a      	movs	r2, r3
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	435b      	muls	r3, r3
 800df18:	6879      	ldr	r1, [r7, #4]
 800df1a:	434b      	muls	r3, r1
 800df1c:	431a      	orrs	r2, r3
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	601a      	str	r2, [r3, #0]
}
 800df22:	46c0      	nop			; (mov r8, r8)
 800df24:	46bd      	mov	sp, r7
 800df26:	b004      	add	sp, #16
 800df28:	bd80      	pop	{r7, pc}

0800df2a <LL_GPIO_SetPinOutputType>:
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	af00      	add	r7, sp, #0
 800df30:	60f8      	str	r0, [r7, #12]
 800df32:	60b9      	str	r1, [r7, #8]
 800df34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	43d2      	mvns	r2, r2
 800df3e:	401a      	ands	r2, r3
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	6879      	ldr	r1, [r7, #4]
 800df44:	434b      	muls	r3, r1
 800df46:	431a      	orrs	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	605a      	str	r2, [r3, #4]
}
 800df4c:	46c0      	nop			; (mov r8, r8)
 800df4e:	46bd      	mov	sp, r7
 800df50:	b004      	add	sp, #16
 800df52:	bd80      	pop	{r7, pc}

0800df54 <LL_GPIO_SetPinSpeed>:
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	60b9      	str	r1, [r7, #8]
 800df5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6899      	ldr	r1, [r3, #8]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	435b      	muls	r3, r3
 800df68:	001a      	movs	r2, r3
 800df6a:	0013      	movs	r3, r2
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	189b      	adds	r3, r3, r2
 800df70:	43db      	mvns	r3, r3
 800df72:	400b      	ands	r3, r1
 800df74:	001a      	movs	r2, r3
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	435b      	muls	r3, r3
 800df7a:	6879      	ldr	r1, [r7, #4]
 800df7c:	434b      	muls	r3, r1
 800df7e:	431a      	orrs	r2, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	609a      	str	r2, [r3, #8]
}
 800df84:	46c0      	nop			; (mov r8, r8)
 800df86:	46bd      	mov	sp, r7
 800df88:	b004      	add	sp, #16
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <LL_GPIO_SetPinPull>:
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	68d9      	ldr	r1, [r3, #12]
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	435b      	muls	r3, r3
 800dfa0:	001a      	movs	r2, r3
 800dfa2:	0013      	movs	r3, r2
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	189b      	adds	r3, r3, r2
 800dfa8:	43db      	mvns	r3, r3
 800dfaa:	400b      	ands	r3, r1
 800dfac:	001a      	movs	r2, r3
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	435b      	muls	r3, r3
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	434b      	muls	r3, r1
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	60da      	str	r2, [r3, #12]
}
 800dfbc:	46c0      	nop			; (mov r8, r8)
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	b004      	add	sp, #16
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <LL_GPIO_SetAFPin_0_7>:
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6a19      	ldr	r1, [r3, #32]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	435b      	muls	r3, r3
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	4353      	muls	r3, r2
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	435a      	muls	r2, r3
 800dfe0:	0013      	movs	r3, r2
 800dfe2:	011b      	lsls	r3, r3, #4
 800dfe4:	1a9b      	subs	r3, r3, r2
 800dfe6:	43db      	mvns	r3, r3
 800dfe8:	400b      	ands	r3, r1
 800dfea:	001a      	movs	r2, r3
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	435b      	muls	r3, r3
 800dff0:	68b9      	ldr	r1, [r7, #8]
 800dff2:	434b      	muls	r3, r1
 800dff4:	68b9      	ldr	r1, [r7, #8]
 800dff6:	434b      	muls	r3, r1
 800dff8:	6879      	ldr	r1, [r7, #4]
 800dffa:	434b      	muls	r3, r1
 800dffc:	431a      	orrs	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	621a      	str	r2, [r3, #32]
}
 800e002:	46c0      	nop			; (mov r8, r8)
 800e004:	46bd      	mov	sp, r7
 800e006:	b004      	add	sp, #16
 800e008:	bd80      	pop	{r7, pc}

0800e00a <LL_GPIO_SetAFPin_8_15>:
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b084      	sub	sp, #16
 800e00e:	af00      	add	r7, sp, #0
 800e010:	60f8      	str	r0, [r7, #12]
 800e012:	60b9      	str	r1, [r7, #8]
 800e014:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	0a1b      	lsrs	r3, r3, #8
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	0a12      	lsrs	r2, r2, #8
 800e022:	4353      	muls	r3, r2
 800e024:	68ba      	ldr	r2, [r7, #8]
 800e026:	0a12      	lsrs	r2, r2, #8
 800e028:	4353      	muls	r3, r2
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	0a12      	lsrs	r2, r2, #8
 800e02e:	435a      	muls	r2, r3
 800e030:	0013      	movs	r3, r2
 800e032:	011b      	lsls	r3, r3, #4
 800e034:	1a9b      	subs	r3, r3, r2
 800e036:	43db      	mvns	r3, r3
 800e038:	400b      	ands	r3, r1
 800e03a:	001a      	movs	r2, r3
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	0a1b      	lsrs	r3, r3, #8
 800e040:	68b9      	ldr	r1, [r7, #8]
 800e042:	0a09      	lsrs	r1, r1, #8
 800e044:	434b      	muls	r3, r1
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	0a09      	lsrs	r1, r1, #8
 800e04a:	434b      	muls	r3, r1
 800e04c:	68b9      	ldr	r1, [r7, #8]
 800e04e:	0a09      	lsrs	r1, r1, #8
 800e050:	434b      	muls	r3, r1
 800e052:	6879      	ldr	r1, [r7, #4]
 800e054:	434b      	muls	r3, r1
 800e056:	431a      	orrs	r2, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e05c:	46c0      	nop			; (mov r8, r8)
 800e05e:	46bd      	mov	sp, r7
 800e060:	b004      	add	sp, #16
 800e062:	bd80      	pop	{r7, pc}

0800e064 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800e06e:	2300      	movs	r3, #0
 800e070:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e072:	e047      	b.n	800e104 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2101      	movs	r1, #1
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	4091      	lsls	r1, r2
 800e07e:	000a      	movs	r2, r1
 800e080:	4013      	ands	r3, r2
 800e082:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d039      	beq.n	800e0fe <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d003      	beq.n	800e09a <LL_GPIO_Init+0x36>
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d10d      	bne.n	800e0b6 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	689a      	ldr	r2, [r3, #8]
 800e09e:	68b9      	ldr	r1, [r7, #8]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	0018      	movs	r0, r3
 800e0a4:	f7ff ff56 	bl	800df54 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	68da      	ldr	r2, [r3, #12]
 800e0ac:	68b9      	ldr	r1, [r7, #8]
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	0018      	movs	r0, r3
 800e0b2:	f7ff ff3a 	bl	800df2a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	691a      	ldr	r2, [r3, #16]
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	0018      	movs	r0, r3
 800e0c0:	f7ff ff64 	bl	800df8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d111      	bne.n	800e0f0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2bff      	cmp	r3, #255	; 0xff
 800e0d0:	d807      	bhi.n	800e0e2 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	695a      	ldr	r2, [r3, #20]
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	0018      	movs	r0, r3
 800e0dc:	f7ff ff72 	bl	800dfc4 <LL_GPIO_SetAFPin_0_7>
 800e0e0:	e006      	b.n	800e0f0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	695a      	ldr	r2, [r3, #20]
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	0018      	movs	r0, r3
 800e0ec:	f7ff ff8d 	bl	800e00a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	685a      	ldr	r2, [r3, #4]
 800e0f4:	68b9      	ldr	r1, [r7, #8]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	0018      	movs	r0, r3
 800e0fa:	f7ff fefa 	bl	800def2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	3301      	adds	r3, #1
 800e102:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	40da      	lsrs	r2, r3
 800e10c:	1e13      	subs	r3, r2, #0
 800e10e:	d1b1      	bne.n	800e074 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800e110:	2300      	movs	r3, #0
}
 800e112:	0018      	movs	r0, r3
 800e114:	46bd      	mov	sp, r7
 800e116:	b004      	add	sp, #16
 800e118:	bd80      	pop	{r7, pc}
	...

0800e11c <LL_RCC_HSI_IsReady>:
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e120:	4b07      	ldr	r3, [pc, #28]	; (800e140 <LL_RCC_HSI_IsReady+0x24>)
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	2380      	movs	r3, #128	; 0x80
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	401a      	ands	r2, r3
 800e12a:	2380      	movs	r3, #128	; 0x80
 800e12c:	00db      	lsls	r3, r3, #3
 800e12e:	429a      	cmp	r2, r3
 800e130:	d101      	bne.n	800e136 <LL_RCC_HSI_IsReady+0x1a>
 800e132:	2301      	movs	r3, #1
 800e134:	e000      	b.n	800e138 <LL_RCC_HSI_IsReady+0x1c>
 800e136:	2300      	movs	r3, #0
}
 800e138:	0018      	movs	r0, r3
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	46c0      	nop			; (mov r8, r8)
 800e140:	40021000 	.word	0x40021000

0800e144 <LL_RCC_LSE_IsReady>:
{
 800e144:	b580      	push	{r7, lr}
 800e146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e148:	4b05      	ldr	r3, [pc, #20]	; (800e160 <LL_RCC_LSE_IsReady+0x1c>)
 800e14a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e14c:	2202      	movs	r2, #2
 800e14e:	4013      	ands	r3, r2
 800e150:	2b02      	cmp	r3, #2
 800e152:	d101      	bne.n	800e158 <LL_RCC_LSE_IsReady+0x14>
 800e154:	2301      	movs	r3, #1
 800e156:	e000      	b.n	800e15a <LL_RCC_LSE_IsReady+0x16>
 800e158:	2300      	movs	r3, #0
}
 800e15a:	0018      	movs	r0, r3
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}
 800e160:	40021000 	.word	0x40021000

0800e164 <LL_RCC_GetSysClkSource>:
{
 800e164:	b580      	push	{r7, lr}
 800e166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e168:	4b03      	ldr	r3, [pc, #12]	; (800e178 <LL_RCC_GetSysClkSource+0x14>)
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	2238      	movs	r2, #56	; 0x38
 800e16e:	4013      	ands	r3, r2
}
 800e170:	0018      	movs	r0, r3
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	46c0      	nop			; (mov r8, r8)
 800e178:	40021000 	.word	0x40021000

0800e17c <LL_RCC_GetAHBPrescaler>:
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e180:	4b03      	ldr	r3, [pc, #12]	; (800e190 <LL_RCC_GetAHBPrescaler+0x14>)
 800e182:	689a      	ldr	r2, [r3, #8]
 800e184:	23f0      	movs	r3, #240	; 0xf0
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	4013      	ands	r3, r2
}
 800e18a:	0018      	movs	r0, r3
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	40021000 	.word	0x40021000

0800e194 <LL_RCC_GetAPB1Prescaler>:
{
 800e194:	b580      	push	{r7, lr}
 800e196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800e198:	4b03      	ldr	r3, [pc, #12]	; (800e1a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800e19a:	689a      	ldr	r2, [r3, #8]
 800e19c:	23e0      	movs	r3, #224	; 0xe0
 800e19e:	01db      	lsls	r3, r3, #7
 800e1a0:	4013      	ands	r3, r2
}
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	40021000 	.word	0x40021000

0800e1ac <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800e1b4:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <LL_RCC_GetUSARTClockSource+0x20>)
 800e1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	401a      	ands	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	041b      	lsls	r3, r3, #16
 800e1c0:	4313      	orrs	r3, r2
}
 800e1c2:	0018      	movs	r0, r3
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	b002      	add	sp, #8
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	46c0      	nop			; (mov r8, r8)
 800e1cc:	40021000 	.word	0x40021000

0800e1d0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e1d4:	4b03      	ldr	r3, [pc, #12]	; (800e1e4 <LL_RCC_PLL_GetN+0x14>)
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	0a1b      	lsrs	r3, r3, #8
 800e1da:	227f      	movs	r2, #127	; 0x7f
 800e1dc:	4013      	ands	r3, r2
}
 800e1de:	0018      	movs	r0, r3
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	40021000 	.word	0x40021000

0800e1e8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e1ec:	4b03      	ldr	r3, [pc, #12]	; (800e1fc <LL_RCC_PLL_GetR+0x14>)
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	0f5b      	lsrs	r3, r3, #29
 800e1f2:	075b      	lsls	r3, r3, #29
}
 800e1f4:	0018      	movs	r0, r3
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	46c0      	nop			; (mov r8, r8)
 800e1fc:	40021000 	.word	0x40021000

0800e200 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e204:	4b03      	ldr	r3, [pc, #12]	; (800e214 <LL_RCC_PLL_GetMainSource+0x14>)
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	2203      	movs	r2, #3
 800e20a:	4013      	ands	r3, r2
}
 800e20c:	0018      	movs	r0, r3
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}
 800e212:	46c0      	nop			; (mov r8, r8)
 800e214:	40021000 	.word	0x40021000

0800e218 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e21c:	4b03      	ldr	r3, [pc, #12]	; (800e22c <LL_RCC_PLL_GetDivider+0x14>)
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	2270      	movs	r2, #112	; 0x70
 800e222:	4013      	ands	r3, r2
}
 800e224:	0018      	movs	r0, r3
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	46c0      	nop			; (mov r8, r8)
 800e22c:	40021000 	.word	0x40021000

0800e230 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800e238:	f000 f8a8 	bl	800e38c <RCC_GetSystemClockFreq>
 800e23c:	0002      	movs	r2, r0
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	0018      	movs	r0, r3
 800e248:	f000 f8ce 	bl	800e3e8 <RCC_GetHCLKClockFreq>
 800e24c:	0002      	movs	r2, r0
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	0018      	movs	r0, r3
 800e258:	f000 f8de 	bl	800e418 <RCC_GetPCLK1ClockFreq>
 800e25c:	0002      	movs	r2, r0
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	609a      	str	r2, [r3, #8]
}
 800e262:	46c0      	nop			; (mov r8, r8)
 800e264:	46bd      	mov	sp, r7
 800e266:	b002      	add	sp, #8
 800e268:	bd80      	pop	{r7, pc}
	...

0800e26c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800e274:	2300      	movs	r3, #0
 800e276:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2b03      	cmp	r3, #3
 800e27c:	d134      	bne.n	800e2e8 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	0018      	movs	r0, r3
 800e282:	f7ff ff93 	bl	800e1ac <LL_RCC_GetUSARTClockSource>
 800e286:	0003      	movs	r3, r0
 800e288:	4a39      	ldr	r2, [pc, #228]	; (800e370 <LL_RCC_GetUSARTClockFreq+0x104>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d016      	beq.n	800e2bc <LL_RCC_GetUSARTClockFreq+0x50>
 800e28e:	4a38      	ldr	r2, [pc, #224]	; (800e370 <LL_RCC_GetUSARTClockFreq+0x104>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d81c      	bhi.n	800e2ce <LL_RCC_GetUSARTClockFreq+0x62>
 800e294:	4a37      	ldr	r2, [pc, #220]	; (800e374 <LL_RCC_GetUSARTClockFreq+0x108>)
 800e296:	4293      	cmp	r3, r2
 800e298:	d003      	beq.n	800e2a2 <LL_RCC_GetUSARTClockFreq+0x36>
 800e29a:	4a37      	ldr	r2, [pc, #220]	; (800e378 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d005      	beq.n	800e2ac <LL_RCC_GetUSARTClockFreq+0x40>
 800e2a0:	e015      	b.n	800e2ce <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800e2a2:	f000 f873 	bl	800e38c <RCC_GetSystemClockFreq>
 800e2a6:	0003      	movs	r3, r0
 800e2a8:	60fb      	str	r3, [r7, #12]
        break;
 800e2aa:	e05c      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800e2ac:	f7ff ff36 	bl	800e11c <LL_RCC_HSI_IsReady>
 800e2b0:	0003      	movs	r3, r0
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d150      	bne.n	800e358 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800e2b6:	4b31      	ldr	r3, [pc, #196]	; (800e37c <LL_RCC_GetUSARTClockFreq+0x110>)
 800e2b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e2ba:	e04d      	b.n	800e358 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800e2bc:	f7ff ff42 	bl	800e144 <LL_RCC_LSE_IsReady>
 800e2c0:	0003      	movs	r3, r0
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d14a      	bne.n	800e35c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800e2c6:	2380      	movs	r3, #128	; 0x80
 800e2c8:	021b      	lsls	r3, r3, #8
 800e2ca:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e2cc:	e046      	b.n	800e35c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e2ce:	f000 f85d 	bl	800e38c <RCC_GetSystemClockFreq>
 800e2d2:	0003      	movs	r3, r0
 800e2d4:	0018      	movs	r0, r3
 800e2d6:	f000 f887 	bl	800e3e8 <RCC_GetHCLKClockFreq>
 800e2da:	0003      	movs	r3, r0
 800e2dc:	0018      	movs	r0, r3
 800e2de:	f000 f89b 	bl	800e418 <RCC_GetPCLK1ClockFreq>
 800e2e2:	0003      	movs	r3, r0
 800e2e4:	60fb      	str	r3, [r7, #12]
        break;
 800e2e6:	e03e      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b0c      	cmp	r3, #12
 800e2ec:	d13b      	bne.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	0018      	movs	r0, r3
 800e2f2:	f7ff ff5b 	bl	800e1ac <LL_RCC_GetUSARTClockSource>
 800e2f6:	0003      	movs	r3, r0
 800e2f8:	4a21      	ldr	r2, [pc, #132]	; (800e380 <LL_RCC_GetUSARTClockFreq+0x114>)
 800e2fa:	4293      	cmp	r3, r2
 800e2fc:	d016      	beq.n	800e32c <LL_RCC_GetUSARTClockFreq+0xc0>
 800e2fe:	4a20      	ldr	r2, [pc, #128]	; (800e380 <LL_RCC_GetUSARTClockFreq+0x114>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d81c      	bhi.n	800e33e <LL_RCC_GetUSARTClockFreq+0xd2>
 800e304:	4a1f      	ldr	r2, [pc, #124]	; (800e384 <LL_RCC_GetUSARTClockFreq+0x118>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d003      	beq.n	800e312 <LL_RCC_GetUSARTClockFreq+0xa6>
 800e30a:	4a1f      	ldr	r2, [pc, #124]	; (800e388 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d005      	beq.n	800e31c <LL_RCC_GetUSARTClockFreq+0xb0>
 800e310:	e015      	b.n	800e33e <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800e312:	f000 f83b 	bl	800e38c <RCC_GetSystemClockFreq>
 800e316:	0003      	movs	r3, r0
 800e318:	60fb      	str	r3, [r7, #12]
        break;
 800e31a:	e024      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800e31c:	f7ff fefe 	bl	800e11c <LL_RCC_HSI_IsReady>
 800e320:	0003      	movs	r3, r0
 800e322:	2b01      	cmp	r3, #1
 800e324:	d11c      	bne.n	800e360 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800e326:	4b15      	ldr	r3, [pc, #84]	; (800e37c <LL_RCC_GetUSARTClockFreq+0x110>)
 800e328:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e32a:	e019      	b.n	800e360 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800e32c:	f7ff ff0a 	bl	800e144 <LL_RCC_LSE_IsReady>
 800e330:	0003      	movs	r3, r0
 800e332:	2b01      	cmp	r3, #1
 800e334:	d116      	bne.n	800e364 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800e336:	2380      	movs	r3, #128	; 0x80
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800e33c:	e012      	b.n	800e364 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e33e:	f000 f825 	bl	800e38c <RCC_GetSystemClockFreq>
 800e342:	0003      	movs	r3, r0
 800e344:	0018      	movs	r0, r3
 800e346:	f000 f84f 	bl	800e3e8 <RCC_GetHCLKClockFreq>
 800e34a:	0003      	movs	r3, r0
 800e34c:	0018      	movs	r0, r3
 800e34e:	f000 f863 	bl	800e418 <RCC_GetPCLK1ClockFreq>
 800e352:	0003      	movs	r3, r0
 800e354:	60fb      	str	r3, [r7, #12]
        break;
 800e356:	e006      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e358:	46c0      	nop			; (mov r8, r8)
 800e35a:	e004      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e35c:	46c0      	nop			; (mov r8, r8)
 800e35e:	e002      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e360:	46c0      	nop			; (mov r8, r8)
 800e362:	e000      	b.n	800e366 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800e364:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800e366:	68fb      	ldr	r3, [r7, #12]
}
 800e368:	0018      	movs	r0, r3
 800e36a:	46bd      	mov	sp, r7
 800e36c:	b004      	add	sp, #16
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	00030003 	.word	0x00030003
 800e374:	00030001 	.word	0x00030001
 800e378:	00030002 	.word	0x00030002
 800e37c:	00f42400 	.word	0x00f42400
 800e380:	000c000c 	.word	0x000c000c
 800e384:	000c0004 	.word	0x000c0004
 800e388:	000c0008 	.word	0x000c0008

0800e38c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e392:	f7ff fee7 	bl	800e164 <LL_RCC_GetSysClkSource>
 800e396:	0003      	movs	r3, r0
 800e398:	2b08      	cmp	r3, #8
 800e39a:	d002      	beq.n	800e3a2 <RCC_GetSystemClockFreq+0x16>
 800e39c:	2b10      	cmp	r3, #16
 800e39e:	d003      	beq.n	800e3a8 <RCC_GetSystemClockFreq+0x1c>
 800e3a0:	e007      	b.n	800e3b2 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e3a2:	4b0e      	ldr	r3, [pc, #56]	; (800e3dc <RCC_GetSystemClockFreq+0x50>)
 800e3a4:	607b      	str	r3, [r7, #4]
      break;
 800e3a6:	e014      	b.n	800e3d2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800e3a8:	f000 f84c 	bl	800e444 <RCC_PLL_GetFreqDomain_SYS>
 800e3ac:	0003      	movs	r3, r0
 800e3ae:	607b      	str	r3, [r7, #4]
      break;
 800e3b0:	e00f      	b.n	800e3d2 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800e3b2:	4b0b      	ldr	r3, [pc, #44]	; (800e3e0 <RCC_GetSystemClockFreq+0x54>)
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	0adb      	lsrs	r3, r3, #11
 800e3b8:	2207      	movs	r2, #7
 800e3ba:	4013      	ands	r3, r2
 800e3bc:	2201      	movs	r2, #1
 800e3be:	409a      	lsls	r2, r3
 800e3c0:	0013      	movs	r3, r2
 800e3c2:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	4807      	ldr	r0, [pc, #28]	; (800e3e4 <RCC_GetSystemClockFreq+0x58>)
 800e3c8:	f7f1 fe9c 	bl	8000104 <__udivsi3>
 800e3cc:	0003      	movs	r3, r0
 800e3ce:	607b      	str	r3, [r7, #4]
      break;
 800e3d0:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800e3d2:	687b      	ldr	r3, [r7, #4]
}
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	b002      	add	sp, #8
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	007a1200 	.word	0x007a1200
 800e3e0:	40021000 	.word	0x40021000
 800e3e4:	00f42400 	.word	0x00f42400

0800e3e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b082      	sub	sp, #8
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e3f0:	f7ff fec4 	bl	800e17c <LL_RCC_GetAHBPrescaler>
 800e3f4:	0003      	movs	r3, r0
 800e3f6:	0a1b      	lsrs	r3, r3, #8
 800e3f8:	220f      	movs	r2, #15
 800e3fa:	401a      	ands	r2, r3
 800e3fc:	4b05      	ldr	r3, [pc, #20]	; (800e414 <RCC_GetHCLKClockFreq+0x2c>)
 800e3fe:	0092      	lsls	r2, r2, #2
 800e400:	58d3      	ldr	r3, [r2, r3]
 800e402:	221f      	movs	r2, #31
 800e404:	4013      	ands	r3, r2
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	40da      	lsrs	r2, r3
 800e40a:	0013      	movs	r3, r2
}
 800e40c:	0018      	movs	r0, r3
 800e40e:	46bd      	mov	sp, r7
 800e410:	b002      	add	sp, #8
 800e412:	bd80      	pop	{r7, pc}
 800e414:	0801b22c 	.word	0x0801b22c

0800e418 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e420:	f7ff feb8 	bl	800e194 <LL_RCC_GetAPB1Prescaler>
 800e424:	0003      	movs	r3, r0
 800e426:	0b1a      	lsrs	r2, r3, #12
 800e428:	4b05      	ldr	r3, [pc, #20]	; (800e440 <RCC_GetPCLK1ClockFreq+0x28>)
 800e42a:	0092      	lsls	r2, r2, #2
 800e42c:	58d3      	ldr	r3, [r2, r3]
 800e42e:	221f      	movs	r2, #31
 800e430:	4013      	ands	r3, r2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	40da      	lsrs	r2, r3
 800e436:	0013      	movs	r3, r2
}
 800e438:	0018      	movs	r0, r3
 800e43a:	46bd      	mov	sp, r7
 800e43c:	b002      	add	sp, #8
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	0801b26c 	.word	0x0801b26c

0800e444 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800e444:	b590      	push	{r4, r7, lr}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800e44a:	f7ff fed9 	bl	800e200 <LL_RCC_PLL_GetMainSource>
 800e44e:	0003      	movs	r3, r0
 800e450:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d003      	beq.n	800e460 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b03      	cmp	r3, #3
 800e45c:	d003      	beq.n	800e466 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800e45e:	e005      	b.n	800e46c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800e460:	4b13      	ldr	r3, [pc, #76]	; (800e4b0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800e462:	607b      	str	r3, [r7, #4]
      break;
 800e464:	e005      	b.n	800e472 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800e466:	4b13      	ldr	r3, [pc, #76]	; (800e4b4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800e468:	607b      	str	r3, [r7, #4]
      break;
 800e46a:	e002      	b.n	800e472 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800e46c:	4b10      	ldr	r3, [pc, #64]	; (800e4b0 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800e46e:	607b      	str	r3, [r7, #4]
      break;
 800e470:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800e472:	f7ff fead 	bl	800e1d0 <LL_RCC_PLL_GetN>
 800e476:	0002      	movs	r2, r0
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4353      	muls	r3, r2
 800e47c:	001c      	movs	r4, r3
 800e47e:	f7ff fecb 	bl	800e218 <LL_RCC_PLL_GetDivider>
 800e482:	0003      	movs	r3, r0
 800e484:	091b      	lsrs	r3, r3, #4
 800e486:	3301      	adds	r3, #1
 800e488:	0019      	movs	r1, r3
 800e48a:	0020      	movs	r0, r4
 800e48c:	f7f1 fe3a 	bl	8000104 <__udivsi3>
 800e490:	0003      	movs	r3, r0
 800e492:	001c      	movs	r4, r3
 800e494:	f7ff fea8 	bl	800e1e8 <LL_RCC_PLL_GetR>
 800e498:	0003      	movs	r3, r0
 800e49a:	0f5b      	lsrs	r3, r3, #29
 800e49c:	3301      	adds	r3, #1
 800e49e:	0019      	movs	r1, r3
 800e4a0:	0020      	movs	r0, r4
 800e4a2:	f7f1 fe2f 	bl	8000104 <__udivsi3>
 800e4a6:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	b003      	add	sp, #12
 800e4ae:	bd90      	pop	{r4, r7, pc}
 800e4b0:	00f42400 	.word	0x00f42400
 800e4b4:	007a1200 	.word	0x007a1200

0800e4b8 <LL_USART_IsEnabled>:
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d101      	bne.n	800e4d0 <LL_USART_IsEnabled+0x18>
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	e000      	b.n	800e4d2 <LL_USART_IsEnabled+0x1a>
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	0018      	movs	r0, r3
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	b002      	add	sp, #8
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <LL_USART_SetPrescaler>:
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b082      	sub	sp, #8
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e8:	220f      	movs	r2, #15
 800e4ea:	4393      	bics	r3, r2
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	b292      	uxth	r2, r2
 800e4f0:	431a      	orrs	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e4f6:	46c0      	nop			; (mov r8, r8)
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	b002      	add	sp, #8
 800e4fc:	bd80      	pop	{r7, pc}
	...

0800e500 <LL_USART_SetStopBitsLength>:
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	4a05      	ldr	r2, [pc, #20]	; (800e524 <LL_USART_SetStopBitsLength+0x24>)
 800e510:	401a      	ands	r2, r3
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	431a      	orrs	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	605a      	str	r2, [r3, #4]
}
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	46bd      	mov	sp, r7
 800e51e:	b002      	add	sp, #8
 800e520:	bd80      	pop	{r7, pc}
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	ffffcfff 	.word	0xffffcfff

0800e528 <LL_USART_SetHWFlowCtrl>:
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	4a05      	ldr	r2, [pc, #20]	; (800e54c <LL_USART_SetHWFlowCtrl+0x24>)
 800e538:	401a      	ands	r2, r3
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	431a      	orrs	r2, r3
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	609a      	str	r2, [r3, #8]
}
 800e542:	46c0      	nop			; (mov r8, r8)
 800e544:	46bd      	mov	sp, r7
 800e546:	b002      	add	sp, #8
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	46c0      	nop			; (mov r8, r8)
 800e54c:	fffffcff 	.word	0xfffffcff

0800e550 <LL_USART_SetBaudRate>:
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b086      	sub	sp, #24
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2b0b      	cmp	r3, #11
 800e562:	d843      	bhi.n	800e5ec <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800e564:	683a      	ldr	r2, [r7, #0]
 800e566:	2380      	movs	r3, #128	; 0x80
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d126      	bne.n	800e5bc <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	b2db      	uxtb	r3, r3
 800e572:	001a      	movs	r2, r3
 800e574:	4b1f      	ldr	r3, [pc, #124]	; (800e5f4 <LL_USART_SetBaudRate+0xa4>)
 800e576:	0092      	lsls	r2, r2, #2
 800e578:	58d3      	ldr	r3, [r2, r3]
 800e57a:	0019      	movs	r1, r3
 800e57c:	68b8      	ldr	r0, [r7, #8]
 800e57e:	f7f1 fdc1 	bl	8000104 <__udivsi3>
 800e582:	0003      	movs	r3, r0
 800e584:	005a      	lsls	r2, r3, #1
 800e586:	6a3b      	ldr	r3, [r7, #32]
 800e588:	085b      	lsrs	r3, r3, #1
 800e58a:	18d3      	adds	r3, r2, r3
 800e58c:	6a39      	ldr	r1, [r7, #32]
 800e58e:	0018      	movs	r0, r3
 800e590:	f7f1 fdb8 	bl	8000104 <__udivsi3>
 800e594:	0003      	movs	r3, r0
 800e596:	b29b      	uxth	r3, r3
 800e598:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	4a16      	ldr	r2, [pc, #88]	; (800e5f8 <LL_USART_SetBaudRate+0xa8>)
 800e59e:	4013      	ands	r3, r2
 800e5a0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	085b      	lsrs	r3, r3, #1
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	001a      	movs	r2, r3
 800e5aa:	2307      	movs	r3, #7
 800e5ac:	4013      	ands	r3, r2
 800e5ae:	693a      	ldr	r2, [r7, #16]
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	60da      	str	r2, [r3, #12]
}
 800e5ba:	e017      	b.n	800e5ec <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	001a      	movs	r2, r3
 800e5c2:	4b0c      	ldr	r3, [pc, #48]	; (800e5f4 <LL_USART_SetBaudRate+0xa4>)
 800e5c4:	0092      	lsls	r2, r2, #2
 800e5c6:	58d3      	ldr	r3, [r2, r3]
 800e5c8:	0019      	movs	r1, r3
 800e5ca:	68b8      	ldr	r0, [r7, #8]
 800e5cc:	f7f1 fd9a 	bl	8000104 <__udivsi3>
 800e5d0:	0003      	movs	r3, r0
 800e5d2:	001a      	movs	r2, r3
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	085b      	lsrs	r3, r3, #1
 800e5d8:	18d3      	adds	r3, r2, r3
 800e5da:	6a39      	ldr	r1, [r7, #32]
 800e5dc:	0018      	movs	r0, r3
 800e5de:	f7f1 fd91 	bl	8000104 <__udivsi3>
 800e5e2:	0003      	movs	r3, r0
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	001a      	movs	r2, r3
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	60da      	str	r2, [r3, #12]
}
 800e5ec:	46c0      	nop			; (mov r8, r8)
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	b006      	add	sp, #24
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	0801b2e0 	.word	0x0801b2e0
 800e5f8:	0000fff0 	.word	0x0000fff0

0800e5fc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800e5fc:	b590      	push	{r4, r7, lr}
 800e5fe:	b08b      	sub	sp, #44	; 0x2c
 800e600:	af02      	add	r7, sp, #8
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e606:	231f      	movs	r3, #31
 800e608:	18fb      	adds	r3, r7, r3
 800e60a:	2201      	movs	r2, #1
 800e60c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800e60e:	2300      	movs	r3, #0
 800e610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	0018      	movs	r0, r3
 800e616:	f7ff ff4f 	bl	800e4b8 <LL_USART_IsEnabled>
 800e61a:	1e03      	subs	r3, r0, #0
 800e61c:	d16a      	bne.n	800e6f4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a38      	ldr	r2, [pc, #224]	; (800e704 <LL_USART_Init+0x108>)
 800e624:	401a      	ands	r2, r3
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	6899      	ldr	r1, [r3, #8]
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	691b      	ldr	r3, [r3, #16]
 800e62e:	4319      	orrs	r1, r3
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	4319      	orrs	r1, r3
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	69db      	ldr	r3, [r3, #28]
 800e63a:	430b      	orrs	r3, r1
 800e63c:	431a      	orrs	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	68da      	ldr	r2, [r3, #12]
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	0011      	movs	r1, r2
 800e64a:	0018      	movs	r0, r3
 800e64c:	f7ff ff58 	bl	800e500 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	699a      	ldr	r2, [r3, #24]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	0011      	movs	r1, r2
 800e658:	0018      	movs	r0, r3
 800e65a:	f7ff ff65 	bl	800e528 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a29      	ldr	r2, [pc, #164]	; (800e708 <LL_USART_Init+0x10c>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d105      	bne.n	800e672 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800e666:	2003      	movs	r0, #3
 800e668:	f7ff fe00 	bl	800e26c <LL_RCC_GetUSARTClockFreq>
 800e66c:	0003      	movs	r3, r0
 800e66e:	61bb      	str	r3, [r7, #24]
 800e670:	e022      	b.n	800e6b8 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4a25      	ldr	r2, [pc, #148]	; (800e70c <LL_USART_Init+0x110>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d105      	bne.n	800e686 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800e67a:	200c      	movs	r0, #12
 800e67c:	f7ff fdf6 	bl	800e26c <LL_RCC_GetUSARTClockFreq>
 800e680:	0003      	movs	r3, r0
 800e682:	61bb      	str	r3, [r7, #24]
 800e684:	e018      	b.n	800e6b8 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a21      	ldr	r2, [pc, #132]	; (800e710 <LL_USART_Init+0x114>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d108      	bne.n	800e6a0 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800e68e:	240c      	movs	r4, #12
 800e690:	193b      	adds	r3, r7, r4
 800e692:	0018      	movs	r0, r3
 800e694:	f7ff fdcc 	bl	800e230 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800e698:	193b      	adds	r3, r7, r4
 800e69a:	689b      	ldr	r3, [r3, #8]
 800e69c:	61bb      	str	r3, [r7, #24]
 800e69e:	e00b      	b.n	800e6b8 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4a1c      	ldr	r2, [pc, #112]	; (800e714 <LL_USART_Init+0x118>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	d107      	bne.n	800e6b8 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800e6a8:	240c      	movs	r4, #12
 800e6aa:	193b      	adds	r3, r7, r4
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f7ff fdbf 	bl	800e230 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800e6b2:	193b      	adds	r3, r7, r4
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d013      	beq.n	800e6e6 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d00f      	beq.n	800e6e6 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800e6c6:	231f      	movs	r3, #31
 800e6c8:	18fb      	adds	r3, r7, r3
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	69dc      	ldr	r4, [r3, #28]
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	69b9      	ldr	r1, [r7, #24]
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	0023      	movs	r3, r4
 800e6e2:	f7ff ff35 	bl	800e550 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	0011      	movs	r1, r2
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	f7ff fef3 	bl	800e4da <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800e6f4:	231f      	movs	r3, #31
 800e6f6:	18fb      	adds	r3, r7, r3
 800e6f8:	781b      	ldrb	r3, [r3, #0]
}
 800e6fa:	0018      	movs	r0, r3
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	b009      	add	sp, #36	; 0x24
 800e700:	bd90      	pop	{r4, r7, pc}
 800e702:	46c0      	nop			; (mov r8, r8)
 800e704:	efff69f3 	.word	0xefff69f3
 800e708:	40013800 	.word	0x40013800
 800e70c:	40004400 	.word	0x40004400
 800e710:	40004800 	.word	0x40004800
 800e714:	40004c00 	.word	0x40004c00

0800e718 <__libc_init_array>:
 800e718:	b570      	push	{r4, r5, r6, lr}
 800e71a:	2600      	movs	r6, #0
 800e71c:	4d0c      	ldr	r5, [pc, #48]	; (800e750 <__libc_init_array+0x38>)
 800e71e:	4c0d      	ldr	r4, [pc, #52]	; (800e754 <__libc_init_array+0x3c>)
 800e720:	1b64      	subs	r4, r4, r5
 800e722:	10a4      	asrs	r4, r4, #2
 800e724:	42a6      	cmp	r6, r4
 800e726:	d109      	bne.n	800e73c <__libc_init_array+0x24>
 800e728:	2600      	movs	r6, #0
 800e72a:	f001 f82f 	bl	800f78c <_init>
 800e72e:	4d0a      	ldr	r5, [pc, #40]	; (800e758 <__libc_init_array+0x40>)
 800e730:	4c0a      	ldr	r4, [pc, #40]	; (800e75c <__libc_init_array+0x44>)
 800e732:	1b64      	subs	r4, r4, r5
 800e734:	10a4      	asrs	r4, r4, #2
 800e736:	42a6      	cmp	r6, r4
 800e738:	d105      	bne.n	800e746 <__libc_init_array+0x2e>
 800e73a:	bd70      	pop	{r4, r5, r6, pc}
 800e73c:	00b3      	lsls	r3, r6, #2
 800e73e:	58eb      	ldr	r3, [r5, r3]
 800e740:	4798      	blx	r3
 800e742:	3601      	adds	r6, #1
 800e744:	e7ee      	b.n	800e724 <__libc_init_array+0xc>
 800e746:	00b3      	lsls	r3, r6, #2
 800e748:	58eb      	ldr	r3, [r5, r3]
 800e74a:	4798      	blx	r3
 800e74c:	3601      	adds	r6, #1
 800e74e:	e7f2      	b.n	800e736 <__libc_init_array+0x1e>
 800e750:	0801b4e8 	.word	0x0801b4e8
 800e754:	0801b4e8 	.word	0x0801b4e8
 800e758:	0801b4e8 	.word	0x0801b4e8
 800e75c:	0801b4ec 	.word	0x0801b4ec

0800e760 <memset>:
 800e760:	0003      	movs	r3, r0
 800e762:	1882      	adds	r2, r0, r2
 800e764:	4293      	cmp	r3, r2
 800e766:	d100      	bne.n	800e76a <memset+0xa>
 800e768:	4770      	bx	lr
 800e76a:	7019      	strb	r1, [r3, #0]
 800e76c:	3301      	adds	r3, #1
 800e76e:	e7f9      	b.n	800e764 <memset+0x4>

0800e770 <sin>:
 800e770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e772:	4a20      	ldr	r2, [pc, #128]	; (800e7f4 <sin+0x84>)
 800e774:	004b      	lsls	r3, r1, #1
 800e776:	b087      	sub	sp, #28
 800e778:	085b      	lsrs	r3, r3, #1
 800e77a:	4293      	cmp	r3, r2
 800e77c:	dc06      	bgt.n	800e78c <sin+0x1c>
 800e77e:	2300      	movs	r3, #0
 800e780:	2200      	movs	r2, #0
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	2300      	movs	r3, #0
 800e786:	f000 fe53 	bl	800f430 <__kernel_sin>
 800e78a:	e006      	b.n	800e79a <sin+0x2a>
 800e78c:	4a1a      	ldr	r2, [pc, #104]	; (800e7f8 <sin+0x88>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	dd05      	ble.n	800e79e <sin+0x2e>
 800e792:	0002      	movs	r2, r0
 800e794:	000b      	movs	r3, r1
 800e796:	f7f3 f831 	bl	80017fc <__aeabi_dsub>
 800e79a:	b007      	add	sp, #28
 800e79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e79e:	aa02      	add	r2, sp, #8
 800e7a0:	f000 f82c 	bl	800e7fc <__ieee754_rem_pio2>
 800e7a4:	9c04      	ldr	r4, [sp, #16]
 800e7a6:	9d05      	ldr	r5, [sp, #20]
 800e7a8:	2303      	movs	r3, #3
 800e7aa:	4003      	ands	r3, r0
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d00a      	beq.n	800e7c6 <sin+0x56>
 800e7b0:	9802      	ldr	r0, [sp, #8]
 800e7b2:	9903      	ldr	r1, [sp, #12]
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d00d      	beq.n	800e7d4 <sin+0x64>
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d115      	bne.n	800e7e8 <sin+0x78>
 800e7bc:	3301      	adds	r3, #1
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	0022      	movs	r2, r4
 800e7c2:	002b      	movs	r3, r5
 800e7c4:	e7df      	b.n	800e786 <sin+0x16>
 800e7c6:	0022      	movs	r2, r4
 800e7c8:	9802      	ldr	r0, [sp, #8]
 800e7ca:	9903      	ldr	r1, [sp, #12]
 800e7cc:	002b      	movs	r3, r5
 800e7ce:	f000 fa05 	bl	800ebdc <__kernel_cos>
 800e7d2:	e7e2      	b.n	800e79a <sin+0x2a>
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	0022      	movs	r2, r4
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	002b      	movs	r3, r5
 800e7dc:	f000 fe28 	bl	800f430 <__kernel_sin>
 800e7e0:	2380      	movs	r3, #128	; 0x80
 800e7e2:	061b      	lsls	r3, r3, #24
 800e7e4:	18c9      	adds	r1, r1, r3
 800e7e6:	e7d8      	b.n	800e79a <sin+0x2a>
 800e7e8:	0022      	movs	r2, r4
 800e7ea:	002b      	movs	r3, r5
 800e7ec:	f000 f9f6 	bl	800ebdc <__kernel_cos>
 800e7f0:	e7f6      	b.n	800e7e0 <sin+0x70>
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	3fe921fb 	.word	0x3fe921fb
 800e7f8:	7fefffff 	.word	0x7fefffff

0800e7fc <__ieee754_rem_pio2>:
 800e7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7fe:	004b      	lsls	r3, r1, #1
 800e800:	b091      	sub	sp, #68	; 0x44
 800e802:	085b      	lsrs	r3, r3, #1
 800e804:	9302      	str	r3, [sp, #8]
 800e806:	0017      	movs	r7, r2
 800e808:	4bb6      	ldr	r3, [pc, #728]	; (800eae4 <__ieee754_rem_pio2+0x2e8>)
 800e80a:	9a02      	ldr	r2, [sp, #8]
 800e80c:	0004      	movs	r4, r0
 800e80e:	000d      	movs	r5, r1
 800e810:	9109      	str	r1, [sp, #36]	; 0x24
 800e812:	429a      	cmp	r2, r3
 800e814:	dc09      	bgt.n	800e82a <__ieee754_rem_pio2+0x2e>
 800e816:	0002      	movs	r2, r0
 800e818:	000b      	movs	r3, r1
 800e81a:	603a      	str	r2, [r7, #0]
 800e81c:	607b      	str	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	2300      	movs	r3, #0
 800e822:	60ba      	str	r2, [r7, #8]
 800e824:	60fb      	str	r3, [r7, #12]
 800e826:	2600      	movs	r6, #0
 800e828:	e025      	b.n	800e876 <__ieee754_rem_pio2+0x7a>
 800e82a:	4baf      	ldr	r3, [pc, #700]	; (800eae8 <__ieee754_rem_pio2+0x2ec>)
 800e82c:	9a02      	ldr	r2, [sp, #8]
 800e82e:	429a      	cmp	r2, r3
 800e830:	dd00      	ble.n	800e834 <__ieee754_rem_pio2+0x38>
 800e832:	e06e      	b.n	800e912 <__ieee754_rem_pio2+0x116>
 800e834:	4ead      	ldr	r6, [pc, #692]	; (800eaec <__ieee754_rem_pio2+0x2f0>)
 800e836:	4aae      	ldr	r2, [pc, #696]	; (800eaf0 <__ieee754_rem_pio2+0x2f4>)
 800e838:	2d00      	cmp	r5, #0
 800e83a:	dd35      	ble.n	800e8a8 <__ieee754_rem_pio2+0xac>
 800e83c:	0020      	movs	r0, r4
 800e83e:	0029      	movs	r1, r5
 800e840:	4baa      	ldr	r3, [pc, #680]	; (800eaec <__ieee754_rem_pio2+0x2f0>)
 800e842:	f7f2 ffdb 	bl	80017fc <__aeabi_dsub>
 800e846:	9b02      	ldr	r3, [sp, #8]
 800e848:	0004      	movs	r4, r0
 800e84a:	000d      	movs	r5, r1
 800e84c:	42b3      	cmp	r3, r6
 800e84e:	d015      	beq.n	800e87c <__ieee754_rem_pio2+0x80>
 800e850:	4aa8      	ldr	r2, [pc, #672]	; (800eaf4 <__ieee754_rem_pio2+0x2f8>)
 800e852:	4ba9      	ldr	r3, [pc, #676]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e854:	f7f2 ffd2 	bl	80017fc <__aeabi_dsub>
 800e858:	0002      	movs	r2, r0
 800e85a:	000b      	movs	r3, r1
 800e85c:	0020      	movs	r0, r4
 800e85e:	603a      	str	r2, [r7, #0]
 800e860:	607b      	str	r3, [r7, #4]
 800e862:	0029      	movs	r1, r5
 800e864:	f7f2 ffca 	bl	80017fc <__aeabi_dsub>
 800e868:	4aa2      	ldr	r2, [pc, #648]	; (800eaf4 <__ieee754_rem_pio2+0x2f8>)
 800e86a:	4ba3      	ldr	r3, [pc, #652]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e86c:	f7f2 ffc6 	bl	80017fc <__aeabi_dsub>
 800e870:	2601      	movs	r6, #1
 800e872:	60b8      	str	r0, [r7, #8]
 800e874:	60f9      	str	r1, [r7, #12]
 800e876:	0030      	movs	r0, r6
 800e878:	b011      	add	sp, #68	; 0x44
 800e87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e87c:	22d3      	movs	r2, #211	; 0xd3
 800e87e:	4b9e      	ldr	r3, [pc, #632]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e880:	0552      	lsls	r2, r2, #21
 800e882:	f7f2 ffbb 	bl	80017fc <__aeabi_dsub>
 800e886:	4a9d      	ldr	r2, [pc, #628]	; (800eafc <__ieee754_rem_pio2+0x300>)
 800e888:	4b9d      	ldr	r3, [pc, #628]	; (800eb00 <__ieee754_rem_pio2+0x304>)
 800e88a:	0004      	movs	r4, r0
 800e88c:	000d      	movs	r5, r1
 800e88e:	f7f2 ffb5 	bl	80017fc <__aeabi_dsub>
 800e892:	0002      	movs	r2, r0
 800e894:	000b      	movs	r3, r1
 800e896:	0020      	movs	r0, r4
 800e898:	603a      	str	r2, [r7, #0]
 800e89a:	607b      	str	r3, [r7, #4]
 800e89c:	0029      	movs	r1, r5
 800e89e:	f7f2 ffad 	bl	80017fc <__aeabi_dsub>
 800e8a2:	4a96      	ldr	r2, [pc, #600]	; (800eafc <__ieee754_rem_pio2+0x300>)
 800e8a4:	4b96      	ldr	r3, [pc, #600]	; (800eb00 <__ieee754_rem_pio2+0x304>)
 800e8a6:	e7e1      	b.n	800e86c <__ieee754_rem_pio2+0x70>
 800e8a8:	0020      	movs	r0, r4
 800e8aa:	0029      	movs	r1, r5
 800e8ac:	4b8f      	ldr	r3, [pc, #572]	; (800eaec <__ieee754_rem_pio2+0x2f0>)
 800e8ae:	f7f1 fdfb 	bl	80004a8 <__aeabi_dadd>
 800e8b2:	9b02      	ldr	r3, [sp, #8]
 800e8b4:	0004      	movs	r4, r0
 800e8b6:	000d      	movs	r5, r1
 800e8b8:	42b3      	cmp	r3, r6
 800e8ba:	d014      	beq.n	800e8e6 <__ieee754_rem_pio2+0xea>
 800e8bc:	4a8d      	ldr	r2, [pc, #564]	; (800eaf4 <__ieee754_rem_pio2+0x2f8>)
 800e8be:	4b8e      	ldr	r3, [pc, #568]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e8c0:	f7f1 fdf2 	bl	80004a8 <__aeabi_dadd>
 800e8c4:	0002      	movs	r2, r0
 800e8c6:	000b      	movs	r3, r1
 800e8c8:	0020      	movs	r0, r4
 800e8ca:	603a      	str	r2, [r7, #0]
 800e8cc:	607b      	str	r3, [r7, #4]
 800e8ce:	0029      	movs	r1, r5
 800e8d0:	f7f2 ff94 	bl	80017fc <__aeabi_dsub>
 800e8d4:	4a87      	ldr	r2, [pc, #540]	; (800eaf4 <__ieee754_rem_pio2+0x2f8>)
 800e8d6:	4b88      	ldr	r3, [pc, #544]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e8d8:	f7f1 fde6 	bl	80004a8 <__aeabi_dadd>
 800e8dc:	2601      	movs	r6, #1
 800e8de:	60b8      	str	r0, [r7, #8]
 800e8e0:	60f9      	str	r1, [r7, #12]
 800e8e2:	4276      	negs	r6, r6
 800e8e4:	e7c7      	b.n	800e876 <__ieee754_rem_pio2+0x7a>
 800e8e6:	22d3      	movs	r2, #211	; 0xd3
 800e8e8:	4b83      	ldr	r3, [pc, #524]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e8ea:	0552      	lsls	r2, r2, #21
 800e8ec:	f7f1 fddc 	bl	80004a8 <__aeabi_dadd>
 800e8f0:	4a82      	ldr	r2, [pc, #520]	; (800eafc <__ieee754_rem_pio2+0x300>)
 800e8f2:	4b83      	ldr	r3, [pc, #524]	; (800eb00 <__ieee754_rem_pio2+0x304>)
 800e8f4:	0004      	movs	r4, r0
 800e8f6:	000d      	movs	r5, r1
 800e8f8:	f7f1 fdd6 	bl	80004a8 <__aeabi_dadd>
 800e8fc:	0002      	movs	r2, r0
 800e8fe:	000b      	movs	r3, r1
 800e900:	0020      	movs	r0, r4
 800e902:	603a      	str	r2, [r7, #0]
 800e904:	607b      	str	r3, [r7, #4]
 800e906:	0029      	movs	r1, r5
 800e908:	f7f2 ff78 	bl	80017fc <__aeabi_dsub>
 800e90c:	4a7b      	ldr	r2, [pc, #492]	; (800eafc <__ieee754_rem_pio2+0x300>)
 800e90e:	4b7c      	ldr	r3, [pc, #496]	; (800eb00 <__ieee754_rem_pio2+0x304>)
 800e910:	e7e2      	b.n	800e8d8 <__ieee754_rem_pio2+0xdc>
 800e912:	4b7c      	ldr	r3, [pc, #496]	; (800eb04 <__ieee754_rem_pio2+0x308>)
 800e914:	9a02      	ldr	r2, [sp, #8]
 800e916:	429a      	cmp	r2, r3
 800e918:	dd00      	ble.n	800e91c <__ieee754_rem_pio2+0x120>
 800e91a:	e0d3      	b.n	800eac4 <__ieee754_rem_pio2+0x2c8>
 800e91c:	0020      	movs	r0, r4
 800e91e:	0029      	movs	r1, r5
 800e920:	f000 fe32 	bl	800f588 <fabs>
 800e924:	4a78      	ldr	r2, [pc, #480]	; (800eb08 <__ieee754_rem_pio2+0x30c>)
 800e926:	4b79      	ldr	r3, [pc, #484]	; (800eb0c <__ieee754_rem_pio2+0x310>)
 800e928:	0004      	movs	r4, r0
 800e92a:	000d      	movs	r5, r1
 800e92c:	f7f2 fcfa 	bl	8001324 <__aeabi_dmul>
 800e930:	2200      	movs	r2, #0
 800e932:	4b77      	ldr	r3, [pc, #476]	; (800eb10 <__ieee754_rem_pio2+0x314>)
 800e934:	f7f1 fdb8 	bl	80004a8 <__aeabi_dadd>
 800e938:	f7f3 faf2 	bl	8001f20 <__aeabi_d2iz>
 800e93c:	0006      	movs	r6, r0
 800e93e:	f7f3 fb25 	bl	8001f8c <__aeabi_i2d>
 800e942:	4a6b      	ldr	r2, [pc, #428]	; (800eaf0 <__ieee754_rem_pio2+0x2f4>)
 800e944:	4b69      	ldr	r3, [pc, #420]	; (800eaec <__ieee754_rem_pio2+0x2f0>)
 800e946:	9006      	str	r0, [sp, #24]
 800e948:	9107      	str	r1, [sp, #28]
 800e94a:	f7f2 fceb 	bl	8001324 <__aeabi_dmul>
 800e94e:	0002      	movs	r2, r0
 800e950:	000b      	movs	r3, r1
 800e952:	0020      	movs	r0, r4
 800e954:	0029      	movs	r1, r5
 800e956:	f7f2 ff51 	bl	80017fc <__aeabi_dsub>
 800e95a:	4a66      	ldr	r2, [pc, #408]	; (800eaf4 <__ieee754_rem_pio2+0x2f8>)
 800e95c:	9004      	str	r0, [sp, #16]
 800e95e:	9105      	str	r1, [sp, #20]
 800e960:	9806      	ldr	r0, [sp, #24]
 800e962:	9907      	ldr	r1, [sp, #28]
 800e964:	4b64      	ldr	r3, [pc, #400]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e966:	f7f2 fcdd 	bl	8001324 <__aeabi_dmul>
 800e96a:	0004      	movs	r4, r0
 800e96c:	000d      	movs	r5, r1
 800e96e:	2e1f      	cmp	r6, #31
 800e970:	dc0f      	bgt.n	800e992 <__ieee754_rem_pio2+0x196>
 800e972:	4a68      	ldr	r2, [pc, #416]	; (800eb14 <__ieee754_rem_pio2+0x318>)
 800e974:	1e73      	subs	r3, r6, #1
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	589b      	ldr	r3, [r3, r2]
 800e97a:	9a02      	ldr	r2, [sp, #8]
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d008      	beq.n	800e992 <__ieee754_rem_pio2+0x196>
 800e980:	9804      	ldr	r0, [sp, #16]
 800e982:	9905      	ldr	r1, [sp, #20]
 800e984:	0022      	movs	r2, r4
 800e986:	002b      	movs	r3, r5
 800e988:	f7f2 ff38 	bl	80017fc <__aeabi_dsub>
 800e98c:	6038      	str	r0, [r7, #0]
 800e98e:	6079      	str	r1, [r7, #4]
 800e990:	e012      	b.n	800e9b8 <__ieee754_rem_pio2+0x1bc>
 800e992:	0022      	movs	r2, r4
 800e994:	9804      	ldr	r0, [sp, #16]
 800e996:	9905      	ldr	r1, [sp, #20]
 800e998:	002b      	movs	r3, r5
 800e99a:	f7f2 ff2f 	bl	80017fc <__aeabi_dsub>
 800e99e:	9b02      	ldr	r3, [sp, #8]
 800e9a0:	151b      	asrs	r3, r3, #20
 800e9a2:	9308      	str	r3, [sp, #32]
 800e9a4:	9a08      	ldr	r2, [sp, #32]
 800e9a6:	004b      	lsls	r3, r1, #1
 800e9a8:	0d5b      	lsrs	r3, r3, #21
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	2b10      	cmp	r3, #16
 800e9ae:	dc21      	bgt.n	800e9f4 <__ieee754_rem_pio2+0x1f8>
 800e9b0:	0002      	movs	r2, r0
 800e9b2:	000b      	movs	r3, r1
 800e9b4:	603a      	str	r2, [r7, #0]
 800e9b6:	607b      	str	r3, [r7, #4]
 800e9b8:	9804      	ldr	r0, [sp, #16]
 800e9ba:	9905      	ldr	r1, [sp, #20]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	683a      	ldr	r2, [r7, #0]
 800e9c0:	9302      	str	r3, [sp, #8]
 800e9c2:	9b02      	ldr	r3, [sp, #8]
 800e9c4:	f7f2 ff1a 	bl	80017fc <__aeabi_dsub>
 800e9c8:	0022      	movs	r2, r4
 800e9ca:	002b      	movs	r3, r5
 800e9cc:	f7f2 ff16 	bl	80017fc <__aeabi_dsub>
 800e9d0:	000b      	movs	r3, r1
 800e9d2:	0002      	movs	r2, r0
 800e9d4:	60ba      	str	r2, [r7, #8]
 800e9d6:	60fb      	str	r3, [r7, #12]
 800e9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	db00      	blt.n	800e9e0 <__ieee754_rem_pio2+0x1e4>
 800e9de:	e74a      	b.n	800e876 <__ieee754_rem_pio2+0x7a>
 800e9e0:	2380      	movs	r3, #128	; 0x80
 800e9e2:	061b      	lsls	r3, r3, #24
 800e9e4:	469c      	mov	ip, r3
 800e9e6:	9c02      	ldr	r4, [sp, #8]
 800e9e8:	18c9      	adds	r1, r1, r3
 800e9ea:	4464      	add	r4, ip
 800e9ec:	607c      	str	r4, [r7, #4]
 800e9ee:	60b8      	str	r0, [r7, #8]
 800e9f0:	60f9      	str	r1, [r7, #12]
 800e9f2:	e776      	b.n	800e8e2 <__ieee754_rem_pio2+0xe6>
 800e9f4:	22d3      	movs	r2, #211	; 0xd3
 800e9f6:	9806      	ldr	r0, [sp, #24]
 800e9f8:	9907      	ldr	r1, [sp, #28]
 800e9fa:	4b3f      	ldr	r3, [pc, #252]	; (800eaf8 <__ieee754_rem_pio2+0x2fc>)
 800e9fc:	0552      	lsls	r2, r2, #21
 800e9fe:	f7f2 fc91 	bl	8001324 <__aeabi_dmul>
 800ea02:	0004      	movs	r4, r0
 800ea04:	000d      	movs	r5, r1
 800ea06:	0002      	movs	r2, r0
 800ea08:	000b      	movs	r3, r1
 800ea0a:	9804      	ldr	r0, [sp, #16]
 800ea0c:	9905      	ldr	r1, [sp, #20]
 800ea0e:	f7f2 fef5 	bl	80017fc <__aeabi_dsub>
 800ea12:	0002      	movs	r2, r0
 800ea14:	000b      	movs	r3, r1
 800ea16:	9002      	str	r0, [sp, #8]
 800ea18:	9103      	str	r1, [sp, #12]
 800ea1a:	9804      	ldr	r0, [sp, #16]
 800ea1c:	9905      	ldr	r1, [sp, #20]
 800ea1e:	f7f2 feed 	bl	80017fc <__aeabi_dsub>
 800ea22:	0022      	movs	r2, r4
 800ea24:	002b      	movs	r3, r5
 800ea26:	f7f2 fee9 	bl	80017fc <__aeabi_dsub>
 800ea2a:	0004      	movs	r4, r0
 800ea2c:	000d      	movs	r5, r1
 800ea2e:	9806      	ldr	r0, [sp, #24]
 800ea30:	9907      	ldr	r1, [sp, #28]
 800ea32:	4a32      	ldr	r2, [pc, #200]	; (800eafc <__ieee754_rem_pio2+0x300>)
 800ea34:	4b32      	ldr	r3, [pc, #200]	; (800eb00 <__ieee754_rem_pio2+0x304>)
 800ea36:	f7f2 fc75 	bl	8001324 <__aeabi_dmul>
 800ea3a:	0022      	movs	r2, r4
 800ea3c:	002b      	movs	r3, r5
 800ea3e:	f7f2 fedd 	bl	80017fc <__aeabi_dsub>
 800ea42:	0002      	movs	r2, r0
 800ea44:	000b      	movs	r3, r1
 800ea46:	0004      	movs	r4, r0
 800ea48:	000d      	movs	r5, r1
 800ea4a:	9802      	ldr	r0, [sp, #8]
 800ea4c:	9903      	ldr	r1, [sp, #12]
 800ea4e:	f7f2 fed5 	bl	80017fc <__aeabi_dsub>
 800ea52:	9a08      	ldr	r2, [sp, #32]
 800ea54:	004b      	lsls	r3, r1, #1
 800ea56:	0d5b      	lsrs	r3, r3, #21
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	2b31      	cmp	r3, #49	; 0x31
 800ea5c:	dc08      	bgt.n	800ea70 <__ieee754_rem_pio2+0x274>
 800ea5e:	0002      	movs	r2, r0
 800ea60:	000b      	movs	r3, r1
 800ea62:	603a      	str	r2, [r7, #0]
 800ea64:	607b      	str	r3, [r7, #4]
 800ea66:	9a02      	ldr	r2, [sp, #8]
 800ea68:	9b03      	ldr	r3, [sp, #12]
 800ea6a:	9204      	str	r2, [sp, #16]
 800ea6c:	9305      	str	r3, [sp, #20]
 800ea6e:	e7a3      	b.n	800e9b8 <__ieee754_rem_pio2+0x1bc>
 800ea70:	22b8      	movs	r2, #184	; 0xb8
 800ea72:	9806      	ldr	r0, [sp, #24]
 800ea74:	9907      	ldr	r1, [sp, #28]
 800ea76:	4b22      	ldr	r3, [pc, #136]	; (800eb00 <__ieee754_rem_pio2+0x304>)
 800ea78:	0592      	lsls	r2, r2, #22
 800ea7a:	f7f2 fc53 	bl	8001324 <__aeabi_dmul>
 800ea7e:	0004      	movs	r4, r0
 800ea80:	000d      	movs	r5, r1
 800ea82:	0002      	movs	r2, r0
 800ea84:	000b      	movs	r3, r1
 800ea86:	9802      	ldr	r0, [sp, #8]
 800ea88:	9903      	ldr	r1, [sp, #12]
 800ea8a:	f7f2 feb7 	bl	80017fc <__aeabi_dsub>
 800ea8e:	0002      	movs	r2, r0
 800ea90:	000b      	movs	r3, r1
 800ea92:	9004      	str	r0, [sp, #16]
 800ea94:	9105      	str	r1, [sp, #20]
 800ea96:	9802      	ldr	r0, [sp, #8]
 800ea98:	9903      	ldr	r1, [sp, #12]
 800ea9a:	f7f2 feaf 	bl	80017fc <__aeabi_dsub>
 800ea9e:	0022      	movs	r2, r4
 800eaa0:	002b      	movs	r3, r5
 800eaa2:	f7f2 feab 	bl	80017fc <__aeabi_dsub>
 800eaa6:	0004      	movs	r4, r0
 800eaa8:	000d      	movs	r5, r1
 800eaaa:	9806      	ldr	r0, [sp, #24]
 800eaac:	9907      	ldr	r1, [sp, #28]
 800eaae:	4a1a      	ldr	r2, [pc, #104]	; (800eb18 <__ieee754_rem_pio2+0x31c>)
 800eab0:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <__ieee754_rem_pio2+0x320>)
 800eab2:	f7f2 fc37 	bl	8001324 <__aeabi_dmul>
 800eab6:	0022      	movs	r2, r4
 800eab8:	002b      	movs	r3, r5
 800eaba:	f7f2 fe9f 	bl	80017fc <__aeabi_dsub>
 800eabe:	0004      	movs	r4, r0
 800eac0:	000d      	movs	r5, r1
 800eac2:	e75d      	b.n	800e980 <__ieee754_rem_pio2+0x184>
 800eac4:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <__ieee754_rem_pio2+0x324>)
 800eac6:	9a02      	ldr	r2, [sp, #8]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	dd2b      	ble.n	800eb24 <__ieee754_rem_pio2+0x328>
 800eacc:	0022      	movs	r2, r4
 800eace:	002b      	movs	r3, r5
 800ead0:	0020      	movs	r0, r4
 800ead2:	0029      	movs	r1, r5
 800ead4:	f7f2 fe92 	bl	80017fc <__aeabi_dsub>
 800ead8:	60b8      	str	r0, [r7, #8]
 800eada:	60f9      	str	r1, [r7, #12]
 800eadc:	6038      	str	r0, [r7, #0]
 800eade:	6079      	str	r1, [r7, #4]
 800eae0:	e6a1      	b.n	800e826 <__ieee754_rem_pio2+0x2a>
 800eae2:	46c0      	nop			; (mov r8, r8)
 800eae4:	3fe921fb 	.word	0x3fe921fb
 800eae8:	4002d97b 	.word	0x4002d97b
 800eaec:	3ff921fb 	.word	0x3ff921fb
 800eaf0:	54400000 	.word	0x54400000
 800eaf4:	1a626331 	.word	0x1a626331
 800eaf8:	3dd0b461 	.word	0x3dd0b461
 800eafc:	2e037073 	.word	0x2e037073
 800eb00:	3ba3198a 	.word	0x3ba3198a
 800eb04:	413921fb 	.word	0x413921fb
 800eb08:	6dc9c883 	.word	0x6dc9c883
 800eb0c:	3fe45f30 	.word	0x3fe45f30
 800eb10:	3fe00000 	.word	0x3fe00000
 800eb14:	0801b310 	.word	0x0801b310
 800eb18:	252049c1 	.word	0x252049c1
 800eb1c:	397b839a 	.word	0x397b839a
 800eb20:	7fefffff 	.word	0x7fefffff
 800eb24:	9a02      	ldr	r2, [sp, #8]
 800eb26:	0020      	movs	r0, r4
 800eb28:	1516      	asrs	r6, r2, #20
 800eb2a:	4a29      	ldr	r2, [pc, #164]	; (800ebd0 <__ieee754_rem_pio2+0x3d4>)
 800eb2c:	18b6      	adds	r6, r6, r2
 800eb2e:	9a02      	ldr	r2, [sp, #8]
 800eb30:	0533      	lsls	r3, r6, #20
 800eb32:	1ad5      	subs	r5, r2, r3
 800eb34:	0029      	movs	r1, r5
 800eb36:	f7f3 f9f3 	bl	8001f20 <__aeabi_d2iz>
 800eb3a:	f7f3 fa27 	bl	8001f8c <__aeabi_i2d>
 800eb3e:	0002      	movs	r2, r0
 800eb40:	000b      	movs	r3, r1
 800eb42:	0020      	movs	r0, r4
 800eb44:	0029      	movs	r1, r5
 800eb46:	920a      	str	r2, [sp, #40]	; 0x28
 800eb48:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb4a:	f7f2 fe57 	bl	80017fc <__aeabi_dsub>
 800eb4e:	2200      	movs	r2, #0
 800eb50:	4b20      	ldr	r3, [pc, #128]	; (800ebd4 <__ieee754_rem_pio2+0x3d8>)
 800eb52:	f7f2 fbe7 	bl	8001324 <__aeabi_dmul>
 800eb56:	000d      	movs	r5, r1
 800eb58:	0004      	movs	r4, r0
 800eb5a:	f7f3 f9e1 	bl	8001f20 <__aeabi_d2iz>
 800eb5e:	f7f3 fa15 	bl	8001f8c <__aeabi_i2d>
 800eb62:	0002      	movs	r2, r0
 800eb64:	000b      	movs	r3, r1
 800eb66:	0020      	movs	r0, r4
 800eb68:	0029      	movs	r1, r5
 800eb6a:	920c      	str	r2, [sp, #48]	; 0x30
 800eb6c:	930d      	str	r3, [sp, #52]	; 0x34
 800eb6e:	f7f2 fe45 	bl	80017fc <__aeabi_dsub>
 800eb72:	2200      	movs	r2, #0
 800eb74:	4b17      	ldr	r3, [pc, #92]	; (800ebd4 <__ieee754_rem_pio2+0x3d8>)
 800eb76:	f7f2 fbd5 	bl	8001324 <__aeabi_dmul>
 800eb7a:	2503      	movs	r5, #3
 800eb7c:	900e      	str	r0, [sp, #56]	; 0x38
 800eb7e:	910f      	str	r1, [sp, #60]	; 0x3c
 800eb80:	ac0a      	add	r4, sp, #40	; 0x28
 800eb82:	2200      	movs	r2, #0
 800eb84:	6920      	ldr	r0, [r4, #16]
 800eb86:	6961      	ldr	r1, [r4, #20]
 800eb88:	2300      	movs	r3, #0
 800eb8a:	9502      	str	r5, [sp, #8]
 800eb8c:	3c08      	subs	r4, #8
 800eb8e:	3d01      	subs	r5, #1
 800eb90:	f7f1 fc3e 	bl	8000410 <__aeabi_dcmpeq>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	d1f4      	bne.n	800eb82 <__ieee754_rem_pio2+0x386>
 800eb98:	4b0f      	ldr	r3, [pc, #60]	; (800ebd8 <__ieee754_rem_pio2+0x3dc>)
 800eb9a:	0032      	movs	r2, r6
 800eb9c:	9301      	str	r3, [sp, #4]
 800eb9e:	2302      	movs	r3, #2
 800eba0:	0039      	movs	r1, r7
 800eba2:	9300      	str	r3, [sp, #0]
 800eba4:	a80a      	add	r0, sp, #40	; 0x28
 800eba6:	9b02      	ldr	r3, [sp, #8]
 800eba8:	f000 f8d8 	bl	800ed5c <__kernel_rem_pio2>
 800ebac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebae:	0006      	movs	r6, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	db00      	blt.n	800ebb6 <__ieee754_rem_pio2+0x3ba>
 800ebb4:	e65f      	b.n	800e876 <__ieee754_rem_pio2+0x7a>
 800ebb6:	2180      	movs	r1, #128	; 0x80
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	0609      	lsls	r1, r1, #24
 800ebbe:	1843      	adds	r3, r0, r1
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	603a      	str	r2, [r7, #0]
 800ebc4:	607b      	str	r3, [r7, #4]
 800ebc6:	68ba      	ldr	r2, [r7, #8]
 800ebc8:	1843      	adds	r3, r0, r1
 800ebca:	60ba      	str	r2, [r7, #8]
 800ebcc:	60fb      	str	r3, [r7, #12]
 800ebce:	e688      	b.n	800e8e2 <__ieee754_rem_pio2+0xe6>
 800ebd0:	fffffbea 	.word	0xfffffbea
 800ebd4:	41700000 	.word	0x41700000
 800ebd8:	0801b390 	.word	0x0801b390

0800ebdc <__kernel_cos>:
 800ebdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	9204      	str	r2, [sp, #16]
 800ebe2:	9305      	str	r3, [sp, #20]
 800ebe4:	004b      	lsls	r3, r1, #1
 800ebe6:	085b      	lsrs	r3, r3, #1
 800ebe8:	9300      	str	r3, [sp, #0]
 800ebea:	23f9      	movs	r3, #249	; 0xf9
 800ebec:	9a00      	ldr	r2, [sp, #0]
 800ebee:	0007      	movs	r7, r0
 800ebf0:	000e      	movs	r6, r1
 800ebf2:	059b      	lsls	r3, r3, #22
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	da04      	bge.n	800ec02 <__kernel_cos+0x26>
 800ebf8:	f7f3 f992 	bl	8001f20 <__aeabi_d2iz>
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	d100      	bne.n	800ec02 <__kernel_cos+0x26>
 800ec00:	e084      	b.n	800ed0c <__kernel_cos+0x130>
 800ec02:	003a      	movs	r2, r7
 800ec04:	0033      	movs	r3, r6
 800ec06:	0038      	movs	r0, r7
 800ec08:	0031      	movs	r1, r6
 800ec0a:	f7f2 fb8b 	bl	8001324 <__aeabi_dmul>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4b40      	ldr	r3, [pc, #256]	; (800ed14 <__kernel_cos+0x138>)
 800ec12:	0004      	movs	r4, r0
 800ec14:	000d      	movs	r5, r1
 800ec16:	f7f2 fb85 	bl	8001324 <__aeabi_dmul>
 800ec1a:	4a3f      	ldr	r2, [pc, #252]	; (800ed18 <__kernel_cos+0x13c>)
 800ec1c:	9002      	str	r0, [sp, #8]
 800ec1e:	9103      	str	r1, [sp, #12]
 800ec20:	4b3e      	ldr	r3, [pc, #248]	; (800ed1c <__kernel_cos+0x140>)
 800ec22:	0020      	movs	r0, r4
 800ec24:	0029      	movs	r1, r5
 800ec26:	f7f2 fb7d 	bl	8001324 <__aeabi_dmul>
 800ec2a:	4a3d      	ldr	r2, [pc, #244]	; (800ed20 <__kernel_cos+0x144>)
 800ec2c:	4b3d      	ldr	r3, [pc, #244]	; (800ed24 <__kernel_cos+0x148>)
 800ec2e:	f7f1 fc3b 	bl	80004a8 <__aeabi_dadd>
 800ec32:	0022      	movs	r2, r4
 800ec34:	002b      	movs	r3, r5
 800ec36:	f7f2 fb75 	bl	8001324 <__aeabi_dmul>
 800ec3a:	4a3b      	ldr	r2, [pc, #236]	; (800ed28 <__kernel_cos+0x14c>)
 800ec3c:	4b3b      	ldr	r3, [pc, #236]	; (800ed2c <__kernel_cos+0x150>)
 800ec3e:	f7f2 fddd 	bl	80017fc <__aeabi_dsub>
 800ec42:	0022      	movs	r2, r4
 800ec44:	002b      	movs	r3, r5
 800ec46:	f7f2 fb6d 	bl	8001324 <__aeabi_dmul>
 800ec4a:	4a39      	ldr	r2, [pc, #228]	; (800ed30 <__kernel_cos+0x154>)
 800ec4c:	4b39      	ldr	r3, [pc, #228]	; (800ed34 <__kernel_cos+0x158>)
 800ec4e:	f7f1 fc2b 	bl	80004a8 <__aeabi_dadd>
 800ec52:	0022      	movs	r2, r4
 800ec54:	002b      	movs	r3, r5
 800ec56:	f7f2 fb65 	bl	8001324 <__aeabi_dmul>
 800ec5a:	4a37      	ldr	r2, [pc, #220]	; (800ed38 <__kernel_cos+0x15c>)
 800ec5c:	4b37      	ldr	r3, [pc, #220]	; (800ed3c <__kernel_cos+0x160>)
 800ec5e:	f7f2 fdcd 	bl	80017fc <__aeabi_dsub>
 800ec62:	0022      	movs	r2, r4
 800ec64:	002b      	movs	r3, r5
 800ec66:	f7f2 fb5d 	bl	8001324 <__aeabi_dmul>
 800ec6a:	4a35      	ldr	r2, [pc, #212]	; (800ed40 <__kernel_cos+0x164>)
 800ec6c:	4b35      	ldr	r3, [pc, #212]	; (800ed44 <__kernel_cos+0x168>)
 800ec6e:	f7f1 fc1b 	bl	80004a8 <__aeabi_dadd>
 800ec72:	0022      	movs	r2, r4
 800ec74:	002b      	movs	r3, r5
 800ec76:	f7f2 fb55 	bl	8001324 <__aeabi_dmul>
 800ec7a:	0022      	movs	r2, r4
 800ec7c:	002b      	movs	r3, r5
 800ec7e:	f7f2 fb51 	bl	8001324 <__aeabi_dmul>
 800ec82:	9a04      	ldr	r2, [sp, #16]
 800ec84:	9b05      	ldr	r3, [sp, #20]
 800ec86:	0004      	movs	r4, r0
 800ec88:	000d      	movs	r5, r1
 800ec8a:	0038      	movs	r0, r7
 800ec8c:	0031      	movs	r1, r6
 800ec8e:	f7f2 fb49 	bl	8001324 <__aeabi_dmul>
 800ec92:	0002      	movs	r2, r0
 800ec94:	000b      	movs	r3, r1
 800ec96:	0020      	movs	r0, r4
 800ec98:	0029      	movs	r1, r5
 800ec9a:	f7f2 fdaf 	bl	80017fc <__aeabi_dsub>
 800ec9e:	4b2a      	ldr	r3, [pc, #168]	; (800ed48 <__kernel_cos+0x16c>)
 800eca0:	9a00      	ldr	r2, [sp, #0]
 800eca2:	0004      	movs	r4, r0
 800eca4:	000d      	movs	r5, r1
 800eca6:	429a      	cmp	r2, r3
 800eca8:	dc0d      	bgt.n	800ecc6 <__kernel_cos+0xea>
 800ecaa:	0002      	movs	r2, r0
 800ecac:	000b      	movs	r3, r1
 800ecae:	9802      	ldr	r0, [sp, #8]
 800ecb0:	9903      	ldr	r1, [sp, #12]
 800ecb2:	f7f2 fda3 	bl	80017fc <__aeabi_dsub>
 800ecb6:	0002      	movs	r2, r0
 800ecb8:	2000      	movs	r0, #0
 800ecba:	000b      	movs	r3, r1
 800ecbc:	4923      	ldr	r1, [pc, #140]	; (800ed4c <__kernel_cos+0x170>)
 800ecbe:	f7f2 fd9d 	bl	80017fc <__aeabi_dsub>
 800ecc2:	b007      	add	sp, #28
 800ecc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc6:	4b22      	ldr	r3, [pc, #136]	; (800ed50 <__kernel_cos+0x174>)
 800ecc8:	9a00      	ldr	r2, [sp, #0]
 800ecca:	2600      	movs	r6, #0
 800eccc:	429a      	cmp	r2, r3
 800ecce:	dc1b      	bgt.n	800ed08 <__kernel_cos+0x12c>
 800ecd0:	0013      	movs	r3, r2
 800ecd2:	4a20      	ldr	r2, [pc, #128]	; (800ed54 <__kernel_cos+0x178>)
 800ecd4:	4694      	mov	ip, r2
 800ecd6:	4463      	add	r3, ip
 800ecd8:	001f      	movs	r7, r3
 800ecda:	0032      	movs	r2, r6
 800ecdc:	003b      	movs	r3, r7
 800ecde:	2000      	movs	r0, #0
 800ece0:	491a      	ldr	r1, [pc, #104]	; (800ed4c <__kernel_cos+0x170>)
 800ece2:	f7f2 fd8b 	bl	80017fc <__aeabi_dsub>
 800ece6:	0032      	movs	r2, r6
 800ece8:	003b      	movs	r3, r7
 800ecea:	9000      	str	r0, [sp, #0]
 800ecec:	9101      	str	r1, [sp, #4]
 800ecee:	9802      	ldr	r0, [sp, #8]
 800ecf0:	9903      	ldr	r1, [sp, #12]
 800ecf2:	f7f2 fd83 	bl	80017fc <__aeabi_dsub>
 800ecf6:	0022      	movs	r2, r4
 800ecf8:	002b      	movs	r3, r5
 800ecfa:	f7f2 fd7f 	bl	80017fc <__aeabi_dsub>
 800ecfe:	0002      	movs	r2, r0
 800ed00:	000b      	movs	r3, r1
 800ed02:	9800      	ldr	r0, [sp, #0]
 800ed04:	9901      	ldr	r1, [sp, #4]
 800ed06:	e7da      	b.n	800ecbe <__kernel_cos+0xe2>
 800ed08:	4f13      	ldr	r7, [pc, #76]	; (800ed58 <__kernel_cos+0x17c>)
 800ed0a:	e7e6      	b.n	800ecda <__kernel_cos+0xfe>
 800ed0c:	2000      	movs	r0, #0
 800ed0e:	490f      	ldr	r1, [pc, #60]	; (800ed4c <__kernel_cos+0x170>)
 800ed10:	e7d7      	b.n	800ecc2 <__kernel_cos+0xe6>
 800ed12:	46c0      	nop			; (mov r8, r8)
 800ed14:	3fe00000 	.word	0x3fe00000
 800ed18:	be8838d4 	.word	0xbe8838d4
 800ed1c:	bda8fae9 	.word	0xbda8fae9
 800ed20:	bdb4b1c4 	.word	0xbdb4b1c4
 800ed24:	3e21ee9e 	.word	0x3e21ee9e
 800ed28:	809c52ad 	.word	0x809c52ad
 800ed2c:	3e927e4f 	.word	0x3e927e4f
 800ed30:	19cb1590 	.word	0x19cb1590
 800ed34:	3efa01a0 	.word	0x3efa01a0
 800ed38:	16c15177 	.word	0x16c15177
 800ed3c:	3f56c16c 	.word	0x3f56c16c
 800ed40:	5555554c 	.word	0x5555554c
 800ed44:	3fa55555 	.word	0x3fa55555
 800ed48:	3fd33332 	.word	0x3fd33332
 800ed4c:	3ff00000 	.word	0x3ff00000
 800ed50:	3fe90000 	.word	0x3fe90000
 800ed54:	ffe00000 	.word	0xffe00000
 800ed58:	3fd20000 	.word	0x3fd20000

0800ed5c <__kernel_rem_pio2>:
 800ed5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed5e:	4ccb      	ldr	r4, [pc, #812]	; (800f08c <__kernel_rem_pio2+0x330>)
 800ed60:	44a5      	add	sp, r4
 800ed62:	930d      	str	r3, [sp, #52]	; 0x34
 800ed64:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed66:	0014      	movs	r4, r2
 800ed68:	009a      	lsls	r2, r3, #2
 800ed6a:	4bc9      	ldr	r3, [pc, #804]	; (800f090 <__kernel_rem_pio2+0x334>)
 800ed6c:	900e      	str	r0, [sp, #56]	; 0x38
 800ed6e:	58d3      	ldr	r3, [r2, r3]
 800ed70:	9107      	str	r1, [sp, #28]
 800ed72:	930a      	str	r3, [sp, #40]	; 0x28
 800ed74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed76:	3b01      	subs	r3, #1
 800ed78:	930c      	str	r3, [sp, #48]	; 0x30
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	9300      	str	r3, [sp, #0]
 800ed7e:	0023      	movs	r3, r4
 800ed80:	3314      	adds	r3, #20
 800ed82:	db04      	blt.n	800ed8e <__kernel_rem_pio2+0x32>
 800ed84:	2118      	movs	r1, #24
 800ed86:	1ee0      	subs	r0, r4, #3
 800ed88:	f7f1 fa46 	bl	8000218 <__divsi3>
 800ed8c:	9000      	str	r0, [sp, #0]
 800ed8e:	2218      	movs	r2, #24
 800ed90:	9b00      	ldr	r3, [sp, #0]
 800ed92:	4252      	negs	r2, r2
 800ed94:	3301      	adds	r3, #1
 800ed96:	435a      	muls	r2, r3
 800ed98:	1913      	adds	r3, r2, r4
 800ed9a:	9302      	str	r3, [sp, #8]
 800ed9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed9e:	9b00      	ldr	r3, [sp, #0]
 800eda0:	ae26      	add	r6, sp, #152	; 0x98
 800eda2:	1a9d      	subs	r5, r3, r2
 800eda4:	002c      	movs	r4, r5
 800eda6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eda8:	189f      	adds	r7, r3, r2
 800edaa:	1b63      	subs	r3, r4, r5
 800edac:	429f      	cmp	r7, r3
 800edae:	da0f      	bge.n	800edd0 <__kernel_rem_pio2+0x74>
 800edb0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800edb2:	af76      	add	r7, sp, #472	; 0x1d8
 800edb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edb8:	1af3      	subs	r3, r6, r3
 800edba:	429a      	cmp	r2, r3
 800edbc:	db30      	blt.n	800ee20 <__kernel_rem_pio2+0xc4>
 800edbe:	ab26      	add	r3, sp, #152	; 0x98
 800edc0:	00f4      	lsls	r4, r6, #3
 800edc2:	2200      	movs	r2, #0
 800edc4:	18e4      	adds	r4, r4, r3
 800edc6:	2300      	movs	r3, #0
 800edc8:	2500      	movs	r5, #0
 800edca:	9204      	str	r2, [sp, #16]
 800edcc:	9305      	str	r3, [sp, #20]
 800edce:	e01e      	b.n	800ee0e <__kernel_rem_pio2+0xb2>
 800edd0:	2c00      	cmp	r4, #0
 800edd2:	db07      	blt.n	800ede4 <__kernel_rem_pio2+0x88>
 800edd4:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800edd6:	00a3      	lsls	r3, r4, #2
 800edd8:	58d0      	ldr	r0, [r2, r3]
 800edda:	f7f3 f8d7 	bl	8001f8c <__aeabi_i2d>
 800edde:	c603      	stmia	r6!, {r0, r1}
 800ede0:	3401      	adds	r4, #1
 800ede2:	e7e2      	b.n	800edaa <__kernel_rem_pio2+0x4e>
 800ede4:	2000      	movs	r0, #0
 800ede6:	2100      	movs	r1, #0
 800ede8:	e7f9      	b.n	800edde <__kernel_rem_pio2+0x82>
 800edea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edec:	00e9      	lsls	r1, r5, #3
 800edee:	1859      	adds	r1, r3, r1
 800edf0:	6808      	ldr	r0, [r1, #0]
 800edf2:	6849      	ldr	r1, [r1, #4]
 800edf4:	6822      	ldr	r2, [r4, #0]
 800edf6:	6863      	ldr	r3, [r4, #4]
 800edf8:	f7f2 fa94 	bl	8001324 <__aeabi_dmul>
 800edfc:	0002      	movs	r2, r0
 800edfe:	000b      	movs	r3, r1
 800ee00:	9804      	ldr	r0, [sp, #16]
 800ee02:	9905      	ldr	r1, [sp, #20]
 800ee04:	f7f1 fb50 	bl	80004a8 <__aeabi_dadd>
 800ee08:	9004      	str	r0, [sp, #16]
 800ee0a:	9105      	str	r1, [sp, #20]
 800ee0c:	3501      	adds	r5, #1
 800ee0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee10:	3c08      	subs	r4, #8
 800ee12:	429d      	cmp	r5, r3
 800ee14:	dde9      	ble.n	800edea <__kernel_rem_pio2+0x8e>
 800ee16:	9b04      	ldr	r3, [sp, #16]
 800ee18:	9c05      	ldr	r4, [sp, #20]
 800ee1a:	3601      	adds	r6, #1
 800ee1c:	c718      	stmia	r7!, {r3, r4}
 800ee1e:	e7c9      	b.n	800edb4 <__kernel_rem_pio2+0x58>
 800ee20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee22:	aa12      	add	r2, sp, #72	; 0x48
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	189b      	adds	r3, r3, r2
 800ee28:	9310      	str	r3, [sp, #64]	; 0x40
 800ee2a:	9b00      	ldr	r3, [sp, #0]
 800ee2c:	0098      	lsls	r0, r3, #2
 800ee2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ee30:	181b      	adds	r3, r3, r0
 800ee32:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee36:	9304      	str	r3, [sp, #16]
 800ee38:	9b04      	ldr	r3, [sp, #16]
 800ee3a:	aa76      	add	r2, sp, #472	; 0x1d8
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	18d3      	adds	r3, r2, r3
 800ee40:	681c      	ldr	r4, [r3, #0]
 800ee42:	685d      	ldr	r5, [r3, #4]
 800ee44:	ab12      	add	r3, sp, #72	; 0x48
 800ee46:	9300      	str	r3, [sp, #0]
 800ee48:	9309      	str	r3, [sp, #36]	; 0x24
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	9211      	str	r2, [sp, #68]	; 0x44
 800ee4e:	9308      	str	r3, [sp, #32]
 800ee50:	9b08      	ldr	r3, [sp, #32]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	dc74      	bgt.n	800ef40 <__kernel_rem_pio2+0x1e4>
 800ee56:	0020      	movs	r0, r4
 800ee58:	0029      	movs	r1, r5
 800ee5a:	9a02      	ldr	r2, [sp, #8]
 800ee5c:	f000 fc22 	bl	800f6a4 <scalbn>
 800ee60:	23ff      	movs	r3, #255	; 0xff
 800ee62:	2200      	movs	r2, #0
 800ee64:	059b      	lsls	r3, r3, #22
 800ee66:	0004      	movs	r4, r0
 800ee68:	000d      	movs	r5, r1
 800ee6a:	f7f2 fa5b 	bl	8001324 <__aeabi_dmul>
 800ee6e:	f000 fb8f 	bl	800f590 <floor>
 800ee72:	2200      	movs	r2, #0
 800ee74:	4b87      	ldr	r3, [pc, #540]	; (800f094 <__kernel_rem_pio2+0x338>)
 800ee76:	f7f2 fa55 	bl	8001324 <__aeabi_dmul>
 800ee7a:	0002      	movs	r2, r0
 800ee7c:	000b      	movs	r3, r1
 800ee7e:	0020      	movs	r0, r4
 800ee80:	0029      	movs	r1, r5
 800ee82:	f7f2 fcbb 	bl	80017fc <__aeabi_dsub>
 800ee86:	000d      	movs	r5, r1
 800ee88:	0004      	movs	r4, r0
 800ee8a:	f7f3 f849 	bl	8001f20 <__aeabi_d2iz>
 800ee8e:	9009      	str	r0, [sp, #36]	; 0x24
 800ee90:	f7f3 f87c 	bl	8001f8c <__aeabi_i2d>
 800ee94:	000b      	movs	r3, r1
 800ee96:	0002      	movs	r2, r0
 800ee98:	0029      	movs	r1, r5
 800ee9a:	0020      	movs	r0, r4
 800ee9c:	f7f2 fcae 	bl	80017fc <__aeabi_dsub>
 800eea0:	9b02      	ldr	r3, [sp, #8]
 800eea2:	0006      	movs	r6, r0
 800eea4:	000f      	movs	r7, r1
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	dd74      	ble.n	800ef94 <__kernel_rem_pio2+0x238>
 800eeaa:	2118      	movs	r1, #24
 800eeac:	9b04      	ldr	r3, [sp, #16]
 800eeae:	aa12      	add	r2, sp, #72	; 0x48
 800eeb0:	3b01      	subs	r3, #1
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	589a      	ldr	r2, [r3, r2]
 800eeb6:	9802      	ldr	r0, [sp, #8]
 800eeb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eeba:	1a09      	subs	r1, r1, r0
 800eebc:	0010      	movs	r0, r2
 800eebe:	4108      	asrs	r0, r1
 800eec0:	1824      	adds	r4, r4, r0
 800eec2:	4088      	lsls	r0, r1
 800eec4:	a912      	add	r1, sp, #72	; 0x48
 800eec6:	1a12      	subs	r2, r2, r0
 800eec8:	505a      	str	r2, [r3, r1]
 800eeca:	2317      	movs	r3, #23
 800eecc:	9902      	ldr	r1, [sp, #8]
 800eece:	9409      	str	r4, [sp, #36]	; 0x24
 800eed0:	1a5b      	subs	r3, r3, r1
 800eed2:	411a      	asrs	r2, r3
 800eed4:	9208      	str	r2, [sp, #32]
 800eed6:	9b08      	ldr	r3, [sp, #32]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	dd6d      	ble.n	800efb8 <__kernel_rem_pio2+0x25c>
 800eedc:	2200      	movs	r2, #0
 800eede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eee0:	2080      	movs	r0, #128	; 0x80
 800eee2:	3301      	adds	r3, #1
 800eee4:	9309      	str	r3, [sp, #36]	; 0x24
 800eee6:	4b6c      	ldr	r3, [pc, #432]	; (800f098 <__kernel_rem_pio2+0x33c>)
 800eee8:	0014      	movs	r4, r2
 800eeea:	469c      	mov	ip, r3
 800eeec:	2501      	movs	r5, #1
 800eeee:	0440      	lsls	r0, r0, #17
 800eef0:	9b04      	ldr	r3, [sp, #16]
 800eef2:	4293      	cmp	r3, r2
 800eef4:	dd00      	ble.n	800eef8 <__kernel_rem_pio2+0x19c>
 800eef6:	e099      	b.n	800f02c <__kernel_rem_pio2+0x2d0>
 800eef8:	9b02      	ldr	r3, [sp, #8]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	dd05      	ble.n	800ef0a <__kernel_rem_pio2+0x1ae>
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d100      	bne.n	800ef04 <__kernel_rem_pio2+0x1a8>
 800ef02:	e0a9      	b.n	800f058 <__kernel_rem_pio2+0x2fc>
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	d100      	bne.n	800ef0a <__kernel_rem_pio2+0x1ae>
 800ef08:	e0b1      	b.n	800f06e <__kernel_rem_pio2+0x312>
 800ef0a:	9b08      	ldr	r3, [sp, #32]
 800ef0c:	2b02      	cmp	r3, #2
 800ef0e:	d153      	bne.n	800efb8 <__kernel_rem_pio2+0x25c>
 800ef10:	0032      	movs	r2, r6
 800ef12:	003b      	movs	r3, r7
 800ef14:	2000      	movs	r0, #0
 800ef16:	4961      	ldr	r1, [pc, #388]	; (800f09c <__kernel_rem_pio2+0x340>)
 800ef18:	f7f2 fc70 	bl	80017fc <__aeabi_dsub>
 800ef1c:	0006      	movs	r6, r0
 800ef1e:	000f      	movs	r7, r1
 800ef20:	2c00      	cmp	r4, #0
 800ef22:	d049      	beq.n	800efb8 <__kernel_rem_pio2+0x25c>
 800ef24:	9a02      	ldr	r2, [sp, #8]
 800ef26:	2000      	movs	r0, #0
 800ef28:	495c      	ldr	r1, [pc, #368]	; (800f09c <__kernel_rem_pio2+0x340>)
 800ef2a:	f000 fbbb 	bl	800f6a4 <scalbn>
 800ef2e:	0002      	movs	r2, r0
 800ef30:	000b      	movs	r3, r1
 800ef32:	0030      	movs	r0, r6
 800ef34:	0039      	movs	r1, r7
 800ef36:	f7f2 fc61 	bl	80017fc <__aeabi_dsub>
 800ef3a:	0006      	movs	r6, r0
 800ef3c:	000f      	movs	r7, r1
 800ef3e:	e03b      	b.n	800efb8 <__kernel_rem_pio2+0x25c>
 800ef40:	2200      	movs	r2, #0
 800ef42:	4b57      	ldr	r3, [pc, #348]	; (800f0a0 <__kernel_rem_pio2+0x344>)
 800ef44:	0020      	movs	r0, r4
 800ef46:	0029      	movs	r1, r5
 800ef48:	f7f2 f9ec 	bl	8001324 <__aeabi_dmul>
 800ef4c:	f7f2 ffe8 	bl	8001f20 <__aeabi_d2iz>
 800ef50:	f7f3 f81c 	bl	8001f8c <__aeabi_i2d>
 800ef54:	2200      	movs	r2, #0
 800ef56:	4b53      	ldr	r3, [pc, #332]	; (800f0a4 <__kernel_rem_pio2+0x348>)
 800ef58:	0006      	movs	r6, r0
 800ef5a:	000f      	movs	r7, r1
 800ef5c:	f7f2 f9e2 	bl	8001324 <__aeabi_dmul>
 800ef60:	0002      	movs	r2, r0
 800ef62:	000b      	movs	r3, r1
 800ef64:	0020      	movs	r0, r4
 800ef66:	0029      	movs	r1, r5
 800ef68:	f7f2 fc48 	bl	80017fc <__aeabi_dsub>
 800ef6c:	f7f2 ffd8 	bl	8001f20 <__aeabi_d2iz>
 800ef70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef72:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ef74:	c301      	stmia	r3!, {r0}
 800ef76:	9309      	str	r3, [sp, #36]	; 0x24
 800ef78:	9b08      	ldr	r3, [sp, #32]
 800ef7a:	0030      	movs	r0, r6
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	9308      	str	r3, [sp, #32]
 800ef80:	00db      	lsls	r3, r3, #3
 800ef82:	18d3      	adds	r3, r2, r3
 800ef84:	0039      	movs	r1, r7
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	f7f1 fa8d 	bl	80004a8 <__aeabi_dadd>
 800ef8e:	0004      	movs	r4, r0
 800ef90:	000d      	movs	r5, r1
 800ef92:	e75d      	b.n	800ee50 <__kernel_rem_pio2+0xf4>
 800ef94:	9b02      	ldr	r3, [sp, #8]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d107      	bne.n	800efaa <__kernel_rem_pio2+0x24e>
 800ef9a:	9b04      	ldr	r3, [sp, #16]
 800ef9c:	aa12      	add	r2, sp, #72	; 0x48
 800ef9e:	3b01      	subs	r3, #1
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	5898      	ldr	r0, [r3, r2]
 800efa4:	15c3      	asrs	r3, r0, #23
 800efa6:	9308      	str	r3, [sp, #32]
 800efa8:	e795      	b.n	800eed6 <__kernel_rem_pio2+0x17a>
 800efaa:	2200      	movs	r2, #0
 800efac:	4b3e      	ldr	r3, [pc, #248]	; (800f0a8 <__kernel_rem_pio2+0x34c>)
 800efae:	f7f1 fa53 	bl	8000458 <__aeabi_dcmpge>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d137      	bne.n	800f026 <__kernel_rem_pio2+0x2ca>
 800efb6:	9008      	str	r0, [sp, #32]
 800efb8:	2200      	movs	r2, #0
 800efba:	2300      	movs	r3, #0
 800efbc:	0030      	movs	r0, r6
 800efbe:	0039      	movs	r1, r7
 800efc0:	f7f1 fa26 	bl	8000410 <__aeabi_dcmpeq>
 800efc4:	2800      	cmp	r0, #0
 800efc6:	d100      	bne.n	800efca <__kernel_rem_pio2+0x26e>
 800efc8:	e0b9      	b.n	800f13e <__kernel_rem_pio2+0x3e2>
 800efca:	2200      	movs	r2, #0
 800efcc:	9b04      	ldr	r3, [sp, #16]
 800efce:	3b01      	subs	r3, #1
 800efd0:	9300      	str	r3, [sp, #0]
 800efd2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800efd4:	428b      	cmp	r3, r1
 800efd6:	da53      	bge.n	800f080 <__kernel_rem_pio2+0x324>
 800efd8:	2a00      	cmp	r2, #0
 800efda:	d100      	bne.n	800efde <__kernel_rem_pio2+0x282>
 800efdc:	e095      	b.n	800f10a <__kernel_rem_pio2+0x3ae>
 800efde:	9b02      	ldr	r3, [sp, #8]
 800efe0:	aa12      	add	r2, sp, #72	; 0x48
 800efe2:	3b18      	subs	r3, #24
 800efe4:	9302      	str	r3, [sp, #8]
 800efe6:	9b00      	ldr	r3, [sp, #0]
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	589b      	ldr	r3, [r3, r2]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d100      	bne.n	800eff2 <__kernel_rem_pio2+0x296>
 800eff0:	e0a1      	b.n	800f136 <__kernel_rem_pio2+0x3da>
 800eff2:	2000      	movs	r0, #0
 800eff4:	9a02      	ldr	r2, [sp, #8]
 800eff6:	4929      	ldr	r1, [pc, #164]	; (800f09c <__kernel_rem_pio2+0x340>)
 800eff8:	f000 fb54 	bl	800f6a4 <scalbn>
 800effc:	0006      	movs	r6, r0
 800effe:	000f      	movs	r7, r1
 800f000:	9c00      	ldr	r4, [sp, #0]
 800f002:	2c00      	cmp	r4, #0
 800f004:	db00      	blt.n	800f008 <__kernel_rem_pio2+0x2ac>
 800f006:	e0d9      	b.n	800f1bc <__kernel_rem_pio2+0x460>
 800f008:	9c00      	ldr	r4, [sp, #0]
 800f00a:	2c00      	cmp	r4, #0
 800f00c:	da00      	bge.n	800f010 <__kernel_rem_pio2+0x2b4>
 800f00e:	e10c      	b.n	800f22a <__kernel_rem_pio2+0x4ce>
 800f010:	ab76      	add	r3, sp, #472	; 0x1d8
 800f012:	00e6      	lsls	r6, r4, #3
 800f014:	2200      	movs	r2, #0
 800f016:	18f6      	adds	r6, r6, r3
 800f018:	2300      	movs	r3, #0
 800f01a:	9202      	str	r2, [sp, #8]
 800f01c:	9303      	str	r3, [sp, #12]
 800f01e:	9b00      	ldr	r3, [sp, #0]
 800f020:	2500      	movs	r5, #0
 800f022:	1b1f      	subs	r7, r3, r4
 800f024:	e0f3      	b.n	800f20e <__kernel_rem_pio2+0x4b2>
 800f026:	2302      	movs	r3, #2
 800f028:	9308      	str	r3, [sp, #32]
 800f02a:	e757      	b.n	800eedc <__kernel_rem_pio2+0x180>
 800f02c:	9b00      	ldr	r3, [sp, #0]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	2c00      	cmp	r4, #0
 800f032:	d10b      	bne.n	800f04c <__kernel_rem_pio2+0x2f0>
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <__kernel_rem_pio2+0x2e4>
 800f038:	9c00      	ldr	r4, [sp, #0]
 800f03a:	1ac3      	subs	r3, r0, r3
 800f03c:	6023      	str	r3, [r4, #0]
 800f03e:	002b      	movs	r3, r5
 800f040:	9c00      	ldr	r4, [sp, #0]
 800f042:	3201      	adds	r2, #1
 800f044:	3404      	adds	r4, #4
 800f046:	9400      	str	r4, [sp, #0]
 800f048:	001c      	movs	r4, r3
 800f04a:	e751      	b.n	800eef0 <__kernel_rem_pio2+0x194>
 800f04c:	4661      	mov	r1, ip
 800f04e:	1acb      	subs	r3, r1, r3
 800f050:	9900      	ldr	r1, [sp, #0]
 800f052:	600b      	str	r3, [r1, #0]
 800f054:	0023      	movs	r3, r4
 800f056:	e7f3      	b.n	800f040 <__kernel_rem_pio2+0x2e4>
 800f058:	9b04      	ldr	r3, [sp, #16]
 800f05a:	aa12      	add	r2, sp, #72	; 0x48
 800f05c:	3b01      	subs	r3, #1
 800f05e:	009b      	lsls	r3, r3, #2
 800f060:	589a      	ldr	r2, [r3, r2]
 800f062:	9200      	str	r2, [sp, #0]
 800f064:	0252      	lsls	r2, r2, #9
 800f066:	0a52      	lsrs	r2, r2, #9
 800f068:	a912      	add	r1, sp, #72	; 0x48
 800f06a:	505a      	str	r2, [r3, r1]
 800f06c:	e74d      	b.n	800ef0a <__kernel_rem_pio2+0x1ae>
 800f06e:	9b04      	ldr	r3, [sp, #16]
 800f070:	aa12      	add	r2, sp, #72	; 0x48
 800f072:	3b01      	subs	r3, #1
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	589a      	ldr	r2, [r3, r2]
 800f078:	9200      	str	r2, [sp, #0]
 800f07a:	0292      	lsls	r2, r2, #10
 800f07c:	0a92      	lsrs	r2, r2, #10
 800f07e:	e7f3      	b.n	800f068 <__kernel_rem_pio2+0x30c>
 800f080:	0099      	lsls	r1, r3, #2
 800f082:	a812      	add	r0, sp, #72	; 0x48
 800f084:	5809      	ldr	r1, [r1, r0]
 800f086:	3b01      	subs	r3, #1
 800f088:	430a      	orrs	r2, r1
 800f08a:	e7a2      	b.n	800efd2 <__kernel_rem_pio2+0x276>
 800f08c:	fffffd84 	.word	0xfffffd84
 800f090:	0801b4d8 	.word	0x0801b4d8
 800f094:	40200000 	.word	0x40200000
 800f098:	00ffffff 	.word	0x00ffffff
 800f09c:	3ff00000 	.word	0x3ff00000
 800f0a0:	3e700000 	.word	0x3e700000
 800f0a4:	41700000 	.word	0x41700000
 800f0a8:	3fe00000 	.word	0x3fe00000
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f0b0:	009a      	lsls	r2, r3, #2
 800f0b2:	4252      	negs	r2, r2
 800f0b4:	588a      	ldr	r2, [r1, r2]
 800f0b6:	2a00      	cmp	r2, #0
 800f0b8:	d0f8      	beq.n	800f0ac <__kernel_rem_pio2+0x350>
 800f0ba:	9a04      	ldr	r2, [sp, #16]
 800f0bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f0be:	1c57      	adds	r7, r2, #1
 800f0c0:	1854      	adds	r4, r2, r1
 800f0c2:	00e4      	lsls	r4, r4, #3
 800f0c4:	aa26      	add	r2, sp, #152	; 0x98
 800f0c6:	1914      	adds	r4, r2, r4
 800f0c8:	9a04      	ldr	r2, [sp, #16]
 800f0ca:	18d3      	adds	r3, r2, r3
 800f0cc:	9304      	str	r3, [sp, #16]
 800f0ce:	9b04      	ldr	r3, [sp, #16]
 800f0d0:	42bb      	cmp	r3, r7
 800f0d2:	da00      	bge.n	800f0d6 <__kernel_rem_pio2+0x37a>
 800f0d4:	e6b0      	b.n	800ee38 <__kernel_rem_pio2+0xdc>
 800f0d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f0d8:	00bb      	lsls	r3, r7, #2
 800f0da:	58d0      	ldr	r0, [r2, r3]
 800f0dc:	f7f2 ff56 	bl	8001f8c <__aeabi_i2d>
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	0026      	movs	r6, r4
 800f0e6:	2500      	movs	r5, #0
 800f0e8:	6020      	str	r0, [r4, #0]
 800f0ea:	6061      	str	r1, [r4, #4]
 800f0ec:	9200      	str	r2, [sp, #0]
 800f0ee:	9301      	str	r3, [sp, #4]
 800f0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0f2:	429d      	cmp	r5, r3
 800f0f4:	dd0b      	ble.n	800f10e <__kernel_rem_pio2+0x3b2>
 800f0f6:	00fb      	lsls	r3, r7, #3
 800f0f8:	aa76      	add	r2, sp, #472	; 0x1d8
 800f0fa:	18d3      	adds	r3, r2, r3
 800f0fc:	3701      	adds	r7, #1
 800f0fe:	9900      	ldr	r1, [sp, #0]
 800f100:	9a01      	ldr	r2, [sp, #4]
 800f102:	3408      	adds	r4, #8
 800f104:	6019      	str	r1, [r3, #0]
 800f106:	605a      	str	r2, [r3, #4]
 800f108:	e7e1      	b.n	800f0ce <__kernel_rem_pio2+0x372>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e7cf      	b.n	800f0ae <__kernel_rem_pio2+0x352>
 800f10e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f110:	00e9      	lsls	r1, r5, #3
 800f112:	1859      	adds	r1, r3, r1
 800f114:	6808      	ldr	r0, [r1, #0]
 800f116:	6849      	ldr	r1, [r1, #4]
 800f118:	6832      	ldr	r2, [r6, #0]
 800f11a:	6873      	ldr	r3, [r6, #4]
 800f11c:	f7f2 f902 	bl	8001324 <__aeabi_dmul>
 800f120:	0002      	movs	r2, r0
 800f122:	000b      	movs	r3, r1
 800f124:	9800      	ldr	r0, [sp, #0]
 800f126:	9901      	ldr	r1, [sp, #4]
 800f128:	f7f1 f9be 	bl	80004a8 <__aeabi_dadd>
 800f12c:	3501      	adds	r5, #1
 800f12e:	9000      	str	r0, [sp, #0]
 800f130:	9101      	str	r1, [sp, #4]
 800f132:	3e08      	subs	r6, #8
 800f134:	e7dc      	b.n	800f0f0 <__kernel_rem_pio2+0x394>
 800f136:	9b00      	ldr	r3, [sp, #0]
 800f138:	3b01      	subs	r3, #1
 800f13a:	9300      	str	r3, [sp, #0]
 800f13c:	e74f      	b.n	800efde <__kernel_rem_pio2+0x282>
 800f13e:	9b02      	ldr	r3, [sp, #8]
 800f140:	0030      	movs	r0, r6
 800f142:	425a      	negs	r2, r3
 800f144:	0039      	movs	r1, r7
 800f146:	f000 faad 	bl	800f6a4 <scalbn>
 800f14a:	2200      	movs	r2, #0
 800f14c:	4bb5      	ldr	r3, [pc, #724]	; (800f424 <__kernel_rem_pio2+0x6c8>)
 800f14e:	0004      	movs	r4, r0
 800f150:	000d      	movs	r5, r1
 800f152:	f7f1 f981 	bl	8000458 <__aeabi_dcmpge>
 800f156:	2800      	cmp	r0, #0
 800f158:	d025      	beq.n	800f1a6 <__kernel_rem_pio2+0x44a>
 800f15a:	2200      	movs	r2, #0
 800f15c:	4bb2      	ldr	r3, [pc, #712]	; (800f428 <__kernel_rem_pio2+0x6cc>)
 800f15e:	0020      	movs	r0, r4
 800f160:	0029      	movs	r1, r5
 800f162:	f7f2 f8df 	bl	8001324 <__aeabi_dmul>
 800f166:	f7f2 fedb 	bl	8001f20 <__aeabi_d2iz>
 800f16a:	9b04      	ldr	r3, [sp, #16]
 800f16c:	0006      	movs	r6, r0
 800f16e:	009f      	lsls	r7, r3, #2
 800f170:	f7f2 ff0c 	bl	8001f8c <__aeabi_i2d>
 800f174:	2200      	movs	r2, #0
 800f176:	4bab      	ldr	r3, [pc, #684]	; (800f424 <__kernel_rem_pio2+0x6c8>)
 800f178:	f7f2 f8d4 	bl	8001324 <__aeabi_dmul>
 800f17c:	0002      	movs	r2, r0
 800f17e:	000b      	movs	r3, r1
 800f180:	0020      	movs	r0, r4
 800f182:	0029      	movs	r1, r5
 800f184:	f7f2 fb3a 	bl	80017fc <__aeabi_dsub>
 800f188:	f7f2 feca 	bl	8001f20 <__aeabi_d2iz>
 800f18c:	ab12      	add	r3, sp, #72	; 0x48
 800f18e:	51d8      	str	r0, [r3, r7]
 800f190:	9b04      	ldr	r3, [sp, #16]
 800f192:	aa12      	add	r2, sp, #72	; 0x48
 800f194:	3301      	adds	r3, #1
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	9b02      	ldr	r3, [sp, #8]
 800f19a:	3318      	adds	r3, #24
 800f19c:	9302      	str	r3, [sp, #8]
 800f19e:	9b00      	ldr	r3, [sp, #0]
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	509e      	str	r6, [r3, r2]
 800f1a4:	e725      	b.n	800eff2 <__kernel_rem_pio2+0x296>
 800f1a6:	9b04      	ldr	r3, [sp, #16]
 800f1a8:	0020      	movs	r0, r4
 800f1aa:	0029      	movs	r1, r5
 800f1ac:	009e      	lsls	r6, r3, #2
 800f1ae:	f7f2 feb7 	bl	8001f20 <__aeabi_d2iz>
 800f1b2:	ab12      	add	r3, sp, #72	; 0x48
 800f1b4:	5198      	str	r0, [r3, r6]
 800f1b6:	9b04      	ldr	r3, [sp, #16]
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	e71a      	b.n	800eff2 <__kernel_rem_pio2+0x296>
 800f1bc:	00e5      	lsls	r5, r4, #3
 800f1be:	ab76      	add	r3, sp, #472	; 0x1d8
 800f1c0:	aa12      	add	r2, sp, #72	; 0x48
 800f1c2:	195d      	adds	r5, r3, r5
 800f1c4:	00a3      	lsls	r3, r4, #2
 800f1c6:	5898      	ldr	r0, [r3, r2]
 800f1c8:	f7f2 fee0 	bl	8001f8c <__aeabi_i2d>
 800f1cc:	0032      	movs	r2, r6
 800f1ce:	003b      	movs	r3, r7
 800f1d0:	f7f2 f8a8 	bl	8001324 <__aeabi_dmul>
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	6028      	str	r0, [r5, #0]
 800f1d8:	6069      	str	r1, [r5, #4]
 800f1da:	4b93      	ldr	r3, [pc, #588]	; (800f428 <__kernel_rem_pio2+0x6cc>)
 800f1dc:	0030      	movs	r0, r6
 800f1de:	0039      	movs	r1, r7
 800f1e0:	f7f2 f8a0 	bl	8001324 <__aeabi_dmul>
 800f1e4:	3c01      	subs	r4, #1
 800f1e6:	0006      	movs	r6, r0
 800f1e8:	000f      	movs	r7, r1
 800f1ea:	e70a      	b.n	800f002 <__kernel_rem_pio2+0x2a6>
 800f1ec:	4b8f      	ldr	r3, [pc, #572]	; (800f42c <__kernel_rem_pio2+0x6d0>)
 800f1ee:	00e9      	lsls	r1, r5, #3
 800f1f0:	1859      	adds	r1, r3, r1
 800f1f2:	6808      	ldr	r0, [r1, #0]
 800f1f4:	6849      	ldr	r1, [r1, #4]
 800f1f6:	ce0c      	ldmia	r6!, {r2, r3}
 800f1f8:	f7f2 f894 	bl	8001324 <__aeabi_dmul>
 800f1fc:	0002      	movs	r2, r0
 800f1fe:	000b      	movs	r3, r1
 800f200:	9802      	ldr	r0, [sp, #8]
 800f202:	9903      	ldr	r1, [sp, #12]
 800f204:	f7f1 f950 	bl	80004a8 <__aeabi_dadd>
 800f208:	9002      	str	r0, [sp, #8]
 800f20a:	9103      	str	r1, [sp, #12]
 800f20c:	3501      	adds	r5, #1
 800f20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f210:	429d      	cmp	r5, r3
 800f212:	dc01      	bgt.n	800f218 <__kernel_rem_pio2+0x4bc>
 800f214:	42bd      	cmp	r5, r7
 800f216:	dde9      	ble.n	800f1ec <__kernel_rem_pio2+0x490>
 800f218:	ab4e      	add	r3, sp, #312	; 0x138
 800f21a:	00ff      	lsls	r7, r7, #3
 800f21c:	19df      	adds	r7, r3, r7
 800f21e:	3c01      	subs	r4, #1
 800f220:	9a02      	ldr	r2, [sp, #8]
 800f222:	9b03      	ldr	r3, [sp, #12]
 800f224:	603a      	str	r2, [r7, #0]
 800f226:	607b      	str	r3, [r7, #4]
 800f228:	e6ef      	b.n	800f00a <__kernel_rem_pio2+0x2ae>
 800f22a:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f22c:	2b02      	cmp	r3, #2
 800f22e:	dc0e      	bgt.n	800f24e <__kernel_rem_pio2+0x4f2>
 800f230:	2b00      	cmp	r3, #0
 800f232:	dd00      	ble.n	800f236 <__kernel_rem_pio2+0x4da>
 800f234:	e08c      	b.n	800f350 <__kernel_rem_pio2+0x5f4>
 800f236:	2500      	movs	r5, #0
 800f238:	002c      	movs	r4, r5
 800f23a:	42ab      	cmp	r3, r5
 800f23c:	d046      	beq.n	800f2cc <__kernel_rem_pio2+0x570>
 800f23e:	2007      	movs	r0, #7
 800f240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f242:	4003      	ands	r3, r0
 800f244:	0018      	movs	r0, r3
 800f246:	239f      	movs	r3, #159	; 0x9f
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	449d      	add	sp, r3
 800f24c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f24e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f250:	2b03      	cmp	r3, #3
 800f252:	d1f4      	bne.n	800f23e <__kernel_rem_pio2+0x4e2>
 800f254:	9b00      	ldr	r3, [sp, #0]
 800f256:	00dc      	lsls	r4, r3, #3
 800f258:	ab4e      	add	r3, sp, #312	; 0x138
 800f25a:	191c      	adds	r4, r3, r4
 800f25c:	0025      	movs	r5, r4
 800f25e:	9b00      	ldr	r3, [sp, #0]
 800f260:	9302      	str	r3, [sp, #8]
 800f262:	9b02      	ldr	r3, [sp, #8]
 800f264:	3d08      	subs	r5, #8
 800f266:	2b00      	cmp	r3, #0
 800f268:	dd00      	ble.n	800f26c <__kernel_rem_pio2+0x510>
 800f26a:	e07f      	b.n	800f36c <__kernel_rem_pio2+0x610>
 800f26c:	9d00      	ldr	r5, [sp, #0]
 800f26e:	3c08      	subs	r4, #8
 800f270:	2d01      	cmp	r5, #1
 800f272:	dd00      	ble.n	800f276 <__kernel_rem_pio2+0x51a>
 800f274:	e09c      	b.n	800f3b0 <__kernel_rem_pio2+0x654>
 800f276:	2400      	movs	r4, #0
 800f278:	0021      	movs	r1, r4
 800f27a:	9b00      	ldr	r3, [sp, #0]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	dd00      	ble.n	800f282 <__kernel_rem_pio2+0x526>
 800f280:	e0b4      	b.n	800f3ec <__kernel_rem_pio2+0x690>
 800f282:	9b08      	ldr	r3, [sp, #32]
 800f284:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800f286:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800f288:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800f28a:	9851      	ldr	r0, [sp, #324]	; 0x144
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d000      	beq.n	800f292 <__kernel_rem_pio2+0x536>
 800f290:	e0ba      	b.n	800f408 <__kernel_rem_pio2+0x6ac>
 800f292:	0033      	movs	r3, r6
 800f294:	003a      	movs	r2, r7
 800f296:	9e07      	ldr	r6, [sp, #28]
 800f298:	6032      	str	r2, [r6, #0]
 800f29a:	6073      	str	r3, [r6, #4]
 800f29c:	002a      	movs	r2, r5
 800f29e:	0003      	movs	r3, r0
 800f2a0:	60b2      	str	r2, [r6, #8]
 800f2a2:	60f3      	str	r3, [r6, #12]
 800f2a4:	0022      	movs	r2, r4
 800f2a6:	000b      	movs	r3, r1
 800f2a8:	6132      	str	r2, [r6, #16]
 800f2aa:	6173      	str	r3, [r6, #20]
 800f2ac:	e7c7      	b.n	800f23e <__kernel_rem_pio2+0x4e2>
 800f2ae:	9b00      	ldr	r3, [sp, #0]
 800f2b0:	aa4e      	add	r2, sp, #312	; 0x138
 800f2b2:	00db      	lsls	r3, r3, #3
 800f2b4:	18d3      	adds	r3, r2, r3
 800f2b6:	0028      	movs	r0, r5
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	0021      	movs	r1, r4
 800f2be:	f7f1 f8f3 	bl	80004a8 <__aeabi_dadd>
 800f2c2:	0005      	movs	r5, r0
 800f2c4:	000c      	movs	r4, r1
 800f2c6:	9b00      	ldr	r3, [sp, #0]
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	9b00      	ldr	r3, [sp, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	daed      	bge.n	800f2ae <__kernel_rem_pio2+0x552>
 800f2d2:	9b08      	ldr	r3, [sp, #32]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <__kernel_rem_pio2+0x582>
 800f2d8:	2380      	movs	r3, #128	; 0x80
 800f2da:	061b      	lsls	r3, r3, #24
 800f2dc:	18e4      	adds	r4, r4, r3
 800f2de:	002a      	movs	r2, r5
 800f2e0:	0023      	movs	r3, r4
 800f2e2:	9907      	ldr	r1, [sp, #28]
 800f2e4:	600a      	str	r2, [r1, #0]
 800f2e6:	604b      	str	r3, [r1, #4]
 800f2e8:	e7a9      	b.n	800f23e <__kernel_rem_pio2+0x4e2>
 800f2ea:	00e3      	lsls	r3, r4, #3
 800f2ec:	aa4e      	add	r2, sp, #312	; 0x138
 800f2ee:	18d3      	adds	r3, r2, r3
 800f2f0:	0030      	movs	r0, r6
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	0029      	movs	r1, r5
 800f2f8:	f7f1 f8d6 	bl	80004a8 <__aeabi_dadd>
 800f2fc:	0006      	movs	r6, r0
 800f2fe:	000d      	movs	r5, r1
 800f300:	3c01      	subs	r4, #1
 800f302:	2c00      	cmp	r4, #0
 800f304:	daf1      	bge.n	800f2ea <__kernel_rem_pio2+0x58e>
 800f306:	9b08      	ldr	r3, [sp, #32]
 800f308:	0029      	movs	r1, r5
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d002      	beq.n	800f314 <__kernel_rem_pio2+0x5b8>
 800f30e:	2380      	movs	r3, #128	; 0x80
 800f310:	061b      	lsls	r3, r3, #24
 800f312:	18e9      	adds	r1, r5, r3
 800f314:	0032      	movs	r2, r6
 800f316:	000b      	movs	r3, r1
 800f318:	9907      	ldr	r1, [sp, #28]
 800f31a:	2401      	movs	r4, #1
 800f31c:	600a      	str	r2, [r1, #0]
 800f31e:	604b      	str	r3, [r1, #4]
 800f320:	984e      	ldr	r0, [sp, #312]	; 0x138
 800f322:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800f324:	002b      	movs	r3, r5
 800f326:	f7f2 fa69 	bl	80017fc <__aeabi_dsub>
 800f32a:	0007      	movs	r7, r0
 800f32c:	000e      	movs	r6, r1
 800f32e:	ad4e      	add	r5, sp, #312	; 0x138
 800f330:	9b00      	ldr	r3, [sp, #0]
 800f332:	3508      	adds	r5, #8
 800f334:	42a3      	cmp	r3, r4
 800f336:	da0f      	bge.n	800f358 <__kernel_rem_pio2+0x5fc>
 800f338:	9b08      	ldr	r3, [sp, #32]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d002      	beq.n	800f344 <__kernel_rem_pio2+0x5e8>
 800f33e:	2380      	movs	r3, #128	; 0x80
 800f340:	061b      	lsls	r3, r3, #24
 800f342:	18f6      	adds	r6, r6, r3
 800f344:	003a      	movs	r2, r7
 800f346:	0033      	movs	r3, r6
 800f348:	9907      	ldr	r1, [sp, #28]
 800f34a:	608a      	str	r2, [r1, #8]
 800f34c:	60cb      	str	r3, [r1, #12]
 800f34e:	e776      	b.n	800f23e <__kernel_rem_pio2+0x4e2>
 800f350:	2600      	movs	r6, #0
 800f352:	9c00      	ldr	r4, [sp, #0]
 800f354:	0035      	movs	r5, r6
 800f356:	e7d4      	b.n	800f302 <__kernel_rem_pio2+0x5a6>
 800f358:	0038      	movs	r0, r7
 800f35a:	682a      	ldr	r2, [r5, #0]
 800f35c:	686b      	ldr	r3, [r5, #4]
 800f35e:	0031      	movs	r1, r6
 800f360:	f7f1 f8a2 	bl	80004a8 <__aeabi_dadd>
 800f364:	3401      	adds	r4, #1
 800f366:	0007      	movs	r7, r0
 800f368:	000e      	movs	r6, r1
 800f36a:	e7e1      	b.n	800f330 <__kernel_rem_pio2+0x5d4>
 800f36c:	9b02      	ldr	r3, [sp, #8]
 800f36e:	68ae      	ldr	r6, [r5, #8]
 800f370:	68ef      	ldr	r7, [r5, #12]
 800f372:	3b01      	subs	r3, #1
 800f374:	9302      	str	r3, [sp, #8]
 800f376:	682a      	ldr	r2, [r5, #0]
 800f378:	686b      	ldr	r3, [r5, #4]
 800f37a:	9204      	str	r2, [sp, #16]
 800f37c:	9305      	str	r3, [sp, #20]
 800f37e:	9804      	ldr	r0, [sp, #16]
 800f380:	9905      	ldr	r1, [sp, #20]
 800f382:	0032      	movs	r2, r6
 800f384:	003b      	movs	r3, r7
 800f386:	f7f1 f88f 	bl	80004a8 <__aeabi_dadd>
 800f38a:	0002      	movs	r2, r0
 800f38c:	000b      	movs	r3, r1
 800f38e:	900a      	str	r0, [sp, #40]	; 0x28
 800f390:	910b      	str	r1, [sp, #44]	; 0x2c
 800f392:	9804      	ldr	r0, [sp, #16]
 800f394:	9905      	ldr	r1, [sp, #20]
 800f396:	f7f2 fa31 	bl	80017fc <__aeabi_dsub>
 800f39a:	0032      	movs	r2, r6
 800f39c:	003b      	movs	r3, r7
 800f39e:	f7f1 f883 	bl	80004a8 <__aeabi_dadd>
 800f3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f3a6:	60a8      	str	r0, [r5, #8]
 800f3a8:	60e9      	str	r1, [r5, #12]
 800f3aa:	602a      	str	r2, [r5, #0]
 800f3ac:	606b      	str	r3, [r5, #4]
 800f3ae:	e758      	b.n	800f262 <__kernel_rem_pio2+0x506>
 800f3b0:	6826      	ldr	r6, [r4, #0]
 800f3b2:	6867      	ldr	r7, [r4, #4]
 800f3b4:	68a2      	ldr	r2, [r4, #8]
 800f3b6:	68e3      	ldr	r3, [r4, #12]
 800f3b8:	0030      	movs	r0, r6
 800f3ba:	0039      	movs	r1, r7
 800f3bc:	9202      	str	r2, [sp, #8]
 800f3be:	9303      	str	r3, [sp, #12]
 800f3c0:	f7f1 f872 	bl	80004a8 <__aeabi_dadd>
 800f3c4:	0002      	movs	r2, r0
 800f3c6:	000b      	movs	r3, r1
 800f3c8:	9004      	str	r0, [sp, #16]
 800f3ca:	9105      	str	r1, [sp, #20]
 800f3cc:	0030      	movs	r0, r6
 800f3ce:	0039      	movs	r1, r7
 800f3d0:	f7f2 fa14 	bl	80017fc <__aeabi_dsub>
 800f3d4:	9a02      	ldr	r2, [sp, #8]
 800f3d6:	9b03      	ldr	r3, [sp, #12]
 800f3d8:	f7f1 f866 	bl	80004a8 <__aeabi_dadd>
 800f3dc:	9a04      	ldr	r2, [sp, #16]
 800f3de:	9b05      	ldr	r3, [sp, #20]
 800f3e0:	60a0      	str	r0, [r4, #8]
 800f3e2:	60e1      	str	r1, [r4, #12]
 800f3e4:	6022      	str	r2, [r4, #0]
 800f3e6:	6063      	str	r3, [r4, #4]
 800f3e8:	3d01      	subs	r5, #1
 800f3ea:	e740      	b.n	800f26e <__kernel_rem_pio2+0x512>
 800f3ec:	9b00      	ldr	r3, [sp, #0]
 800f3ee:	aa4e      	add	r2, sp, #312	; 0x138
 800f3f0:	00db      	lsls	r3, r3, #3
 800f3f2:	18d3      	adds	r3, r2, r3
 800f3f4:	0020      	movs	r0, r4
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	f7f1 f855 	bl	80004a8 <__aeabi_dadd>
 800f3fe:	9b00      	ldr	r3, [sp, #0]
 800f400:	0004      	movs	r4, r0
 800f402:	3b01      	subs	r3, #1
 800f404:	9300      	str	r3, [sp, #0]
 800f406:	e738      	b.n	800f27a <__kernel_rem_pio2+0x51e>
 800f408:	9b07      	ldr	r3, [sp, #28]
 800f40a:	9a07      	ldr	r2, [sp, #28]
 800f40c:	601f      	str	r7, [r3, #0]
 800f40e:	2380      	movs	r3, #128	; 0x80
 800f410:	061b      	lsls	r3, r3, #24
 800f412:	18f6      	adds	r6, r6, r3
 800f414:	18c0      	adds	r0, r0, r3
 800f416:	18c9      	adds	r1, r1, r3
 800f418:	6056      	str	r6, [r2, #4]
 800f41a:	6095      	str	r5, [r2, #8]
 800f41c:	60d0      	str	r0, [r2, #12]
 800f41e:	6114      	str	r4, [r2, #16]
 800f420:	6151      	str	r1, [r2, #20]
 800f422:	e70c      	b.n	800f23e <__kernel_rem_pio2+0x4e2>
 800f424:	41700000 	.word	0x41700000
 800f428:	3e700000 	.word	0x3e700000
 800f42c:	0801b498 	.word	0x0801b498

0800f430 <__kernel_sin>:
 800f430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f432:	b089      	sub	sp, #36	; 0x24
 800f434:	9202      	str	r2, [sp, #8]
 800f436:	9303      	str	r3, [sp, #12]
 800f438:	22f9      	movs	r2, #249	; 0xf9
 800f43a:	004b      	lsls	r3, r1, #1
 800f43c:	0007      	movs	r7, r0
 800f43e:	000e      	movs	r6, r1
 800f440:	085b      	lsrs	r3, r3, #1
 800f442:	0592      	lsls	r2, r2, #22
 800f444:	4293      	cmp	r3, r2
 800f446:	da03      	bge.n	800f450 <__kernel_sin+0x20>
 800f448:	f7f2 fd6a 	bl	8001f20 <__aeabi_d2iz>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d04c      	beq.n	800f4ea <__kernel_sin+0xba>
 800f450:	003a      	movs	r2, r7
 800f452:	0033      	movs	r3, r6
 800f454:	0038      	movs	r0, r7
 800f456:	0031      	movs	r1, r6
 800f458:	f7f1 ff64 	bl	8001324 <__aeabi_dmul>
 800f45c:	0004      	movs	r4, r0
 800f45e:	000d      	movs	r5, r1
 800f460:	0002      	movs	r2, r0
 800f462:	000b      	movs	r3, r1
 800f464:	0038      	movs	r0, r7
 800f466:	0031      	movs	r1, r6
 800f468:	f7f1 ff5c 	bl	8001324 <__aeabi_dmul>
 800f46c:	4a39      	ldr	r2, [pc, #228]	; (800f554 <__kernel_sin+0x124>)
 800f46e:	9000      	str	r0, [sp, #0]
 800f470:	9101      	str	r1, [sp, #4]
 800f472:	4b39      	ldr	r3, [pc, #228]	; (800f558 <__kernel_sin+0x128>)
 800f474:	0020      	movs	r0, r4
 800f476:	0029      	movs	r1, r5
 800f478:	f7f1 ff54 	bl	8001324 <__aeabi_dmul>
 800f47c:	4a37      	ldr	r2, [pc, #220]	; (800f55c <__kernel_sin+0x12c>)
 800f47e:	4b38      	ldr	r3, [pc, #224]	; (800f560 <__kernel_sin+0x130>)
 800f480:	f7f2 f9bc 	bl	80017fc <__aeabi_dsub>
 800f484:	0022      	movs	r2, r4
 800f486:	002b      	movs	r3, r5
 800f488:	f7f1 ff4c 	bl	8001324 <__aeabi_dmul>
 800f48c:	4a35      	ldr	r2, [pc, #212]	; (800f564 <__kernel_sin+0x134>)
 800f48e:	4b36      	ldr	r3, [pc, #216]	; (800f568 <__kernel_sin+0x138>)
 800f490:	f7f1 f80a 	bl	80004a8 <__aeabi_dadd>
 800f494:	0022      	movs	r2, r4
 800f496:	002b      	movs	r3, r5
 800f498:	f7f1 ff44 	bl	8001324 <__aeabi_dmul>
 800f49c:	4a33      	ldr	r2, [pc, #204]	; (800f56c <__kernel_sin+0x13c>)
 800f49e:	4b34      	ldr	r3, [pc, #208]	; (800f570 <__kernel_sin+0x140>)
 800f4a0:	f7f2 f9ac 	bl	80017fc <__aeabi_dsub>
 800f4a4:	0022      	movs	r2, r4
 800f4a6:	002b      	movs	r3, r5
 800f4a8:	f7f1 ff3c 	bl	8001324 <__aeabi_dmul>
 800f4ac:	4b31      	ldr	r3, [pc, #196]	; (800f574 <__kernel_sin+0x144>)
 800f4ae:	4a32      	ldr	r2, [pc, #200]	; (800f578 <__kernel_sin+0x148>)
 800f4b0:	f7f0 fffa 	bl	80004a8 <__aeabi_dadd>
 800f4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4b6:	9004      	str	r0, [sp, #16]
 800f4b8:	9105      	str	r1, [sp, #20]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d119      	bne.n	800f4f2 <__kernel_sin+0xc2>
 800f4be:	0002      	movs	r2, r0
 800f4c0:	000b      	movs	r3, r1
 800f4c2:	0020      	movs	r0, r4
 800f4c4:	0029      	movs	r1, r5
 800f4c6:	f7f1 ff2d 	bl	8001324 <__aeabi_dmul>
 800f4ca:	4a2c      	ldr	r2, [pc, #176]	; (800f57c <__kernel_sin+0x14c>)
 800f4cc:	4b2c      	ldr	r3, [pc, #176]	; (800f580 <__kernel_sin+0x150>)
 800f4ce:	f7f2 f995 	bl	80017fc <__aeabi_dsub>
 800f4d2:	9a00      	ldr	r2, [sp, #0]
 800f4d4:	9b01      	ldr	r3, [sp, #4]
 800f4d6:	f7f1 ff25 	bl	8001324 <__aeabi_dmul>
 800f4da:	0002      	movs	r2, r0
 800f4dc:	000b      	movs	r3, r1
 800f4de:	0038      	movs	r0, r7
 800f4e0:	0031      	movs	r1, r6
 800f4e2:	f7f0 ffe1 	bl	80004a8 <__aeabi_dadd>
 800f4e6:	0007      	movs	r7, r0
 800f4e8:	000e      	movs	r6, r1
 800f4ea:	0038      	movs	r0, r7
 800f4ec:	0031      	movs	r1, r6
 800f4ee:	b009      	add	sp, #36	; 0x24
 800f4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	9802      	ldr	r0, [sp, #8]
 800f4f6:	9903      	ldr	r1, [sp, #12]
 800f4f8:	4b22      	ldr	r3, [pc, #136]	; (800f584 <__kernel_sin+0x154>)
 800f4fa:	f7f1 ff13 	bl	8001324 <__aeabi_dmul>
 800f4fe:	9a04      	ldr	r2, [sp, #16]
 800f500:	9b05      	ldr	r3, [sp, #20]
 800f502:	9006      	str	r0, [sp, #24]
 800f504:	9107      	str	r1, [sp, #28]
 800f506:	9800      	ldr	r0, [sp, #0]
 800f508:	9901      	ldr	r1, [sp, #4]
 800f50a:	f7f1 ff0b 	bl	8001324 <__aeabi_dmul>
 800f50e:	0002      	movs	r2, r0
 800f510:	000b      	movs	r3, r1
 800f512:	9806      	ldr	r0, [sp, #24]
 800f514:	9907      	ldr	r1, [sp, #28]
 800f516:	f7f2 f971 	bl	80017fc <__aeabi_dsub>
 800f51a:	0022      	movs	r2, r4
 800f51c:	002b      	movs	r3, r5
 800f51e:	f7f1 ff01 	bl	8001324 <__aeabi_dmul>
 800f522:	9a02      	ldr	r2, [sp, #8]
 800f524:	9b03      	ldr	r3, [sp, #12]
 800f526:	f7f2 f969 	bl	80017fc <__aeabi_dsub>
 800f52a:	4a14      	ldr	r2, [pc, #80]	; (800f57c <__kernel_sin+0x14c>)
 800f52c:	0004      	movs	r4, r0
 800f52e:	000d      	movs	r5, r1
 800f530:	9800      	ldr	r0, [sp, #0]
 800f532:	9901      	ldr	r1, [sp, #4]
 800f534:	4b12      	ldr	r3, [pc, #72]	; (800f580 <__kernel_sin+0x150>)
 800f536:	f7f1 fef5 	bl	8001324 <__aeabi_dmul>
 800f53a:	0002      	movs	r2, r0
 800f53c:	000b      	movs	r3, r1
 800f53e:	0020      	movs	r0, r4
 800f540:	0029      	movs	r1, r5
 800f542:	f7f0 ffb1 	bl	80004a8 <__aeabi_dadd>
 800f546:	0002      	movs	r2, r0
 800f548:	000b      	movs	r3, r1
 800f54a:	0038      	movs	r0, r7
 800f54c:	0031      	movs	r1, r6
 800f54e:	f7f2 f955 	bl	80017fc <__aeabi_dsub>
 800f552:	e7c8      	b.n	800f4e6 <__kernel_sin+0xb6>
 800f554:	5acfd57c 	.word	0x5acfd57c
 800f558:	3de5d93a 	.word	0x3de5d93a
 800f55c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f560:	3e5ae5e6 	.word	0x3e5ae5e6
 800f564:	57b1fe7d 	.word	0x57b1fe7d
 800f568:	3ec71de3 	.word	0x3ec71de3
 800f56c:	19c161d5 	.word	0x19c161d5
 800f570:	3f2a01a0 	.word	0x3f2a01a0
 800f574:	3f811111 	.word	0x3f811111
 800f578:	1110f8a6 	.word	0x1110f8a6
 800f57c:	55555549 	.word	0x55555549
 800f580:	3fc55555 	.word	0x3fc55555
 800f584:	3fe00000 	.word	0x3fe00000

0800f588 <fabs>:
 800f588:	004b      	lsls	r3, r1, #1
 800f58a:	0859      	lsrs	r1, r3, #1
 800f58c:	4770      	bx	lr
	...

0800f590 <floor>:
 800f590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f592:	004b      	lsls	r3, r1, #1
 800f594:	4a3d      	ldr	r2, [pc, #244]	; (800f68c <floor+0xfc>)
 800f596:	0d5b      	lsrs	r3, r3, #21
 800f598:	189f      	adds	r7, r3, r2
 800f59a:	4684      	mov	ip, r0
 800f59c:	000e      	movs	r6, r1
 800f59e:	000d      	movs	r5, r1
 800f5a0:	0004      	movs	r4, r0
 800f5a2:	9001      	str	r0, [sp, #4]
 800f5a4:	2f13      	cmp	r7, #19
 800f5a6:	dc34      	bgt.n	800f612 <floor+0x82>
 800f5a8:	2f00      	cmp	r7, #0
 800f5aa:	da16      	bge.n	800f5da <floor+0x4a>
 800f5ac:	4a38      	ldr	r2, [pc, #224]	; (800f690 <floor+0x100>)
 800f5ae:	4b39      	ldr	r3, [pc, #228]	; (800f694 <floor+0x104>)
 800f5b0:	4660      	mov	r0, ip
 800f5b2:	0031      	movs	r1, r6
 800f5b4:	f7f0 ff78 	bl	80004a8 <__aeabi_dadd>
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f7f0 ff42 	bl	8000444 <__aeabi_dcmpgt>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d007      	beq.n	800f5d4 <floor+0x44>
 800f5c4:	2e00      	cmp	r6, #0
 800f5c6:	da5d      	bge.n	800f684 <floor+0xf4>
 800f5c8:	0073      	lsls	r3, r6, #1
 800f5ca:	085b      	lsrs	r3, r3, #1
 800f5cc:	431c      	orrs	r4, r3
 800f5ce:	d001      	beq.n	800f5d4 <floor+0x44>
 800f5d0:	2400      	movs	r4, #0
 800f5d2:	4d31      	ldr	r5, [pc, #196]	; (800f698 <floor+0x108>)
 800f5d4:	46a4      	mov	ip, r4
 800f5d6:	002e      	movs	r6, r5
 800f5d8:	e029      	b.n	800f62e <floor+0x9e>
 800f5da:	4b30      	ldr	r3, [pc, #192]	; (800f69c <floor+0x10c>)
 800f5dc:	413b      	asrs	r3, r7
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	400b      	ands	r3, r1
 800f5e2:	4303      	orrs	r3, r0
 800f5e4:	d023      	beq.n	800f62e <floor+0x9e>
 800f5e6:	4a2a      	ldr	r2, [pc, #168]	; (800f690 <floor+0x100>)
 800f5e8:	4b2a      	ldr	r3, [pc, #168]	; (800f694 <floor+0x104>)
 800f5ea:	4660      	mov	r0, ip
 800f5ec:	0031      	movs	r1, r6
 800f5ee:	f7f0 ff5b 	bl	80004a8 <__aeabi_dadd>
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f7f0 ff25 	bl	8000444 <__aeabi_dcmpgt>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	d0ea      	beq.n	800f5d4 <floor+0x44>
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	da03      	bge.n	800f60a <floor+0x7a>
 800f602:	2380      	movs	r3, #128	; 0x80
 800f604:	035b      	lsls	r3, r3, #13
 800f606:	413b      	asrs	r3, r7
 800f608:	18f5      	adds	r5, r6, r3
 800f60a:	9b00      	ldr	r3, [sp, #0]
 800f60c:	2400      	movs	r4, #0
 800f60e:	439d      	bics	r5, r3
 800f610:	e7e0      	b.n	800f5d4 <floor+0x44>
 800f612:	2f33      	cmp	r7, #51	; 0x33
 800f614:	dd0f      	ble.n	800f636 <floor+0xa6>
 800f616:	2380      	movs	r3, #128	; 0x80
 800f618:	00db      	lsls	r3, r3, #3
 800f61a:	429f      	cmp	r7, r3
 800f61c:	d107      	bne.n	800f62e <floor+0x9e>
 800f61e:	0002      	movs	r2, r0
 800f620:	000b      	movs	r3, r1
 800f622:	4660      	mov	r0, ip
 800f624:	0031      	movs	r1, r6
 800f626:	f7f0 ff3f 	bl	80004a8 <__aeabi_dadd>
 800f62a:	4684      	mov	ip, r0
 800f62c:	000e      	movs	r6, r1
 800f62e:	4660      	mov	r0, ip
 800f630:	0031      	movs	r1, r6
 800f632:	b003      	add	sp, #12
 800f634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f636:	4a1a      	ldr	r2, [pc, #104]	; (800f6a0 <floor+0x110>)
 800f638:	189b      	adds	r3, r3, r2
 800f63a:	2201      	movs	r2, #1
 800f63c:	4252      	negs	r2, r2
 800f63e:	40da      	lsrs	r2, r3
 800f640:	9200      	str	r2, [sp, #0]
 800f642:	4210      	tst	r0, r2
 800f644:	d0f3      	beq.n	800f62e <floor+0x9e>
 800f646:	4a12      	ldr	r2, [pc, #72]	; (800f690 <floor+0x100>)
 800f648:	4b12      	ldr	r3, [pc, #72]	; (800f694 <floor+0x104>)
 800f64a:	4660      	mov	r0, ip
 800f64c:	0031      	movs	r1, r6
 800f64e:	f7f0 ff2b 	bl	80004a8 <__aeabi_dadd>
 800f652:	2200      	movs	r2, #0
 800f654:	2300      	movs	r3, #0
 800f656:	f7f0 fef5 	bl	8000444 <__aeabi_dcmpgt>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	d0ba      	beq.n	800f5d4 <floor+0x44>
 800f65e:	2e00      	cmp	r6, #0
 800f660:	da02      	bge.n	800f668 <floor+0xd8>
 800f662:	2f14      	cmp	r7, #20
 800f664:	d103      	bne.n	800f66e <floor+0xde>
 800f666:	3501      	adds	r5, #1
 800f668:	9b00      	ldr	r3, [sp, #0]
 800f66a:	439c      	bics	r4, r3
 800f66c:	e7b2      	b.n	800f5d4 <floor+0x44>
 800f66e:	2334      	movs	r3, #52	; 0x34
 800f670:	1bdf      	subs	r7, r3, r7
 800f672:	3b33      	subs	r3, #51	; 0x33
 800f674:	40bb      	lsls	r3, r7
 800f676:	18e4      	adds	r4, r4, r3
 800f678:	9b01      	ldr	r3, [sp, #4]
 800f67a:	429c      	cmp	r4, r3
 800f67c:	419b      	sbcs	r3, r3
 800f67e:	425b      	negs	r3, r3
 800f680:	18f5      	adds	r5, r6, r3
 800f682:	e7f1      	b.n	800f668 <floor+0xd8>
 800f684:	2400      	movs	r4, #0
 800f686:	0025      	movs	r5, r4
 800f688:	e7a4      	b.n	800f5d4 <floor+0x44>
 800f68a:	46c0      	nop			; (mov r8, r8)
 800f68c:	fffffc01 	.word	0xfffffc01
 800f690:	8800759c 	.word	0x8800759c
 800f694:	7e37e43c 	.word	0x7e37e43c
 800f698:	bff00000 	.word	0xbff00000
 800f69c:	000fffff 	.word	0x000fffff
 800f6a0:	fffffbed 	.word	0xfffffbed

0800f6a4 <scalbn>:
 800f6a4:	004b      	lsls	r3, r1, #1
 800f6a6:	b570      	push	{r4, r5, r6, lr}
 800f6a8:	0d5b      	lsrs	r3, r3, #21
 800f6aa:	0014      	movs	r4, r2
 800f6ac:	000a      	movs	r2, r1
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d10d      	bne.n	800f6ce <scalbn+0x2a>
 800f6b2:	004b      	lsls	r3, r1, #1
 800f6b4:	085b      	lsrs	r3, r3, #1
 800f6b6:	4303      	orrs	r3, r0
 800f6b8:	d010      	beq.n	800f6dc <scalbn+0x38>
 800f6ba:	4b27      	ldr	r3, [pc, #156]	; (800f758 <scalbn+0xb4>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f7f1 fe31 	bl	8001324 <__aeabi_dmul>
 800f6c2:	4b26      	ldr	r3, [pc, #152]	; (800f75c <scalbn+0xb8>)
 800f6c4:	429c      	cmp	r4, r3
 800f6c6:	da0a      	bge.n	800f6de <scalbn+0x3a>
 800f6c8:	4a25      	ldr	r2, [pc, #148]	; (800f760 <scalbn+0xbc>)
 800f6ca:	4b26      	ldr	r3, [pc, #152]	; (800f764 <scalbn+0xc0>)
 800f6cc:	e019      	b.n	800f702 <scalbn+0x5e>
 800f6ce:	4d26      	ldr	r5, [pc, #152]	; (800f768 <scalbn+0xc4>)
 800f6d0:	42ab      	cmp	r3, r5
 800f6d2:	d108      	bne.n	800f6e6 <scalbn+0x42>
 800f6d4:	0002      	movs	r2, r0
 800f6d6:	000b      	movs	r3, r1
 800f6d8:	f7f0 fee6 	bl	80004a8 <__aeabi_dadd>
 800f6dc:	bd70      	pop	{r4, r5, r6, pc}
 800f6de:	000a      	movs	r2, r1
 800f6e0:	004b      	lsls	r3, r1, #1
 800f6e2:	0d5b      	lsrs	r3, r3, #21
 800f6e4:	3b36      	subs	r3, #54	; 0x36
 800f6e6:	4d21      	ldr	r5, [pc, #132]	; (800f76c <scalbn+0xc8>)
 800f6e8:	18e3      	adds	r3, r4, r3
 800f6ea:	42ab      	cmp	r3, r5
 800f6ec:	dd0c      	ble.n	800f708 <scalbn+0x64>
 800f6ee:	4c20      	ldr	r4, [pc, #128]	; (800f770 <scalbn+0xcc>)
 800f6f0:	4d20      	ldr	r5, [pc, #128]	; (800f774 <scalbn+0xd0>)
 800f6f2:	2900      	cmp	r1, #0
 800f6f4:	da01      	bge.n	800f6fa <scalbn+0x56>
 800f6f6:	4c1e      	ldr	r4, [pc, #120]	; (800f770 <scalbn+0xcc>)
 800f6f8:	4d1f      	ldr	r5, [pc, #124]	; (800f778 <scalbn+0xd4>)
 800f6fa:	0020      	movs	r0, r4
 800f6fc:	0029      	movs	r1, r5
 800f6fe:	4a1c      	ldr	r2, [pc, #112]	; (800f770 <scalbn+0xcc>)
 800f700:	4b1c      	ldr	r3, [pc, #112]	; (800f774 <scalbn+0xd0>)
 800f702:	f7f1 fe0f 	bl	8001324 <__aeabi_dmul>
 800f706:	e7e9      	b.n	800f6dc <scalbn+0x38>
 800f708:	2b00      	cmp	r3, #0
 800f70a:	dd05      	ble.n	800f718 <scalbn+0x74>
 800f70c:	4c1b      	ldr	r4, [pc, #108]	; (800f77c <scalbn+0xd8>)
 800f70e:	051b      	lsls	r3, r3, #20
 800f710:	4022      	ands	r2, r4
 800f712:	431a      	orrs	r2, r3
 800f714:	0011      	movs	r1, r2
 800f716:	e7e1      	b.n	800f6dc <scalbn+0x38>
 800f718:	001d      	movs	r5, r3
 800f71a:	3535      	adds	r5, #53	; 0x35
 800f71c:	da13      	bge.n	800f746 <scalbn+0xa2>
 800f71e:	4a18      	ldr	r2, [pc, #96]	; (800f780 <scalbn+0xdc>)
 800f720:	0fcb      	lsrs	r3, r1, #31
 800f722:	4294      	cmp	r4, r2
 800f724:	dd08      	ble.n	800f738 <scalbn+0x94>
 800f726:	4812      	ldr	r0, [pc, #72]	; (800f770 <scalbn+0xcc>)
 800f728:	4912      	ldr	r1, [pc, #72]	; (800f774 <scalbn+0xd0>)
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <scalbn+0x8e>
 800f72e:	4810      	ldr	r0, [pc, #64]	; (800f770 <scalbn+0xcc>)
 800f730:	4911      	ldr	r1, [pc, #68]	; (800f778 <scalbn+0xd4>)
 800f732:	4a0f      	ldr	r2, [pc, #60]	; (800f770 <scalbn+0xcc>)
 800f734:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <scalbn+0xd0>)
 800f736:	e7e4      	b.n	800f702 <scalbn+0x5e>
 800f738:	4809      	ldr	r0, [pc, #36]	; (800f760 <scalbn+0xbc>)
 800f73a:	490a      	ldr	r1, [pc, #40]	; (800f764 <scalbn+0xc0>)
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d0c3      	beq.n	800f6c8 <scalbn+0x24>
 800f740:	4807      	ldr	r0, [pc, #28]	; (800f760 <scalbn+0xbc>)
 800f742:	4910      	ldr	r1, [pc, #64]	; (800f784 <scalbn+0xe0>)
 800f744:	e7c0      	b.n	800f6c8 <scalbn+0x24>
 800f746:	4c0d      	ldr	r4, [pc, #52]	; (800f77c <scalbn+0xd8>)
 800f748:	3336      	adds	r3, #54	; 0x36
 800f74a:	4022      	ands	r2, r4
 800f74c:	051b      	lsls	r3, r3, #20
 800f74e:	4313      	orrs	r3, r2
 800f750:	0019      	movs	r1, r3
 800f752:	2200      	movs	r2, #0
 800f754:	4b0c      	ldr	r3, [pc, #48]	; (800f788 <scalbn+0xe4>)
 800f756:	e7d4      	b.n	800f702 <scalbn+0x5e>
 800f758:	43500000 	.word	0x43500000
 800f75c:	ffff3cb0 	.word	0xffff3cb0
 800f760:	c2f8f359 	.word	0xc2f8f359
 800f764:	01a56e1f 	.word	0x01a56e1f
 800f768:	000007ff 	.word	0x000007ff
 800f76c:	000007fe 	.word	0x000007fe
 800f770:	8800759c 	.word	0x8800759c
 800f774:	7e37e43c 	.word	0x7e37e43c
 800f778:	fe37e43c 	.word	0xfe37e43c
 800f77c:	800fffff 	.word	0x800fffff
 800f780:	0000c350 	.word	0x0000c350
 800f784:	81a56e1f 	.word	0x81a56e1f
 800f788:	3c900000 	.word	0x3c900000

0800f78c <_init>:
 800f78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78e:	46c0      	nop			; (mov r8, r8)
 800f790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f792:	bc08      	pop	{r3}
 800f794:	469e      	mov	lr, r3
 800f796:	4770      	bx	lr

0800f798 <_fini>:
 800f798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f79a:	46c0      	nop			; (mov r8, r8)
 800f79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f79e:	bc08      	pop	{r3}
 800f7a0:	469e      	mov	lr, r3
 800f7a2:	4770      	bx	lr
