
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009904  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  00025140  2**0
                  CONTENTS
  4 .ARM          00000000  08009aa8  08009aa8  00025140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aa8  08009aa8  00025140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005140  20000000  08009ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20005140  0800ebf0  00025140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054c0  0800ebf0  000254c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a99  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a7  00000000  00000000  0003ec01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  000420a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00043908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3eb  00000000  00000000  00044ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d204  00000000  00000000  000613db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae16a  00000000  00000000  0007e5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005910  00000000  00000000  0012c79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20005140 	.word	0x20005140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080099a8 	.word	0x080099a8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20005144 	.word	0x20005144
 8000100:	080099a8 	.word	0x080099a8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fc19 	bl	8002d6c <HAL_Init>

  /* USER CODE BEGIN Init */
  USART3->CR2|=USART_CR2_MSBFIRST;
 800053a:	4b39      	ldr	r3, [pc, #228]	; (8000620 <main+0x108>)
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	4b38      	ldr	r3, [pc, #224]	; (8000620 <main+0x108>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0309      	lsls	r1, r1, #12
 8000544:	430a      	orrs	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f878 	bl	800063c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <main+0x10c>)
 800054e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <main+0x10c>)
 8000552:	2101      	movs	r1, #1
 8000554:	430a      	orrs	r2, r1
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <main+0x10c>)
 800055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055c:	2201      	movs	r2, #1
 800055e:	4013      	ands	r3, r2
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <main+0x10c>)
 8000566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <main+0x10c>)
 800056a:	2102      	movs	r1, #2
 800056c:	430a      	orrs	r2, r1
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <main+0x10c>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	2202      	movs	r2, #2
 8000576:	4013      	ands	r3, r2
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <main+0x10c>)
 800057e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <main+0x10c>)
 8000582:	2104      	movs	r1, #4
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0x10c>)
 800058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058c:	2204      	movs	r2, #4
 800058e:	4013      	ands	r3, r2
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fbac 	bl	8000cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 fb8c 	bl	8000cb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800059c:	f000 faa6 	bl	8000aec <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005a0:	f000 f8cc 	bl	800073c <MX_COMP1_Init>
  MX_TIM1_Init();
 80005a4:	f000 f9a8 	bl	80008f8 <MX_TIM1_Init>
  MX_USART3_Init();
 80005a8:	f000 fb3e 	bl	8000c28 <MX_USART3_Init>
  MX_I2S1_Init();
 80005ac:	f000 f938 	bl	8000820 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8f6 	bl	80007a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005b4:	f000 f95e 	bl	8000874 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0x110>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 fea4 	bl	8003308 <HAL_COMP_Start>
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f002 fc59 	bl	8002e78 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005c6:	f001 fc27 	bl	8001e18 <MEM_Reset>
	weoClear();
 80005ca:	f000 fe6d 	bl	80012a8 <weoClear>
	weoInit();
 80005ce:	f000 fe15 	bl	80011fc <weoInit>
	MEM_GetID();
 80005d2:	f001 fe71 	bl	80022b8 <MEM_GetID>

	weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, h1);
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <main+0x114>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	23ff      	movs	r3, #255	; 0xff
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	237f      	movs	r3, #127	; 0x7f
 80005e0:	227f      	movs	r2, #127	; 0x7f
 80005e2:	2100      	movs	r1, #0
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fe79 	bl	80012dc <weoDrawRectangleFilled>
//	weoDrawRectangleFilled(0x00,0x00,0x06,0x0D,0xFF,FONT_X[0xFE]);
//	weoDrawRectangleFilled(0x00, 0x00,0x00+X_increment-1,0x00+ASCII_height-1, 0xFF, image_data_Font_0x31);
//	weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x118>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x118>)
 80005f0:	4910      	ldr	r1, [pc, #64]	; (8000634 <main+0x11c>)
 80005f2:	430a      	orrs	r2, r1
 80005f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <main+0x118>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff1b 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <main+0x118>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff25 	bl	8000450 <LL_USART_EnableIT_ERROR>
//	dataASCII[0]= 0x30;
//	dataASCII[1]=0x31;
	USART2->ICR|=USART_ICR_ORECF;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x118>)
 8000608:	6a1a      	ldr	r2, [r3, #32]
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x118>)
 800060c:	2108      	movs	r1, #8
 800060e:	430a      	orrs	r2, r1
 8000610:	621a      	str	r2, [r3, #32]
//	showFullScreen(0x00);
	while (1) {
//		MEM_GetID();
//		showSmallImage(0x00, 0x00, 0x00);
//		printASCIIarray(0,0,1,dataASCII);
		cmdExecute(cmd2Execute);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <main+0x120>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f001 feb0 	bl	800237c <cmdExecute>
 800061c:	e7f9      	b.n	8000612 <main+0xfa>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40004800 	.word	0x40004800
 8000624:	40021000 	.word	0x40021000
 8000628:	20005280 	.word	0x20005280
 800062c:	20003134 	.word	0x20003134
 8000630:	40004400 	.word	0x40004400
 8000634:	1000100d 	.word	0x1000100d
 8000638:	20005376 	.word	0x20005376

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b0a1      	sub	sp, #132	; 0x84
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2448      	movs	r4, #72	; 0x48
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2338      	movs	r3, #56	; 0x38
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f009 f9a3 	bl	8009998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	2338      	movs	r3, #56	; 0x38
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2310      	movs	r3, #16
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f009 f99b 	bl	8009998 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	2334      	movs	r3, #52	; 0x34
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f009 f994 	bl	8009998 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f004 fbe3 	bl	8004e40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2202      	movs	r2, #2
 800069a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2208      	movs	r2, #8
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0292      	lsls	r2, r2, #10
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	0492      	lsls	r2, r2, #18
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0592      	lsls	r2, r2, #22
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f004 fc05 	bl	8004ed8 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f001 ff73 	bl	80025bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	2138      	movs	r1, #56	; 0x38
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2207      	movs	r2, #7
 80006dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2102      	movs	r1, #2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f004 ff0f 	bl	8005518 <HAL_RCC_ClockConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f001 ff5d 	bl	80025bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <SystemClock_Config+0xfc>)
 8000706:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	0018      	movs	r0, r3
 8000724:	f005 f8a2 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800072c:	f001 ff46 	bl	80025bc <Error_Handler>
  }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b021      	add	sp, #132	; 0x84
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	00200822 	.word	0x00200822

0800073c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_COMP1_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000750:	2230      	movs	r2, #48	; 0x30
 8000752:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_COMP1_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0392      	lsls	r2, r2, #14
 800076c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_COMP1_Init+0x5c>)
 800077c:	2212      	movs	r2, #18
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fc5e 	bl	8003044 <HAL_COMP_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 800078c:	f001 ff16 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20005280 	.word	0x20005280
 800079c:	40010200 	.word	0x40010200

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_I2C1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_I2C1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_I2C1_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_I2C1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2C1_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f003 fa29 	bl	8003c34 <HAL_I2C_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f001 fee9 	bl	80025bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f004 f8b6 	bl	8004960 <HAL_I2CEx_ConfigAnalogFilter>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f001 fee0 	bl	80025bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_I2C1_Init+0x74>)
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f004 f8f9 	bl	80049f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f001 fed7 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000521c 	.word	0x2000521c
 8000818:	40005400 	.word	0x40005400
 800081c:	1094102c 	.word	0x1094102c

08000820 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2S1_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2S1_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_I2S1_Init+0x4c>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2S1_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2S1_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_I2S1_Init+0x4c>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2S1_Init+0x4c>)
 8000848:	22fa      	movs	r2, #250	; 0xfa
 800084a:	0192      	lsls	r2, r2, #6
 800084c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2S1_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_I2S1_Init+0x4c>)
 8000856:	0018      	movs	r0, r3
 8000858:	f004 f91a 	bl	8004a90 <HAL_I2S_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000860:	f001 feac 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20005378 	.word	0x20005378
 8000870:	40013000 	.word	0x40013000

08000874 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_SPI2_Init+0x7c>)
 800087a:	2208      	movs	r2, #8
 800087c:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_SPI2_Init+0x7c>)
 8000880:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI2_Init+0x80>)
 8000882:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI2_Init+0x7c>)
 8000886:	2282      	movs	r2, #130	; 0x82
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI2_Init+0x7c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI2_Init+0x7c>)
 8000894:	22e0      	movs	r2, #224	; 0xe0
 8000896:	00d2      	lsls	r2, r2, #3
 8000898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_SPI2_Init+0x7c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008d4:	2208      	movs	r2, #8
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f005 fcc6 	bl	800626c <HAL_SPI_Init>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e4:	f001 fe6a 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200051a4 	.word	0x200051a4
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2368      	movs	r3, #104	; 0x68
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f009 f845 	bl	8009998 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	235c      	movs	r3, #92	; 0x5c
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	230c      	movs	r3, #12
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f009 f83d 	bl	8009998 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800091e:	2350      	movs	r3, #80	; 0x50
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f009 f835 	bl	8009998 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	231c      	movs	r3, #28
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 f82d 	bl	8009998 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f009 f826 	bl	8009998 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b64      	ldr	r3, [pc, #400]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <MX_TIM1_Init+0x1ec>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000952:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b61      	ldr	r3, [pc, #388]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800095e:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000960:	4a61      	ldr	r2, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1f0>)
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f006 fc89 	bl	8007290 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f001 fe1b 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2168      	movs	r1, #104	; 0x68
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f006 ff12 	bl	80077c0 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a0:	f001 fe0c 	bl	80025bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f006 fcca 	bl	8007340 <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b0:	f001 fe04 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	215c      	movs	r1, #92	; 0x5c
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f007 fbc6 	bl	8008160 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009d8:	f001 fdf0 	bl	80025bc <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009dc:	2150      	movs	r1, #80	; 0x50
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f007 fcc6 	bl	8008388 <HAL_TIMEx_ConfigBreakInput>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a00:	f001 fddc 	bl	80025bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a04:	2134      	movs	r1, #52	; 0x34
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2260      	movs	r2, #96	; 0x60
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2296      	movs	r2, #150	; 0x96
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f006 fdcb 	bl	80075d4 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a42:	f001 fdbb 	bl	80025bc <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a46:	2134      	movs	r1, #52	; 0x34
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2232      	movs	r2, #50	; 0x32
 8000a4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a4e:	1879      	adds	r1, r7, r1
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f006 fdbd 	bl	80075d4 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a5e:	f001 fdad 	bl	80025bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	00d2      	lsls	r2, r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0152      	lsls	r2, r2, #5
 8000a84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0192      	lsls	r2, r2, #6
 8000a8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	220a      	movs	r2, #10
 8000a92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0492      	lsls	r2, r2, #18
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	01d2      	lsls	r2, r2, #7
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	003a      	movs	r2, r7
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f007 fbba 	bl	800823c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000acc:	f001 fd76 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 ff5a 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b01e      	add	sp, #120	; 0x78
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20005328 	.word	0x20005328
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	0000027f 	.word	0x0000027f

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08f      	sub	sp, #60	; 0x3c
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000af2:	2418      	movs	r4, #24
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2320      	movs	r3, #32
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f008 ff4b 	bl	8009998 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	003b      	movs	r3, r7
 8000b04:	0018      	movs	r0, r3
 8000b06:	2318      	movs	r3, #24
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f008 ff44 	bl	8009998 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fcd3 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fce6 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2202      	movs	r2, #2
 8000b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	003a      	movs	r2, r7
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f008 fba5 	bl	800929c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2208      	movs	r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2201      	movs	r2, #1
 8000b74:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	003a      	movs	r2, r7
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f008 fb8c 	bl	800929c <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	201c      	movs	r0, #28
 8000b88:	f7ff fb62 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	201c      	movs	r0, #28
 8000b8e:	f7ff fb45 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	22e1      	movs	r2, #225	; 0xe1
 8000b9c:	0212      	lsls	r2, r2, #8
 8000b9e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	220c      	movs	r2, #12
 8000bba:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f008 fe30 	bl	8009834 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbc5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbd2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbac 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fbde 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fb96 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbed 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d0f9      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbfb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d0f3      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00f      	add	sp, #60	; 0x3c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0309      	lsls	r1, r1, #12
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_USART3_Init+0x84>)
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c3e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART3_Init+0x84>)
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_USART3_Init+0x88>)
 8000c44:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_USART3_Init+0x84>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART3_Init+0x84>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  USART3->CR2|=USART_CR2_MSBFIRST;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0309      	lsls	r1, r1, #12
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	605a      	str	r2, [r3, #4]
//  husart3.AdvancedInit.AdvFeatureInit = USART_ADVFEATURE_MSBFIRST_INIT;
//    husart3.AdvancedInit.MSBFirst = USART_ADVFEATURE_MSBFIRST_ENABLE;
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART3_Init+0x84>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_Init+0x84>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART3_Init+0x84>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USART3_Init+0x84>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_Init+0x84>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_Init+0x84>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_Init+0x84>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART3_Init+0x84>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f007 fc18 	bl	80084c8 <HAL_USART_Init>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_Init+0x78>
  {
    Error_Handler();
 8000c9c:	f001 fc8e 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	200052b8 	.word	0x200052b8
 8000cb0:	007a1200 	.word	0x007a1200

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_DMA_Init+0x38>)
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f002 fc14 	bl	8003504 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cdc:	2009      	movs	r0, #9
 8000cde:	f002 fc26 	bl	800352e <HAL_NVIC_EnableIRQ>

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f008 fe4a 	bl	8009998 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fbf1 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f7ff fbee 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fbeb 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4a92      	ldr	r2, [pc, #584]	; (8000f64 <MX_GPIO_Init+0x274>)
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0010      	movs	r0, r2
 8000d20:	f7ff fbc2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	01db      	lsls	r3, r3, #7
 8000d28:	4a8f      	ldr	r2, [pc, #572]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	0010      	movs	r0, r2
 8000d2e:	f7ff fbbb 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	4a8c      	ldr	r2, [pc, #560]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000d38:	0019      	movs	r1, r3
 8000d3a:	0010      	movs	r0, r2
 8000d3c:	f7ff fbb4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fbae 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fba8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d58:	4b83      	ldr	r3, [pc, #524]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fba3 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d62:	003b      	movs	r3, r7
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2203      	movs	r2, #3
 8000d74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d82:	003b      	movs	r3, r7
 8000d84:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <MX_GPIO_Init+0x274>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f008 fa87 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d8e:	003b      	movs	r3, r7
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	01d2      	lsls	r2, r2, #7
 8000d94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2201      	movs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000dae:	003b      	movs	r3, r7
 8000db0:	4a6d      	ldr	r2, [pc, #436]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000db2:	0019      	movs	r1, r3
 8000db4:	0010      	movs	r0, r2
 8000db6:	f008 fa71 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000dba:	003b      	movs	r3, r7
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	0212      	lsls	r2, r2, #8
 8000dc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000dda:	003b      	movs	r3, r7
 8000ddc:	4a62      	ldr	r2, [pc, #392]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f008 fa5b 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dec:	003b      	movs	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2201      	movs	r2, #1
 8000df6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	003a      	movs	r2, r7
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f008 fa4b 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2202      	movs	r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2201      	movs	r2, #1
 8000e16:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e18:	003a      	movs	r2, r7
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f008 fa3b 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2210      	movs	r2, #16
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	003a      	movs	r2, r7
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f008 fa2b 	bl	800929c <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	0192      	lsls	r2, r2, #6
 8000e4c:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2201      	movs	r2, #1
 8000e58:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f008 fa1a 	bl	800929c <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	01d2      	lsls	r2, r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2201      	movs	r2, #1
 8000e7a:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	003a      	movs	r2, r7
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f008 fa09 	bl	800929c <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2240      	movs	r2, #64	; 0x40
 8000e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2201      	movs	r2, #1
 8000e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2203      	movs	r2, #3
 8000e9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f008 f9f3 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec8:	003b      	movs	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ece:	003b      	movs	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	003a      	movs	r2, r7
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f008 f9dd 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f00:	003b      	movs	r3, r7
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000f04:	0019      	movs	r1, r3
 8000f06:	0010      	movs	r0, r2
 8000f08:	f008 f9c8 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000f0c:	003b      	movs	r3, r7
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	003a      	movs	r2, r7
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f008 f9b7 	bl	800929c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0152      	lsls	r2, r2, #5
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f42:	003a      	movs	r2, r7
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f008 f9a6 	bl	800929c <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	031b      	lsls	r3, r3, #12
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fa97 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b006      	add	sp, #24
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	50000400 	.word	0x50000400
 8000f68:	50000800 	.word	0x50000800

08000f6c <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <USART2_RX_Callback+0x60>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fa7a 	bl	800046c <LL_USART_ReceiveData9>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000f7e:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <USART2_RX_Callback+0x60>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	0ddb      	lsrs	r3, r3, #23
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000f8e:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <USART2_RX_Callback+0x68>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	2bff      	cmp	r3, #255	; 0xff
 8000f9c:	d90a      	bls.n	8000fb4 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <USART2_RX_Callback+0x6c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <USART2_RX_Callback+0x70>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <USART2_RX_Callback+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <USART2_RX_Callback+0x74>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d104      	bne.n	8000fc6 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 f80f 	bl	8000fe4 <cmdReceive>
  }
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	20005498 	.word	0x20005498
 8000fd4:	20005160 	.word	0x20005160
 8000fd8:	200054a0 	.word	0x200054a0
 8000fdc:	20005162 	.word	0x20005162
 8000fe0:	20005161 	.word	0x20005161

08000fe4 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	801a      	strh	r2, [r3, #0]
	  uint8_t inputCS=0;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	  uint8_t i=0;
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <cmdReceive+0xc0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0fb      	beq.n	8001002 <cmdReceive+0x1e>
	  ByteReceived=0;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <cmdReceive+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <cmdReceive+0xc4>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <cmdReceive+0xc8>)
 800101e:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <cmdReceive+0xc4>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <cmdReceive+0xc4>)
 800102a:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <cmdReceive+0xc4>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d02d      	beq.n	8001090 <cmdReceive+0xac>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <cmdReceive+0xc4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	001a      	movs	r2, r3
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <cmdReceive+0xc8>)
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	3301      	adds	r3, #1
 8001040:	429a      	cmp	r2, r3
 8001042:	dd25      	ble.n	8001090 <cmdReceive+0xac>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001044:	230e      	movs	r3, #14
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e00f      	b.n	800106e <cmdReceive+0x8a>
				 inputCS+=cmd[i];
 800104e:	200e      	movs	r0, #14
 8001050:	183b      	adds	r3, r7, r0
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4a15      	ldr	r2, [pc, #84]	; (80010ac <cmdReceive+0xc8>)
 8001056:	5cd1      	ldrb	r1, [r2, r3]
 8001058:	220f      	movs	r2, #15
 800105a:	18bb      	adds	r3, r7, r2
 800105c:	18ba      	adds	r2, r7, r2
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	188a      	adds	r2, r1, r2
 8001062:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001064:	183b      	adds	r3, r7, r0
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	183b      	adds	r3, r7, r0
 800106a:	3201      	adds	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <cmdReceive+0xc8>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	230e      	movs	r3, #14
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	dae7      	bge.n	800104e <cmdReceive+0x6a>
			 }
			 if(inputCS==0){
 800107e:	230f      	movs	r3, #15
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d103      	bne.n	8001090 <cmdReceive+0xac>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 				  answer2CPU(cmd);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <cmdReceive+0xc8>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 faa0 	bl	80015d0 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <cmdReceive+0xcc>)
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <cmdReceive+0xcc>)
 8001096:	2108      	movs	r1, #8
 8001098:	430a      	orrs	r2, r1
 800109a:	621a      	str	r2, [r3, #32]
	}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20005160 	.word	0x20005160
 80010a8:	20005162 	.word	0x20005162
 80010ac:	200054a0 	.word	0x200054a0
 80010b0:	40004400 	.word	0x40004400

080010b4 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	2255      	movs	r2, #85	; 0x55
 80010ca:	4393      	bics	r3, r2
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	105b      	asrs	r3, r3, #1
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	2155      	movs	r1, #85	; 0x55
 80010d8:	400b      	ands	r3, r1
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	2233      	movs	r2, #51	; 0x33
 80010f0:	4393      	bics	r3, r2
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	109b      	asrs	r3, r3, #2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	2133      	movs	r1, #51	; 0x33
 80010fe:	400b      	ands	r3, r1
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2da      	uxtb	r2, r3
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	b25a      	sxtb	r2, r3
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	b2db      	uxtb	r3, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b25b      	sxtb	r3, r3
 8001122:	b2da      	uxtb	r2, r3
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 8001128:	1df9      	adds	r1, r7, #7
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <USART_AS_SPI_sendCMD+0x88>)
 800112c:	2301      	movs	r3, #1
 800112e:	2201      	movs	r2, #1
 8001130:	f007 fa1a 	bl	8008568 <HAL_USART_Transmit>
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200052b8 	.word	0x200052b8

08001140 <USART_AS_SPI_sendDAT>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	0002      	movs	r2, r0
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b25b      	sxtb	r3, r3
 8001154:	2255      	movs	r2, #85	; 0x55
 8001156:	4393      	bics	r3, r2
 8001158:	b25a      	sxtb	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	105b      	asrs	r3, r3, #1
 8001160:	b25b      	sxtb	r3, r3
 8001162:	2155      	movs	r1, #85	; 0x55
 8001164:	400b      	ands	r3, r1
 8001166:	b25b      	sxtb	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	2233      	movs	r2, #51	; 0x33
 800117c:	4393      	bics	r3, r2
 800117e:	b25a      	sxtb	r2, r3
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	109b      	asrs	r3, r3, #2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	2133      	movs	r1, #51	; 0x33
 800118a:	400b      	ands	r3, r1
 800118c:	b25b      	sxtb	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	b2da      	uxtb	r2, r3
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~(1 << 6); //reset cs
 80011b4:	23a0      	movs	r3, #160	; 0xa0
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	23a0      	movs	r3, #160	; 0xa0
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	438a      	bics	r2, r1
 80011c2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 7; // set dc
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	430a      	orrs	r2, r1
 80011d2:	615a      	str	r2, [r3, #20]
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 80011d4:	1df9      	adds	r1, r7, #7
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <USART_AS_SPI_sendDAT+0xb8>)
 80011d8:	2301      	movs	r3, #1
 80011da:	2201      	movs	r2, #1
 80011dc:	f007 f9c4 	bl	8008568 <HAL_USART_Transmit>
		GPIOA->ODR |= 1 << 6; //set cs
 80011e0:	23a0      	movs	r3, #160	; 0xa0
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]

	}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200052b8 	.word	0x200052b8

080011fc <weoInit>:
	void weoInit(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f001 fe39 	bl	8002e78 <HAL_Delay>
		HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f001 fe36 	bl	8002e78 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <weoInit+0xa8>)
 800120e:	2100      	movs	r1, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f006 f8f5 	bl	8007400 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f001 fe2e 	bl	8002e78 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800121c:	23a0      	movs	r3, #160	; 0xa0
 800121e:	05db      	lsls	r3, r3, #23
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	438a      	bics	r2, r1
 800122a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800122c:	23a0      	movs	r3, #160	; 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	23a0      	movs	r3, #160	; 0xa0
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	438a      	bics	r2, r1
 800123a:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800123c:	20af      	movs	r0, #175	; 0xaf
 800123e:	f7ff ff39 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001242:	20a0      	movs	r0, #160	; 0xa0
 8001244:	f7ff ff36 	bl	80010b4 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001248:	2051      	movs	r0, #81	; 0x51
 800124a:	f7ff ff33 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800124e:	2081      	movs	r0, #129	; 0x81
 8001250:	f7ff ff30 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001254:	20ff      	movs	r0, #255	; 0xff
 8001256:	f7ff ff2d 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800125a:	20a1      	movs	r0, #161	; 0xa1
 800125c:	f7ff ff2a 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff27 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001266:	20a2      	movs	r0, #162	; 0xa2
 8001268:	f7ff ff24 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff21 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001272:	20a8      	movs	r0, #168	; 0xa8
 8001274:	f7ff ff1e 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001278:	207f      	movs	r0, #127	; 0x7f
 800127a:	f7ff ff1b 	bl	80010b4 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 800127e:	23a0      	movs	r3, #160	; 0xa0
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	430a      	orrs	r2, r1
 800128c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	23a0      	movs	r3, #160	; 0xa0
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	430a      	orrs	r2, r1
 800129c:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20005328 	.word	0x20005328

080012a8 <weoClear>:
	void weoClear(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
		uint16_t i;
		for (i = 0; i < 8192; i++) {
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <weoClear+0x1e>
			USART_AS_SPI_sendDAT(BACKGROUND_COLOR);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff ff42 	bl	8001140 <USART_AS_SPI_sendDAT>
		for (i = 0; i < 8192; i++) {
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	1dbb      	adds	r3, r7, #6
 80012c2:	3201      	adds	r2, #1
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f1      	bcc.n	80012b6 <weoClear+0xe>
		}
	}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <weoDrawRectangleFilled>:
			}
		}
	}
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0005      	movs	r5, r0
 80012e4:	000c      	movs	r4, r1
 80012e6:	0010      	movs	r0, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	1c2a      	adds	r2, r5, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	1c22      	adds	r2, r4, #0
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	1d7b      	adds	r3, r7, #5
 80012f8:	1c02      	adds	r2, r0, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	1c0a      	adds	r2, r1, #0
 8001300:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001302:	200e      	movs	r0, #14
 8001304:	183b      	adds	r3, r7, r0
 8001306:	2200      	movs	r2, #0
 8001308:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <weoDrawRectangleFilled+0x3a>
 8001314:	e155      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
 8001316:	1dbb      	adds	r3, r7, #6
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	da00      	bge.n	8001322 <weoDrawRectangleFilled+0x46>
 8001320:	e14f      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001322:	1d7b      	adds	r3, r7, #5
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	da00      	bge.n	800132e <weoDrawRectangleFilled+0x52>
 800132c:	e149      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	da00      	bge.n	800133a <weoDrawRectangleFilled+0x5e>
 8001338:	e143      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
				return;
			}

			start_x_New=start_x;
 800133a:	230d      	movs	r3, #13
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001344:	230c      	movs	r3, #12
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	1d3a      	adds	r2, r7, #4
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	217f      	movs	r1, #127	; 0x7f
 800134e:	1a8a      	subs	r2, r1, r2
 8001350:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001352:	230b      	movs	r3, #11
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	1d7a      	adds	r2, r7, #5
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 800135c:	230a      	movs	r3, #10
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	1dba      	adds	r2, r7, #6
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	217f      	movs	r1, #127	; 0x7f
 8001366:	1a8a      	subs	r2, r1, r2
 8001368:	701a      	strb	r2, [r3, #0]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 800136a:	183b      	adds	r3, r7, r0
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	e054      	b.n	800141c <weoDrawRectangleFilled+0x140>
			i++) {
//			for (i = 0; i < 8192;i++) {
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 8001372:	200e      	movs	r0, #14
 8001374:	183b      	adds	r3, r7, r0
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	b25b      	sxtb	r3, r3
 8001382:	2255      	movs	r2, #85	; 0x55
 8001384:	4393      	bics	r3, r2
 8001386:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001388:	183b      	adds	r3, r7, r0
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800138e:	18cb      	adds	r3, r1, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	105b      	asrs	r3, r3, #1
 8001394:	b25b      	sxtb	r3, r3
 8001396:	2155      	movs	r1, #85	; 0x55
 8001398:	400b      	ands	r3, r1
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a6:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 80013a8:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80013aa:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013ac:	183b      	adds	r3, r7, r0
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b2:	18d3      	adds	r3, r2, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	2233      	movs	r2, #51	; 0x33
 80013bc:	4393      	bics	r3, r2
 80013be:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013c0:	183b      	adds	r3, r7, r0
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013c6:	18cb      	adds	r3, r1, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	109b      	asrs	r3, r3, #2
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	2133      	movs	r1, #51	; 0x33
 80013d0:	400b      	ands	r3, r1
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013de:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013e0:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013e2:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013e4:	183b      	adds	r3, r7, r0
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ea:	18d3      	adds	r3, r2, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	011b      	lsls	r3, r3, #4
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	183b      	adds	r3, r7, r0
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f8:	18cb      	adds	r3, r1, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 8001406:	183b      	adds	r3, r7, r0
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140c:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xF0) >> 4;
 800140e:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 8001410:	701a      	strb	r2, [r3, #0]
			i++) {
 8001412:	183b      	adds	r3, r7, r0
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	183b      	adds	r3, r7, r0
 8001418:	3201      	adds	r2, #1
 800141a:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 800141c:	240e      	movs	r4, #14
 800141e:	193b      	adds	r3, r7, r4
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	250b      	movs	r5, #11
 8001424:	197b      	adds	r3, r7, r5
 8001426:	7819      	ldrb	r1, [r3, #0]
 8001428:	260d      	movs	r6, #13
 800142a:	19bb      	adds	r3, r7, r6
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	3301      	adds	r3, #1
 8001432:	210a      	movs	r1, #10
 8001434:	1879      	adds	r1, r7, r1
 8001436:	7809      	ldrb	r1, [r1, #0]
 8001438:	0849      	lsrs	r1, r1, #1
 800143a:	b2c9      	uxtb	r1, r1
 800143c:	0008      	movs	r0, r1
 800143e:	210c      	movs	r1, #12
 8001440:	1879      	adds	r1, r7, r1
 8001442:	7809      	ldrb	r1, [r1, #0]
 8001444:	0849      	lsrs	r1, r1, #1
 8001446:	b2c9      	uxtb	r1, r1
 8001448:	1a41      	subs	r1, r0, r1
 800144a:	3101      	adds	r1, #1
 800144c:	434b      	muls	r3, r1
 800144e:	429a      	cmp	r2, r3
 8001450:	db8f      	blt.n	8001372 <weoDrawRectangleFilled+0x96>
			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	2140      	movs	r1, #64	; 0x40
 800145e:	438a      	bics	r2, r1
 8001460:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	438a      	bics	r2, r1
 8001470:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001472:	2075      	movs	r0, #117	; 0x75
 8001474:	f7ff fe1e 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001478:	19bb      	adds	r3, r7, r6
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fe19 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001482:	197b      	adds	r3, r7, r5
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fe14 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800148c:	2015      	movs	r0, #21
 800148e:	f7ff fe11 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001492:	230c      	movs	r3, #12
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fe09 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80014a2:	210a      	movs	r1, #10
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fe01 	bl	80010b4 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	23a0      	movs	r3, #160	; 0xa0
 80014ba:	05db      	lsls	r3, r3, #23
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	430a      	orrs	r2, r1
 80014c0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014c2:	23a0      	movs	r3, #160	; 0xa0
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	430a      	orrs	r2, r1
 80014d0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014d2:	23a0      	movs	r3, #160	; 0xa0
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	23a0      	movs	r3, #160	; 0xa0
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	438a      	bics	r2, r1
 80014e0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014e2:	23a0      	movs	r3, #160	; 0xa0
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	23a0      	movs	r3, #160	; 0xa0
 80014ea:	05db      	lsls	r3, r3, #23
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	430a      	orrs	r2, r1
 80014f0:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	e012      	b.n	8001520 <weoDrawRectangleFilled+0x244>
					i++) {
//				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <weoDrawRectangleFilled+0x2f0>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	4013      	ands	r3, r2
 8001504:	d0fa      	beq.n	80014fc <weoDrawRectangleFilled+0x220>
								USART3->TDR = MEM_Buffer[i];
 8001506:	210e      	movs	r1, #14
 8001508:	187b      	adds	r3, r7, r1
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <weoDrawRectangleFilled+0x2f0>)
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
					i++) {
 8001516:	187b      	adds	r3, r7, r1
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	187b      	adds	r3, r7, r1
 800151c:	3201      	adds	r2, #1
 800151e:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001520:	240e      	movs	r4, #14
 8001522:	193b      	adds	r3, r7, r4
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	230b      	movs	r3, #11
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	7819      	ldrb	r1, [r3, #0]
 800152c:	230d      	movs	r3, #13
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	1acb      	subs	r3, r1, r3
 8001534:	3301      	adds	r3, #1
 8001536:	210a      	movs	r1, #10
 8001538:	1879      	adds	r1, r7, r1
 800153a:	7809      	ldrb	r1, [r1, #0]
 800153c:	0849      	lsrs	r1, r1, #1
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	0008      	movs	r0, r1
 8001542:	210c      	movs	r1, #12
 8001544:	1879      	adds	r1, r7, r1
 8001546:	7809      	ldrb	r1, [r1, #0]
 8001548:	0849      	lsrs	r1, r1, #1
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	1a41      	subs	r1, r0, r1
 800154e:	3101      	adds	r1, #1
 8001550:	434b      	muls	r3, r1
 8001552:	429a      	cmp	r2, r3
 8001554:	dbd1      	blt.n	80014fa <weoDrawRectangleFilled+0x21e>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	23a0      	movs	r3, #160	; 0xa0
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	438a      	bics	r2, r1
 8001564:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001566:	23a0      	movs	r3, #160	; 0xa0
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	23a0      	movs	r3, #160	; 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	430a      	orrs	r2, r1
 8001574:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001576:	193b      	adds	r3, r7, r4
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
 800157c:	e005      	b.n	800158a <weoDrawRectangleFilled+0x2ae>
								i++) {
 800157e:	210e      	movs	r1, #14
 8001580:	187b      	adds	r3, r7, r1
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	187b      	adds	r3, r7, r1
 8001586:	3201      	adds	r2, #1
 8001588:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 800158a:	230e      	movs	r3, #14
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	230b      	movs	r3, #11
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	230d      	movs	r3, #13
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	1acb      	subs	r3, r1, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	210a      	movs	r1, #10
 80015a2:	1879      	adds	r1, r7, r1
 80015a4:	7809      	ldrb	r1, [r1, #0]
 80015a6:	0849      	lsrs	r1, r1, #1
 80015a8:	b2c9      	uxtb	r1, r1
 80015aa:	0008      	movs	r0, r1
 80015ac:	210c      	movs	r1, #12
 80015ae:	1879      	adds	r1, r7, r1
 80015b0:	7809      	ldrb	r1, [r1, #0]
 80015b2:	0849      	lsrs	r1, r1, #1
 80015b4:	b2c9      	uxtb	r1, r1
 80015b6:	1a41      	subs	r1, r0, r1
 80015b8:	3101      	adds	r1, #1
 80015ba:	434b      	muls	r3, r1
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbde      	blt.n	800157e <weoDrawRectangleFilled+0x2a2>
 80015c0:	e000      	b.n	80015c4 <weoDrawRectangleFilled+0x2e8>
				return;
 80015c2:	46c0      	nop			; (mov r8, r8)
						}
		}
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b005      	add	sp, #20
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40004800 	.word	0x40004800

080015d0 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80015d8:	210f      	movs	r1, #15
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	22ff      	movs	r2, #255	; 0xff
 80015de:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80015e0:	230d      	movs	r3, #13
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	801a      	strh	r2, [r3, #0]
			ans[0] = cmd[0]|0x80;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	4252      	negs	r2, r2
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4bde      	ldr	r3, [pc, #888]	; (8001978 <answer2CPU+0x3a8>)
 8001600:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d800      	bhi.n	800160c <answer2CPU+0x3c>
 800160a:	e14c      	b.n	80018a6 <answer2CPU+0x2d6>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b15      	cmp	r3, #21
 8001612:	d900      	bls.n	8001616 <answer2CPU+0x46>
 8001614:	e147      	b.n	80018a6 <answer2CPU+0x2d6>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	d105      	bne.n	800162e <answer2CPU+0x5e>
					keyboard &= 0b11111110;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	187a      	adds	r2, r7, r1
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d106      	bne.n	8001648 <answer2CPU+0x78>
					keyboard &= 0b11111101;
 800163a:	220f      	movs	r2, #15
 800163c:	18bb      	adds	r3, r7, r2
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	2102      	movs	r1, #2
 8001644:	438a      	bics	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2210      	movs	r2, #16
 8001650:	4013      	ands	r3, r2
 8001652:	d106      	bne.n	8001662 <answer2CPU+0x92>
					keyboard &= 0b11111011;
 8001654:	220f      	movs	r2, #15
 8001656:	18bb      	adds	r3, r7, r2
 8001658:	18ba      	adds	r2, r7, r2
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	2104      	movs	r1, #4
 800165e:	438a      	bics	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	019b      	lsls	r3, r3, #6
 800166c:	4013      	ands	r3, r2
 800166e:	d106      	bne.n	800167e <answer2CPU+0xae>
					keyboard &= 0b11110111;
 8001670:	220f      	movs	r2, #15
 8001672:	18bb      	adds	r3, r7, r2
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	2108      	movs	r1, #8
 800167a:	438a      	bics	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	4013      	ands	r3, r2
 800168a:	d106      	bne.n	800169a <answer2CPU+0xca>
					keyboard &= 0b11101111;
 800168c:	220f      	movs	r2, #15
 800168e:	18bb      	adds	r3, r7, r2
 8001690:	18ba      	adds	r2, r7, r2
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	2110      	movs	r1, #16
 8001696:	438a      	bics	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 800169a:	210f      	movs	r1, #15
 800169c:	187b      	adds	r3, r7, r1
 800169e:	187a      	adds	r2, r7, r1
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	43d2      	mvns	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80016a6:	2009      	movs	r0, #9
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2204      	movs	r2, #4
 80016ac:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80016ae:	183b      	adds	r3, r7, r0
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b02      	subs	r3, #2
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4baf      	ldr	r3, [pc, #700]	; (8001978 <answer2CPU+0x3a8>)
 80016ba:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4bad      	ldr	r3, [pc, #692]	; (8001978 <answer2CPU+0x3a8>)
 80016c4:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80016c6:	230e      	movs	r3, #14
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e011      	b.n	80016f4 <answer2CPU+0x124>
					myCS = myCS + ans[i];
 80016d0:	200e      	movs	r0, #14
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4ba8      	ldr	r3, [pc, #672]	; (8001978 <answer2CPU+0x3a8>)
 80016d8:	0052      	lsls	r2, r2, #1
 80016da:	5ad3      	ldrh	r3, [r2, r3]
 80016dc:	b2d9      	uxtb	r1, r3
 80016de:	220d      	movs	r2, #13
 80016e0:	18bb      	adds	r3, r7, r2
 80016e2:	18ba      	adds	r2, r7, r2
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	188a      	adds	r2, r1, r2
 80016e8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	3201      	adds	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	200e      	movs	r0, #14
 80016f6:	183b      	adds	r3, r7, r0
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	2309      	movs	r3, #9
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	429a      	cmp	r2, r3
 8001704:	dbe4      	blt.n	80016d0 <answer2CPU+0x100>
				}
				myCS = 0 - myCS;
 8001706:	210d      	movs	r1, #13
 8001708:	187b      	adds	r3, r7, r1
 800170a:	187a      	adds	r2, r7, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	4252      	negs	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b97      	ldr	r3, [pc, #604]	; (8001978 <answer2CPU+0x3a8>)
 800171a:	80da      	strh	r2, [r3, #6]
				i=0;
 800171c:	183b      	adds	r3, r7, r0
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	4b95      	ldr	r3, [pc, #596]	; (800197c <answer2CPU+0x3ac>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	4013      	ands	r3, r2
 800172c:	d0fa      	beq.n	8001724 <answer2CPU+0x154>
				USART2->TDR = ans[0]|0x0100;
 800172e:	4b92      	ldr	r3, [pc, #584]	; (8001978 <answer2CPU+0x3a8>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	0052      	lsls	r2, r2, #1
 8001736:	4313      	orrs	r3, r2
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b90      	ldr	r3, [pc, #576]	; (800197c <answer2CPU+0x3ac>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800173e:	230e      	movs	r3, #14
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e013      	b.n	8001770 <answer2CPU+0x1a0>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	4b8c      	ldr	r3, [pc, #560]	; (800197c <answer2CPU+0x3ac>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	4013      	ands	r3, r2
 8001752:	d0fa      	beq.n	800174a <answer2CPU+0x17a>
				    USART2->TDR = (uint8_t)ans[i];
 8001754:	210e      	movs	r1, #14
 8001756:	187b      	adds	r3, r7, r1
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	4b87      	ldr	r3, [pc, #540]	; (8001978 <answer2CPU+0x3a8>)
 800175c:	0052      	lsls	r2, r2, #1
 800175e:	5ad3      	ldrh	r3, [r2, r3]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b86      	ldr	r3, [pc, #536]	; (800197c <answer2CPU+0x3ac>)
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001766:	187b      	adds	r3, r7, r1
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	187b      	adds	r3, r7, r1
 800176c:	3201      	adds	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	230e      	movs	r3, #14
 8001772:	18fa      	adds	r2, r7, r3
 8001774:	2309      	movs	r3, #9
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3e3      	bcc.n	8001748 <answer2CPU+0x178>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b11      	cmp	r3, #17
 8001786:	d109      	bne.n	800179c <answer2CPU+0x1cc>
					picNum = cmd[2];
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	789a      	ldrb	r2, [r3, #2]
 800178c:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <answer2CPU+0x3b0>)
 800178e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001790:	4b7c      	ldr	r3, [pc, #496]	; (8001984 <answer2CPU+0x3b4>)
 8001792:	2211      	movs	r2, #17
 8001794:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001796:	4b7c      	ldr	r3, [pc, #496]	; (8001988 <answer2CPU+0x3b8>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d115      	bne.n	80017d0 <answer2CPU+0x200>
					imX = cmd[2];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3302      	adds	r3, #2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	001a      	movs	r2, r3
 80017ac:	4b77      	ldr	r3, [pc, #476]	; (800198c <answer2CPU+0x3bc>)
 80017ae:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3303      	adds	r3, #3
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	001a      	movs	r2, r3
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <answer2CPU+0x3c0>)
 80017ba:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	791a      	ldrb	r2, [r3, #4]
 80017c0:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <answer2CPU+0x3b0>)
 80017c2:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80017c4:	4b6f      	ldr	r3, [pc, #444]	; (8001984 <answer2CPU+0x3b4>)
 80017c6:	2212      	movs	r2, #18
 80017c8:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <answer2CPU+0x3b8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b13      	cmp	r3, #19
 80017d6:	d134      	bne.n	8001842 <answer2CPU+0x272>
					imX = cmd[2];
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	001a      	movs	r2, r3
 80017e0:	4b6a      	ldr	r3, [pc, #424]	; (800198c <answer2CPU+0x3bc>)
 80017e2:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3303      	adds	r3, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	001a      	movs	r2, r3
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <answer2CPU+0x3c0>)
 80017ee:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3301      	adds	r3, #1
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	3b03      	subs	r3, #3
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b66      	ldr	r3, [pc, #408]	; (8001994 <answer2CPU+0x3c4>)
 80017fc:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80017fe:	230e      	movs	r3, #14
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
 8001806:	e00f      	b.n	8001828 <answer2CPU+0x258>
					dataASCII[i] = cmd[i+4];
 8001808:	200e      	movs	r0, #14
 800180a:	183b      	adds	r3, r7, r0
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	3304      	adds	r3, #4
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	18d2      	adds	r2, r2, r3
 8001814:	183b      	adds	r3, r7, r0
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	7811      	ldrb	r1, [r2, #0]
 800181a:	4a5f      	ldr	r2, [pc, #380]	; (8001998 <answer2CPU+0x3c8>)
 800181c:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 800181e:	183b      	adds	r3, r7, r0
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	183b      	adds	r3, r7, r0
 8001824:	3201      	adds	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	4b5a      	ldr	r3, [pc, #360]	; (8001994 <answer2CPU+0x3c4>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	220e      	movs	r2, #14
 800182e:	18ba      	adds	r2, r7, r2
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d3e8      	bcc.n	8001808 <answer2CPU+0x238>
				}
					cmd2Execute=0x13;
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <answer2CPU+0x3b4>)
 8001838:	2213      	movs	r2, #19
 800183a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800183c:	4b52      	ldr	r3, [pc, #328]	; (8001988 <answer2CPU+0x3b8>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b14      	cmp	r3, #20
 8001848:	d109      	bne.n	800185e <answer2CPU+0x28e>
					numSound = cmd[3];
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	78da      	ldrb	r2, [r3, #3]
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <answer2CPU+0x3cc>)
 8001850:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001852:	4b4c      	ldr	r3, [pc, #304]	; (8001984 <answer2CPU+0x3b4>)
 8001854:	2214      	movs	r2, #20
 8001856:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001858:	4b4b      	ldr	r3, [pc, #300]	; (8001988 <answer2CPU+0x3b8>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b15      	cmp	r3, #21
 8001864:	d10d      	bne.n	8001882 <answer2CPU+0x2b2>
					volume = cmd[3];
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	78da      	ldrb	r2, [r3, #3]
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <answer2CPU+0x3d0>)
 800186c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	791a      	ldrb	r2, [r3, #4]
 8001872:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <answer2CPU+0x3d4>)
 8001874:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001876:	4b43      	ldr	r3, [pc, #268]	; (8001984 <answer2CPU+0x3b4>)
 8001878:	2215      	movs	r2, #21
 800187a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800187c:	4b42      	ldr	r3, [pc, #264]	; (8001988 <answer2CPU+0x3b8>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b16      	cmp	r3, #22
 8001888:	d10d      	bne.n	80018a6 <answer2CPU+0x2d6>
					volume = cmd[3];
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	78da      	ldrb	r2, [r3, #3]
 800188e:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <answer2CPU+0x3d0>)
 8001890:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	791a      	ldrb	r2, [r3, #4]
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <answer2CPU+0x3d4>)
 8001898:	701a      	strb	r2, [r3, #0]
//					cmd2Execute=0x16;
					cmd[0]=0xFF;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80018a0:	4b39      	ldr	r3, [pc, #228]	; (8001988 <answer2CPU+0x3b8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d000      	beq.n	80018b0 <answer2CPU+0x2e0>
 80018ae:	e09a      	b.n	80019e6 <answer2CPU+0x416>
				myLength = 0x14; //20 bytes length answer
 80018b0:	2109      	movs	r1, #9
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2214      	movs	r2, #20
 80018b6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b02      	subs	r3, #2
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <answer2CPU+0x3a8>)
 80018c4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80018c6:	230e      	movs	r3, #14
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e010      	b.n	80018f2 <answer2CPU+0x322>
					ans[i + 2] = PCB_type[i];
 80018d0:	200e      	movs	r0, #14
 80018d2:	183b      	adds	r3, r7, r0
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <answer2CPU+0x3d8>)
 80018d8:	5cd1      	ldrb	r1, [r2, r3]
 80018da:	183b      	adds	r3, r7, r0
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	1c9a      	adds	r2, r3, #2
 80018e0:	b289      	uxth	r1, r1
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <answer2CPU+0x3a8>)
 80018e4:	0052      	lsls	r2, r2, #1
 80018e6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80018e8:	183b      	adds	r3, r7, r0
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	183b      	adds	r3, r7, r0
 80018ee:	3201      	adds	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	220e      	movs	r2, #14
 80018f4:	18bb      	adds	r3, r7, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d9e9      	bls.n	80018d0 <answer2CPU+0x300>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80018fc:	18bb      	adds	r3, r7, r2
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	e011      	b.n	8001928 <answer2CPU+0x358>
					myCS = myCS + ans[i];
 8001904:	200e      	movs	r0, #14
 8001906:	183b      	adds	r3, r7, r0
 8001908:	781a      	ldrb	r2, [r3, #0]
 800190a:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <answer2CPU+0x3a8>)
 800190c:	0052      	lsls	r2, r2, #1
 800190e:	5ad3      	ldrh	r3, [r2, r3]
 8001910:	b2d9      	uxtb	r1, r3
 8001912:	220d      	movs	r2, #13
 8001914:	18bb      	adds	r3, r7, r2
 8001916:	18ba      	adds	r2, r7, r2
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	188a      	adds	r2, r1, r2
 800191c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 800191e:	183b      	adds	r3, r7, r0
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	183b      	adds	r3, r7, r0
 8001924:	3201      	adds	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
 8001928:	230e      	movs	r3, #14
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	2009      	movs	r0, #9
 8001930:	183b      	adds	r3, r7, r0
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	429a      	cmp	r2, r3
 8001938:	dbe4      	blt.n	8001904 <answer2CPU+0x334>
				}
				myCS = 0 - myCS;
 800193a:	210d      	movs	r1, #13
 800193c:	187b      	adds	r3, r7, r1
 800193e:	187a      	adds	r2, r7, r1
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	4252      	negs	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001946:	183b      	adds	r3, r7, r0
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	187b      	adds	r3, r7, r1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	b299      	uxth	r1, r3
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <answer2CPU+0x3a8>)
 8001954:	0052      	lsls	r2, r2, #1
 8001956:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <answer2CPU+0x3ac>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	4013      	ands	r3, r2
 8001962:	d0fa      	beq.n	800195a <answer2CPU+0x38a>
				USART2->TDR = ans[0]|0x0100;
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <answer2CPU+0x3a8>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0052      	lsls	r2, r2, #1
 800196c:	4313      	orrs	r3, r2
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b02      	ldr	r3, [pc, #8]	; (800197c <answer2CPU+0x3ac>)
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001974:	e02f      	b.n	80019d6 <answer2CPU+0x406>
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	200053b8 	.word	0x200053b8
 800197c:	40004400 	.word	0x40004400
 8001980:	20005375 	.word	0x20005375
 8001984:	20005376 	.word	0x20005376
 8001988:	200053cc 	.word	0x200053cc
 800198c:	2000527c 	.word	0x2000527c
 8001990:	200052b4 	.word	0x200052b4
 8001994:	200053b5 	.word	0x200053b5
 8001998:	20005194 	.word	0x20005194
 800199c:	20005434 	.word	0x20005434
 80019a0:	2000527a 	.word	0x2000527a
 80019a4:	20005318 	.word	0x20005318
 80019a8:	20003100 	.word	0x20003100
				  {
				    i++;
 80019ac:	210e      	movs	r1, #14
 80019ae:	187b      	adds	r3, r7, r1
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	3201      	adds	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	4bbc      	ldr	r3, [pc, #752]	; (8001cac <answer2CPU+0x6dc>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	2280      	movs	r2, #128	; 0x80
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0fa      	beq.n	80019ba <answer2CPU+0x3ea>
				    USART2->TDR = (uint8_t)ans[i];
 80019c4:	230e      	movs	r3, #14
 80019c6:	18fb      	adds	r3, r7, r3
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	4bb9      	ldr	r3, [pc, #740]	; (8001cb0 <answer2CPU+0x6e0>)
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	5ad3      	ldrh	r3, [r2, r3]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4bb6      	ldr	r3, [pc, #728]	; (8001cac <answer2CPU+0x6dc>)
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019d6:	230e      	movs	r3, #14
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4bb4      	ldr	r3, [pc, #720]	; (8001cb0 <answer2CPU+0x6e0>)
 80019de:	0052      	lsls	r2, r2, #1
 80019e0:	5ad3      	ldrh	r3, [r2, r3]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e2      	bne.n	80019ac <answer2CPU+0x3dc>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d000      	beq.n	80019f0 <answer2CPU+0x420>
 80019ee:	e07f      	b.n	8001af0 <answer2CPU+0x520>
				myLength = 0x0B; //19 bytes length answer
 80019f0:	2109      	movs	r1, #9
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	220b      	movs	r2, #11
 80019f6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b02      	subs	r3, #2
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4bab      	ldr	r3, [pc, #684]	; (8001cb0 <answer2CPU+0x6e0>)
 8001a04:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a06:	230e      	movs	r3, #14
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e010      	b.n	8001a32 <answer2CPU+0x462>
					ans[i + 2] = PCB_rev[i];
 8001a10:	200e      	movs	r0, #14
 8001a12:	183b      	adds	r3, r7, r0
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4aa7      	ldr	r2, [pc, #668]	; (8001cb4 <answer2CPU+0x6e4>)
 8001a18:	5cd1      	ldrb	r1, [r2, r3]
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	1c9a      	adds	r2, r3, #2
 8001a20:	b289      	uxth	r1, r1
 8001a22:	4ba3      	ldr	r3, [pc, #652]	; (8001cb0 <answer2CPU+0x6e0>)
 8001a24:	0052      	lsls	r2, r2, #1
 8001a26:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a28:	183b      	adds	r3, r7, r0
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	3201      	adds	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	220e      	movs	r2, #14
 8001a34:	18bb      	adds	r3, r7, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d9e9      	bls.n	8001a10 <answer2CPU+0x440>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a3c:	18bb      	adds	r3, r7, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e011      	b.n	8001a68 <answer2CPU+0x498>
					myCS = myCS + ans[i];
 8001a44:	200e      	movs	r0, #14
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	4b99      	ldr	r3, [pc, #612]	; (8001cb0 <answer2CPU+0x6e0>)
 8001a4c:	0052      	lsls	r2, r2, #1
 8001a4e:	5ad3      	ldrh	r3, [r2, r3]
 8001a50:	b2d9      	uxtb	r1, r3
 8001a52:	220d      	movs	r2, #13
 8001a54:	18bb      	adds	r3, r7, r2
 8001a56:	18ba      	adds	r2, r7, r2
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	188a      	adds	r2, r1, r2
 8001a5c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	3201      	adds	r2, #1
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	230e      	movs	r3, #14
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	2009      	movs	r0, #9
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbe4      	blt.n	8001a44 <answer2CPU+0x474>
				}
				myCS = 0 - myCS;
 8001a7a:	210d      	movs	r1, #13
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	187a      	adds	r2, r7, r1
 8001a80:	7812      	ldrb	r2, [r2, #0]
 8001a82:	4252      	negs	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	1e5a      	subs	r2, r3, #1
 8001a8c:	187b      	adds	r3, r7, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b299      	uxth	r1, r3
 8001a92:	4b87      	ldr	r3, [pc, #540]	; (8001cb0 <answer2CPU+0x6e0>)
 8001a94:	0052      	lsls	r2, r2, #1
 8001a96:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	4b84      	ldr	r3, [pc, #528]	; (8001cac <answer2CPU+0x6dc>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d0fa      	beq.n	8001a9a <answer2CPU+0x4ca>
				USART2->TDR = ans[0]|0x0100;
 8001aa4:	4b82      	ldr	r3, [pc, #520]	; (8001cb0 <answer2CPU+0x6e0>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0052      	lsls	r2, r2, #1
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <answer2CPU+0x6dc>)
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ab4:	e014      	b.n	8001ae0 <answer2CPU+0x510>
					  {
					    i++;
 8001ab6:	210e      	movs	r1, #14
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	781a      	ldrb	r2, [r3, #0]
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	3201      	adds	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	4b79      	ldr	r3, [pc, #484]	; (8001cac <answer2CPU+0x6dc>)
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0fa      	beq.n	8001ac4 <answer2CPU+0x4f4>
					    USART2->TDR = (uint8_t)ans[i];
 8001ace:	230e      	movs	r3, #14
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <answer2CPU+0x6e0>)
 8001ad6:	0052      	lsls	r2, r2, #1
 8001ad8:	5ad3      	ldrh	r3, [r2, r3]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b73      	ldr	r3, [pc, #460]	; (8001cac <answer2CPU+0x6dc>)
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ae0:	230e      	movs	r3, #14
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <answer2CPU+0x6e0>)
 8001ae8:	0052      	lsls	r2, r2, #1
 8001aea:	5ad3      	ldrh	r3, [r2, r3]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e2      	bne.n	8001ab6 <answer2CPU+0x4e6>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d000      	beq.n	8001afa <answer2CPU+0x52a>
 8001af8:	e07f      	b.n	8001bfa <answer2CPU+0x62a>
				myLength = 0x13; //19 bytes length answer
 8001afa:	2109      	movs	r1, #9
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2213      	movs	r2, #19
 8001b00:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <answer2CPU+0x6e0>)
 8001b0e:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b10:	230e      	movs	r3, #14
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	e010      	b.n	8001b3c <answer2CPU+0x56c>
					ans[i + 2] = EmitterSN[i];
 8001b1a:	200e      	movs	r0, #14
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4a65      	ldr	r2, [pc, #404]	; (8001cb8 <answer2CPU+0x6e8>)
 8001b22:	5cd1      	ldrb	r1, [r2, r3]
 8001b24:	183b      	adds	r3, r7, r0
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	1c9a      	adds	r2, r3, #2
 8001b2a:	b289      	uxth	r1, r1
 8001b2c:	4b60      	ldr	r3, [pc, #384]	; (8001cb0 <answer2CPU+0x6e0>)
 8001b2e:	0052      	lsls	r2, r2, #1
 8001b30:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	183b      	adds	r3, r7, r0
 8001b38:	3201      	adds	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	220e      	movs	r2, #14
 8001b3e:	18bb      	adds	r3, r7, r2
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d9e9      	bls.n	8001b1a <answer2CPU+0x54a>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b46:	18bb      	adds	r3, r7, r2
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	e011      	b.n	8001b72 <answer2CPU+0x5a2>
					myCS = myCS + ans[i];
 8001b4e:	200e      	movs	r0, #14
 8001b50:	183b      	adds	r3, r7, r0
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	4b56      	ldr	r3, [pc, #344]	; (8001cb0 <answer2CPU+0x6e0>)
 8001b56:	0052      	lsls	r2, r2, #1
 8001b58:	5ad3      	ldrh	r3, [r2, r3]
 8001b5a:	b2d9      	uxtb	r1, r3
 8001b5c:	220d      	movs	r2, #13
 8001b5e:	18bb      	adds	r3, r7, r2
 8001b60:	18ba      	adds	r2, r7, r2
 8001b62:	7812      	ldrb	r2, [r2, #0]
 8001b64:	188a      	adds	r2, r1, r2
 8001b66:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b68:	183b      	adds	r3, r7, r0
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	183b      	adds	r3, r7, r0
 8001b6e:	3201      	adds	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	230e      	movs	r3, #14
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	2009      	movs	r0, #9
 8001b7a:	183b      	adds	r3, r7, r0
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbe4      	blt.n	8001b4e <answer2CPU+0x57e>
				}
				myCS = 0 - myCS;
 8001b84:	210d      	movs	r1, #13
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	187a      	adds	r2, r7, r1
 8001b8a:	7812      	ldrb	r2, [r2, #0]
 8001b8c:	4252      	negs	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b90:	183b      	adds	r3, r7, r0
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	1e5a      	subs	r2, r3, #1
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <answer2CPU+0x6e0>)
 8001b9e:	0052      	lsls	r2, r2, #1
 8001ba0:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <answer2CPU+0x6dc>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	4013      	ands	r3, r2
 8001bac:	d0fa      	beq.n	8001ba4 <answer2CPU+0x5d4>
				USART2->TDR = ans[0]|0x0100;
 8001bae:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <answer2CPU+0x6e0>)
 8001bb0:	881b      	ldrh	r3, [r3, #0]
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	0052      	lsls	r2, r2, #1
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <answer2CPU+0x6dc>)
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001bbe:	e014      	b.n	8001bea <answer2CPU+0x61a>
				  {
				    i++;
 8001bc0:	210e      	movs	r1, #14
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	3201      	adds	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <answer2CPU+0x6dc>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0fa      	beq.n	8001bce <answer2CPU+0x5fe>
				    	USART2->TDR = (uint8_t)ans[i];
 8001bd8:	230e      	movs	r3, #14
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <answer2CPU+0x6e0>)
 8001be0:	0052      	lsls	r2, r2, #1
 8001be2:	5ad3      	ldrh	r3, [r2, r3]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <answer2CPU+0x6dc>)
 8001be8:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001bea:	230e      	movs	r3, #14
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	781a      	ldrb	r2, [r3, #0]
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <answer2CPU+0x6e0>)
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	5ad3      	ldrh	r3, [r2, r3]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e2      	bne.n	8001bc0 <answer2CPU+0x5f0>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d000      	beq.n	8001c04 <answer2CPU+0x634>
 8001c02:	e07a      	b.n	8001cfa <answer2CPU+0x72a>
				myLength = 0x04; //4 bytes length answer
 8001c04:	2109      	movs	r1, #9
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	2204      	movs	r2, #4
 8001c0a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b02      	subs	r3, #2
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <answer2CPU+0x6e0>)
 8001c18:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <answer2CPU+0x6ec>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <answer2CPU+0x6e0>)
 8001c22:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c24:	230d      	movs	r3, #13
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <answer2CPU+0x6e0>)
 8001c2e:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c30:	230e      	movs	r3, #14
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e011      	b.n	8001c5e <answer2CPU+0x68e>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c3a:	200e      	movs	r0, #14
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <answer2CPU+0x6e0>)
 8001c42:	0052      	lsls	r2, r2, #1
 8001c44:	5ad3      	ldrh	r3, [r2, r3]
 8001c46:	b2d9      	uxtb	r1, r3
 8001c48:	220d      	movs	r2, #13
 8001c4a:	18bb      	adds	r3, r7, r2
 8001c4c:	18ba      	adds	r2, r7, r2
 8001c4e:	7812      	ldrb	r2, [r2, #0]
 8001c50:	188a      	adds	r2, r1, r2
 8001c52:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	183b      	adds	r3, r7, r0
 8001c5a:	3201      	adds	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	230e      	movs	r3, #14
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	2009      	movs	r0, #9
 8001c66:	183b      	adds	r3, r7, r0
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbe4      	blt.n	8001c3a <answer2CPU+0x66a>
				}
				myCS = 0 - myCS;
 8001c70:	210d      	movs	r1, #13
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	187a      	adds	r2, r7, r1
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	4252      	negs	r2, r2
 8001c7a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c7c:	183b      	adds	r3, r7, r0
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b299      	uxth	r1, r3
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <answer2CPU+0x6e0>)
 8001c8a:	0052      	lsls	r2, r2, #1
 8001c8c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <answer2CPU+0x6dc>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2280      	movs	r2, #128	; 0x80
 8001c96:	4013      	ands	r3, r2
 8001c98:	d0fa      	beq.n	8001c90 <answer2CPU+0x6c0>
					USART2->TDR = ans[0]|0x0100;
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <answer2CPU+0x6e0>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	0052      	lsls	r2, r2, #1
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b01      	ldr	r3, [pc, #4]	; (8001cac <answer2CPU+0x6dc>)
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001caa:	e01e      	b.n	8001cea <answer2CPU+0x71a>
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	200053b8 	.word	0x200053b8
 8001cb4:	20003114 	.word	0x20003114
 8001cb8:	20003120 	.word	0x20003120
 8001cbc:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001cc0:	210e      	movs	r1, #14
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	3201      	adds	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	4b4e      	ldr	r3, [pc, #312]	; (8001e08 <answer2CPU+0x838>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0fa      	beq.n	8001cce <answer2CPU+0x6fe>
						     USART2->TDR = (uint8_t)ans[i];
 8001cd8:	230e      	movs	r3, #14
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <answer2CPU+0x83c>)
 8001ce0:	0052      	lsls	r2, r2, #1
 8001ce2:	5ad3      	ldrh	r3, [r2, r3]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <answer2CPU+0x838>)
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001cea:	230e      	movs	r3, #14
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <answer2CPU+0x83c>)
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	5ad3      	ldrh	r3, [r2, r3]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e2      	bne.n	8001cc0 <answer2CPU+0x6f0>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d000      	beq.n	8001d04 <answer2CPU+0x734>
 8001d02:	e076      	b.n	8001df2 <answer2CPU+0x822>
				myLength = 0x04; //4 bytes length answer
 8001d04:	2109      	movs	r1, #9
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b02      	subs	r3, #2
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <answer2CPU+0x83c>)
 8001d18:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	001a      	movs	r2, r3
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <answer2CPU+0x840>)
 8001d24:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <answer2CPU+0x844>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <answer2CPU+0x83c>)
 8001d2e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d30:	230d      	movs	r3, #13
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <answer2CPU+0x83c>)
 8001d3a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d3c:	230e      	movs	r3, #14
 8001d3e:	18fb      	adds	r3, r7, r3
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e011      	b.n	8001d6a <answer2CPU+0x79a>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d46:	200e      	movs	r0, #14
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <answer2CPU+0x83c>)
 8001d4e:	0052      	lsls	r2, r2, #1
 8001d50:	5ad3      	ldrh	r3, [r2, r3]
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	220d      	movs	r2, #13
 8001d56:	18bb      	adds	r3, r7, r2
 8001d58:	18ba      	adds	r2, r7, r2
 8001d5a:	7812      	ldrb	r2, [r2, #0]
 8001d5c:	188a      	adds	r2, r1, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	183b      	adds	r3, r7, r0
 8001d66:	3201      	adds	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	230e      	movs	r3, #14
 8001d6c:	18fb      	adds	r3, r7, r3
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	2009      	movs	r0, #9
 8001d72:	183b      	adds	r3, r7, r0
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	dbe4      	blt.n	8001d46 <answer2CPU+0x776>
				}
				myCS = 0 - myCS;
 8001d7c:	210d      	movs	r1, #13
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	187a      	adds	r2, r7, r1
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	4252      	negs	r2, r2
 8001d86:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b299      	uxth	r1, r3
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <answer2CPU+0x83c>)
 8001d96:	0052      	lsls	r2, r2, #1
 8001d98:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <answer2CPU+0x838>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2280      	movs	r2, #128	; 0x80
 8001da2:	4013      	ands	r3, r2
 8001da4:	d0fa      	beq.n	8001d9c <answer2CPU+0x7cc>
				USART2->TDR = ans[0]|0x0100;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <answer2CPU+0x83c>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	0052      	lsls	r2, r2, #1
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <answer2CPU+0x838>)
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001db6:	e014      	b.n	8001de2 <answer2CPU+0x812>
				{
				  i++;
 8001db8:	210e      	movs	r1, #14
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	3201      	adds	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <answer2CPU+0x838>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d0fa      	beq.n	8001dc6 <answer2CPU+0x7f6>
				  USART2->TDR = (uint8_t)ans[i];
 8001dd0:	230e      	movs	r3, #14
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <answer2CPU+0x83c>)
 8001dd8:	0052      	lsls	r2, r2, #1
 8001dda:	5ad3      	ldrh	r3, [r2, r3]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <answer2CPU+0x838>)
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001de2:	230e      	movs	r3, #14
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <answer2CPU+0x83c>)
 8001dea:	0052      	lsls	r2, r2, #1
 8001dec:	5ad3      	ldrh	r3, [r2, r3]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1e2      	bne.n	8001db8 <answer2CPU+0x7e8>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <answer2CPU+0x838>)
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <answer2CPU+0x838>)
 8001df8:	2108      	movs	r1, #8
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	621a      	str	r2, [r3, #32]
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b004      	add	sp, #16
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40004400 	.word	0x40004400
 8001e0c:	200053b8 	.word	0x200053b8
 8001e10:	2000531c 	.word	0x2000531c
 8001e14:	2000527b 	.word	0x2000527b

08001e18 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f001 f82a 	bl	8002e78 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e2a:	4928      	ldr	r1, [pc, #160]	; (8001ecc <MEM_Reset+0xb4>)
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001e30:	1dfb      	adds	r3, r7, #7
 8001e32:	2266      	movs	r2, #102	; 0x66
 8001e34:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e36:	1df9      	adds	r1, r7, #7
 8001e38:	4825      	ldr	r0, [pc, #148]	; (8001ed0 <MEM_Reset+0xb8>)
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f004 facd 	bl	80063dc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0209      	lsls	r1, r1, #8
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001e50:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e52:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e54:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001e56:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e58:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e5a:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e62:	491a      	ldr	r1, [pc, #104]	; (8001ecc <MEM_Reset+0xb4>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001e68:	1dfb      	adds	r3, r7, #7
 8001e6a:	2299      	movs	r2, #153	; 0x99
 8001e6c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001e6e:	1df9      	adds	r1, r7, #7
 8001e70:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <MEM_Reset+0xb8>)
 8001e72:	2305      	movs	r3, #5
 8001e74:	2201      	movs	r2, #1
 8001e76:	f004 fab1 	bl	80063dc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0209      	lsls	r1, r1, #8
 8001e84:	430a      	orrs	r2, r1
 8001e86:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f000 fff5 	bl	8002e78 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	22b7      	movs	r2, #183	; 0xb7
 8001e92:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MEM_Reset+0xb0>)
 8001e9a:	490c      	ldr	r1, [pc, #48]	; (8001ecc <MEM_Reset+0xb4>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001ea0:	1df9      	adds	r1, r7, #7
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <MEM_Reset+0xb8>)
 8001ea4:	2305      	movs	r3, #5
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f004 fa98 	bl	80063dc <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MEM_Reset+0xb0>)
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <MEM_Reset+0xb0>)
 8001eb2:	2180      	movs	r1, #128	; 0x80
 8001eb4:	0209      	lsls	r1, r1, #8
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 ffdc 	bl	8002e78 <HAL_Delay>
	}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	50000800 	.word	0x50000800
 8001ecc:	ffff7fff 	.word	0xffff7fff
 8001ed0:	200051a4 	.word	0x200051a4

08001ed4 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	4c46      	ldr	r4, [pc, #280]	; (8001ff0 <showFullScreen+0x11c>)
 8001ed8:	44a5      	add	sp, r4
 8001eda:	af02      	add	r7, sp, #8
 8001edc:	0002      	movs	r2, r0
 8001ede:	4b45      	ldr	r3, [pc, #276]	; (8001ff4 <showFullScreen+0x120>)
 8001ee0:	4945      	ldr	r1, [pc, #276]	; (8001ff8 <showFullScreen+0x124>)
 8001ee2:	468c      	mov	ip, r1
 8001ee4:	44bc      	add	ip, r7
 8001ee6:	4463      	add	r3, ip
 8001ee8:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001eea:	4844      	ldr	r0, [pc, #272]	; (8001ffc <showFullScreen+0x128>)
 8001eec:	183b      	adds	r3, r7, r0
 8001eee:	2213      	movs	r2, #19
 8001ef0:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001ef2:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <showFullScreen+0x120>)
 8001ef4:	4a40      	ldr	r2, [pc, #256]	; (8001ff8 <showFullScreen+0x124>)
 8001ef6:	4694      	mov	ip, r2
 8001ef8:	44bc      	add	ip, r7
 8001efa:	4463      	add	r3, ip
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	035b      	lsls	r3, r3, #13
 8001f00:	493f      	ldr	r1, [pc, #252]	; (8002000 <showFullScreen+0x12c>)
 8001f02:	187a      	adds	r2, r7, r1
 8001f04:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b3d      	ldr	r3, [pc, #244]	; (8002004 <showFullScreen+0x130>)
 8001f0e:	4c3a      	ldr	r4, [pc, #232]	; (8001ff8 <showFullScreen+0x124>)
 8001f10:	46a4      	mov	ip, r4
 8001f12:	44bc      	add	ip, r7
 8001f14:	4463      	add	r3, ip
 8001f16:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <showFullScreen+0x130>)
 8001f22:	4c35      	ldr	r4, [pc, #212]	; (8001ff8 <showFullScreen+0x124>)
 8001f24:	46a4      	mov	ip, r4
 8001f26:	44bc      	add	ip, r7
 8001f28:	4463      	add	r3, ip
 8001f2a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0c1b      	lsrs	r3, r3, #16
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <showFullScreen+0x130>)
 8001f36:	4c30      	ldr	r4, [pc, #192]	; (8001ff8 <showFullScreen+0x124>)
 8001f38:	46a4      	mov	ip, r4
 8001f3a:	44bc      	add	ip, r7
 8001f3c:	4463      	add	r3, ip
 8001f3e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e1b      	lsrs	r3, r3, #24
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <showFullScreen+0x130>)
 8001f4a:	492b      	ldr	r1, [pc, #172]	; (8001ff8 <showFullScreen+0x124>)
 8001f4c:	468c      	mov	ip, r1
 8001f4e:	44bc      	add	ip, r7
 8001f50:	4463      	add	r3, ip
 8001f52:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <showFullScreen+0x134>)
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <showFullScreen+0x134>)
 8001f5a:	492c      	ldr	r1, [pc, #176]	; (800200c <showFullScreen+0x138>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001f60:	1839      	adds	r1, r7, r0
 8001f62:	482b      	ldr	r0, [pc, #172]	; (8002010 <showFullScreen+0x13c>)
 8001f64:	2332      	movs	r3, #50	; 0x32
 8001f66:	2201      	movs	r2, #1
 8001f68:	f004 fa38 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001f6c:	2408      	movs	r4, #8
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	1cd9      	adds	r1, r3, #3
 8001f72:	4827      	ldr	r0, [pc, #156]	; (8002010 <showFullScreen+0x13c>)
 8001f74:	2332      	movs	r3, #50	; 0x32
 8001f76:	2201      	movs	r2, #1
 8001f78:	f004 fa30 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001f7c:	193b      	adds	r3, r7, r4
 8001f7e:	1c99      	adds	r1, r3, #2
 8001f80:	4823      	ldr	r0, [pc, #140]	; (8002010 <showFullScreen+0x13c>)
 8001f82:	2332      	movs	r3, #50	; 0x32
 8001f84:	2201      	movs	r2, #1
 8001f86:	f004 fa29 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	1c59      	adds	r1, r3, #1
 8001f8e:	4820      	ldr	r0, [pc, #128]	; (8002010 <showFullScreen+0x13c>)
 8001f90:	2332      	movs	r3, #50	; 0x32
 8001f92:	2201      	movs	r2, #1
 8001f94:	f004 fa22 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001f98:	1939      	adds	r1, r7, r4
 8001f9a:	481d      	ldr	r0, [pc, #116]	; (8002010 <showFullScreen+0x13c>)
 8001f9c:	2332      	movs	r3, #50	; 0x32
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f004 fa1c 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001fa4:	4c1b      	ldr	r4, [pc, #108]	; (8002014 <showFullScreen+0x140>)
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	019a      	lsls	r2, r3, #6
 8001faa:	2510      	movs	r5, #16
 8001fac:	1979      	adds	r1, r7, r5
 8001fae:	4818      	ldr	r0, [pc, #96]	; (8002010 <showFullScreen+0x13c>)
 8001fb0:	0023      	movs	r3, r4
 8001fb2:	f004 fb6b 	bl	800668c <HAL_SPI_Receive>
//		while (!(SPI2->SR & SPI_SR_RXNE)){};
//		for (i=0;i<8192;i++){
//		MEM_Buffer[i] = SPI2->DR;
//		}
		GPIOC->ODR |= 1 << 15; // set cs
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <showFullScreen+0x134>)
 8001fb8:	695a      	ldr	r2, [r3, #20]
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <showFullScreen+0x134>)
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0209      	lsls	r1, r1, #8
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001fc4:	197b      	adds	r3, r7, r5
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	23ff      	movs	r3, #255	; 0xff
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	237f      	movs	r3, #127	; 0x7f
 8001fce:	227f      	movs	r2, #127	; 0x7f
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff f982 	bl	80012dc <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <showFullScreen+0x134>)
 8001fda:	695a      	ldr	r2, [r3, #20]
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <showFullScreen+0x134>)
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	615a      	str	r2, [r3, #20]

	}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <showFullScreen+0x124>)
 8001fec:	449d      	add	sp, r3
 8001fee:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff0:	ffffdfe0 	.word	0xffffdfe0
 8001ff4:	ffffdfef 	.word	0xffffdfef
 8001ff8:	00002018 	.word	0x00002018
 8001ffc:	00002013 	.word	0x00002013
 8002000:	00002014 	.word	0x00002014
 8002004:	ffffdff0 	.word	0xffffdff0
 8002008:	50000800 	.word	0x50000800
 800200c:	ffff7fff 	.word	0xffff7fff
 8002010:	200051a4 	.word	0x200051a4
 8002014:	00001388 	.word	0x00001388

08002018 <showSmallImage>:
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	4c95      	ldr	r4, [pc, #596]	; (8002270 <showSmallImage+0x258>)
 800201c:	44a5      	add	sp, r4
 800201e:	af02      	add	r7, sp, #8
 8002020:	0004      	movs	r4, r0
 8002022:	0008      	movs	r0, r1
 8002024:	0011      	movs	r1, r2
 8002026:	4b93      	ldr	r3, [pc, #588]	; (8002274 <showSmallImage+0x25c>)
 8002028:	4a93      	ldr	r2, [pc, #588]	; (8002278 <showSmallImage+0x260>)
 800202a:	4694      	mov	ip, r2
 800202c:	44bc      	add	ip, r7
 800202e:	4463      	add	r3, ip
 8002030:	1c22      	adds	r2, r4, #0
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	4b91      	ldr	r3, [pc, #580]	; (800227c <showSmallImage+0x264>)
 8002036:	4a90      	ldr	r2, [pc, #576]	; (8002278 <showSmallImage+0x260>)
 8002038:	4694      	mov	ip, r2
 800203a:	44bc      	add	ip, r7
 800203c:	4463      	add	r3, ip
 800203e:	1c02      	adds	r2, r0, #0
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	4b8f      	ldr	r3, [pc, #572]	; (8002280 <showSmallImage+0x268>)
 8002044:	4a8c      	ldr	r2, [pc, #560]	; (8002278 <showSmallImage+0x260>)
 8002046:	4694      	mov	ip, r2
 8002048:	44bc      	add	ip, r7
 800204a:	4463      	add	r3, ip
 800204c:	1c0a      	adds	r2, r1, #0
 800204e:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8002050:	2300      	movs	r3, #0
 8002052:	498c      	ldr	r1, [pc, #560]	; (8002284 <showSmallImage+0x26c>)
 8002054:	187a      	adds	r2, r7, r1
 8002056:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002058:	4d8b      	ldr	r5, [pc, #556]	; (8002288 <showSmallImage+0x270>)
 800205a:	197b      	adds	r3, r7, r5
 800205c:	2213      	movs	r2, #19
 800205e:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		picNum=0x20;
		addr=picNum*0x2000;// the right path is to multiply picNum * image repeat period!
 8002060:	4b84      	ldr	r3, [pc, #528]	; (8002274 <showSmallImage+0x25c>)
 8002062:	4a85      	ldr	r2, [pc, #532]	; (8002278 <showSmallImage+0x260>)
 8002064:	4694      	mov	ip, r2
 8002066:	44bc      	add	ip, r7
 8002068:	4463      	add	r3, ip
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	035b      	lsls	r3, r3, #13
 800206e:	187a      	adds	r2, r7, r1
 8002070:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002072:	187b      	adds	r3, r7, r1
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	4b84      	ldr	r3, [pc, #528]	; (800228c <showSmallImage+0x274>)
 800207a:	487f      	ldr	r0, [pc, #508]	; (8002278 <showSmallImage+0x260>)
 800207c:	4684      	mov	ip, r0
 800207e:	44bc      	add	ip, r7
 8002080:	4463      	add	r3, ip
 8002082:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b7f      	ldr	r3, [pc, #508]	; (800228c <showSmallImage+0x274>)
 800208e:	487a      	ldr	r0, [pc, #488]	; (8002278 <showSmallImage+0x260>)
 8002090:	4684      	mov	ip, r0
 8002092:	44bc      	add	ip, r7
 8002094:	4463      	add	r3, ip
 8002096:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002098:	187b      	adds	r3, r7, r1
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b7a      	ldr	r3, [pc, #488]	; (800228c <showSmallImage+0x274>)
 80020a2:	4875      	ldr	r0, [pc, #468]	; (8002278 <showSmallImage+0x260>)
 80020a4:	4684      	mov	ip, r0
 80020a6:	44bc      	add	ip, r7
 80020a8:	4463      	add	r3, ip
 80020aa:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	0e1b      	lsrs	r3, r3, #24
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	4b75      	ldr	r3, [pc, #468]	; (800228c <showSmallImage+0x274>)
 80020b6:	4970      	ldr	r1, [pc, #448]	; (8002278 <showSmallImage+0x260>)
 80020b8:	468c      	mov	ip, r1
 80020ba:	44bc      	add	ip, r7
 80020bc:	4463      	add	r3, ip
 80020be:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80020c0:	4b73      	ldr	r3, [pc, #460]	; (8002290 <showSmallImage+0x278>)
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	4b72      	ldr	r3, [pc, #456]	; (8002290 <showSmallImage+0x278>)
 80020c6:	4973      	ldr	r1, [pc, #460]	; (8002294 <showSmallImage+0x27c>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80020cc:	1979      	adds	r1, r7, r5
 80020ce:	4872      	ldr	r0, [pc, #456]	; (8002298 <showSmallImage+0x280>)
 80020d0:	2332      	movs	r3, #50	; 0x32
 80020d2:	2201      	movs	r2, #1
 80020d4:	f004 f982 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020d8:	240c      	movs	r4, #12
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	1cd9      	adds	r1, r3, #3
 80020de:	486e      	ldr	r0, [pc, #440]	; (8002298 <showSmallImage+0x280>)
 80020e0:	2332      	movs	r3, #50	; 0x32
 80020e2:	2201      	movs	r2, #1
 80020e4:	f004 f97a 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	1c99      	adds	r1, r3, #2
 80020ec:	486a      	ldr	r0, [pc, #424]	; (8002298 <showSmallImage+0x280>)
 80020ee:	2332      	movs	r3, #50	; 0x32
 80020f0:	2201      	movs	r2, #1
 80020f2:	f004 f973 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80020f6:	193b      	adds	r3, r7, r4
 80020f8:	1c59      	adds	r1, r3, #1
 80020fa:	4867      	ldr	r0, [pc, #412]	; (8002298 <showSmallImage+0x280>)
 80020fc:	2332      	movs	r3, #50	; 0x32
 80020fe:	2201      	movs	r2, #1
 8002100:	f004 f96c 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002104:	1939      	adds	r1, r7, r4
 8002106:	4864      	ldr	r0, [pc, #400]	; (8002298 <showSmallImage+0x280>)
 8002108:	2332      	movs	r3, #50	; 0x32
 800210a:	2201      	movs	r2, #1
 800210c:	f004 f966 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002110:	4b62      	ldr	r3, [pc, #392]	; (800229c <showSmallImage+0x284>)
 8002112:	2210      	movs	r2, #16
 8002114:	18b9      	adds	r1, r7, r2
 8002116:	4860      	ldr	r0, [pc, #384]	; (8002298 <showSmallImage+0x280>)
 8002118:	2202      	movs	r2, #2
 800211a:	f004 fab7 	bl	800668c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <showSmallImage+0x278>)
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <showSmallImage+0x278>)
 8002124:	2180      	movs	r1, #128	; 0x80
 8002126:	0209      	lsls	r1, r1, #8
 8002128:	430a      	orrs	r2, r1
 800212a:	615a      	str	r2, [r3, #20]
//
		width=imInfo[0];
 800212c:	4e5c      	ldr	r6, [pc, #368]	; (80022a0 <showSmallImage+0x288>)
 800212e:	19bb      	adds	r3, r7, r6
 8002130:	4a5c      	ldr	r2, [pc, #368]	; (80022a4 <showSmallImage+0x28c>)
 8002132:	4951      	ldr	r1, [pc, #324]	; (8002278 <showSmallImage+0x260>)
 8002134:	468c      	mov	ip, r1
 8002136:	44bc      	add	ip, r7
 8002138:	4462      	add	r2, ip
 800213a:	7812      	ldrb	r2, [r2, #0]
 800213c:	701a      	strb	r2, [r3, #0]
//		width=0x10;
		height=imInfo[1];
 800213e:	495a      	ldr	r1, [pc, #360]	; (80022a8 <showSmallImage+0x290>)
 8002140:	187b      	adds	r3, r7, r1
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <showSmallImage+0x28c>)
 8002144:	484c      	ldr	r0, [pc, #304]	; (8002278 <showSmallImage+0x260>)
 8002146:	4684      	mov	ip, r0
 8002148:	44bc      	add	ip, r7
 800214a:	4462      	add	r2, ip
 800214c:	7852      	ldrb	r2, [r2, #1]
 800214e:	701a      	strb	r2, [r3, #0]
//		height=0x07;
		len=(width*height>>1)+0x20;
 8002150:	19bb      	adds	r3, r7, r6
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	187a      	adds	r2, r7, r1
 8002156:	7812      	ldrb	r2, [r2, #0]
 8002158:	4353      	muls	r3, r2
 800215a:	105b      	asrs	r3, r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	4b53      	ldr	r3, [pc, #332]	; (80022ac <showSmallImage+0x294>)
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	3220      	adds	r2, #32
 8002164:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <showSmallImage+0x274>)
 8002168:	4a43      	ldr	r2, [pc, #268]	; (8002278 <showSmallImage+0x260>)
 800216a:	4694      	mov	ip, r2
 800216c:	44bc      	add	ip, r7
 800216e:	4463      	add	r3, ip
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3302      	adds	r3, #2
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b45      	ldr	r3, [pc, #276]	; (800228c <showSmallImage+0x274>)
 8002178:	483f      	ldr	r0, [pc, #252]	; (8002278 <showSmallImage+0x260>)
 800217a:	4684      	mov	ip, r0
 800217c:	44bc      	add	ip, r7
 800217e:	4463      	add	r3, ip
 8002180:	701a      	strb	r2, [r3, #0]
//len=0x38;
		USART2->ICR|=USART_ICR_ORECF;
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <showSmallImage+0x298>)
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <showSmallImage+0x298>)
 8002188:	2108      	movs	r1, #8
 800218a:	430a      	orrs	r2, r1
 800218c:	621a      	str	r2, [r3, #32]
				memCMD = 0x13; //read command with 4-byte address
 800218e:	197b      	adds	r3, r7, r5
 8002190:	2213      	movs	r2, #19
 8002192:	701a      	strb	r2, [r3, #0]
//						addrArray[3]=0x00;
//						addrArray[2]=0x03;
//						addrArray[1]=0xC0;
//						addrArray[0]=0x02;

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <showSmallImage+0x278>)
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <showSmallImage+0x278>)
 800219a:	493e      	ldr	r1, [pc, #248]	; (8002294 <showSmallImage+0x27c>)
 800219c:	400a      	ands	r2, r1
 800219e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80021a0:	1979      	adds	r1, r7, r5
 80021a2:	483d      	ldr	r0, [pc, #244]	; (8002298 <showSmallImage+0x280>)
 80021a4:	2332      	movs	r3, #50	; 0x32
 80021a6:	2201      	movs	r2, #1
 80021a8:	f004 f918 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	1cd9      	adds	r1, r3, #3
 80021b0:	4839      	ldr	r0, [pc, #228]	; (8002298 <showSmallImage+0x280>)
 80021b2:	2332      	movs	r3, #50	; 0x32
 80021b4:	2201      	movs	r2, #1
 80021b6:	f004 f911 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80021ba:	193b      	adds	r3, r7, r4
 80021bc:	1c99      	adds	r1, r3, #2
 80021be:	4836      	ldr	r0, [pc, #216]	; (8002298 <showSmallImage+0x280>)
 80021c0:	2332      	movs	r3, #50	; 0x32
 80021c2:	2201      	movs	r2, #1
 80021c4:	f004 f90a 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	1c59      	adds	r1, r3, #1
 80021cc:	4832      	ldr	r0, [pc, #200]	; (8002298 <showSmallImage+0x280>)
 80021ce:	2332      	movs	r3, #50	; 0x32
 80021d0:	2201      	movs	r2, #1
 80021d2:	f004 f903 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80021d6:	1939      	adds	r1, r7, r4
 80021d8:	482f      	ldr	r0, [pc, #188]	; (8002298 <showSmallImage+0x280>)
 80021da:	2332      	movs	r3, #50	; 0x32
 80021dc:	2201      	movs	r2, #1
 80021de:	f004 f8fd 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80021e2:	4c2e      	ldr	r4, [pc, #184]	; (800229c <showSmallImage+0x284>)
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <showSmallImage+0x294>)
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	2514      	movs	r5, #20
 80021ec:	1979      	adds	r1, r7, r5
 80021ee:	482a      	ldr	r0, [pc, #168]	; (8002298 <showSmallImage+0x280>)
 80021f0:	0023      	movs	r3, r4
 80021f2:	f004 fa4b 	bl	800668c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <showSmallImage+0x278>)
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <showSmallImage+0x278>)
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0209      	lsls	r1, r1, #8
 8002200:	430a      	orrs	r2, r1
 8002202:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <showSmallImage+0x264>)
 8002206:	481c      	ldr	r0, [pc, #112]	; (8002278 <showSmallImage+0x260>)
 8002208:	183a      	adds	r2, r7, r0
 800220a:	18d2      	adds	r2, r2, r3
 800220c:	19bb      	adds	r3, r7, r6
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	18d3      	adds	r3, r2, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b2dc      	uxtb	r4, r3
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <showSmallImage+0x268>)
 800221c:	183a      	adds	r2, r7, r0
 800221e:	18d2      	adds	r2, r2, r3
 8002220:	4921      	ldr	r1, [pc, #132]	; (80022a8 <showSmallImage+0x290>)
 8002222:	187b      	adds	r3, r7, r1
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	18d3      	adds	r3, r2, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <showSmallImage+0x268>)
 8002232:	4911      	ldr	r1, [pc, #68]	; (8002278 <showSmallImage+0x260>)
 8002234:	468c      	mov	ip, r1
 8002236:	44bc      	add	ip, r7
 8002238:	4463      	add	r3, ip
 800223a:	7819      	ldrb	r1, [r3, #0]
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <showSmallImage+0x264>)
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <showSmallImage+0x260>)
 8002240:	4684      	mov	ip, r0
 8002242:	44bc      	add	ip, r7
 8002244:	4463      	add	r3, ip
 8002246:	7818      	ldrb	r0, [r3, #0]
 8002248:	197b      	adds	r3, r7, r5
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	23ff      	movs	r3, #255	; 0xff
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	0013      	movs	r3, r2
 8002252:	0022      	movs	r2, r4
 8002254:	f7ff f842 	bl	80012dc <weoDrawRectangleFilled>
//		weoDrawRectangleFilled(0x00, 0x00, 0x0F, 0x06, 0xFF,MEM_Buffer);
//		printASCIIarray(0x20,0x00,0x01,width);
		GPIOC->ODR |= 1 << 6;	//set BF
 8002258:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <showSmallImage+0x278>)
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <showSmallImage+0x278>)
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	430a      	orrs	r2, r1
 8002262:	615a      	str	r2, [r3, #20]
	}
 8002264:	46c0      	nop			; (mov r8, r8)
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <showSmallImage+0x29c>)
 800226c:	449d      	add	sp, r3
 800226e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002270:	ffffdfd4 	.word	0xffffdfd4
 8002274:	ffffdfe7 	.word	0xffffdfe7
 8002278:	00002020 	.word	0x00002020
 800227c:	ffffdfe6 	.word	0xffffdfe6
 8002280:	ffffdfe5 	.word	0xffffdfe5
 8002284:	0000201c 	.word	0x0000201c
 8002288:	00002017 	.word	0x00002017
 800228c:	ffffdfec 	.word	0xffffdfec
 8002290:	50000800 	.word	0x50000800
 8002294:	ffff7fff 	.word	0xffff7fff
 8002298:	200051a4 	.word	0x200051a4
 800229c:	00001388 	.word	0x00001388
 80022a0:	0000201b 	.word	0x0000201b
 80022a4:	ffffdff0 	.word	0xffffdff0
 80022a8:	0000201a 	.word	0x0000201a
 80022ac:	00002018 	.word	0x00002018
 80022b0:	40004400 	.word	0x40004400
 80022b4:	00002024 	.word	0x00002024

080022b8 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4a29      	ldr	r2, [pc, #164]	; (8002368 <MEM_GetID+0xb0>)
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	229e      	movs	r2, #158	; 0x9e
 80022ca:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <MEM_GetID+0xb4>)
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <MEM_GetID+0xb4>)
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <MEM_GetID+0xb8>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80022d8:	1df9      	adds	r1, r7, #7
 80022da:	4826      	ldr	r0, [pc, #152]	; (8002374 <MEM_GetID+0xbc>)
 80022dc:	2332      	movs	r3, #50	; 0x32
 80022de:	2201      	movs	r2, #1
 80022e0:	f004 f87c 	bl	80063dc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80022e4:	23fa      	movs	r3, #250	; 0xfa
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	1d39      	adds	r1, r7, #4
 80022ea:	4822      	ldr	r0, [pc, #136]	; (8002374 <MEM_GetID+0xbc>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	f004 f9cd 	bl	800668c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	001a      	movs	r2, r3
 80022f8:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MEM_GetID+0xc0>)
 80022fa:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80022fc:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <MEM_GetID+0xc0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	021a      	lsls	r2, r3, #8
 8002302:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MEM_GetID+0xc0>)
 8002304:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002306:	23fa      	movs	r3, #250	; 0xfa
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	1d39      	adds	r1, r7, #4
 800230c:	4819      	ldr	r0, [pc, #100]	; (8002374 <MEM_GetID+0xbc>)
 800230e:	2201      	movs	r2, #1
 8002310:	f004 f9bc 	bl	800668c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	001a      	movs	r2, r3
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <MEM_GetID+0xc0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	18d2      	adds	r2, r2, r3
 8002320:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MEM_GetID+0xc0>)
 8002322:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <MEM_GetID+0xc0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	021a      	lsls	r2, r3, #8
 800232a:	4b13      	ldr	r3, [pc, #76]	; (8002378 <MEM_GetID+0xc0>)
 800232c:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800232e:	23fa      	movs	r3, #250	; 0xfa
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	1d39      	adds	r1, r7, #4
 8002334:	480f      	ldr	r0, [pc, #60]	; (8002374 <MEM_GetID+0xbc>)
 8002336:	2201      	movs	r2, #1
 8002338:	f004 f9a8 	bl	800668c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	001a      	movs	r2, r3
 8002342:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <MEM_GetID+0xc0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	18d2      	adds	r2, r2, r3
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MEM_GetID+0xc0>)
 800234a:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 800234c:	4b07      	ldr	r3, [pc, #28]	; (800236c <MEM_GetID+0xb4>)
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MEM_GetID+0xb4>)
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	0209      	lsls	r1, r1, #8
 8002356:	430a      	orrs	r2, r1
 8002358:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <MEM_GetID+0xc0>)
 800235c:	681b      	ldr	r3, [r3, #0]
	}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	080099c0 	.word	0x080099c0
 800236c:	50000800 	.word	0x50000800
 8002370:	ffff7fff 	.word	0xffff7fff
 8002374:	200051a4 	.word	0x200051a4
 8002378:	2000515c 	.word	0x2000515c

0800237c <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	0002      	movs	r2, r0
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	701a      	strb	r2, [r3, #0]
//		if(cmd[0]==0xFF){}
//		else{
			if (bf4me!=0x00){}
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <cmdExecute+0xec>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d165      	bne.n	800245c <cmdExecute+0xe0>
			else{
		USART2->ICR|=USART_ICR_ORECF;
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <cmdExecute+0xf0>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <cmdExecute+0xf0>)
 8002396:	2108      	movs	r1, #8
 8002398:	430a      	orrs	r2, r1
 800239a:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b11      	cmp	r3, #17
 80023a2:	d10d      	bne.n	80023c0 <cmdExecute+0x44>
			bf4me=0x11;	//set BF flag 4 me
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <cmdExecute+0xec>)
 80023a6:	2211      	movs	r2, #17
 80023a8:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <cmdExecute+0xf4>)
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <cmdExecute+0xf4>)
 80023b0:	2140      	movs	r1, #64	; 0x40
 80023b2:	438a      	bics	r2, r1
 80023b4:	615a      	str	r2, [r3, #20]

			showFullScreen(picNum);
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <cmdExecute+0xf8>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	0018      	movs	r0, r3
 80023bc:	f7ff fd8a 	bl	8001ed4 <showFullScreen>
//			showSmallImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 80023c0:	1dfb      	adds	r3, r7, #7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b12      	cmp	r3, #18
 80023c6:	d113      	bne.n	80023f0 <cmdExecute+0x74>
			bf4me=0x12;	//set BF flag 4 me
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <cmdExecute+0xec>)
 80023ca:	2212      	movs	r2, #18
 80023cc:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <cmdExecute+0xf4>)
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	4b27      	ldr	r3, [pc, #156]	; (8002470 <cmdExecute+0xf4>)
 80023d4:	2140      	movs	r1, #64	; 0x40
 80023d6:	438a      	bics	r2, r1
 80023d8:	615a      	str	r2, [r3, #20]

			showSmallImage(picNum,imX,imY);
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <cmdExecute+0xf8>)
 80023dc:	7818      	ldrb	r0, [r3, #0]
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <cmdExecute+0xfc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b2d9      	uxtb	r1, r3
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <cmdExecute+0x100>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	001a      	movs	r2, r3
 80023ec:	f7ff fe14 	bl	8002018 <showSmallImage>
				}
		if(cmd2Execute==0x13){
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b13      	cmp	r3, #19
 80023f6:	d113      	bne.n	8002420 <cmdExecute+0xa4>
			bf4me=0x13;	//set BF flag 4 me
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <cmdExecute+0xec>)
 80023fa:	2213      	movs	r2, #19
 80023fc:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <cmdExecute+0xf4>)
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <cmdExecute+0xf4>)
 8002404:	2140      	movs	r1, #64	; 0x40
 8002406:	438a      	bics	r2, r1
 8002408:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <cmdExecute+0xfc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b2d8      	uxtb	r0, r3
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <cmdExecute+0x100>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b2d9      	uxtb	r1, r3
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <cmdExecute+0x104>)
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <cmdExecute+0x108>)
 800241c:	f000 f834 	bl	8002488 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b14      	cmp	r3, #20
 8002426:	d108      	bne.n	800243a <cmdExecute+0xbe>
			bf4me=0x14;	//set BF flag 4 me
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <cmdExecute+0xec>)
 800242a:	2214      	movs	r2, #20
 800242c:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <cmdExecute+0xf4>)
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <cmdExecute+0xf4>)
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	438a      	bics	r2, r1
 8002438:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b15      	cmp	r3, #21
 8002440:	d102      	bne.n	8002448 <cmdExecute+0xcc>
			bf4me=0x15;	//set BF flag 4 me
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <cmdExecute+0xec>)
 8002444:	2215      	movs	r2, #21
 8002446:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002448:	1dfb      	adds	r3, r7, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b16      	cmp	r3, #22
 800244e:	d102      	bne.n	8002456 <cmdExecute+0xda>
			bf4me=0x16;	//set BF flag 4 me
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <cmdExecute+0xec>)
 8002452:	2216      	movs	r2, #22
 8002454:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]

				}
			}
//		}
	}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	200053cc 	.word	0x200053cc
 800246c:	40004400 	.word	0x40004400
 8002470:	50000800 	.word	0x50000800
 8002474:	20005375 	.word	0x20005375
 8002478:	2000527c 	.word	0x2000527c
 800247c:	200052b4 	.word	0x200052b4
 8002480:	200053b5 	.word	0x200053b5
 8002484:	20005194 	.word	0x20005194

08002488 <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b092      	sub	sp, #72	; 0x48
 800248c:	af02      	add	r7, sp, #8
 800248e:	0004      	movs	r4, r0
 8002490:	0008      	movs	r0, r1
 8002492:	0011      	movs	r1, r2
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	1c22      	adds	r2, r4, #0
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	1c02      	adds	r2, r0, #0
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	1d7b      	adds	r3, r7, #5
 80024a4:	1c0a      	adds	r2, r1, #0
 80024a6:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80024a8:	233e      	movs	r3, #62	; 0x3e
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	1dfa      	adds	r2, r7, #7
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	701a      	strb	r2, [r3, #0]

			for (i=0;i<=strLen;i++){
 80024b2:	233c      	movs	r3, #60	; 0x3c
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	e04f      	b.n	800255c <printASCIIarray+0xd4>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 80024bc:	233f      	movs	r3, #63	; 0x3f
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e01b      	b.n	80024fe <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80024c6:	233c      	movs	r3, #60	; 0x3c
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	18d3      	adds	r3, r2, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	001a      	movs	r2, r3
 80024d4:	253f      	movs	r5, #63	; 0x3f
 80024d6:	197b      	adds	r3, r7, r5
 80024d8:	7818      	ldrb	r0, [r3, #0]
 80024da:	197b      	adds	r3, r7, r5
 80024dc:	7819      	ldrb	r1, [r3, #0]
 80024de:	4c33      	ldr	r4, [pc, #204]	; (80025ac <printASCIIarray+0x124>)
 80024e0:	0013      	movs	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	1a9b      	subs	r3, r3, r2
 80024e6:	00da      	lsls	r2, r3, #3
 80024e8:	1ad2      	subs	r2, r2, r3
 80024ea:	18a3      	adds	r3, r4, r2
 80024ec:	5c1a      	ldrb	r2, [r3, r0]
 80024ee:	2308      	movs	r3, #8
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80024f4:	197b      	adds	r3, r7, r5
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	197b      	adds	r3, r7, r5
 80024fa:	3201      	adds	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	233f      	movs	r3, #63	; 0x3f
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d9de      	bls.n	80024c6 <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <printASCIIarray+0x128>)
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	203e      	movs	r0, #62	; 0x3e
 800250e:	183b      	adds	r3, r7, r0
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	18d3      	adds	r3, r2, r3
 8002514:	b2dc      	uxtb	r4, r3
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <printASCIIarray+0x12c>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	1dbb      	adds	r3, r7, #6
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	18d3      	adds	r3, r2, r3
 8002520:	b2da      	uxtb	r2, r3
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	7819      	ldrb	r1, [r3, #0]
 8002526:	0005      	movs	r5, r0
 8002528:	183b      	adds	r3, r7, r0
 800252a:	7818      	ldrb	r0, [r3, #0]
 800252c:	2308      	movs	r3, #8
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	23ff      	movs	r3, #255	; 0xff
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	0013      	movs	r3, r2
 8002538:	0022      	movs	r2, r4
 800253a:	f7fe fecf 	bl	80012dc <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <printASCIIarray+0x128>)
 8002540:	781a      	ldrb	r2, [r3, #0]
 8002542:	197b      	adds	r3, r7, r5
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	18d3      	adds	r3, r2, r3
 8002548:	b2da      	uxtb	r2, r3
 800254a:	197b      	adds	r3, r7, r5
 800254c:	3201      	adds	r2, #1
 800254e:	701a      	strb	r2, [r3, #0]
			for (i=0;i<=strLen;i++){
 8002550:	213c      	movs	r1, #60	; 0x3c
 8002552:	187b      	adds	r3, r7, r1
 8002554:	881a      	ldrh	r2, [r3, #0]
 8002556:	187b      	adds	r3, r7, r1
 8002558:	3201      	adds	r2, #1
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	1d7b      	adds	r3, r7, #5
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	213c      	movs	r1, #60	; 0x3c
 8002564:	187a      	adds	r2, r7, r1
 8002566:	8812      	ldrh	r2, [r2, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d9a7      	bls.n	80024bc <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 800256c:	187b      	adds	r3, r7, r1
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 8002574:	203c      	movs	r0, #60	; 0x3c
 8002576:	183b      	adds	r3, r7, r0
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	2208      	movs	r2, #8
 800257c:	18ba      	adds	r2, r7, r2
 800257e:	2100      	movs	r1, #0
 8002580:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 8002582:	183b      	adds	r3, r7, r0
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	183b      	adds	r3, r7, r0
 8002588:	3201      	adds	r2, #1
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	233c      	movs	r3, #60	; 0x3c
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2b30      	cmp	r3, #48	; 0x30
 8002594:	d9ee      	bls.n	8002574 <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <printASCIIarray+0x130>)
 8002598:	695a      	ldr	r2, [r3, #20]
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <printASCIIarray+0x130>)
 800259c:	2140      	movs	r1, #64	; 0x40
 800259e:	430a      	orrs	r2, r1
 80025a0:	615a      	str	r2, [r3, #20]

		}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b010      	add	sp, #64	; 0x40
 80025aa:	bdb0      	pop	{r4, r5, r7, pc}
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20003130 	.word	0x20003130
 80025b4:	20003131 	.word	0x20003131
 80025b8:	50000800 	.word	0x50000800

080025bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_MspInit+0x4c>)
 80025d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <HAL_MspInit+0x4c>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_MspInit+0x4c>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	2201      	movs	r2, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_MspInit+0x4c>)
 80025e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_MspInit+0x4c>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0549      	lsls	r1, r1, #21
 80025f0:	430a      	orrs	r2, r1
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <HAL_MspInit+0x4c>)
 80025f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	055b      	lsls	r3, r3, #21
 80025fc:	4013      	ands	r3, r2
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	0018      	movs	r0, r3
 8002608:	f000 fc5a 	bl	8002ec0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	; 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	240c      	movs	r4, #12
 8002622:	193b      	adds	r3, r7, r4
 8002624:	0018      	movs	r0, r3
 8002626:	2314      	movs	r3, #20
 8002628:	001a      	movs	r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	f007 f9b4 	bl	8009998 <memset>
  if(hcomp->Instance==COMP1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a10      	ldr	r2, [pc, #64]	; (8002678 <HAL_COMP_MspInit+0x60>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d11a      	bne.n	8002670 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_COMP_MspInit+0x64>)
 800263c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800263e:	4b0f      	ldr	r3, [pc, #60]	; (800267c <HAL_COMP_MspInit+0x64>)
 8002640:	2102      	movs	r1, #2
 8002642:	430a      	orrs	r2, r1
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_COMP_MspInit+0x64>)
 8002648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264a:	2202      	movs	r2, #2
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002652:	193b      	adds	r3, r7, r4
 8002654:	2204      	movs	r2, #4
 8002656:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002658:	193b      	adds	r3, r7, r4
 800265a:	2203      	movs	r2, #3
 800265c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	193b      	adds	r3, r7, r4
 8002660:	2200      	movs	r2, #0
 8002662:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	193b      	adds	r3, r7, r4
 8002666:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_COMP_MspInit+0x68>)
 8002668:	0019      	movs	r1, r3
 800266a:	0010      	movs	r0, r2
 800266c:	f001 f97e 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b009      	add	sp, #36	; 0x24
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	40010200 	.word	0x40010200
 800267c:	40021000 	.word	0x40021000
 8002680:	50000400 	.word	0x50000400

08002684 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b08b      	sub	sp, #44	; 0x2c
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	2414      	movs	r4, #20
 800268e:	193b      	adds	r3, r7, r4
 8002690:	0018      	movs	r0, r3
 8002692:	2314      	movs	r3, #20
 8002694:	001a      	movs	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	f007 f97e 	bl	8009998 <memset>
  if(hi2c->Instance==I2C1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_I2C_MspInit+0xa0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d139      	bne.n	800271a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_I2C_MspInit+0xa4>)
 80026a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026aa:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <HAL_I2C_MspInit+0xa4>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	635a      	str	r2, [r3, #52]	; 0x34
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_I2C_MspInit+0xa4>)
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	22c0      	movs	r2, #192	; 0xc0
 80026c2:	00d2      	lsls	r2, r2, #3
 80026c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c6:	0021      	movs	r1, r4
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2212      	movs	r2, #18
 80026cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2201      	movs	r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2206      	movs	r2, #6
 80026de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e0:	187a      	adds	r2, r7, r1
 80026e2:	23a0      	movs	r3, #160	; 0xa0
 80026e4:	05db      	lsls	r3, r3, #23
 80026e6:	0011      	movs	r1, r2
 80026e8:	0018      	movs	r0, r3
 80026ea:	f001 f93f 	bl	800396c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_I2C_MspInit+0xa4>)
 80026f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_I2C_MspInit+0xa4>)
 80026f4:	2180      	movs	r1, #128	; 0x80
 80026f6:	0389      	lsls	r1, r1, #14
 80026f8:	430a      	orrs	r2, r1
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_I2C_MspInit+0xa4>)
 80026fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	039b      	lsls	r3, r3, #14
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2017      	movs	r0, #23
 8002710:	f000 fef8 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002714:	2017      	movs	r0, #23
 8002716:	f000 ff0a 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b00b      	add	sp, #44	; 0x2c
 8002720:	bd90      	pop	{r4, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	40005400 	.word	0x40005400
 8002728:	40021000 	.word	0x40021000

0800272c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b08b      	sub	sp, #44	; 0x2c
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	2414      	movs	r4, #20
 8002736:	193b      	adds	r3, r7, r4
 8002738:	0018      	movs	r0, r3
 800273a:	2314      	movs	r3, #20
 800273c:	001a      	movs	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f007 f92a 	bl	8009998 <memset>
  if(hi2s->Instance==SPI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a46      	ldr	r2, [pc, #280]	; (8002864 <HAL_I2S_MspInit+0x138>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d000      	beq.n	8002750 <HAL_I2S_MspInit+0x24>
 800274e:	e085      	b.n	800285c <HAL_I2S_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 8002752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002754:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0149      	lsls	r1, r1, #5
 800275a:	430a      	orrs	r2, r1
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
 800275e:	4b42      	ldr	r3, [pc, #264]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 8002760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276c:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 800276e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002770:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	635a      	str	r2, [r3, #52]	; 0x34
 8002778:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	2201      	movs	r2, #1
 800277e:	4013      	ands	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b38      	ldr	r3, [pc, #224]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 8002786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002788:	4b37      	ldr	r3, [pc, #220]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 800278a:	2102      	movs	r1, #2
 800278c:	430a      	orrs	r2, r1
 800278e:	635a      	str	r2, [r3, #52]	; 0x34
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_I2S_MspInit+0x13c>)
 8002792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800279c:	193b      	adds	r3, r7, r4
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0212      	lsls	r2, r2, #8
 80027a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	2202      	movs	r2, #2
 80027a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	193b      	adds	r3, r7, r4
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	193b      	adds	r3, r7, r4
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	193a      	adds	r2, r7, r4
 80027be:	23a0      	movs	r3, #160	; 0xa0
 80027c0:	05db      	lsls	r3, r3, #23
 80027c2:	0011      	movs	r1, r2
 80027c4:	0018      	movs	r0, r3
 80027c6:	f001 f8d1 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027ca:	0021      	movs	r1, r4
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2238      	movs	r2, #56	; 0x38
 80027d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	187b      	adds	r3, r7, r1
 80027d4:	2202      	movs	r2, #2
 80027d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	2200      	movs	r2, #0
 80027dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_I2S_MspInit+0x140>)
 80027ee:	0019      	movs	r1, r3
 80027f0:	0010      	movs	r0, r2
 80027f2:	f001 f8bb 	bl	800396c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_I2S_MspInit+0x144>)
 80027f8:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_I2S_MspInit+0x148>)
 80027fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <HAL_I2S_MspInit+0x144>)
 80027fe:	2211      	movs	r2, #17
 8002800:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002804:	2210      	movs	r2, #16
 8002806:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_I2S_MspInit+0x144>)
 800280a:	2200      	movs	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800280e:	4b18      	ldr	r3, [pc, #96]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	0052      	lsls	r2, r2, #1
 800281a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_I2S_MspInit+0x144>)
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	00d2      	lsls	r2, r2, #3
 8002822:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002824:	4b12      	ldr	r3, [pc, #72]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <HAL_I2S_MspInit+0x144>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002832:	0018      	movs	r0, r3
 8002834:	f000 fe98 	bl	8003568 <HAL_DMA_Init>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2S_MspInit+0x114>
    {
      Error_Handler();
 800283c:	f7ff febe 	bl	80025bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a0b      	ldr	r2, [pc, #44]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002844:	62da      	str	r2, [r3, #44]	; 0x2c
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_I2S_MspInit+0x144>)
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	2019      	movs	r0, #25
 8002852:	f000 fe57 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002856:	2019      	movs	r0, #25
 8002858:	f000 fe69 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b00b      	add	sp, #44	; 0x2c
 8002862:	bd90      	pop	{r4, r7, pc}
 8002864:	40013000 	.word	0x40013000
 8002868:	40021000 	.word	0x40021000
 800286c:	50000400 	.word	0x50000400
 8002870:	2000543c 	.word	0x2000543c
 8002874:	40020008 	.word	0x40020008

08002878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b08b      	sub	sp, #44	; 0x2c
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	2414      	movs	r4, #20
 8002882:	193b      	adds	r3, r7, r4
 8002884:	0018      	movs	r0, r3
 8002886:	2314      	movs	r3, #20
 8002888:	001a      	movs	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	f007 f884 	bl	8009998 <memset>
  if(hspi->Instance==SPI2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <HAL_SPI_MspInit+0xc8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d14d      	bne.n	8002936 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800289a:	4b2a      	ldr	r3, [pc, #168]	; (8002944 <HAL_SPI_MspInit+0xcc>)
 800289c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800289e:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_SPI_MspInit+0xcc>)
 80028a0:	2180      	movs	r1, #128	; 0x80
 80028a2:	01c9      	lsls	r1, r1, #7
 80028a4:	430a      	orrs	r2, r1
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_SPI_MspInit+0xcc>)
 80028aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	01db      	lsls	r3, r3, #7
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_SPI_MspInit+0xcc>)
 80028b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_SPI_MspInit+0xcc>)
 80028bc:	2102      	movs	r1, #2
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_SPI_MspInit+0xcc>)
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	2202      	movs	r2, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	193b      	adds	r3, r7, r4
 80028d6:	2202      	movs	r2, #2
 80028d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028da:	193b      	adds	r3, r7, r4
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80028e6:	193b      	adds	r3, r7, r4
 80028e8:	2204      	movs	r2, #4
 80028ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <HAL_SPI_MspInit+0xd0>)
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f001 f83a 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80028f8:	0021      	movs	r1, r4
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	22c0      	movs	r2, #192	; 0xc0
 80028fe:	0052      	lsls	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	187b      	adds	r3, r7, r1
 8002904:	2202      	movs	r2, #2
 8002906:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	187b      	adds	r3, r7, r1
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	187b      	adds	r3, r7, r1
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002914:	187b      	adds	r3, r7, r1
 8002916:	2201      	movs	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	187b      	adds	r3, r7, r1
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <HAL_SPI_MspInit+0xd0>)
 800291e:	0019      	movs	r1, r3
 8002920:	0010      	movs	r0, r2
 8002922:	f001 f823 	bl	800396c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	201a      	movs	r0, #26
 800292c:	f000 fdea 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002930:	201a      	movs	r0, #26
 8002932:	f000 fdfc 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b00b      	add	sp, #44	; 0x2c
 800293c:	bd90      	pop	{r4, r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	40003800 	.word	0x40003800
 8002944:	40021000 	.word	0x40021000
 8002948:	50000400 	.word	0x50000400

0800294c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_TIM_Base_MspInit+0x38>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d10d      	bne.n	800297a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <HAL_TIM_Base_MspInit+0x3c>)
 8002960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_TIM_Base_MspInit+0x3c>)
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	0109      	lsls	r1, r1, #4
 8002968:	430a      	orrs	r2, r1
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_TIM_Base_MspInit+0x3c>)
 800296e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	46bd      	mov	sp, r7
 800297e:	b004      	add	sp, #16
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40021000 	.word	0x40021000

0800298c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800298c:	b590      	push	{r4, r7, lr}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	240c      	movs	r4, #12
 8002996:	193b      	adds	r3, r7, r4
 8002998:	0018      	movs	r0, r3
 800299a:	2314      	movs	r3, #20
 800299c:	001a      	movs	r2, r3
 800299e:	2100      	movs	r1, #0
 80029a0:	f006 fffa 	bl	8009998 <memset>
  if(htim->Instance==TIM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_TIM_MspPostInit+0x74>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d123      	bne.n	80029f6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_TIM_MspPostInit+0x78>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_TIM_MspPostInit+0x78>)
 80029b4:	2101      	movs	r1, #1
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_TIM_MspPostInit+0x78>)
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	2201      	movs	r2, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0052      	lsls	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	0021      	movs	r1, r4
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	2202      	movs	r2, #2
 80029d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d6:	187b      	adds	r3, r7, r1
 80029d8:	2202      	movs	r2, #2
 80029da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	187b      	adds	r3, r7, r1
 80029de:	2203      	movs	r2, #3
 80029e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80029e2:	187b      	adds	r3, r7, r1
 80029e4:	2202      	movs	r2, #2
 80029e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	187a      	adds	r2, r7, r1
 80029ea:	23a0      	movs	r3, #160	; 0xa0
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	0011      	movs	r1, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 ffbb 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b009      	add	sp, #36	; 0x24
 80029fc:	bd90      	pop	{r4, r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40021000 	.word	0x40021000

08002a08 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b08b      	sub	sp, #44	; 0x2c
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	2414      	movs	r4, #20
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	0018      	movs	r0, r3
 8002a16:	2314      	movs	r3, #20
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	f006 ffbc 	bl	8009998 <memset>
  if(husart->Instance==USART3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a30      	ldr	r2, [pc, #192]	; (8002ae8 <HAL_USART_MspInit+0xe0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d159      	bne.n	8002ade <HAL_USART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	02c9      	lsls	r1, r1, #11
 8002a34:	430a      	orrs	r2, r1
 8002a36:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	02db      	lsls	r3, r3, #11
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
 8002a52:	4b26      	ldr	r3, [pc, #152]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a56:	2201      	movs	r2, #1
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a64:	2102      	movs	r1, #2
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_USART_MspInit+0xe4>)
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a76:	193b      	adds	r3, r7, r4
 8002a78:	2220      	movs	r2, #32
 8002a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	2202      	movs	r2, #2
 8002a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	2204      	movs	r2, #4
 8002a92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	193a      	adds	r2, r7, r4
 8002a96:	23a0      	movs	r3, #160	; 0xa0
 8002a98:	05db      	lsls	r3, r3, #23
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 ff65 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	2202      	movs	r2, #2
 8002aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	2203      	movs	r2, #3
 8002aba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	2204      	movs	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac2:	187b      	adds	r3, r7, r1
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_USART_MspInit+0xe8>)
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f000 ff4f 	bl	800396c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	201d      	movs	r0, #29
 8002ad4:	f000 fd16 	bl	8003504 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002ad8:	201d      	movs	r0, #29
 8002ada:	f000 fd28 	bl	800352e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b00b      	add	sp, #44	; 0x2c
 8002ae4:	bd90      	pop	{r4, r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40004800 	.word	0x40004800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	50000400 	.word	0x50000400

08002af4 <LL_USART_IsActiveFlag_FE>:
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	2202      	movs	r2, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d101      	bne.n	8002b0c <LL_USART_IsActiveFlag_FE+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_USART_IsActiveFlag_FE+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <LL_USART_IsActiveFlag_NE>:
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2204      	movs	r2, #4
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d101      	bne.n	8002b2e <LL_USART_IsActiveFlag_NE+0x18>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_USART_IsActiveFlag_NE+0x1a>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <LL_USART_IsActiveFlag_ORE>:
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2208      	movs	r2, #8
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d101      	bne.n	8002b50 <LL_USART_IsActiveFlag_ORE+0x18>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2220      	movs	r2, #32
 8002b68:	4013      	ands	r3, r2
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d101      	bne.n	8002b72 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d101      	bne.n	8002b94 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <HardFault_Handler+0x4>

08002bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc6:	f000 f93b 	bl	8002e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <DMA1_Channel1_IRQHandler+0x14>)
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 fdba 	bl	8003750 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	2000543c 	.word	0x2000543c

08002be8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <I2C1_IRQHandler+0x2c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699a      	ldr	r2, [r3, #24]
 8002bf2:	23e0      	movs	r3, #224	; 0xe0
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <I2C1_IRQHandler+0x2c>)
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f001 f8c9 	bl	8003d94 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002c02:	e003      	b.n	8002c0c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <I2C1_IRQHandler+0x2c>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f001 f8aa 	bl	8003d60 <HAL_I2C_EV_IRQHandler>
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	2000521c 	.word	0x2000521c

08002c18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <SPI1_IRQHandler+0x14>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f002 f82c 	bl	8004c7c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	20005378 	.word	0x20005378

08002c30 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <SPI2_IRQHandler+0x14>)
 8002c36:	0018      	movs	r0, r3
 8002c38:	f004 f846 	bl	8006cc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	200051a4 	.word	0x200051a4

08002c48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c4e:	6a1a      	ldr	r2, [r3, #32]
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c52:	2108      	movs	r1, #8
 8002c54:	430a      	orrs	r2, r1
 8002c56:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c5e:	2102      	movs	r1, #2
 8002c60:	430a      	orrs	r2, r1
 8002c62:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c66:	6a1a      	ldr	r2, [r3, #32]
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c6a:	2104      	movs	r1, #4
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff ff71 	bl	8002b5a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002c78:	1e03      	subs	r3, r0, #0
 8002c7a:	d009      	beq.n	8002c90 <USART2_IRQHandler+0x48>
 8002c7c:	4b19      	ldr	r3, [pc, #100]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7ff ff7c 	bl	8002b7c <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d003      	beq.n	8002c90 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002c88:	f7fe f970 	bl	8000f6c <USART2_RX_Callback>
	  {
 8002c8c:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c8e:	e025      	b.n	8002cdc <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c92:	6a1a      	ldr	r2, [r3, #32]
 8002c94:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c96:	2108      	movs	r1, #8
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f7ff ff4a 	bl	8002b38 <LL_USART_IsActiveFlag_ORE>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d008      	beq.n	8002cba <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002caa:	6a1a      	ldr	r2, [r3, #32]
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002cae:	2108      	movs	r1, #8
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cb8:	e010      	b.n	8002cdc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff ff19 	bl	8002af4 <LL_USART_IsActiveFlag_FE>
 8002cc2:	1e03      	subs	r3, r0, #0
 8002cc4:	d002      	beq.n	8002ccc <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002cc6:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cca:	e007      	b.n	8002cdc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff ff21 	bl	8002b16 <LL_USART_IsActiveFlag_NE>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d001      	beq.n	8002cdc <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <USART2_IRQHandler+0x9c>)
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	40004400 	.word	0x40004400

08002ce8 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <USART3_4_LPUART1_IRQHandler+0x14>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f005 fcf8 	bl	80086e4 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	200052b8 	.word	0x200052b8

08002d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <SystemInit+0x14>)
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0512      	lsls	r2, r2, #20
 8002d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d1c:	f7ff fff0 	bl	8002d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d20:	480c      	ldr	r0, [pc, #48]	; (8002d54 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d22:	490d      	ldr	r1, [pc, #52]	; (8002d58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <LoopForever+0xe>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d28:	e002      	b.n	8002d30 <LoopCopyDataInit>

08002d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d2e:	3304      	adds	r3, #4

08002d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d34:	d3f9      	bcc.n	8002d2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d36:	4a0a      	ldr	r2, [pc, #40]	; (8002d60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d38:	4c0a      	ldr	r4, [pc, #40]	; (8002d64 <LoopForever+0x16>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d3c:	e001      	b.n	8002d42 <LoopFillZerobss>

08002d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d40:	3204      	adds	r2, #4

08002d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d44:	d3fb      	bcc.n	8002d3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d46:	f006 fe03 	bl	8009950 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d4a:	f7fd fbe5 	bl	8000518 <main>

08002d4e <LoopForever>:

LoopForever:
  b LoopForever
 8002d4e:	e7fe      	b.n	8002d4e <LoopForever>
  ldr   r0, =_estack
 8002d50:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d58:	20005140 	.word	0x20005140
  ldr r2, =_sidata
 8002d5c:	08009ab0 	.word	0x08009ab0
  ldr r2, =_sbss
 8002d60:	20005140 	.word	0x20005140
  ldr r4, =_ebss
 8002d64:	200054c0 	.word	0x200054c0

08002d68 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d68:	e7fe      	b.n	8002d68 <ADC1_COMP_IRQHandler>
	...

08002d6c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_Init+0x3c>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_Init+0x3c>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0049      	lsls	r1, r1, #1
 8002d82:	430a      	orrs	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f810 	bl	8002dac <HAL_InitTick>
 8002d8c:	1e03      	subs	r3, r0, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d90:	1dfb      	adds	r3, r7, #7
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e001      	b.n	8002d9c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002d98:	f7ff fc16 	bl	80025c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d9c:	1dfb      	adds	r3, r7, #7
 8002d9e:	781b      	ldrb	r3, [r3, #0]
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40022000 	.word	0x40022000

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002db4:	230f      	movs	r3, #15
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <HAL_InitTick+0x88>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02b      	beq.n	8002e1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002dc4:	4b1c      	ldr	r3, [pc, #112]	; (8002e38 <HAL_InitTick+0x8c>)
 8002dc6:	681c      	ldr	r4, [r3, #0]
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <HAL_InitTick+0x88>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	0019      	movs	r1, r3
 8002dce:	23fa      	movs	r3, #250	; 0xfa
 8002dd0:	0098      	lsls	r0, r3, #2
 8002dd2:	f7fd f997 	bl	8000104 <__udivsi3>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	0019      	movs	r1, r3
 8002dda:	0020      	movs	r0, r4
 8002ddc:	f7fd f992 	bl	8000104 <__udivsi3>
 8002de0:	0003      	movs	r3, r0
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 fbb3 	bl	800354e <HAL_SYSTICK_Config>
 8002de8:	1e03      	subs	r3, r0, #0
 8002dea:	d112      	bne.n	8002e12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d80a      	bhi.n	8002e08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	2301      	movs	r3, #1
 8002df6:	425b      	negs	r3, r3
 8002df8:	2200      	movs	r2, #0
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fb82 	bl	8003504 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_InitTick+0x90>)
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e00d      	b.n	8002e24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
 8002e10:	e008      	b.n	8002e24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e12:	230f      	movs	r3, #15
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e003      	b.n	8002e24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	2201      	movs	r2, #1
 8002e22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e24:	230f      	movs	r3, #15
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	781b      	ldrb	r3, [r3, #0]
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b005      	add	sp, #20
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	2000513c 	.word	0x2000513c
 8002e38:	20005134 	.word	0x20005134
 8002e3c:	20005138 	.word	0x20005138

08002e40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_IncTick+0x1c>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	001a      	movs	r2, r3
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_IncTick+0x20>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	18d2      	adds	r2, r2, r3
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_IncTick+0x20>)
 8002e52:	601a      	str	r2, [r3, #0]
}
 8002e54:	46c0      	nop			; (mov r8, r8)
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	2000513c 	.word	0x2000513c
 8002e60:	200054bc 	.word	0x200054bc

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <HAL_GetTick+0x10>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	200054bc 	.word	0x200054bc

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	001a      	movs	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	f7ff ffe0 	bl	8002e64 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	2000513c 	.word	0x2000513c

08002ec0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	fffff9ff 	.word	0xfffff9ff

08002eec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002ef4:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <LL_EXTI_EnableIT_0_31+0x20>)
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	58d2      	ldr	r2, [r2, r3]
 8002efa:	4904      	ldr	r1, [pc, #16]	; (8002f0c <LL_EXTI_EnableIT_0_31+0x20>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	508b      	str	r3, [r1, r2]
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b002      	add	sp, #8
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021800 	.word	0x40021800

08002f10 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f18:	4a06      	ldr	r2, [pc, #24]	; (8002f34 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	58d3      	ldr	r3, [r2, r3]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	43d2      	mvns	r2, r2
 8002f22:	4904      	ldr	r1, [pc, #16]	; (8002f34 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	508b      	str	r3, [r1, r2]
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	40021800 	.word	0x40021800

08002f38 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f40:	4a05      	ldr	r2, [pc, #20]	; (8002f58 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f42:	2384      	movs	r3, #132	; 0x84
 8002f44:	58d2      	ldr	r2, [r2, r3]
 8002f46:	4904      	ldr	r1, [pc, #16]	; (8002f58 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	2284      	movs	r2, #132	; 0x84
 8002f4e:	508b      	str	r3, [r1, r2]

}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021800 	.word	0x40021800

08002f5c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f64:	4a06      	ldr	r2, [pc, #24]	; (8002f80 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f66:	2384      	movs	r3, #132	; 0x84
 8002f68:	58d3      	ldr	r3, [r2, r3]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	43d2      	mvns	r2, r2
 8002f6e:	4904      	ldr	r1, [pc, #16]	; (8002f80 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	2284      	movs	r2, #132	; 0x84
 8002f74:	508b      	str	r3, [r1, r2]
}
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b002      	add	sp, #8
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40021800 	.word	0x40021800

08002f84 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002f8e:	6819      	ldr	r1, [r3, #0]
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021800 	.word	0x40021800

08002fa4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fac:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40021800 	.word	0x40021800

08002fc8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021800 	.word	0x40021800

08002fe8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	43d9      	mvns	r1, r3
 8002ff8:	4b03      	ldr	r3, [pc, #12]	; (8003008 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46bd      	mov	sp, r7
 8003002:	b002      	add	sp, #8
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	40021800 	.word	0x40021800

0800300c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	611a      	str	r2, [r3, #16]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40021800 	.word	0x40021800

08003028 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	60da      	str	r2, [r3, #12]
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40021800 	.word	0x40021800

08003044 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	211f      	movs	r1, #31
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800305e:	187b      	adds	r3, r7, r1
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e13d      	b.n	80032e2 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0fdb      	lsrs	r3, r3, #31
 800306e:	07da      	lsls	r2, r3, #31
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	429a      	cmp	r2, r3
 8003076:	d104      	bne.n	8003082 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003078:	231f      	movs	r3, #31
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e12f      	b.n	80032e2 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2229      	movs	r2, #41	; 0x29
 8003086:	5c9b      	ldrb	r3, [r3, r2]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10a      	bne.n	80030a4 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2228      	movs	r2, #40	; 0x28
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff faba 	bl	8002618 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2230      	movs	r2, #48	; 0x30
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a85      	ldr	r2, [pc, #532]	; (80032f0 <HAL_COMP_Init+0x2ac>)
 80030dc:	4013      	ands	r3, r2
 80030de:	0019      	movs	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10d      	bne.n	8003112 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80030f6:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	4b7e      	ldr	r3, [pc, #504]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80030fc:	497e      	ldr	r1, [pc, #504]	; (80032f8 <HAL_COMP_Init+0x2b4>)
 80030fe:	400a      	ands	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003102:	4b7c      	ldr	r3, [pc, #496]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4b7b      	ldr	r3, [pc, #492]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0109      	lsls	r1, r1, #4
 800310c:	430a      	orrs	r2, r1
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e01f      	b.n	8003152 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	23c0      	movs	r3, #192	; 0xc0
 8003118:	015b      	lsls	r3, r3, #5
 800311a:	429a      	cmp	r2, r3
 800311c:	d10d      	bne.n	800313a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800311e:	4b75      	ldr	r3, [pc, #468]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	0109      	lsls	r1, r1, #4
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800312c:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003132:	4971      	ldr	r1, [pc, #452]	; (80032f8 <HAL_COMP_Init+0x2b4>)
 8003134:	400a      	ands	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	e00b      	b.n	8003152 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b6d      	ldr	r3, [pc, #436]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003140:	496d      	ldr	r1, [pc, #436]	; (80032f8 <HAL_COMP_Init+0x2b4>)
 8003142:	400a      	ands	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003146:	4b6b      	ldr	r3, [pc, #428]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 800314c:	496a      	ldr	r1, [pc, #424]	; (80032f8 <HAL_COMP_Init+0x2b4>)
 800314e:	400a      	ands	r2, r1
 8003150:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	22a0      	movs	r2, #160	; 0xa0
 8003158:	01d2      	lsls	r2, r2, #7
 800315a:	4293      	cmp	r3, r2
 800315c:	d017      	beq.n	800318e <HAL_COMP_Init+0x14a>
 800315e:	22a0      	movs	r2, #160	; 0xa0
 8003160:	01d2      	lsls	r2, r2, #7
 8003162:	4293      	cmp	r3, r2
 8003164:	d830      	bhi.n	80031c8 <HAL_COMP_Init+0x184>
 8003166:	2b01      	cmp	r3, #1
 8003168:	d01f      	beq.n	80031aa <HAL_COMP_Init+0x166>
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	01d2      	lsls	r2, r2, #7
 800316e:	4293      	cmp	r3, r2
 8003170:	d12a      	bne.n	80031c8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003178:	2180      	movs	r1, #128	; 0x80
 800317a:	01c9      	lsls	r1, r1, #7
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003180:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003186:	495d      	ldr	r1, [pc, #372]	; (80032fc <HAL_COMP_Init+0x2b8>)
 8003188:	400a      	ands	r2, r1
 800318a:	605a      	str	r2, [r3, #4]
        break;
 800318c:	e029      	b.n	80031e2 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800318e:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003194:	4959      	ldr	r1, [pc, #356]	; (80032fc <HAL_COMP_Init+0x2b8>)
 8003196:	400a      	ands	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031a0:	2180      	movs	r1, #128	; 0x80
 80031a2:	01c9      	lsls	r1, r1, #7
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
        break;
 80031a8:	e01b      	b.n	80031e2 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031aa:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	01c9      	lsls	r1, r1, #7
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031b8:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	01c9      	lsls	r1, r1, #7
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
        break;
 80031c6:	e00c      	b.n	80031e2 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031ce:	494b      	ldr	r1, [pc, #300]	; (80032fc <HAL_COMP_Init+0x2b8>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 80031da:	4948      	ldr	r1, [pc, #288]	; (80032fc <HAL_COMP_Init+0x2b8>)
 80031dc:	400a      	ands	r2, r1
 80031de:	605a      	str	r2, [r3, #4]
        break;
 80031e0:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2230      	movs	r2, #48	; 0x30
 80031ea:	4013      	ands	r3, r2
 80031ec:	d016      	beq.n	800321c <HAL_COMP_Init+0x1d8>
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80031f4:	4b42      	ldr	r3, [pc, #264]	; (8003300 <HAL_COMP_Init+0x2bc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4942      	ldr	r1, [pc, #264]	; (8003304 <HAL_COMP_Init+0x2c0>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fc ff82 	bl	8000104 <__udivsi3>
 8003200:	0003      	movs	r3, r0
 8003202:	001a      	movs	r2, r3
 8003204:	0013      	movs	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	189b      	adds	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800320e:	e002      	b.n	8003216 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f9      	bne.n	8003210 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <HAL_COMP_Init+0x2b0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d102      	bne.n	800322c <HAL_COMP_Init+0x1e8>
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	e001      	b.n	8003230 <HAL_COMP_Init+0x1ec>
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	02db      	lsls	r3, r3, #11
 8003230:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	2203      	movs	r2, #3
 8003238:	4013      	ands	r3, r2
 800323a:	d040      	beq.n	80032be <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2210      	movs	r2, #16
 8003242:	4013      	ands	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff fe9b 	bl	8002f84 <LL_EXTI_EnableRisingTrig_0_31>
 800324e:	e003      	b.n	8003258 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	0018      	movs	r0, r3
 8003254:	f7ff fea6 	bl	8002fa4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	0018      	movs	r0, r3
 8003266:	f7ff feaf 	bl	8002fc8 <LL_EXTI_EnableFallingTrig_0_31>
 800326a:	e003      	b.n	8003274 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	0018      	movs	r0, r3
 8003270:	f7ff feba 	bl	8002fe8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff fed6 	bl	8003028 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff fec4 	bl	800300c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	0018      	movs	r0, r3
 8003292:	f7ff fe51 	bl	8002f38 <LL_EXTI_EnableEvent_0_31>
 8003296:	e003      	b.n	80032a0 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	0018      	movs	r0, r3
 800329c:	f7ff fe5e 	bl	8002f5c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	2201      	movs	r2, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff fe1d 	bl	8002eec <LL_EXTI_EnableIT_0_31>
 80032b2:	e00c      	b.n	80032ce <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff fe2a 	bl	8002f10 <LL_EXTI_DisableIT_0_31>
 80032bc:	e007      	b.n	80032ce <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff fe4b 	bl	8002f5c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff fe21 	bl	8002f10 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2229      	movs	r2, #41	; 0x29
 80032d2:	5c9b      	ldrb	r3, [r3, r2]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2229      	movs	r2, #41	; 0x29
 80032de:	2101      	movs	r1, #1
 80032e0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80032e2:	231f      	movs	r3, #31
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b008      	add	sp, #32
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	fe00740f 	.word	0xfe00740f
 80032f4:	40010200 	.word	0x40010200
 80032f8:	fffff7ff 	.word	0xfffff7ff
 80032fc:	ffffbfff 	.word	0xffffbfff
 8003300:	20005134 	.word	0x20005134
 8003304:	00030d40 	.word	0x00030d40

08003308 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	210f      	movs	r1, #15
 8003316:	187b      	adds	r3, r7, r1
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e034      	b.n	8003394 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0fdb      	lsrs	r3, r3, #31
 8003332:	07da      	lsls	r2, r3, #31
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	429a      	cmp	r2, r3
 800333a:	d104      	bne.n	8003346 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800333c:	230f      	movs	r3, #15
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2201      	movs	r2, #1
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e026      	b.n	8003394 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2229      	movs	r2, #41	; 0x29
 800334a:	5c9b      	ldrb	r3, [r3, r2]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d11c      	bne.n	800338c <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2101      	movs	r1, #1
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2229      	movs	r2, #41	; 0x29
 8003366:	2102      	movs	r1, #2
 8003368:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_COMP_Start+0x9c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_COMP_Start+0xa0>)
 8003370:	0018      	movs	r0, r3
 8003372:	f7fc fec7 	bl	8000104 <__udivsi3>
 8003376:	0003      	movs	r3, r0
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800337c:	e002      	b.n	8003384 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	3b01      	subs	r3, #1
 8003382:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f9      	bne.n	800337e <HAL_COMP_Start+0x76>
 800338a:	e003      	b.n	8003394 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 800338c:	230f      	movs	r3, #15
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003394:	230f      	movs	r3, #15
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	781b      	ldrb	r3, [r3, #0]
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20005134 	.word	0x20005134
 80033a8:	00030d40 	.word	0x00030d40

080033ac <__NVIC_EnableIRQ>:
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	0002      	movs	r2, r0
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	1dfb      	adds	r3, r7, #7
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b7f      	cmp	r3, #127	; 0x7f
 80033be:	d809      	bhi.n	80033d4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c0:	1dfb      	adds	r3, r7, #7
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	231f      	movs	r3, #31
 80033c8:	401a      	ands	r2, r3
 80033ca:	4b04      	ldr	r3, [pc, #16]	; (80033dc <__NVIC_EnableIRQ+0x30>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	4091      	lsls	r1, r2
 80033d0:	000a      	movs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	46c0      	nop			; (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
{
 80033e0:	b590      	push	{r4, r7, lr}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	0002      	movs	r2, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	1dfb      	adds	r3, r7, #7
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b7f      	cmp	r3, #127	; 0x7f
 80033f4:	d828      	bhi.n	8003448 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f6:	4a2f      	ldr	r2, [pc, #188]	; (80034b4 <__NVIC_SetPriority+0xd4>)
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b25b      	sxtb	r3, r3
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	33c0      	adds	r3, #192	; 0xc0
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	589b      	ldr	r3, [r3, r2]
 8003406:	1dfa      	adds	r2, r7, #7
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	0011      	movs	r1, r2
 800340c:	2203      	movs	r2, #3
 800340e:	400a      	ands	r2, r1
 8003410:	00d2      	lsls	r2, r2, #3
 8003412:	21ff      	movs	r1, #255	; 0xff
 8003414:	4091      	lsls	r1, r2
 8003416:	000a      	movs	r2, r1
 8003418:	43d2      	mvns	r2, r2
 800341a:	401a      	ands	r2, r3
 800341c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	019b      	lsls	r3, r3, #6
 8003422:	22ff      	movs	r2, #255	; 0xff
 8003424:	401a      	ands	r2, r3
 8003426:	1dfb      	adds	r3, r7, #7
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	0018      	movs	r0, r3
 800342c:	2303      	movs	r3, #3
 800342e:	4003      	ands	r3, r0
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003434:	481f      	ldr	r0, [pc, #124]	; (80034b4 <__NVIC_SetPriority+0xd4>)
 8003436:	1dfb      	adds	r3, r7, #7
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	b25b      	sxtb	r3, r3
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	430a      	orrs	r2, r1
 8003440:	33c0      	adds	r3, #192	; 0xc0
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	501a      	str	r2, [r3, r0]
}
 8003446:	e031      	b.n	80034ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003448:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <__NVIC_SetPriority+0xd8>)
 800344a:	1dfb      	adds	r3, r7, #7
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	0019      	movs	r1, r3
 8003450:	230f      	movs	r3, #15
 8003452:	400b      	ands	r3, r1
 8003454:	3b08      	subs	r3, #8
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	3306      	adds	r3, #6
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	18d3      	adds	r3, r2, r3
 800345e:	3304      	adds	r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1dfa      	adds	r2, r7, #7
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	0011      	movs	r1, r2
 8003468:	2203      	movs	r2, #3
 800346a:	400a      	ands	r2, r1
 800346c:	00d2      	lsls	r2, r2, #3
 800346e:	21ff      	movs	r1, #255	; 0xff
 8003470:	4091      	lsls	r1, r2
 8003472:	000a      	movs	r2, r1
 8003474:	43d2      	mvns	r2, r2
 8003476:	401a      	ands	r2, r3
 8003478:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	22ff      	movs	r2, #255	; 0xff
 8003480:	401a      	ands	r2, r3
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	0018      	movs	r0, r3
 8003488:	2303      	movs	r3, #3
 800348a:	4003      	ands	r3, r0
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003490:	4809      	ldr	r0, [pc, #36]	; (80034b8 <__NVIC_SetPriority+0xd8>)
 8003492:	1dfb      	adds	r3, r7, #7
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	001c      	movs	r4, r3
 8003498:	230f      	movs	r3, #15
 800349a:	4023      	ands	r3, r4
 800349c:	3b08      	subs	r3, #8
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	430a      	orrs	r2, r1
 80034a2:	3306      	adds	r3, #6
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	18c3      	adds	r3, r0, r3
 80034a8:	3304      	adds	r3, #4
 80034aa:	601a      	str	r2, [r3, #0]
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b003      	add	sp, #12
 80034b2:	bd90      	pop	{r4, r7, pc}
 80034b4:	e000e100 	.word	0xe000e100
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	2380      	movs	r3, #128	; 0x80
 80034ca:	045b      	lsls	r3, r3, #17
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d301      	bcc.n	80034d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d0:	2301      	movs	r3, #1
 80034d2:	e010      	b.n	80034f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <SysTick_Config+0x44>)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	3a01      	subs	r2, #1
 80034da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034dc:	2301      	movs	r3, #1
 80034de:	425b      	negs	r3, r3
 80034e0:	2103      	movs	r1, #3
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff ff7c 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <SysTick_Config+0x44>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ee:	4b04      	ldr	r3, [pc, #16]	; (8003500 <SysTick_Config+0x44>)
 80034f0:	2207      	movs	r2, #7
 80034f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	0018      	movs	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	b002      	add	sp, #8
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	e000e010 	.word	0xe000e010

08003504 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
 800350e:	210f      	movs	r1, #15
 8003510:	187b      	adds	r3, r7, r1
 8003512:	1c02      	adds	r2, r0, #0
 8003514:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	187b      	adds	r3, r7, r1
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	b25b      	sxtb	r3, r3
 800351e:	0011      	movs	r1, r2
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff5d 	bl	80033e0 <__NVIC_SetPriority>
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	0002      	movs	r2, r0
 8003536:	1dfb      	adds	r3, r7, #7
 8003538:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b25b      	sxtb	r3, r3
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff ff33 	bl	80033ac <__NVIC_EnableIRQ>
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b002      	add	sp, #8
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff ffaf 	bl	80034bc <SysTick_Config>
 800355e:	0003      	movs	r3, r0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e077      	b.n	800366a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a3d      	ldr	r2, [pc, #244]	; (8003674 <HAL_DMA_Init+0x10c>)
 8003580:	4694      	mov	ip, r2
 8003582:	4463      	add	r3, ip
 8003584:	2114      	movs	r1, #20
 8003586:	0018      	movs	r0, r3
 8003588:	f7fc fdbc 	bl	8000104 <__udivsi3>
 800358c:	0003      	movs	r3, r0
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2225      	movs	r2, #37	; 0x25
 8003598:	2102      	movs	r1, #2
 800359a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4934      	ldr	r1, [pc, #208]	; (8003678 <HAL_DMA_Init+0x110>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f971 	bl	80038cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	01db      	lsls	r3, r3, #7
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d102      	bne.n	80035fc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003604:	213f      	movs	r1, #63	; 0x3f
 8003606:	400a      	ands	r2, r1
 8003608:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003612:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_DMA_Init+0xd8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d80d      	bhi.n	8003640 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 f97c 	bl	8003924 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800363c:	605a      	str	r2, [r3, #4]
 800363e:	e008      	b.n	8003652 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2225      	movs	r2, #37	; 0x25
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b002      	add	sp, #8
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	bffdfff8 	.word	0xbffdfff8
 8003678:	ffff800f 	.word	0xffff800f

0800367c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003684:	210f      	movs	r1, #15
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2225      	movs	r2, #37	; 0x25
 8003690:	5c9b      	ldrb	r3, [r3, r2]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d006      	beq.n	80036a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2204      	movs	r2, #4
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e049      	b.n	800373a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	210e      	movs	r1, #14
 80036b2:	438a      	bics	r2, r1
 80036b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	438a      	bics	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	491d      	ldr	r1, [pc, #116]	; (8003748 <HAL_DMA_Abort_IT+0xcc>)
 80036d2:	400a      	ands	r2, r1
 80036d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <HAL_DMA_Abort_IT+0xd0>)
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	221c      	movs	r2, #28
 80036e0:	4013      	ands	r3, r2
 80036e2:	2201      	movs	r2, #1
 80036e4:	409a      	lsls	r2, r3
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_DMA_Abort_IT+0xd0>)
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00c      	beq.n	8003718 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003708:	490f      	ldr	r1, [pc, #60]	; (8003748 <HAL_DMA_Abort_IT+0xcc>)
 800370a:	400a      	ands	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003716:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2225      	movs	r2, #37	; 0x25
 800371c:	2101      	movs	r1, #1
 800371e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	2100      	movs	r1, #0
 8003726:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	d004      	beq.n	800373a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	0010      	movs	r0, r2
 8003738:	4798      	blx	r3
    }
  }
  return status;
 800373a:	230f      	movs	r3, #15
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	781b      	ldrb	r3, [r3, #0]
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b004      	add	sp, #16
 8003746:	bd80      	pop	{r7, pc}
 8003748:	fffffeff 	.word	0xfffffeff
 800374c:	40020000 	.word	0x40020000

08003750 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003758:	4b55      	ldr	r3, [pc, #340]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	221c      	movs	r2, #28
 800376c:	4013      	ands	r3, r2
 800376e:	2204      	movs	r2, #4
 8003770:	409a      	lsls	r2, r3
 8003772:	0013      	movs	r3, r2
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4013      	ands	r3, r2
 8003778:	d027      	beq.n	80037ca <HAL_DMA_IRQHandler+0x7a>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2204      	movs	r2, #4
 800377e:	4013      	ands	r3, r2
 8003780:	d023      	beq.n	80037ca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2220      	movs	r2, #32
 800378a:	4013      	ands	r3, r2
 800378c:	d107      	bne.n	800379e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2104      	movs	r1, #4
 800379a:	438a      	bics	r2, r1
 800379c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800379e:	4b44      	ldr	r3, [pc, #272]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	221c      	movs	r2, #28
 80037a8:	4013      	ands	r3, r2
 80037aa:	2204      	movs	r2, #4
 80037ac:	409a      	lsls	r2, r3
 80037ae:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d100      	bne.n	80037be <HAL_DMA_IRQHandler+0x6e>
 80037bc:	e073      	b.n	80038a6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	0010      	movs	r0, r2
 80037c6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037c8:	e06d      	b.n	80038a6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	221c      	movs	r2, #28
 80037d0:	4013      	ands	r3, r2
 80037d2:	2202      	movs	r2, #2
 80037d4:	409a      	lsls	r2, r3
 80037d6:	0013      	movs	r3, r2
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4013      	ands	r3, r2
 80037dc:	d02e      	beq.n	800383c <HAL_DMA_IRQHandler+0xec>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2202      	movs	r2, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d02a      	beq.n	800383c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2220      	movs	r2, #32
 80037ee:	4013      	ands	r3, r2
 80037f0:	d10b      	bne.n	800380a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	210a      	movs	r1, #10
 80037fe:	438a      	bics	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2225      	movs	r2, #37	; 0x25
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800380a:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	221c      	movs	r2, #28
 8003814:	4013      	ands	r3, r2
 8003816:	2202      	movs	r2, #2
 8003818:	409a      	lsls	r2, r3
 800381a:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d03a      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	0010      	movs	r0, r2
 8003838:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800383a:	e034      	b.n	80038a6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	221c      	movs	r2, #28
 8003842:	4013      	ands	r3, r2
 8003844:	2208      	movs	r2, #8
 8003846:	409a      	lsls	r2, r3
 8003848:	0013      	movs	r3, r2
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	d02b      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x158>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2208      	movs	r2, #8
 8003854:	4013      	ands	r3, r2
 8003856:	d027      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	210e      	movs	r1, #14
 8003864:	438a      	bics	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003868:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	221c      	movs	r2, #28
 8003872:	4013      	ands	r3, r2
 8003874:	2201      	movs	r2, #1
 8003876:	409a      	lsls	r2, r3
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_DMA_IRQHandler+0x160>)
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2225      	movs	r2, #37	; 0x25
 8003888:	2101      	movs	r1, #1
 800388a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	; 0x24
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	0010      	movs	r0, r2
 80038a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	46c0      	nop			; (mov r8, r8)
}
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b004      	add	sp, #16
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40020000 	.word	0x40020000

080038b4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2225      	movs	r2, #37	; 0x25
 80038c0:	5c9b      	ldrb	r3, [r3, r2]
 80038c2:	b2db      	uxtb	r3, r3
}
 80038c4:	0018      	movs	r0, r3
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}

080038cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80038dc:	4694      	mov	ip, r2
 80038de:	4463      	add	r3, ip
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	001a      	movs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	001a      	movs	r2, r3
 80038ee:	23ff      	movs	r3, #255	; 0xff
 80038f0:	4013      	ands	r3, r2
 80038f2:	3b08      	subs	r3, #8
 80038f4:	2114      	movs	r1, #20
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fc fc04 	bl	8000104 <__udivsi3>
 80038fc:	0003      	movs	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003904:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	221f      	movs	r2, #31
 800390a:	4013      	ands	r3, r2
 800390c:	2201      	movs	r2, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b004      	add	sp, #16
 800391a:	bd80      	pop	{r7, pc}
 800391c:	10008200 	.word	0x10008200
 8003920:	40020880 	.word	0x40020880

08003924 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	4013      	ands	r3, r2
 8003934:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800393a:	4694      	mov	ip, r2
 800393c:	4463      	add	r3, ip
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	001a      	movs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a07      	ldr	r2, [pc, #28]	; (8003968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800394a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3b01      	subs	r3, #1
 8003950:	2203      	movs	r2, #3
 8003952:	4013      	ands	r3, r2
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b004      	add	sp, #16
 8003962:	bd80      	pop	{r7, pc}
 8003964:	1000823f 	.word	0x1000823f
 8003968:	40020940 	.word	0x40020940

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397a:	e147      	b.n	8003c0c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4091      	lsls	r1, r2
 8003986:	000a      	movs	r2, r1
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d100      	bne.n	8003994 <HAL_GPIO_Init+0x28>
 8003992:	e138      	b.n	8003c06 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d00b      	beq.n	80039b4 <HAL_GPIO_Init+0x48>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d007      	beq.n	80039b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039a8:	2b11      	cmp	r3, #17
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d130      	bne.n	8003a16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	2203      	movs	r2, #3
 80039c0:	409a      	lsls	r2, r3
 80039c2:	0013      	movs	r3, r2
 80039c4:	43da      	mvns	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68da      	ldr	r2, [r3, #12]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	0013      	movs	r3, r2
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ea:	2201      	movs	r2, #1
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	409a      	lsls	r2, r3
 80039f0:	0013      	movs	r3, r2
 80039f2:	43da      	mvns	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4013      	ands	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	2201      	movs	r2, #1
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
 8003a08:	0013      	movs	r3, r2
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	2203      	movs	r2, #3
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	43da      	mvns	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	409a      	lsls	r2, r3
 8003a38:	0013      	movs	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d003      	beq.n	8003a56 <HAL_GPIO_Init+0xea>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d123      	bne.n	8003a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	08da      	lsrs	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3208      	adds	r2, #8
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	58d3      	ldr	r3, [r2, r3]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2207      	movs	r2, #7
 8003a68:	4013      	ands	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	220f      	movs	r2, #15
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	0013      	movs	r3, r2
 8003a72:	43da      	mvns	r2, r3
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2107      	movs	r1, #7
 8003a82:	400b      	ands	r3, r1
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	409a      	lsls	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	08da      	lsrs	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3208      	adds	r2, #8
 8003a98:	0092      	lsls	r2, r2, #2
 8003a9a:	6939      	ldr	r1, [r7, #16]
 8003a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	43da      	mvns	r2, r3
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2203      	movs	r2, #3
 8003abc:	401a      	ands	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	055b      	lsls	r3, r3, #21
 8003ada:	4013      	ands	r3, r2
 8003adc:	d100      	bne.n	8003ae0 <HAL_GPIO_Init+0x174>
 8003ade:	e092      	b.n	8003c06 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003ae0:	4a50      	ldr	r2, [pc, #320]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	3318      	adds	r3, #24
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	589b      	ldr	r3, [r3, r2]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4013      	ands	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	220f      	movs	r2, #15
 8003af8:	409a      	lsls	r2, r3
 8003afa:	0013      	movs	r3, r2
 8003afc:	43da      	mvns	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	23a0      	movs	r3, #160	; 0xa0
 8003b08:	05db      	lsls	r3, r3, #23
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d013      	beq.n	8003b36 <HAL_GPIO_Init+0x1ca>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a45      	ldr	r2, [pc, #276]	; (8003c28 <HAL_GPIO_Init+0x2bc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00d      	beq.n	8003b32 <HAL_GPIO_Init+0x1c6>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a44      	ldr	r2, [pc, #272]	; (8003c2c <HAL_GPIO_Init+0x2c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d007      	beq.n	8003b2e <HAL_GPIO_Init+0x1c2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a43      	ldr	r2, [pc, #268]	; (8003c30 <HAL_GPIO_Init+0x2c4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_GPIO_Init+0x1be>
 8003b26:	2303      	movs	r3, #3
 8003b28:	e006      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b2a:	2305      	movs	r3, #5
 8003b2c:	e004      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e002      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_GPIO_Init+0x1cc>
 8003b36:	2300      	movs	r3, #0
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	2103      	movs	r1, #3
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	00d2      	lsls	r2, r2, #3
 8003b40:	4093      	lsls	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b48:	4936      	ldr	r1, [pc, #216]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	089b      	lsrs	r3, r3, #2
 8003b4e:	3318      	adds	r3, #24
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b56:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	58d3      	ldr	r3, [r2, r3]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43da      	mvns	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	025b      	lsls	r3, r3, #9
 8003b70:	4013      	ands	r3, r2
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b7c:	4929      	ldr	r1, [pc, #164]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003b84:	4a27      	ldr	r2, [pc, #156]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b86:	2384      	movs	r3, #132	; 0x84
 8003b88:	58d3      	ldr	r3, [r2, r3]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	43da      	mvns	r2, r3
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4013      	ands	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003baa:	491e      	ldr	r1, [pc, #120]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bac:	2284      	movs	r2, #132	; 0x84
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43da      	mvns	r2, r3
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	035b      	lsls	r3, r3, #13
 8003bca:	4013      	ands	r3, r2
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003bdc:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	43da      	mvns	r2, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	039b      	lsls	r3, r3, #14
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c00:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	40da      	lsrs	r2, r3
 8003c14:	1e13      	subs	r3, r2, #0
 8003c16:	d000      	beq.n	8003c1a <HAL_GPIO_Init+0x2ae>
 8003c18:	e6b0      	b.n	800397c <HAL_GPIO_Init+0x10>
  }
}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b006      	add	sp, #24
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021800 	.word	0x40021800
 8003c28:	50000400 	.word	0x50000400
 8003c2c:	50000800 	.word	0x50000800
 8003c30:	50000c00 	.word	0x50000c00

08003c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e082      	b.n	8003d4c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2241      	movs	r2, #65	; 0x41
 8003c4a:	5c9b      	ldrb	r3, [r3, r2]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2240      	movs	r2, #64	; 0x40
 8003c56:	2100      	movs	r1, #0
 8003c58:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7fe fd11 	bl	8002684 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2241      	movs	r2, #65	; 0x41
 8003c66:	2124      	movs	r1, #36	; 0x24
 8003c68:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	438a      	bics	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4934      	ldr	r1, [pc, #208]	; (8003d54 <HAL_I2C_Init+0x120>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4931      	ldr	r1, [pc, #196]	; (8003d58 <HAL_I2C_Init+0x124>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d108      	bne.n	8003cb2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0209      	lsls	r1, r1, #8
 8003cac:	430a      	orrs	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	e007      	b.n	8003cc2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2184      	movs	r1, #132	; 0x84
 8003cbc:	0209      	lsls	r1, r1, #8
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d104      	bne.n	8003cd4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2280      	movs	r2, #128	; 0x80
 8003cd0:	0112      	lsls	r2, r2, #4
 8003cd2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	491f      	ldr	r1, [pc, #124]	; (8003d5c <HAL_I2C_Init+0x128>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	491a      	ldr	r1, [pc, #104]	; (8003d58 <HAL_I2C_Init+0x124>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	0011      	movs	r1, r2
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	021a      	lsls	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69d9      	ldr	r1, [r3, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2241      	movs	r2, #65	; 0x41
 8003d38:	2120      	movs	r1, #32
 8003d3a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2242      	movs	r2, #66	; 0x42
 8003d46:	2100      	movs	r1, #0
 8003d48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b002      	add	sp, #8
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	f0ffffff 	.word	0xf0ffffff
 8003d58:	ffff7fff 	.word	0xffff7fff
 8003d5c:	02008000 	.word	0x02008000

08003d60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
  }
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	001a      	movs	r2, r3
 8003db2:	2301      	movs	r3, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d010      	beq.n	8003dda <HAL_I2C_ER_IRQHandler+0x46>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	09db      	lsrs	r3, r3, #7
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d00a      	beq.n	8003dda <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	2201      	movs	r2, #1
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	0052      	lsls	r2, r2, #1
 8003dd8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	0a9b      	lsrs	r3, r3, #10
 8003dde:	001a      	movs	r2, r3
 8003de0:	2301      	movs	r3, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d010      	beq.n	8003e08 <HAL_I2C_ER_IRQHandler+0x74>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	09db      	lsrs	r3, r3, #7
 8003dea:	001a      	movs	r2, r3
 8003dec:	2301      	movs	r3, #1
 8003dee:	4013      	ands	r3, r2
 8003df0:	d00a      	beq.n	8003e08 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	2208      	movs	r2, #8
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2280      	movs	r2, #128	; 0x80
 8003e04:	00d2      	lsls	r2, r2, #3
 8003e06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	0a5b      	lsrs	r3, r3, #9
 8003e0c:	001a      	movs	r2, r3
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4013      	ands	r3, r2
 8003e12:	d010      	beq.n	8003e36 <HAL_I2C_ER_IRQHandler+0xa2>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	09db      	lsrs	r3, r3, #7
 8003e18:	001a      	movs	r2, r3
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d00a      	beq.n	8003e36 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	2202      	movs	r2, #2
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2280      	movs	r2, #128	; 0x80
 8003e32:	0092      	lsls	r2, r2, #2
 8003e34:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	220b      	movs	r2, #11
 8003e40:	4013      	ands	r3, r2
 8003e42:	d005      	beq.n	8003e50 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	0011      	movs	r1, r2
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f000 fbd8 	bl	8004600 <I2C_ITError>
  }
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b006      	add	sp, #24
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b002      	add	sp, #8
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	0008      	movs	r0, r1
 8003e82:	0011      	movs	r1, r2
 8003e84:	1cfb      	adds	r3, r7, #3
 8003e86:	1c02      	adds	r2, r0, #0
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	003b      	movs	r3, r7
 8003e8c:	1c0a      	adds	r2, r1, #0
 8003e8e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b002      	add	sp, #8
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2240      	movs	r2, #64	; 0x40
 8003ee2:	5c9b      	ldrb	r3, [r3, r2]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <I2C_Slave_ISR_IT+0x24>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0fa      	b.n	80040e2 <I2C_Slave_ISR_IT+0x21a>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2240      	movs	r2, #64	; 0x40
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	001a      	movs	r2, r3
 8003efa:	2301      	movs	r3, #1
 8003efc:	4013      	ands	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <I2C_Slave_ISR_IT+0x50>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	001a      	movs	r2, r3
 8003f06:	2301      	movs	r3, #1
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d005      	beq.n	8003f18 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	0011      	movs	r1, r2
 8003f12:	0018      	movs	r0, r3
 8003f14:	f000 f9f6 	bl	8004304 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	2301      	movs	r3, #1
 8003f20:	4013      	ands	r3, r2
 8003f22:	d054      	beq.n	8003fce <I2C_Slave_ISR_IT+0x106>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	091b      	lsrs	r3, r3, #4
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d04e      	beq.n	8003fce <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12d      	bne.n	8003f96 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2241      	movs	r2, #65	; 0x41
 8003f3e:	5c9b      	ldrb	r3, [r3, r2]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b28      	cmp	r3, #40	; 0x28
 8003f44:	d10b      	bne.n	8003f5e <I2C_Slave_ISR_IT+0x96>
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	049b      	lsls	r3, r3, #18
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d106      	bne.n	8003f5e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0011      	movs	r1, r2
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 faf8 	bl	800454c <I2C_ITListenCplt>
 8003f5c:	e036      	b.n	8003fcc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2241      	movs	r2, #65	; 0x41
 8003f62:	5c9b      	ldrb	r3, [r3, r2]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b29      	cmp	r3, #41	; 0x29
 8003f68:	d110      	bne.n	8003f8c <I2C_Slave_ISR_IT+0xc4>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	4a5f      	ldr	r2, [pc, #380]	; (80040ec <I2C_Slave_ISR_IT+0x224>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00c      	beq.n	8003f8c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2210      	movs	r2, #16
 8003f78:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f000 fc4a 	bl	8004816 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f957 	bl	8004238 <I2C_ITSlaveSeqCplt>
 8003f8a:	e01f      	b.n	8003fcc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003f94:	e09d      	b.n	80040d2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2210      	movs	r2, #16
 8003f9c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <I2C_Slave_ISR_IT+0xf4>
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	045b      	lsls	r3, r3, #17
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d000      	beq.n	8003fbc <I2C_Slave_ISR_IT+0xf4>
 8003fba:	e08a      	b.n	80040d2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 fb1b 	bl	8004600 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fca:	e082      	b.n	80040d2 <I2C_Slave_ISR_IT+0x20a>
 8003fcc:	e081      	b.n	80040d2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d031      	beq.n	800403e <I2C_Slave_ISR_IT+0x176>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	001a      	movs	r2, r3
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d02b      	beq.n	800403e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d018      	beq.n	8004022 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d154      	bne.n	80040d6 <I2C_Slave_ISR_IT+0x20e>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <I2C_Slave_ISR_IT+0x224>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d050      	beq.n	80040d6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f8fe 	bl	8004238 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800403c:	e04b      	b.n	80040d6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	08db      	lsrs	r3, r3, #3
 8004042:	001a      	movs	r2, r3
 8004044:	2301      	movs	r3, #1
 8004046:	4013      	ands	r3, r2
 8004048:	d00c      	beq.n	8004064 <I2C_Slave_ISR_IT+0x19c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	08db      	lsrs	r3, r3, #3
 800404e:	001a      	movs	r2, r3
 8004050:	2301      	movs	r3, #1
 8004052:	4013      	ands	r3, r2
 8004054:	d006      	beq.n	8004064 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f847 	bl	80040f0 <I2C_ITAddrCplt>
 8004062:	e039      	b.n	80040d8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	001a      	movs	r2, r3
 800406a:	2301      	movs	r3, #1
 800406c:	4013      	ands	r3, r2
 800406e:	d033      	beq.n	80040d8 <I2C_Slave_ISR_IT+0x210>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	001a      	movs	r2, r3
 8004076:	2301      	movs	r3, #1
 8004078:	4013      	ands	r3, r2
 800407a:	d02d      	beq.n	80040d8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	1c5a      	adds	r2, r3, #1
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80040b6:	e00f      	b.n	80040d8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	2380      	movs	r3, #128	; 0x80
 80040bc:	045b      	lsls	r3, r3, #17
 80040be:	429a      	cmp	r2, r3
 80040c0:	d002      	beq.n	80040c8 <I2C_Slave_ISR_IT+0x200>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f8b4 	bl	8004238 <I2C_ITSlaveSeqCplt>
 80040d0:	e002      	b.n	80040d8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	e000      	b.n	80040d8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80040d6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	0018      	movs	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b006      	add	sp, #24
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	ffff0000 	.word	0xffff0000

080040f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2241      	movs	r2, #65	; 0x41
 80040fe:	5c9b      	ldrb	r3, [r3, r2]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	001a      	movs	r2, r3
 8004104:	2328      	movs	r3, #40	; 0x28
 8004106:	4013      	ands	r3, r2
 8004108:	2b28      	cmp	r3, #40	; 0x28
 800410a:	d000      	beq.n	800410e <I2C_ITAddrCplt+0x1e>
 800410c:	e088      	b.n	8004220 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2da      	uxtb	r2, r3
 8004118:	250f      	movs	r5, #15
 800411a:	197b      	adds	r3, r7, r5
 800411c:	2101      	movs	r1, #1
 800411e:	400a      	ands	r2, r1
 8004120:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b29a      	uxth	r2, r3
 800412c:	200c      	movs	r0, #12
 800412e:	183b      	adds	r3, r7, r0
 8004130:	21fe      	movs	r1, #254	; 0xfe
 8004132:	400a      	ands	r2, r1
 8004134:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	b29a      	uxth	r2, r3
 800413e:	240a      	movs	r4, #10
 8004140:	193b      	adds	r3, r7, r4
 8004142:	0592      	lsls	r2, r2, #22
 8004144:	0d92      	lsrs	r2, r2, #22
 8004146:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	b29a      	uxth	r2, r3
 8004150:	2308      	movs	r3, #8
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	21fe      	movs	r1, #254	; 0xfe
 8004156:	400a      	ands	r2, r1
 8004158:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d148      	bne.n	80041f4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004162:	0021      	movs	r1, r4
 8004164:	187b      	adds	r3, r7, r1
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	09db      	lsrs	r3, r3, #7
 800416a:	b29a      	uxth	r2, r3
 800416c:	183b      	adds	r3, r7, r0
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	4053      	eors	r3, r2
 8004172:	b29b      	uxth	r3, r3
 8004174:	001a      	movs	r2, r3
 8004176:	2306      	movs	r3, #6
 8004178:	4013      	ands	r3, r2
 800417a:	d120      	bne.n	80041be <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800417c:	183b      	adds	r3, r7, r0
 800417e:	187a      	adds	r2, r7, r1
 8004180:	8812      	ldrh	r2, [r2, #0]
 8004182:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004192:	2b02      	cmp	r3, #2
 8004194:	d14c      	bne.n	8004230 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2208      	movs	r2, #8
 80041a2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2240      	movs	r2, #64	; 0x40
 80041a8:	2100      	movs	r1, #0
 80041aa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	197b      	adds	r3, r7, r5
 80041b2:	7819      	ldrb	r1, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	0018      	movs	r0, r3
 80041b8:	f7ff fe5e 	bl	8003e78 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041bc:	e038      	b.n	8004230 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80041be:	240c      	movs	r4, #12
 80041c0:	193b      	adds	r3, r7, r4
 80041c2:	2208      	movs	r2, #8
 80041c4:	18ba      	adds	r2, r7, r2
 80041c6:	8812      	ldrh	r2, [r2, #0]
 80041c8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fb60 	bl	8004898 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	881a      	ldrh	r2, [r3, #0]
 80041e4:	230f      	movs	r3, #15
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	7819      	ldrb	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7ff fe43 	bl	8003e78 <HAL_I2C_AddrCallback>
}
 80041f2:	e01d      	b.n	8004230 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	021a      	lsls	r2, r3, #8
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0011      	movs	r1, r2
 80041fc:	0018      	movs	r0, r3
 80041fe:	f000 fb4b 	bl	8004898 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2240      	movs	r2, #64	; 0x40
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800420a:	230c      	movs	r3, #12
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	881a      	ldrh	r2, [r3, #0]
 8004210:	230f      	movs	r3, #15
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	7819      	ldrb	r1, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff fe2d 	bl	8003e78 <HAL_I2C_AddrCallback>
}
 800421e:	e007      	b.n	8004230 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2208      	movs	r2, #8
 8004226:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	2100      	movs	r1, #0
 800422e:	5499      	strb	r1, [r3, r2]
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bdb0      	pop	{r4, r5, r7, pc}

08004238 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2242      	movs	r2, #66	; 0x42
 800424c:	2100      	movs	r1, #0
 800424e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	0b9b      	lsrs	r3, r3, #14
 8004254:	001a      	movs	r2, r3
 8004256:	2301      	movs	r3, #1
 8004258:	4013      	ands	r3, r2
 800425a:	d008      	beq.n	800426e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4925      	ldr	r1, [pc, #148]	; (80042fc <I2C_ITSlaveSeqCplt+0xc4>)
 8004268:	400a      	ands	r2, r1
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e00d      	b.n	800428a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0bdb      	lsrs	r3, r3, #15
 8004272:	001a      	movs	r2, r3
 8004274:	2301      	movs	r3, #1
 8004276:	4013      	ands	r3, r2
 8004278:	d007      	beq.n	800428a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	491e      	ldr	r1, [pc, #120]	; (8004300 <I2C_ITSlaveSeqCplt+0xc8>)
 8004286:	400a      	ands	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2241      	movs	r2, #65	; 0x41
 800428e:	5c9b      	ldrb	r3, [r3, r2]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b29      	cmp	r3, #41	; 0x29
 8004294:	d114      	bne.n	80042c0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2241      	movs	r2, #65	; 0x41
 800429a:	2128      	movs	r1, #40	; 0x28
 800429c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2221      	movs	r2, #33	; 0x21
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2101      	movs	r1, #1
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 faf5 	bl	8004898 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2240      	movs	r2, #64	; 0x40
 80042b2:	2100      	movs	r1, #0
 80042b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff fdcd 	bl	8003e58 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042be:	e019      	b.n	80042f4 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2241      	movs	r2, #65	; 0x41
 80042c4:	5c9b      	ldrb	r3, [r3, r2]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ca:	d113      	bne.n	80042f4 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2241      	movs	r2, #65	; 0x41
 80042d0:	2128      	movs	r1, #40	; 0x28
 80042d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2222      	movs	r2, #34	; 0x22
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2102      	movs	r1, #2
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fada 	bl	8004898 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2240      	movs	r2, #64	; 0x40
 80042e8:	2100      	movs	r1, #0
 80042ea:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	0018      	movs	r0, r3
 80042f0:	f7ff fdba 	bl	8003e68 <HAL_I2C_SlaveRxCpltCallback>
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b004      	add	sp, #16
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	ffffbfff 	.word	0xffffbfff
 8004300:	ffff7fff 	.word	0xffff7fff

08004304 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800431a:	200f      	movs	r0, #15
 800431c:	183b      	adds	r3, r7, r0
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	2141      	movs	r1, #65	; 0x41
 8004322:	5c52      	ldrb	r2, [r2, r1]
 8004324:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2220      	movs	r2, #32
 800432c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800432e:	183b      	adds	r3, r7, r0
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b21      	cmp	r3, #33	; 0x21
 8004334:	d003      	beq.n	800433e <I2C_ITSlaveCplt+0x3a>
 8004336:	183b      	adds	r3, r7, r0
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b29      	cmp	r3, #41	; 0x29
 800433c:	d109      	bne.n	8004352 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800433e:	4a7d      	ldr	r2, [pc, #500]	; (8004534 <I2C_ITSlaveCplt+0x230>)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f000 faa7 	bl	8004898 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2221      	movs	r2, #33	; 0x21
 800434e:	631a      	str	r2, [r3, #48]	; 0x30
 8004350:	e011      	b.n	8004376 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004352:	220f      	movs	r2, #15
 8004354:	18bb      	adds	r3, r7, r2
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b22      	cmp	r3, #34	; 0x22
 800435a:	d003      	beq.n	8004364 <I2C_ITSlaveCplt+0x60>
 800435c:	18bb      	adds	r3, r7, r2
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b2a      	cmp	r3, #42	; 0x2a
 8004362:	d108      	bne.n	8004376 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004364:	4a74      	ldr	r2, [pc, #464]	; (8004538 <I2C_ITSlaveCplt+0x234>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f000 fa94 	bl	8004898 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2222      	movs	r2, #34	; 0x22
 8004374:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2180      	movs	r1, #128	; 0x80
 8004382:	0209      	lsls	r1, r1, #8
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	496a      	ldr	r1, [pc, #424]	; (800453c <I2C_ITSlaveCplt+0x238>)
 8004394:	400a      	ands	r2, r1
 8004396:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fa3b 	bl	8004816 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	0b9b      	lsrs	r3, r3, #14
 80043a4:	001a      	movs	r2, r3
 80043a6:	2301      	movs	r3, #1
 80043a8:	4013      	ands	r3, r2
 80043aa:	d013      	beq.n	80043d4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4962      	ldr	r1, [pc, #392]	; (8004540 <I2C_ITSlaveCplt+0x23c>)
 80043b8:	400a      	ands	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043d2:	e018      	b.n	8004406 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	0bdb      	lsrs	r3, r3, #15
 80043d8:	001a      	movs	r2, r3
 80043da:	2301      	movs	r3, #1
 80043dc:	4013      	ands	r3, r2
 80043de:	d012      	beq.n	8004406 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4956      	ldr	r1, [pc, #344]	; (8004544 <I2C_ITSlaveCplt+0x240>)
 80043ec:	400a      	ands	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	b29a      	uxth	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	001a      	movs	r2, r3
 800440c:	2301      	movs	r3, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d020      	beq.n	8004454 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2204      	movs	r2, #4
 8004416:	4393      	bics	r3, r2
 8004418:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29b      	uxth	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	2204      	movs	r2, #4
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2242      	movs	r2, #66	; 0x42
 800446e:	2100      	movs	r1, #0
 8004470:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0011      	movs	r1, r2
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f8b9 	bl	8004600 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2241      	movs	r2, #65	; 0x41
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d147      	bne.n	800452a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0011      	movs	r1, r2
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 f853 	bl	800454c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044a6:	e040      	b.n	800452a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <I2C_ITSlaveCplt+0x244>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d016      	beq.n	80044e0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff febf 	bl	8004238 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a22      	ldr	r2, [pc, #136]	; (8004548 <I2C_ITSlaveCplt+0x244>)
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2241      	movs	r2, #65	; 0x41
 80044c4:	2120      	movs	r1, #32
 80044c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2240      	movs	r2, #64	; 0x40
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f7ff fcdd 	bl	8003e98 <HAL_I2C_ListenCpltCallback>
}
 80044de:	e024      	b.n	800452a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2241      	movs	r2, #65	; 0x41
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b22      	cmp	r3, #34	; 0x22
 80044ea:	d10f      	bne.n	800450c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2241      	movs	r2, #65	; 0x41
 80044f0:	2120      	movs	r1, #32
 80044f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2240      	movs	r2, #64	; 0x40
 80044fe:	2100      	movs	r1, #0
 8004500:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7ff fcaf 	bl	8003e68 <HAL_I2C_SlaveRxCpltCallback>
}
 800450a:	e00e      	b.n	800452a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2241      	movs	r2, #65	; 0x41
 8004510:	2120      	movs	r1, #32
 8004512:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2240      	movs	r2, #64	; 0x40
 800451e:	2100      	movs	r1, #0
 8004520:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f7ff fc97 	bl	8003e58 <HAL_I2C_SlaveTxCpltCallback>
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	46bd      	mov	sp, r7
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	00008001 	.word	0x00008001
 8004538:	00008002 	.word	0x00008002
 800453c:	fe00e800 	.word	0xfe00e800
 8004540:	ffffbfff 	.word	0xffffbfff
 8004544:	ffff7fff 	.word	0xffff7fff
 8004548:	ffff0000 	.word	0xffff0000

0800454c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a27      	ldr	r2, [pc, #156]	; (80045f8 <I2C_ITListenCplt+0xac>)
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2241      	movs	r2, #65	; 0x41
 8004566:	2120      	movs	r1, #32
 8004568:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2242      	movs	r2, #66	; 0x42
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	001a      	movs	r2, r3
 800457e:	2301      	movs	r3, #1
 8004580:	4013      	ands	r3, r2
 8004582:	d022      	beq.n	80045ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d012      	beq.n	80045ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	2204      	movs	r2, #4
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045ca:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <I2C_ITListenCplt+0xb0>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0011      	movs	r1, r2
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 f961 	bl	8004898 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2240      	movs	r2, #64	; 0x40
 80045e2:	2100      	movs	r1, #0
 80045e4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff fc55 	bl	8003e98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	ffff0000 	.word	0xffff0000
 80045fc:	00008003 	.word	0x00008003

08004600 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800460a:	200f      	movs	r0, #15
 800460c:	183b      	adds	r3, r7, r0
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	2141      	movs	r1, #65	; 0x41
 8004612:	5c52      	ldrb	r2, [r2, r1]
 8004614:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2242      	movs	r2, #66	; 0x42
 800461a:	2100      	movs	r1, #0
 800461c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a62      	ldr	r2, [pc, #392]	; (80047ac <I2C_ITError+0x1ac>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004636:	183b      	adds	r3, r7, r0
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b28      	cmp	r3, #40	; 0x28
 800463c:	d007      	beq.n	800464e <I2C_ITError+0x4e>
 800463e:	183b      	adds	r3, r7, r0
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b29      	cmp	r3, #41	; 0x29
 8004644:	d003      	beq.n	800464e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004646:	183b      	adds	r3, r7, r0
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b2a      	cmp	r3, #42	; 0x2a
 800464c:	d10c      	bne.n	8004668 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2103      	movs	r1, #3
 8004652:	0018      	movs	r0, r3
 8004654:	f000 f920 	bl	8004898 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2241      	movs	r2, #65	; 0x41
 800465c:	2128      	movs	r1, #40	; 0x28
 800465e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a53      	ldr	r2, [pc, #332]	; (80047b0 <I2C_ITError+0x1b0>)
 8004664:	635a      	str	r2, [r3, #52]	; 0x34
 8004666:	e012      	b.n	800468e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004668:	4a52      	ldr	r2, [pc, #328]	; (80047b4 <I2C_ITError+0x1b4>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0011      	movs	r1, r2
 800466e:	0018      	movs	r0, r3
 8004670:	f000 f912 	bl	8004898 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2241      	movs	r2, #65	; 0x41
 8004678:	5c9b      	ldrb	r3, [r3, r2]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d003      	beq.n	8004688 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2241      	movs	r2, #65	; 0x41
 8004684:	2120      	movs	r1, #32
 8004686:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d03b      	beq.n	8004714 <I2C_ITError+0x114>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b11      	cmp	r3, #17
 80046a0:	d002      	beq.n	80046a8 <I2C_ITError+0xa8>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d135      	bne.n	8004714 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	01db      	lsls	r3, r3, #7
 80046b2:	401a      	ands	r2, r3
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	01db      	lsls	r3, r3, #7
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	493c      	ldr	r1, [pc, #240]	; (80047b8 <I2C_ITError+0x1b8>)
 80046c8:	400a      	ands	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7ff f8ef 	bl	80038b4 <HAL_DMA_GetState>
 80046d6:	0003      	movs	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d016      	beq.n	800470a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	4a36      	ldr	r2, [pc, #216]	; (80047bc <I2C_ITError+0x1bc>)
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7fe ffc3 	bl	800367c <HAL_DMA_Abort_IT>
 80046f6:	1e03      	subs	r3, r0, #0
 80046f8:	d051      	beq.n	800479e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	0018      	movs	r0, r3
 8004706:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004708:	e049      	b.n	800479e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 f859 	bl	80047c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004712:	e044      	b.n	800479e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d03b      	beq.n	8004794 <I2C_ITError+0x194>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b12      	cmp	r3, #18
 8004720:	d002      	beq.n	8004728 <I2C_ITError+0x128>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b22      	cmp	r3, #34	; 0x22
 8004726:	d135      	bne.n	8004794 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	401a      	ands	r2, r3
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	429a      	cmp	r2, r3
 800473a:	d107      	bne.n	800474c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	491e      	ldr	r1, [pc, #120]	; (80047c0 <I2C_ITError+0x1c0>)
 8004748:	400a      	ands	r2, r1
 800474a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004750:	0018      	movs	r0, r3
 8004752:	f7ff f8af 	bl	80038b4 <HAL_DMA_GetState>
 8004756:	0003      	movs	r3, r0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d016      	beq.n	800478a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <I2C_ITError+0x1bc>)
 8004762:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	0018      	movs	r0, r3
 8004772:	f7fe ff83 	bl	800367c <HAL_DMA_Abort_IT>
 8004776:	1e03      	subs	r3, r0, #0
 8004778:	d013      	beq.n	80047a2 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	0018      	movs	r0, r3
 8004786:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004788:	e00b      	b.n	80047a2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 f819 	bl	80047c4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004792:	e006      	b.n	80047a2 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f000 f814 	bl	80047c4 <I2C_TreatErrorCallback>
  }
}
 800479c:	e002      	b.n	80047a4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	e000      	b.n	80047a4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047a2:	46c0      	nop			; (mov r8, r8)
}
 80047a4:	46c0      	nop			; (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b004      	add	sp, #16
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	ffff0000 	.word	0xffff0000
 80047b0:	08003ec9 	.word	0x08003ec9
 80047b4:	00008003 	.word	0x00008003
 80047b8:	ffffbfff 	.word	0xffffbfff
 80047bc:	0800485b 	.word	0x0800485b
 80047c0:	ffff7fff 	.word	0xffff7fff

080047c4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2241      	movs	r2, #65	; 0x41
 80047d0:	5c9b      	ldrb	r3, [r3, r2]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b60      	cmp	r3, #96	; 0x60
 80047d6:	d10f      	bne.n	80047f8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2241      	movs	r2, #65	; 0x41
 80047dc:	2120      	movs	r1, #32
 80047de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	2100      	movs	r1, #0
 80047ec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f7ff fb61 	bl	8003eb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047f6:	e00a      	b.n	800480e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2240      	movs	r2, #64	; 0x40
 8004802:	2100      	movs	r1, #0
 8004804:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	0018      	movs	r0, r3
 800480a:	f7ff fb4d 	bl	8003ea8 <HAL_I2C_ErrorCallback>
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}

08004816 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	2202      	movs	r2, #2
 8004826:	4013      	ands	r3, r2
 8004828:	2b02      	cmp	r3, #2
 800482a:	d103      	bne.n	8004834 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2201      	movs	r2, #1
 800483c:	4013      	ands	r3, r2
 800483e:	2b01      	cmp	r3, #1
 8004840:	d007      	beq.n	8004852 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699a      	ldr	r2, [r3, #24]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2101      	movs	r1, #1
 800484e:	430a      	orrs	r2, r1
 8004850:	619a      	str	r2, [r3, #24]
  }
}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b002      	add	sp, #8
 8004858:	bd80      	pop	{r7, pc}

0800485a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	2200      	movs	r2, #0
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	2200      	movs	r2, #0
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0018      	movs	r0, r3
 800488c:	f7ff ff9a 	bl	80047c4 <I2C_TreatErrorCallback>
}
 8004890:	46c0      	nop			; (mov r8, r8)
 8004892:	46bd      	mov	sp, r7
 8004894:	b004      	add	sp, #16
 8004896:	bd80      	pop	{r7, pc}

08004898 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	000a      	movs	r2, r1
 80048a2:	1cbb      	adds	r3, r7, #2
 80048a4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048aa:	1cbb      	adds	r3, r7, #2
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	4013      	ands	r3, r2
 80048b2:	d010      	beq.n	80048d6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2242      	movs	r2, #66	; 0x42
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2241      	movs	r2, #65	; 0x41
 80048c0:	5c9b      	ldrb	r3, [r3, r2]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	001a      	movs	r2, r3
 80048c6:	2328      	movs	r3, #40	; 0x28
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b28      	cmp	r3, #40	; 0x28
 80048cc:	d003      	beq.n	80048d6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22b0      	movs	r2, #176	; 0xb0
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048d6:	1cbb      	adds	r3, r7, #2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	2202      	movs	r2, #2
 80048dc:	4013      	ands	r3, r2
 80048de:	d010      	beq.n	8004902 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2244      	movs	r2, #68	; 0x44
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2241      	movs	r2, #65	; 0x41
 80048ec:	5c9b      	ldrb	r3, [r3, r2]
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	001a      	movs	r2, r3
 80048f2:	2328      	movs	r3, #40	; 0x28
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b28      	cmp	r3, #40	; 0x28
 80048f8:	d003      	beq.n	8004902 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	22b0      	movs	r2, #176	; 0xb0
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004902:	1cbb      	adds	r3, r7, #2
 8004904:	2200      	movs	r2, #0
 8004906:	5e9b      	ldrsh	r3, [r3, r2]
 8004908:	2b00      	cmp	r3, #0
 800490a:	da03      	bge.n	8004914 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	22b8      	movs	r2, #184	; 0xb8
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004914:	1cbb      	adds	r3, r7, #2
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	2b10      	cmp	r3, #16
 800491a:	d103      	bne.n	8004924 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2290      	movs	r2, #144	; 0x90
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004924:	1cbb      	adds	r3, r7, #2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	2b20      	cmp	r3, #32
 800492a:	d103      	bne.n	8004934 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004934:	1cbb      	adds	r3, r7, #2
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d103      	bne.n	8004944 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2240      	movs	r2, #64	; 0x40
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43d9      	mvns	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	400a      	ands	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	46bd      	mov	sp, r7
 800495a:	b004      	add	sp, #16
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2241      	movs	r2, #65	; 0x41
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b20      	cmp	r3, #32
 8004974:	d138      	bne.n	80049e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2240      	movs	r2, #64	; 0x40
 800497a:	5c9b      	ldrb	r3, [r3, r2]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004980:	2302      	movs	r3, #2
 8004982:	e032      	b.n	80049ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	2101      	movs	r1, #1
 800498a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2241      	movs	r2, #65	; 0x41
 8004990:	2124      	movs	r1, #36	; 0x24
 8004992:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2101      	movs	r1, #1
 80049a0:	438a      	bics	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4911      	ldr	r1, [pc, #68]	; (80049f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6819      	ldr	r1, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2241      	movs	r2, #65	; 0x41
 80049d8:	2120      	movs	r1, #32
 80049da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	2100      	movs	r1, #0
 80049e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	ffffefff 	.word	0xffffefff

080049f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2241      	movs	r2, #65	; 0x41
 8004a06:	5c9b      	ldrb	r3, [r3, r2]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d139      	bne.n	8004a82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2240      	movs	r2, #64	; 0x40
 8004a12:	5c9b      	ldrb	r3, [r3, r2]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e033      	b.n	8004a84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2240      	movs	r2, #64	; 0x40
 8004a20:	2101      	movs	r1, #1
 8004a22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2241      	movs	r2, #65	; 0x41
 8004a28:	2124      	movs	r1, #36	; 0x24
 8004a2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2101      	movs	r1, #1
 8004a38:	438a      	bics	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2101      	movs	r1, #1
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2241      	movs	r2, #65	; 0x41
 8004a72:	2120      	movs	r1, #32
 8004a74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
  }
}
 8004a84:	0018      	movs	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b004      	add	sp, #16
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	fffff0ff 	.word	0xfffff0ff

08004a90 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0e5      	b.n	8004c6e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2235      	movs	r2, #53	; 0x35
 8004aa6:	5c9b      	ldrb	r3, [r3, r2]
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2234      	movs	r2, #52	; 0x34
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7fd fe37 	bl	800272c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2235      	movs	r2, #53	; 0x35
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4969      	ldr	r1, [pc, #420]	; (8004c78 <HAL_I2S_Init+0x1e8>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2202      	movs	r2, #2
 8004adc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d100      	bne.n	8004ae8 <HAL_I2S_Init+0x58>
 8004ae6:	e076      	b.n	8004bd6 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004af0:	2310      	movs	r3, #16
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	e001      	b.n	8004afa <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004af6:	2320      	movs	r3, #32
 8004af8:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d802      	bhi.n	8004b08 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f001 f865 	bl	8005bdc <HAL_RCCEx_GetPeriphCLKFreq>
 8004b12:	0003      	movs	r3, r0
 8004b14:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691a      	ldr	r2, [r3, #16]
 8004b1a:	2380      	movs	r3, #128	; 0x80
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d131      	bne.n	8004b86 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d016      	beq.n	8004b58 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	0019      	movs	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7fb fae7 	bl	8000104 <__udivsi3>
 8004b36:	0003      	movs	r3, r0
 8004b38:	001a      	movs	r2, r3
 8004b3a:	0013      	movs	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	001a      	movs	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	0019      	movs	r1, r3
 8004b4a:	0010      	movs	r0, r2
 8004b4c:	f7fb fada 	bl	8000104 <__udivsi3>
 8004b50:	0003      	movs	r3, r0
 8004b52:	3305      	adds	r3, #5
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e02a      	b.n	8004bae <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	0019      	movs	r1, r3
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7fb fad0 	bl	8000104 <__udivsi3>
 8004b64:	0003      	movs	r3, r0
 8004b66:	001a      	movs	r2, r3
 8004b68:	0013      	movs	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	189b      	adds	r3, r3, r2
 8004b6e:	005b      	lsls	r3, r3, #1
 8004b70:	001a      	movs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	0019      	movs	r1, r3
 8004b78:	0010      	movs	r0, r2
 8004b7a:	f7fb fac3 	bl	8000104 <__udivsi3>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	3305      	adds	r3, #5
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	e013      	b.n	8004bae <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b86:	6979      	ldr	r1, [r7, #20]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f7fb fabb 	bl	8000104 <__udivsi3>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	001a      	movs	r2, r3
 8004b92:	0013      	movs	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	001a      	movs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	0010      	movs	r0, r2
 8004ba4:	f7fb faae 	bl	8000104 <__udivsi3>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	3305      	adds	r3, #5
 8004bac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	210a      	movs	r1, #10
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fb faa6 	bl	8000104 <__udivsi3>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e003      	b.n	8004bde <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d902      	bls.n	8004bea <HAL_I2S_Init+0x15a>
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2bff      	cmp	r3, #255	; 0xff
 8004be8:	d907      	bls.n	8004bfa <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	2210      	movs	r2, #16
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e039      	b.n	8004c6e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	0011      	movs	r1, r2
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69fa      	ldr	r2, [r7, #28]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_I2S_Init+0x1e8>)
 8004c16:	401a      	ands	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4319      	orrs	r1, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	4319      	orrs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	0109      	lsls	r1, r1, #4
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b30      	cmp	r3, #48	; 0x30
 8004c42:	d003      	beq.n	8004c4c <HAL_I2S_Init+0x1bc>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2bb0      	cmp	r3, #176	; 0xb0
 8004c4a:	d108      	bne.n	8004c5e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	0149      	lsls	r1, r1, #5
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2235      	movs	r2, #53	; 0x35
 8004c68:	2101      	movs	r1, #1
 8004c6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b008      	add	sp, #32
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	fffff040 	.word	0xfffff040

08004c7c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	099b      	lsrs	r3, r3, #6
 8004c98:	001a      	movs	r2, r3
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d10e      	bne.n	8004cbe <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004ca6:	d00a      	beq.n	8004cbe <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	099b      	lsrs	r3, r3, #6
 8004cac:	001a      	movs	r2, r3
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f000 f892 	bl	8004de0 <I2S_Receive_IT>
    return;
 8004cbc:	e046      	b.n	8004d4c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_I2S_IRQHandler+0x64>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	001a      	movs	r2, r3
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d004      	beq.n	8004ce0 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 f852 	bl	8004d82 <I2S_Transmit_IT>
    return;
 8004cde:	e035      	b.n	8004d4c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	4013      	ands	r3, r2
 8004cea:	d02f      	beq.n	8004d4c <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	099b      	lsrs	r3, r3, #6
 8004cf0:	001a      	movs	r2, r3
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d00d      	beq.n	8004d14 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2160      	movs	r1, #96	; 0x60
 8004d04:	438a      	bics	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	001a      	movs	r2, r3
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d00d      	beq.n	8004d3c <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	21a0      	movs	r1, #160	; 0xa0
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	2204      	movs	r2, #4
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2235      	movs	r2, #53	; 0x35
 8004d40:	2101      	movs	r1, #1
 8004d42:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f813 	bl	8004d72 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b004      	add	sp, #16
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d5a:	46c0      	nop			; (mov r8, r8)
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	b002      	add	sp, #8
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b002      	add	sp, #8
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b002      	add	sp, #8
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	881a      	ldrh	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10f      	bne.n	8004dd8 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	21a0      	movs	r1, #160	; 0xa0
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2235      	movs	r2, #53	; 0x35
 8004dcc:	2101      	movs	r1, #1
 8004dce:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7ff ffbd 	bl	8004d52 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dd8:	46c0      	nop			; (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	b292      	uxth	r2, r2
 8004df4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2160      	movs	r1, #96	; 0x60
 8004e24:	438a      	bics	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2235      	movs	r2, #53	; 0x35
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7ff ff95 	bl	8004d62 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e48:	4b19      	ldr	r3, [pc, #100]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	0019      	movs	r1, r3
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d11f      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	0013      	movs	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	189b      	adds	r3, r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4912      	ldr	r1, [pc, #72]	; (8004ebc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e72:	0018      	movs	r0, r3
 8004e74:	f7fb f946 	bl	8000104 <__udivsi3>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e7e:	e008      	b.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d003      	beq.n	8004e8e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	e001      	b.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e009      	b.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e92:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d0ed      	beq.n	8004e80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b004      	add	sp, #16
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	fffff9ff 	.word	0xfffff9ff
 8004eb8:	20005134 	.word	0x20005134
 8004ebc:	000f4240 	.word	0x000f4240

08004ec0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004ec4:	4b03      	ldr	r3, [pc, #12]	; (8004ed4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	23e0      	movs	r3, #224	; 0xe0
 8004eca:	01db      	lsls	r3, r3, #7
 8004ecc:	4013      	ands	r3, r2
}
 8004ece:	0018      	movs	r0, r3
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	40021000 	.word	0x40021000

08004ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e304      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x1e>
 8004ef4:	e07c      	b.n	8004ff0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ef6:	4bc3      	ldr	r3, [pc, #780]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2238      	movs	r2, #56	; 0x38
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f00:	4bc0      	ldr	r3, [pc, #768]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2203      	movs	r2, #3
 8004f06:	4013      	ands	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_OscConfig+0x3e>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d002      	beq.n	8004f1c <HAL_RCC_OscConfig+0x44>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	4bb9      	ldr	r3, [pc, #740]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	029b      	lsls	r3, r3, #10
 8004f24:	4013      	ands	r3, r2
 8004f26:	d062      	beq.n	8004fee <HAL_RCC_OscConfig+0x116>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d15e      	bne.n	8004fee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e2df      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	025b      	lsls	r3, r3, #9
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x78>
 8004f40:	4bb0      	ldr	r3, [pc, #704]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	4baf      	ldr	r3, [pc, #700]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f46:	2180      	movs	r1, #128	; 0x80
 8004f48:	0249      	lsls	r1, r1, #9
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	e020      	b.n	8004f92 <HAL_RCC_OscConfig+0xba>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	23a0      	movs	r3, #160	; 0xa0
 8004f56:	02db      	lsls	r3, r3, #11
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d10e      	bne.n	8004f7a <HAL_RCC_OscConfig+0xa2>
 8004f5c:	4ba9      	ldr	r3, [pc, #676]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4ba8      	ldr	r3, [pc, #672]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f62:	2180      	movs	r1, #128	; 0x80
 8004f64:	02c9      	lsls	r1, r1, #11
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	4ba6      	ldr	r3, [pc, #664]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4ba5      	ldr	r3, [pc, #660]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	0249      	lsls	r1, r1, #9
 8004f74:	430a      	orrs	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	e00b      	b.n	8004f92 <HAL_RCC_OscConfig+0xba>
 8004f7a:	4ba2      	ldr	r3, [pc, #648]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4ba1      	ldr	r3, [pc, #644]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f80:	49a1      	ldr	r1, [pc, #644]	; (8005208 <HAL_RCC_OscConfig+0x330>)
 8004f82:	400a      	ands	r2, r1
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	4b9f      	ldr	r3, [pc, #636]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b9e      	ldr	r3, [pc, #632]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004f8c:	499f      	ldr	r1, [pc, #636]	; (800520c <HAL_RCC_OscConfig+0x334>)
 8004f8e:	400a      	ands	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d014      	beq.n	8004fc4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fd ff63 	bl	8002e64 <HAL_GetTick>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fd ff5e 	bl	8002e64 <HAL_GetTick>
 8004fa8:	0002      	movs	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	; 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e29e      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb6:	4b93      	ldr	r3, [pc, #588]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0xcc>
 8004fc2:	e015      	b.n	8004ff0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd ff4e 	bl	8002e64 <HAL_GetTick>
 8004fc8:	0003      	movs	r3, r0
 8004fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fce:	f7fd ff49 	bl	8002e64 <HAL_GetTick>
 8004fd2:	0002      	movs	r2, r0
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b64      	cmp	r3, #100	; 0x64
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e289      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fe0:	4b88      	ldr	r3, [pc, #544]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	029b      	lsls	r3, r3, #10
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d1f0      	bne.n	8004fce <HAL_RCC_OscConfig+0xf6>
 8004fec:	e000      	b.n	8004ff0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d100      	bne.n	8004ffc <HAL_RCC_OscConfig+0x124>
 8004ffa:	e099      	b.n	8005130 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffc:	4b81      	ldr	r3, [pc, #516]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2238      	movs	r2, #56	; 0x38
 8005002:	4013      	ands	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005006:	4b7f      	ldr	r3, [pc, #508]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2203      	movs	r2, #3
 800500c:	4013      	ands	r3, r2
 800500e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b10      	cmp	r3, #16
 8005014:	d102      	bne.n	800501c <HAL_RCC_OscConfig+0x144>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b02      	cmp	r3, #2
 800501a:	d002      	beq.n	8005022 <HAL_RCC_OscConfig+0x14a>
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d135      	bne.n	800508e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005022:	4b78      	ldr	r3, [pc, #480]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4013      	ands	r3, r2
 800502c:	d005      	beq.n	800503a <HAL_RCC_OscConfig+0x162>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e25c      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b72      	ldr	r3, [pc, #456]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a74      	ldr	r2, [pc, #464]	; (8005210 <HAL_RCC_OscConfig+0x338>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	021a      	lsls	r2, r3, #8
 800504a:	4b6e      	ldr	r3, [pc, #440]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d112      	bne.n	800507c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005056:	4b6b      	ldr	r3, [pc, #428]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6e      	ldr	r2, [pc, #440]	; (8005214 <HAL_RCC_OscConfig+0x33c>)
 800505c:	4013      	ands	r3, r2
 800505e:	0019      	movs	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	4b67      	ldr	r3, [pc, #412]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005066:	430a      	orrs	r2, r1
 8005068:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800506a:	4b66      	ldr	r3, [pc, #408]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	0adb      	lsrs	r3, r3, #11
 8005070:	2207      	movs	r2, #7
 8005072:	4013      	ands	r3, r2
 8005074:	4a68      	ldr	r2, [pc, #416]	; (8005218 <HAL_RCC_OscConfig+0x340>)
 8005076:	40da      	lsrs	r2, r3
 8005078:	4b68      	ldr	r3, [pc, #416]	; (800521c <HAL_RCC_OscConfig+0x344>)
 800507a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800507c:	4b68      	ldr	r3, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x348>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	0018      	movs	r0, r3
 8005082:	f7fd fe93 	bl	8002dac <HAL_InitTick>
 8005086:	1e03      	subs	r3, r0, #0
 8005088:	d051      	beq.n	800512e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e232      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d030      	beq.n	80050f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005096:	4b5b      	ldr	r3, [pc, #364]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a5e      	ldr	r2, [pc, #376]	; (8005214 <HAL_RCC_OscConfig+0x33c>)
 800509c:	4013      	ands	r3, r2
 800509e:	0019      	movs	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	4b57      	ldr	r3, [pc, #348]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050aa:	4b56      	ldr	r3, [pc, #344]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b55      	ldr	r3, [pc, #340]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	0049      	lsls	r1, r1, #1
 80050b4:	430a      	orrs	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fd fed4 	bl	8002e64 <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fd fecf 	bl	8002e64 <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e20f      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d4:	4b4b      	ldr	r3, [pc, #300]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	2380      	movs	r3, #128	; 0x80
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4013      	ands	r3, r2
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b48      	ldr	r3, [pc, #288]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4a4a      	ldr	r2, [pc, #296]	; (8005210 <HAL_RCC_OscConfig+0x338>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	0019      	movs	r1, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	4b44      	ldr	r3, [pc, #272]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e01b      	b.n	8005130 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80050fe:	4949      	ldr	r1, [pc, #292]	; (8005224 <HAL_RCC_OscConfig+0x34c>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fd feae 	bl	8002e64 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510e:	f7fd fea9 	bl	8002e64 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e1e9      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005120:	4b38      	ldr	r3, [pc, #224]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	4013      	ands	r3, r2
 800512a:	d1f0      	bne.n	800510e <HAL_RCC_OscConfig+0x236>
 800512c:	e000      	b.n	8005130 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800512e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2208      	movs	r2, #8
 8005136:	4013      	ands	r3, r2
 8005138:	d047      	beq.n	80051ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800513a:	4b32      	ldr	r3, [pc, #200]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2238      	movs	r2, #56	; 0x38
 8005140:	4013      	ands	r3, r2
 8005142:	2b18      	cmp	r3, #24
 8005144:	d10a      	bne.n	800515c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005146:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	2202      	movs	r2, #2
 800514c:	4013      	ands	r3, r2
 800514e:	d03c      	beq.n	80051ca <HAL_RCC_OscConfig+0x2f2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d138      	bne.n	80051ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e1cb      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d019      	beq.n	8005198 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 8005166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005168:	4b26      	ldr	r3, [pc, #152]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800516a:	2101      	movs	r1, #1
 800516c:	430a      	orrs	r2, r1
 800516e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005170:	f7fd fe78 	bl	8002e64 <HAL_GetTick>
 8005174:	0003      	movs	r3, r0
 8005176:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800517a:	f7fd fe73 	bl	8002e64 <HAL_GetTick>
 800517e:	0002      	movs	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e1b3      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800518e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005190:	2202      	movs	r2, #2
 8005192:	4013      	ands	r3, r2
 8005194:	d0f1      	beq.n	800517a <HAL_RCC_OscConfig+0x2a2>
 8005196:	e018      	b.n	80051ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800519a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 800519e:	2101      	movs	r1, #1
 80051a0:	438a      	bics	r2, r1
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fd fe5e 	bl	8002e64 <HAL_GetTick>
 80051a8:	0003      	movs	r3, r0
 80051aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ae:	f7fd fe59 	bl	8002e64 <HAL_GetTick>
 80051b2:	0002      	movs	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e199      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051c0:	4b10      	ldr	r3, [pc, #64]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80051c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c4:	2202      	movs	r2, #2
 80051c6:	4013      	ands	r3, r2
 80051c8:	d1f1      	bne.n	80051ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2204      	movs	r2, #4
 80051d0:	4013      	ands	r3, r2
 80051d2:	d100      	bne.n	80051d6 <HAL_RCC_OscConfig+0x2fe>
 80051d4:	e0c6      	b.n	8005364 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d6:	231f      	movs	r3, #31
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051de:	4b09      	ldr	r3, [pc, #36]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2238      	movs	r2, #56	; 0x38
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d11e      	bne.n	8005228 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_RCC_OscConfig+0x32c>)
 80051ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	d100      	bne.n	80051f6 <HAL_RCC_OscConfig+0x31e>
 80051f4:	e0b6      	b.n	8005364 <HAL_RCC_OscConfig+0x48c>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d000      	beq.n	8005200 <HAL_RCC_OscConfig+0x328>
 80051fe:	e0b1      	b.n	8005364 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e177      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
 8005204:	40021000 	.word	0x40021000
 8005208:	fffeffff 	.word	0xfffeffff
 800520c:	fffbffff 	.word	0xfffbffff
 8005210:	ffff80ff 	.word	0xffff80ff
 8005214:	ffffc7ff 	.word	0xffffc7ff
 8005218:	00f42400 	.word	0x00f42400
 800521c:	20005134 	.word	0x20005134
 8005220:	20005138 	.word	0x20005138
 8005224:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005228:	4bb4      	ldr	r3, [pc, #720]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800522a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	055b      	lsls	r3, r3, #21
 8005230:	4013      	ands	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_RCC_OscConfig+0x360>
 8005234:	2301      	movs	r3, #1
 8005236:	e000      	b.n	800523a <HAL_RCC_OscConfig+0x362>
 8005238:	2300      	movs	r3, #0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d011      	beq.n	8005262 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800523e:	4baf      	ldr	r3, [pc, #700]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005242:	4bae      	ldr	r3, [pc, #696]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0549      	lsls	r1, r1, #21
 8005248:	430a      	orrs	r2, r1
 800524a:	63da      	str	r2, [r3, #60]	; 0x3c
 800524c:	4bab      	ldr	r3, [pc, #684]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	055b      	lsls	r3, r3, #21
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800525a:	231f      	movs	r3, #31
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	2201      	movs	r2, #1
 8005260:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005262:	4ba7      	ldr	r3, [pc, #668]	; (8005500 <HAL_RCC_OscConfig+0x628>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	4013      	ands	r3, r2
 800526c:	d11a      	bne.n	80052a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800526e:	4ba4      	ldr	r3, [pc, #656]	; (8005500 <HAL_RCC_OscConfig+0x628>)
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4ba3      	ldr	r3, [pc, #652]	; (8005500 <HAL_RCC_OscConfig+0x628>)
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	0049      	lsls	r1, r1, #1
 8005278:	430a      	orrs	r2, r1
 800527a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800527c:	f7fd fdf2 	bl	8002e64 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005286:	f7fd fded 	bl	8002e64 <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e12d      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005298:	4b99      	ldr	r3, [pc, #612]	; (8005500 <HAL_RCC_OscConfig+0x628>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4013      	ands	r3, r2
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d106      	bne.n	80052ba <HAL_RCC_OscConfig+0x3e2>
 80052ac:	4b93      	ldr	r3, [pc, #588]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052b0:	4b92      	ldr	r3, [pc, #584]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052b2:	2101      	movs	r1, #1
 80052b4:	430a      	orrs	r2, r1
 80052b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80052b8:	e01c      	b.n	80052f4 <HAL_RCC_OscConfig+0x41c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d10c      	bne.n	80052dc <HAL_RCC_OscConfig+0x404>
 80052c2:	4b8e      	ldr	r3, [pc, #568]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052c6:	4b8d      	ldr	r3, [pc, #564]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052c8:	2104      	movs	r1, #4
 80052ca:	430a      	orrs	r2, r1
 80052cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80052ce:	4b8b      	ldr	r3, [pc, #556]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052d2:	4b8a      	ldr	r3, [pc, #552]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052d4:	2101      	movs	r1, #1
 80052d6:	430a      	orrs	r2, r1
 80052d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80052da:	e00b      	b.n	80052f4 <HAL_RCC_OscConfig+0x41c>
 80052dc:	4b87      	ldr	r3, [pc, #540]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052e0:	4b86      	ldr	r3, [pc, #536]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052e2:	2101      	movs	r1, #1
 80052e4:	438a      	bics	r2, r1
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e8:	4b84      	ldr	r3, [pc, #528]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ec:	4b83      	ldr	r3, [pc, #524]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80052ee:	2104      	movs	r1, #4
 80052f0:	438a      	bics	r2, r1
 80052f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d014      	beq.n	8005326 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fd fdb2 	bl	8002e64 <HAL_GetTick>
 8005300:	0003      	movs	r3, r0
 8005302:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005304:	e009      	b.n	800531a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005306:	f7fd fdad 	bl	8002e64 <HAL_GetTick>
 800530a:	0002      	movs	r2, r0
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	4a7c      	ldr	r2, [pc, #496]	; (8005504 <HAL_RCC_OscConfig+0x62c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0ec      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b78      	ldr	r3, [pc, #480]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	d0f0      	beq.n	8005306 <HAL_RCC_OscConfig+0x42e>
 8005324:	e013      	b.n	800534e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd fd9d 	bl	8002e64 <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800532e:	e009      	b.n	8005344 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fd fd98 	bl	8002e64 <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	4a72      	ldr	r2, [pc, #456]	; (8005504 <HAL_RCC_OscConfig+0x62c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e0d7      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005344:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005348:	2202      	movs	r2, #2
 800534a:	4013      	ands	r3, r2
 800534c:	d1f0      	bne.n	8005330 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800534e:	231f      	movs	r3, #31
 8005350:	18fb      	adds	r3, r7, r3
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d105      	bne.n	8005364 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005358:	4b68      	ldr	r3, [pc, #416]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800535a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800535c:	4b67      	ldr	r3, [pc, #412]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800535e:	496a      	ldr	r1, [pc, #424]	; (8005508 <HAL_RCC_OscConfig+0x630>)
 8005360:	400a      	ands	r2, r1
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d100      	bne.n	800536e <HAL_RCC_OscConfig+0x496>
 800536c:	e0c1      	b.n	80054f2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800536e:	4b63      	ldr	r3, [pc, #396]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2238      	movs	r2, #56	; 0x38
 8005374:	4013      	ands	r3, r2
 8005376:	2b10      	cmp	r3, #16
 8005378:	d100      	bne.n	800537c <HAL_RCC_OscConfig+0x4a4>
 800537a:	e081      	b.n	8005480 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d156      	bne.n	8005432 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005384:	4b5d      	ldr	r3, [pc, #372]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	4b5c      	ldr	r3, [pc, #368]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800538a:	4960      	ldr	r1, [pc, #384]	; (800550c <HAL_RCC_OscConfig+0x634>)
 800538c:	400a      	ands	r2, r1
 800538e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005390:	f7fd fd68 	bl	8002e64 <HAL_GetTick>
 8005394:	0003      	movs	r3, r0
 8005396:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800539a:	f7fd fd63 	bl	8002e64 <HAL_GetTick>
 800539e:	0002      	movs	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e0a3      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ac:	4b53      	ldr	r3, [pc, #332]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	049b      	lsls	r3, r3, #18
 80053b4:	4013      	ands	r3, r2
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b8:	4b50      	ldr	r3, [pc, #320]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a54      	ldr	r2, [pc, #336]	; (8005510 <HAL_RCC_OscConfig+0x638>)
 80053be:	4013      	ands	r3, r2
 80053c0:	0019      	movs	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	431a      	orrs	r2, r3
 80053e6:	4b45      	ldr	r3, [pc, #276]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ec:	4b43      	ldr	r3, [pc, #268]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b42      	ldr	r3, [pc, #264]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	0449      	lsls	r1, r1, #17
 80053f6:	430a      	orrs	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80053fa:	4b40      	ldr	r3, [pc, #256]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	0549      	lsls	r1, r1, #21
 8005404:	430a      	orrs	r2, r1
 8005406:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fd fd2c 	bl	8002e64 <HAL_GetTick>
 800540c:	0003      	movs	r3, r0
 800540e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005412:	f7fd fd27 	bl	8002e64 <HAL_GetTick>
 8005416:	0002      	movs	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e067      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005424:	4b35      	ldr	r3, [pc, #212]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	049b      	lsls	r3, r3, #18
 800542c:	4013      	ands	r3, r2
 800542e:	d0f0      	beq.n	8005412 <HAL_RCC_OscConfig+0x53a>
 8005430:	e05f      	b.n	80054f2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005432:	4b32      	ldr	r3, [pc, #200]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005438:	4934      	ldr	r1, [pc, #208]	; (800550c <HAL_RCC_OscConfig+0x634>)
 800543a:	400a      	ands	r2, r1
 800543c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800543e:	4b2f      	ldr	r3, [pc, #188]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	4b2e      	ldr	r3, [pc, #184]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005444:	2103      	movs	r1, #3
 8005446:	438a      	bics	r2, r1
 8005448:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800544a:	4b2c      	ldr	r3, [pc, #176]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	4b2b      	ldr	r3, [pc, #172]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005450:	4930      	ldr	r1, [pc, #192]	; (8005514 <HAL_RCC_OscConfig+0x63c>)
 8005452:	400a      	ands	r2, r1
 8005454:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005456:	f7fd fd05 	bl	8002e64 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fd fd00 	bl	8002e64 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e040      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005472:	4b22      	ldr	r3, [pc, #136]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2380      	movs	r3, #128	; 0x80
 8005478:	049b      	lsls	r3, r3, #18
 800547a:	4013      	ands	r3, r2
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x588>
 800547e:	e038      	b.n	80054f2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e033      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <HAL_RCC_OscConfig+0x624>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2203      	movs	r2, #3
 8005496:	401a      	ands	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	429a      	cmp	r2, r3
 800549e:	d126      	bne.n	80054ee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2270      	movs	r2, #112	; 0x70
 80054a4:	401a      	ands	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d11f      	bne.n	80054ee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	23fe      	movs	r3, #254	; 0xfe
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	401a      	ands	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054bc:	429a      	cmp	r2, r3
 80054be:	d116      	bne.n	80054ee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	23f8      	movs	r3, #248	; 0xf8
 80054c4:	039b      	lsls	r3, r3, #14
 80054c6:	401a      	ands	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d10e      	bne.n	80054ee <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	23e0      	movs	r3, #224	; 0xe0
 80054d4:	051b      	lsls	r3, r3, #20
 80054d6:	401a      	ands	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054dc:	429a      	cmp	r2, r3
 80054de:	d106      	bne.n	80054ee <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	0f5b      	lsrs	r3, r3, #29
 80054e4:	075a      	lsls	r2, r3, #29
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	0018      	movs	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	b008      	add	sp, #32
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000
 8005500:	40007000 	.word	0x40007000
 8005504:	00001388 	.word	0x00001388
 8005508:	efffffff 	.word	0xefffffff
 800550c:	feffffff 	.word	0xfeffffff
 8005510:	11c1808c 	.word	0x11c1808c
 8005514:	eefeffff 	.word	0xeefeffff

08005518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0e9      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b76      	ldr	r3, [pc, #472]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2207      	movs	r2, #7
 8005532:	4013      	ands	r3, r2
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d91e      	bls.n	8005578 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b73      	ldr	r3, [pc, #460]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2207      	movs	r2, #7
 8005540:	4393      	bics	r3, r2
 8005542:	0019      	movs	r1, r3
 8005544:	4b70      	ldr	r3, [pc, #448]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800554c:	f7fd fc8a 	bl	8002e64 <HAL_GetTick>
 8005550:	0003      	movs	r3, r0
 8005552:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005554:	e009      	b.n	800556a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005556:	f7fd fc85 	bl	8002e64 <HAL_GetTick>
 800555a:	0002      	movs	r2, r0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	4a6a      	ldr	r2, [pc, #424]	; (800570c <HAL_RCC_ClockConfig+0x1f4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0ca      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800556a:	4b67      	ldr	r3, [pc, #412]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2207      	movs	r2, #7
 8005570:	4013      	ands	r3, r2
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d1ee      	bne.n	8005556 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2202      	movs	r2, #2
 800557e:	4013      	ands	r3, r2
 8005580:	d015      	beq.n	80055ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2204      	movs	r2, #4
 8005588:	4013      	ands	r3, r2
 800558a:	d006      	beq.n	800559a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800558c:	4b60      	ldr	r3, [pc, #384]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	4b5f      	ldr	r3, [pc, #380]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 8005592:	21e0      	movs	r1, #224	; 0xe0
 8005594:	01c9      	lsls	r1, r1, #7
 8005596:	430a      	orrs	r2, r1
 8005598:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800559a:	4b5d      	ldr	r3, [pc, #372]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4a5d      	ldr	r2, [pc, #372]	; (8005714 <HAL_RCC_ClockConfig+0x1fc>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	4b59      	ldr	r3, [pc, #356]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	d057      	beq.n	8005668 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c0:	4b53      	ldr	r3, [pc, #332]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	029b      	lsls	r3, r3, #10
 80055c8:	4013      	ands	r3, r2
 80055ca:	d12b      	bne.n	8005624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e097      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d8:	4b4d      	ldr	r3, [pc, #308]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	049b      	lsls	r3, r3, #18
 80055e0:	4013      	ands	r3, r2
 80055e2:	d11f      	bne.n	8005624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e08b      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f0:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	4013      	ands	r3, r2
 80055fa:	d113      	bne.n	8005624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e07f      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b03      	cmp	r3, #3
 8005606:	d106      	bne.n	8005616 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005608:	4b41      	ldr	r3, [pc, #260]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 800560a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560c:	2202      	movs	r2, #2
 800560e:	4013      	ands	r3, r2
 8005610:	d108      	bne.n	8005624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e074      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005616:	4b3e      	ldr	r3, [pc, #248]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 8005618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561a:	2202      	movs	r2, #2
 800561c:	4013      	ands	r3, r2
 800561e:	d101      	bne.n	8005624 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e06d      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005624:	4b3a      	ldr	r3, [pc, #232]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2207      	movs	r2, #7
 800562a:	4393      	bics	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	4b37      	ldr	r3, [pc, #220]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 8005634:	430a      	orrs	r2, r1
 8005636:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005638:	f7fd fc14 	bl	8002e64 <HAL_GetTick>
 800563c:	0003      	movs	r3, r0
 800563e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005640:	e009      	b.n	8005656 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005642:	f7fd fc0f 	bl	8002e64 <HAL_GetTick>
 8005646:	0002      	movs	r2, r0
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	4a2f      	ldr	r2, [pc, #188]	; (800570c <HAL_RCC_ClockConfig+0x1f4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e054      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005656:	4b2e      	ldr	r3, [pc, #184]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2238      	movs	r2, #56	; 0x38
 800565c:	401a      	ands	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	429a      	cmp	r2, r3
 8005666:	d1ec      	bne.n	8005642 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005668:	4b27      	ldr	r3, [pc, #156]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2207      	movs	r2, #7
 800566e:	4013      	ands	r3, r2
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d21e      	bcs.n	80056b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005676:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2207      	movs	r2, #7
 800567c:	4393      	bics	r3, r2
 800567e:	0019      	movs	r1, r3
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005688:	f7fd fbec 	bl	8002e64 <HAL_GetTick>
 800568c:	0003      	movs	r3, r0
 800568e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005690:	e009      	b.n	80056a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005692:	f7fd fbe7 	bl	8002e64 <HAL_GetTick>
 8005696:	0002      	movs	r2, r0
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	4a1b      	ldr	r2, [pc, #108]	; (800570c <HAL_RCC_ClockConfig+0x1f4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e02c      	b.n	8005700 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <HAL_RCC_ClockConfig+0x1f0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2207      	movs	r2, #7
 80056ac:	4013      	ands	r3, r2
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d1ee      	bne.n	8005692 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2204      	movs	r2, #4
 80056ba:	4013      	ands	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	4a15      	ldr	r2, [pc, #84]	; (8005718 <HAL_RCC_ClockConfig+0x200>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	0019      	movs	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	4b10      	ldr	r3, [pc, #64]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056d2:	f000 f829 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80056d6:	0001      	movs	r1, r0
 80056d8:	4b0d      	ldr	r3, [pc, #52]	; (8005710 <HAL_RCC_ClockConfig+0x1f8>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	220f      	movs	r2, #15
 80056e0:	401a      	ands	r2, r3
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <HAL_RCC_ClockConfig+0x204>)
 80056e4:	0092      	lsls	r2, r2, #2
 80056e6:	58d3      	ldr	r3, [r2, r3]
 80056e8:	221f      	movs	r2, #31
 80056ea:	4013      	ands	r3, r2
 80056ec:	000a      	movs	r2, r1
 80056ee:	40da      	lsrs	r2, r3
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_RCC_ClockConfig+0x208>)
 80056f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_ClockConfig+0x20c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7fd fb57 	bl	8002dac <HAL_InitTick>
 80056fe:	0003      	movs	r3, r0
}
 8005700:	0018      	movs	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	b004      	add	sp, #16
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40022000 	.word	0x40022000
 800570c:	00001388 	.word	0x00001388
 8005710:	40021000 	.word	0x40021000
 8005714:	fffff0ff 	.word	0xfffff0ff
 8005718:	ffff8fff 	.word	0xffff8fff
 800571c:	080099c4 	.word	0x080099c4
 8005720:	20005134 	.word	0x20005134
 8005724:	20005138 	.word	0x20005138

08005728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800572e:	4b3c      	ldr	r3, [pc, #240]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2238      	movs	r2, #56	; 0x38
 8005734:	4013      	ands	r3, r2
 8005736:	d10f      	bne.n	8005758 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005738:	4b39      	ldr	r3, [pc, #228]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0adb      	lsrs	r3, r3, #11
 800573e:	2207      	movs	r2, #7
 8005740:	4013      	ands	r3, r2
 8005742:	2201      	movs	r2, #1
 8005744:	409a      	lsls	r2, r3
 8005746:	0013      	movs	r3, r2
 8005748:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	4835      	ldr	r0, [pc, #212]	; (8005824 <HAL_RCC_GetSysClockFreq+0xfc>)
 800574e:	f7fa fcd9 	bl	8000104 <__udivsi3>
 8005752:	0003      	movs	r3, r0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e05d      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005758:	4b31      	ldr	r3, [pc, #196]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2238      	movs	r2, #56	; 0x38
 800575e:	4013      	ands	r3, r2
 8005760:	2b08      	cmp	r3, #8
 8005762:	d102      	bne.n	800576a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005764:	4b30      	ldr	r3, [pc, #192]	; (8005828 <HAL_RCC_GetSysClockFreq+0x100>)
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	e054      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800576a:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2238      	movs	r2, #56	; 0x38
 8005770:	4013      	ands	r3, r2
 8005772:	2b10      	cmp	r3, #16
 8005774:	d138      	bne.n	80057e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	2203      	movs	r2, #3
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005780:	4b27      	ldr	r3, [pc, #156]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	2207      	movs	r2, #7
 8005788:	4013      	ands	r3, r2
 800578a:	3301      	adds	r3, #1
 800578c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d10d      	bne.n	80057b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	4824      	ldr	r0, [pc, #144]	; (8005828 <HAL_RCC_GetSysClockFreq+0x100>)
 8005798:	f7fa fcb4 	bl	8000104 <__udivsi3>
 800579c:	0003      	movs	r3, r0
 800579e:	0019      	movs	r1, r3
 80057a0:	4b1f      	ldr	r3, [pc, #124]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	227f      	movs	r2, #127	; 0x7f
 80057a8:	4013      	ands	r3, r2
 80057aa:	434b      	muls	r3, r1
 80057ac:	617b      	str	r3, [r7, #20]
        break;
 80057ae:	e00d      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	481c      	ldr	r0, [pc, #112]	; (8005824 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057b4:	f7fa fca6 	bl	8000104 <__udivsi3>
 80057b8:	0003      	movs	r3, r0
 80057ba:	0019      	movs	r1, r3
 80057bc:	4b18      	ldr	r3, [pc, #96]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	227f      	movs	r2, #127	; 0x7f
 80057c4:	4013      	ands	r3, r2
 80057c6:	434b      	muls	r3, r1
 80057c8:	617b      	str	r3, [r7, #20]
        break;
 80057ca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057cc:	4b14      	ldr	r3, [pc, #80]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	0f5b      	lsrs	r3, r3, #29
 80057d2:	2207      	movs	r2, #7
 80057d4:	4013      	ands	r3, r2
 80057d6:	3301      	adds	r3, #1
 80057d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	6978      	ldr	r0, [r7, #20]
 80057de:	f7fa fc91 	bl	8000104 <__udivsi3>
 80057e2:	0003      	movs	r3, r0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	e015      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057e8:	4b0d      	ldr	r3, [pc, #52]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2238      	movs	r2, #56	; 0x38
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d103      	bne.n	80057fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057f4:	2380      	movs	r3, #128	; 0x80
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	e00b      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057fc:	4b08      	ldr	r3, [pc, #32]	; (8005820 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2238      	movs	r2, #56	; 0x38
 8005802:	4013      	ands	r3, r2
 8005804:	2b18      	cmp	r3, #24
 8005806:	d103      	bne.n	8005810 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005808:	23fa      	movs	r3, #250	; 0xfa
 800580a:	01db      	lsls	r3, r3, #7
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	e001      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005814:	693b      	ldr	r3, [r7, #16]
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	b006      	add	sp, #24
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	40021000 	.word	0x40021000
 8005824:	00f42400 	.word	0x00f42400
 8005828:	007a1200 	.word	0x007a1200

0800582c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005830:	4b02      	ldr	r3, [pc, #8]	; (800583c <HAL_RCC_GetHCLKFreq+0x10>)
 8005832:	681b      	ldr	r3, [r3, #0]
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	20005134 	.word	0x20005134

08005840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005844:	f7ff fff2 	bl	800582c <HAL_RCC_GetHCLKFreq>
 8005848:	0004      	movs	r4, r0
 800584a:	f7ff fb39 	bl	8004ec0 <LL_RCC_GetAPB1Prescaler>
 800584e:	0003      	movs	r3, r0
 8005850:	0b1a      	lsrs	r2, r3, #12
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005854:	0092      	lsls	r2, r2, #2
 8005856:	58d3      	ldr	r3, [r2, r3]
 8005858:	221f      	movs	r2, #31
 800585a:	4013      	ands	r3, r2
 800585c:	40dc      	lsrs	r4, r3
 800585e:	0023      	movs	r3, r4
}
 8005860:	0018      	movs	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	bdb0      	pop	{r4, r5, r7, pc}
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	08009a04 	.word	0x08009a04

0800586c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005874:	2313      	movs	r3, #19
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800587c:	2312      	movs	r3, #18
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	2380      	movs	r3, #128	; 0x80
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	4013      	ands	r3, r2
 800588e:	d100      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005890:	e0a3      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005892:	2011      	movs	r0, #17
 8005894:	183b      	adds	r3, r7, r0
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800589a:	4bc3      	ldr	r3, [pc, #780]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800589c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	055b      	lsls	r3, r3, #21
 80058a2:	4013      	ands	r3, r2
 80058a4:	d110      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	4bc0      	ldr	r3, [pc, #768]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058aa:	4bbf      	ldr	r3, [pc, #764]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058ac:	2180      	movs	r1, #128	; 0x80
 80058ae:	0549      	lsls	r1, r1, #21
 80058b0:	430a      	orrs	r2, r1
 80058b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80058b4:	4bbc      	ldr	r3, [pc, #752]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	055b      	lsls	r3, r3, #21
 80058bc:	4013      	ands	r3, r2
 80058be:	60bb      	str	r3, [r7, #8]
 80058c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058c2:	183b      	adds	r3, r7, r0
 80058c4:	2201      	movs	r2, #1
 80058c6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058c8:	4bb8      	ldr	r3, [pc, #736]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4bb7      	ldr	r3, [pc, #732]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	0049      	lsls	r1, r1, #1
 80058d2:	430a      	orrs	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058d6:	f7fd fac5 	bl	8002e64 <HAL_GetTick>
 80058da:	0003      	movs	r3, r0
 80058dc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058de:	e00b      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e0:	f7fd fac0 	bl	8002e64 <HAL_GetTick>
 80058e4:	0002      	movs	r2, r0
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d904      	bls.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80058ee:	2313      	movs	r3, #19
 80058f0:	18fb      	adds	r3, r7, r3
 80058f2:	2203      	movs	r2, #3
 80058f4:	701a      	strb	r2, [r3, #0]
        break;
 80058f6:	e005      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f8:	4bac      	ldr	r3, [pc, #688]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4013      	ands	r3, r2
 8005902:	d0ed      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005904:	2313      	movs	r3, #19
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d154      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800590e:	4ba6      	ldr	r3, [pc, #664]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005912:	23c0      	movs	r3, #192	; 0xc0
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4013      	ands	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d019      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	429a      	cmp	r2, r3
 8005928:	d014      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800592a:	4b9f      	ldr	r3, [pc, #636]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	4aa0      	ldr	r2, [pc, #640]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005930:	4013      	ands	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005934:	4b9c      	ldr	r3, [pc, #624]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005936:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005938:	4b9b      	ldr	r3, [pc, #620]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	0249      	lsls	r1, r1, #9
 800593e:	430a      	orrs	r2, r1
 8005940:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005942:	4b99      	ldr	r3, [pc, #612]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005944:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005946:	4b98      	ldr	r3, [pc, #608]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005948:	499a      	ldr	r1, [pc, #616]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800594a:	400a      	ands	r2, r1
 800594c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800594e:	4b96      	ldr	r3, [pc, #600]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2201      	movs	r2, #1
 8005958:	4013      	ands	r3, r2
 800595a:	d016      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fd fa82 	bl	8002e64 <HAL_GetTick>
 8005960:	0003      	movs	r3, r0
 8005962:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005964:	e00c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fd fa7d 	bl	8002e64 <HAL_GetTick>
 800596a:	0002      	movs	r2, r0
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	4a91      	ldr	r2, [pc, #580]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d904      	bls.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005976:	2313      	movs	r3, #19
 8005978:	18fb      	adds	r3, r7, r3
 800597a:	2203      	movs	r2, #3
 800597c:	701a      	strb	r2, [r3, #0]
            break;
 800597e:	e004      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005980:	4b89      	ldr	r3, [pc, #548]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2202      	movs	r2, #2
 8005986:	4013      	ands	r3, r2
 8005988:	d0ed      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800598a:	2313      	movs	r3, #19
 800598c:	18fb      	adds	r3, r7, r3
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005994:	4b84      	ldr	r3, [pc, #528]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005998:	4a85      	ldr	r2, [pc, #532]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800599a:	4013      	ands	r3, r2
 800599c:	0019      	movs	r1, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a2:	4b81      	ldr	r3, [pc, #516]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059a4:	430a      	orrs	r2, r1
 80059a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80059a8:	e00c      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059aa:	2312      	movs	r3, #18
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2213      	movs	r2, #19
 80059b0:	18ba      	adds	r2, r7, r2
 80059b2:	7812      	ldrb	r2, [r2, #0]
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e005      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b8:	2312      	movs	r3, #18
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	2213      	movs	r2, #19
 80059be:	18ba      	adds	r2, r7, r2
 80059c0:	7812      	ldrb	r2, [r2, #0]
 80059c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059c4:	2311      	movs	r3, #17
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d105      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d2:	4b75      	ldr	r3, [pc, #468]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d4:	4979      	ldr	r1, [pc, #484]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80059d6:	400a      	ands	r2, r1
 80059d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2201      	movs	r2, #1
 80059e0:	4013      	ands	r3, r2
 80059e2:	d009      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059e4:	4b70      	ldr	r3, [pc, #448]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e8:	2203      	movs	r2, #3
 80059ea:	4393      	bics	r3, r2
 80059ec:	0019      	movs	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4b6d      	ldr	r3, [pc, #436]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2202      	movs	r2, #2
 80059fe:	4013      	ands	r3, r2
 8005a00:	d009      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a02:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	220c      	movs	r2, #12
 8005a08:	4393      	bics	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a12:	430a      	orrs	r2, r1
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a24:	4a66      	ldr	r2, [pc, #408]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	0019      	movs	r1, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	4b5e      	ldr	r3, [pc, #376]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a30:	430a      	orrs	r2, r1
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	2380      	movs	r3, #128	; 0x80
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a40:	4b59      	ldr	r3, [pc, #356]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a44:	4a5f      	ldr	r2, [pc, #380]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	4b56      	ldr	r3, [pc, #344]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a50:	430a      	orrs	r2, r1
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a60:	4b51      	ldr	r3, [pc, #324]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	4a58      	ldr	r2, [pc, #352]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	0019      	movs	r1, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69da      	ldr	r2, [r3, #28]
 8005a6e:	4b4e      	ldr	r3, [pc, #312]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a70:	430a      	orrs	r2, r1
 8005a72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	0019      	movs	r1, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	01db      	lsls	r3, r3, #7
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d015      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a9e:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	0899      	lsrs	r1, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1a      	ldr	r2, [r3, #32]
 8005aaa:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aac:	430a      	orrs	r2, r1
 8005aae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1a      	ldr	r2, [r3, #32]
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	05db      	lsls	r3, r3, #23
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d106      	bne.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005abc:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	0249      	lsls	r1, r1, #9
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad6:	4b34      	ldr	r3, [pc, #208]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	4393      	bics	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae4:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	039b      	lsls	r3, r3, #14
 8005af2:	4013      	ands	r3, r2
 8005af4:	d016      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005af6:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	4a35      	ldr	r2, [pc, #212]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	0019      	movs	r1, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b04:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b06:	430a      	orrs	r2, r1
 8005b08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	03db      	lsls	r3, r3, #15
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d106      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b16:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4b23      	ldr	r3, [pc, #140]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b1c:	2180      	movs	r1, #128	; 0x80
 8005b1e:	0449      	lsls	r1, r1, #17
 8005b20:	430a      	orrs	r2, r1
 8005b22:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	03db      	lsls	r3, r3, #15
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d016      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b34:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b40:	430a      	orrs	r2, r1
 8005b42:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	2380      	movs	r3, #128	; 0x80
 8005b4a:	045b      	lsls	r3, r3, #17
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d106      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b50:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	0449      	lsls	r1, r1, #17
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4013      	ands	r3, r2
 8005b68:	d016      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	4a1a      	ldr	r2, [pc, #104]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	0019      	movs	r1, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695a      	ldr	r2, [r3, #20]
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	2380      	movs	r3, #128	; 0x80
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d106      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	0249      	lsls	r1, r1, #9
 8005b94:	430a      	orrs	r2, r1
 8005b96:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005b98:	2312      	movs	r3, #18
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b006      	add	sp, #24
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40007000 	.word	0x40007000
 8005bb0:	fffffcff 	.word	0xfffffcff
 8005bb4:	fffeffff 	.word	0xfffeffff
 8005bb8:	00001388 	.word	0x00001388
 8005bbc:	efffffff 	.word	0xefffffff
 8005bc0:	fffff3ff 	.word	0xfffff3ff
 8005bc4:	fff3ffff 	.word	0xfff3ffff
 8005bc8:	ffcfffff 	.word	0xffcfffff
 8005bcc:	ffffcfff 	.word	0xffffcfff
 8005bd0:	ffbfffff 	.word	0xffbfffff
 8005bd4:	feffffff 	.word	0xfeffffff
 8005bd8:	ffff3fff 	.word	0xffff3fff

08005bdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d136      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005bf2:	4bcd      	ldr	r3, [pc, #820]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005bf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bf6:	23c0      	movs	r3, #192	; 0xc0
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005bfe:	4bca      	ldr	r3, [pc, #808]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	2202      	movs	r2, #2
 8005c04:	4013      	ands	r3, r2
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d108      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d103      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	e31c      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c1c:	4bc2      	ldr	r3, [pc, #776]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c20:	2202      	movs	r2, #2
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d108      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005c28:	68fa      	ldr	r2, [r7, #12]
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d103      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005c32:	23fa      	movs	r3, #250	; 0xfa
 8005c34:	01db      	lsls	r3, r3, #7
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e30d      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c3a:	4bbb      	ldr	r3, [pc, #748]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	401a      	ands	r2, r3
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d000      	beq.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005c4c:	e303      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	23c0      	movs	r3, #192	; 0xc0
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d000      	beq.n	8005c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005c58:	e2fd      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8005c5a:	4bb4      	ldr	r3, [pc, #720]	; (8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e2fa      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005c60:	4bb1      	ldr	r3, [pc, #708]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	2203      	movs	r2, #3
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005c6c:	4bb0      	ldr	r3, [pc, #704]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	e00a      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005c72:	4bad      	ldr	r3, [pc, #692]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	2203      	movs	r2, #3
 8005c78:	4013      	ands	r3, r2
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d102      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005c7e:	4bad      	ldr	r3, [pc, #692]	; (8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e001      	b.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c88:	4ba7      	ldr	r3, [pc, #668]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	2207      	movs	r2, #7
 8005c90:	4013      	ands	r3, r2
 8005c92:	3301      	adds	r3, #1
 8005c94:	0019      	movs	r1, r3
 8005c96:	6938      	ldr	r0, [r7, #16]
 8005c98:	f7fa fa34 	bl	8000104 <__udivsi3>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	2380      	movs	r3, #128	; 0x80
 8005ca4:	03db      	lsls	r3, r3, #15
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d100      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005caa:	e28e      	b.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	03db      	lsls	r3, r3, #15
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d900      	bls.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005cb6:	e2b7      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	039b      	lsls	r3, r3, #14
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d100      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005cc2:	e253      	b.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	2380      	movs	r3, #128	; 0x80
 8005cc8:	039b      	lsls	r3, r3, #14
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d900      	bls.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005cce:	e2ab      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d100      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005cda:	e0b2      	b.n	8005e42 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d900      	bls.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005ce6:	e29f      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	01db      	lsls	r3, r3, #7
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d100      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005cf2:	e103      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	01db      	lsls	r3, r3, #7
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d900      	bls.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005cfe:	e293      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d100      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005d0a:	e165      	b.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d900      	bls.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005d16:	e287      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d100      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005d22:	e1e3      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d900      	bls.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005d2e:	e27b      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d100      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005d3a:	e197      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d900      	bls.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005d46:	e26f      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d100      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005d4e:	e118      	b.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d900      	bls.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005d56:	e267      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d100      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005d5e:	e093      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d900      	bls.n	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005d66:	e25f      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d003      	beq.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d033      	beq.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005d74:	e258      	b.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005d76:	4b6c      	ldr	r3, [pc, #432]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d86:	f7ff fd5b 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	617b      	str	r3, [r7, #20]
        break;
 8005d8e:	e24d      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d104      	bne.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d96:	f7ff fcc7 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	617b      	str	r3, [r7, #20]
        break;
 8005d9e:	e245      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005da0:	4b61      	ldr	r3, [pc, #388]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	401a      	ands	r2, r3
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d105      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d102      	bne.n	8005dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8005db8:	4b5d      	ldr	r3, [pc, #372]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005dba:	617b      	str	r3, [r7, #20]
        break;
 8005dbc:	e236      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005dbe:	4b5a      	ldr	r3, [pc, #360]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d000      	beq.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8005dca:	e22f      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d000      	beq.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8005dd2:	e22b      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	617b      	str	r3, [r7, #20]
        break;
 8005dda:	e227      	b.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005ddc:	4b52      	ldr	r3, [pc, #328]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	220c      	movs	r2, #12
 8005de2:	4013      	ands	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d104      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005dec:	f7ff fd28 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8005df0:	0003      	movs	r3, r0
 8005df2:	617b      	str	r3, [r7, #20]
        break;
 8005df4:	e21c      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d104      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dfc:	f7ff fc94 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005e00:	0003      	movs	r3, r0
 8005e02:	617b      	str	r3, [r7, #20]
        break;
 8005e04:	e214      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005e06:	4b48      	ldr	r3, [pc, #288]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	2380      	movs	r3, #128	; 0x80
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d105      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d102      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8005e1e:	4b44      	ldr	r3, [pc, #272]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e20:	617b      	str	r3, [r7, #20]
        break;
 8005e22:	e205      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005e24:	4b40      	ldr	r3, [pc, #256]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	2202      	movs	r2, #2
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d000      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005e30:	e1fe      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d000      	beq.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005e38:	e1fa      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	617b      	str	r3, [r7, #20]
        break;
 8005e40:	e1f6      	b.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	2240      	movs	r2, #64	; 0x40
 8005e48:	4013      	ands	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	2380      	movs	r3, #128	; 0x80
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	401a      	ands	r2, r3
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d105      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8005e64:	4b34      	ldr	r3, [pc, #208]	; (8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8005e66:	617b      	str	r3, [r7, #20]
        break;
 8005e68:	e1e4      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	2202      	movs	r2, #2
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d000      	beq.n	8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005e76:	e1dd      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d000      	beq.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005e7e:	e1d9      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	617b      	str	r3, [r7, #20]
        break;
 8005e86:	e1d5      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e88:	4b27      	ldr	r3, [pc, #156]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e8c:	23c0      	movs	r3, #192	; 0xc0
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e9a:	f7ff fcd1 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	617b      	str	r3, [r7, #20]
        break;
 8005ea2:	e1c9      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	2380      	movs	r3, #128	; 0x80
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d104      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8005eae:	f7ff fc3b 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	617b      	str	r3, [r7, #20]
        break;
 8005eb6:	e1bf      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005eb8:	4b1b      	ldr	r3, [pc, #108]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	401a      	ands	r2, r3
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d107      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d102      	bne.n	8005eda <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8005ed4:	4b16      	ldr	r3, [pc, #88]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005ed6:	617b      	str	r3, [r7, #20]
        break;
 8005ed8:	e1ae      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005eda:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d000      	beq.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005ee6:	e1a7      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	23c0      	movs	r3, #192	; 0xc0
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d000      	beq.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005ef2:	e1a1      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	617b      	str	r3, [r7, #20]
        break;
 8005efa:	e19d      	b.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	0f9b      	lsrs	r3, r3, #30
 8005f02:	079b      	lsls	r3, r3, #30
 8005f04:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f0c:	f7ff fc0c 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005f10:	0003      	movs	r3, r0
 8005f12:	617b      	str	r3, [r7, #20]
        break;
 8005f14:	e192      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	2380      	movs	r3, #128	; 0x80
 8005f1a:	061b      	lsls	r3, r3, #24
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d10d      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8005f20:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005f22:	617b      	str	r3, [r7, #20]
        break;
 8005f24:	e18a      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	0003d090 	.word	0x0003d090
 8005f30:	00f42400 	.word	0x00f42400
 8005f34:	007a1200 	.word	0x007a1200
 8005f38:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	05db      	lsls	r3, r3, #23
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d000      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8005f46:	e179      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005f48:	4bc5      	ldr	r3, [pc, #788]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	025b      	lsls	r3, r3, #9
 8005f50:	4013      	ands	r3, r2
 8005f52:	d100      	bne.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005f54:	e172      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f56:	4bc2      	ldr	r3, [pc, #776]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	227f      	movs	r2, #127	; 0x7f
 8005f5e:	4013      	ands	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	435a      	muls	r2, r3
 8005f68:	4bbd      	ldr	r3, [pc, #756]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	0c5b      	lsrs	r3, r3, #17
 8005f6e:	211f      	movs	r1, #31
 8005f70:	400b      	ands	r3, r1
 8005f72:	3301      	adds	r3, #1
 8005f74:	0019      	movs	r1, r3
 8005f76:	0010      	movs	r0, r2
 8005f78:	f7fa f8c4 	bl	8000104 <__udivsi3>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	617b      	str	r3, [r7, #20]
        break;
 8005f80:	e15c      	b.n	800623c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005f82:	4bb7      	ldr	r3, [pc, #732]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f86:	23c0      	movs	r3, #192	; 0xc0
 8005f88:	019b      	lsls	r3, r3, #6
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f94:	f7ff fc54 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	617b      	str	r3, [r7, #20]
        break;
 8005f9c:	e150      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	2380      	movs	r3, #128	; 0x80
 8005fa2:	015b      	lsls	r3, r3, #5
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d104      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fa8:	f7ff fbbe 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8005fac:	0003      	movs	r3, r0
 8005fae:	617b      	str	r3, [r7, #20]
        break;
 8005fb0:	e146      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005fb2:	4bab      	ldr	r3, [pc, #684]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	401a      	ands	r2, r3
 8005fbc:	2380      	movs	r3, #128	; 0x80
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d000      	beq.n	8005fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8005fc4:	e13c      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	019b      	lsls	r3, r3, #6
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d000      	beq.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8005fd0:	e136      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8005fd2:	4ba4      	ldr	r3, [pc, #656]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8005fd4:	617b      	str	r3, [r7, #20]
        break;
 8005fd6:	e133      	b.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005fd8:	4ba1      	ldr	r3, [pc, #644]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fdc:	23c0      	movs	r3, #192	; 0xc0
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	01db      	lsls	r3, r3, #7
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d11c      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005fee:	4b9c      	ldr	r3, [pc, #624]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	025b      	lsls	r3, r3, #9
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d100      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8005ffa:	e123      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005ffc:	4b98      	ldr	r3, [pc, #608]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	227f      	movs	r2, #127	; 0x7f
 8006004:	4013      	ands	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	435a      	muls	r2, r3
 800600e:	4b94      	ldr	r3, [pc, #592]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	0c5b      	lsrs	r3, r3, #17
 8006014:	211f      	movs	r1, #31
 8006016:	400b      	ands	r3, r1
 8006018:	3301      	adds	r3, #1
 800601a:	0019      	movs	r1, r3
 800601c:	0010      	movs	r0, r2
 800601e:	f7fa f871 	bl	8000104 <__udivsi3>
 8006022:	0003      	movs	r3, r0
 8006024:	617b      	str	r3, [r7, #20]
        break;
 8006026:	e10d      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d104      	bne.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800602e:	f7ff fb7b 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8006032:	0003      	movs	r3, r0
 8006034:	617b      	str	r3, [r7, #20]
        break;
 8006036:	e105      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006038:	4b89      	ldr	r3, [pc, #548]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	401a      	ands	r2, r3
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	429a      	cmp	r2, r3
 8006048:	d107      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006054:	4b83      	ldr	r3, [pc, #524]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006056:	617b      	str	r3, [r7, #20]
        break;
 8006058:	e0f4      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	23c0      	movs	r3, #192	; 0xc0
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	429a      	cmp	r2, r3
 8006062:	d000      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006064:	e0ee      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006066:	4b80      	ldr	r3, [pc, #512]	; (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006068:	617b      	str	r3, [r7, #20]
        break;
 800606a:	e0eb      	b.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800606c:	4b7c      	ldr	r3, [pc, #496]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800606e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006070:	23c0      	movs	r3, #192	; 0xc0
 8006072:	031b      	lsls	r3, r3, #12
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800607e:	f7ff fbdf 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8006082:	0003      	movs	r3, r0
 8006084:	617b      	str	r3, [r7, #20]
        break;
 8006086:	e0df      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006088:	4b75      	ldr	r3, [pc, #468]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800608a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800608c:	2202      	movs	r2, #2
 800608e:	4013      	ands	r3, r2
 8006090:	2b02      	cmp	r3, #2
 8006092:	d108      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	02db      	lsls	r3, r3, #11
 800609a:	429a      	cmp	r2, r3
 800609c:	d103      	bne.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800609e:	23fa      	movs	r3, #250	; 0xfa
 80060a0:	01db      	lsls	r3, r3, #7
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	e021      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80060a6:	4b6e      	ldr	r3, [pc, #440]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	2380      	movs	r3, #128	; 0x80
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	401a      	ands	r2, r3
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d107      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	031b      	lsls	r3, r3, #12
 80060be:	429a      	cmp	r2, r3
 80060c0:	d102      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80060c2:	4b68      	ldr	r3, [pc, #416]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	e010      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80060c8:	4b65      	ldr	r3, [pc, #404]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060cc:	2202      	movs	r2, #2
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d000      	beq.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80060d4:	e0b8      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	23c0      	movs	r3, #192	; 0xc0
 80060da:	031b      	lsls	r3, r3, #12
 80060dc:	429a      	cmp	r2, r3
 80060de:	d000      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80060e0:	e0b2      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	617b      	str	r3, [r7, #20]
        break;
 80060e8:	e0ae      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80060ea:	e0ad      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80060ec:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060f0:	23c0      	movs	r3, #192	; 0xc0
 80060f2:	039b      	lsls	r3, r3, #14
 80060f4:	4013      	ands	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060fe:	f7ff fb9f 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8006102:	0003      	movs	r3, r0
 8006104:	617b      	str	r3, [r7, #20]
        break;
 8006106:	e0a1      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006108:	4b55      	ldr	r3, [pc, #340]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800610a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800610c:	2202      	movs	r2, #2
 800610e:	4013      	ands	r3, r2
 8006110:	2b02      	cmp	r3, #2
 8006112:	d108      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	035b      	lsls	r3, r3, #13
 800611a:	429a      	cmp	r2, r3
 800611c:	d103      	bne.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800611e:	23fa      	movs	r3, #250	; 0xfa
 8006120:	01db      	lsls	r3, r3, #7
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e021      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006126:	4b4e      	ldr	r3, [pc, #312]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	401a      	ands	r2, r3
 8006130:	2380      	movs	r3, #128	; 0x80
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	429a      	cmp	r2, r3
 8006136:	d107      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	039b      	lsls	r3, r3, #14
 800613e:	429a      	cmp	r2, r3
 8006140:	d102      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8006142:	4b48      	ldr	r3, [pc, #288]	; (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e010      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006148:	4b45      	ldr	r3, [pc, #276]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614c:	2202      	movs	r2, #2
 800614e:	4013      	ands	r3, r2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d000      	beq.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006154:	e07a      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	23c0      	movs	r3, #192	; 0xc0
 800615a:	039b      	lsls	r3, r3, #14
 800615c:	429a      	cmp	r2, r3
 800615e:	d000      	beq.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006160:	e074      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	617b      	str	r3, [r7, #20]
        break;
 8006168:	e070      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800616a:	e06f      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800616c:	4b3c      	ldr	r3, [pc, #240]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800616e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	03db      	lsls	r3, r3, #15
 8006174:	4013      	ands	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	2380      	movs	r3, #128	; 0x80
 800617c:	03db      	lsls	r3, r3, #15
 800617e:	429a      	cmp	r2, r3
 8006180:	d11b      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006182:	4b37      	ldr	r3, [pc, #220]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	2380      	movs	r3, #128	; 0x80
 8006188:	045b      	lsls	r3, r3, #17
 800618a:	4013      	ands	r3, r2
 800618c:	d060      	beq.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800618e:	4b34      	ldr	r3, [pc, #208]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	227f      	movs	r2, #127	; 0x7f
 8006196:	4013      	ands	r3, r2
 8006198:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	435a      	muls	r2, r3
 80061a0:	4b2f      	ldr	r3, [pc, #188]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	0e5b      	lsrs	r3, r3, #25
 80061a6:	2107      	movs	r1, #7
 80061a8:	400b      	ands	r3, r1
 80061aa:	3301      	adds	r3, #1
 80061ac:	0019      	movs	r1, r3
 80061ae:	0010      	movs	r0, r2
 80061b0:	f7f9 ffa8 	bl	8000104 <__udivsi3>
 80061b4:	0003      	movs	r3, r0
 80061b6:	617b      	str	r3, [r7, #20]
        break;
 80061b8:	e04a      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d147      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061c0:	f7ff fb3e 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 80061c4:	0003      	movs	r3, r0
 80061c6:	617b      	str	r3, [r7, #20]
        break;
 80061c8:	e042      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80061ca:	4b25      	ldr	r3, [pc, #148]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	045b      	lsls	r3, r3, #17
 80061d2:	4013      	ands	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	045b      	lsls	r3, r3, #17
 80061dc:	429a      	cmp	r2, r3
 80061de:	d11b      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80061e0:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	045b      	lsls	r3, r3, #17
 80061e8:	4013      	ands	r3, r2
 80061ea:	d033      	beq.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061ec:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	227f      	movs	r2, #127	; 0x7f
 80061f4:	4013      	ands	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	435a      	muls	r2, r3
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	0e5b      	lsrs	r3, r3, #25
 8006204:	2107      	movs	r1, #7
 8006206:	400b      	ands	r3, r1
 8006208:	3301      	adds	r3, #1
 800620a:	0019      	movs	r1, r3
 800620c:	0010      	movs	r0, r2
 800620e:	f7f9 ff79 	bl	8000104 <__udivsi3>
 8006212:	0003      	movs	r3, r0
 8006214:	617b      	str	r3, [r7, #20]
        break;
 8006216:	e01d      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d11a      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800621e:	f7ff fb0f 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8006222:	0003      	movs	r3, r0
 8006224:	617b      	str	r3, [r7, #20]
        break;
 8006226:	e015      	b.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006228:	46c0      	nop			; (mov r8, r8)
 800622a:	e014      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800622c:	46c0      	nop			; (mov r8, r8)
 800622e:	e012      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	e010      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	e00e      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	e00c      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800623c:	46c0      	nop			; (mov r8, r8)
 800623e:	e00a      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006240:	46c0      	nop			; (mov r8, r8)
 8006242:	e008      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	e006      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006248:	46c0      	nop			; (mov r8, r8)
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800624c:	46c0      	nop			; (mov r8, r8)
 800624e:	e002      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006250:	46c0      	nop			; (mov r8, r8)
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006254:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006256:	697b      	ldr	r3, [r7, #20]
}
 8006258:	0018      	movs	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	b006      	add	sp, #24
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	00f42400 	.word	0x00f42400
 8006268:	0000bb80 	.word	0x0000bb80

0800626c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e0a8      	b.n	80063d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	2382      	movs	r3, #130	; 0x82
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	429a      	cmp	r2, r3
 8006290:	d009      	beq.n	80062a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	61da      	str	r2, [r3, #28]
 8006298:	e005      	b.n	80062a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	225d      	movs	r2, #93	; 0x5d
 80062b0:	5c9b      	ldrb	r3, [r3, r2]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d107      	bne.n	80062c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	225c      	movs	r2, #92	; 0x5c
 80062bc:	2100      	movs	r1, #0
 80062be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fc fad8 	bl	8002878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	225d      	movs	r2, #93	; 0x5d
 80062cc:	2102      	movs	r1, #2
 80062ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2140      	movs	r1, #64	; 0x40
 80062dc:	438a      	bics	r2, r1
 80062de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	23e0      	movs	r3, #224	; 0xe0
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d902      	bls.n	80062f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e002      	b.n	80062f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	015b      	lsls	r3, r3, #5
 80062f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	23f0      	movs	r3, #240	; 0xf0
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	429a      	cmp	r2, r3
 8006302:	d008      	beq.n	8006316 <HAL_SPI_Init+0xaa>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	23e0      	movs	r3, #224	; 0xe0
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	429a      	cmp	r2, r3
 800630e:	d002      	beq.n	8006316 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	2382      	movs	r3, #130	; 0x82
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	401a      	ands	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6899      	ldr	r1, [r3, #8]
 8006324:	2384      	movs	r3, #132	; 0x84
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	400b      	ands	r3, r1
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2102      	movs	r1, #2
 8006332:	400b      	ands	r3, r1
 8006334:	431a      	orrs	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	2101      	movs	r1, #1
 800633c:	400b      	ands	r3, r1
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6999      	ldr	r1, [r3, #24]
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	400b      	ands	r3, r1
 800634a:	431a      	orrs	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	2138      	movs	r1, #56	; 0x38
 8006352:	400b      	ands	r3, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	2180      	movs	r1, #128	; 0x80
 800635c:	400b      	ands	r3, r1
 800635e:	431a      	orrs	r2, r3
 8006360:	0011      	movs	r1, r2
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	019b      	lsls	r3, r3, #6
 800636a:	401a      	ands	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	0c1b      	lsrs	r3, r3, #16
 800637a:	2204      	movs	r2, #4
 800637c:	401a      	ands	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2110      	movs	r1, #16
 8006384:	400b      	ands	r3, r1
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638c:	2108      	movs	r1, #8
 800638e:	400b      	ands	r3, r1
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68d9      	ldr	r1, [r3, #12]
 8006396:	23f0      	movs	r3, #240	; 0xf0
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	400b      	ands	r3, r1
 800639c:	431a      	orrs	r2, r3
 800639e:	0011      	movs	r1, r2
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	015b      	lsls	r3, r3, #5
 80063a6:	401a      	ands	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	430a      	orrs	r2, r1
 80063ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69da      	ldr	r2, [r3, #28]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4907      	ldr	r1, [pc, #28]	; (80063d8 <HAL_SPI_Init+0x16c>)
 80063bc:	400a      	ands	r2, r1
 80063be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	225d      	movs	r2, #93	; 0x5d
 80063ca:	2101      	movs	r1, #1
 80063cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b004      	add	sp, #16
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	fffff7ff 	.word	0xfffff7ff

080063dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	1dbb      	adds	r3, r7, #6
 80063ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ec:	231f      	movs	r3, #31
 80063ee:	18fb      	adds	r3, r7, r3
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	225c      	movs	r2, #92	; 0x5c
 80063f8:	5c9b      	ldrb	r3, [r3, r2]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_SPI_Transmit+0x26>
 80063fe:	2302      	movs	r3, #2
 8006400:	e140      	b.n	8006684 <HAL_SPI_Transmit+0x2a8>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	225c      	movs	r2, #92	; 0x5c
 8006406:	2101      	movs	r1, #1
 8006408:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800640a:	f7fc fd2b 	bl	8002e64 <HAL_GetTick>
 800640e:	0003      	movs	r3, r0
 8006410:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006412:	2316      	movs	r3, #22
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	1dba      	adds	r2, r7, #6
 8006418:	8812      	ldrh	r2, [r2, #0]
 800641a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	225d      	movs	r2, #93	; 0x5d
 8006420:	5c9b      	ldrb	r3, [r3, r2]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	d004      	beq.n	8006432 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006428:	231f      	movs	r3, #31
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2202      	movs	r2, #2
 800642e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006430:	e11d      	b.n	800666e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_SPI_Transmit+0x64>
 8006438:	1dbb      	adds	r3, r7, #6
 800643a:	881b      	ldrh	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006440:	231f      	movs	r3, #31
 8006442:	18fb      	adds	r3, r7, r3
 8006444:	2201      	movs	r2, #1
 8006446:	701a      	strb	r2, [r3, #0]
    goto error;
 8006448:	e111      	b.n	800666e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	225d      	movs	r2, #93	; 0x5d
 800644e:	2103      	movs	r1, #3
 8006450:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1dba      	adds	r2, r7, #6
 8006462:	8812      	ldrh	r2, [r2, #0]
 8006464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1dba      	adds	r2, r7, #6
 800646a:	8812      	ldrh	r2, [r2, #0]
 800646c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2244      	movs	r2, #68	; 0x44
 8006478:	2100      	movs	r1, #0
 800647a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2246      	movs	r2, #70	; 0x46
 8006480:	2100      	movs	r1, #0
 8006482:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	429a      	cmp	r2, r3
 800649a:	d110      	bne.n	80064be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2140      	movs	r1, #64	; 0x40
 80064a8:	438a      	bics	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2180      	movs	r1, #128	; 0x80
 80064b8:	01c9      	lsls	r1, r1, #7
 80064ba:	430a      	orrs	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2240      	movs	r2, #64	; 0x40
 80064c6:	4013      	ands	r3, r2
 80064c8:	2b40      	cmp	r3, #64	; 0x40
 80064ca:	d007      	beq.n	80064dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2140      	movs	r1, #64	; 0x40
 80064d8:	430a      	orrs	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	23e0      	movs	r3, #224	; 0xe0
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d94e      	bls.n	8006586 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <HAL_SPI_Transmit+0x11e>
 80064f0:	2316      	movs	r3, #22
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d13f      	bne.n	800657a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fe:	881a      	ldrh	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650a:	1c9a      	adds	r2, r3, #2
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006514:	b29b      	uxth	r3, r3
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800651e:	e02c      	b.n	800657a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2202      	movs	r2, #2
 8006528:	4013      	ands	r3, r2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d112      	bne.n	8006554 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	881a      	ldrh	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653e:	1c9a      	adds	r2, r3, #2
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006548:	b29b      	uxth	r3, r3
 800654a:	3b01      	subs	r3, #1
 800654c:	b29a      	uxth	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006552:	e012      	b.n	800657a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006554:	f7fc fc86 	bl	8002e64 <HAL_GetTick>
 8006558:	0002      	movs	r2, r0
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d802      	bhi.n	800656a <HAL_SPI_Transmit+0x18e>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	3301      	adds	r3, #1
 8006568:	d102      	bne.n	8006570 <HAL_SPI_Transmit+0x194>
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006570:	231f      	movs	r3, #31
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	2203      	movs	r2, #3
 8006576:	701a      	strb	r2, [r3, #0]
          goto error;
 8006578:	e079      	b.n	800666e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1cd      	bne.n	8006520 <HAL_SPI_Transmit+0x144>
 8006584:	e04f      	b.n	8006626 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <HAL_SPI_Transmit+0x1bc>
 800658e:	2316      	movs	r3, #22
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d141      	bne.n	800661c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	330c      	adds	r3, #12
 80065a2:	7812      	ldrb	r2, [r2, #0]
 80065a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	3b01      	subs	r3, #1
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80065be:	e02d      	b.n	800661c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2202      	movs	r2, #2
 80065c8:	4013      	ands	r3, r2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d113      	bne.n	80065f6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	7812      	ldrb	r2, [r2, #0]
 80065da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065f4:	e012      	b.n	800661c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065f6:	f7fc fc35 	bl	8002e64 <HAL_GetTick>
 80065fa:	0002      	movs	r2, r0
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d802      	bhi.n	800660c <HAL_SPI_Transmit+0x230>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	d102      	bne.n	8006612 <HAL_SPI_Transmit+0x236>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006612:	231f      	movs	r3, #31
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2203      	movs	r2, #3
 8006618:	701a      	strb	r2, [r3, #0]
          goto error;
 800661a:	e028      	b.n	800666e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1cc      	bne.n	80065c0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	0018      	movs	r0, r3
 800662e:	f000 fde9 	bl	8007204 <SPI_EndRxTxTransaction>
 8006632:	1e03      	subs	r3, r0, #0
 8006634:	d002      	beq.n	800663c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665e:	2b00      	cmp	r3, #0
 8006660:	d004      	beq.n	800666c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006662:	231f      	movs	r3, #31
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	e000      	b.n	800666e <HAL_SPI_Transmit+0x292>
  }

error:
 800666c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	225d      	movs	r2, #93	; 0x5d
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	225c      	movs	r2, #92	; 0x5c
 800667a:	2100      	movs	r1, #0
 800667c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800667e:	231f      	movs	r3, #31
 8006680:	18fb      	adds	r3, r7, r3
 8006682:	781b      	ldrb	r3, [r3, #0]
}
 8006684:	0018      	movs	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	b008      	add	sp, #32
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b089      	sub	sp, #36	; 0x24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	1dbb      	adds	r3, r7, #6
 800669a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800669c:	2317      	movs	r3, #23
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	2200      	movs	r2, #0
 80066a2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	2382      	movs	r3, #130	; 0x82
 80066aa:	005b      	lsls	r3, r3, #1
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d113      	bne.n	80066d8 <HAL_SPI_Receive+0x4c>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10f      	bne.n	80066d8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	225d      	movs	r2, #93	; 0x5d
 80066bc:	2104      	movs	r1, #4
 80066be:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066c0:	1dbb      	adds	r3, r7, #6
 80066c2:	881c      	ldrh	r4, [r3, #0]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	0023      	movs	r3, r4
 80066d0:	f000 f928 	bl	8006924 <HAL_SPI_TransmitReceive>
 80066d4:	0003      	movs	r3, r0
 80066d6:	e11c      	b.n	8006912 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	225c      	movs	r2, #92	; 0x5c
 80066dc:	5c9b      	ldrb	r3, [r3, r2]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_SPI_Receive+0x5a>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e115      	b.n	8006912 <HAL_SPI_Receive+0x286>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	225c      	movs	r2, #92	; 0x5c
 80066ea:	2101      	movs	r1, #1
 80066ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066ee:	f7fc fbb9 	bl	8002e64 <HAL_GetTick>
 80066f2:	0003      	movs	r3, r0
 80066f4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	225d      	movs	r2, #93	; 0x5d
 80066fa:	5c9b      	ldrb	r3, [r3, r2]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d004      	beq.n	800670c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006702:	2317      	movs	r3, #23
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	2202      	movs	r2, #2
 8006708:	701a      	strb	r2, [r3, #0]
    goto error;
 800670a:	e0f7      	b.n	80068fc <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_SPI_Receive+0x8e>
 8006712:	1dbb      	adds	r3, r7, #6
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800671a:	2317      	movs	r3, #23
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
    goto error;
 8006722:	e0eb      	b.n	80068fc <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	225d      	movs	r2, #93	; 0x5d
 8006728:	2104      	movs	r1, #4
 800672a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1dba      	adds	r2, r7, #6
 800673c:	2144      	movs	r1, #68	; 0x44
 800673e:	8812      	ldrh	r2, [r2, #0]
 8006740:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1dba      	adds	r2, r7, #6
 8006746:	2146      	movs	r1, #70	; 0x46
 8006748:	8812      	ldrh	r2, [r2, #0]
 800674a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	23e0      	movs	r3, #224	; 0xe0
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	429a      	cmp	r2, r3
 8006774:	d908      	bls.n	8006788 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4966      	ldr	r1, [pc, #408]	; (800691c <HAL_SPI_Receive+0x290>)
 8006782:	400a      	ands	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	e008      	b.n	800679a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2180      	movs	r1, #128	; 0x80
 8006794:	0149      	lsls	r1, r1, #5
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	021b      	lsls	r3, r3, #8
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d10f      	bne.n	80067c6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2140      	movs	r1, #64	; 0x40
 80067b2:	438a      	bics	r2, r1
 80067b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4957      	ldr	r1, [pc, #348]	; (8006920 <HAL_SPI_Receive+0x294>)
 80067c2:	400a      	ands	r2, r1
 80067c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2240      	movs	r2, #64	; 0x40
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b40      	cmp	r3, #64	; 0x40
 80067d2:	d007      	beq.n	80067e4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2140      	movs	r1, #64	; 0x40
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	23e0      	movs	r3, #224	; 0xe0
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d900      	bls.n	80067f2 <HAL_SPI_Receive+0x166>
 80067f0:	e069      	b.n	80068c6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067f2:	e031      	b.n	8006858 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2201      	movs	r2, #1
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d117      	bne.n	8006832 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	330c      	adds	r3, #12
 8006808:	001a      	movs	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2246      	movs	r2, #70	; 0x46
 8006822:	5a9b      	ldrh	r3, [r3, r2]
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b299      	uxth	r1, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2246      	movs	r2, #70	; 0x46
 800682e:	5299      	strh	r1, [r3, r2]
 8006830:	e012      	b.n	8006858 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006832:	f7fc fb17 	bl	8002e64 <HAL_GetTick>
 8006836:	0002      	movs	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	429a      	cmp	r2, r3
 8006840:	d802      	bhi.n	8006848 <HAL_SPI_Receive+0x1bc>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	d102      	bne.n	800684e <HAL_SPI_Receive+0x1c2>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800684e:	2317      	movs	r3, #23
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	2203      	movs	r2, #3
 8006854:	701a      	strb	r2, [r3, #0]
          goto error;
 8006856:	e051      	b.n	80068fc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2246      	movs	r2, #70	; 0x46
 800685c:	5a9b      	ldrh	r3, [r3, r2]
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1c7      	bne.n	80067f4 <HAL_SPI_Receive+0x168>
 8006864:	e035      	b.n	80068d2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2201      	movs	r2, #1
 800686e:	4013      	ands	r3, r2
 8006870:	2b01      	cmp	r3, #1
 8006872:	d115      	bne.n	80068a0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	b292      	uxth	r2, r2
 8006880:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	1c9a      	adds	r2, r3, #2
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2246      	movs	r2, #70	; 0x46
 8006890:	5a9b      	ldrh	r3, [r3, r2]
 8006892:	b29b      	uxth	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	b299      	uxth	r1, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2246      	movs	r2, #70	; 0x46
 800689c:	5299      	strh	r1, [r3, r2]
 800689e:	e012      	b.n	80068c6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068a0:	f7fc fae0 	bl	8002e64 <HAL_GetTick>
 80068a4:	0002      	movs	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d802      	bhi.n	80068b6 <HAL_SPI_Receive+0x22a>
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	3301      	adds	r3, #1
 80068b4:	d102      	bne.n	80068bc <HAL_SPI_Receive+0x230>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80068bc:	2317      	movs	r3, #23
 80068be:	18fb      	adds	r3, r7, r3
 80068c0:	2203      	movs	r2, #3
 80068c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80068c4:	e01a      	b.n	80068fc <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2246      	movs	r2, #70	; 0x46
 80068ca:	5a9b      	ldrh	r3, [r3, r2]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1c9      	bne.n	8006866 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	0018      	movs	r0, r3
 80068da:	f000 fc35 	bl	8007148 <SPI_EndRxTransaction>
 80068de:	1e03      	subs	r3, r0, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80068f0:	2317      	movs	r3, #23
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	2201      	movs	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e000      	b.n	80068fc <HAL_SPI_Receive+0x270>
  }

error :
 80068fa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	225d      	movs	r2, #93	; 0x5d
 8006900:	2101      	movs	r1, #1
 8006902:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	225c      	movs	r2, #92	; 0x5c
 8006908:	2100      	movs	r1, #0
 800690a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800690c:	2317      	movs	r3, #23
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	781b      	ldrb	r3, [r3, #0]
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	b007      	add	sp, #28
 8006918:	bd90      	pop	{r4, r7, pc}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	ffffefff 	.word	0xffffefff
 8006920:	ffffbfff 	.word	0xffffbfff

08006924 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08a      	sub	sp, #40	; 0x28
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	001a      	movs	r2, r3
 8006932:	1cbb      	adds	r3, r7, #2
 8006934:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006936:	2301      	movs	r3, #1
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800693a:	2323      	movs	r3, #35	; 0x23
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	2200      	movs	r2, #0
 8006940:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	225c      	movs	r2, #92	; 0x5c
 8006946:	5c9b      	ldrb	r3, [r3, r2]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x2c>
 800694c:	2302      	movs	r3, #2
 800694e:	e1b5      	b.n	8006cbc <HAL_SPI_TransmitReceive+0x398>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	225c      	movs	r2, #92	; 0x5c
 8006954:	2101      	movs	r1, #1
 8006956:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006958:	f7fc fa84 	bl	8002e64 <HAL_GetTick>
 800695c:	0003      	movs	r3, r0
 800695e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006960:	201b      	movs	r0, #27
 8006962:	183b      	adds	r3, r7, r0
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	215d      	movs	r1, #93	; 0x5d
 8006968:	5c52      	ldrb	r2, [r2, r1]
 800696a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006972:	2312      	movs	r3, #18
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	1cba      	adds	r2, r7, #2
 8006978:	8812      	ldrh	r2, [r2, #0]
 800697a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800697c:	183b      	adds	r3, r7, r0
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d011      	beq.n	80069a8 <HAL_SPI_TransmitReceive+0x84>
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	2382      	movs	r3, #130	; 0x82
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	429a      	cmp	r2, r3
 800698c:	d107      	bne.n	800699e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <HAL_SPI_TransmitReceive+0x7a>
 8006996:	183b      	adds	r3, r7, r0
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d004      	beq.n	80069a8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800699e:	2323      	movs	r3, #35	; 0x23
 80069a0:	18fb      	adds	r3, r7, r3
 80069a2:	2202      	movs	r2, #2
 80069a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80069a6:	e17e      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d006      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x98>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x98>
 80069b4:	1cbb      	adds	r3, r7, #2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80069bc:	2323      	movs	r3, #35	; 0x23
 80069be:	18fb      	adds	r3, r7, r3
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80069c4:	e16f      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	225d      	movs	r2, #93	; 0x5d
 80069ca:	5c9b      	ldrb	r3, [r3, r2]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d003      	beq.n	80069da <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	225d      	movs	r2, #93	; 0x5d
 80069d6:	2105      	movs	r1, #5
 80069d8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1cba      	adds	r2, r7, #2
 80069ea:	2146      	movs	r1, #70	; 0x46
 80069ec:	8812      	ldrh	r2, [r2, #0]
 80069ee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	1cba      	adds	r2, r7, #2
 80069f4:	2144      	movs	r1, #68	; 0x44
 80069f6:	8812      	ldrh	r2, [r2, #0]
 80069f8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	1cba      	adds	r2, r7, #2
 8006a04:	8812      	ldrh	r2, [r2, #0]
 8006a06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	1cba      	adds	r2, r7, #2
 8006a0c:	8812      	ldrh	r2, [r2, #0]
 8006a0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	23e0      	movs	r3, #224	; 0xe0
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d908      	bls.n	8006a3a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	49a4      	ldr	r1, [pc, #656]	; (8006cc4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006a34:	400a      	ands	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	e008      	b.n	8006a4c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2180      	movs	r1, #128	; 0x80
 8006a46:	0149      	lsls	r1, r1, #5
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2240      	movs	r2, #64	; 0x40
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d007      	beq.n	8006a6a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2140      	movs	r1, #64	; 0x40
 8006a66:	430a      	orrs	r2, r1
 8006a68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68da      	ldr	r2, [r3, #12]
 8006a6e:	23e0      	movs	r3, #224	; 0xe0
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d800      	bhi.n	8006a78 <HAL_SPI_TransmitReceive+0x154>
 8006a76:	e07f      	b.n	8006b78 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x168>
 8006a80:	2312      	movs	r3, #18
 8006a82:	18fb      	adds	r3, r7, r3
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d000      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x168>
 8006a8a:	e069      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	1c9a      	adds	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab0:	e056      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d11b      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1d4>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x1d4>
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d113      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	881a      	ldrh	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2201      	movs	r2, #1
 8006b00:	4013      	ands	r3, r2
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11c      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x21c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2246      	movs	r2, #70	; 0x46
 8006b0a:	5a9b      	ldrh	r3, [r3, r2]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d016      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	b292      	uxth	r2, r2
 8006b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2246      	movs	r2, #70	; 0x46
 8006b2e:	5a9b      	ldrh	r3, [r3, r2]
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b299      	uxth	r1, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2246      	movs	r2, #70	; 0x46
 8006b3a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b40:	f7fc f990 	bl	8002e64 <HAL_GetTick>
 8006b44:	0002      	movs	r2, r0
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d807      	bhi.n	8006b60 <HAL_SPI_TransmitReceive+0x23c>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	3301      	adds	r3, #1
 8006b54:	d004      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006b56:	2323      	movs	r3, #35	; 0x23
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	2203      	movs	r2, #3
 8006b5c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b5e:	e0a2      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1a3      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x18e>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2246      	movs	r2, #70	; 0x46
 8006b6e:	5a9b      	ldrh	r3, [r3, r2]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d19d      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x18e>
 8006b76:	e085      	b.n	8006c84 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x268>
 8006b80:	2312      	movs	r3, #18
 8006b82:	18fb      	adds	r3, r7, r3
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d000      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x268>
 8006b8a:	e070      	b.n	8006c6e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	7812      	ldrb	r2, [r2, #0]
 8006b98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb2:	e05c      	b.n	8006c6e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d11c      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x2d8>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x2d8>
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d114      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	7812      	ldrb	r2, [r2, #0]
 8006bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2201      	movs	r2, #1
 8006c04:	4013      	ands	r3, r2
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d11e      	bne.n	8006c48 <HAL_SPI_TransmitReceive+0x324>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2246      	movs	r2, #70	; 0x46
 8006c0e:	5a9b      	ldrh	r3, [r3, r2]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d018      	beq.n	8006c48 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	001a      	movs	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	7812      	ldrb	r2, [r2, #0]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2246      	movs	r2, #70	; 0x46
 8006c36:	5a9b      	ldrh	r3, [r3, r2]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b299      	uxth	r1, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2246      	movs	r2, #70	; 0x46
 8006c42:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c44:	2301      	movs	r3, #1
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c48:	f7fc f90c 	bl	8002e64 <HAL_GetTick>
 8006c4c:	0002      	movs	r2, r0
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d802      	bhi.n	8006c5e <HAL_SPI_TransmitReceive+0x33a>
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	d102      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x340>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006c64:	2323      	movs	r3, #35	; 0x23
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	2203      	movs	r2, #3
 8006c6a:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c6c:	e01b      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d19d      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x290>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2246      	movs	r2, #70	; 0x46
 8006c7c:	5a9b      	ldrh	r3, [r3, r2]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d197      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0018      	movs	r0, r3
 8006c8c:	f000 faba 	bl	8007204 <SPI_EndRxTxTransaction>
 8006c90:	1e03      	subs	r3, r0, #0
 8006c92:	d007      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006c94:	2323      	movs	r3, #35	; 0x23
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	661a      	str	r2, [r3, #96]	; 0x60
 8006ca2:	e000      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006ca4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	225d      	movs	r2, #93	; 0x5d
 8006caa:	2101      	movs	r1, #1
 8006cac:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	225c      	movs	r2, #92	; 0x5c
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006cb6:	2323      	movs	r3, #35	; 0x23
 8006cb8:	18fb      	adds	r3, r7, r3
 8006cba:	781b      	ldrb	r3, [r3, #0]
}
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	b00a      	add	sp, #40	; 0x28
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	ffffefff 	.word	0xffffefff

08006cc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b088      	sub	sp, #32
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	001a      	movs	r2, r3
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d10f      	bne.n	8006d0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cf2:	d00b      	beq.n	8006d0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d005      	beq.n	8006d0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	0010      	movs	r0, r2
 8006d08:	4798      	blx	r3
    return;
 8006d0a:	e0d5      	b.n	8006eb8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	085b      	lsrs	r3, r3, #1
 8006d10:	001a      	movs	r2, r3
 8006d12:	2301      	movs	r3, #1
 8006d14:	4013      	ands	r3, r2
 8006d16:	d00b      	beq.n	8006d30 <HAL_SPI_IRQHandler+0x68>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	09db      	lsrs	r3, r3, #7
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	2301      	movs	r3, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	d005      	beq.n	8006d30 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	0010      	movs	r0, r2
 8006d2c:	4798      	blx	r3
    return;
 8006d2e:	e0c3      	b.n	8006eb8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	001a      	movs	r2, r3
 8006d36:	2301      	movs	r3, #1
 8006d38:	4013      	ands	r3, r2
 8006d3a:	d10c      	bne.n	8006d56 <HAL_SPI_IRQHandler+0x8e>
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	099b      	lsrs	r3, r3, #6
 8006d40:	001a      	movs	r2, r3
 8006d42:	2301      	movs	r3, #1
 8006d44:	4013      	ands	r3, r2
 8006d46:	d106      	bne.n	8006d56 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	0a1b      	lsrs	r3, r3, #8
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4013      	ands	r3, r2
 8006d52:	d100      	bne.n	8006d56 <HAL_SPI_IRQHandler+0x8e>
 8006d54:	e0b0      	b.n	8006eb8 <HAL_SPI_IRQHandler+0x1f0>
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d100      	bne.n	8006d64 <HAL_SPI_IRQHandler+0x9c>
 8006d62:	e0a9      	b.n	8006eb8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	001a      	movs	r2, r3
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	d023      	beq.n	8006db8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	225d      	movs	r2, #93	; 0x5d
 8006d74:	5c9b      	ldrb	r3, [r3, r2]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d011      	beq.n	8006da0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d80:	2204      	movs	r2, #4
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	e00b      	b.n	8006db8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da0:	2300      	movs	r3, #0
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	693b      	ldr	r3, [r7, #16]
        return;
 8006db6:	e07f      	b.n	8006eb8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	095b      	lsrs	r3, r3, #5
 8006dbc:	001a      	movs	r2, r3
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d014      	beq.n	8006dee <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc8:	2201      	movs	r2, #1
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2140      	movs	r1, #64	; 0x40
 8006de8:	438a      	bics	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	001a      	movs	r2, r3
 8006df4:	2301      	movs	r3, #1
 8006df6:	4013      	ands	r3, r2
 8006df8:	d00c      	beq.n	8006e14 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dfe:	2208      	movs	r2, #8
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d04c      	beq.n	8006eb6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	21e0      	movs	r1, #224	; 0xe0
 8006e28:	438a      	bics	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	225d      	movs	r2, #93	; 0x5d
 8006e30:	2101      	movs	r1, #1
 8006e32:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2202      	movs	r2, #2
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d103      	bne.n	8006e44 <HAL_SPI_IRQHandler+0x17c>
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4013      	ands	r3, r2
 8006e42:	d032      	beq.n	8006eaa <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2103      	movs	r1, #3
 8006e50:	438a      	bics	r2, r1
 8006e52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d010      	beq.n	8006e7e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <HAL_SPI_IRQHandler+0x1f8>)
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7fc fc07 	bl	800367c <HAL_DMA_Abort_IT>
 8006e6e:	1e03      	subs	r3, r0, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e76:	2240      	movs	r2, #64	; 0x40
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d016      	beq.n	8006eb4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8a:	4a0d      	ldr	r2, [pc, #52]	; (8006ec0 <HAL_SPI_IRQHandler+0x1f8>)
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7fc fbf2 	bl	800367c <HAL_DMA_Abort_IT>
 8006e98:	1e03      	subs	r3, r0, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006ea8:	e004      	b.n	8006eb4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	0018      	movs	r0, r3
 8006eae:	f000 f809 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006eb2:	e000      	b.n	8006eb6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006eb4:	46c0      	nop			; (mov r8, r8)
    return;
 8006eb6:	46c0      	nop			; (mov r8, r8)
  }
}
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	b008      	add	sp, #32
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	46c0      	nop			; (mov r8, r8)
 8006ec0:	08006ed5 	.word	0x08006ed5

08006ec4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ecc:	46c0      	nop			; (mov r8, r8)
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2246      	movs	r2, #70	; 0x46
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7ff ffe6 	bl	8006ec4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ef8:	46c0      	nop			; (mov r8, r8)
 8006efa:	46bd      	mov	sp, r7
 8006efc:	b004      	add	sp, #16
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	1dfb      	adds	r3, r7, #7
 8006f0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f10:	f7fb ffa8 	bl	8002e64 <HAL_GetTick>
 8006f14:	0002      	movs	r2, r0
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	1a9b      	subs	r3, r3, r2
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	18d3      	adds	r3, r2, r3
 8006f1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f20:	f7fb ffa0 	bl	8002e64 <HAL_GetTick>
 8006f24:	0003      	movs	r3, r0
 8006f26:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f28:	4b3a      	ldr	r3, [pc, #232]	; (8007014 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	0d1b      	lsrs	r3, r3, #20
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	4353      	muls	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f36:	e058      	b.n	8006fea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	d055      	beq.n	8006fea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f3e:	f7fb ff91 	bl	8002e64 <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d902      	bls.n	8006f54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d142      	bne.n	8006fda <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	21e0      	movs	r1, #224	; 0xe0
 8006f60:	438a      	bics	r2, r1
 8006f62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	2382      	movs	r3, #130	; 0x82
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d113      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	2380      	movs	r3, #128	; 0x80
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d005      	beq.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d107      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2140      	movs	r1, #64	; 0x40
 8006f94:	438a      	bics	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f9c:	2380      	movs	r3, #128	; 0x80
 8006f9e:	019b      	lsls	r3, r3, #6
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d110      	bne.n	8006fc6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	491a      	ldr	r1, [pc, #104]	; (8007018 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2180      	movs	r1, #128	; 0x80
 8006fc0:	0189      	lsls	r1, r1, #6
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	225d      	movs	r2, #93	; 0x5d
 8006fca:	2101      	movs	r1, #1
 8006fcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	225c      	movs	r2, #92	; 0x5c
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e017      	b.n	800700a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	425a      	negs	r2, r3
 8006ffa:	4153      	adcs	r3, r2
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	001a      	movs	r2, r3
 8007000:	1dfb      	adds	r3, r7, #7
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d197      	bne.n	8006f38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	0018      	movs	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	b008      	add	sp, #32
 8007010:	bd80      	pop	{r7, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	20005134 	.word	0x20005134
 8007018:	ffffdfff 	.word	0xffffdfff

0800701c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800702a:	f7fb ff1b 	bl	8002e64 <HAL_GetTick>
 800702e:	0002      	movs	r2, r0
 8007030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007032:	1a9b      	subs	r3, r3, r2
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	18d3      	adds	r3, r2, r3
 8007038:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800703a:	f7fb ff13 	bl	8002e64 <HAL_GetTick>
 800703e:	0003      	movs	r3, r0
 8007040:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007042:	4b3f      	ldr	r3, [pc, #252]	; (8007140 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	0013      	movs	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	189b      	adds	r3, r3, r2
 800704c:	00da      	lsls	r2, r3, #3
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	0d1b      	lsrs	r3, r3, #20
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	4353      	muls	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007058:	e064      	b.n	8007124 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	23c0      	movs	r3, #192	; 0xc0
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	429a      	cmp	r2, r3
 8007062:	d106      	bne.n	8007072 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	330c      	adds	r3, #12
 8007070:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	3301      	adds	r3, #1
 8007076:	d055      	beq.n	8007124 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007078:	f7fb fef4 	bl	8002e64 <HAL_GetTick>
 800707c:	0002      	movs	r2, r0
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	429a      	cmp	r2, r3
 8007086:	d902      	bls.n	800708e <SPI_WaitFifoStateUntilTimeout+0x72>
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d142      	bne.n	8007114 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	21e0      	movs	r1, #224	; 0xe0
 800709a:	438a      	bics	r2, r1
 800709c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	2382      	movs	r3, #130	; 0x82
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d113      	bne.n	80070d2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	2380      	movs	r3, #128	; 0x80
 80070b0:	021b      	lsls	r3, r3, #8
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d005      	beq.n	80070c2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	689a      	ldr	r2, [r3, #8]
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	429a      	cmp	r2, r3
 80070c0:	d107      	bne.n	80070d2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2140      	movs	r1, #64	; 0x40
 80070ce:	438a      	bics	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d6:	2380      	movs	r3, #128	; 0x80
 80070d8:	019b      	lsls	r3, r3, #6
 80070da:	429a      	cmp	r2, r3
 80070dc:	d110      	bne.n	8007100 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4916      	ldr	r1, [pc, #88]	; (8007144 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070ea:	400a      	ands	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2180      	movs	r1, #128	; 0x80
 80070fa:	0189      	lsls	r1, r1, #6
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	225d      	movs	r2, #93	; 0x5d
 8007104:	2101      	movs	r1, #1
 8007106:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	225c      	movs	r2, #92	; 0x5c
 800710c:	2100      	movs	r1, #0
 800710e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e010      	b.n	8007136 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	3b01      	subs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d192      	bne.n	800705a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	0018      	movs	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	b008      	add	sp, #32
 800713c:	bd80      	pop	{r7, pc}
 800713e:	46c0      	nop			; (mov r8, r8)
 8007140:	20005134 	.word	0x20005134
 8007144:	ffffdfff 	.word	0xffffdfff

08007148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af02      	add	r7, sp, #8
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	2382      	movs	r3, #130	; 0x82
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	429a      	cmp	r2, r3
 800715e:	d113      	bne.n	8007188 <SPI_EndRxTransaction+0x40>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	2380      	movs	r3, #128	; 0x80
 8007166:	021b      	lsls	r3, r3, #8
 8007168:	429a      	cmp	r2, r3
 800716a:	d005      	beq.n	8007178 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	429a      	cmp	r2, r3
 8007176:	d107      	bne.n	8007188 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2140      	movs	r1, #64	; 0x40
 8007184:	438a      	bics	r2, r1
 8007186:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	0013      	movs	r3, r2
 8007192:	2200      	movs	r2, #0
 8007194:	2180      	movs	r1, #128	; 0x80
 8007196:	f7ff feb3 	bl	8006f00 <SPI_WaitFlagStateUntilTimeout>
 800719a:	1e03      	subs	r3, r0, #0
 800719c:	d007      	beq.n	80071ae <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a2:	2220      	movs	r2, #32
 80071a4:	431a      	orrs	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e026      	b.n	80071fc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	2382      	movs	r3, #130	; 0x82
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d11f      	bne.n	80071fa <SPI_EndRxTransaction+0xb2>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	689a      	ldr	r2, [r3, #8]
 80071be:	2380      	movs	r3, #128	; 0x80
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d005      	beq.n	80071d2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	2380      	movs	r3, #128	; 0x80
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d113      	bne.n	80071fa <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	23c0      	movs	r3, #192	; 0xc0
 80071d6:	00d9      	lsls	r1, r3, #3
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	0013      	movs	r3, r2
 80071e0:	2200      	movs	r2, #0
 80071e2:	f7ff ff1b 	bl	800701c <SPI_WaitFifoStateUntilTimeout>
 80071e6:	1e03      	subs	r3, r0, #0
 80071e8:	d007      	beq.n	80071fa <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ee:	2220      	movs	r2, #32
 80071f0:	431a      	orrs	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e000      	b.n	80071fc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	0018      	movs	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	b004      	add	sp, #16
 8007202:	bd80      	pop	{r7, pc}

08007204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	23c0      	movs	r3, #192	; 0xc0
 8007214:	0159      	lsls	r1, r3, #5
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	0013      	movs	r3, r2
 800721e:	2200      	movs	r2, #0
 8007220:	f7ff fefc 	bl	800701c <SPI_WaitFifoStateUntilTimeout>
 8007224:	1e03      	subs	r3, r0, #0
 8007226:	d007      	beq.n	8007238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800722c:	2220      	movs	r2, #32
 800722e:	431a      	orrs	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e027      	b.n	8007288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	0013      	movs	r3, r2
 8007242:	2200      	movs	r2, #0
 8007244:	2180      	movs	r1, #128	; 0x80
 8007246:	f7ff fe5b 	bl	8006f00 <SPI_WaitFlagStateUntilTimeout>
 800724a:	1e03      	subs	r3, r0, #0
 800724c:	d007      	beq.n	800725e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007252:	2220      	movs	r2, #32
 8007254:	431a      	orrs	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e014      	b.n	8007288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	23c0      	movs	r3, #192	; 0xc0
 8007262:	00d9      	lsls	r1, r3, #3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	0013      	movs	r3, r2
 800726c:	2200      	movs	r2, #0
 800726e:	f7ff fed5 	bl	800701c <SPI_WaitFifoStateUntilTimeout>
 8007272:	1e03      	subs	r3, r0, #0
 8007274:	d007      	beq.n	8007286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727a:	2220      	movs	r2, #32
 800727c:	431a      	orrs	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e000      	b.n	8007288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	0018      	movs	r0, r3
 800728a:	46bd      	mov	sp, r7
 800728c:	b004      	add	sp, #16
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e04a      	b.n	8007338 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	223d      	movs	r2, #61	; 0x3d
 80072a6:	5c9b      	ldrb	r3, [r3, r2]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d107      	bne.n	80072be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	223c      	movs	r2, #60	; 0x3c
 80072b2:	2100      	movs	r1, #0
 80072b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7fb fb47 	bl	800294c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	223d      	movs	r2, #61	; 0x3d
 80072c2:	2102      	movs	r1, #2
 80072c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	0019      	movs	r1, r3
 80072d0:	0010      	movs	r0, r2
 80072d2:	f000 fb41 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2248      	movs	r2, #72	; 0x48
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	223e      	movs	r2, #62	; 0x3e
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	223f      	movs	r2, #63	; 0x3f
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2240      	movs	r2, #64	; 0x40
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2241      	movs	r2, #65	; 0x41
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2242      	movs	r2, #66	; 0x42
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2243      	movs	r2, #67	; 0x43
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2244      	movs	r2, #68	; 0x44
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2245      	movs	r2, #69	; 0x45
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2246      	movs	r2, #70	; 0x46
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2247      	movs	r2, #71	; 0x47
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	223d      	movs	r2, #61	; 0x3d
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	0018      	movs	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	b002      	add	sp, #8
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e04a      	b.n	80073e8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	223d      	movs	r2, #61	; 0x3d
 8007356:	5c9b      	ldrb	r3, [r3, r2]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d107      	bne.n	800736e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	223c      	movs	r2, #60	; 0x3c
 8007362:	2100      	movs	r1, #0
 8007364:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0018      	movs	r0, r3
 800736a:	f000 f841 	bl	80073f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	223d      	movs	r2, #61	; 0x3d
 8007372:	2102      	movs	r1, #2
 8007374:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	0019      	movs	r1, r3
 8007380:	0010      	movs	r0, r2
 8007382:	f000 fae9 	bl	8007958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2248      	movs	r2, #72	; 0x48
 800738a:	2101      	movs	r1, #1
 800738c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	223e      	movs	r2, #62	; 0x3e
 8007392:	2101      	movs	r1, #1
 8007394:	5499      	strb	r1, [r3, r2]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	223f      	movs	r2, #63	; 0x3f
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2240      	movs	r2, #64	; 0x40
 80073a2:	2101      	movs	r1, #1
 80073a4:	5499      	strb	r1, [r3, r2]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2241      	movs	r2, #65	; 0x41
 80073aa:	2101      	movs	r1, #1
 80073ac:	5499      	strb	r1, [r3, r2]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2242      	movs	r2, #66	; 0x42
 80073b2:	2101      	movs	r1, #1
 80073b4:	5499      	strb	r1, [r3, r2]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2243      	movs	r2, #67	; 0x43
 80073ba:	2101      	movs	r1, #1
 80073bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2244      	movs	r2, #68	; 0x44
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2245      	movs	r2, #69	; 0x45
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2246      	movs	r2, #70	; 0x46
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2247      	movs	r2, #71	; 0x47
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	223d      	movs	r2, #61	; 0x3d
 80073e2:	2101      	movs	r1, #1
 80073e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	0018      	movs	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b002      	add	sp, #8
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073f8:	46c0      	nop			; (mov r8, r8)
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b002      	add	sp, #8
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d108      	bne.n	8007422 <HAL_TIM_PWM_Start+0x22>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	223e      	movs	r2, #62	; 0x3e
 8007414:	5c9b      	ldrb	r3, [r3, r2]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	4193      	sbcs	r3, r2
 800741e:	b2db      	uxtb	r3, r3
 8007420:	e037      	b.n	8007492 <HAL_TIM_PWM_Start+0x92>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b04      	cmp	r3, #4
 8007426:	d108      	bne.n	800743a <HAL_TIM_PWM_Start+0x3a>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	223f      	movs	r2, #63	; 0x3f
 800742c:	5c9b      	ldrb	r3, [r3, r2]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	1e5a      	subs	r2, r3, #1
 8007434:	4193      	sbcs	r3, r2
 8007436:	b2db      	uxtb	r3, r3
 8007438:	e02b      	b.n	8007492 <HAL_TIM_PWM_Start+0x92>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b08      	cmp	r3, #8
 800743e:	d108      	bne.n	8007452 <HAL_TIM_PWM_Start+0x52>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2240      	movs	r2, #64	; 0x40
 8007444:	5c9b      	ldrb	r3, [r3, r2]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	1e5a      	subs	r2, r3, #1
 800744c:	4193      	sbcs	r3, r2
 800744e:	b2db      	uxtb	r3, r3
 8007450:	e01f      	b.n	8007492 <HAL_TIM_PWM_Start+0x92>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b0c      	cmp	r3, #12
 8007456:	d108      	bne.n	800746a <HAL_TIM_PWM_Start+0x6a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2241      	movs	r2, #65	; 0x41
 800745c:	5c9b      	ldrb	r3, [r3, r2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	4193      	sbcs	r3, r2
 8007466:	b2db      	uxtb	r3, r3
 8007468:	e013      	b.n	8007492 <HAL_TIM_PWM_Start+0x92>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b10      	cmp	r3, #16
 800746e:	d108      	bne.n	8007482 <HAL_TIM_PWM_Start+0x82>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2242      	movs	r2, #66	; 0x42
 8007474:	5c9b      	ldrb	r3, [r3, r2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	1e5a      	subs	r2, r3, #1
 800747c:	4193      	sbcs	r3, r2
 800747e:	b2db      	uxtb	r3, r3
 8007480:	e007      	b.n	8007492 <HAL_TIM_PWM_Start+0x92>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2243      	movs	r2, #67	; 0x43
 8007486:	5c9b      	ldrb	r3, [r3, r2]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	3b01      	subs	r3, #1
 800748c:	1e5a      	subs	r2, r3, #1
 800748e:	4193      	sbcs	r3, r2
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e08b      	b.n	80075b2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <HAL_TIM_PWM_Start+0xaa>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	223e      	movs	r2, #62	; 0x3e
 80074a4:	2102      	movs	r1, #2
 80074a6:	5499      	strb	r1, [r3, r2]
 80074a8:	e023      	b.n	80074f2 <HAL_TIM_PWM_Start+0xf2>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d104      	bne.n	80074ba <HAL_TIM_PWM_Start+0xba>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	223f      	movs	r2, #63	; 0x3f
 80074b4:	2102      	movs	r1, #2
 80074b6:	5499      	strb	r1, [r3, r2]
 80074b8:	e01b      	b.n	80074f2 <HAL_TIM_PWM_Start+0xf2>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d104      	bne.n	80074ca <HAL_TIM_PWM_Start+0xca>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	2102      	movs	r1, #2
 80074c6:	5499      	strb	r1, [r3, r2]
 80074c8:	e013      	b.n	80074f2 <HAL_TIM_PWM_Start+0xf2>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b0c      	cmp	r3, #12
 80074ce:	d104      	bne.n	80074da <HAL_TIM_PWM_Start+0xda>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2241      	movs	r2, #65	; 0x41
 80074d4:	2102      	movs	r1, #2
 80074d6:	5499      	strb	r1, [r3, r2]
 80074d8:	e00b      	b.n	80074f2 <HAL_TIM_PWM_Start+0xf2>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b10      	cmp	r3, #16
 80074de:	d104      	bne.n	80074ea <HAL_TIM_PWM_Start+0xea>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2242      	movs	r2, #66	; 0x42
 80074e4:	2102      	movs	r1, #2
 80074e6:	5499      	strb	r1, [r3, r2]
 80074e8:	e003      	b.n	80074f2 <HAL_TIM_PWM_Start+0xf2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2243      	movs	r2, #67	; 0x43
 80074ee:	2102      	movs	r1, #2
 80074f0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	2201      	movs	r2, #1
 80074fa:	0018      	movs	r0, r3
 80074fc:	f000 fe0c 	bl	8008118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a2d      	ldr	r2, [pc, #180]	; (80075bc <HAL_TIM_PWM_Start+0x1bc>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00e      	beq.n	8007528 <HAL_TIM_PWM_Start+0x128>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a2c      	ldr	r2, [pc, #176]	; (80075c0 <HAL_TIM_PWM_Start+0x1c0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d009      	beq.n	8007528 <HAL_TIM_PWM_Start+0x128>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <HAL_TIM_PWM_Start+0x1c4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_TIM_PWM_Start+0x128>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a29      	ldr	r2, [pc, #164]	; (80075c8 <HAL_TIM_PWM_Start+0x1c8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d101      	bne.n	800752c <HAL_TIM_PWM_Start+0x12c>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <HAL_TIM_PWM_Start+0x12e>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d008      	beq.n	8007544 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2180      	movs	r1, #128	; 0x80
 800753e:	0209      	lsls	r1, r1, #8
 8007540:	430a      	orrs	r2, r1
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <HAL_TIM_PWM_Start+0x1bc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d00f      	beq.n	800756e <HAL_TIM_PWM_Start+0x16e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	2380      	movs	r3, #128	; 0x80
 8007554:	05db      	lsls	r3, r3, #23
 8007556:	429a      	cmp	r2, r3
 8007558:	d009      	beq.n	800756e <HAL_TIM_PWM_Start+0x16e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1b      	ldr	r2, [pc, #108]	; (80075cc <HAL_TIM_PWM_Start+0x1cc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIM_PWM_Start+0x16e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <HAL_TIM_PWM_Start+0x1c0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d116      	bne.n	800759c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	4a16      	ldr	r2, [pc, #88]	; (80075d0 <HAL_TIM_PWM_Start+0x1d0>)
 8007576:	4013      	ands	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b06      	cmp	r3, #6
 800757e:	d016      	beq.n	80075ae <HAL_TIM_PWM_Start+0x1ae>
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	025b      	lsls	r3, r3, #9
 8007586:	429a      	cmp	r2, r3
 8007588:	d011      	beq.n	80075ae <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2101      	movs	r1, #1
 8007596:	430a      	orrs	r2, r1
 8007598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759a:	e008      	b.n	80075ae <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2101      	movs	r1, #1
 80075a8:	430a      	orrs	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	e000      	b.n	80075b0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ae:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	0018      	movs	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b004      	add	sp, #16
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40014000 	.word	0x40014000
 80075c4:	40014400 	.word	0x40014400
 80075c8:	40014800 	.word	0x40014800
 80075cc:	40000400 	.word	0x40000400
 80075d0:	00010007 	.word	0x00010007

080075d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	223c      	movs	r2, #60	; 0x3c
 80075e4:	5c9b      	ldrb	r3, [r3, r2]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e0df      	b.n	80077ae <HAL_TIM_PWM_ConfigChannel+0x1da>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	223c      	movs	r2, #60	; 0x3c
 80075f2:	2101      	movs	r1, #1
 80075f4:	5499      	strb	r1, [r3, r2]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b14      	cmp	r3, #20
 80075fa:	d900      	bls.n	80075fe <HAL_TIM_PWM_ConfigChannel+0x2a>
 80075fc:	e0d1      	b.n	80077a2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	009a      	lsls	r2, r3, #2
 8007602:	4b6d      	ldr	r3, [pc, #436]	; (80077b8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8007604:	18d3      	adds	r3, r2, r3
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	0011      	movs	r1, r2
 8007612:	0018      	movs	r0, r3
 8007614:	f000 fa20 	bl	8007a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2108      	movs	r1, #8
 8007624:	430a      	orrs	r2, r1
 8007626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2104      	movs	r1, #4
 8007634:	438a      	bics	r2, r1
 8007636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6999      	ldr	r1, [r3, #24]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	619a      	str	r2, [r3, #24]
      break;
 800764a:	e0ab      	b.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	0011      	movs	r1, r2
 8007654:	0018      	movs	r0, r3
 8007656:	f000 fa89 	bl	8007b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2180      	movs	r1, #128	; 0x80
 8007666:	0109      	lsls	r1, r1, #4
 8007668:	430a      	orrs	r2, r1
 800766a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4951      	ldr	r1, [pc, #324]	; (80077bc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007678:	400a      	ands	r2, r1
 800767a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6999      	ldr	r1, [r3, #24]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	021a      	lsls	r2, r3, #8
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	619a      	str	r2, [r3, #24]
      break;
 8007690:	e088      	b.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	0011      	movs	r1, r2
 800769a:	0018      	movs	r0, r3
 800769c:	f000 faea 	bl	8007c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2108      	movs	r1, #8
 80076ac:	430a      	orrs	r2, r1
 80076ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2104      	movs	r1, #4
 80076bc:	438a      	bics	r2, r1
 80076be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69d9      	ldr	r1, [r3, #28]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	691a      	ldr	r2, [r3, #16]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	61da      	str	r2, [r3, #28]
      break;
 80076d2:	e067      	b.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	0011      	movs	r1, r2
 80076dc:	0018      	movs	r0, r3
 80076de:	f000 fb51 	bl	8007d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2180      	movs	r1, #128	; 0x80
 80076ee:	0109      	lsls	r1, r1, #4
 80076f0:	430a      	orrs	r2, r1
 80076f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	492f      	ldr	r1, [pc, #188]	; (80077bc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007700:	400a      	ands	r2, r1
 8007702:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69d9      	ldr	r1, [r3, #28]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	021a      	lsls	r2, r3, #8
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	61da      	str	r2, [r3, #28]
      break;
 8007718:	e044      	b.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	0011      	movs	r1, r2
 8007722:	0018      	movs	r0, r3
 8007724:	f000 fb98 	bl	8007e58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2108      	movs	r1, #8
 8007734:	430a      	orrs	r2, r1
 8007736:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2104      	movs	r1, #4
 8007744:	438a      	bics	r2, r1
 8007746:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800775a:	e023      	b.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	0011      	movs	r1, r2
 8007764:	0018      	movs	r0, r3
 8007766:	f000 fbd7 	bl	8007f18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2180      	movs	r1, #128	; 0x80
 8007776:	0109      	lsls	r1, r1, #4
 8007778:	430a      	orrs	r2, r1
 800777a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	490d      	ldr	r1, [pc, #52]	; (80077bc <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007788:	400a      	ands	r2, r1
 800778a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	021a      	lsls	r2, r3, #8
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80077a2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	223c      	movs	r2, #60	; 0x3c
 80077a8:	2100      	movs	r1, #0
 80077aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	0018      	movs	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b004      	add	sp, #16
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	08009a24 	.word	0x08009a24
 80077bc:	fffffbff 	.word	0xfffffbff

080077c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	223c      	movs	r2, #60	; 0x3c
 80077ce:	5c9b      	ldrb	r3, [r3, r2]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_TIM_ConfigClockSource+0x18>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e0b7      	b.n	8007948 <HAL_TIM_ConfigClockSource+0x188>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	223c      	movs	r2, #60	; 0x3c
 80077dc:	2101      	movs	r1, #1
 80077de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	223d      	movs	r2, #61	; 0x3d
 80077e4:	2102      	movs	r1, #2
 80077e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a57      	ldr	r2, [pc, #348]	; (8007950 <HAL_TIM_ConfigClockSource+0x190>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4a56      	ldr	r2, [pc, #344]	; (8007954 <HAL_TIM_ConfigClockSource+0x194>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2280      	movs	r2, #128	; 0x80
 800780e:	0192      	lsls	r2, r2, #6
 8007810:	4293      	cmp	r3, r2
 8007812:	d040      	beq.n	8007896 <HAL_TIM_ConfigClockSource+0xd6>
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	0192      	lsls	r2, r2, #6
 8007818:	4293      	cmp	r3, r2
 800781a:	d900      	bls.n	800781e <HAL_TIM_ConfigClockSource+0x5e>
 800781c:	e088      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 800781e:	2280      	movs	r2, #128	; 0x80
 8007820:	0152      	lsls	r2, r2, #5
 8007822:	4293      	cmp	r3, r2
 8007824:	d100      	bne.n	8007828 <HAL_TIM_ConfigClockSource+0x68>
 8007826:	e085      	b.n	8007934 <HAL_TIM_ConfigClockSource+0x174>
 8007828:	2280      	movs	r2, #128	; 0x80
 800782a:	0152      	lsls	r2, r2, #5
 800782c:	4293      	cmp	r3, r2
 800782e:	d900      	bls.n	8007832 <HAL_TIM_ConfigClockSource+0x72>
 8007830:	e07e      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 8007832:	2b70      	cmp	r3, #112	; 0x70
 8007834:	d018      	beq.n	8007868 <HAL_TIM_ConfigClockSource+0xa8>
 8007836:	d900      	bls.n	800783a <HAL_TIM_ConfigClockSource+0x7a>
 8007838:	e07a      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 800783a:	2b60      	cmp	r3, #96	; 0x60
 800783c:	d04f      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x11e>
 800783e:	d900      	bls.n	8007842 <HAL_TIM_ConfigClockSource+0x82>
 8007840:	e076      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 8007842:	2b50      	cmp	r3, #80	; 0x50
 8007844:	d03b      	beq.n	80078be <HAL_TIM_ConfigClockSource+0xfe>
 8007846:	d900      	bls.n	800784a <HAL_TIM_ConfigClockSource+0x8a>
 8007848:	e072      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d057      	beq.n	80078fe <HAL_TIM_ConfigClockSource+0x13e>
 800784e:	d900      	bls.n	8007852 <HAL_TIM_ConfigClockSource+0x92>
 8007850:	e06e      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 8007852:	2b30      	cmp	r3, #48	; 0x30
 8007854:	d063      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15e>
 8007856:	d86b      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 8007858:	2b20      	cmp	r3, #32
 800785a:	d060      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15e>
 800785c:	d868      	bhi.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d05d      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15e>
 8007862:	2b10      	cmp	r3, #16
 8007864:	d05b      	beq.n	800791e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007866:	e063      	b.n	8007930 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	6899      	ldr	r1, [r3, #8]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	f000 fc2e 	bl	80080d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2277      	movs	r2, #119	; 0x77
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	609a      	str	r2, [r3, #8]
      break;
 8007894:	e04f      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6899      	ldr	r1, [r3, #8]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f000 fc17 	bl	80080d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689a      	ldr	r2, [r3, #8]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2180      	movs	r1, #128	; 0x80
 80078b6:	01c9      	lsls	r1, r1, #7
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
      break;
 80078bc:	e03b      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	6859      	ldr	r1, [r3, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	001a      	movs	r2, r3
 80078cc:	f000 fb88 	bl	8007fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2150      	movs	r1, #80	; 0x50
 80078d6:	0018      	movs	r0, r3
 80078d8:	f000 fbe2 	bl	80080a0 <TIM_ITRx_SetConfig>
      break;
 80078dc:	e02b      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6818      	ldr	r0, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	6859      	ldr	r1, [r3, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	001a      	movs	r2, r3
 80078ec:	f000 fba6 	bl	800803c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2160      	movs	r1, #96	; 0x60
 80078f6:	0018      	movs	r0, r3
 80078f8:	f000 fbd2 	bl	80080a0 <TIM_ITRx_SetConfig>
      break;
 80078fc:	e01b      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6859      	ldr	r1, [r3, #4]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	001a      	movs	r2, r3
 800790c:	f000 fb68 	bl	8007fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2140      	movs	r1, #64	; 0x40
 8007916:	0018      	movs	r0, r3
 8007918:	f000 fbc2 	bl	80080a0 <TIM_ITRx_SetConfig>
      break;
 800791c:	e00b      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	0019      	movs	r1, r3
 8007928:	0010      	movs	r0, r2
 800792a:	f000 fbb9 	bl	80080a0 <TIM_ITRx_SetConfig>
        break;
 800792e:	e002      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	e000      	b.n	8007936 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007934:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	223d      	movs	r2, #61	; 0x3d
 800793a:	2101      	movs	r1, #1
 800793c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	223c      	movs	r2, #60	; 0x3c
 8007942:	2100      	movs	r1, #0
 8007944:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	0018      	movs	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	b004      	add	sp, #16
 800794e:	bd80      	pop	{r7, pc}
 8007950:	ffceff88 	.word	0xffceff88
 8007954:	ffff00ff 	.word	0xffff00ff

08007958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a34      	ldr	r2, [pc, #208]	; (8007a3c <TIM_Base_SetConfig+0xe4>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d008      	beq.n	8007982 <TIM_Base_SetConfig+0x2a>
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	2380      	movs	r3, #128	; 0x80
 8007974:	05db      	lsls	r3, r3, #23
 8007976:	429a      	cmp	r2, r3
 8007978:	d003      	beq.n	8007982 <TIM_Base_SetConfig+0x2a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a30      	ldr	r2, [pc, #192]	; (8007a40 <TIM_Base_SetConfig+0xe8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d108      	bne.n	8007994 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2270      	movs	r2, #112	; 0x70
 8007986:	4393      	bics	r3, r2
 8007988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a29      	ldr	r2, [pc, #164]	; (8007a3c <TIM_Base_SetConfig+0xe4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d018      	beq.n	80079ce <TIM_Base_SetConfig+0x76>
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	2380      	movs	r3, #128	; 0x80
 80079a0:	05db      	lsls	r3, r3, #23
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d013      	beq.n	80079ce <TIM_Base_SetConfig+0x76>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a25      	ldr	r2, [pc, #148]	; (8007a40 <TIM_Base_SetConfig+0xe8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00f      	beq.n	80079ce <TIM_Base_SetConfig+0x76>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a24      	ldr	r2, [pc, #144]	; (8007a44 <TIM_Base_SetConfig+0xec>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00b      	beq.n	80079ce <TIM_Base_SetConfig+0x76>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a23      	ldr	r2, [pc, #140]	; (8007a48 <TIM_Base_SetConfig+0xf0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d007      	beq.n	80079ce <TIM_Base_SetConfig+0x76>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a22      	ldr	r2, [pc, #136]	; (8007a4c <TIM_Base_SetConfig+0xf4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d003      	beq.n	80079ce <TIM_Base_SetConfig+0x76>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a21      	ldr	r2, [pc, #132]	; (8007a50 <TIM_Base_SetConfig+0xf8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d108      	bne.n	80079e0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a20      	ldr	r2, [pc, #128]	; (8007a54 <TIM_Base_SetConfig+0xfc>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2280      	movs	r2, #128	; 0x80
 80079e4:	4393      	bics	r3, r2
 80079e6:	001a      	movs	r2, r3
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	689a      	ldr	r2, [r3, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a0c      	ldr	r2, [pc, #48]	; (8007a3c <TIM_Base_SetConfig+0xe4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00b      	beq.n	8007a26 <TIM_Base_SetConfig+0xce>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <TIM_Base_SetConfig+0xf0>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d007      	beq.n	8007a26 <TIM_Base_SetConfig+0xce>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a0c      	ldr	r2, [pc, #48]	; (8007a4c <TIM_Base_SetConfig+0xf4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_Base_SetConfig+0xce>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a0b      	ldr	r2, [pc, #44]	; (8007a50 <TIM_Base_SetConfig+0xf8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d103      	bne.n	8007a2e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	691a      	ldr	r2, [r3, #16]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	615a      	str	r2, [r3, #20]
}
 8007a34:	46c0      	nop			; (mov r8, r8)
 8007a36:	46bd      	mov	sp, r7
 8007a38:	b004      	add	sp, #16
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40002000 	.word	0x40002000
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800
 8007a54:	fffffcff 	.word	0xfffffcff

08007a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	2201      	movs	r2, #1
 8007a68:	4393      	bics	r3, r2
 8007a6a:	001a      	movs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a32      	ldr	r2, [pc, #200]	; (8007b50 <TIM_OC1_SetConfig+0xf8>)
 8007a86:	4013      	ands	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2203      	movs	r2, #3
 8007a8e:	4393      	bics	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	4393      	bics	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a28      	ldr	r2, [pc, #160]	; (8007b54 <TIM_OC1_SetConfig+0xfc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00b      	beq.n	8007ace <TIM_OC1_SetConfig+0x76>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a27      	ldr	r2, [pc, #156]	; (8007b58 <TIM_OC1_SetConfig+0x100>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d007      	beq.n	8007ace <TIM_OC1_SetConfig+0x76>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a26      	ldr	r2, [pc, #152]	; (8007b5c <TIM_OC1_SetConfig+0x104>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d003      	beq.n	8007ace <TIM_OC1_SetConfig+0x76>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a25      	ldr	r2, [pc, #148]	; (8007b60 <TIM_OC1_SetConfig+0x108>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d10c      	bne.n	8007ae8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	4393      	bics	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	4393      	bics	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <TIM_OC1_SetConfig+0xfc>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00b      	beq.n	8007b08 <TIM_OC1_SetConfig+0xb0>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a19      	ldr	r2, [pc, #100]	; (8007b58 <TIM_OC1_SetConfig+0x100>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d007      	beq.n	8007b08 <TIM_OC1_SetConfig+0xb0>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a18      	ldr	r2, [pc, #96]	; (8007b5c <TIM_OC1_SetConfig+0x104>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_OC1_SetConfig+0xb0>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <TIM_OC1_SetConfig+0x108>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d111      	bne.n	8007b2c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <TIM_OC1_SetConfig+0x10c>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <TIM_OC1_SetConfig+0x110>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	46c0      	nop			; (mov r8, r8)
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	b006      	add	sp, #24
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	46c0      	nop			; (mov r8, r8)
 8007b50:	fffeff8f 	.word	0xfffeff8f
 8007b54:	40012c00 	.word	0x40012c00
 8007b58:	40014000 	.word	0x40014000
 8007b5c:	40014400 	.word	0x40014400
 8007b60:	40014800 	.word	0x40014800
 8007b64:	fffffeff 	.word	0xfffffeff
 8007b68:	fffffdff 	.word	0xfffffdff

08007b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	4393      	bics	r3, r2
 8007b7e:	001a      	movs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a2e      	ldr	r2, [pc, #184]	; (8007c54 <TIM_OC2_SetConfig+0xe8>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4a2d      	ldr	r2, [pc, #180]	; (8007c58 <TIM_OC2_SetConfig+0xec>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	4393      	bics	r3, r2
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	011b      	lsls	r3, r3, #4
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <TIM_OC2_SetConfig+0xf0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d10d      	bne.n	8007bea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2280      	movs	r2, #128	; 0x80
 8007bd2:	4393      	bics	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2240      	movs	r2, #64	; 0x40
 8007be6:	4393      	bics	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <TIM_OC2_SetConfig+0xf0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00b      	beq.n	8007c0a <TIM_OC2_SetConfig+0x9e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a1a      	ldr	r2, [pc, #104]	; (8007c60 <TIM_OC2_SetConfig+0xf4>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d007      	beq.n	8007c0a <TIM_OC2_SetConfig+0x9e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <TIM_OC2_SetConfig+0xf8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC2_SetConfig+0x9e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a18      	ldr	r2, [pc, #96]	; (8007c68 <TIM_OC2_SetConfig+0xfc>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d113      	bne.n	8007c32 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	4a17      	ldr	r2, [pc, #92]	; (8007c6c <TIM_OC2_SetConfig+0x100>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4a16      	ldr	r2, [pc, #88]	; (8007c70 <TIM_OC2_SetConfig+0x104>)
 8007c16:	4013      	ands	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	621a      	str	r2, [r3, #32]
}
 8007c4c:	46c0      	nop			; (mov r8, r8)
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	b006      	add	sp, #24
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	feff8fff 	.word	0xfeff8fff
 8007c58:	fffffcff 	.word	0xfffffcff
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800
 8007c6c:	fffffbff 	.word	0xfffffbff
 8007c70:	fffff7ff 	.word	0xfffff7ff

08007c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	4a35      	ldr	r2, [pc, #212]	; (8007d58 <TIM_OC3_SetConfig+0xe4>)
 8007c84:	401a      	ands	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <TIM_OC3_SetConfig+0xe8>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	4393      	bics	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	4a29      	ldr	r2, [pc, #164]	; (8007d60 <TIM_OC3_SetConfig+0xec>)
 8007cba:	4013      	ands	r3, r2
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <TIM_OC3_SetConfig+0xf0>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d10d      	bne.n	8007cee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <TIM_OC3_SetConfig+0xf4>)
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	4a20      	ldr	r2, [pc, #128]	; (8007d6c <TIM_OC3_SetConfig+0xf8>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1c      	ldr	r2, [pc, #112]	; (8007d64 <TIM_OC3_SetConfig+0xf0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_OC3_SetConfig+0x9a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1d      	ldr	r2, [pc, #116]	; (8007d70 <TIM_OC3_SetConfig+0xfc>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_OC3_SetConfig+0x9a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <TIM_OC3_SetConfig+0x100>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_OC3_SetConfig+0x9a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <TIM_OC3_SetConfig+0x104>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d113      	bne.n	8007d36 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4a1a      	ldr	r2, [pc, #104]	; (8007d7c <TIM_OC3_SetConfig+0x108>)
 8007d12:	4013      	ands	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <TIM_OC3_SetConfig+0x10c>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	697a      	ldr	r2, [r7, #20]
 8007d4e:	621a      	str	r2, [r3, #32]
}
 8007d50:	46c0      	nop			; (mov r8, r8)
 8007d52:	46bd      	mov	sp, r7
 8007d54:	b006      	add	sp, #24
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	fffffeff 	.word	0xfffffeff
 8007d5c:	fffeff8f 	.word	0xfffeff8f
 8007d60:	fffffdff 	.word	0xfffffdff
 8007d64:	40012c00 	.word	0x40012c00
 8007d68:	fffff7ff 	.word	0xfffff7ff
 8007d6c:	fffffbff 	.word	0xfffffbff
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400
 8007d78:	40014800 	.word	0x40014800
 8007d7c:	ffffefff 	.word	0xffffefff
 8007d80:	ffffdfff 	.word	0xffffdfff

08007d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	4a28      	ldr	r2, [pc, #160]	; (8007e34 <TIM_OC4_SetConfig+0xb0>)
 8007d94:	401a      	ands	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	4a22      	ldr	r2, [pc, #136]	; (8007e38 <TIM_OC4_SetConfig+0xb4>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4a21      	ldr	r2, [pc, #132]	; (8007e3c <TIM_OC4_SetConfig+0xb8>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	4a1d      	ldr	r2, [pc, #116]	; (8007e40 <TIM_OC4_SetConfig+0xbc>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	031b      	lsls	r3, r3, #12
 8007dd6:	693a      	ldr	r2, [r7, #16]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <TIM_OC4_SetConfig+0xc0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <TIM_OC4_SetConfig+0x78>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <TIM_OC4_SetConfig+0xc4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d007      	beq.n	8007dfc <TIM_OC4_SetConfig+0x78>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <TIM_OC4_SetConfig+0xc8>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d003      	beq.n	8007dfc <TIM_OC4_SetConfig+0x78>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a16      	ldr	r2, [pc, #88]	; (8007e50 <TIM_OC4_SetConfig+0xcc>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d109      	bne.n	8007e10 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	4a15      	ldr	r2, [pc, #84]	; (8007e54 <TIM_OC4_SetConfig+0xd0>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	019b      	lsls	r3, r3, #6
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	621a      	str	r2, [r3, #32]
}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b006      	add	sp, #24
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	ffffefff 	.word	0xffffefff
 8007e38:	feff8fff 	.word	0xfeff8fff
 8007e3c:	fffffcff 	.word	0xfffffcff
 8007e40:	ffffdfff 	.word	0xffffdfff
 8007e44:	40012c00 	.word	0x40012c00
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	40014400 	.word	0x40014400
 8007e50:	40014800 	.word	0x40014800
 8007e54:	ffffbfff 	.word	0xffffbfff

08007e58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	4a25      	ldr	r2, [pc, #148]	; (8007efc <TIM_OC5_SetConfig+0xa4>)
 8007e68:	401a      	ands	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a1f      	ldr	r2, [pc, #124]	; (8007f00 <TIM_OC5_SetConfig+0xa8>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <TIM_OC5_SetConfig+0xac>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	041b      	lsls	r3, r3, #16
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <TIM_OC5_SetConfig+0xb0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00b      	beq.n	8007ec6 <TIM_OC5_SetConfig+0x6e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a16      	ldr	r2, [pc, #88]	; (8007f0c <TIM_OC5_SetConfig+0xb4>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d007      	beq.n	8007ec6 <TIM_OC5_SetConfig+0x6e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a15      	ldr	r2, [pc, #84]	; (8007f10 <TIM_OC5_SetConfig+0xb8>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d003      	beq.n	8007ec6 <TIM_OC5_SetConfig+0x6e>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a14      	ldr	r2, [pc, #80]	; (8007f14 <TIM_OC5_SetConfig+0xbc>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d109      	bne.n	8007eda <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	4a0c      	ldr	r2, [pc, #48]	; (8007efc <TIM_OC5_SetConfig+0xa4>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	021b      	lsls	r3, r3, #8
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	621a      	str	r2, [r3, #32]
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	b006      	add	sp, #24
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	fffeffff 	.word	0xfffeffff
 8007f00:	fffeff8f 	.word	0xfffeff8f
 8007f04:	fffdffff 	.word	0xfffdffff
 8007f08:	40012c00 	.word	0x40012c00
 8007f0c:	40014000 	.word	0x40014000
 8007f10:	40014400 	.word	0x40014400
 8007f14:	40014800 	.word	0x40014800

08007f18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <TIM_OC6_SetConfig+0xa8>)
 8007f28:	401a      	ands	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <TIM_OC6_SetConfig+0xac>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	021b      	lsls	r3, r3, #8
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	4a1c      	ldr	r2, [pc, #112]	; (8007fc8 <TIM_OC6_SetConfig+0xb0>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	051b      	lsls	r3, r3, #20
 8007f62:	693a      	ldr	r2, [r7, #16]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <TIM_OC6_SetConfig+0xb4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00b      	beq.n	8007f88 <TIM_OC6_SetConfig+0x70>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <TIM_OC6_SetConfig+0xb8>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d007      	beq.n	8007f88 <TIM_OC6_SetConfig+0x70>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <TIM_OC6_SetConfig+0xbc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d003      	beq.n	8007f88 <TIM_OC6_SetConfig+0x70>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a15      	ldr	r2, [pc, #84]	; (8007fd8 <TIM_OC6_SetConfig+0xc0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d109      	bne.n	8007f9c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	4a14      	ldr	r2, [pc, #80]	; (8007fdc <TIM_OC6_SetConfig+0xc4>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	029b      	lsls	r3, r3, #10
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b006      	add	sp, #24
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	ffefffff 	.word	0xffefffff
 8007fc4:	feff8fff 	.word	0xfeff8fff
 8007fc8:	ffdfffff 	.word	0xffdfffff
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800
 8007fdc:	fffbffff 	.word	0xfffbffff

08007fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	4393      	bics	r3, r2
 8007ffa:	001a      	movs	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	22f0      	movs	r2, #240	; 0xf0
 800800a:	4393      	bics	r3, r2
 800800c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	011b      	lsls	r3, r3, #4
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	220a      	movs	r2, #10
 800801c:	4393      	bics	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	621a      	str	r2, [r3, #32]
}
 8008034:	46c0      	nop			; (mov r8, r8)
 8008036:	46bd      	mov	sp, r7
 8008038:	b006      	add	sp, #24
 800803a:	bd80      	pop	{r7, pc}

0800803c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	2210      	movs	r2, #16
 800804e:	4393      	bics	r3, r2
 8008050:	001a      	movs	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1b      	ldr	r3, [r3, #32]
 8008060:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4a0d      	ldr	r2, [pc, #52]	; (800809c <TIM_TI2_ConfigInputStage+0x60>)
 8008066:	4013      	ands	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	031b      	lsls	r3, r3, #12
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	22a0      	movs	r2, #160	; 0xa0
 8008078:	4393      	bics	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	621a      	str	r2, [r3, #32]
}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b006      	add	sp, #24
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	ffff0fff 	.word	0xffff0fff

080080a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a08      	ldr	r2, [pc, #32]	; (80080d4 <TIM_ITRx_SetConfig+0x34>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	2207      	movs	r2, #7
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	609a      	str	r2, [r3, #8]
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b004      	add	sp, #16
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	ffcfff8f 	.word	0xffcfff8f

080080d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	4a09      	ldr	r2, [pc, #36]	; (8008114 <TIM_ETR_SetConfig+0x3c>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	021a      	lsls	r2, r3, #8
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4313      	orrs	r3, r2
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	609a      	str	r2, [r3, #8]
}
 800810c:	46c0      	nop			; (mov r8, r8)
 800810e:	46bd      	mov	sp, r7
 8008110:	b006      	add	sp, #24
 8008112:	bd80      	pop	{r7, pc}
 8008114:	ffff00ff 	.word	0xffff00ff

08008118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	221f      	movs	r2, #31
 8008128:	4013      	ands	r3, r2
 800812a:	2201      	movs	r2, #1
 800812c:	409a      	lsls	r2, r3
 800812e:	0013      	movs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	43d2      	mvns	r2, r2
 800813a:	401a      	ands	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6a1a      	ldr	r2, [r3, #32]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	211f      	movs	r1, #31
 8008148:	400b      	ands	r3, r1
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4099      	lsls	r1, r3
 800814e:	000b      	movs	r3, r1
 8008150:	431a      	orrs	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	46c0      	nop			; (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	b006      	add	sp, #24
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	223c      	movs	r2, #60	; 0x3c
 800816e:	5c9b      	ldrb	r3, [r3, r2]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008174:	2302      	movs	r3, #2
 8008176:	e055      	b.n	8008224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	223c      	movs	r2, #60	; 0x3c
 800817c:	2101      	movs	r1, #1
 800817e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	223d      	movs	r2, #61	; 0x3d
 8008184:	2102      	movs	r1, #2
 8008186:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a23      	ldr	r2, [pc, #140]	; (800822c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d108      	bne.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a22      	ldr	r2, [pc, #136]	; (8008230 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2270      	movs	r2, #112	; 0x70
 80081b8:	4393      	bics	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a16      	ldr	r2, [pc, #88]	; (800822c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00f      	beq.n	80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	2380      	movs	r3, #128	; 0x80
 80081de:	05db      	lsls	r3, r3, #23
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d009      	beq.n	80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a12      	ldr	r2, [pc, #72]	; (8008234 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a11      	ldr	r2, [pc, #68]	; (8008238 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d10c      	bne.n	8008212 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2280      	movs	r2, #128	; 0x80
 80081fc:	4393      	bics	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	4313      	orrs	r3, r2
 8008208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	223d      	movs	r2, #61	; 0x3d
 8008216:	2101      	movs	r1, #1
 8008218:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	223c      	movs	r2, #60	; 0x3c
 800821e:	2100      	movs	r1, #0
 8008220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	0018      	movs	r0, r3
 8008226:	46bd      	mov	sp, r7
 8008228:	b004      	add	sp, #16
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40012c00 	.word	0x40012c00
 8008230:	ff0fffff 	.word	0xff0fffff
 8008234:	40000400 	.word	0x40000400
 8008238:	40014000 	.word	0x40014000

0800823c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008246:	2300      	movs	r3, #0
 8008248:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	223c      	movs	r2, #60	; 0x3c
 800824e:	5c9b      	ldrb	r3, [r3, r2]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008254:	2302      	movs	r3, #2
 8008256:	e079      	b.n	800834c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	223c      	movs	r2, #60	; 0x3c
 800825c:	2101      	movs	r1, #1
 800825e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	22ff      	movs	r2, #255	; 0xff
 8008264:	4393      	bics	r3, r2
 8008266:	001a      	movs	r2, r3
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a38      	ldr	r2, [pc, #224]	; (8008354 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008274:	401a      	ands	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a35      	ldr	r2, [pc, #212]	; (8008358 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008282:	401a      	ands	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	4313      	orrs	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4a33      	ldr	r2, [pc, #204]	; (800835c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008290:	401a      	ands	r2, r3
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4a30      	ldr	r2, [pc, #192]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800829e:	401a      	ands	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a2e      	ldr	r2, [pc, #184]	; (8008364 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80082ac:	401a      	ands	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	4a2b      	ldr	r2, [pc, #172]	; (8008368 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80082ba:	401a      	ands	r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c0:	4313      	orrs	r3, r2
 80082c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4a29      	ldr	r2, [pc, #164]	; (800836c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80082c8:	401a      	ands	r2, r3
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	041b      	lsls	r3, r3, #16
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a25      	ldr	r2, [pc, #148]	; (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d106      	bne.n	80082ec <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a24      	ldr	r2, [pc, #144]	; (8008374 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80082e2:	401a      	ands	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d121      	bne.n	800833a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80082fa:	401a      	ands	r2, r3
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	051b      	lsls	r3, r3, #20
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a1c      	ldr	r2, [pc, #112]	; (800837c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800830a:	401a      	ands	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	4313      	orrs	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008318:	401a      	ands	r2, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a12      	ldr	r2, [pc, #72]	; (8008370 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d106      	bne.n	800833a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4a15      	ldr	r2, [pc, #84]	; (8008384 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008330:	401a      	ands	r2, r3
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	223c      	movs	r2, #60	; 0x3c
 8008346:	2100      	movs	r1, #0
 8008348:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	0018      	movs	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	b004      	add	sp, #16
 8008352:	bd80      	pop	{r7, pc}
 8008354:	fffffcff 	.word	0xfffffcff
 8008358:	fffffbff 	.word	0xfffffbff
 800835c:	fffff7ff 	.word	0xfffff7ff
 8008360:	ffffefff 	.word	0xffffefff
 8008364:	ffffdfff 	.word	0xffffdfff
 8008368:	ffffbfff 	.word	0xffffbfff
 800836c:	fff0ffff 	.word	0xfff0ffff
 8008370:	40012c00 	.word	0x40012c00
 8008374:	efffffff 	.word	0xefffffff
 8008378:	ff0fffff 	.word	0xff0fffff
 800837c:	feffffff 	.word	0xfeffffff
 8008380:	fdffffff 	.word	0xfdffffff
 8008384:	dfffffff 	.word	0xdfffffff

08008388 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08a      	sub	sp, #40	; 0x28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	223c      	movs	r2, #60	; 0x3c
 8008398:	5c9b      	ldrb	r3, [r3, r2]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_TIMEx_ConfigBreakInput+0x1a>
 800839e:	2302      	movs	r3, #2
 80083a0:	e08e      	b.n	80084c0 <HAL_TIMEx_ConfigBreakInput+0x138>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	223c      	movs	r2, #60	; 0x3c
 80083a6:	2101      	movs	r1, #1
 80083a8:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b04      	cmp	r3, #4
 80083b0:	d019      	beq.n	80083e6 <HAL_TIMEx_ConfigBreakInput+0x5e>
 80083b2:	d822      	bhi.n	80083fa <HAL_TIMEx_ConfigBreakInput+0x72>
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d002      	beq.n	80083be <HAL_TIMEx_ConfigBreakInput+0x36>
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d00a      	beq.n	80083d2 <HAL_TIMEx_ConfigBreakInput+0x4a>
 80083bc:	e01d      	b.n	80083fa <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80083be:	2301      	movs	r3, #1
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80083c6:	2380      	movs	r3, #128	; 0x80
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80083cc:	2309      	movs	r3, #9
 80083ce:	61bb      	str	r3, [r7, #24]
      break;
 80083d0:	e01c      	b.n	800840c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 80083d2:	2302      	movs	r3, #2
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80083d6:	2301      	movs	r3, #1
 80083d8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80083da:	2380      	movs	r3, #128	; 0x80
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80083e0:	230a      	movs	r3, #10
 80083e2:	61bb      	str	r3, [r7, #24]
      break;
 80083e4:	e012      	b.n	800840c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 80083e6:	2304      	movs	r3, #4
 80083e8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 80083ea:	2302      	movs	r3, #2
 80083ec:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 80083ee:	2380      	movs	r3, #128	; 0x80
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 80083f4:	230b      	movs	r3, #11
 80083f6:	61bb      	str	r3, [r7, #24]
      break;
 80083f8:	e008      	b.n	800840c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	61bb      	str	r3, [r7, #24]
      break;
 800840a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d003      	beq.n	800841a <HAL_TIMEx_ConfigBreakInput+0x92>
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b02      	cmp	r3, #2
 8008416:	d027      	beq.n	8008468 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008418:	e04d      	b.n	80084b6 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008420:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	43da      	mvns	r2, r3
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	4013      	ands	r3, r2
 800842a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	409a      	lsls	r2, r3
 8008434:	0013      	movs	r3, r2
 8008436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008438:	4013      	ands	r3, r2
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4313      	orrs	r3, r2
 800843e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	43da      	mvns	r2, r3
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	4013      	ands	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689a      	ldr	r2, [r3, #8]
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	409a      	lsls	r2, r3
 8008452:	0013      	movs	r3, r2
 8008454:	6a3a      	ldr	r2, [r7, #32]
 8008456:	4013      	ands	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008466:	e026      	b.n	80084b6 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800846e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	43da      	mvns	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	4013      	ands	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	409a      	lsls	r2, r3
 8008482:	0013      	movs	r3, r2
 8008484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008486:	4013      	ands	r3, r2
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	43da      	mvns	r2, r3
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	4013      	ands	r3, r2
 8008496:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	409a      	lsls	r2, r3
 80084a0:	0013      	movs	r3, r2
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	4013      	ands	r3, r2
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80084b4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	223c      	movs	r2, #60	; 0x3c
 80084ba:	2100      	movs	r1, #0
 80084bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	0018      	movs	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b00a      	add	sp, #40	; 0x28
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e03f      	b.n	800855a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2259      	movs	r2, #89	; 0x59
 80084de:	5c9b      	ldrb	r3, [r3, r2]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d107      	bne.n	80084f6 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2258      	movs	r2, #88	; 0x58
 80084ea:	2100      	movs	r1, #0
 80084ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	0018      	movs	r0, r3
 80084f2:	f7fa fa89 	bl	8002a08 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2259      	movs	r2, #89	; 0x59
 80084fa:	2102      	movs	r1, #2
 80084fc:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2101      	movs	r1, #1
 800850a:	438a      	bics	r2, r1
 800850c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	0018      	movs	r0, r3
 8008512:	f000 fad7 	bl	8008ac4 <USART_SetConfig>
 8008516:	0003      	movs	r3, r0
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e01c      	b.n	800855a <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	490e      	ldr	r1, [pc, #56]	; (8008564 <HAL_USART_Init+0x9c>)
 800852c:	400a      	ands	r2, r1
 800852e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	212a      	movs	r1, #42	; 0x2a
 800853c:	438a      	bics	r2, r1
 800853e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2101      	movs	r1, #1
 800854c:	430a      	orrs	r2, r1
 800854e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	0018      	movs	r0, r3
 8008554:	f000 fd52 	bl	8008ffc <USART_CheckIdleState>
 8008558:	0003      	movs	r3, r0
}
 800855a:	0018      	movs	r0, r3
 800855c:	46bd      	mov	sp, r7
 800855e:	b002      	add	sp, #8
 8008560:	bd80      	pop	{r7, pc}
 8008562:	46c0      	nop			; (mov r8, r8)
 8008564:	ffffbfff 	.word	0xffffbfff

08008568 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b08a      	sub	sp, #40	; 0x28
 800856c:	af02      	add	r7, sp, #8
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	603b      	str	r3, [r7, #0]
 8008574:	1dbb      	adds	r3, r7, #6
 8008576:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2259      	movs	r2, #89	; 0x59
 800857c:	5c9b      	ldrb	r3, [r3, r2]
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	d000      	beq.n	8008586 <HAL_USART_Transmit+0x1e>
 8008584:	e0a9      	b.n	80086da <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <HAL_USART_Transmit+0x2c>
 800858c:	1dbb      	adds	r3, r7, #6
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e0a1      	b.n	80086dc <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	689a      	ldr	r2, [r3, #8]
 800859c:	2380      	movs	r3, #128	; 0x80
 800859e:	015b      	lsls	r3, r3, #5
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d109      	bne.n	80085b8 <HAL_USART_Transmit+0x50>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d105      	bne.n	80085b8 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2201      	movs	r2, #1
 80085b0:	4013      	ands	r3, r2
 80085b2:	d001      	beq.n	80085b8 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e091      	b.n	80086dc <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2258      	movs	r2, #88	; 0x58
 80085bc:	5c9b      	ldrb	r3, [r3, r2]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_USART_Transmit+0x5e>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e08a      	b.n	80086dc <HAL_USART_Transmit+0x174>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2258      	movs	r2, #88	; 0x58
 80085ca:	2101      	movs	r1, #1
 80085cc:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2259      	movs	r2, #89	; 0x59
 80085d8:	2112      	movs	r1, #18
 80085da:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085dc:	f7fa fc42 	bl	8002e64 <HAL_GetTick>
 80085e0:	0003      	movs	r3, r0
 80085e2:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	1dba      	adds	r2, r7, #6
 80085e8:	8812      	ldrh	r2, [r2, #0]
 80085ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	1dba      	adds	r2, r7, #6
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	2380      	movs	r3, #128	; 0x80
 80085fa:	015b      	lsls	r3, r3, #5
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d108      	bne.n	8008612 <HAL_USART_Transmit+0xaa>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8008608:	2300      	movs	r3, #0
 800860a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	e003      	b.n	800861a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800861a:	e02a      	b.n	8008672 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800861c:	697a      	ldr	r2, [r7, #20]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	0013      	movs	r3, r2
 8008626:	2200      	movs	r2, #0
 8008628:	2180      	movs	r1, #128	; 0x80
 800862a:	f000 fa16 	bl	8008a5a <USART_WaitOnFlagUntilTimeout>
 800862e:	1e03      	subs	r3, r0, #0
 8008630:	d001      	beq.n	8008636 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e052      	b.n	80086dc <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	001a      	movs	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	05d2      	lsls	r2, r2, #23
 8008648:	0dd2      	lsrs	r2, r2, #23
 800864a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	3302      	adds	r3, #2
 8008650:	61bb      	str	r3, [r7, #24]
 8008652:	e007      	b.n	8008664 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	781a      	ldrb	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008668:	b29b      	uxth	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008676:	b29b      	uxth	r3, r3
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1cf      	bne.n	800861c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	0013      	movs	r3, r2
 8008686:	2200      	movs	r2, #0
 8008688:	2140      	movs	r1, #64	; 0x40
 800868a:	f000 f9e6 	bl	8008a5a <USART_WaitOnFlagUntilTimeout>
 800868e:	1e03      	subs	r3, r0, #0
 8008690:	d001      	beq.n	8008696 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e022      	b.n	80086dc <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2240      	movs	r2, #64	; 0x40
 800869c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2208      	movs	r2, #8
 80086a4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	699a      	ldr	r2, [r3, #24]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2108      	movs	r1, #8
 80086b2:	430a      	orrs	r2, r1
 80086b4:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	699a      	ldr	r2, [r3, #24]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2110      	movs	r1, #16
 80086c2:	430a      	orrs	r2, r1
 80086c4:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2259      	movs	r2, #89	; 0x59
 80086ca:	2101      	movs	r1, #1
 80086cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2258      	movs	r2, #88	; 0x58
 80086d2:	2100      	movs	r1, #0
 80086d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	e000      	b.n	80086dc <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086da:	2302      	movs	r3, #2
  }
}
 80086dc:	0018      	movs	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	b008      	add	sp, #32
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4aab      	ldr	r2, [pc, #684]	; (80089b4 <HAL_USART_IRQHandler+0x2d0>)
 8008708:	4013      	ands	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d117      	bne.n	8008742 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	2220      	movs	r2, #32
 8008716:	4013      	ands	r3, r2
 8008718:	d013      	beq.n	8008742 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	2220      	movs	r2, #32
 800871e:	4013      	ands	r3, r2
 8008720:	d104      	bne.n	800872c <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	2380      	movs	r3, #128	; 0x80
 8008726:	055b      	lsls	r3, r3, #21
 8008728:	4013      	ands	r3, r2
 800872a:	d00a      	beq.n	8008742 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008730:	2b00      	cmp	r3, #0
 8008732:	d100      	bne.n	8008736 <HAL_USART_IRQHandler+0x52>
 8008734:	e135      	b.n	80089a2 <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	0010      	movs	r0, r2
 800873e:	4798      	blx	r3
      }
      return;
 8008740:	e12f      	b.n	80089a2 <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d100      	bne.n	800874a <HAL_USART_IRQHandler+0x66>
 8008748:	e0eb      	b.n	8008922 <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	4a9a      	ldr	r2, [pc, #616]	; (80089b8 <HAL_USART_IRQHandler+0x2d4>)
 800874e:	4013      	ands	r3, r2
 8008750:	d105      	bne.n	800875e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	2390      	movs	r3, #144	; 0x90
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	4013      	ands	r3, r2
 800875a:	d100      	bne.n	800875e <HAL_USART_IRQHandler+0x7a>
 800875c:	e0e1      	b.n	8008922 <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	2201      	movs	r2, #1
 8008762:	4013      	ands	r3, r2
 8008764:	d00e      	beq.n	8008784 <HAL_USART_IRQHandler+0xa0>
 8008766:	69ba      	ldr	r2, [r7, #24]
 8008768:	2380      	movs	r3, #128	; 0x80
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	4013      	ands	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2201      	movs	r2, #1
 8008776:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877c:	2201      	movs	r2, #1
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2202      	movs	r2, #2
 8008788:	4013      	ands	r3, r2
 800878a:	d00d      	beq.n	80087a8 <HAL_USART_IRQHandler+0xc4>
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	2201      	movs	r2, #1
 8008790:	4013      	ands	r3, r2
 8008792:	d009      	beq.n	80087a8 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2202      	movs	r2, #2
 800879a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a0:	2204      	movs	r2, #4
 80087a2:	431a      	orrs	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	2204      	movs	r2, #4
 80087ac:	4013      	ands	r3, r2
 80087ae:	d00d      	beq.n	80087cc <HAL_USART_IRQHandler+0xe8>
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2201      	movs	r2, #1
 80087b4:	4013      	ands	r3, r2
 80087b6:	d009      	beq.n	80087cc <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2204      	movs	r2, #4
 80087be:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c4:	2202      	movs	r2, #2
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	2208      	movs	r2, #8
 80087d0:	4013      	ands	r3, r2
 80087d2:	d011      	beq.n	80087f8 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2220      	movs	r2, #32
 80087d8:	4013      	ands	r3, r2
 80087da:	d103      	bne.n	80087e4 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	4a76      	ldr	r2, [pc, #472]	; (80089b8 <HAL_USART_IRQHandler+0x2d4>)
 80087e0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80087e2:	d009      	beq.n	80087f8 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2208      	movs	r2, #8
 80087ea:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	2208      	movs	r2, #8
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087f8:	69fa      	ldr	r2, [r7, #28]
 80087fa:	2380      	movs	r3, #128	; 0x80
 80087fc:	019b      	lsls	r3, r3, #6
 80087fe:	4013      	ands	r3, r2
 8008800:	d01a      	beq.n	8008838 <HAL_USART_IRQHandler+0x154>
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2201      	movs	r2, #1
 8008806:	4013      	ands	r3, r2
 8008808:	d016      	beq.n	8008838 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2259      	movs	r2, #89	; 0x59
 800880e:	5c9b      	ldrb	r3, [r3, r2]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b22      	cmp	r3, #34	; 0x22
 8008814:	d105      	bne.n	8008822 <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2280      	movs	r2, #128	; 0x80
 800881c:	0192      	lsls	r2, r2, #6
 800881e:	621a      	str	r2, [r3, #32]
        return;
 8008820:	e0c4      	b.n	80089ac <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2280      	movs	r2, #128	; 0x80
 8008828:	0192      	lsls	r2, r2, #6
 800882a:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008830:	2220      	movs	r2, #32
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d100      	bne.n	8008842 <HAL_USART_IRQHandler+0x15e>
 8008840:	e0b1      	b.n	80089a6 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	2220      	movs	r2, #32
 8008846:	4013      	ands	r3, r2
 8008848:	d011      	beq.n	800886e <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2220      	movs	r2, #32
 800884e:	4013      	ands	r3, r2
 8008850:	d104      	bne.n	800885c <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	2380      	movs	r3, #128	; 0x80
 8008856:	055b      	lsls	r3, r3, #21
 8008858:	4013      	ands	r3, r2
 800885a:	d008      	beq.n	800886e <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008860:	2b00      	cmp	r3, #0
 8008862:	d004      	beq.n	800886e <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	0010      	movs	r0, r2
 800886c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008872:	2208      	movs	r2, #8
 8008874:	4013      	ands	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	2240      	movs	r2, #64	; 0x40
 8008880:	4013      	ands	r3, r2
 8008882:	2b40      	cmp	r3, #64	; 0x40
 8008884:	d002      	beq.n	800888c <HAL_USART_IRQHandler+0x1a8>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d040      	beq.n	800890e <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	0018      	movs	r0, r3
 8008890:	f000 f8ae 	bl	80089f0 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2240      	movs	r2, #64	; 0x40
 800889c:	4013      	ands	r3, r2
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d130      	bne.n	8008904 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2140      	movs	r1, #64	; 0x40
 80088ae:	438a      	bics	r2, r1
 80088b0:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	2200      	movs	r2, #0
 80088c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7fa fed8 	bl	800367c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d012      	beq.n	80088fa <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d8:	4a38      	ldr	r2, [pc, #224]	; (80089bc <HAL_USART_IRQHandler+0x2d8>)
 80088da:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e0:	0018      	movs	r0, r3
 80088e2:	f7fa fecb 	bl	800367c <HAL_DMA_Abort_IT>
 80088e6:	1e03      	subs	r3, r0, #0
 80088e8:	d019      	beq.n	800891e <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088f4:	0018      	movs	r0, r3
 80088f6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088f8:	e011      	b.n	800891e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 f86f 	bl	80089e0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008902:	e00c      	b.n	800891e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	0018      	movs	r0, r3
 8008908:	f000 f86a 	bl	80089e0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800890c:	e007      	b.n	800891e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	0018      	movs	r0, r3
 8008912:	f000 f865 	bl	80089e0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800891c:	e043      	b.n	80089a6 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800891e:	46c0      	nop			; (mov r8, r8)
    return;
 8008920:	e041      	b.n	80089a6 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	2280      	movs	r2, #128	; 0x80
 8008926:	4013      	ands	r3, r2
 8008928:	d012      	beq.n	8008950 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2280      	movs	r2, #128	; 0x80
 800892e:	4013      	ands	r3, r2
 8008930:	d104      	bne.n	800893c <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	2380      	movs	r3, #128	; 0x80
 8008936:	041b      	lsls	r3, r3, #16
 8008938:	4013      	ands	r3, r2
 800893a:	d009      	beq.n	8008950 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d032      	beq.n	80089aa <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	0010      	movs	r0, r2
 800894c:	4798      	blx	r3
    }
    return;
 800894e:	e02c      	b.n	80089aa <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2240      	movs	r2, #64	; 0x40
 8008954:	4013      	ands	r3, r2
 8008956:	d008      	beq.n	800896a <HAL_USART_IRQHandler+0x286>
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2240      	movs	r2, #64	; 0x40
 800895c:	4013      	ands	r3, r2
 800895e:	d004      	beq.n	800896a <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	0018      	movs	r0, r3
 8008964:	f000 fb8e 	bl	8009084 <USART_EndTransmit_IT>
    return;
 8008968:	e020      	b.n	80089ac <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	2380      	movs	r3, #128	; 0x80
 800896e:	041b      	lsls	r3, r3, #16
 8008970:	4013      	ands	r3, r2
 8008972:	d009      	beq.n	8008988 <HAL_USART_IRQHandler+0x2a4>
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	2380      	movs	r3, #128	; 0x80
 8008978:	05db      	lsls	r3, r3, #23
 800897a:	4013      	ands	r3, r2
 800897c:	d004      	beq.n	8008988 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	0018      	movs	r0, r3
 8008982:	f000 fbca 	bl	800911a <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8008986:	e011      	b.n	80089ac <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	2380      	movs	r3, #128	; 0x80
 800898c:	045b      	lsls	r3, r3, #17
 800898e:	4013      	ands	r3, r2
 8008990:	d00c      	beq.n	80089ac <HAL_USART_IRQHandler+0x2c8>
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	da09      	bge.n	80089ac <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	0018      	movs	r0, r3
 800899c:	f000 fbb5 	bl	800910a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80089a0:	e004      	b.n	80089ac <HAL_USART_IRQHandler+0x2c8>
      return;
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	e002      	b.n	80089ac <HAL_USART_IRQHandler+0x2c8>
    return;
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	e000      	b.n	80089ac <HAL_USART_IRQHandler+0x2c8>
    return;
 80089aa:	46c0      	nop			; (mov r8, r8)
  }
}
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b008      	add	sp, #32
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	0000200f 	.word	0x0000200f
 80089b8:	10000001 	.word	0x10000001
 80089bc:	08008a31 	.word	0x08008a31

080089c0 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80089c8:	46c0      	nop			; (mov r8, r8)
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b002      	add	sp, #8
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	b002      	add	sp, #8
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 80089e8:	46c0      	nop			; (mov r8, r8)
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b002      	add	sp, #8
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4909      	ldr	r1, [pc, #36]	; (8008a28 <USART_EndTransfer+0x38>)
 8008a04:	400a      	ands	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4906      	ldr	r1, [pc, #24]	; (8008a2c <USART_EndTransfer+0x3c>)
 8008a14:	400a      	ands	r2, r1
 8008a16:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2259      	movs	r2, #89	; 0x59
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	5499      	strb	r1, [r3, r2]
}
 8008a20:	46c0      	nop			; (mov r8, r8)
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b002      	add	sp, #8
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	fffffe1f 	.word	0xfffffe1f
 8008a2c:	ef7ffffe 	.word	0xef7ffffe

08008a30 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3c:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f7ff ffc7 	bl	80089e0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	46bd      	mov	sp, r7
 8008a56:	b004      	add	sp, #16
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	603b      	str	r3, [r7, #0]
 8008a66:	1dfb      	adds	r3, r7, #7
 8008a68:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a6a:	e017      	b.n	8008a9c <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	d014      	beq.n	8008a9c <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a72:	f7fa f9f7 	bl	8002e64 <HAL_GetTick>
 8008a76:	0002      	movs	r2, r0
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d302      	bcc.n	8008a88 <USART_WaitOnFlagUntilTimeout+0x2e>
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d109      	bne.n	8008a9c <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2259      	movs	r2, #89	; 0x59
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2258      	movs	r2, #88	; 0x58
 8008a94:	2100      	movs	r1, #0
 8008a96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e00f      	b.n	8008abc <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	425a      	negs	r2, r3
 8008aac:	4153      	adcs	r3, r2
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d0d8      	beq.n	8008a6c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	0018      	movs	r0, r3
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	b004      	add	sp, #16
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008acc:	231e      	movs	r3, #30
 8008ace:	18fb      	adds	r3, r7, r3
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	2280      	movs	r2, #128	; 0x80
 8008aea:	0212      	lsls	r2, r2, #8
 8008aec:	4313      	orrs	r3, r2
 8008aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4ab1      	ldr	r2, [pc, #708]	; (8008dbc <USART_SetConfig+0x2f8>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	0019      	movs	r1, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	697a      	ldr	r2, [r7, #20]
 8008b02:	430a      	orrs	r2, r1
 8008b04:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008b06:	2380      	movs	r3, #128	; 0x80
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699a      	ldr	r2, [r3, #24]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	4aa2      	ldr	r2, [pc, #648]	; (8008dc0 <USART_SetConfig+0x2fc>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	0019      	movs	r1, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	220f      	movs	r2, #15
 8008b4e:	4393      	bics	r3, r2
 8008b50:	0019      	movs	r1, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a98      	ldr	r2, [pc, #608]	; (8008dc4 <USART_SetConfig+0x300>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d127      	bne.n	8008bb8 <USART_SetConfig+0xf4>
 8008b68:	4b97      	ldr	r3, [pc, #604]	; (8008dc8 <USART_SetConfig+0x304>)
 8008b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	4013      	ands	r3, r2
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d017      	beq.n	8008ba4 <USART_SetConfig+0xe0>
 8008b74:	d81b      	bhi.n	8008bae <USART_SetConfig+0xea>
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d00a      	beq.n	8008b90 <USART_SetConfig+0xcc>
 8008b7a:	d818      	bhi.n	8008bae <USART_SetConfig+0xea>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <USART_SetConfig+0xc2>
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d00a      	beq.n	8008b9a <USART_SetConfig+0xd6>
 8008b84:	e013      	b.n	8008bae <USART_SetConfig+0xea>
 8008b86:	231f      	movs	r3, #31
 8008b88:	18fb      	adds	r3, r7, r3
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	701a      	strb	r2, [r3, #0]
 8008b8e:	e058      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008b90:	231f      	movs	r3, #31
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	2202      	movs	r2, #2
 8008b96:	701a      	strb	r2, [r3, #0]
 8008b98:	e053      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008b9a:	231f      	movs	r3, #31
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	2204      	movs	r2, #4
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e04e      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008ba4:	231f      	movs	r3, #31
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	2208      	movs	r2, #8
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e049      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008bae:	231f      	movs	r3, #31
 8008bb0:	18fb      	adds	r3, r7, r3
 8008bb2:	2210      	movs	r2, #16
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e044      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a83      	ldr	r2, [pc, #524]	; (8008dcc <USART_SetConfig+0x308>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d127      	bne.n	8008c12 <USART_SetConfig+0x14e>
 8008bc2:	4b81      	ldr	r3, [pc, #516]	; (8008dc8 <USART_SetConfig+0x304>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	220c      	movs	r2, #12
 8008bc8:	4013      	ands	r3, r2
 8008bca:	2b0c      	cmp	r3, #12
 8008bcc:	d017      	beq.n	8008bfe <USART_SetConfig+0x13a>
 8008bce:	d81b      	bhi.n	8008c08 <USART_SetConfig+0x144>
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d00a      	beq.n	8008bea <USART_SetConfig+0x126>
 8008bd4:	d818      	bhi.n	8008c08 <USART_SetConfig+0x144>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d002      	beq.n	8008be0 <USART_SetConfig+0x11c>
 8008bda:	2b04      	cmp	r3, #4
 8008bdc:	d00a      	beq.n	8008bf4 <USART_SetConfig+0x130>
 8008bde:	e013      	b.n	8008c08 <USART_SetConfig+0x144>
 8008be0:	231f      	movs	r3, #31
 8008be2:	18fb      	adds	r3, r7, r3
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
 8008be8:	e02b      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008bea:	231f      	movs	r3, #31
 8008bec:	18fb      	adds	r3, r7, r3
 8008bee:	2202      	movs	r2, #2
 8008bf0:	701a      	strb	r2, [r3, #0]
 8008bf2:	e026      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008bf4:	231f      	movs	r3, #31
 8008bf6:	18fb      	adds	r3, r7, r3
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e021      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008bfe:	231f      	movs	r3, #31
 8008c00:	18fb      	adds	r3, r7, r3
 8008c02:	2208      	movs	r2, #8
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e01c      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008c08:	231f      	movs	r3, #31
 8008c0a:	18fb      	adds	r3, r7, r3
 8008c0c:	2210      	movs	r2, #16
 8008c0e:	701a      	strb	r2, [r3, #0]
 8008c10:	e017      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6e      	ldr	r2, [pc, #440]	; (8008dd0 <USART_SetConfig+0x30c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d104      	bne.n	8008c26 <USART_SetConfig+0x162>
 8008c1c:	231f      	movs	r3, #31
 8008c1e:	18fb      	adds	r3, r7, r3
 8008c20:	2200      	movs	r2, #0
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e00d      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a6a      	ldr	r2, [pc, #424]	; (8008dd4 <USART_SetConfig+0x310>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d104      	bne.n	8008c3a <USART_SetConfig+0x176>
 8008c30:	231f      	movs	r3, #31
 8008c32:	18fb      	adds	r3, r7, r3
 8008c34:	2200      	movs	r2, #0
 8008c36:	701a      	strb	r2, [r3, #0]
 8008c38:	e003      	b.n	8008c42 <USART_SetConfig+0x17e>
 8008c3a:	231f      	movs	r3, #31
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	2210      	movs	r2, #16
 8008c40:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008c42:	231f      	movs	r3, #31
 8008c44:	18fb      	adds	r3, r7, r3
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d100      	bne.n	8008c4e <USART_SetConfig+0x18a>
 8008c4c:	e139      	b.n	8008ec2 <USART_SetConfig+0x3fe>
 8008c4e:	dd00      	ble.n	8008c52 <USART_SetConfig+0x18e>
 8008c50:	e195      	b.n	8008f7e <USART_SetConfig+0x4ba>
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d100      	bne.n	8008c58 <USART_SetConfig+0x194>
 8008c56:	e0d3      	b.n	8008e00 <USART_SetConfig+0x33c>
 8008c58:	dd00      	ble.n	8008c5c <USART_SetConfig+0x198>
 8008c5a:	e190      	b.n	8008f7e <USART_SetConfig+0x4ba>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <USART_SetConfig+0x1a4>
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d100      	bne.n	8008c66 <USART_SetConfig+0x1a2>
 8008c64:	e061      	b.n	8008d2a <USART_SetConfig+0x266>
 8008c66:	e18a      	b.n	8008f7e <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c68:	f7fc fdea 	bl	8005840 <HAL_RCC_GetPCLK1Freq>
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d044      	beq.n	8008d02 <USART_SetConfig+0x23e>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d03e      	beq.n	8008cfe <USART_SetConfig+0x23a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d038      	beq.n	8008cfa <USART_SetConfig+0x236>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d032      	beq.n	8008cf6 <USART_SetConfig+0x232>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d02c      	beq.n	8008cf2 <USART_SetConfig+0x22e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b05      	cmp	r3, #5
 8008c9e:	d026      	beq.n	8008cee <USART_SetConfig+0x22a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b06      	cmp	r3, #6
 8008ca6:	d020      	beq.n	8008cea <USART_SetConfig+0x226>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b07      	cmp	r3, #7
 8008cae:	d01a      	beq.n	8008ce6 <USART_SetConfig+0x222>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d014      	beq.n	8008ce2 <USART_SetConfig+0x21e>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b09      	cmp	r3, #9
 8008cbe:	d00e      	beq.n	8008cde <USART_SetConfig+0x21a>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b0a      	cmp	r3, #10
 8008cc6:	d008      	beq.n	8008cda <USART_SetConfig+0x216>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b0b      	cmp	r3, #11
 8008cce:	d102      	bne.n	8008cd6 <USART_SetConfig+0x212>
 8008cd0:	2380      	movs	r3, #128	; 0x80
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	e016      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e014      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	e012      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cde:	2340      	movs	r3, #64	; 0x40
 8008ce0:	e010      	b.n	8008d04 <USART_SetConfig+0x240>
 8008ce2:	2320      	movs	r3, #32
 8008ce4:	e00e      	b.n	8008d04 <USART_SetConfig+0x240>
 8008ce6:	2310      	movs	r3, #16
 8008ce8:	e00c      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cea:	230c      	movs	r3, #12
 8008cec:	e00a      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cee:	230a      	movs	r3, #10
 8008cf0:	e008      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	e006      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cf6:	2306      	movs	r3, #6
 8008cf8:	e004      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cfa:	2304      	movs	r3, #4
 8008cfc:	e002      	b.n	8008d04 <USART_SetConfig+0x240>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e000      	b.n	8008d04 <USART_SetConfig+0x240>
 8008d02:	2301      	movs	r3, #1
 8008d04:	0019      	movs	r1, r3
 8008d06:	6938      	ldr	r0, [r7, #16]
 8008d08:	f7f7 f9fc 	bl	8000104 <__udivsi3>
 8008d0c:	0003      	movs	r3, r0
 8008d0e:	005a      	lsls	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	085b      	lsrs	r3, r3, #1
 8008d16:	18d2      	adds	r2, r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	0010      	movs	r0, r2
 8008d20:	f7f7 f9f0 	bl	8000104 <__udivsi3>
 8008d24:	0003      	movs	r3, r0
 8008d26:	61bb      	str	r3, [r7, #24]
      break;
 8008d28:	e12e      	b.n	8008f88 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d052      	beq.n	8008dd8 <USART_SetConfig+0x314>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d03e      	beq.n	8008db8 <USART_SetConfig+0x2f4>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d038      	beq.n	8008db4 <USART_SetConfig+0x2f0>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d032      	beq.n	8008db0 <USART_SetConfig+0x2ec>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b04      	cmp	r3, #4
 8008d50:	d02c      	beq.n	8008dac <USART_SetConfig+0x2e8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d026      	beq.n	8008da8 <USART_SetConfig+0x2e4>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b06      	cmp	r3, #6
 8008d60:	d020      	beq.n	8008da4 <USART_SetConfig+0x2e0>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b07      	cmp	r3, #7
 8008d68:	d01a      	beq.n	8008da0 <USART_SetConfig+0x2dc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b08      	cmp	r3, #8
 8008d70:	d014      	beq.n	8008d9c <USART_SetConfig+0x2d8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b09      	cmp	r3, #9
 8008d78:	d00e      	beq.n	8008d98 <USART_SetConfig+0x2d4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b0a      	cmp	r3, #10
 8008d80:	d008      	beq.n	8008d94 <USART_SetConfig+0x2d0>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b0b      	cmp	r3, #11
 8008d88:	d102      	bne.n	8008d90 <USART_SetConfig+0x2cc>
 8008d8a:	2380      	movs	r3, #128	; 0x80
 8008d8c:	005b      	lsls	r3, r3, #1
 8008d8e:	e024      	b.n	8008dda <USART_SetConfig+0x316>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e022      	b.n	8008dda <USART_SetConfig+0x316>
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	e020      	b.n	8008dda <USART_SetConfig+0x316>
 8008d98:	2340      	movs	r3, #64	; 0x40
 8008d9a:	e01e      	b.n	8008dda <USART_SetConfig+0x316>
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	e01c      	b.n	8008dda <USART_SetConfig+0x316>
 8008da0:	2310      	movs	r3, #16
 8008da2:	e01a      	b.n	8008dda <USART_SetConfig+0x316>
 8008da4:	230c      	movs	r3, #12
 8008da6:	e018      	b.n	8008dda <USART_SetConfig+0x316>
 8008da8:	230a      	movs	r3, #10
 8008daa:	e016      	b.n	8008dda <USART_SetConfig+0x316>
 8008dac:	2308      	movs	r3, #8
 8008dae:	e014      	b.n	8008dda <USART_SetConfig+0x316>
 8008db0:	2306      	movs	r3, #6
 8008db2:	e012      	b.n	8008dda <USART_SetConfig+0x316>
 8008db4:	2304      	movs	r3, #4
 8008db6:	e010      	b.n	8008dda <USART_SetConfig+0x316>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e00e      	b.n	8008dda <USART_SetConfig+0x316>
 8008dbc:	cfff69f3 	.word	0xcfff69f3
 8008dc0:	ffffc0f6 	.word	0xffffc0f6
 8008dc4:	40013800 	.word	0x40013800
 8008dc8:	40021000 	.word	0x40021000
 8008dcc:	40004400 	.word	0x40004400
 8008dd0:	40004800 	.word	0x40004800
 8008dd4:	40004c00 	.word	0x40004c00
 8008dd8:	2301      	movs	r3, #1
 8008dda:	0019      	movs	r1, r3
 8008ddc:	4886      	ldr	r0, [pc, #536]	; (8008ff8 <USART_SetConfig+0x534>)
 8008dde:	f7f7 f991 	bl	8000104 <__udivsi3>
 8008de2:	0003      	movs	r3, r0
 8008de4:	005a      	lsls	r2, r3, #1
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	085b      	lsrs	r3, r3, #1
 8008dec:	18d2      	adds	r2, r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	0019      	movs	r1, r3
 8008df4:	0010      	movs	r0, r2
 8008df6:	f7f7 f985 	bl	8000104 <__udivsi3>
 8008dfa:	0003      	movs	r3, r0
 8008dfc:	61bb      	str	r3, [r7, #24]
      break;
 8008dfe:	e0c3      	b.n	8008f88 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008e00:	f7fc fc92 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 8008e04:	0003      	movs	r3, r0
 8008e06:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d044      	beq.n	8008e9a <USART_SetConfig+0x3d6>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d03e      	beq.n	8008e96 <USART_SetConfig+0x3d2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d038      	beq.n	8008e92 <USART_SetConfig+0x3ce>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d032      	beq.n	8008e8e <USART_SetConfig+0x3ca>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b04      	cmp	r3, #4
 8008e2e:	d02c      	beq.n	8008e8a <USART_SetConfig+0x3c6>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b05      	cmp	r3, #5
 8008e36:	d026      	beq.n	8008e86 <USART_SetConfig+0x3c2>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b06      	cmp	r3, #6
 8008e3e:	d020      	beq.n	8008e82 <USART_SetConfig+0x3be>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b07      	cmp	r3, #7
 8008e46:	d01a      	beq.n	8008e7e <USART_SetConfig+0x3ba>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d014      	beq.n	8008e7a <USART_SetConfig+0x3b6>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b09      	cmp	r3, #9
 8008e56:	d00e      	beq.n	8008e76 <USART_SetConfig+0x3b2>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b0a      	cmp	r3, #10
 8008e5e:	d008      	beq.n	8008e72 <USART_SetConfig+0x3ae>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b0b      	cmp	r3, #11
 8008e66:	d102      	bne.n	8008e6e <USART_SetConfig+0x3aa>
 8008e68:	2380      	movs	r3, #128	; 0x80
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	e016      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e014      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e72:	2380      	movs	r3, #128	; 0x80
 8008e74:	e012      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	e010      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e7a:	2320      	movs	r3, #32
 8008e7c:	e00e      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e7e:	2310      	movs	r3, #16
 8008e80:	e00c      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e82:	230c      	movs	r3, #12
 8008e84:	e00a      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e86:	230a      	movs	r3, #10
 8008e88:	e008      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e8a:	2308      	movs	r3, #8
 8008e8c:	e006      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e8e:	2306      	movs	r3, #6
 8008e90:	e004      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e92:	2304      	movs	r3, #4
 8008e94:	e002      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e96:	2302      	movs	r3, #2
 8008e98:	e000      	b.n	8008e9c <USART_SetConfig+0x3d8>
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	0019      	movs	r1, r3
 8008e9e:	6938      	ldr	r0, [r7, #16]
 8008ea0:	f7f7 f930 	bl	8000104 <__udivsi3>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	005a      	lsls	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	085b      	lsrs	r3, r3, #1
 8008eae:	18d2      	adds	r2, r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	0010      	movs	r0, r2
 8008eb8:	f7f7 f924 	bl	8000104 <__udivsi3>
 8008ebc:	0003      	movs	r3, r0
 8008ebe:	61bb      	str	r3, [r7, #24]
      break;
 8008ec0:	e062      	b.n	8008f88 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d044      	beq.n	8008f54 <USART_SetConfig+0x490>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d03e      	beq.n	8008f50 <USART_SetConfig+0x48c>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d038      	beq.n	8008f4c <USART_SetConfig+0x488>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d032      	beq.n	8008f48 <USART_SetConfig+0x484>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d02c      	beq.n	8008f44 <USART_SetConfig+0x480>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d026      	beq.n	8008f40 <USART_SetConfig+0x47c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b06      	cmp	r3, #6
 8008ef8:	d020      	beq.n	8008f3c <USART_SetConfig+0x478>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	2b07      	cmp	r3, #7
 8008f00:	d01a      	beq.n	8008f38 <USART_SetConfig+0x474>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d014      	beq.n	8008f34 <USART_SetConfig+0x470>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	2b09      	cmp	r3, #9
 8008f10:	d00e      	beq.n	8008f30 <USART_SetConfig+0x46c>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	2b0a      	cmp	r3, #10
 8008f18:	d008      	beq.n	8008f2c <USART_SetConfig+0x468>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b0b      	cmp	r3, #11
 8008f20:	d102      	bne.n	8008f28 <USART_SetConfig+0x464>
 8008f22:	2380      	movs	r3, #128	; 0x80
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	e016      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e014      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f2c:	2380      	movs	r3, #128	; 0x80
 8008f2e:	e012      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	e010      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f34:	2320      	movs	r3, #32
 8008f36:	e00e      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f38:	2310      	movs	r3, #16
 8008f3a:	e00c      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f3c:	230c      	movs	r3, #12
 8008f3e:	e00a      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f40:	230a      	movs	r3, #10
 8008f42:	e008      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f44:	2308      	movs	r3, #8
 8008f46:	e006      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f48:	2306      	movs	r3, #6
 8008f4a:	e004      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	e002      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e000      	b.n	8008f56 <USART_SetConfig+0x492>
 8008f54:	2301      	movs	r3, #1
 8008f56:	0019      	movs	r1, r3
 8008f58:	2380      	movs	r3, #128	; 0x80
 8008f5a:	0218      	lsls	r0, r3, #8
 8008f5c:	f7f7 f8d2 	bl	8000104 <__udivsi3>
 8008f60:	0003      	movs	r3, r0
 8008f62:	005a      	lsls	r2, r3, #1
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	085b      	lsrs	r3, r3, #1
 8008f6a:	18d2      	adds	r2, r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	0019      	movs	r1, r3
 8008f72:	0010      	movs	r0, r2
 8008f74:	f7f7 f8c6 	bl	8000104 <__udivsi3>
 8008f78:	0003      	movs	r3, r0
 8008f7a:	61bb      	str	r3, [r7, #24]
      break;
 8008f7c:	e004      	b.n	8008f88 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8008f7e:	231e      	movs	r3, #30
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	2201      	movs	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
      break;
 8008f86:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b0f      	cmp	r3, #15
 8008f8c:	d91c      	bls.n	8008fc8 <USART_SetConfig+0x504>
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	2380      	movs	r3, #128	; 0x80
 8008f92:	025b      	lsls	r3, r3, #9
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d217      	bcs.n	8008fc8 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	200e      	movs	r0, #14
 8008f9e:	183b      	adds	r3, r7, r0
 8008fa0:	210f      	movs	r1, #15
 8008fa2:	438a      	bics	r2, r1
 8008fa4:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	085b      	lsrs	r3, r3, #1
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	2207      	movs	r2, #7
 8008fae:	4013      	ands	r3, r2
 8008fb0:	b299      	uxth	r1, r3
 8008fb2:	183b      	adds	r3, r7, r0
 8008fb4:	183a      	adds	r2, r7, r0
 8008fb6:	8812      	ldrh	r2, [r2, #0]
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	183a      	adds	r2, r7, r0
 8008fc2:	8812      	ldrh	r2, [r2, #0]
 8008fc4:	60da      	str	r2, [r3, #12]
 8008fc6:	e003      	b.n	8008fd0 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8008fc8:	231e      	movs	r3, #30
 8008fca:	18fb      	adds	r3, r7, r3
 8008fcc:	2201      	movs	r2, #1
 8008fce:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008fe8:	231e      	movs	r3, #30
 8008fea:	18fb      	adds	r3, r7, r3
 8008fec:	781b      	ldrb	r3, [r3, #0]
}
 8008fee:	0018      	movs	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b008      	add	sp, #32
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	00f42400 	.word	0x00f42400

08008ffc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af02      	add	r7, sp, #8
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800900a:	f7f9 ff2b 	bl	8002e64 <HAL_GetTick>
 800900e:	0003      	movs	r3, r0
 8009010:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2208      	movs	r2, #8
 800901a:	4013      	ands	r3, r2
 800901c:	2b08      	cmp	r3, #8
 800901e:	d10e      	bne.n	800903e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	0399      	lsls	r1, r3, #14
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	23fa      	movs	r3, #250	; 0xfa
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	0013      	movs	r3, r2
 8009030:	2200      	movs	r2, #0
 8009032:	f7ff fd12 	bl	8008a5a <USART_WaitOnFlagUntilTimeout>
 8009036:	1e03      	subs	r3, r0, #0
 8009038:	d001      	beq.n	800903e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e01e      	b.n	800907c <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2204      	movs	r2, #4
 8009046:	4013      	ands	r3, r2
 8009048:	2b04      	cmp	r3, #4
 800904a:	d10e      	bne.n	800906a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	2380      	movs	r3, #128	; 0x80
 8009050:	03d9      	lsls	r1, r3, #15
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	23fa      	movs	r3, #250	; 0xfa
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	0013      	movs	r3, r2
 800905c:	2200      	movs	r2, #0
 800905e:	f7ff fcfc 	bl	8008a5a <USART_WaitOnFlagUntilTimeout>
 8009062:	1e03      	subs	r3, r0, #0
 8009064:	d001      	beq.n	800906a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e008      	b.n	800907c <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2259      	movs	r2, #89	; 0x59
 800906e:	2101      	movs	r1, #1
 8009070:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2258      	movs	r2, #88	; 0x58
 8009076:	2100      	movs	r1, #0
 8009078:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b004      	add	sp, #16
 8009082:	bd80      	pop	{r7, pc}

08009084 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2140      	movs	r1, #64	; 0x40
 8009098:	438a      	bics	r2, r1
 800909a:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689a      	ldr	r2, [r3, #8]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2101      	movs	r1, #1
 80090a8:	438a      	bics	r2, r1
 80090aa:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2259      	movs	r2, #89	; 0x59
 80090b6:	5c9b      	ldrb	r3, [r3, r2]
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	2b12      	cmp	r3, #18
 80090bc:	d114      	bne.n	80090e8 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2208      	movs	r2, #8
 80090c4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2108      	movs	r1, #8
 80090d2:	430a      	orrs	r2, r1
 80090d4:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2259      	movs	r2, #89	; 0x59
 80090da:	2101      	movs	r1, #1
 80090dc:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	0018      	movs	r0, r3
 80090e2:	f7ff fc6d 	bl	80089c0 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80090e6:	e00c      	b.n	8009102 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d107      	bne.n	8009102 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2259      	movs	r2, #89	; 0x59
 80090f6:	2101      	movs	r1, #1
 80090f8:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	0018      	movs	r0, r3
 80090fe:	f7ff fc67 	bl	80089d0 <HAL_USART_TxRxCpltCallback>
}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	46bd      	mov	sp, r7
 8009106:	b002      	add	sp, #8
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	46bd      	mov	sp, r7
 8009116:	b002      	add	sp, #8
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	46bd      	mov	sp, r7
 8009126:	b002      	add	sp, #8
 8009128:	bd80      	pop	{r7, pc}

0800912a <LL_GPIO_SetPinMode>:
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b084      	sub	sp, #16
 800912e:	af00      	add	r7, sp, #0
 8009130:	60f8      	str	r0, [r7, #12]
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6819      	ldr	r1, [r3, #0]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	435b      	muls	r3, r3
 800913e:	001a      	movs	r2, r3
 8009140:	0013      	movs	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	189b      	adds	r3, r3, r2
 8009146:	43db      	mvns	r3, r3
 8009148:	400b      	ands	r3, r1
 800914a:	001a      	movs	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	435b      	muls	r3, r3
 8009150:	6879      	ldr	r1, [r7, #4]
 8009152:	434b      	muls	r3, r1
 8009154:	431a      	orrs	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	601a      	str	r2, [r3, #0]
}
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	46bd      	mov	sp, r7
 800915e:	b004      	add	sp, #16
 8009160:	bd80      	pop	{r7, pc}

08009162 <LL_GPIO_SetPinOutputType>:
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	60b9      	str	r1, [r7, #8]
 800916c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	43d2      	mvns	r2, r2
 8009176:	401a      	ands	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	434b      	muls	r3, r1
 800917e:	431a      	orrs	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	605a      	str	r2, [r3, #4]
}
 8009184:	46c0      	nop			; (mov r8, r8)
 8009186:	46bd      	mov	sp, r7
 8009188:	b004      	add	sp, #16
 800918a:	bd80      	pop	{r7, pc}

0800918c <LL_GPIO_SetPinSpeed>:
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6899      	ldr	r1, [r3, #8]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	435b      	muls	r3, r3
 80091a0:	001a      	movs	r2, r3
 80091a2:	0013      	movs	r3, r2
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	189b      	adds	r3, r3, r2
 80091a8:	43db      	mvns	r3, r3
 80091aa:	400b      	ands	r3, r1
 80091ac:	001a      	movs	r2, r3
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	435b      	muls	r3, r3
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	434b      	muls	r3, r1
 80091b6:	431a      	orrs	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	609a      	str	r2, [r3, #8]
}
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	46bd      	mov	sp, r7
 80091c0:	b004      	add	sp, #16
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <LL_GPIO_SetPinPull>:
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68d9      	ldr	r1, [r3, #12]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	435b      	muls	r3, r3
 80091d8:	001a      	movs	r2, r3
 80091da:	0013      	movs	r3, r2
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	189b      	adds	r3, r3, r2
 80091e0:	43db      	mvns	r3, r3
 80091e2:	400b      	ands	r3, r1
 80091e4:	001a      	movs	r2, r3
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	435b      	muls	r3, r3
 80091ea:	6879      	ldr	r1, [r7, #4]
 80091ec:	434b      	muls	r3, r1
 80091ee:	431a      	orrs	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	60da      	str	r2, [r3, #12]
}
 80091f4:	46c0      	nop			; (mov r8, r8)
 80091f6:	46bd      	mov	sp, r7
 80091f8:	b004      	add	sp, #16
 80091fa:	bd80      	pop	{r7, pc}

080091fc <LL_GPIO_SetAFPin_0_7>:
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6a19      	ldr	r1, [r3, #32]
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	435b      	muls	r3, r3
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	4353      	muls	r3, r2
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	435a      	muls	r2, r3
 8009218:	0013      	movs	r3, r2
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	43db      	mvns	r3, r3
 8009220:	400b      	ands	r3, r1
 8009222:	001a      	movs	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	435b      	muls	r3, r3
 8009228:	68b9      	ldr	r1, [r7, #8]
 800922a:	434b      	muls	r3, r1
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	434b      	muls	r3, r1
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	434b      	muls	r3, r1
 8009234:	431a      	orrs	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
}
 800923a:	46c0      	nop			; (mov r8, r8)
 800923c:	46bd      	mov	sp, r7
 800923e:	b004      	add	sp, #16
 8009240:	bd80      	pop	{r7, pc}

08009242 <LL_GPIO_SetAFPin_8_15>:
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	0a1b      	lsrs	r3, r3, #8
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	0a12      	lsrs	r2, r2, #8
 800925a:	4353      	muls	r3, r2
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	0a12      	lsrs	r2, r2, #8
 8009260:	4353      	muls	r3, r2
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	0a12      	lsrs	r2, r2, #8
 8009266:	435a      	muls	r2, r3
 8009268:	0013      	movs	r3, r2
 800926a:	011b      	lsls	r3, r3, #4
 800926c:	1a9b      	subs	r3, r3, r2
 800926e:	43db      	mvns	r3, r3
 8009270:	400b      	ands	r3, r1
 8009272:	001a      	movs	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	68b9      	ldr	r1, [r7, #8]
 800927a:	0a09      	lsrs	r1, r1, #8
 800927c:	434b      	muls	r3, r1
 800927e:	68b9      	ldr	r1, [r7, #8]
 8009280:	0a09      	lsrs	r1, r1, #8
 8009282:	434b      	muls	r3, r1
 8009284:	68b9      	ldr	r1, [r7, #8]
 8009286:	0a09      	lsrs	r1, r1, #8
 8009288:	434b      	muls	r3, r1
 800928a:	6879      	ldr	r1, [r7, #4]
 800928c:	434b      	muls	r3, r1
 800928e:	431a      	orrs	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009294:	46c0      	nop			; (mov r8, r8)
 8009296:	46bd      	mov	sp, r7
 8009298:	b004      	add	sp, #16
 800929a:	bd80      	pop	{r7, pc}

0800929c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80092a6:	2300      	movs	r3, #0
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80092aa:	e047      	b.n	800933c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2101      	movs	r1, #1
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	4091      	lsls	r1, r2
 80092b6:	000a      	movs	r2, r1
 80092b8:	4013      	ands	r3, r2
 80092ba:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d039      	beq.n	8009336 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d003      	beq.n	80092d2 <LL_GPIO_Init+0x36>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d10d      	bne.n	80092ee <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	68b9      	ldr	r1, [r7, #8]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff ff56 	bl	800918c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f7ff ff3a 	bl	8009162 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	691a      	ldr	r2, [r3, #16]
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	0018      	movs	r0, r3
 80092f8:	f7ff ff64 	bl	80091c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	2b02      	cmp	r3, #2
 8009302:	d111      	bne.n	8009328 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2bff      	cmp	r3, #255	; 0xff
 8009308:	d807      	bhi.n	800931a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	695a      	ldr	r2, [r3, #20]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	0018      	movs	r0, r3
 8009314:	f7ff ff72 	bl	80091fc <LL_GPIO_SetAFPin_0_7>
 8009318:	e006      	b.n	8009328 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	695a      	ldr	r2, [r3, #20]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	0018      	movs	r0, r3
 8009324:	f7ff ff8d 	bl	8009242 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	68b9      	ldr	r1, [r7, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	0018      	movs	r0, r3
 8009332:	f7ff fefa 	bl	800912a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3301      	adds	r3, #1
 800933a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	40da      	lsrs	r2, r3
 8009344:	1e13      	subs	r3, r2, #0
 8009346:	d1b1      	bne.n	80092ac <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009348:	2300      	movs	r3, #0
}
 800934a:	0018      	movs	r0, r3
 800934c:	46bd      	mov	sp, r7
 800934e:	b004      	add	sp, #16
 8009350:	bd80      	pop	{r7, pc}
	...

08009354 <LL_RCC_HSI_IsReady>:
{
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009358:	4b07      	ldr	r3, [pc, #28]	; (8009378 <LL_RCC_HSI_IsReady+0x24>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	2380      	movs	r3, #128	; 0x80
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	401a      	ands	r2, r3
 8009362:	2380      	movs	r3, #128	; 0x80
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	429a      	cmp	r2, r3
 8009368:	d101      	bne.n	800936e <LL_RCC_HSI_IsReady+0x1a>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <LL_RCC_HSI_IsReady+0x1c>
 800936e:	2300      	movs	r3, #0
}
 8009370:	0018      	movs	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	40021000 	.word	0x40021000

0800937c <LL_RCC_LSE_IsReady>:
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <LL_RCC_LSE_IsReady+0x1c>)
 8009382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009384:	2202      	movs	r2, #2
 8009386:	4013      	ands	r3, r2
 8009388:	2b02      	cmp	r3, #2
 800938a:	d101      	bne.n	8009390 <LL_RCC_LSE_IsReady+0x14>
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <LL_RCC_LSE_IsReady+0x16>
 8009390:	2300      	movs	r3, #0
}
 8009392:	0018      	movs	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40021000 	.word	0x40021000

0800939c <LL_RCC_GetSysClkSource>:
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80093a0:	4b03      	ldr	r3, [pc, #12]	; (80093b0 <LL_RCC_GetSysClkSource+0x14>)
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	2238      	movs	r2, #56	; 0x38
 80093a6:	4013      	ands	r3, r2
}
 80093a8:	0018      	movs	r0, r3
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	46c0      	nop			; (mov r8, r8)
 80093b0:	40021000 	.word	0x40021000

080093b4 <LL_RCC_GetAHBPrescaler>:
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80093b8:	4b03      	ldr	r3, [pc, #12]	; (80093c8 <LL_RCC_GetAHBPrescaler+0x14>)
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	23f0      	movs	r3, #240	; 0xf0
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	4013      	ands	r3, r2
}
 80093c2:	0018      	movs	r0, r3
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40021000 	.word	0x40021000

080093cc <LL_RCC_GetAPB1Prescaler>:
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80093d2:	689a      	ldr	r2, [r3, #8]
 80093d4:	23e0      	movs	r3, #224	; 0xe0
 80093d6:	01db      	lsls	r3, r3, #7
 80093d8:	4013      	ands	r3, r2
}
 80093da:	0018      	movs	r0, r3
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40021000 	.word	0x40021000

080093e4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <LL_RCC_GetUSARTClockSource+0x20>)
 80093ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	401a      	ands	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	041b      	lsls	r3, r3, #16
 80093f8:	4313      	orrs	r3, r2
}
 80093fa:	0018      	movs	r0, r3
 80093fc:	46bd      	mov	sp, r7
 80093fe:	b002      	add	sp, #8
 8009400:	bd80      	pop	{r7, pc}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	40021000 	.word	0x40021000

08009408 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800940c:	4b03      	ldr	r3, [pc, #12]	; (800941c <LL_RCC_PLL_GetN+0x14>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	0a1b      	lsrs	r3, r3, #8
 8009412:	227f      	movs	r2, #127	; 0x7f
 8009414:	4013      	ands	r3, r2
}
 8009416:	0018      	movs	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	40021000 	.word	0x40021000

08009420 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009424:	4b03      	ldr	r3, [pc, #12]	; (8009434 <LL_RCC_PLL_GetR+0x14>)
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	0f5b      	lsrs	r3, r3, #29
 800942a:	075b      	lsls	r3, r3, #29
}
 800942c:	0018      	movs	r0, r3
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	40021000 	.word	0x40021000

08009438 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800943c:	4b03      	ldr	r3, [pc, #12]	; (800944c <LL_RCC_PLL_GetMainSource+0x14>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	2203      	movs	r2, #3
 8009442:	4013      	ands	r3, r2
}
 8009444:	0018      	movs	r0, r3
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	40021000 	.word	0x40021000

08009450 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <LL_RCC_PLL_GetDivider+0x14>)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2270      	movs	r2, #112	; 0x70
 800945a:	4013      	ands	r3, r2
}
 800945c:	0018      	movs	r0, r3
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	40021000 	.word	0x40021000

08009468 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009470:	f000 f8a8 	bl	80095c4 <RCC_GetSystemClockFreq>
 8009474:	0002      	movs	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	0018      	movs	r0, r3
 8009480:	f000 f8ce 	bl	8009620 <RCC_GetHCLKClockFreq>
 8009484:	0002      	movs	r2, r0
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	0018      	movs	r0, r3
 8009490:	f000 f8de 	bl	8009650 <RCC_GetPCLK1ClockFreq>
 8009494:	0002      	movs	r2, r0
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	609a      	str	r2, [r3, #8]
}
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	46bd      	mov	sp, r7
 800949e:	b002      	add	sp, #8
 80094a0:	bd80      	pop	{r7, pc}
	...

080094a4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d134      	bne.n	8009520 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7ff ff93 	bl	80093e4 <LL_RCC_GetUSARTClockSource>
 80094be:	0003      	movs	r3, r0
 80094c0:	4a39      	ldr	r2, [pc, #228]	; (80095a8 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d016      	beq.n	80094f4 <LL_RCC_GetUSARTClockFreq+0x50>
 80094c6:	4a38      	ldr	r2, [pc, #224]	; (80095a8 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d81c      	bhi.n	8009506 <LL_RCC_GetUSARTClockFreq+0x62>
 80094cc:	4a37      	ldr	r2, [pc, #220]	; (80095ac <LL_RCC_GetUSARTClockFreq+0x108>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d003      	beq.n	80094da <LL_RCC_GetUSARTClockFreq+0x36>
 80094d2:	4a37      	ldr	r2, [pc, #220]	; (80095b0 <LL_RCC_GetUSARTClockFreq+0x10c>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d005      	beq.n	80094e4 <LL_RCC_GetUSARTClockFreq+0x40>
 80094d8:	e015      	b.n	8009506 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80094da:	f000 f873 	bl	80095c4 <RCC_GetSystemClockFreq>
 80094de:	0003      	movs	r3, r0
 80094e0:	60fb      	str	r3, [r7, #12]
        break;
 80094e2:	e05c      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80094e4:	f7ff ff36 	bl	8009354 <LL_RCC_HSI_IsReady>
 80094e8:	0003      	movs	r3, r0
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d150      	bne.n	8009590 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 80094ee:	4b31      	ldr	r3, [pc, #196]	; (80095b4 <LL_RCC_GetUSARTClockFreq+0x110>)
 80094f0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094f2:	e04d      	b.n	8009590 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80094f4:	f7ff ff42 	bl	800937c <LL_RCC_LSE_IsReady>
 80094f8:	0003      	movs	r3, r0
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d14a      	bne.n	8009594 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 80094fe:	2380      	movs	r3, #128	; 0x80
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009504:	e046      	b.n	8009594 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009506:	f000 f85d 	bl	80095c4 <RCC_GetSystemClockFreq>
 800950a:	0003      	movs	r3, r0
 800950c:	0018      	movs	r0, r3
 800950e:	f000 f887 	bl	8009620 <RCC_GetHCLKClockFreq>
 8009512:	0003      	movs	r3, r0
 8009514:	0018      	movs	r0, r3
 8009516:	f000 f89b 	bl	8009650 <RCC_GetPCLK1ClockFreq>
 800951a:	0003      	movs	r3, r0
 800951c:	60fb      	str	r3, [r7, #12]
        break;
 800951e:	e03e      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b0c      	cmp	r3, #12
 8009524:	d13b      	bne.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	0018      	movs	r0, r3
 800952a:	f7ff ff5b 	bl	80093e4 <LL_RCC_GetUSARTClockSource>
 800952e:	0003      	movs	r3, r0
 8009530:	4a21      	ldr	r2, [pc, #132]	; (80095b8 <LL_RCC_GetUSARTClockFreq+0x114>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d016      	beq.n	8009564 <LL_RCC_GetUSARTClockFreq+0xc0>
 8009536:	4a20      	ldr	r2, [pc, #128]	; (80095b8 <LL_RCC_GetUSARTClockFreq+0x114>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d81c      	bhi.n	8009576 <LL_RCC_GetUSARTClockFreq+0xd2>
 800953c:	4a1f      	ldr	r2, [pc, #124]	; (80095bc <LL_RCC_GetUSARTClockFreq+0x118>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d003      	beq.n	800954a <LL_RCC_GetUSARTClockFreq+0xa6>
 8009542:	4a1f      	ldr	r2, [pc, #124]	; (80095c0 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d005      	beq.n	8009554 <LL_RCC_GetUSARTClockFreq+0xb0>
 8009548:	e015      	b.n	8009576 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800954a:	f000 f83b 	bl	80095c4 <RCC_GetSystemClockFreq>
 800954e:	0003      	movs	r3, r0
 8009550:	60fb      	str	r3, [r7, #12]
        break;
 8009552:	e024      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009554:	f7ff fefe 	bl	8009354 <LL_RCC_HSI_IsReady>
 8009558:	0003      	movs	r3, r0
 800955a:	2b01      	cmp	r3, #1
 800955c:	d11c      	bne.n	8009598 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800955e:	4b15      	ldr	r3, [pc, #84]	; (80095b4 <LL_RCC_GetUSARTClockFreq+0x110>)
 8009560:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009562:	e019      	b.n	8009598 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009564:	f7ff ff0a 	bl	800937c <LL_RCC_LSE_IsReady>
 8009568:	0003      	movs	r3, r0
 800956a:	2b01      	cmp	r3, #1
 800956c:	d116      	bne.n	800959c <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800956e:	2380      	movs	r3, #128	; 0x80
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009574:	e012      	b.n	800959c <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009576:	f000 f825 	bl	80095c4 <RCC_GetSystemClockFreq>
 800957a:	0003      	movs	r3, r0
 800957c:	0018      	movs	r0, r3
 800957e:	f000 f84f 	bl	8009620 <RCC_GetHCLKClockFreq>
 8009582:	0003      	movs	r3, r0
 8009584:	0018      	movs	r0, r3
 8009586:	f000 f863 	bl	8009650 <RCC_GetPCLK1ClockFreq>
 800958a:	0003      	movs	r3, r0
 800958c:	60fb      	str	r3, [r7, #12]
        break;
 800958e:	e006      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8009590:	46c0      	nop			; (mov r8, r8)
 8009592:	e004      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8009594:	46c0      	nop			; (mov r8, r8)
 8009596:	e002      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 8009598:	46c0      	nop			; (mov r8, r8)
 800959a:	e000      	b.n	800959e <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800959c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800959e:	68fb      	ldr	r3, [r7, #12]
}
 80095a0:	0018      	movs	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b004      	add	sp, #16
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	00030003 	.word	0x00030003
 80095ac:	00030001 	.word	0x00030001
 80095b0:	00030002 	.word	0x00030002
 80095b4:	00f42400 	.word	0x00f42400
 80095b8:	000c000c 	.word	0x000c000c
 80095bc:	000c0004 	.word	0x000c0004
 80095c0:	000c0008 	.word	0x000c0008

080095c4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80095ca:	f7ff fee7 	bl	800939c <LL_RCC_GetSysClkSource>
 80095ce:	0003      	movs	r3, r0
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d002      	beq.n	80095da <RCC_GetSystemClockFreq+0x16>
 80095d4:	2b10      	cmp	r3, #16
 80095d6:	d003      	beq.n	80095e0 <RCC_GetSystemClockFreq+0x1c>
 80095d8:	e007      	b.n	80095ea <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80095da:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <RCC_GetSystemClockFreq+0x50>)
 80095dc:	607b      	str	r3, [r7, #4]
      break;
 80095de:	e014      	b.n	800960a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80095e0:	f000 f84c 	bl	800967c <RCC_PLL_GetFreqDomain_SYS>
 80095e4:	0003      	movs	r3, r0
 80095e6:	607b      	str	r3, [r7, #4]
      break;
 80095e8:	e00f      	b.n	800960a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <RCC_GetSystemClockFreq+0x54>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	0adb      	lsrs	r3, r3, #11
 80095f0:	2207      	movs	r2, #7
 80095f2:	4013      	ands	r3, r2
 80095f4:	2201      	movs	r2, #1
 80095f6:	409a      	lsls	r2, r3
 80095f8:	0013      	movs	r3, r2
 80095fa:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	4807      	ldr	r0, [pc, #28]	; (800961c <RCC_GetSystemClockFreq+0x58>)
 8009600:	f7f6 fd80 	bl	8000104 <__udivsi3>
 8009604:	0003      	movs	r3, r0
 8009606:	607b      	str	r3, [r7, #4]
      break;
 8009608:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800960a:	687b      	ldr	r3, [r7, #4]
}
 800960c:	0018      	movs	r0, r3
 800960e:	46bd      	mov	sp, r7
 8009610:	b002      	add	sp, #8
 8009612:	bd80      	pop	{r7, pc}
 8009614:	007a1200 	.word	0x007a1200
 8009618:	40021000 	.word	0x40021000
 800961c:	00f42400 	.word	0x00f42400

08009620 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009628:	f7ff fec4 	bl	80093b4 <LL_RCC_GetAHBPrescaler>
 800962c:	0003      	movs	r3, r0
 800962e:	0a1b      	lsrs	r3, r3, #8
 8009630:	220f      	movs	r2, #15
 8009632:	401a      	ands	r2, r3
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <RCC_GetHCLKClockFreq+0x2c>)
 8009636:	0092      	lsls	r2, r2, #2
 8009638:	58d3      	ldr	r3, [r2, r3]
 800963a:	221f      	movs	r2, #31
 800963c:	4013      	ands	r3, r2
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	40da      	lsrs	r2, r3
 8009642:	0013      	movs	r3, r2
}
 8009644:	0018      	movs	r0, r3
 8009646:	46bd      	mov	sp, r7
 8009648:	b002      	add	sp, #8
 800964a:	bd80      	pop	{r7, pc}
 800964c:	080099c4 	.word	0x080099c4

08009650 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009658:	f7ff feb8 	bl	80093cc <LL_RCC_GetAPB1Prescaler>
 800965c:	0003      	movs	r3, r0
 800965e:	0b1a      	lsrs	r2, r3, #12
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <RCC_GetPCLK1ClockFreq+0x28>)
 8009662:	0092      	lsls	r2, r2, #2
 8009664:	58d3      	ldr	r3, [r2, r3]
 8009666:	221f      	movs	r2, #31
 8009668:	4013      	ands	r3, r2
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	40da      	lsrs	r2, r3
 800966e:	0013      	movs	r3, r2
}
 8009670:	0018      	movs	r0, r3
 8009672:	46bd      	mov	sp, r7
 8009674:	b002      	add	sp, #8
 8009676:	bd80      	pop	{r7, pc}
 8009678:	08009a04 	.word	0x08009a04

0800967c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009682:	f7ff fed9 	bl	8009438 <LL_RCC_PLL_GetMainSource>
 8009686:	0003      	movs	r3, r0
 8009688:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d003      	beq.n	8009698 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b03      	cmp	r3, #3
 8009694:	d003      	beq.n	800969e <RCC_PLL_GetFreqDomain_SYS+0x22>
 8009696:	e005      	b.n	80096a4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8009698:	4b13      	ldr	r3, [pc, #76]	; (80096e8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800969a:	607b      	str	r3, [r7, #4]
      break;
 800969c:	e005      	b.n	80096aa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80096a0:	607b      	str	r3, [r7, #4]
      break;
 80096a2:	e002      	b.n	80096aa <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80096a4:	4b10      	ldr	r3, [pc, #64]	; (80096e8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80096a6:	607b      	str	r3, [r7, #4]
      break;
 80096a8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80096aa:	f7ff fead 	bl	8009408 <LL_RCC_PLL_GetN>
 80096ae:	0002      	movs	r2, r0
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4353      	muls	r3, r2
 80096b4:	001c      	movs	r4, r3
 80096b6:	f7ff fecb 	bl	8009450 <LL_RCC_PLL_GetDivider>
 80096ba:	0003      	movs	r3, r0
 80096bc:	091b      	lsrs	r3, r3, #4
 80096be:	3301      	adds	r3, #1
 80096c0:	0019      	movs	r1, r3
 80096c2:	0020      	movs	r0, r4
 80096c4:	f7f6 fd1e 	bl	8000104 <__udivsi3>
 80096c8:	0003      	movs	r3, r0
 80096ca:	001c      	movs	r4, r3
 80096cc:	f7ff fea8 	bl	8009420 <LL_RCC_PLL_GetR>
 80096d0:	0003      	movs	r3, r0
 80096d2:	0f5b      	lsrs	r3, r3, #29
 80096d4:	3301      	adds	r3, #1
 80096d6:	0019      	movs	r1, r3
 80096d8:	0020      	movs	r0, r4
 80096da:	f7f6 fd13 	bl	8000104 <__udivsi3>
 80096de:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80096e0:	0018      	movs	r0, r3
 80096e2:	46bd      	mov	sp, r7
 80096e4:	b003      	add	sp, #12
 80096e6:	bd90      	pop	{r4, r7, pc}
 80096e8:	00f42400 	.word	0x00f42400
 80096ec:	007a1200 	.word	0x007a1200

080096f0 <LL_USART_IsEnabled>:
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2201      	movs	r2, #1
 80096fe:	4013      	ands	r3, r2
 8009700:	2b01      	cmp	r3, #1
 8009702:	d101      	bne.n	8009708 <LL_USART_IsEnabled+0x18>
 8009704:	2301      	movs	r3, #1
 8009706:	e000      	b.n	800970a <LL_USART_IsEnabled+0x1a>
 8009708:	2300      	movs	r3, #0
}
 800970a:	0018      	movs	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	b002      	add	sp, #8
 8009710:	bd80      	pop	{r7, pc}

08009712 <LL_USART_SetPrescaler>:
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b082      	sub	sp, #8
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	220f      	movs	r2, #15
 8009722:	4393      	bics	r3, r2
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	b292      	uxth	r2, r2
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800972e:	46c0      	nop			; (mov r8, r8)
 8009730:	46bd      	mov	sp, r7
 8009732:	b002      	add	sp, #8
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <LL_USART_SetStopBitsLength>:
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	4a05      	ldr	r2, [pc, #20]	; (800975c <LL_USART_SetStopBitsLength+0x24>)
 8009748:	401a      	ands	r2, r3
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	605a      	str	r2, [r3, #4]
}
 8009752:	46c0      	nop			; (mov r8, r8)
 8009754:	46bd      	mov	sp, r7
 8009756:	b002      	add	sp, #8
 8009758:	bd80      	pop	{r7, pc}
 800975a:	46c0      	nop			; (mov r8, r8)
 800975c:	ffffcfff 	.word	0xffffcfff

08009760 <LL_USART_SetHWFlowCtrl>:
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	4a05      	ldr	r2, [pc, #20]	; (8009784 <LL_USART_SetHWFlowCtrl+0x24>)
 8009770:	401a      	ands	r2, r3
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	609a      	str	r2, [r3, #8]
}
 800977a:	46c0      	nop			; (mov r8, r8)
 800977c:	46bd      	mov	sp, r7
 800977e:	b002      	add	sp, #8
 8009780:	bd80      	pop	{r7, pc}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	fffffcff 	.word	0xfffffcff

08009788 <LL_USART_SetBaudRate>:
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b0b      	cmp	r3, #11
 800979a:	d843      	bhi.n	8009824 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	2380      	movs	r3, #128	; 0x80
 80097a0:	021b      	lsls	r3, r3, #8
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d126      	bne.n	80097f4 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	001a      	movs	r2, r3
 80097ac:	4b1f      	ldr	r3, [pc, #124]	; (800982c <LL_USART_SetBaudRate+0xa4>)
 80097ae:	0092      	lsls	r2, r2, #2
 80097b0:	58d3      	ldr	r3, [r2, r3]
 80097b2:	0019      	movs	r1, r3
 80097b4:	68b8      	ldr	r0, [r7, #8]
 80097b6:	f7f6 fca5 	bl	8000104 <__udivsi3>
 80097ba:	0003      	movs	r3, r0
 80097bc:	005a      	lsls	r2, r3, #1
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	085b      	lsrs	r3, r3, #1
 80097c2:	18d3      	adds	r3, r2, r3
 80097c4:	6a39      	ldr	r1, [r7, #32]
 80097c6:	0018      	movs	r0, r3
 80097c8:	f7f6 fc9c 	bl	8000104 <__udivsi3>
 80097cc:	0003      	movs	r3, r0
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	4a16      	ldr	r2, [pc, #88]	; (8009830 <LL_USART_SetBaudRate+0xa8>)
 80097d6:	4013      	ands	r3, r2
 80097d8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	085b      	lsrs	r3, r3, #1
 80097de:	b29b      	uxth	r3, r3
 80097e0:	001a      	movs	r2, r3
 80097e2:	2307      	movs	r3, #7
 80097e4:	4013      	ands	r3, r2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	693a      	ldr	r2, [r7, #16]
 80097f0:	60da      	str	r2, [r3, #12]
}
 80097f2:	e017      	b.n	8009824 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	001a      	movs	r2, r3
 80097fa:	4b0c      	ldr	r3, [pc, #48]	; (800982c <LL_USART_SetBaudRate+0xa4>)
 80097fc:	0092      	lsls	r2, r2, #2
 80097fe:	58d3      	ldr	r3, [r2, r3]
 8009800:	0019      	movs	r1, r3
 8009802:	68b8      	ldr	r0, [r7, #8]
 8009804:	f7f6 fc7e 	bl	8000104 <__udivsi3>
 8009808:	0003      	movs	r3, r0
 800980a:	001a      	movs	r2, r3
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	085b      	lsrs	r3, r3, #1
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	6a39      	ldr	r1, [r7, #32]
 8009814:	0018      	movs	r0, r3
 8009816:	f7f6 fc75 	bl	8000104 <__udivsi3>
 800981a:	0003      	movs	r3, r0
 800981c:	b29b      	uxth	r3, r3
 800981e:	001a      	movs	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	60da      	str	r2, [r3, #12]
}
 8009824:	46c0      	nop			; (mov r8, r8)
 8009826:	46bd      	mov	sp, r7
 8009828:	b006      	add	sp, #24
 800982a:	bd80      	pop	{r7, pc}
 800982c:	08009a78 	.word	0x08009a78
 8009830:	0000fff0 	.word	0x0000fff0

08009834 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009834:	b590      	push	{r4, r7, lr}
 8009836:	b08b      	sub	sp, #44	; 0x2c
 8009838:	af02      	add	r7, sp, #8
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800983e:	231f      	movs	r3, #31
 8009840:	18fb      	adds	r3, r7, r3
 8009842:	2201      	movs	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	0018      	movs	r0, r3
 800984e:	f7ff ff4f 	bl	80096f0 <LL_USART_IsEnabled>
 8009852:	1e03      	subs	r3, r0, #0
 8009854:	d16a      	bne.n	800992c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a38      	ldr	r2, [pc, #224]	; (800993c <LL_USART_Init+0x108>)
 800985c:	401a      	ands	r2, r3
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	6899      	ldr	r1, [r3, #8]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	4319      	orrs	r1, r3
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	4319      	orrs	r1, r3
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	430b      	orrs	r3, r1
 8009874:	431a      	orrs	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68da      	ldr	r2, [r3, #12]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	0011      	movs	r1, r2
 8009882:	0018      	movs	r0, r3
 8009884:	f7ff ff58 	bl	8009738 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	0011      	movs	r1, r2
 8009890:	0018      	movs	r0, r3
 8009892:	f7ff ff65 	bl	8009760 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a29      	ldr	r2, [pc, #164]	; (8009940 <LL_USART_Init+0x10c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d105      	bne.n	80098aa <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800989e:	2003      	movs	r0, #3
 80098a0:	f7ff fe00 	bl	80094a4 <LL_RCC_GetUSARTClockFreq>
 80098a4:	0003      	movs	r3, r0
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	e022      	b.n	80098f0 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a25      	ldr	r2, [pc, #148]	; (8009944 <LL_USART_Init+0x110>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d105      	bne.n	80098be <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80098b2:	200c      	movs	r0, #12
 80098b4:	f7ff fdf6 	bl	80094a4 <LL_RCC_GetUSARTClockFreq>
 80098b8:	0003      	movs	r3, r0
 80098ba:	61bb      	str	r3, [r7, #24]
 80098bc:	e018      	b.n	80098f0 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a21      	ldr	r2, [pc, #132]	; (8009948 <LL_USART_Init+0x114>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d108      	bne.n	80098d8 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098c6:	240c      	movs	r4, #12
 80098c8:	193b      	adds	r3, r7, r4
 80098ca:	0018      	movs	r0, r3
 80098cc:	f7ff fdcc 	bl	8009468 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098d0:	193b      	adds	r3, r7, r4
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	e00b      	b.n	80098f0 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1c      	ldr	r2, [pc, #112]	; (800994c <LL_USART_Init+0x118>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d107      	bne.n	80098f0 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098e0:	240c      	movs	r4, #12
 80098e2:	193b      	adds	r3, r7, r4
 80098e4:	0018      	movs	r0, r3
 80098e6:	f7ff fdbf 	bl	8009468 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d013      	beq.n	800991e <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00f      	beq.n	800991e <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 80098fe:	231f      	movs	r3, #31
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	69dc      	ldr	r4, [r3, #28]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	69b9      	ldr	r1, [r7, #24]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	0023      	movs	r3, r4
 800991a:	f7ff ff35 	bl	8009788 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	0011      	movs	r1, r2
 8009926:	0018      	movs	r0, r3
 8009928:	f7ff fef3 	bl	8009712 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800992c:	231f      	movs	r3, #31
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	781b      	ldrb	r3, [r3, #0]
}
 8009932:	0018      	movs	r0, r3
 8009934:	46bd      	mov	sp, r7
 8009936:	b009      	add	sp, #36	; 0x24
 8009938:	bd90      	pop	{r4, r7, pc}
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	efff69f3 	.word	0xefff69f3
 8009940:	40013800 	.word	0x40013800
 8009944:	40004400 	.word	0x40004400
 8009948:	40004800 	.word	0x40004800
 800994c:	40004c00 	.word	0x40004c00

08009950 <__libc_init_array>:
 8009950:	b570      	push	{r4, r5, r6, lr}
 8009952:	2600      	movs	r6, #0
 8009954:	4d0c      	ldr	r5, [pc, #48]	; (8009988 <__libc_init_array+0x38>)
 8009956:	4c0d      	ldr	r4, [pc, #52]	; (800998c <__libc_init_array+0x3c>)
 8009958:	1b64      	subs	r4, r4, r5
 800995a:	10a4      	asrs	r4, r4, #2
 800995c:	42a6      	cmp	r6, r4
 800995e:	d109      	bne.n	8009974 <__libc_init_array+0x24>
 8009960:	2600      	movs	r6, #0
 8009962:	f000 f821 	bl	80099a8 <_init>
 8009966:	4d0a      	ldr	r5, [pc, #40]	; (8009990 <__libc_init_array+0x40>)
 8009968:	4c0a      	ldr	r4, [pc, #40]	; (8009994 <__libc_init_array+0x44>)
 800996a:	1b64      	subs	r4, r4, r5
 800996c:	10a4      	asrs	r4, r4, #2
 800996e:	42a6      	cmp	r6, r4
 8009970:	d105      	bne.n	800997e <__libc_init_array+0x2e>
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	00b3      	lsls	r3, r6, #2
 8009976:	58eb      	ldr	r3, [r5, r3]
 8009978:	4798      	blx	r3
 800997a:	3601      	adds	r6, #1
 800997c:	e7ee      	b.n	800995c <__libc_init_array+0xc>
 800997e:	00b3      	lsls	r3, r6, #2
 8009980:	58eb      	ldr	r3, [r5, r3]
 8009982:	4798      	blx	r3
 8009984:	3601      	adds	r6, #1
 8009986:	e7f2      	b.n	800996e <__libc_init_array+0x1e>
 8009988:	08009aa8 	.word	0x08009aa8
 800998c:	08009aa8 	.word	0x08009aa8
 8009990:	08009aa8 	.word	0x08009aa8
 8009994:	08009aac 	.word	0x08009aac

08009998 <memset>:
 8009998:	0003      	movs	r3, r0
 800999a:	1882      	adds	r2, r0, r2
 800999c:	4293      	cmp	r3, r2
 800999e:	d100      	bne.n	80099a2 <memset+0xa>
 80099a0:	4770      	bx	lr
 80099a2:	7019      	strb	r1, [r3, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	e7f9      	b.n	800999c <memset+0x4>

080099a8 <_init>:
 80099a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099aa:	46c0      	nop			; (mov r8, r8)
 80099ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ae:	bc08      	pop	{r3}
 80099b0:	469e      	mov	lr, r3
 80099b2:	4770      	bx	lr

080099b4 <_fini>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ba:	bc08      	pop	{r3}
 80099bc:	469e      	mov	lr, r3
 80099be:	4770      	bx	lr
