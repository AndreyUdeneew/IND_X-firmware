
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009934  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad8  08009ad8  00025140  2**0
                  CONTENTS
  4 .ARM          00000000  08009ad8  08009ad8  00025140  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ad8  08009ad8  00025140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00005140  20000000  08009ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20005140  0800ec20  00025140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054c0  0800ec20  000254c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a99  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a7  00000000  00000000  0003ec01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  000420a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00043908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3eb  00000000  00000000  00044ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d21c  00000000  00000000  000613db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae16a  00000000  00000000  0007e5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005910  00000000  00000000  0012c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20005140 	.word	0x20005140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080099d8 	.word	0x080099d8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20005144 	.word	0x20005144
 8000100:	080099d8 	.word	0x080099d8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fc31 	bl	8002d9c <HAL_Init>

  /* USER CODE BEGIN Init */
  USART3->CR2|=USART_CR2_MSBFIRST;
 800053a:	4b39      	ldr	r3, [pc, #228]	; (8000620 <main+0x108>)
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	4b38      	ldr	r3, [pc, #224]	; (8000620 <main+0x108>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0309      	lsls	r1, r1, #12
 8000544:	430a      	orrs	r2, r1
 8000546:	605a      	str	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f878 	bl	800063c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <main+0x10c>)
 800054e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000550:	4b34      	ldr	r3, [pc, #208]	; (8000624 <main+0x10c>)
 8000552:	2101      	movs	r1, #1
 8000554:	430a      	orrs	r2, r1
 8000556:	635a      	str	r2, [r3, #52]	; 0x34
 8000558:	4b32      	ldr	r3, [pc, #200]	; (8000624 <main+0x10c>)
 800055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055c:	2201      	movs	r2, #1
 800055e:	4013      	ands	r3, r2
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <main+0x10c>)
 8000566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000568:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <main+0x10c>)
 800056a:	2102      	movs	r1, #2
 800056c:	430a      	orrs	r2, r1
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
 8000570:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <main+0x10c>)
 8000572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000574:	2202      	movs	r2, #2
 8000576:	4013      	ands	r3, r2
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <main+0x10c>)
 800057e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <main+0x10c>)
 8000582:	2104      	movs	r1, #4
 8000584:	430a      	orrs	r2, r1
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0x10c>)
 800058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058c:	2204      	movs	r2, #4
 800058e:	4013      	ands	r3, r2
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 fbac 	bl	8000cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000598:	f000 fb8c 	bl	8000cb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800059c:	f000 faa6 	bl	8000aec <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005a0:	f000 f8cc 	bl	800073c <MX_COMP1_Init>
  MX_TIM1_Init();
 80005a4:	f000 f9a8 	bl	80008f8 <MX_TIM1_Init>
  MX_USART3_Init();
 80005a8:	f000 fb3e 	bl	8000c28 <MX_USART3_Init>
  MX_I2S1_Init();
 80005ac:	f000 f938 	bl	8000820 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8f6 	bl	80007a0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005b4:	f000 f95e 	bl	8000874 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0x110>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f002 febc 	bl	8003338 <HAL_COMP_Start>
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f002 fc71 	bl	8002ea8 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005c6:	f001 fc39 	bl	8001e3c <MEM_Reset>
	weoClear();
 80005ca:	f000 fe6d 	bl	80012a8 <weoClear>
	weoInit();
 80005ce:	f000 fe15 	bl	80011fc <weoInit>
	MEM_GetID();
 80005d2:	f001 fe83 	bl	80022dc <MEM_GetID>

	weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, h1);
 80005d6:	4b15      	ldr	r3, [pc, #84]	; (800062c <main+0x114>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	23ff      	movs	r3, #255	; 0xff
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	237f      	movs	r3, #127	; 0x7f
 80005e0:	227f      	movs	r2, #127	; 0x7f
 80005e2:	2100      	movs	r1, #0
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fe79 	bl	80012dc <weoDrawRectangleFilled>
//	weoDrawRectangleFilled(0x00,0x00,0x06,0x0D,0xFF,FONT_X[0xFE]);
//	weoDrawRectangleFilled(0x00, 0x00,0x00+X_increment-1,0x00+ASCII_height-1, 0xFF, image_data_Font_0x31);
//	weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);
	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x118>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <main+0x118>)
 80005f0:	4910      	ldr	r1, [pc, #64]	; (8000634 <main+0x11c>)
 80005f2:	430a      	orrs	r2, r1
 80005f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <main+0x118>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ff1b 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <main+0x118>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff25 	bl	8000450 <LL_USART_EnableIT_ERROR>
//	dataASCII[0]= 0x30;
//	dataASCII[1]=0x31;
	USART2->ICR|=USART_ICR_ORECF;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x118>)
 8000608:	6a1a      	ldr	r2, [r3, #32]
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x118>)
 800060c:	2108      	movs	r1, #8
 800060e:	430a      	orrs	r2, r1
 8000610:	621a      	str	r2, [r3, #32]
//	showFullScreen(0x00);
	while (1) {
//		MEM_GetID();
//		showSmallImage(0x00, 0x00, 0x00);
//		printASCIIarray(0,0,1,dataASCII);
		cmdExecute(cmd2Execute);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <main+0x120>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fec2 	bl	80023a0 <cmdExecute>
 800061c:	e7f9      	b.n	8000612 <main+0xfa>
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40004800 	.word	0x40004800
 8000624:	40021000 	.word	0x40021000
 8000628:	20005280 	.word	0x20005280
 800062c:	20003134 	.word	0x20003134
 8000630:	40004400 	.word	0x40004400
 8000634:	1000100d 	.word	0x1000100d
 8000638:	20005376 	.word	0x20005376

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b0a1      	sub	sp, #132	; 0x84
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2448      	movs	r4, #72	; 0x48
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2338      	movs	r3, #56	; 0x38
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f009 f9bb 	bl	80099c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	2338      	movs	r3, #56	; 0x38
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	0018      	movs	r0, r3
 8000658:	2310      	movs	r3, #16
 800065a:	001a      	movs	r2, r3
 800065c:	2100      	movs	r1, #0
 800065e:	f009 f9b3 	bl	80099c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	0018      	movs	r0, r3
 8000666:	2334      	movs	r3, #52	; 0x34
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f009 f9ac 	bl	80099c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	0018      	movs	r0, r3
 8000676:	f004 fbfb 	bl	8004e70 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2202      	movs	r2, #2
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000688:	0021      	movs	r1, r4
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2202      	movs	r2, #2
 800069a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2202      	movs	r2, #2
 80006a0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2208      	movs	r2, #8
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0292      	lsls	r2, r2, #10
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	0492      	lsls	r2, r2, #18
 80006bc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0592      	lsls	r2, r2, #22
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f004 fc1d 	bl	8004f08 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f001 ff8b 	bl	80025ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	2138      	movs	r1, #56	; 0x38
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2207      	movs	r2, #7
 80006dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2202      	movs	r2, #2
 80006e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2102      	movs	r1, #2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f004 ff27 	bl	8005548 <HAL_RCC_ClockConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f001 ff75 	bl	80025ec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <SystemClock_Config+0xfc>)
 8000706:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	0018      	movs	r0, r3
 8000724:	f005 f8ba 	bl	800589c <HAL_RCCEx_PeriphCLKConfig>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800072c:	f001 ff5e 	bl	80025ec <Error_Handler>
  }
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b021      	add	sp, #132	; 0x84
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	00200822 	.word	0x00200822

0800073c <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_COMP1_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0052      	lsls	r2, r2, #1
 800074c:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000750:	2230      	movs	r2, #48	; 0x30
 8000752:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_COMP1_Init+0x5c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	0392      	lsls	r2, r2, #14
 800076c:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_COMP1_Init+0x5c>)
 800077c:	2212      	movs	r2, #18
 800077e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_COMP1_Init+0x5c>)
 8000782:	0018      	movs	r0, r3
 8000784:	f002 fc76 	bl	8003074 <HAL_COMP_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 800078c:	f001 ff2e 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20005280 	.word	0x20005280
 800079c:	40010200 	.word	0x40010200

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_I2C1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_I2C1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_I2C1_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_I2C1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2C1_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f003 fa41 	bl	8003c64 <HAL_I2C_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f001 ff01 	bl	80025ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2C1_Init+0x74>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f004 f8ce 	bl	8004990 <HAL_I2CEx_ConfigAnalogFilter>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f001 fef8 	bl	80025ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <MX_I2C1_Init+0x74>)
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f004 f911 	bl	8004a28 <HAL_I2CEx_ConfigDigitalFilter>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f001 feef 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000521c 	.word	0x2000521c
 8000818:	40005400 	.word	0x40005400
 800081c:	1094102c 	.word	0x1094102c

08000820 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2S1_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2S1_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_I2S1_Init+0x4c>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_I2S1_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_I2S1_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_I2S1_Init+0x4c>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0092      	lsls	r2, r2, #2
 8000844:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_I2S1_Init+0x4c>)
 8000848:	22fa      	movs	r2, #250	; 0xfa
 800084a:	0192      	lsls	r2, r2, #6
 800084c:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_I2S1_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <MX_I2S1_Init+0x4c>)
 8000856:	0018      	movs	r0, r3
 8000858:	f004 f932 	bl	8004ac0 <HAL_I2S_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000860:	f001 fec4 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20005378 	.word	0x20005378
 8000870:	40013000 	.word	0x40013000

08000874 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_SPI2_Init+0x7c>)
 800087a:	2208      	movs	r2, #8
 800087c:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <MX_SPI2_Init+0x7c>)
 8000880:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI2_Init+0x80>)
 8000882:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000884:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI2_Init+0x7c>)
 8000886:	2282      	movs	r2, #130	; 0x82
 8000888:	0052      	lsls	r2, r2, #1
 800088a:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI2_Init+0x7c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI2_Init+0x7c>)
 8000894:	22e0      	movs	r2, #224	; 0xe0
 8000896:	00d2      	lsls	r2, r2, #3
 8000898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_SPI2_Init+0x7c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008b0:	2208      	movs	r2, #8
 80008b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008d4:	2208      	movs	r2, #8
 80008d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <MX_SPI2_Init+0x7c>)
 80008da:	0018      	movs	r0, r3
 80008dc:	f005 fcde 	bl	800629c <HAL_SPI_Init>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e4:	f001 fe82 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200051a4 	.word	0x200051a4
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2368      	movs	r3, #104	; 0x68
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f009 f85d 	bl	80099c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	235c      	movs	r3, #92	; 0x5c
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	230c      	movs	r3, #12
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f009 f855 	bl	80099c8 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800091e:	2350      	movs	r3, #80	; 0x50
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f009 f84d 	bl	80099c8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	231c      	movs	r3, #28
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 f845 	bl	80099c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f009 f83e 	bl	80099c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b64      	ldr	r3, [pc, #400]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <MX_TIM1_Init+0x1ec>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000952:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b61      	ldr	r3, [pc, #388]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800095e:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000960:	4a61      	ldr	r2, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1f0>)
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f006 fca1 	bl	80072c0 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f001 fe33 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2168      	movs	r1, #104	; 0x68
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f006 ff2a 	bl	80077f0 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a0:	f001 fe24 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f006 fce2 	bl	8007370 <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b0:	f001 fe1c 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	215c      	movs	r1, #92	; 0x5c
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f007 fbde 	bl	8008190 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009d8:	f001 fe08 	bl	80025ec <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009dc:	2150      	movs	r1, #80	; 0x50
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f007 fcde 	bl	80083b8 <HAL_TIMEx_ConfigBreakInput>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a00:	f001 fdf4 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a04:	2134      	movs	r1, #52	; 0x34
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2260      	movs	r2, #96	; 0x60
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2296      	movs	r2, #150	; 0x96
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f006 fde3 	bl	8007604 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a42:	f001 fdd3 	bl	80025ec <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a46:	2134      	movs	r1, #52	; 0x34
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2232      	movs	r2, #50	; 0x32
 8000a4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a4e:	1879      	adds	r1, r7, r1
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f006 fdd5 	bl	8007604 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a5e:	f001 fdc5 	bl	80025ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	00d2      	lsls	r2, r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0152      	lsls	r2, r2, #5
 8000a84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0192      	lsls	r2, r2, #6
 8000a8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	220a      	movs	r2, #10
 8000a92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0492      	lsls	r2, r2, #18
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	01d2      	lsls	r2, r2, #7
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	003a      	movs	r2, r7
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f007 fbd2 	bl	800826c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000acc:	f001 fd8e 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f001 ff72 	bl	80029bc <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b01e      	add	sp, #120	; 0x78
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20005328 	.word	0x20005328
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	0000027f 	.word	0x0000027f

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08f      	sub	sp, #60	; 0x3c
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000af2:	2418      	movs	r4, #24
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2320      	movs	r3, #32
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f008 ff63 	bl	80099c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	003b      	movs	r3, r7
 8000b04:	0018      	movs	r0, r3
 8000b06:	2318      	movs	r3, #24
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f008 ff5c 	bl	80099c8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fcd3 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fce6 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2202      	movs	r2, #2
 8000b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	003a      	movs	r2, r7
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f008 fbbd 	bl	80092cc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2208      	movs	r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2201      	movs	r2, #1
 8000b74:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	003a      	movs	r2, r7
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f008 fba4 	bl	80092cc <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	201c      	movs	r0, #28
 8000b88:	f7ff fb62 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	201c      	movs	r0, #28
 8000b8e:	f7ff fb45 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	22e1      	movs	r2, #225	; 0xe1
 8000b9c:	0212      	lsls	r2, r2, #8
 8000b9e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	220c      	movs	r2, #12
 8000bba:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f008 fe48 	bl	8009864 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbc5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbd2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbac 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fbde 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fb96 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbed 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d0f9      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbfb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d0f3      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00f      	add	sp, #60	; 0x3c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0309      	lsls	r1, r1, #12
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_USART3_Init+0x84>)
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c3e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART3_Init+0x84>)
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <MX_USART3_Init+0x88>)
 8000c44:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_USART3_Init+0x84>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART3_Init+0x84>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  USART3->CR2|=USART_CR2_MSBFIRST;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0309      	lsls	r1, r1, #12
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	605a      	str	r2, [r3, #4]
//  husart3.AdvancedInit.AdvFeatureInit = USART_ADVFEATURE_MSBFIRST_INIT;
//    husart3.AdvancedInit.MSBFirst = USART_ADVFEATURE_MSBFIRST_ENABLE;
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART3_Init+0x84>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_Init+0x84>)
 8000c68:	2208      	movs	r2, #8
 8000c6a:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART3_Init+0x84>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USART3_Init+0x84>)
 8000c76:	2280      	movs	r2, #128	; 0x80
 8000c78:	0092      	lsls	r2, r2, #2
 8000c7a:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_Init+0x84>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	0052      	lsls	r2, r2, #1
 8000c82:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_Init+0x84>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_Init+0x84>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART3_Init+0x84>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f007 fc30 	bl	80084f8 <HAL_USART_Init>
 8000c98:	1e03      	subs	r3, r0, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART3_Init+0x78>
  {
    Error_Handler();
 8000c9c:	f001 fca6 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	200052b8 	.word	0x200052b8
 8000cb0:	007a1200 	.word	0x007a1200

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_DMA_Init+0x38>)
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_DMA_Init+0x38>)
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f002 fc2c 	bl	8003534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cdc:	2009      	movs	r0, #9
 8000cde:	f002 fc3e 	bl	800355e <HAL_NVIC_EnableIRQ>

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	003b      	movs	r3, r7
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	2318      	movs	r3, #24
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	2100      	movs	r1, #0
 8000d00:	f008 fe62 	bl	80099c8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fbf1 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f7ff fbee 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fbeb 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4a92      	ldr	r2, [pc, #584]	; (8000f64 <MX_GPIO_Init+0x274>)
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0010      	movs	r0, r2
 8000d20:	f7ff fbc2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	01db      	lsls	r3, r3, #7
 8000d28:	4a8f      	ldr	r2, [pc, #572]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	0010      	movs	r0, r2
 8000d2e:	f7ff fbbb 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	4a8c      	ldr	r2, [pc, #560]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000d38:	0019      	movs	r1, r3
 8000d3a:	0010      	movs	r0, r2
 8000d3c:	f7ff fbb4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d40:	23a0      	movs	r3, #160	; 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fbae 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d4c:	23a0      	movs	r3, #160	; 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0018      	movs	r0, r3
 8000d54:	f7ff fba8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d58:	4b83      	ldr	r3, [pc, #524]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000d5a:	2140      	movs	r1, #64	; 0x40
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fba3 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d62:	003b      	movs	r3, r7
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	003b      	movs	r3, r7
 8000d72:	2203      	movs	r2, #3
 8000d74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d76:	003b      	movs	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d82:	003b      	movs	r3, r7
 8000d84:	4a77      	ldr	r2, [pc, #476]	; (8000f64 <MX_GPIO_Init+0x274>)
 8000d86:	0019      	movs	r1, r3
 8000d88:	0010      	movs	r0, r2
 8000d8a:	f008 fa9f 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d8e:	003b      	movs	r3, r7
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	01d2      	lsls	r2, r2, #7
 8000d94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d96:	003b      	movs	r3, r7
 8000d98:	2201      	movs	r2, #1
 8000d9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d9c:	003b      	movs	r3, r7
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000dae:	003b      	movs	r3, r7
 8000db0:	4a6d      	ldr	r2, [pc, #436]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000db2:	0019      	movs	r1, r3
 8000db4:	0010      	movs	r0, r2
 8000db6:	f008 fa89 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000dba:	003b      	movs	r3, r7
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	0212      	lsls	r2, r2, #8
 8000dc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dc8:	003b      	movs	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000dda:	003b      	movs	r3, r7
 8000ddc:	4a62      	ldr	r2, [pc, #392]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000dde:	0019      	movs	r1, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f008 fa73 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000de6:	003b      	movs	r3, r7
 8000de8:	2201      	movs	r2, #1
 8000dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dec:	003b      	movs	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2201      	movs	r2, #1
 8000df6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	003a      	movs	r2, r7
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f008 fa63 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2202      	movs	r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2201      	movs	r2, #1
 8000e16:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e18:	003a      	movs	r2, r7
 8000e1a:	23a0      	movs	r3, #160	; 0xa0
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f008 fa53 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2210      	movs	r2, #16
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	003a      	movs	r2, r7
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f008 fa43 	bl	80092cc <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	0192      	lsls	r2, r2, #6
 8000e4c:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2201      	movs	r2, #1
 8000e58:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	0011      	movs	r1, r2
 8000e62:	0018      	movs	r0, r3
 8000e64:	f008 fa32 	bl	80092cc <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	01d2      	lsls	r2, r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2201      	movs	r2, #1
 8000e7a:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	003a      	movs	r2, r7
 8000e7e:	23a0      	movs	r3, #160	; 0xa0
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f008 fa21 	bl	80092cc <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2240      	movs	r2, #64	; 0x40
 8000e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2201      	movs	r2, #1
 8000e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2203      	movs	r2, #3
 8000e9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9c:	003b      	movs	r3, r7
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	003a      	movs	r2, r7
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	0011      	movs	r1, r2
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f008 fa0b 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec8:	003b      	movs	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ece:	003b      	movs	r3, r7
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	003a      	movs	r2, r7
 8000ed6:	23a0      	movs	r3, #160	; 0xa0
 8000ed8:	05db      	lsls	r3, r3, #23
 8000eda:	0011      	movs	r1, r2
 8000edc:	0018      	movs	r0, r3
 8000ede:	f008 f9f5 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2240      	movs	r2, #64	; 0x40
 8000ee6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2201      	movs	r2, #1
 8000eec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000f00:	003b      	movs	r3, r7
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <MX_GPIO_Init+0x278>)
 8000f04:	0019      	movs	r1, r3
 8000f06:	0010      	movs	r0, r2
 8000f08:	f008 f9e0 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000f0c:	003b      	movs	r3, r7
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	0112      	lsls	r2, r2, #4
 8000f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	003a      	movs	r2, r7
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f008 f9cf 	bl	80092cc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0152      	lsls	r2, r2, #5
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f42:	003a      	movs	r2, r7
 8000f44:	23a0      	movs	r3, #160	; 0xa0
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f008 f9be 	bl	80092cc <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	031b      	lsls	r3, r3, #12
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fa97 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b006      	add	sp, #24
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	50000400 	.word	0x50000400
 8000f68:	50000800 	.word	0x50000800

08000f6c <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <USART2_RX_Callback+0x60>)
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff fa7a 	bl	800046c <LL_USART_ReceiveData9>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000f7e:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <USART2_RX_Callback+0x60>)
 8000f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	0ddb      	lsrs	r3, r3, #23
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000f8e:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f90:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <USART2_RX_Callback+0x68>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	2bff      	cmp	r3, #255	; 0xff
 8000f9c:	d90a      	bls.n	8000fb4 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <USART2_RX_Callback+0x6c>)
 8000fa6:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <USART2_RX_Callback+0x70>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <USART2_RX_Callback+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <USART2_RX_Callback+0x74>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d104      	bne.n	8000fc6 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <USART2_RX_Callback+0x64>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f000 f80f 	bl	8000fe4 <cmdReceive>
  }
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	20005498 	.word	0x20005498
 8000fd4:	20005160 	.word	0x20005160
 8000fd8:	200054a0 	.word	0x200054a0
 8000fdc:	20005162 	.word	0x20005162
 8000fe0:	20005161 	.word	0x20005161

08000fe4 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	0002      	movs	r2, r0
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	801a      	strh	r2, [r3, #0]
	  uint8_t inputCS=0;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	18fb      	adds	r3, r7, r3
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	  uint8_t i=0;
 8000ff8:	230e      	movs	r3, #14
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <cmdReceive+0xc0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0fb      	beq.n	8001002 <cmdReceive+0x1e>
	  ByteReceived=0;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <cmdReceive+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001010:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <cmdReceive+0xc4>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	b2d9      	uxtb	r1, r3
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <cmdReceive+0xc8>)
 800101e:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <cmdReceive+0xc4>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <cmdReceive+0xc4>)
 800102a:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <cmdReceive+0xc4>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d02d      	beq.n	8001090 <cmdReceive+0xac>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <cmdReceive+0xc4>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	001a      	movs	r2, r3
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <cmdReceive+0xc8>)
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	3301      	adds	r3, #1
 8001040:	429a      	cmp	r2, r3
 8001042:	dd25      	ble.n	8001090 <cmdReceive+0xac>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001044:	230e      	movs	r3, #14
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e00f      	b.n	800106e <cmdReceive+0x8a>
				 inputCS+=cmd[i];
 800104e:	200e      	movs	r0, #14
 8001050:	183b      	adds	r3, r7, r0
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4a15      	ldr	r2, [pc, #84]	; (80010ac <cmdReceive+0xc8>)
 8001056:	5cd1      	ldrb	r1, [r2, r3]
 8001058:	220f      	movs	r2, #15
 800105a:	18bb      	adds	r3, r7, r2
 800105c:	18ba      	adds	r2, r7, r2
 800105e:	7812      	ldrb	r2, [r2, #0]
 8001060:	188a      	adds	r2, r1, r2
 8001062:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001064:	183b      	adds	r3, r7, r0
 8001066:	781a      	ldrb	r2, [r3, #0]
 8001068:	183b      	adds	r3, r7, r0
 800106a:	3201      	adds	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <cmdReceive+0xc8>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	230e      	movs	r3, #14
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	dae7      	bge.n	800104e <cmdReceive+0x6a>
			 }
			 if(inputCS==0){
 800107e:	230f      	movs	r3, #15
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d103      	bne.n	8001090 <cmdReceive+0xac>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 				  answer2CPU(cmd);
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <cmdReceive+0xc8>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 faa0 	bl	80015d0 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <cmdReceive+0xcc>)
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <cmdReceive+0xcc>)
 8001096:	2108      	movs	r1, #8
 8001098:	430a      	orrs	r2, r1
 800109a:	621a      	str	r2, [r3, #32]
	}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20005160 	.word	0x20005160
 80010a8:	20005162 	.word	0x20005162
 80010ac:	200054a0 	.word	0x200054a0
 80010b0:	40004400 	.word	0x40004400

080010b4 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	2255      	movs	r2, #85	; 0x55
 80010ca:	4393      	bics	r3, r2
 80010cc:	b25a      	sxtb	r2, r3
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	105b      	asrs	r3, r3, #1
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	2155      	movs	r1, #85	; 0x55
 80010d8:	400b      	ands	r3, r1
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	2233      	movs	r2, #51	; 0x33
 80010f0:	4393      	bics	r3, r2
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	109b      	asrs	r3, r3, #2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	2133      	movs	r1, #51	; 0x33
 80010fe:	400b      	ands	r3, r1
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25b      	sxtb	r3, r3
 8001106:	b2da      	uxtb	r2, r3
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	b25a      	sxtb	r2, r3
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	b2db      	uxtb	r3, r3
 800111c:	b25b      	sxtb	r3, r3
 800111e:	4313      	orrs	r3, r2
 8001120:	b25b      	sxtb	r3, r3
 8001122:	b2da      	uxtb	r2, r3
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 8001128:	1df9      	adds	r1, r7, #7
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <USART_AS_SPI_sendCMD+0x88>)
 800112c:	2301      	movs	r3, #1
 800112e:	2201      	movs	r2, #1
 8001130:	f007 fa32 	bl	8008598 <HAL_USART_Transmit>
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200052b8 	.word	0x200052b8

08001140 <USART_AS_SPI_sendDAT>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	0002      	movs	r2, r0
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 800114c:	1dfb      	adds	r3, r7, #7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b25b      	sxtb	r3, r3
 8001154:	2255      	movs	r2, #85	; 0x55
 8001156:	4393      	bics	r3, r2
 8001158:	b25a      	sxtb	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	105b      	asrs	r3, r3, #1
 8001160:	b25b      	sxtb	r3, r3
 8001162:	2155      	movs	r1, #85	; 0x55
 8001164:	400b      	ands	r3, r1
 8001166:	b25b      	sxtb	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b25b      	sxtb	r3, r3
 800116c:	b2da      	uxtb	r2, r3
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	b25b      	sxtb	r3, r3
 800117a:	2233      	movs	r2, #51	; 0x33
 800117c:	4393      	bics	r3, r2
 800117e:	b25a      	sxtb	r2, r3
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	109b      	asrs	r3, r3, #2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	2133      	movs	r1, #51	; 0x33
 800118a:	400b      	ands	r3, r1
 800118c:	b25b      	sxtb	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	b2da      	uxtb	r2, r3
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	701a      	strb	r2, [r3, #0]
		byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 8001198:	1dfb      	adds	r3, r7, #7
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
		GPIOA->ODR &= ~(1 << 6); //reset cs
 80011b4:	23a0      	movs	r3, #160	; 0xa0
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	695a      	ldr	r2, [r3, #20]
 80011ba:	23a0      	movs	r3, #160	; 0xa0
 80011bc:	05db      	lsls	r3, r3, #23
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	438a      	bics	r2, r1
 80011c2:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 7; // set dc
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	430a      	orrs	r2, r1
 80011d2:	615a      	str	r2, [r3, #20]
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
 80011d4:	1df9      	adds	r1, r7, #7
 80011d6:	4808      	ldr	r0, [pc, #32]	; (80011f8 <USART_AS_SPI_sendDAT+0xb8>)
 80011d8:	2301      	movs	r3, #1
 80011da:	2201      	movs	r2, #1
 80011dc:	f007 f9dc 	bl	8008598 <HAL_USART_Transmit>
		GPIOA->ODR |= 1 << 6; //set cs
 80011e0:	23a0      	movs	r3, #160	; 0xa0
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	2140      	movs	r1, #64	; 0x40
 80011ec:	430a      	orrs	r2, r1
 80011ee:	615a      	str	r2, [r3, #20]

	}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200052b8 	.word	0x200052b8

080011fc <weoInit>:
	void weoInit(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 8001200:	2001      	movs	r0, #1
 8001202:	f001 fe51 	bl	8002ea8 <HAL_Delay>
		HAL_Delay(1);
 8001206:	2001      	movs	r0, #1
 8001208:	f001 fe4e 	bl	8002ea8 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <weoInit+0xa8>)
 800120e:	2100      	movs	r1, #0
 8001210:	0018      	movs	r0, r3
 8001212:	f006 f90d 	bl	8007430 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001216:	2001      	movs	r0, #1
 8001218:	f001 fe46 	bl	8002ea8 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800121c:	23a0      	movs	r3, #160	; 0xa0
 800121e:	05db      	lsls	r3, r3, #23
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	438a      	bics	r2, r1
 800122a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800122c:	23a0      	movs	r3, #160	; 0xa0
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	23a0      	movs	r3, #160	; 0xa0
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	2180      	movs	r1, #128	; 0x80
 8001238:	438a      	bics	r2, r1
 800123a:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800123c:	20af      	movs	r0, #175	; 0xaf
 800123e:	f7ff ff39 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001242:	20a0      	movs	r0, #160	; 0xa0
 8001244:	f7ff ff36 	bl	80010b4 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001248:	2051      	movs	r0, #81	; 0x51
 800124a:	f7ff ff33 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800124e:	2081      	movs	r0, #129	; 0x81
 8001250:	f7ff ff30 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001254:	20ff      	movs	r0, #255	; 0xff
 8001256:	f7ff ff2d 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800125a:	20a1      	movs	r0, #161	; 0xa1
 800125c:	f7ff ff2a 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ff27 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001266:	20a2      	movs	r0, #162	; 0xa2
 8001268:	f7ff ff24 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff21 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001272:	20a8      	movs	r0, #168	; 0xa8
 8001274:	f7ff ff1e 	bl	80010b4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001278:	207f      	movs	r0, #127	; 0x7f
 800127a:	f7ff ff1b 	bl	80010b4 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 800127e:	23a0      	movs	r3, #160	; 0xa0
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	430a      	orrs	r2, r1
 800128c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	23a0      	movs	r3, #160	; 0xa0
 8001296:	05db      	lsls	r3, r3, #23
 8001298:	2140      	movs	r1, #64	; 0x40
 800129a:	430a      	orrs	r2, r1
 800129c:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20005328 	.word	0x20005328

080012a8 <weoClear>:
	void weoClear(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
		uint16_t i;
		for (i = 0; i < 8192; i++) {
 80012ae:	1dbb      	adds	r3, r7, #6
 80012b0:	2200      	movs	r2, #0
 80012b2:	801a      	strh	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <weoClear+0x1e>
			USART_AS_SPI_sendDAT(BACKGROUND_COLOR);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff ff42 	bl	8001140 <USART_AS_SPI_sendDAT>
		for (i = 0; i < 8192; i++) {
 80012bc:	1dbb      	adds	r3, r7, #6
 80012be:	881a      	ldrh	r2, [r3, #0]
 80012c0:	1dbb      	adds	r3, r7, #6
 80012c2:	3201      	adds	r2, #1
 80012c4:	801a      	strh	r2, [r3, #0]
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	881a      	ldrh	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3f1      	bcc.n	80012b6 <weoClear+0xe>
		}
	}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <weoDrawRectangleFilled>:
			}
		}
	}
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0005      	movs	r5, r0
 80012e4:	000c      	movs	r4, r1
 80012e6:	0010      	movs	r0, r2
 80012e8:	0019      	movs	r1, r3
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	1c2a      	adds	r2, r5, #0
 80012ee:	701a      	strb	r2, [r3, #0]
 80012f0:	1dbb      	adds	r3, r7, #6
 80012f2:	1c22      	adds	r2, r4, #0
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	1d7b      	adds	r3, r7, #5
 80012f8:	1c02      	adds	r2, r0, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	1c0a      	adds	r2, r1, #0
 8001300:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001302:	200e      	movs	r0, #14
 8001304:	183b      	adds	r3, r7, r0
 8001306:	2200      	movs	r2, #0
 8001308:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b25b      	sxtb	r3, r3
 8001310:	2b00      	cmp	r3, #0
 8001312:	da00      	bge.n	8001316 <weoDrawRectangleFilled+0x3a>
 8001314:	e155      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
 8001316:	1dbb      	adds	r3, r7, #6
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	da00      	bge.n	8001322 <weoDrawRectangleFilled+0x46>
 8001320:	e14f      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001322:	1d7b      	adds	r3, r7, #5
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	b25b      	sxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	da00      	bge.n	800132e <weoDrawRectangleFilled+0x52>
 800132c:	e149      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	da00      	bge.n	800133a <weoDrawRectangleFilled+0x5e>
 8001338:	e143      	b.n	80015c2 <weoDrawRectangleFilled+0x2e6>
				return;
			}

			start_x_New=start_x;
 800133a:	230d      	movs	r3, #13
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001344:	230c      	movs	r3, #12
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	1d3a      	adds	r2, r7, #4
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	217f      	movs	r1, #127	; 0x7f
 800134e:	1a8a      	subs	r2, r1, r2
 8001350:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 8001352:	230b      	movs	r3, #11
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	1d7a      	adds	r2, r7, #5
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 800135c:	230a      	movs	r3, #10
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	1dba      	adds	r2, r7, #6
 8001362:	7812      	ldrb	r2, [r2, #0]
 8001364:	217f      	movs	r1, #127	; 0x7f
 8001366:	1a8a      	subs	r2, r1, r2
 8001368:	701a      	strb	r2, [r3, #0]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 800136a:	183b      	adds	r3, r7, r0
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	e054      	b.n	800141c <weoDrawRectangleFilled+0x140>
			i++) {
//			for (i = 0; i < 8192;i++) {
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 8001372:	200e      	movs	r0, #14
 8001374:	183b      	adds	r3, r7, r0
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	b25b      	sxtb	r3, r3
 8001382:	2255      	movs	r2, #85	; 0x55
 8001384:	4393      	bics	r3, r2
 8001386:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 8001388:	183b      	adds	r3, r7, r0
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800138e:	18cb      	adds	r3, r1, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	105b      	asrs	r3, r3, #1
 8001394:	b25b      	sxtb	r3, r3
 8001396:	2155      	movs	r1, #85	; 0x55
 8001398:	400b      	ands	r3, r1
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80013a0:	183b      	adds	r3, r7, r0
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a6:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xAA) >> 1;
 80013a8:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x55) << 1
 80013aa:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013ac:	183b      	adds	r3, r7, r0
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b2:	18d3      	adds	r3, r2, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	2233      	movs	r2, #51	; 0x33
 80013bc:	4393      	bics	r3, r2
 80013be:	b25a      	sxtb	r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013c0:	183b      	adds	r3, r7, r0
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013c6:	18cb      	adds	r3, r1, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	109b      	asrs	r3, r3, #2
 80013cc:	b25b      	sxtb	r3, r3
 80013ce:	2133      	movs	r1, #51	; 0x33
 80013d0:	400b      	ands	r3, r1
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013d8:	183b      	adds	r3, r7, r0
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013de:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xCC) >> 2;
 80013e0:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
 80013e2:	701a      	strb	r2, [r3, #0]
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 80013e4:	183b      	adds	r3, r7, r0
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013ea:	18d3      	adds	r3, r2, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	011b      	lsls	r3, r3, #4
				| (MEM_Buffer[i] & 0xF0) >> 4;
 80013f0:	b25a      	sxtb	r2, r3
 80013f2:	183b      	adds	r3, r7, r0
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013f8:	18cb      	adds	r3, r1, r3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	091b      	lsrs	r3, r3, #4
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b25b      	sxtb	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b259      	sxtb	r1, r3
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 8001406:	183b      	adds	r3, r7, r0
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140c:	18d3      	adds	r3, r2, r3
				| (MEM_Buffer[i] & 0xF0) >> 4;
 800140e:	b2ca      	uxtb	r2, r1
		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
 8001410:	701a      	strb	r2, [r3, #0]
			i++) {
 8001412:	183b      	adds	r3, r7, r0
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	183b      	adds	r3, r7, r0
 8001418:	3201      	adds	r2, #1
 800141a:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New /2 - start_y_New/2 + 1));
 800141c:	240e      	movs	r4, #14
 800141e:	193b      	adds	r3, r7, r4
 8001420:	881a      	ldrh	r2, [r3, #0]
 8001422:	250b      	movs	r5, #11
 8001424:	197b      	adds	r3, r7, r5
 8001426:	7819      	ldrb	r1, [r3, #0]
 8001428:	260d      	movs	r6, #13
 800142a:	19bb      	adds	r3, r7, r6
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	3301      	adds	r3, #1
 8001432:	210a      	movs	r1, #10
 8001434:	1879      	adds	r1, r7, r1
 8001436:	7809      	ldrb	r1, [r1, #0]
 8001438:	0849      	lsrs	r1, r1, #1
 800143a:	b2c9      	uxtb	r1, r1
 800143c:	0008      	movs	r0, r1
 800143e:	210c      	movs	r1, #12
 8001440:	1879      	adds	r1, r7, r1
 8001442:	7809      	ldrb	r1, [r1, #0]
 8001444:	0849      	lsrs	r1, r1, #1
 8001446:	b2c9      	uxtb	r1, r1
 8001448:	1a41      	subs	r1, r0, r1
 800144a:	3101      	adds	r1, #1
 800144c:	434b      	muls	r3, r1
 800144e:	429a      	cmp	r2, r3
 8001450:	db8f      	blt.n	8001372 <weoDrawRectangleFilled+0x96>
			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	2140      	movs	r1, #64	; 0x40
 800145e:	438a      	bics	r2, r1
 8001460:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	438a      	bics	r2, r1
 8001470:	615a      	str	r2, [r3, #20]
			USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001472:	2075      	movs	r0, #117	; 0x75
 8001474:	f7ff fe1e 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001478:	19bb      	adds	r3, r7, r6
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fe19 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001482:	197b      	adds	r3, r7, r5
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff fe14 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800148c:	2015      	movs	r0, #21
 800148e:	f7ff fe11 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001492:	230c      	movs	r3, #12
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fe09 	bl	80010b4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80014a2:	210a      	movs	r1, #10
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff fe01 	bl	80010b4 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	23a0      	movs	r3, #160	; 0xa0
 80014ba:	05db      	lsls	r3, r3, #23
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	430a      	orrs	r2, r1
 80014c0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014c2:	23a0      	movs	r3, #160	; 0xa0
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2140      	movs	r1, #64	; 0x40
 80014ce:	430a      	orrs	r2, r1
 80014d0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014d2:	23a0      	movs	r3, #160	; 0xa0
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	23a0      	movs	r3, #160	; 0xa0
 80014da:	05db      	lsls	r3, r3, #23
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	438a      	bics	r2, r1
 80014e0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014e2:	23a0      	movs	r3, #160	; 0xa0
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	695a      	ldr	r2, [r3, #20]
 80014e8:	23a0      	movs	r3, #160	; 0xa0
 80014ea:	05db      	lsls	r3, r3, #23
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	430a      	orrs	r2, r1
 80014f0:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	e012      	b.n	8001520 <weoDrawRectangleFilled+0x244>
					i++) {
//				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <weoDrawRectangleFilled+0x2f0>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	4013      	ands	r3, r2
 8001504:	d0fa      	beq.n	80014fc <weoDrawRectangleFilled+0x220>
								USART3->TDR = MEM_Buffer[i];
 8001506:	210e      	movs	r1, #14
 8001508:	187b      	adds	r3, r7, r1
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	781a      	ldrb	r2, [r3, #0]
 8001512:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <weoDrawRectangleFilled+0x2f0>)
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
					i++) {
 8001516:	187b      	adds	r3, r7, r1
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	187b      	adds	r3, r7, r1
 800151c:	3201      	adds	r2, #1
 800151e:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001520:	240e      	movs	r4, #14
 8001522:	193b      	adds	r3, r7, r4
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	230b      	movs	r3, #11
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	7819      	ldrb	r1, [r3, #0]
 800152c:	230d      	movs	r3, #13
 800152e:	18fb      	adds	r3, r7, r3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	1acb      	subs	r3, r1, r3
 8001534:	3301      	adds	r3, #1
 8001536:	210a      	movs	r1, #10
 8001538:	1879      	adds	r1, r7, r1
 800153a:	7809      	ldrb	r1, [r1, #0]
 800153c:	0849      	lsrs	r1, r1, #1
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	0008      	movs	r0, r1
 8001542:	210c      	movs	r1, #12
 8001544:	1879      	adds	r1, r7, r1
 8001546:	7809      	ldrb	r1, [r1, #0]
 8001548:	0849      	lsrs	r1, r1, #1
 800154a:	b2c9      	uxtb	r1, r1
 800154c:	1a41      	subs	r1, r0, r1
 800154e:	3101      	adds	r1, #1
 8001550:	434b      	muls	r3, r1
 8001552:	429a      	cmp	r2, r3
 8001554:	dbd1      	blt.n	80014fa <weoDrawRectangleFilled+0x21e>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	23a0      	movs	r3, #160	; 0xa0
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	438a      	bics	r2, r1
 8001564:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001566:	23a0      	movs	r3, #160	; 0xa0
 8001568:	05db      	lsls	r3, r3, #23
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	23a0      	movs	r3, #160	; 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	2140      	movs	r1, #64	; 0x40
 8001572:	430a      	orrs	r2, r1
 8001574:	615a      	str	r2, [r3, #20]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001576:	193b      	adds	r3, r7, r4
 8001578:	2200      	movs	r2, #0
 800157a:	801a      	strh	r2, [r3, #0]
 800157c:	e005      	b.n	800158a <weoDrawRectangleFilled+0x2ae>
								i++) {
 800157e:	210e      	movs	r1, #14
 8001580:	187b      	adds	r3, r7, r1
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	187b      	adds	r3, r7, r1
 8001586:	3201      	adds	r2, #1
 8001588:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 800158a:	230e      	movs	r3, #14
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	230b      	movs	r3, #11
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	230d      	movs	r3, #13
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	1acb      	subs	r3, r1, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	210a      	movs	r1, #10
 80015a2:	1879      	adds	r1, r7, r1
 80015a4:	7809      	ldrb	r1, [r1, #0]
 80015a6:	0849      	lsrs	r1, r1, #1
 80015a8:	b2c9      	uxtb	r1, r1
 80015aa:	0008      	movs	r0, r1
 80015ac:	210c      	movs	r1, #12
 80015ae:	1879      	adds	r1, r7, r1
 80015b0:	7809      	ldrb	r1, [r1, #0]
 80015b2:	0849      	lsrs	r1, r1, #1
 80015b4:	b2c9      	uxtb	r1, r1
 80015b6:	1a41      	subs	r1, r0, r1
 80015b8:	3101      	adds	r1, #1
 80015ba:	434b      	muls	r3, r1
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbde      	blt.n	800157e <weoDrawRectangleFilled+0x2a2>
 80015c0:	e000      	b.n	80015c4 <weoDrawRectangleFilled+0x2e8>
				return;
 80015c2:	46c0      	nop			; (mov r8, r8)
						}
		}
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b005      	add	sp, #20
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	40004800 	.word	0x40004800

080015d0 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80015d8:	210f      	movs	r1, #15
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	22ff      	movs	r2, #255	; 0xff
 80015de:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80015e0:	230d      	movs	r3, #13
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2200      	movs	r2, #0
 80015ee:	801a      	strh	r2, [r3, #0]
			ans[0] = cmd[0]|0x80;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	4252      	negs	r2, r2
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4bca      	ldr	r3, [pc, #808]	; (8001928 <answer2CPU+0x358>)
 8001600:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d800      	bhi.n	800160c <answer2CPU+0x3c>
 800160a:	e15e      	b.n	80018ca <answer2CPU+0x2fa>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b15      	cmp	r3, #21
 8001612:	d900      	bls.n	8001616 <answer2CPU+0x46>
 8001614:	e159      	b.n	80018ca <answer2CPU+0x2fa>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001616:	23a0      	movs	r3, #160	; 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	d105      	bne.n	800162e <answer2CPU+0x5e>
					keyboard &= 0b11111110;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	187a      	adds	r2, r7, r1
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	438a      	bics	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d106      	bne.n	8001648 <answer2CPU+0x78>
					keyboard &= 0b11111101;
 800163a:	220f      	movs	r2, #15
 800163c:	18bb      	adds	r3, r7, r2
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	2102      	movs	r1, #2
 8001644:	438a      	bics	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001648:	23a0      	movs	r3, #160	; 0xa0
 800164a:	05db      	lsls	r3, r3, #23
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2210      	movs	r2, #16
 8001650:	4013      	ands	r3, r2
 8001652:	d106      	bne.n	8001662 <answer2CPU+0x92>
					keyboard &= 0b11111011;
 8001654:	220f      	movs	r2, #15
 8001656:	18bb      	adds	r3, r7, r2
 8001658:	18ba      	adds	r2, r7, r2
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	2104      	movs	r1, #4
 800165e:	438a      	bics	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	019b      	lsls	r3, r3, #6
 800166c:	4013      	ands	r3, r2
 800166e:	d106      	bne.n	800167e <answer2CPU+0xae>
					keyboard &= 0b11110111;
 8001670:	220f      	movs	r2, #15
 8001672:	18bb      	adds	r3, r7, r2
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	2108      	movs	r1, #8
 800167a:	438a      	bics	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	01db      	lsls	r3, r3, #7
 8001688:	4013      	ands	r3, r2
 800168a:	d106      	bne.n	800169a <answer2CPU+0xca>
					keyboard &= 0b11101111;
 800168c:	220f      	movs	r2, #15
 800168e:	18bb      	adds	r3, r7, r2
 8001690:	18ba      	adds	r2, r7, r2
 8001692:	7812      	ldrb	r2, [r2, #0]
 8001694:	2110      	movs	r1, #16
 8001696:	438a      	bics	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 800169a:	210f      	movs	r1, #15
 800169c:	187b      	adds	r3, r7, r1
 800169e:	187a      	adds	r2, r7, r1
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	43d2      	mvns	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 80016a6:	2009      	movs	r0, #9
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	2204      	movs	r2, #4
 80016ac:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80016ae:	183b      	adds	r3, r7, r0
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b02      	subs	r3, #2
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <answer2CPU+0x358>)
 80016ba:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b99      	ldr	r3, [pc, #612]	; (8001928 <answer2CPU+0x358>)
 80016c4:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80016c6:	230e      	movs	r3, #14
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e011      	b.n	80016f4 <answer2CPU+0x124>
					myCS = myCS + ans[i];
 80016d0:	200e      	movs	r0, #14
 80016d2:	183b      	adds	r3, r7, r0
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b94      	ldr	r3, [pc, #592]	; (8001928 <answer2CPU+0x358>)
 80016d8:	0052      	lsls	r2, r2, #1
 80016da:	5ad3      	ldrh	r3, [r2, r3]
 80016dc:	b2d9      	uxtb	r1, r3
 80016de:	220d      	movs	r2, #13
 80016e0:	18bb      	adds	r3, r7, r2
 80016e2:	18ba      	adds	r2, r7, r2
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	188a      	adds	r2, r1, r2
 80016e8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	183b      	adds	r3, r7, r0
 80016f0:	3201      	adds	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	200e      	movs	r0, #14
 80016f6:	183b      	adds	r3, r7, r0
 80016f8:	781a      	ldrb	r2, [r3, #0]
 80016fa:	2309      	movs	r3, #9
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3b01      	subs	r3, #1
 8001702:	429a      	cmp	r2, r3
 8001704:	dbe4      	blt.n	80016d0 <answer2CPU+0x100>
				}
				myCS = 0 - myCS;
 8001706:	210d      	movs	r1, #13
 8001708:	187b      	adds	r3, r7, r1
 800170a:	187a      	adds	r2, r7, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	4252      	negs	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b83      	ldr	r3, [pc, #524]	; (8001928 <answer2CPU+0x358>)
 800171a:	80da      	strh	r2, [r3, #6]
				i=0;
 800171c:	183b      	adds	r3, r7, r0
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	4b81      	ldr	r3, [pc, #516]	; (800192c <answer2CPU+0x35c>)
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	4013      	ands	r3, r2
 800172c:	d0fa      	beq.n	8001724 <answer2CPU+0x154>
				USART2->TDR = ans[0]|0x0100;
 800172e:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <answer2CPU+0x358>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	0052      	lsls	r2, r2, #1
 8001736:	4313      	orrs	r3, r2
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b7c      	ldr	r3, [pc, #496]	; (800192c <answer2CPU+0x35c>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800173e:	230e      	movs	r3, #14
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e013      	b.n	8001770 <answer2CPU+0x1a0>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	4b78      	ldr	r3, [pc, #480]	; (800192c <answer2CPU+0x35c>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	2280      	movs	r2, #128	; 0x80
 8001750:	4013      	ands	r3, r2
 8001752:	d0fa      	beq.n	800174a <answer2CPU+0x17a>
				    USART2->TDR = (uint8_t)ans[i];
 8001754:	210e      	movs	r1, #14
 8001756:	187b      	adds	r3, r7, r1
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	4b73      	ldr	r3, [pc, #460]	; (8001928 <answer2CPU+0x358>)
 800175c:	0052      	lsls	r2, r2, #1
 800175e:	5ad3      	ldrh	r3, [r2, r3]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <answer2CPU+0x35c>)
 8001764:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001766:	187b      	adds	r3, r7, r1
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	187b      	adds	r3, r7, r1
 800176c:	3201      	adds	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
 8001770:	230e      	movs	r3, #14
 8001772:	18fa      	adds	r2, r7, r3
 8001774:	2309      	movs	r3, #9
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3e3      	bcc.n	8001748 <answer2CPU+0x178>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b11      	cmp	r3, #17
 8001786:	d10c      	bne.n	80017a2 <answer2CPU+0x1d2>
					picNum = cmd[2];
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	789a      	ldrb	r2, [r3, #2]
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <answer2CPU+0x360>)
 800178e:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <answer2CPU+0x364>)
 8001792:	2211      	movs	r2, #17
 8001794:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	22ff      	movs	r2, #255	; 0xff
 800179a:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <answer2CPU+0x368>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d118      	bne.n	80017dc <answer2CPU+0x20c>
					imX = cmd[2];
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3302      	adds	r3, #2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	001a      	movs	r2, r3
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <answer2CPU+0x36c>)
 80017b4:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3303      	adds	r3, #3
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	001a      	movs	r2, r3
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <answer2CPU+0x370>)
 80017c0:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	791a      	ldrb	r2, [r3, #4]
 80017c6:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <answer2CPU+0x360>)
 80017c8:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80017ca:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <answer2CPU+0x364>)
 80017cc:	2212      	movs	r2, #18
 80017ce:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80017d6:	4b58      	ldr	r3, [pc, #352]	; (8001938 <answer2CPU+0x368>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b13      	cmp	r3, #19
 80017e2:	d137      	bne.n	8001854 <answer2CPU+0x284>
					imX = cmd[2];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3302      	adds	r3, #2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	001a      	movs	r2, r3
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <answer2CPU+0x36c>)
 80017ee:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3303      	adds	r3, #3
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	001a      	movs	r2, r3
 80017f8:	4b51      	ldr	r3, [pc, #324]	; (8001940 <answer2CPU+0x370>)
 80017fa:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3301      	adds	r3, #1
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	3b03      	subs	r3, #3
 8001804:	b2da      	uxtb	r2, r3
 8001806:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <answer2CPU+0x374>)
 8001808:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 800180a:	230e      	movs	r3, #14
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	e00f      	b.n	8001834 <answer2CPU+0x264>
					dataASCII[i] = cmd[i+4];
 8001814:	200e      	movs	r0, #14
 8001816:	183b      	adds	r3, r7, r0
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	3304      	adds	r3, #4
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	18d2      	adds	r2, r2, r3
 8001820:	183b      	adds	r3, r7, r0
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	7811      	ldrb	r1, [r2, #0]
 8001826:	4a48      	ldr	r2, [pc, #288]	; (8001948 <answer2CPU+0x378>)
 8001828:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 800182a:	183b      	adds	r3, r7, r0
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	183b      	adds	r3, r7, r0
 8001830:	3201      	adds	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <answer2CPU+0x374>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	220e      	movs	r2, #14
 800183a:	18ba      	adds	r2, r7, r2
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3e8      	bcc.n	8001814 <answer2CPU+0x244>
				}
					cmd2Execute=0x13;
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <answer2CPU+0x364>)
 8001844:	2213      	movs	r2, #19
 8001846:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	22ff      	movs	r2, #255	; 0xff
 800184c:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800184e:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <answer2CPU+0x368>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b14      	cmp	r3, #20
 800185a:	d10c      	bne.n	8001876 <answer2CPU+0x2a6>
					numSound = cmd[3];
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	78da      	ldrb	r2, [r3, #3]
 8001860:	4b3a      	ldr	r3, [pc, #232]	; (800194c <answer2CPU+0x37c>)
 8001862:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <answer2CPU+0x364>)
 8001866:	2214      	movs	r2, #20
 8001868:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	22ff      	movs	r2, #255	; 0xff
 800186e:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <answer2CPU+0x368>)
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b15      	cmp	r3, #21
 800187c:	d110      	bne.n	80018a0 <answer2CPU+0x2d0>
					volume = cmd[3];
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	78da      	ldrb	r2, [r3, #3]
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <answer2CPU+0x380>)
 8001884:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791a      	ldrb	r2, [r3, #4]
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <answer2CPU+0x384>)
 800188c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 800188e:	4b29      	ldr	r3, [pc, #164]	; (8001934 <answer2CPU+0x364>)
 8001890:	2215      	movs	r2, #21
 8001892:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	22ff      	movs	r2, #255	; 0xff
 8001898:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <answer2CPU+0x368>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b16      	cmp	r3, #22
 80018a6:	d110      	bne.n	80018ca <answer2CPU+0x2fa>
					volume = cmd[3];
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	78da      	ldrb	r2, [r3, #3]
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <answer2CPU+0x380>)
 80018ae:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	791a      	ldrb	r2, [r3, #4]
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <answer2CPU+0x384>)
 80018b6:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <answer2CPU+0x364>)
 80018ba:	2216      	movs	r2, #22
 80018bc:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <answer2CPU+0x368>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d000      	beq.n	80018d4 <answer2CPU+0x304>
 80018d2:	e099      	b.n	8001a08 <answer2CPU+0x438>
				myLength = 0x14; //20 bytes length answer
 80018d4:	2109      	movs	r1, #9
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2214      	movs	r2, #20
 80018da:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	3b02      	subs	r3, #2
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <answer2CPU+0x358>)
 80018e8:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80018ea:	230e      	movs	r3, #14
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e010      	b.n	8001916 <answer2CPU+0x346>
					ans[i + 2] = PCB_type[i];
 80018f4:	200e      	movs	r0, #14
 80018f6:	183b      	adds	r3, r7, r0
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <answer2CPU+0x388>)
 80018fc:	5cd1      	ldrb	r1, [r2, r3]
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	1c9a      	adds	r2, r3, #2
 8001904:	b289      	uxth	r1, r1
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <answer2CPU+0x358>)
 8001908:	0052      	lsls	r2, r2, #1
 800190a:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 800190c:	183b      	adds	r3, r7, r0
 800190e:	781a      	ldrb	r2, [r3, #0]
 8001910:	183b      	adds	r3, r7, r0
 8001912:	3201      	adds	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	220e      	movs	r2, #14
 8001918:	18bb      	adds	r3, r7, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b10      	cmp	r3, #16
 800191e:	d9e9      	bls.n	80018f4 <answer2CPU+0x324>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001920:	18bb      	adds	r3, r7, r2
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
 8001926:	e02b      	b.n	8001980 <answer2CPU+0x3b0>
 8001928:	200053b8 	.word	0x200053b8
 800192c:	40004400 	.word	0x40004400
 8001930:	20005375 	.word	0x20005375
 8001934:	20005376 	.word	0x20005376
 8001938:	200053cc 	.word	0x200053cc
 800193c:	2000527c 	.word	0x2000527c
 8001940:	200052b4 	.word	0x200052b4
 8001944:	200053b5 	.word	0x200053b5
 8001948:	20005194 	.word	0x20005194
 800194c:	20005434 	.word	0x20005434
 8001950:	2000527a 	.word	0x2000527a
 8001954:	20005318 	.word	0x20005318
 8001958:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 800195c:	200e      	movs	r0, #14
 800195e:	183b      	adds	r3, r7, r0
 8001960:	781a      	ldrb	r2, [r3, #0]
 8001962:	4bdb      	ldr	r3, [pc, #876]	; (8001cd0 <answer2CPU+0x700>)
 8001964:	0052      	lsls	r2, r2, #1
 8001966:	5ad3      	ldrh	r3, [r2, r3]
 8001968:	b2d9      	uxtb	r1, r3
 800196a:	220d      	movs	r2, #13
 800196c:	18bb      	adds	r3, r7, r2
 800196e:	18ba      	adds	r2, r7, r2
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	188a      	adds	r2, r1, r2
 8001974:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001976:	183b      	adds	r3, r7, r0
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	183b      	adds	r3, r7, r0
 800197c:	3201      	adds	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	230e      	movs	r3, #14
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	2009      	movs	r0, #9
 8001988:	183b      	adds	r3, r7, r0
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	429a      	cmp	r2, r3
 8001990:	dbe4      	blt.n	800195c <answer2CPU+0x38c>
				}
				myCS = 0 - myCS;
 8001992:	210d      	movs	r1, #13
 8001994:	187b      	adds	r3, r7, r1
 8001996:	187a      	adds	r2, r7, r1
 8001998:	7812      	ldrb	r2, [r2, #0]
 800199a:	4252      	negs	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800199e:	183b      	adds	r3, r7, r0
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b299      	uxth	r1, r3
 80019aa:	4bc9      	ldr	r3, [pc, #804]	; (8001cd0 <answer2CPU+0x700>)
 80019ac:	0052      	lsls	r2, r2, #1
 80019ae:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	4bc8      	ldr	r3, [pc, #800]	; (8001cd4 <answer2CPU+0x704>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0fa      	beq.n	80019b2 <answer2CPU+0x3e2>
				USART2->TDR = ans[0]|0x0100;
 80019bc:	4bc4      	ldr	r3, [pc, #784]	; (8001cd0 <answer2CPU+0x700>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	2280      	movs	r2, #128	; 0x80
 80019c2:	0052      	lsls	r2, r2, #1
 80019c4:	4313      	orrs	r3, r2
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4bc2      	ldr	r3, [pc, #776]	; (8001cd4 <answer2CPU+0x704>)
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019cc:	e014      	b.n	80019f8 <answer2CPU+0x428>
				  {
				    i++;
 80019ce:	210e      	movs	r1, #14
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	3201      	adds	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	4bbd      	ldr	r3, [pc, #756]	; (8001cd4 <answer2CPU+0x704>)
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	4013      	ands	r3, r2
 80019e4:	d0fa      	beq.n	80019dc <answer2CPU+0x40c>
				    USART2->TDR = (uint8_t)ans[i];
 80019e6:	230e      	movs	r3, #14
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781a      	ldrb	r2, [r3, #0]
 80019ec:	4bb8      	ldr	r3, [pc, #736]	; (8001cd0 <answer2CPU+0x700>)
 80019ee:	0052      	lsls	r2, r2, #1
 80019f0:	5ad3      	ldrh	r3, [r2, r3]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4bb7      	ldr	r3, [pc, #732]	; (8001cd4 <answer2CPU+0x704>)
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019f8:	230e      	movs	r3, #14
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4bb4      	ldr	r3, [pc, #720]	; (8001cd0 <answer2CPU+0x700>)
 8001a00:	0052      	lsls	r2, r2, #1
 8001a02:	5ad3      	ldrh	r3, [r2, r3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1e2      	bne.n	80019ce <answer2CPU+0x3fe>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d000      	beq.n	8001a12 <answer2CPU+0x442>
 8001a10:	e07f      	b.n	8001b12 <answer2CPU+0x542>
				myLength = 0x0B; //19 bytes length answer
 8001a12:	2109      	movs	r1, #9
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	220b      	movs	r2, #11
 8001a18:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3b02      	subs	r3, #2
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	4baa      	ldr	r3, [pc, #680]	; (8001cd0 <answer2CPU+0x700>)
 8001a26:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a28:	230e      	movs	r3, #14
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e010      	b.n	8001a54 <answer2CPU+0x484>
					ans[i + 2] = PCB_rev[i];
 8001a32:	200e      	movs	r0, #14
 8001a34:	183b      	adds	r3, r7, r0
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4aa7      	ldr	r2, [pc, #668]	; (8001cd8 <answer2CPU+0x708>)
 8001a3a:	5cd1      	ldrb	r1, [r2, r3]
 8001a3c:	183b      	adds	r3, r7, r0
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	1c9a      	adds	r2, r3, #2
 8001a42:	b289      	uxth	r1, r1
 8001a44:	4ba2      	ldr	r3, [pc, #648]	; (8001cd0 <answer2CPU+0x700>)
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a4a:	183b      	adds	r3, r7, r0
 8001a4c:	781a      	ldrb	r2, [r3, #0]
 8001a4e:	183b      	adds	r3, r7, r0
 8001a50:	3201      	adds	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	220e      	movs	r2, #14
 8001a56:	18bb      	adds	r3, r7, r2
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d9e9      	bls.n	8001a32 <answer2CPU+0x462>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a5e:	18bb      	adds	r3, r7, r2
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	e011      	b.n	8001a8a <answer2CPU+0x4ba>
					myCS = myCS + ans[i];
 8001a66:	200e      	movs	r0, #14
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	781a      	ldrb	r2, [r3, #0]
 8001a6c:	4b98      	ldr	r3, [pc, #608]	; (8001cd0 <answer2CPU+0x700>)
 8001a6e:	0052      	lsls	r2, r2, #1
 8001a70:	5ad3      	ldrh	r3, [r2, r3]
 8001a72:	b2d9      	uxtb	r1, r3
 8001a74:	220d      	movs	r2, #13
 8001a76:	18bb      	adds	r3, r7, r2
 8001a78:	18ba      	adds	r2, r7, r2
 8001a7a:	7812      	ldrb	r2, [r2, #0]
 8001a7c:	188a      	adds	r2, r1, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	781a      	ldrb	r2, [r3, #0]
 8001a84:	183b      	adds	r3, r7, r0
 8001a86:	3201      	adds	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	230e      	movs	r3, #14
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	781a      	ldrb	r2, [r3, #0]
 8001a90:	2009      	movs	r0, #9
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbe4      	blt.n	8001a66 <answer2CPU+0x496>
				}
				myCS = 0 - myCS;
 8001a9c:	210d      	movs	r1, #13
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	187a      	adds	r2, r7, r1
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	4252      	negs	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001aa8:	183b      	adds	r3, r7, r0
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b299      	uxth	r1, r3
 8001ab4:	4b86      	ldr	r3, [pc, #536]	; (8001cd0 <answer2CPU+0x700>)
 8001ab6:	0052      	lsls	r2, r2, #1
 8001ab8:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	4b85      	ldr	r3, [pc, #532]	; (8001cd4 <answer2CPU+0x704>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0fa      	beq.n	8001abc <answer2CPU+0x4ec>
				USART2->TDR = ans[0]|0x0100;
 8001ac6:	4b82      	ldr	r3, [pc, #520]	; (8001cd0 <answer2CPU+0x700>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	0052      	lsls	r2, r2, #1
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <answer2CPU+0x704>)
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001ad6:	e014      	b.n	8001b02 <answer2CPU+0x532>
					  {
					    i++;
 8001ad8:	210e      	movs	r1, #14
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	3201      	adds	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <answer2CPU+0x704>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0fa      	beq.n	8001ae6 <answer2CPU+0x516>
					    USART2->TDR = (uint8_t)ans[i];
 8001af0:	230e      	movs	r3, #14
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781a      	ldrb	r2, [r3, #0]
 8001af6:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <answer2CPU+0x700>)
 8001af8:	0052      	lsls	r2, r2, #1
 8001afa:	5ad3      	ldrh	r3, [r2, r3]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <answer2CPU+0x704>)
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b02:	230e      	movs	r3, #14
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <answer2CPU+0x700>)
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	5ad3      	ldrh	r3, [r2, r3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e2      	bne.n	8001ad8 <answer2CPU+0x508>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d000      	beq.n	8001b1c <answer2CPU+0x54c>
 8001b1a:	e07f      	b.n	8001c1c <answer2CPU+0x64c>
				myLength = 0x13; //19 bytes length answer
 8001b1c:	2109      	movs	r1, #9
 8001b1e:	187b      	adds	r3, r7, r1
 8001b20:	2213      	movs	r2, #19
 8001b22:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b02      	subs	r3, #2
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <answer2CPU+0x700>)
 8001b30:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b32:	230e      	movs	r3, #14
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e010      	b.n	8001b5e <answer2CPU+0x58e>
					ans[i + 2] = EmitterSN[i];
 8001b3c:	200e      	movs	r0, #14
 8001b3e:	183b      	adds	r3, r7, r0
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <answer2CPU+0x70c>)
 8001b44:	5cd1      	ldrb	r1, [r2, r3]
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	1c9a      	adds	r2, r3, #2
 8001b4c:	b289      	uxth	r1, r1
 8001b4e:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <answer2CPU+0x700>)
 8001b50:	0052      	lsls	r2, r2, #1
 8001b52:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b54:	183b      	adds	r3, r7, r0
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	183b      	adds	r3, r7, r0
 8001b5a:	3201      	adds	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	220e      	movs	r2, #14
 8001b60:	18bb      	adds	r3, r7, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d9e9      	bls.n	8001b3c <answer2CPU+0x56c>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b68:	18bb      	adds	r3, r7, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
 8001b6e:	e011      	b.n	8001b94 <answer2CPU+0x5c4>
					myCS = myCS + ans[i];
 8001b70:	200e      	movs	r0, #14
 8001b72:	183b      	adds	r3, r7, r0
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <answer2CPU+0x700>)
 8001b78:	0052      	lsls	r2, r2, #1
 8001b7a:	5ad3      	ldrh	r3, [r2, r3]
 8001b7c:	b2d9      	uxtb	r1, r3
 8001b7e:	220d      	movs	r2, #13
 8001b80:	18bb      	adds	r3, r7, r2
 8001b82:	18ba      	adds	r2, r7, r2
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	188a      	adds	r2, r1, r2
 8001b88:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001b8a:	183b      	adds	r3, r7, r0
 8001b8c:	781a      	ldrb	r2, [r3, #0]
 8001b8e:	183b      	adds	r3, r7, r0
 8001b90:	3201      	adds	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	230e      	movs	r3, #14
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	2009      	movs	r0, #9
 8001b9c:	183b      	adds	r3, r7, r0
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbe4      	blt.n	8001b70 <answer2CPU+0x5a0>
				}
				myCS = 0 - myCS;
 8001ba6:	210d      	movs	r1, #13
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	187a      	adds	r2, r7, r1
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	4252      	negs	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001bb2:	183b      	adds	r3, r7, r0
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	1e5a      	subs	r2, r3, #1
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	4b44      	ldr	r3, [pc, #272]	; (8001cd0 <answer2CPU+0x700>)
 8001bc0:	0052      	lsls	r2, r2, #1
 8001bc2:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <answer2CPU+0x704>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d0fa      	beq.n	8001bc6 <answer2CPU+0x5f6>
				USART2->TDR = ans[0]|0x0100;
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <answer2CPU+0x700>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2280      	movs	r2, #128	; 0x80
 8001bd6:	0052      	lsls	r2, r2, #1
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <answer2CPU+0x704>)
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001be0:	e014      	b.n	8001c0c <answer2CPU+0x63c>
				  {
				    i++;
 8001be2:	210e      	movs	r1, #14
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	3201      	adds	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <answer2CPU+0x704>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0fa      	beq.n	8001bf0 <answer2CPU+0x620>
				    	USART2->TDR = (uint8_t)ans[i];
 8001bfa:	230e      	movs	r3, #14
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <answer2CPU+0x700>)
 8001c02:	0052      	lsls	r2, r2, #1
 8001c04:	5ad3      	ldrh	r3, [r2, r3]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <answer2CPU+0x704>)
 8001c0a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c0c:	230e      	movs	r3, #14
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <answer2CPU+0x700>)
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	5ad3      	ldrh	r3, [r2, r3]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e2      	bne.n	8001be2 <answer2CPU+0x612>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d000      	beq.n	8001c26 <answer2CPU+0x656>
 8001c24:	e07b      	b.n	8001d1e <answer2CPU+0x74e>
				myLength = 0x04; //4 bytes length answer
 8001c26:	2109      	movs	r1, #9
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b02      	subs	r3, #2
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <answer2CPU+0x700>)
 8001c3a:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <answer2CPU+0x710>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <answer2CPU+0x700>)
 8001c44:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c46:	230d      	movs	r3, #13
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b20      	ldr	r3, [pc, #128]	; (8001cd0 <answer2CPU+0x700>)
 8001c50:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c52:	230e      	movs	r3, #14
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e011      	b.n	8001c80 <answer2CPU+0x6b0>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c5c:	200e      	movs	r0, #14
 8001c5e:	183b      	adds	r3, r7, r0
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <answer2CPU+0x700>)
 8001c64:	0052      	lsls	r2, r2, #1
 8001c66:	5ad3      	ldrh	r3, [r2, r3]
 8001c68:	b2d9      	uxtb	r1, r3
 8001c6a:	220d      	movs	r2, #13
 8001c6c:	18bb      	adds	r3, r7, r2
 8001c6e:	18ba      	adds	r2, r7, r2
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	188a      	adds	r2, r1, r2
 8001c74:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	183b      	adds	r3, r7, r0
 8001c7c:	3201      	adds	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	230e      	movs	r3, #14
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	2009      	movs	r0, #9
 8001c88:	183b      	adds	r3, r7, r0
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbe4      	blt.n	8001c5c <answer2CPU+0x68c>
				}
				myCS = 0 - myCS;
 8001c92:	210d      	movs	r1, #13
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	187a      	adds	r2, r7, r1
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	4252      	negs	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	1e5a      	subs	r2, r3, #1
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	b299      	uxth	r1, r3
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <answer2CPU+0x700>)
 8001cac:	0052      	lsls	r2, r2, #1
 8001cae:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cb0:	46c0      	nop			; (mov r8, r8)
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <answer2CPU+0x704>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0fa      	beq.n	8001cb2 <answer2CPU+0x6e2>
					USART2->TDR = ans[0]|0x0100;
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <answer2CPU+0x700>)
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	0052      	lsls	r2, r2, #1
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b02      	ldr	r3, [pc, #8]	; (8001cd4 <answer2CPU+0x704>)
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001ccc:	e01f      	b.n	8001d0e <answer2CPU+0x73e>
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	200053b8 	.word	0x200053b8
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	20003114 	.word	0x20003114
 8001cdc:	20003120 	.word	0x20003120
 8001ce0:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001ce4:	210e      	movs	r1, #14
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	781a      	ldrb	r2, [r3, #0]
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	3201      	adds	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <answer2CPU+0x85c>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0fa      	beq.n	8001cf2 <answer2CPU+0x722>
						     USART2->TDR = (uint8_t)ans[i];
 8001cfc:	230e      	movs	r3, #14
 8001cfe:	18fb      	adds	r3, r7, r3
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <answer2CPU+0x860>)
 8001d04:	0052      	lsls	r2, r2, #1
 8001d06:	5ad3      	ldrh	r3, [r2, r3]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <answer2CPU+0x85c>)
 8001d0c:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d0e:	230e      	movs	r3, #14
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <answer2CPU+0x860>)
 8001d16:	0052      	lsls	r2, r2, #1
 8001d18:	5ad3      	ldrh	r3, [r2, r3]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1e2      	bne.n	8001ce4 <answer2CPU+0x714>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d000      	beq.n	8001d28 <answer2CPU+0x758>
 8001d26:	e076      	b.n	8001e16 <answer2CPU+0x846>
				myLength = 0x04; //4 bytes length answer
 8001d28:	2109      	movs	r1, #9
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b02      	subs	r3, #2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <answer2CPU+0x860>)
 8001d3c:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3302      	adds	r3, #2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	001a      	movs	r2, r3
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <answer2CPU+0x864>)
 8001d48:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001d4a:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <answer2CPU+0x868>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <answer2CPU+0x860>)
 8001d52:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d54:	230d      	movs	r3, #13
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <answer2CPU+0x860>)
 8001d5e:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d60:	230e      	movs	r3, #14
 8001d62:	18fb      	adds	r3, r7, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e011      	b.n	8001d8e <answer2CPU+0x7be>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d6a:	200e      	movs	r0, #14
 8001d6c:	183b      	adds	r3, r7, r0
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <answer2CPU+0x860>)
 8001d72:	0052      	lsls	r2, r2, #1
 8001d74:	5ad3      	ldrh	r3, [r2, r3]
 8001d76:	b2d9      	uxtb	r1, r3
 8001d78:	220d      	movs	r2, #13
 8001d7a:	18bb      	adds	r3, r7, r2
 8001d7c:	18ba      	adds	r2, r7, r2
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	188a      	adds	r2, r1, r2
 8001d82:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d84:	183b      	adds	r3, r7, r0
 8001d86:	781a      	ldrb	r2, [r3, #0]
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	3201      	adds	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	230e      	movs	r3, #14
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	2009      	movs	r0, #9
 8001d96:	183b      	adds	r3, r7, r0
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbe4      	blt.n	8001d6a <answer2CPU+0x79a>
				}
				myCS = 0 - myCS;
 8001da0:	210d      	movs	r1, #13
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	187a      	adds	r2, r7, r1
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	4252      	negs	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001dac:	183b      	adds	r3, r7, r0
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b299      	uxth	r1, r3
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <answer2CPU+0x860>)
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <answer2CPU+0x85c>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2280      	movs	r2, #128	; 0x80
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d0fa      	beq.n	8001dc0 <answer2CPU+0x7f0>
				USART2->TDR = ans[0]|0x0100;
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <answer2CPU+0x860>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	0052      	lsls	r2, r2, #1
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <answer2CPU+0x85c>)
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001dda:	e014      	b.n	8001e06 <answer2CPU+0x836>
				{
				  i++;
 8001ddc:	210e      	movs	r1, #14
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	3201      	adds	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <answer2CPU+0x85c>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0fa      	beq.n	8001dea <answer2CPU+0x81a>
				  USART2->TDR = (uint8_t)ans[i];
 8001df4:	230e      	movs	r3, #14
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <answer2CPU+0x860>)
 8001dfc:	0052      	lsls	r2, r2, #1
 8001dfe:	5ad3      	ldrh	r3, [r2, r3]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <answer2CPU+0x85c>)
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e06:	230e      	movs	r3, #14
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <answer2CPU+0x860>)
 8001e0e:	0052      	lsls	r2, r2, #1
 8001e10:	5ad3      	ldrh	r3, [r2, r3]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e2      	bne.n	8001ddc <answer2CPU+0x80c>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001e16:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <answer2CPU+0x85c>)
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <answer2CPU+0x85c>)
 8001e1c:	2108      	movs	r1, #8
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	621a      	str	r2, [r3, #32]
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	200053b8 	.word	0x200053b8
 8001e34:	2000531c 	.word	0x2000531c
 8001e38:	2000527b 	.word	0x2000527b

08001e3c <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001e42:	2001      	movs	r0, #1
 8001e44:	f001 f830 	bl	8002ea8 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <MEM_Reset+0xb0>)
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <MEM_Reset+0xb0>)
 8001e4e:	4928      	ldr	r1, [pc, #160]	; (8001ef0 <MEM_Reset+0xb4>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001e54:	1dfb      	adds	r3, r7, #7
 8001e56:	2266      	movs	r2, #102	; 0x66
 8001e58:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001e5a:	1df9      	adds	r1, r7, #7
 8001e5c:	4825      	ldr	r0, [pc, #148]	; (8001ef4 <MEM_Reset+0xb8>)
 8001e5e:	2305      	movs	r3, #5
 8001e60:	2201      	movs	r2, #1
 8001e62:	f004 fad3 	bl	800640c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <MEM_Reset+0xb0>)
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <MEM_Reset+0xb0>)
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	0209      	lsls	r1, r1, #8
 8001e70:	430a      	orrs	r2, r1
 8001e72:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001e74:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e76:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e78:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001e7a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001e7c:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001e7e:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MEM_Reset+0xb0>)
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <MEM_Reset+0xb0>)
 8001e86:	491a      	ldr	r1, [pc, #104]	; (8001ef0 <MEM_Reset+0xb4>)
 8001e88:	400a      	ands	r2, r1
 8001e8a:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	2299      	movs	r2, #153	; 0x99
 8001e90:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001e92:	1df9      	adds	r1, r7, #7
 8001e94:	4817      	ldr	r0, [pc, #92]	; (8001ef4 <MEM_Reset+0xb8>)
 8001e96:	2305      	movs	r3, #5
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f004 fab7 	bl	800640c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <MEM_Reset+0xb0>)
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <MEM_Reset+0xb0>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0209      	lsls	r1, r1, #8
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001eac:	2001      	movs	r0, #1
 8001eae:	f000 fffb 	bl	8002ea8 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	22b7      	movs	r2, #183	; 0xb7
 8001eb6:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MEM_Reset+0xb0>)
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MEM_Reset+0xb0>)
 8001ebe:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <MEM_Reset+0xb4>)
 8001ec0:	400a      	ands	r2, r1
 8001ec2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001ec4:	1df9      	adds	r1, r7, #7
 8001ec6:	480b      	ldr	r0, [pc, #44]	; (8001ef4 <MEM_Reset+0xb8>)
 8001ec8:	2305      	movs	r3, #5
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f004 fa9e 	bl	800640c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MEM_Reset+0xb0>)
 8001ed2:	695a      	ldr	r2, [r3, #20]
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <MEM_Reset+0xb0>)
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0209      	lsls	r1, r1, #8
 8001eda:	430a      	orrs	r2, r1
 8001edc:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 ffe2 	bl	8002ea8 <HAL_Delay>
	}
 8001ee4:	46c0      	nop			; (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	50000800 	.word	0x50000800
 8001ef0:	ffff7fff 	.word	0xffff7fff
 8001ef4:	200051a4 	.word	0x200051a4

08001ef8 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001ef8:	b5b0      	push	{r4, r5, r7, lr}
 8001efa:	4c46      	ldr	r4, [pc, #280]	; (8002014 <showFullScreen+0x11c>)
 8001efc:	44a5      	add	sp, r4
 8001efe:	af02      	add	r7, sp, #8
 8001f00:	0002      	movs	r2, r0
 8001f02:	4b45      	ldr	r3, [pc, #276]	; (8002018 <showFullScreen+0x120>)
 8001f04:	4945      	ldr	r1, [pc, #276]	; (800201c <showFullScreen+0x124>)
 8001f06:	468c      	mov	ip, r1
 8001f08:	44bc      	add	ip, r7
 8001f0a:	4463      	add	r3, ip
 8001f0c:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001f0e:	4844      	ldr	r0, [pc, #272]	; (8002020 <showFullScreen+0x128>)
 8001f10:	183b      	adds	r3, r7, r0
 8001f12:	2213      	movs	r2, #19
 8001f14:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001f16:	4b40      	ldr	r3, [pc, #256]	; (8002018 <showFullScreen+0x120>)
 8001f18:	4a40      	ldr	r2, [pc, #256]	; (800201c <showFullScreen+0x124>)
 8001f1a:	4694      	mov	ip, r2
 8001f1c:	44bc      	add	ip, r7
 8001f1e:	4463      	add	r3, ip
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	035b      	lsls	r3, r3, #13
 8001f24:	493f      	ldr	r1, [pc, #252]	; (8002024 <showFullScreen+0x12c>)
 8001f26:	187a      	adds	r2, r7, r1
 8001f28:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <showFullScreen+0x130>)
 8001f32:	4c3a      	ldr	r4, [pc, #232]	; (800201c <showFullScreen+0x124>)
 8001f34:	46a4      	mov	ip, r4
 8001f36:	44bc      	add	ip, r7
 8001f38:	4463      	add	r3, ip
 8001f3a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <showFullScreen+0x130>)
 8001f46:	4c35      	ldr	r4, [pc, #212]	; (800201c <showFullScreen+0x124>)
 8001f48:	46a4      	mov	ip, r4
 8001f4a:	44bc      	add	ip, r7
 8001f4c:	4463      	add	r3, ip
 8001f4e:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001f50:	187b      	adds	r3, r7, r1
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <showFullScreen+0x130>)
 8001f5a:	4c30      	ldr	r4, [pc, #192]	; (800201c <showFullScreen+0x124>)
 8001f5c:	46a4      	mov	ip, r4
 8001f5e:	44bc      	add	ip, r7
 8001f60:	4463      	add	r3, ip
 8001f62:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0e1b      	lsrs	r3, r3, #24
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <showFullScreen+0x130>)
 8001f6e:	492b      	ldr	r1, [pc, #172]	; (800201c <showFullScreen+0x124>)
 8001f70:	468c      	mov	ip, r1
 8001f72:	44bc      	add	ip, r7
 8001f74:	4463      	add	r3, ip
 8001f76:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f78:	4b2c      	ldr	r3, [pc, #176]	; (800202c <showFullScreen+0x134>)
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <showFullScreen+0x134>)
 8001f7e:	492c      	ldr	r1, [pc, #176]	; (8002030 <showFullScreen+0x138>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001f84:	1839      	adds	r1, r7, r0
 8001f86:	482b      	ldr	r0, [pc, #172]	; (8002034 <showFullScreen+0x13c>)
 8001f88:	2332      	movs	r3, #50	; 0x32
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f004 fa3e 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001f90:	2408      	movs	r4, #8
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	1cd9      	adds	r1, r3, #3
 8001f96:	4827      	ldr	r0, [pc, #156]	; (8002034 <showFullScreen+0x13c>)
 8001f98:	2332      	movs	r3, #50	; 0x32
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f004 fa36 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001fa0:	193b      	adds	r3, r7, r4
 8001fa2:	1c99      	adds	r1, r3, #2
 8001fa4:	4823      	ldr	r0, [pc, #140]	; (8002034 <showFullScreen+0x13c>)
 8001fa6:	2332      	movs	r3, #50	; 0x32
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f004 fa2f 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	1c59      	adds	r1, r3, #1
 8001fb2:	4820      	ldr	r0, [pc, #128]	; (8002034 <showFullScreen+0x13c>)
 8001fb4:	2332      	movs	r3, #50	; 0x32
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f004 fa28 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001fbc:	1939      	adds	r1, r7, r4
 8001fbe:	481d      	ldr	r0, [pc, #116]	; (8002034 <showFullScreen+0x13c>)
 8001fc0:	2332      	movs	r3, #50	; 0x32
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f004 fa22 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001fc8:	4c1b      	ldr	r4, [pc, #108]	; (8002038 <showFullScreen+0x140>)
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	019a      	lsls	r2, r3, #6
 8001fce:	2510      	movs	r5, #16
 8001fd0:	1979      	adds	r1, r7, r5
 8001fd2:	4818      	ldr	r0, [pc, #96]	; (8002034 <showFullScreen+0x13c>)
 8001fd4:	0023      	movs	r3, r4
 8001fd6:	f004 fb71 	bl	80066bc <HAL_SPI_Receive>
//		while (!(SPI2->SR & SPI_SR_RXNE)){};
//		for (i=0;i<8192;i++){
//		MEM_Buffer[i] = SPI2->DR;
//		}
		GPIOC->ODR |= 1 << 15; // set cs
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <showFullScreen+0x134>)
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <showFullScreen+0x134>)
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	0209      	lsls	r1, r1, #8
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001fe8:	197b      	adds	r3, r7, r5
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	23ff      	movs	r3, #255	; 0xff
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	237f      	movs	r3, #127	; 0x7f
 8001ff2:	227f      	movs	r2, #127	; 0x7f
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff f970 	bl	80012dc <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <showFullScreen+0x134>)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <showFullScreen+0x134>)
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	430a      	orrs	r2, r1
 8002006:	615a      	str	r2, [r3, #20]

	}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	0018      	movs	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	4b03      	ldr	r3, [pc, #12]	; (800201c <showFullScreen+0x124>)
 8002010:	449d      	add	sp, r3
 8002012:	bdb0      	pop	{r4, r5, r7, pc}
 8002014:	ffffdfe0 	.word	0xffffdfe0
 8002018:	ffffdfef 	.word	0xffffdfef
 800201c:	00002018 	.word	0x00002018
 8002020:	00002013 	.word	0x00002013
 8002024:	00002014 	.word	0x00002014
 8002028:	ffffdff0 	.word	0xffffdff0
 800202c:	50000800 	.word	0x50000800
 8002030:	ffff7fff 	.word	0xffff7fff
 8002034:	200051a4 	.word	0x200051a4
 8002038:	00001388 	.word	0x00001388

0800203c <showSmallImage>:
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	4c95      	ldr	r4, [pc, #596]	; (8002294 <showSmallImage+0x258>)
 8002040:	44a5      	add	sp, r4
 8002042:	af02      	add	r7, sp, #8
 8002044:	0004      	movs	r4, r0
 8002046:	0008      	movs	r0, r1
 8002048:	0011      	movs	r1, r2
 800204a:	4b93      	ldr	r3, [pc, #588]	; (8002298 <showSmallImage+0x25c>)
 800204c:	4a93      	ldr	r2, [pc, #588]	; (800229c <showSmallImage+0x260>)
 800204e:	4694      	mov	ip, r2
 8002050:	44bc      	add	ip, r7
 8002052:	4463      	add	r3, ip
 8002054:	1c22      	adds	r2, r4, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	4b91      	ldr	r3, [pc, #580]	; (80022a0 <showSmallImage+0x264>)
 800205a:	4a90      	ldr	r2, [pc, #576]	; (800229c <showSmallImage+0x260>)
 800205c:	4694      	mov	ip, r2
 800205e:	44bc      	add	ip, r7
 8002060:	4463      	add	r3, ip
 8002062:	1c02      	adds	r2, r0, #0
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	4b8f      	ldr	r3, [pc, #572]	; (80022a4 <showSmallImage+0x268>)
 8002068:	4a8c      	ldr	r2, [pc, #560]	; (800229c <showSmallImage+0x260>)
 800206a:	4694      	mov	ip, r2
 800206c:	44bc      	add	ip, r7
 800206e:	4463      	add	r3, ip
 8002070:	1c0a      	adds	r2, r1, #0
 8002072:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8002074:	2300      	movs	r3, #0
 8002076:	498c      	ldr	r1, [pc, #560]	; (80022a8 <showSmallImage+0x26c>)
 8002078:	187a      	adds	r2, r7, r1
 800207a:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 800207c:	4d8b      	ldr	r5, [pc, #556]	; (80022ac <showSmallImage+0x270>)
 800207e:	197b      	adds	r3, r7, r5
 8002080:	2213      	movs	r2, #19
 8002082:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		picNum=0x20;
		addr=picNum*0x2000;// the right path is to multiply picNum * image repeat period!
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <showSmallImage+0x25c>)
 8002086:	4a85      	ldr	r2, [pc, #532]	; (800229c <showSmallImage+0x260>)
 8002088:	4694      	mov	ip, r2
 800208a:	44bc      	add	ip, r7
 800208c:	4463      	add	r3, ip
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	035b      	lsls	r3, r3, #13
 8002092:	187a      	adds	r2, r7, r1
 8002094:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002096:	187b      	adds	r3, r7, r1
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b84      	ldr	r3, [pc, #528]	; (80022b0 <showSmallImage+0x274>)
 800209e:	487f      	ldr	r0, [pc, #508]	; (800229c <showSmallImage+0x260>)
 80020a0:	4684      	mov	ip, r0
 80020a2:	44bc      	add	ip, r7
 80020a4:	4463      	add	r3, ip
 80020a6:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0a1b      	lsrs	r3, r3, #8
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	4b7f      	ldr	r3, [pc, #508]	; (80022b0 <showSmallImage+0x274>)
 80020b2:	487a      	ldr	r0, [pc, #488]	; (800229c <showSmallImage+0x260>)
 80020b4:	4684      	mov	ip, r0
 80020b6:	44bc      	add	ip, r7
 80020b8:	4463      	add	r3, ip
 80020ba:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	b2da      	uxtb	r2, r3
 80020c4:	4b7a      	ldr	r3, [pc, #488]	; (80022b0 <showSmallImage+0x274>)
 80020c6:	4875      	ldr	r0, [pc, #468]	; (800229c <showSmallImage+0x260>)
 80020c8:	4684      	mov	ip, r0
 80020ca:	44bc      	add	ip, r7
 80020cc:	4463      	add	r3, ip
 80020ce:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	0e1b      	lsrs	r3, r3, #24
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	4b75      	ldr	r3, [pc, #468]	; (80022b0 <showSmallImage+0x274>)
 80020da:	4970      	ldr	r1, [pc, #448]	; (800229c <showSmallImage+0x260>)
 80020dc:	468c      	mov	ip, r1
 80020de:	44bc      	add	ip, r7
 80020e0:	4463      	add	r3, ip
 80020e2:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80020e4:	4b73      	ldr	r3, [pc, #460]	; (80022b4 <showSmallImage+0x278>)
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	4b72      	ldr	r3, [pc, #456]	; (80022b4 <showSmallImage+0x278>)
 80020ea:	4973      	ldr	r1, [pc, #460]	; (80022b8 <showSmallImage+0x27c>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80020f0:	1979      	adds	r1, r7, r5
 80020f2:	4872      	ldr	r0, [pc, #456]	; (80022bc <showSmallImage+0x280>)
 80020f4:	2332      	movs	r3, #50	; 0x32
 80020f6:	2201      	movs	r2, #1
 80020f8:	f004 f988 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80020fc:	240c      	movs	r4, #12
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	1cd9      	adds	r1, r3, #3
 8002102:	486e      	ldr	r0, [pc, #440]	; (80022bc <showSmallImage+0x280>)
 8002104:	2332      	movs	r3, #50	; 0x32
 8002106:	2201      	movs	r2, #1
 8002108:	f004 f980 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800210c:	193b      	adds	r3, r7, r4
 800210e:	1c99      	adds	r1, r3, #2
 8002110:	486a      	ldr	r0, [pc, #424]	; (80022bc <showSmallImage+0x280>)
 8002112:	2332      	movs	r3, #50	; 0x32
 8002114:	2201      	movs	r2, #1
 8002116:	f004 f979 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800211a:	193b      	adds	r3, r7, r4
 800211c:	1c59      	adds	r1, r3, #1
 800211e:	4867      	ldr	r0, [pc, #412]	; (80022bc <showSmallImage+0x280>)
 8002120:	2332      	movs	r3, #50	; 0x32
 8002122:	2201      	movs	r2, #1
 8002124:	f004 f972 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002128:	1939      	adds	r1, r7, r4
 800212a:	4864      	ldr	r0, [pc, #400]	; (80022bc <showSmallImage+0x280>)
 800212c:	2332      	movs	r3, #50	; 0x32
 800212e:	2201      	movs	r2, #1
 8002130:	f004 f96c 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002134:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <showSmallImage+0x284>)
 8002136:	2210      	movs	r2, #16
 8002138:	18b9      	adds	r1, r7, r2
 800213a:	4860      	ldr	r0, [pc, #384]	; (80022bc <showSmallImage+0x280>)
 800213c:	2202      	movs	r2, #2
 800213e:	f004 fabd 	bl	80066bc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002142:	4b5c      	ldr	r3, [pc, #368]	; (80022b4 <showSmallImage+0x278>)
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <showSmallImage+0x278>)
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	0209      	lsls	r1, r1, #8
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]
//
		width=imInfo[0];
 8002150:	4e5c      	ldr	r6, [pc, #368]	; (80022c4 <showSmallImage+0x288>)
 8002152:	19bb      	adds	r3, r7, r6
 8002154:	4a5c      	ldr	r2, [pc, #368]	; (80022c8 <showSmallImage+0x28c>)
 8002156:	4951      	ldr	r1, [pc, #324]	; (800229c <showSmallImage+0x260>)
 8002158:	468c      	mov	ip, r1
 800215a:	44bc      	add	ip, r7
 800215c:	4462      	add	r2, ip
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	701a      	strb	r2, [r3, #0]
//		width=0x10;
		height=imInfo[1];
 8002162:	495a      	ldr	r1, [pc, #360]	; (80022cc <showSmallImage+0x290>)
 8002164:	187b      	adds	r3, r7, r1
 8002166:	4a58      	ldr	r2, [pc, #352]	; (80022c8 <showSmallImage+0x28c>)
 8002168:	484c      	ldr	r0, [pc, #304]	; (800229c <showSmallImage+0x260>)
 800216a:	4684      	mov	ip, r0
 800216c:	44bc      	add	ip, r7
 800216e:	4462      	add	r2, ip
 8002170:	7852      	ldrb	r2, [r2, #1]
 8002172:	701a      	strb	r2, [r3, #0]
//		height=0x07;
		len=(width*height>>1)+0x20;
 8002174:	19bb      	adds	r3, r7, r6
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	187a      	adds	r2, r7, r1
 800217a:	7812      	ldrb	r2, [r2, #0]
 800217c:	4353      	muls	r3, r2
 800217e:	105b      	asrs	r3, r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	4b53      	ldr	r3, [pc, #332]	; (80022d0 <showSmallImage+0x294>)
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	3220      	adds	r2, #32
 8002188:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <showSmallImage+0x274>)
 800218c:	4a43      	ldr	r2, [pc, #268]	; (800229c <showSmallImage+0x260>)
 800218e:	4694      	mov	ip, r2
 8002190:	44bc      	add	ip, r7
 8002192:	4463      	add	r3, ip
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3302      	adds	r3, #2
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <showSmallImage+0x274>)
 800219c:	483f      	ldr	r0, [pc, #252]	; (800229c <showSmallImage+0x260>)
 800219e:	4684      	mov	ip, r0
 80021a0:	44bc      	add	ip, r7
 80021a2:	4463      	add	r3, ip
 80021a4:	701a      	strb	r2, [r3, #0]
//len=0x38;
		USART2->ICR|=USART_ICR_ORECF;
 80021a6:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <showSmallImage+0x298>)
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	4b4a      	ldr	r3, [pc, #296]	; (80022d4 <showSmallImage+0x298>)
 80021ac:	2108      	movs	r1, #8
 80021ae:	430a      	orrs	r2, r1
 80021b0:	621a      	str	r2, [r3, #32]
				memCMD = 0x13; //read command with 4-byte address
 80021b2:	197b      	adds	r3, r7, r5
 80021b4:	2213      	movs	r2, #19
 80021b6:	701a      	strb	r2, [r3, #0]
//						addrArray[3]=0x00;
//						addrArray[2]=0x03;
//						addrArray[1]=0xC0;
//						addrArray[0]=0x02;

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80021b8:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <showSmallImage+0x278>)
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <showSmallImage+0x278>)
 80021be:	493e      	ldr	r1, [pc, #248]	; (80022b8 <showSmallImage+0x27c>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80021c4:	1979      	adds	r1, r7, r5
 80021c6:	483d      	ldr	r0, [pc, #244]	; (80022bc <showSmallImage+0x280>)
 80021c8:	2332      	movs	r3, #50	; 0x32
 80021ca:	2201      	movs	r2, #1
 80021cc:	f004 f91e 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	1cd9      	adds	r1, r3, #3
 80021d4:	4839      	ldr	r0, [pc, #228]	; (80022bc <showSmallImage+0x280>)
 80021d6:	2332      	movs	r3, #50	; 0x32
 80021d8:	2201      	movs	r2, #1
 80021da:	f004 f917 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80021de:	193b      	adds	r3, r7, r4
 80021e0:	1c99      	adds	r1, r3, #2
 80021e2:	4836      	ldr	r0, [pc, #216]	; (80022bc <showSmallImage+0x280>)
 80021e4:	2332      	movs	r3, #50	; 0x32
 80021e6:	2201      	movs	r2, #1
 80021e8:	f004 f910 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80021ec:	193b      	adds	r3, r7, r4
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	4832      	ldr	r0, [pc, #200]	; (80022bc <showSmallImage+0x280>)
 80021f2:	2332      	movs	r3, #50	; 0x32
 80021f4:	2201      	movs	r2, #1
 80021f6:	f004 f909 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80021fa:	1939      	adds	r1, r7, r4
 80021fc:	482f      	ldr	r0, [pc, #188]	; (80022bc <showSmallImage+0x280>)
 80021fe:	2332      	movs	r3, #50	; 0x32
 8002200:	2201      	movs	r2, #1
 8002202:	f004 f903 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002206:	4c2e      	ldr	r4, [pc, #184]	; (80022c0 <showSmallImage+0x284>)
 8002208:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <showSmallImage+0x294>)
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	2514      	movs	r5, #20
 8002210:	1979      	adds	r1, r7, r5
 8002212:	482a      	ldr	r0, [pc, #168]	; (80022bc <showSmallImage+0x280>)
 8002214:	0023      	movs	r3, r4
 8002216:	f004 fa51 	bl	80066bc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <showSmallImage+0x278>)
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <showSmallImage+0x278>)
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	0209      	lsls	r1, r1, #8
 8002224:	430a      	orrs	r2, r1
 8002226:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <showSmallImage+0x264>)
 800222a:	481c      	ldr	r0, [pc, #112]	; (800229c <showSmallImage+0x260>)
 800222c:	183a      	adds	r2, r7, r0
 800222e:	18d2      	adds	r2, r2, r3
 8002230:	19bb      	adds	r3, r7, r6
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	18d3      	adds	r3, r2, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b2dc      	uxtb	r4, r3
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <showSmallImage+0x268>)
 8002240:	183a      	adds	r2, r7, r0
 8002242:	18d2      	adds	r2, r2, r3
 8002244:	4921      	ldr	r1, [pc, #132]	; (80022cc <showSmallImage+0x290>)
 8002246:	187b      	adds	r3, r7, r1
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	18d3      	adds	r3, r2, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <showSmallImage+0x268>)
 8002256:	4911      	ldr	r1, [pc, #68]	; (800229c <showSmallImage+0x260>)
 8002258:	468c      	mov	ip, r1
 800225a:	44bc      	add	ip, r7
 800225c:	4463      	add	r3, ip
 800225e:	7819      	ldrb	r1, [r3, #0]
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <showSmallImage+0x264>)
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <showSmallImage+0x260>)
 8002264:	4684      	mov	ip, r0
 8002266:	44bc      	add	ip, r7
 8002268:	4463      	add	r3, ip
 800226a:	7818      	ldrb	r0, [r3, #0]
 800226c:	197b      	adds	r3, r7, r5
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	23ff      	movs	r3, #255	; 0xff
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	0013      	movs	r3, r2
 8002276:	0022      	movs	r2, r4
 8002278:	f7ff f830 	bl	80012dc <weoDrawRectangleFilled>
//		weoDrawRectangleFilled(0x00, 0x00, 0x0F, 0x06, 0xFF,MEM_Buffer);
//		printASCIIarray(0x20,0x00,0x01,width);
		GPIOC->ODR |= 1 << 6;	//set BF
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <showSmallImage+0x278>)
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <showSmallImage+0x278>)
 8002282:	2140      	movs	r1, #64	; 0x40
 8002284:	430a      	orrs	r2, r1
 8002286:	615a      	str	r2, [r3, #20]
	}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <showSmallImage+0x29c>)
 8002290:	449d      	add	sp, r3
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	ffffdfd4 	.word	0xffffdfd4
 8002298:	ffffdfe7 	.word	0xffffdfe7
 800229c:	00002020 	.word	0x00002020
 80022a0:	ffffdfe6 	.word	0xffffdfe6
 80022a4:	ffffdfe5 	.word	0xffffdfe5
 80022a8:	0000201c 	.word	0x0000201c
 80022ac:	00002017 	.word	0x00002017
 80022b0:	ffffdfec 	.word	0xffffdfec
 80022b4:	50000800 	.word	0x50000800
 80022b8:	ffff7fff 	.word	0xffff7fff
 80022bc:	200051a4 	.word	0x200051a4
 80022c0:	00001388 	.word	0x00001388
 80022c4:	0000201b 	.word	0x0000201b
 80022c8:	ffffdff0 	.word	0xffffdff0
 80022cc:	0000201a 	.word	0x0000201a
 80022d0:	00002018 	.word	0x00002018
 80022d4:	40004400 	.word	0x40004400
 80022d8:	00002024 	.word	0x00002024

080022dc <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	4a29      	ldr	r2, [pc, #164]	; (800238c <MEM_GetID+0xb0>)
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	229e      	movs	r2, #158	; 0x9e
 80022ee:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <MEM_GetID+0xb4>)
 80022f2:	695a      	ldr	r2, [r3, #20]
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <MEM_GetID+0xb4>)
 80022f6:	4927      	ldr	r1, [pc, #156]	; (8002394 <MEM_GetID+0xb8>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80022fc:	1df9      	adds	r1, r7, #7
 80022fe:	4826      	ldr	r0, [pc, #152]	; (8002398 <MEM_GetID+0xbc>)
 8002300:	2332      	movs	r3, #50	; 0x32
 8002302:	2201      	movs	r2, #1
 8002304:	f004 f882 	bl	800640c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002308:	23fa      	movs	r3, #250	; 0xfa
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	1d39      	adds	r1, r7, #4
 800230e:	4822      	ldr	r0, [pc, #136]	; (8002398 <MEM_GetID+0xbc>)
 8002310:	2201      	movs	r2, #1
 8002312:	f004 f9d3 	bl	80066bc <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	001a      	movs	r2, r3
 800231c:	4b1f      	ldr	r3, [pc, #124]	; (800239c <MEM_GetID+0xc0>)
 800231e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <MEM_GetID+0xc0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	4b1d      	ldr	r3, [pc, #116]	; (800239c <MEM_GetID+0xc0>)
 8002328:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800232a:	23fa      	movs	r3, #250	; 0xfa
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	1d39      	adds	r1, r7, #4
 8002330:	4819      	ldr	r0, [pc, #100]	; (8002398 <MEM_GetID+0xbc>)
 8002332:	2201      	movs	r2, #1
 8002334:	f004 f9c2 	bl	80066bc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	001a      	movs	r2, r3
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <MEM_GetID+0xc0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	18d2      	adds	r2, r2, r3
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <MEM_GetID+0xc0>)
 8002346:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <MEM_GetID+0xc0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	021a      	lsls	r2, r3, #8
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <MEM_GetID+0xc0>)
 8002350:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002352:	23fa      	movs	r3, #250	; 0xfa
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	1d39      	adds	r1, r7, #4
 8002358:	480f      	ldr	r0, [pc, #60]	; (8002398 <MEM_GetID+0xbc>)
 800235a:	2201      	movs	r2, #1
 800235c:	f004 f9ae 	bl	80066bc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	001a      	movs	r2, r3
 8002366:	4b0d      	ldr	r3, [pc, #52]	; (800239c <MEM_GetID+0xc0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	18d2      	adds	r2, r2, r3
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MEM_GetID+0xc0>)
 800236e:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MEM_GetID+0xb4>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MEM_GetID+0xb4>)
 8002376:	2180      	movs	r1, #128	; 0x80
 8002378:	0209      	lsls	r1, r1, #8
 800237a:	430a      	orrs	r2, r1
 800237c:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 800237e:	4b07      	ldr	r3, [pc, #28]	; (800239c <MEM_GetID+0xc0>)
 8002380:	681b      	ldr	r3, [r3, #0]
	}
 8002382:	0018      	movs	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	080099f0 	.word	0x080099f0
 8002390:	50000800 	.word	0x50000800
 8002394:	ffff7fff 	.word	0xffff7fff
 8002398:	200051a4 	.word	0x200051a4
 800239c:	2000515c 	.word	0x2000515c

080023a0 <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	1dfb      	adds	r3, r7, #7
 80023aa:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0xFF){}
 80023ac:	4b39      	ldr	r3, [pc, #228]	; (8002494 <cmdExecute+0xf4>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2bff      	cmp	r3, #255	; 0xff
 80023b2:	d069      	beq.n	8002488 <cmdExecute+0xe8>
		else{
			if (bf4me!=0x00){}
 80023b4:	4b38      	ldr	r3, [pc, #224]	; (8002498 <cmdExecute+0xf8>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d165      	bne.n	8002488 <cmdExecute+0xe8>
			else{
		USART2->ICR|=USART_ICR_ORECF;
 80023bc:	4b37      	ldr	r3, [pc, #220]	; (800249c <cmdExecute+0xfc>)
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	4b36      	ldr	r3, [pc, #216]	; (800249c <cmdExecute+0xfc>)
 80023c2:	2108      	movs	r1, #8
 80023c4:	430a      	orrs	r2, r1
 80023c6:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 80023c8:	1dfb      	adds	r3, r7, #7
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b11      	cmp	r3, #17
 80023ce:	d10d      	bne.n	80023ec <cmdExecute+0x4c>
			bf4me=0x11;	//set BF flag 4 me
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <cmdExecute+0xf8>)
 80023d2:	2211      	movs	r2, #17
 80023d4:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <cmdExecute+0x100>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <cmdExecute+0x100>)
 80023dc:	2140      	movs	r1, #64	; 0x40
 80023de:	438a      	bics	r2, r1
 80023e0:	615a      	str	r2, [r3, #20]

			showFullScreen(picNum);
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <cmdExecute+0x104>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7ff fd86 	bl	8001ef8 <showFullScreen>
//			showSmallImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 80023ec:	1dfb      	adds	r3, r7, #7
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b12      	cmp	r3, #18
 80023f2:	d113      	bne.n	800241c <cmdExecute+0x7c>
			bf4me=0x12;	//set BF flag 4 me
 80023f4:	4b28      	ldr	r3, [pc, #160]	; (8002498 <cmdExecute+0xf8>)
 80023f6:	2212      	movs	r2, #18
 80023f8:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <cmdExecute+0x100>)
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <cmdExecute+0x100>)
 8002400:	2140      	movs	r1, #64	; 0x40
 8002402:	438a      	bics	r2, r1
 8002404:	615a      	str	r2, [r3, #20]

			showSmallImage(picNum,imX,imY);
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <cmdExecute+0x104>)
 8002408:	7818      	ldrb	r0, [r3, #0]
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <cmdExecute+0x108>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b2d9      	uxtb	r1, r3
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <cmdExecute+0x10c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	001a      	movs	r2, r3
 8002418:	f7ff fe10 	bl	800203c <showSmallImage>
				}
		if(cmd2Execute==0x13){
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b13      	cmp	r3, #19
 8002422:	d113      	bne.n	800244c <cmdExecute+0xac>
			bf4me=0x13;	//set BF flag 4 me
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <cmdExecute+0xf8>)
 8002426:	2213      	movs	r2, #19
 8002428:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <cmdExecute+0x100>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <cmdExecute+0x100>)
 8002430:	2140      	movs	r1, #64	; 0x40
 8002432:	438a      	bics	r2, r1
 8002434:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002436:	4b1c      	ldr	r3, [pc, #112]	; (80024a8 <cmdExecute+0x108>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b2d8      	uxtb	r0, r3
 800243c:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <cmdExecute+0x10c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	b2d9      	uxtb	r1, r3
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <cmdExecute+0x110>)
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <cmdExecute+0x114>)
 8002448:	f000 f836 	bl	80024b8 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b14      	cmp	r3, #20
 8002452:	d108      	bne.n	8002466 <cmdExecute+0xc6>
			bf4me=0x14;	//set BF flag 4 me
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <cmdExecute+0xf8>)
 8002456:	2214      	movs	r2, #20
 8002458:	701a      	strb	r2, [r3, #0]
			GPIOC->ODR &= ~(1 << 6);	//reset BF
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <cmdExecute+0x100>)
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <cmdExecute+0x100>)
 8002460:	2140      	movs	r1, #64	; 0x40
 8002462:	438a      	bics	r2, r1
 8002464:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b15      	cmp	r3, #21
 800246c:	d102      	bne.n	8002474 <cmdExecute+0xd4>
			bf4me=0x15;	//set BF flag 4 me
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <cmdExecute+0xf8>)
 8002470:	2215      	movs	r2, #21
 8002472:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b16      	cmp	r3, #22
 800247a:	d102      	bne.n	8002482 <cmdExecute+0xe2>
			bf4me=0x16;	//set BF flag 4 me
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <cmdExecute+0xf8>)
 800247e:	2216      	movs	r2, #22
 8002480:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]

				}
			}
		}
	}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	200054a0 	.word	0x200054a0
 8002498:	200053cc 	.word	0x200053cc
 800249c:	40004400 	.word	0x40004400
 80024a0:	50000800 	.word	0x50000800
 80024a4:	20005375 	.word	0x20005375
 80024a8:	2000527c 	.word	0x2000527c
 80024ac:	200052b4 	.word	0x200052b4
 80024b0:	200053b5 	.word	0x200053b5
 80024b4:	20005194 	.word	0x20005194

080024b8 <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b092      	sub	sp, #72	; 0x48
 80024bc:	af02      	add	r7, sp, #8
 80024be:	0004      	movs	r4, r0
 80024c0:	0008      	movs	r0, r1
 80024c2:	0011      	movs	r1, r2
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	1c22      	adds	r2, r4, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	1c02      	adds	r2, r0, #0
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	1d7b      	adds	r3, r7, #5
 80024d4:	1c0a      	adds	r2, r1, #0
 80024d6:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80024d8:	233e      	movs	r3, #62	; 0x3e
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	1dfa      	adds	r2, r7, #7
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]

			for (i=0;i<=strLen;i++){
 80024e2:	233c      	movs	r3, #60	; 0x3c
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	2200      	movs	r2, #0
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	e04f      	b.n	800258c <printASCIIarray+0xd4>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 80024ec:	233f      	movs	r3, #63	; 0x3f
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	2200      	movs	r2, #0
 80024f2:	701a      	strb	r2, [r3, #0]
 80024f4:	e01b      	b.n	800252e <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 80024f6:	233c      	movs	r3, #60	; 0x3c
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	18d3      	adds	r3, r2, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	001a      	movs	r2, r3
 8002504:	253f      	movs	r5, #63	; 0x3f
 8002506:	197b      	adds	r3, r7, r5
 8002508:	7818      	ldrb	r0, [r3, #0]
 800250a:	197b      	adds	r3, r7, r5
 800250c:	7819      	ldrb	r1, [r3, #0]
 800250e:	4c33      	ldr	r4, [pc, #204]	; (80025dc <printASCIIarray+0x124>)
 8002510:	0013      	movs	r3, r2
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	00da      	lsls	r2, r3, #3
 8002518:	1ad2      	subs	r2, r2, r3
 800251a:	18a3      	adds	r3, r4, r2
 800251c:	5c1a      	ldrb	r2, [r3, r0]
 800251e:	2308      	movs	r3, #8
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8002524:	197b      	adds	r3, r7, r5
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	197b      	adds	r3, r7, r5
 800252a:	3201      	adds	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	233f      	movs	r3, #63	; 0x3f
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b30      	cmp	r3, #48	; 0x30
 8002536:	d9de      	bls.n	80024f6 <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002538:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <printASCIIarray+0x128>)
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	203e      	movs	r0, #62	; 0x3e
 800253e:	183b      	adds	r3, r7, r0
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	18d3      	adds	r3, r2, r3
 8002544:	b2dc      	uxtb	r4, r3
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <printASCIIarray+0x12c>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	1dbb      	adds	r3, r7, #6
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	18d3      	adds	r3, r2, r3
 8002550:	b2da      	uxtb	r2, r3
 8002552:	1dbb      	adds	r3, r7, #6
 8002554:	7819      	ldrb	r1, [r3, #0]
 8002556:	0005      	movs	r5, r0
 8002558:	183b      	adds	r3, r7, r0
 800255a:	7818      	ldrb	r0, [r3, #0]
 800255c:	2308      	movs	r3, #8
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	23ff      	movs	r3, #255	; 0xff
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	0013      	movs	r3, r2
 8002568:	0022      	movs	r2, r4
 800256a:	f7fe feb7 	bl	80012dc <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <printASCIIarray+0x128>)
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	197b      	adds	r3, r7, r5
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	18d3      	adds	r3, r2, r3
 8002578:	b2da      	uxtb	r2, r3
 800257a:	197b      	adds	r3, r7, r5
 800257c:	3201      	adds	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
			for (i=0;i<=strLen;i++){
 8002580:	213c      	movs	r1, #60	; 0x3c
 8002582:	187b      	adds	r3, r7, r1
 8002584:	881a      	ldrh	r2, [r3, #0]
 8002586:	187b      	adds	r3, r7, r1
 8002588:	3201      	adds	r2, #1
 800258a:	801a      	strh	r2, [r3, #0]
 800258c:	1d7b      	adds	r3, r7, #5
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b29b      	uxth	r3, r3
 8002592:	213c      	movs	r1, #60	; 0x3c
 8002594:	187a      	adds	r2, r7, r1
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d9a7      	bls.n	80024ec <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 800259c:	187b      	adds	r3, r7, r1
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
 80025a2:	e00b      	b.n	80025bc <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 80025a4:	203c      	movs	r0, #60	; 0x3c
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2208      	movs	r2, #8
 80025ac:	18ba      	adds	r2, r7, r2
 80025ae:	2100      	movs	r1, #0
 80025b0:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 80025b2:	183b      	adds	r3, r7, r0
 80025b4:	881a      	ldrh	r2, [r3, #0]
 80025b6:	183b      	adds	r3, r7, r0
 80025b8:	3201      	adds	r2, #1
 80025ba:	801a      	strh	r2, [r3, #0]
 80025bc:	233c      	movs	r3, #60	; 0x3c
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	2b30      	cmp	r3, #48	; 0x30
 80025c4:	d9ee      	bls.n	80025a4 <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <printASCIIarray+0x130>)
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <printASCIIarray+0x130>)
 80025cc:	2140      	movs	r1, #64	; 0x40
 80025ce:	430a      	orrs	r2, r1
 80025d0:	615a      	str	r2, [r3, #20]

		}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b010      	add	sp, #64	; 0x40
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20003130 	.word	0x20003130
 80025e4:	20003131 	.word	0x20003131
 80025e8:	50000800 	.word	0x50000800

080025ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_MspInit+0x4c>)
 8002600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <HAL_MspInit+0x4c>)
 8002604:	2101      	movs	r1, #1
 8002606:	430a      	orrs	r2, r1
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <HAL_MspInit+0x4c>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HAL_MspInit+0x4c>)
 8002618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800261a:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_MspInit+0x4c>)
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0549      	lsls	r1, r1, #21
 8002620:	430a      	orrs	r2, r1
 8002622:	63da      	str	r2, [r3, #60]	; 0x3c
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_MspInit+0x4c>)
 8002626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002628:	2380      	movs	r3, #128	; 0x80
 800262a:	055b      	lsls	r3, r3, #21
 800262c:	4013      	ands	r3, r2
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	0018      	movs	r0, r3
 8002638:	f000 fc5a 	bl	8002ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000

08002648 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	240c      	movs	r4, #12
 8002652:	193b      	adds	r3, r7, r4
 8002654:	0018      	movs	r0, r3
 8002656:	2314      	movs	r3, #20
 8002658:	001a      	movs	r2, r3
 800265a:	2100      	movs	r1, #0
 800265c:	f007 f9b4 	bl	80099c8 <memset>
  if(hcomp->Instance==COMP1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <HAL_COMP_MspInit+0x60>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d11a      	bne.n	80026a0 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <HAL_COMP_MspInit+0x64>)
 800266c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_COMP_MspInit+0x64>)
 8002670:	2102      	movs	r1, #2
 8002672:	430a      	orrs	r2, r1
 8002674:	635a      	str	r2, [r3, #52]	; 0x34
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <HAL_COMP_MspInit+0x64>)
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267a:	2202      	movs	r2, #2
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002682:	193b      	adds	r3, r7, r4
 8002684:	2204      	movs	r2, #4
 8002686:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	193b      	adds	r3, r7, r4
 800268a:	2203      	movs	r2, #3
 800268c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002694:	193b      	adds	r3, r7, r4
 8002696:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_COMP_MspInit+0x68>)
 8002698:	0019      	movs	r1, r3
 800269a:	0010      	movs	r0, r2
 800269c:	f001 f97e 	bl	800399c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b009      	add	sp, #36	; 0x24
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	40010200 	.word	0x40010200
 80026ac:	40021000 	.word	0x40021000
 80026b0:	50000400 	.word	0x50000400

080026b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b4:	b590      	push	{r4, r7, lr}
 80026b6:	b08b      	sub	sp, #44	; 0x2c
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	2414      	movs	r4, #20
 80026be:	193b      	adds	r3, r7, r4
 80026c0:	0018      	movs	r0, r3
 80026c2:	2314      	movs	r3, #20
 80026c4:	001a      	movs	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	f007 f97e 	bl	80099c8 <memset>
  if(hi2c->Instance==I2C1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a20      	ldr	r2, [pc, #128]	; (8002754 <HAL_I2C_MspInit+0xa0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d139      	bne.n	800274a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_I2C_MspInit+0xa4>)
 80026d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_I2C_MspInit+0xa4>)
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_I2C_MspInit+0xa4>)
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	22c0      	movs	r2, #192	; 0xc0
 80026f2:	00d2      	lsls	r2, r2, #3
 80026f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f6:	0021      	movs	r1, r4
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	2212      	movs	r2, #18
 80026fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026fe:	187b      	adds	r3, r7, r1
 8002700:	2201      	movs	r2, #1
 8002702:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2200      	movs	r2, #0
 8002708:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2206      	movs	r2, #6
 800270e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	187a      	adds	r2, r7, r1
 8002712:	23a0      	movs	r3, #160	; 0xa0
 8002714:	05db      	lsls	r3, r3, #23
 8002716:	0011      	movs	r1, r2
 8002718:	0018      	movs	r0, r3
 800271a:	f001 f93f 	bl	800399c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800271e:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_I2C_MspInit+0xa4>)
 8002720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_I2C_MspInit+0xa4>)
 8002724:	2180      	movs	r1, #128	; 0x80
 8002726:	0389      	lsls	r1, r1, #14
 8002728:	430a      	orrs	r2, r1
 800272a:	63da      	str	r2, [r3, #60]	; 0x3c
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_I2C_MspInit+0xa4>)
 800272e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	039b      	lsls	r3, r3, #14
 8002734:	4013      	ands	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2017      	movs	r0, #23
 8002740:	f000 fef8 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002744:	2017      	movs	r0, #23
 8002746:	f000 ff0a 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b00b      	add	sp, #44	; 0x2c
 8002750:	bd90      	pop	{r4, r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	40005400 	.word	0x40005400
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b08b      	sub	sp, #44	; 0x2c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	2414      	movs	r4, #20
 8002766:	193b      	adds	r3, r7, r4
 8002768:	0018      	movs	r0, r3
 800276a:	2314      	movs	r3, #20
 800276c:	001a      	movs	r2, r3
 800276e:	2100      	movs	r1, #0
 8002770:	f007 f92a 	bl	80099c8 <memset>
  if(hi2s->Instance==SPI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a46      	ldr	r2, [pc, #280]	; (8002894 <HAL_I2S_MspInit+0x138>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d000      	beq.n	8002780 <HAL_I2S_MspInit+0x24>
 800277e:	e085      	b.n	800288c <HAL_I2S_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002780:	4b45      	ldr	r3, [pc, #276]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 8002782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	0149      	lsls	r1, r1, #5
 800278a:	430a      	orrs	r2, r1
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
 800278e:	4b42      	ldr	r3, [pc, #264]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 8002790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002792:	2380      	movs	r3, #128	; 0x80
 8002794:	015b      	lsls	r3, r3, #5
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 800279e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	430a      	orrs	r2, r1
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 80027aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b4:	4b38      	ldr	r3, [pc, #224]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 80027b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b8:	4b37      	ldr	r3, [pc, #220]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 80027ba:	2102      	movs	r1, #2
 80027bc:	430a      	orrs	r2, r1
 80027be:	635a      	str	r2, [r3, #52]	; 0x34
 80027c0:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_I2S_MspInit+0x13c>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027cc:	193b      	adds	r3, r7, r4
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	0212      	lsls	r2, r2, #8
 80027d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	2202      	movs	r2, #2
 80027d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ec:	193a      	adds	r2, r7, r4
 80027ee:	23a0      	movs	r3, #160	; 0xa0
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f001 f8d1 	bl	800399c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80027fa:	0021      	movs	r1, r4
 80027fc:	187b      	adds	r3, r7, r1
 80027fe:	2238      	movs	r2, #56	; 0x38
 8002800:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	187b      	adds	r3, r7, r1
 8002804:	2202      	movs	r2, #2
 8002806:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	187b      	adds	r3, r7, r1
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2200      	movs	r2, #0
 8002812:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002814:	187b      	adds	r3, r7, r1
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281a:	187b      	adds	r3, r7, r1
 800281c:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_I2S_MspInit+0x140>)
 800281e:	0019      	movs	r1, r3
 8002820:	0010      	movs	r0, r2
 8002822:	f001 f8bb 	bl	800399c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002828:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_I2S_MspInit+0x148>)
 800282a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 800282e:	2211      	movs	r2, #17
 8002830:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002834:	2210      	movs	r2, #16
 8002836:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 800283a:	2200      	movs	r2, #0
 800283c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002840:	2280      	movs	r2, #128	; 0x80
 8002842:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	0052      	lsls	r2, r2, #1
 800284a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800284c:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	00d2      	lsls	r2, r2, #3
 8002852:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002862:	0018      	movs	r0, r3
 8002864:	f000 fe98 	bl	8003598 <HAL_DMA_Init>
 8002868:	1e03      	subs	r3, r0, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2S_MspInit+0x114>
    {
      Error_Handler();
 800286c:	f7ff febe 	bl	80025ec <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0b      	ldr	r2, [pc, #44]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_I2S_MspInit+0x144>)
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2019      	movs	r0, #25
 8002882:	f000 fe57 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002886:	2019      	movs	r0, #25
 8002888:	f000 fe69 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b00b      	add	sp, #44	; 0x2c
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	40013000 	.word	0x40013000
 8002898:	40021000 	.word	0x40021000
 800289c:	50000400 	.word	0x50000400
 80028a0:	2000543c 	.word	0x2000543c
 80028a4:	40020008 	.word	0x40020008

080028a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b08b      	sub	sp, #44	; 0x2c
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	2414      	movs	r4, #20
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	0018      	movs	r0, r3
 80028b6:	2314      	movs	r3, #20
 80028b8:	001a      	movs	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f007 f884 	bl	80099c8 <memset>
  if(hspi->Instance==SPI2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_SPI_MspInit+0xc8>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d14d      	bne.n	8002966 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_SPI_MspInit+0xcc>)
 80028cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ce:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_SPI_MspInit+0xcc>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	01c9      	lsls	r1, r1, #7
 80028d4:	430a      	orrs	r2, r1
 80028d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <HAL_SPI_MspInit+0xcc>)
 80028da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	01db      	lsls	r3, r3, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_SPI_MspInit+0xcc>)
 80028e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ea:	4b22      	ldr	r3, [pc, #136]	; (8002974 <HAL_SPI_MspInit+0xcc>)
 80028ec:	2102      	movs	r1, #2
 80028ee:	430a      	orrs	r2, r1
 80028f0:	635a      	str	r2, [r3, #52]	; 0x34
 80028f2:	4b20      	ldr	r3, [pc, #128]	; (8002974 <HAL_SPI_MspInit+0xcc>)
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	193b      	adds	r3, r7, r4
 8002906:	2202      	movs	r2, #2
 8002908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	193b      	adds	r3, r7, r4
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	193b      	adds	r3, r7, r4
 8002912:	2200      	movs	r2, #0
 8002914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002916:	193b      	adds	r3, r7, r4
 8002918:	2204      	movs	r2, #4
 800291a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291c:	193b      	adds	r3, r7, r4
 800291e:	4a16      	ldr	r2, [pc, #88]	; (8002978 <HAL_SPI_MspInit+0xd0>)
 8002920:	0019      	movs	r1, r3
 8002922:	0010      	movs	r0, r2
 8002924:	f001 f83a 	bl	800399c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002928:	0021      	movs	r1, r4
 800292a:	187b      	adds	r3, r7, r1
 800292c:	22c0      	movs	r2, #192	; 0xc0
 800292e:	0052      	lsls	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	187b      	adds	r3, r7, r1
 8002934:	2202      	movs	r2, #2
 8002936:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	187b      	adds	r3, r7, r1
 8002940:	2200      	movs	r2, #0
 8002942:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002944:	187b      	adds	r3, r7, r1
 8002946:	2201      	movs	r2, #1
 8002948:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294a:	187b      	adds	r3, r7, r1
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_SPI_MspInit+0xd0>)
 800294e:	0019      	movs	r1, r3
 8002950:	0010      	movs	r0, r2
 8002952:	f001 f823 	bl	800399c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	201a      	movs	r0, #26
 800295c:	f000 fdea 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002960:	201a      	movs	r0, #26
 8002962:	f000 fdfc 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b00b      	add	sp, #44	; 0x2c
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	40003800 	.word	0x40003800
 8002974:	40021000 	.word	0x40021000
 8002978:	50000400 	.word	0x50000400

0800297c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <HAL_TIM_Base_MspInit+0x38>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10d      	bne.n	80029aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_TIM_Base_MspInit+0x3c>)
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0109      	lsls	r1, r1, #4
 8002998:	430a      	orrs	r2, r1
 800299a:	641a      	str	r2, [r3, #64]	; 0x40
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_TIM_Base_MspInit+0x3c>)
 800299e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a0:	2380      	movs	r3, #128	; 0x80
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	240c      	movs	r4, #12
 80029c6:	193b      	adds	r3, r7, r4
 80029c8:	0018      	movs	r0, r3
 80029ca:	2314      	movs	r3, #20
 80029cc:	001a      	movs	r2, r3
 80029ce:	2100      	movs	r1, #0
 80029d0:	f006 fffa 	bl	80099c8 <memset>
  if(htim->Instance==TIM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <HAL_TIM_MspPostInit+0x74>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d123      	bne.n	8002a26 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_TIM_MspPostInit+0x78>)
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <HAL_TIM_MspPostInit+0x78>)
 80029e4:	2101      	movs	r1, #1
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_TIM_MspPostInit+0x78>)
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	0052      	lsls	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	0021      	movs	r1, r4
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	2202      	movs	r2, #2
 8002a04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	2202      	movs	r2, #2
 8002a0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0c:	187b      	adds	r3, r7, r1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002a12:	187b      	adds	r3, r7, r1
 8002a14:	2202      	movs	r2, #2
 8002a16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	187a      	adds	r2, r7, r1
 8002a1a:	23a0      	movs	r3, #160	; 0xa0
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 ffbb 	bl	800399c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b009      	add	sp, #36	; 0x24
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b08b      	sub	sp, #44	; 0x2c
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a40:	2414      	movs	r4, #20
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	0018      	movs	r0, r3
 8002a46:	2314      	movs	r3, #20
 8002a48:	001a      	movs	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	f006 ffbc 	bl	80099c8 <memset>
  if(husart->Instance==USART3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <HAL_USART_MspInit+0xe0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d159      	bne.n	8002b0e <HAL_USART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a5a:	4b30      	ldr	r3, [pc, #192]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5e:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a60:	2180      	movs	r1, #128	; 0x80
 8002a62:	02c9      	lsls	r1, r1, #11
 8002a64:	430a      	orrs	r2, r1
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a68:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	02db      	lsls	r3, r3, #11
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7a:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	635a      	str	r2, [r3, #52]	; 0x34
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	2201      	movs	r2, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a94:	2102      	movs	r1, #2
 8002a96:	430a      	orrs	r2, r1
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_USART_MspInit+0xe4>)
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	193b      	adds	r3, r7, r4
 8002aae:	2202      	movs	r2, #2
 8002ab0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab8:	193b      	adds	r3, r7, r4
 8002aba:	2203      	movs	r2, #3
 8002abc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	193a      	adds	r2, r7, r4
 8002ac6:	23a0      	movs	r3, #160	; 0xa0
 8002ac8:	05db      	lsls	r3, r3, #23
 8002aca:	0011      	movs	r1, r2
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 ff65 	bl	800399c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ad2:	0021      	movs	r1, r4
 8002ad4:	187b      	adds	r3, r7, r1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	2202      	movs	r2, #2
 8002ade:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae6:	187b      	adds	r3, r7, r1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002aec:	187b      	adds	r3, r7, r1
 8002aee:	2204      	movs	r2, #4
 8002af0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <HAL_USART_MspInit+0xe8>)
 8002af6:	0019      	movs	r1, r3
 8002af8:	0010      	movs	r0, r2
 8002afa:	f000 ff4f 	bl	800399c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	201d      	movs	r0, #29
 8002b04:	f000 fd16 	bl	8003534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002b08:	201d      	movs	r0, #29
 8002b0a:	f000 fd28 	bl	800355e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b00b      	add	sp, #44	; 0x2c
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	50000400 	.word	0x50000400

08002b24 <LL_USART_IsActiveFlag_FE>:
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	2202      	movs	r2, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d101      	bne.n	8002b3c <LL_USART_IsActiveFlag_FE+0x18>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_USART_IsActiveFlag_FE+0x1a>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <LL_USART_IsActiveFlag_NE>:
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d101      	bne.n	8002b5e <LL_USART_IsActiveFlag_NE+0x18>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <LL_USART_IsActiveFlag_NE+0x1a>
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <LL_USART_IsActiveFlag_ORE>:
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2208      	movs	r2, #8
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d101      	bne.n	8002b80 <LL_USART_IsActiveFlag_ORE+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2220      	movs	r2, #32
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d101      	bne.n	8002ba2 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	d101      	bne.n	8002bc4 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b002      	add	sp, #8
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <HardFault_Handler+0x4>

08002bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf6:	f000 f93b 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c04:	4b03      	ldr	r3, [pc, #12]	; (8002c14 <DMA1_Channel1_IRQHandler+0x14>)
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fdba 	bl	8003780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	2000543c 	.word	0x2000543c

08002c18 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <I2C1_IRQHandler+0x2c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699a      	ldr	r2, [r3, #24]
 8002c22:	23e0      	movs	r3, #224	; 0xe0
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4013      	ands	r3, r2
 8002c28:	d004      	beq.n	8002c34 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <I2C1_IRQHandler+0x2c>)
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f001 f8c9 	bl	8003dc4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002c32:	e003      	b.n	8002c3c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <I2C1_IRQHandler+0x2c>)
 8002c36:	0018      	movs	r0, r3
 8002c38:	f001 f8aa 	bl	8003d90 <HAL_I2C_EV_IRQHandler>
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	2000521c 	.word	0x2000521c

08002c48 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <SPI1_IRQHandler+0x14>)
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f002 f82c 	bl	8004cac <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	20005378 	.word	0x20005378

08002c60 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <SPI2_IRQHandler+0x14>)
 8002c66:	0018      	movs	r0, r3
 8002c68:	f004 f846 	bl	8006cf8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	200051a4 	.word	0x200051a4

08002c78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002c82:	2108      	movs	r1, #8
 8002c84:	430a      	orrs	r2, r1
 8002c86:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002c88:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002c8a:	6a1a      	ldr	r2, [r3, #32]
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002c8e:	2102      	movs	r1, #2
 8002c90:	430a      	orrs	r2, r1
 8002c92:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002c94:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff ff71 	bl	8002b8a <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d009      	beq.n	8002cc0 <USART2_IRQHandler+0x48>
 8002cac:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7ff ff7c 	bl	8002bac <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d003      	beq.n	8002cc0 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002cb8:	f7fe f958 	bl	8000f6c <USART2_RX_Callback>
	  {
 8002cbc:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cbe:	e025      	b.n	8002d0c <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cc2:	6a1a      	ldr	r2, [r3, #32]
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff ff4a 	bl	8002b68 <LL_USART_IsActiveFlag_ORE>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d008      	beq.n	8002cea <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cda:	6a1a      	ldr	r2, [r3, #32]
 8002cdc:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cde:	2108      	movs	r1, #8
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ce8:	e010      	b.n	8002d0c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7ff ff19 	bl	8002b24 <LL_USART_IsActiveFlag_FE>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d002      	beq.n	8002cfc <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002cfa:	e007      	b.n	8002d0c <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff ff21 	bl	8002b46 <LL_USART_IsActiveFlag_NE>
 8002d04:	1e03      	subs	r3, r0, #0
 8002d06:	d001      	beq.n	8002d0c <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <USART2_IRQHandler+0x9c>)
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40004400 	.word	0x40004400

08002d18 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <USART3_4_LPUART1_IRQHandler+0x14>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f005 fcf8 	bl	8008714 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	200052b8 	.word	0x200052b8

08002d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <SystemInit+0x14>)
 8002d36:	2280      	movs	r2, #128	; 0x80
 8002d38:	0512      	lsls	r2, r2, #20
 8002d3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d4c:	f7ff fff0 	bl	8002d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d50:	480c      	ldr	r0, [pc, #48]	; (8002d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d52:	490d      	ldr	r1, [pc, #52]	; (8002d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <LoopForever+0xe>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d68:	4c0a      	ldr	r4, [pc, #40]	; (8002d94 <LoopForever+0x16>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d76:	f006 fe03 	bl	8009980 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d7a:	f7fd fbcd 	bl	8000518 <main>

08002d7e <LoopForever>:

LoopForever:
  b LoopForever
 8002d7e:	e7fe      	b.n	8002d7e <LoopForever>
  ldr   r0, =_estack
 8002d80:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d88:	20005140 	.word	0x20005140
  ldr r2, =_sidata
 8002d8c:	08009ae0 	.word	0x08009ae0
  ldr r2, =_sbss
 8002d90:	20005140 	.word	0x20005140
  ldr r4, =_ebss
 8002d94:	200054c0 	.word	0x200054c0

08002d98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d98:	e7fe      	b.n	8002d98 <ADC1_COMP_IRQHandler>
	...

08002d9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <HAL_Init+0x3c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_Init+0x3c>)
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0049      	lsls	r1, r1, #1
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db6:	2000      	movs	r0, #0
 8002db8:	f000 f810 	bl	8002ddc <HAL_InitTick>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	e001      	b.n	8002dcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff fc16 	bl	80025f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dcc:	1dfb      	adds	r3, r7, #7
 8002dce:	781b      	ldrb	r3, [r3, #0]
}
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40022000 	.word	0x40022000

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002de4:	230f      	movs	r3, #15
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <HAL_InitTick+0x88>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d02b      	beq.n	8002e4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002df4:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_InitTick+0x8c>)
 8002df6:	681c      	ldr	r4, [r3, #0]
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_InitTick+0x88>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	23fa      	movs	r3, #250	; 0xfa
 8002e00:	0098      	lsls	r0, r3, #2
 8002e02:	f7fd f97f 	bl	8000104 <__udivsi3>
 8002e06:	0003      	movs	r3, r0
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0020      	movs	r0, r4
 8002e0c:	f7fd f97a 	bl	8000104 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 fbb3 	bl	800357e <HAL_SYSTICK_Config>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d112      	bne.n	8002e42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d80a      	bhi.n	8002e38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2301      	movs	r3, #1
 8002e26:	425b      	negs	r3, r3
 8002e28:	2200      	movs	r2, #0
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fb82 	bl	8003534 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_InitTick+0x90>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e00d      	b.n	8002e54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e38:	230f      	movs	r3, #15
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e008      	b.n	8002e54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e42:	230f      	movs	r3, #15
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]
 8002e4a:	e003      	b.n	8002e54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e54:	230f      	movs	r3, #15
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b005      	add	sp, #20
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	2000513c 	.word	0x2000513c
 8002e68:	20005134 	.word	0x20005134
 8002e6c:	20005138 	.word	0x20005138

08002e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_IncTick+0x1c>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	001a      	movs	r2, r3
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_IncTick+0x20>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	18d2      	adds	r2, r2, r3
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_IncTick+0x20>)
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	2000513c 	.word	0x2000513c
 8002e90:	200054bc 	.word	0x200054bc

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b02      	ldr	r3, [pc, #8]	; (8002ea4 <HAL_GetTick+0x10>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	200054bc 	.word	0x200054bc

08002ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb0:	f7ff fff0 	bl	8002e94 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	d005      	beq.n	8002ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_Delay+0x44>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	f7ff ffe0 	bl	8002e94 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d8f7      	bhi.n	8002ed0 <HAL_Delay+0x28>
  {
  }
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b004      	add	sp, #16
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	2000513c 	.word	0x2000513c

08002ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	40010000 	.word	0x40010000
 8002f18:	fffff9ff 	.word	0xfffff9ff

08002f1c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f24:	4a05      	ldr	r2, [pc, #20]	; (8002f3c <LL_EXTI_EnableIT_0_31+0x20>)
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	58d2      	ldr	r2, [r2, r3]
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <LL_EXTI_EnableIT_0_31+0x20>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	508b      	str	r3, [r1, r2]
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021800 	.word	0x40021800

08002f40 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f48:	4a06      	ldr	r2, [pc, #24]	; (8002f64 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	58d3      	ldr	r3, [r2, r3]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	43d2      	mvns	r2, r2
 8002f52:	4904      	ldr	r1, [pc, #16]	; (8002f64 <LL_EXTI_DisableIT_0_31+0x24>)
 8002f54:	4013      	ands	r3, r2
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	508b      	str	r3, [r1, r2]
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	b002      	add	sp, #8
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	40021800 	.word	0x40021800

08002f68 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f70:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f72:	2384      	movs	r3, #132	; 0x84
 8002f74:	58d2      	ldr	r2, [r2, r3]
 8002f76:	4904      	ldr	r1, [pc, #16]	; (8002f88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	2284      	movs	r2, #132	; 0x84
 8002f7e:	508b      	str	r3, [r1, r2]

}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021800 	.word	0x40021800

08002f8c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f96:	2384      	movs	r3, #132	; 0x84
 8002f98:	58d3      	ldr	r3, [r2, r3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	43d2      	mvns	r2, r2
 8002f9e:	4904      	ldr	r1, [pc, #16]	; (8002fb0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2284      	movs	r2, #132	; 0x84
 8002fa4:	508b      	str	r3, [r1, r2]
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	40021800 	.word	0x40021800

08002fb4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002fbc:	4b04      	ldr	r3, [pc, #16]	; (8002fd0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]

}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021800 	.word	0x40021800

08002fd4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	43d9      	mvns	r1, r3
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	40021800 	.word	0x40021800

08002ff8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021800 	.word	0x40021800

08003018 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	43d9      	mvns	r1, r3
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800302a:	400a      	ands	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
}
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	46bd      	mov	sp, r7
 8003032:	b002      	add	sp, #8
 8003034:	bd80      	pop	{r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	40021800 	.word	0x40021800

0800303c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]
}
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b002      	add	sp, #8
 8003050:	bd80      	pop	{r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	40021800 	.word	0x40021800

08003058 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	60da      	str	r2, [r3, #12]
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021800 	.word	0x40021800

08003074 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003080:	211f      	movs	r1, #31
 8003082:	187b      	adds	r3, r7, r1
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800308e:	187b      	adds	r3, r7, r1
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e13d      	b.n	8003312 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0fdb      	lsrs	r3, r3, #31
 800309e:	07da      	lsls	r2, r3, #31
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	061b      	lsls	r3, r3, #24
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d104      	bne.n	80030b2 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 80030a8:	231f      	movs	r3, #31
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e12f      	b.n	8003312 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2229      	movs	r2, #41	; 0x29
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2228      	movs	r2, #40	; 0x28
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7ff faba 	bl	8002648 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2230      	movs	r2, #48	; 0x30
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a85      	ldr	r2, [pc, #532]	; (8003320 <HAL_COMP_Init+0x2ac>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	430a      	orrs	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	429a      	cmp	r2, r3
 8003124:	d10d      	bne.n	8003142 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003126:	4b7f      	ldr	r3, [pc, #508]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b7e      	ldr	r3, [pc, #504]	; (8003324 <HAL_COMP_Init+0x2b0>)
 800312c:	497e      	ldr	r1, [pc, #504]	; (8003328 <HAL_COMP_Init+0x2b4>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003132:	4b7c      	ldr	r3, [pc, #496]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	4b7b      	ldr	r3, [pc, #492]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	0109      	lsls	r1, r1, #4
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	e01f      	b.n	8003182 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	23c0      	movs	r3, #192	; 0xc0
 8003148:	015b      	lsls	r3, r3, #5
 800314a:	429a      	cmp	r2, r3
 800314c:	d10d      	bne.n	800316a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800314e:	4b75      	ldr	r3, [pc, #468]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b74      	ldr	r3, [pc, #464]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003154:	2180      	movs	r1, #128	; 0x80
 8003156:	0109      	lsls	r1, r1, #4
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800315c:	4b71      	ldr	r3, [pc, #452]	; (8003324 <HAL_COMP_Init+0x2b0>)
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003162:	4971      	ldr	r1, [pc, #452]	; (8003328 <HAL_COMP_Init+0x2b4>)
 8003164:	400a      	ands	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	e00b      	b.n	8003182 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800316a:	4b6e      	ldr	r3, [pc, #440]	; (8003324 <HAL_COMP_Init+0x2b0>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003170:	496d      	ldr	r1, [pc, #436]	; (8003328 <HAL_COMP_Init+0x2b4>)
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003176:	4b6b      	ldr	r3, [pc, #428]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <HAL_COMP_Init+0x2b0>)
 800317c:	496a      	ldr	r1, [pc, #424]	; (8003328 <HAL_COMP_Init+0x2b4>)
 800317e:	400a      	ands	r2, r1
 8003180:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	22a0      	movs	r2, #160	; 0xa0
 8003188:	01d2      	lsls	r2, r2, #7
 800318a:	4293      	cmp	r3, r2
 800318c:	d017      	beq.n	80031be <HAL_COMP_Init+0x14a>
 800318e:	22a0      	movs	r2, #160	; 0xa0
 8003190:	01d2      	lsls	r2, r2, #7
 8003192:	4293      	cmp	r3, r2
 8003194:	d830      	bhi.n	80031f8 <HAL_COMP_Init+0x184>
 8003196:	2b01      	cmp	r3, #1
 8003198:	d01f      	beq.n	80031da <HAL_COMP_Init+0x166>
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	01d2      	lsls	r2, r2, #7
 800319e:	4293      	cmp	r3, r2
 80031a0:	d12a      	bne.n	80031f8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031a2:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031a8:	2180      	movs	r1, #128	; 0x80
 80031aa:	01c9      	lsls	r1, r1, #7
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031b0:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4b5b      	ldr	r3, [pc, #364]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031b6:	495d      	ldr	r1, [pc, #372]	; (800332c <HAL_COMP_Init+0x2b8>)
 80031b8:	400a      	ands	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
        break;
 80031bc:	e029      	b.n	8003212 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031be:	4b59      	ldr	r3, [pc, #356]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031c4:	4959      	ldr	r1, [pc, #356]	; (800332c <HAL_COMP_Init+0x2b8>)
 80031c6:	400a      	ands	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031ca:	4b56      	ldr	r3, [pc, #344]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031d0:	2180      	movs	r1, #128	; 0x80
 80031d2:	01c9      	lsls	r1, r1, #7
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
        break;
 80031d8:	e01b      	b.n	8003212 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031da:	4b52      	ldr	r3, [pc, #328]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b51      	ldr	r3, [pc, #324]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031e0:	2180      	movs	r1, #128	; 0x80
 80031e2:	01c9      	lsls	r1, r1, #7
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80031e8:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	01c9      	lsls	r1, r1, #7
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
        break;
 80031f6:	e00c      	b.n	8003212 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_COMP_Init+0x2b0>)
 80031fe:	494b      	ldr	r1, [pc, #300]	; (800332c <HAL_COMP_Init+0x2b8>)
 8003200:	400a      	ands	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	4b46      	ldr	r3, [pc, #280]	; (8003324 <HAL_COMP_Init+0x2b0>)
 800320a:	4948      	ldr	r1, [pc, #288]	; (800332c <HAL_COMP_Init+0x2b8>)
 800320c:	400a      	ands	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
        break;
 8003210:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2230      	movs	r2, #48	; 0x30
 800321a:	4013      	ands	r3, r2
 800321c:	d016      	beq.n	800324c <HAL_COMP_Init+0x1d8>
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d113      	bne.n	800324c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <HAL_COMP_Init+0x2bc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4942      	ldr	r1, [pc, #264]	; (8003334 <HAL_COMP_Init+0x2c0>)
 800322a:	0018      	movs	r0, r3
 800322c:	f7fc ff6a 	bl	8000104 <__udivsi3>
 8003230:	0003      	movs	r3, r0
 8003232:	001a      	movs	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	189b      	adds	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800323e:	e002      	b.n	8003246 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3b01      	subs	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f9      	bne.n	8003240 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a34      	ldr	r2, [pc, #208]	; (8003324 <HAL_COMP_Init+0x2b0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d102      	bne.n	800325c <HAL_COMP_Init+0x1e8>
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	029b      	lsls	r3, r3, #10
 800325a:	e001      	b.n	8003260 <HAL_COMP_Init+0x1ec>
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	02db      	lsls	r3, r3, #11
 8003260:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2203      	movs	r2, #3
 8003268:	4013      	ands	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2210      	movs	r2, #16
 8003272:	4013      	ands	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff fe9b 	bl	8002fb4 <LL_EXTI_EnableRisingTrig_0_31>
 800327e:	e003      	b.n	8003288 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff fea6 	bl	8002fd4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	2220      	movs	r2, #32
 800328e:	4013      	ands	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff feaf 	bl	8002ff8 <LL_EXTI_EnableFallingTrig_0_31>
 800329a:	e003      	b.n	80032a4 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	0018      	movs	r0, r3
 80032a0:	f7ff feba 	bl	8003018 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff fed6 	bl	8003058 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7ff fec4 	bl	800303c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2202      	movs	r2, #2
 80032ba:	4013      	ands	r3, r2
 80032bc:	d004      	beq.n	80032c8 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff fe51 	bl	8002f68 <LL_EXTI_EnableEvent_0_31>
 80032c6:	e003      	b.n	80032d0 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f7ff fe5e 	bl	8002f8c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2201      	movs	r2, #1
 80032d6:	4013      	ands	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff fe1d 	bl	8002f1c <LL_EXTI_EnableIT_0_31>
 80032e2:	e00c      	b.n	80032fe <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff fe2a 	bl	8002f40 <LL_EXTI_DisableIT_0_31>
 80032ec:	e007      	b.n	80032fe <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff fe4b 	bl	8002f8c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fe21 	bl	8002f40 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2229      	movs	r2, #41	; 0x29
 8003302:	5c9b      	ldrb	r3, [r3, r2]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2229      	movs	r2, #41	; 0x29
 800330e:	2101      	movs	r1, #1
 8003310:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003312:	231f      	movs	r3, #31
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	781b      	ldrb	r3, [r3, #0]
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b008      	add	sp, #32
 800331e:	bd80      	pop	{r7, pc}
 8003320:	fe00740f 	.word	0xfe00740f
 8003324:	40010200 	.word	0x40010200
 8003328:	fffff7ff 	.word	0xfffff7ff
 800332c:	ffffbfff 	.word	0xffffbfff
 8003330:	20005134 	.word	0x20005134
 8003334:	00030d40 	.word	0x00030d40

08003338 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003340:	2300      	movs	r3, #0
 8003342:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	210f      	movs	r1, #15
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e034      	b.n	80033c4 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	0fdb      	lsrs	r3, r3, #31
 8003362:	07da      	lsls	r2, r3, #31
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	429a      	cmp	r2, r3
 800336a:	d104      	bne.n	8003376 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800336c:	230f      	movs	r3, #15
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e026      	b.n	80033c4 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2229      	movs	r2, #41	; 0x29
 800337a:	5c9b      	ldrb	r3, [r3, r2]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d11c      	bne.n	80033bc <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2229      	movs	r2, #41	; 0x29
 8003396:	2102      	movs	r1, #2
 8003398:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_COMP_Start+0x9c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	490e      	ldr	r1, [pc, #56]	; (80033d8 <HAL_COMP_Start+0xa0>)
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7fc feaf 	bl	8000104 <__udivsi3>
 80033a6:	0003      	movs	r3, r0
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033ac:	e002      	b.n	80033b4 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f9      	bne.n	80033ae <HAL_COMP_Start+0x76>
 80033ba:	e003      	b.n	80033c4 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033bc:	230f      	movs	r3, #15
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80033c4:	230f      	movs	r3, #15
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	20005134 	.word	0x20005134
 80033d8:	00030d40 	.word	0x00030d40

080033dc <__NVIC_EnableIRQ>:
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	0002      	movs	r2, r0
 80033e4:	1dfb      	adds	r3, r7, #7
 80033e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b7f      	cmp	r3, #127	; 0x7f
 80033ee:	d809      	bhi.n	8003404 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	001a      	movs	r2, r3
 80033f6:	231f      	movs	r3, #31
 80033f8:	401a      	ands	r2, r3
 80033fa:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_EnableIRQ+0x30>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	4091      	lsls	r1, r2
 8003400:	000a      	movs	r2, r1
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	0002      	movs	r2, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	1dfb      	adds	r3, r7, #7
 800341c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800341e:	1dfb      	adds	r3, r7, #7
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b7f      	cmp	r3, #127	; 0x7f
 8003424:	d828      	bhi.n	8003478 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003426:	4a2f      	ldr	r2, [pc, #188]	; (80034e4 <__NVIC_SetPriority+0xd4>)
 8003428:	1dfb      	adds	r3, r7, #7
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b25b      	sxtb	r3, r3
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	33c0      	adds	r3, #192	; 0xc0
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	589b      	ldr	r3, [r3, r2]
 8003436:	1dfa      	adds	r2, r7, #7
 8003438:	7812      	ldrb	r2, [r2, #0]
 800343a:	0011      	movs	r1, r2
 800343c:	2203      	movs	r2, #3
 800343e:	400a      	ands	r2, r1
 8003440:	00d2      	lsls	r2, r2, #3
 8003442:	21ff      	movs	r1, #255	; 0xff
 8003444:	4091      	lsls	r1, r2
 8003446:	000a      	movs	r2, r1
 8003448:	43d2      	mvns	r2, r2
 800344a:	401a      	ands	r2, r3
 800344c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	019b      	lsls	r3, r3, #6
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	401a      	ands	r2, r3
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	0018      	movs	r0, r3
 800345c:	2303      	movs	r3, #3
 800345e:	4003      	ands	r3, r0
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003464:	481f      	ldr	r0, [pc, #124]	; (80034e4 <__NVIC_SetPriority+0xd4>)
 8003466:	1dfb      	adds	r3, r7, #7
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b25b      	sxtb	r3, r3
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	430a      	orrs	r2, r1
 8003470:	33c0      	adds	r3, #192	; 0xc0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	501a      	str	r2, [r3, r0]
}
 8003476:	e031      	b.n	80034dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003478:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <__NVIC_SetPriority+0xd8>)
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	0019      	movs	r1, r3
 8003480:	230f      	movs	r3, #15
 8003482:	400b      	ands	r3, r1
 8003484:	3b08      	subs	r3, #8
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3306      	adds	r3, #6
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	18d3      	adds	r3, r2, r3
 800348e:	3304      	adds	r3, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1dfa      	adds	r2, r7, #7
 8003494:	7812      	ldrb	r2, [r2, #0]
 8003496:	0011      	movs	r1, r2
 8003498:	2203      	movs	r2, #3
 800349a:	400a      	ands	r2, r1
 800349c:	00d2      	lsls	r2, r2, #3
 800349e:	21ff      	movs	r1, #255	; 0xff
 80034a0:	4091      	lsls	r1, r2
 80034a2:	000a      	movs	r2, r1
 80034a4:	43d2      	mvns	r2, r2
 80034a6:	401a      	ands	r2, r3
 80034a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	019b      	lsls	r3, r3, #6
 80034ae:	22ff      	movs	r2, #255	; 0xff
 80034b0:	401a      	ands	r2, r3
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	0018      	movs	r0, r3
 80034b8:	2303      	movs	r3, #3
 80034ba:	4003      	ands	r3, r0
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c0:	4809      	ldr	r0, [pc, #36]	; (80034e8 <__NVIC_SetPriority+0xd8>)
 80034c2:	1dfb      	adds	r3, r7, #7
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	001c      	movs	r4, r3
 80034c8:	230f      	movs	r3, #15
 80034ca:	4023      	ands	r3, r4
 80034cc:	3b08      	subs	r3, #8
 80034ce:	089b      	lsrs	r3, r3, #2
 80034d0:	430a      	orrs	r2, r1
 80034d2:	3306      	adds	r3, #6
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	18c3      	adds	r3, r0, r3
 80034d8:	3304      	adds	r3, #4
 80034da:	601a      	str	r2, [r3, #0]
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b003      	add	sp, #12
 80034e2:	bd90      	pop	{r4, r7, pc}
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1e5a      	subs	r2, r3, #1
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	045b      	lsls	r3, r3, #17
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d301      	bcc.n	8003504 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003500:	2301      	movs	r3, #1
 8003502:	e010      	b.n	8003526 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <SysTick_Config+0x44>)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	3a01      	subs	r2, #1
 800350a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350c:	2301      	movs	r3, #1
 800350e:	425b      	negs	r3, r3
 8003510:	2103      	movs	r1, #3
 8003512:	0018      	movs	r0, r3
 8003514:	f7ff ff7c 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SysTick_Config+0x44>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SysTick_Config+0x44>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	210f      	movs	r1, #15
 8003540:	187b      	adds	r3, r7, r1
 8003542:	1c02      	adds	r2, r0, #0
 8003544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	187b      	adds	r3, r7, r1
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b25b      	sxtb	r3, r3
 800354e:	0011      	movs	r1, r2
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff ff5d 	bl	8003410 <__NVIC_SetPriority>
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b004      	add	sp, #16
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	0002      	movs	r2, r0
 8003566:	1dfb      	adds	r3, r7, #7
 8003568:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356a:	1dfb      	adds	r3, r7, #7
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b25b      	sxtb	r3, r3
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff ff33 	bl	80033dc <__NVIC_EnableIRQ>
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b002      	add	sp, #8
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	0018      	movs	r0, r3
 800358a:	f7ff ffaf 	bl	80034ec <SysTick_Config>
 800358e:	0003      	movs	r3, r0
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e077      	b.n	800369a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3d      	ldr	r2, [pc, #244]	; (80036a4 <HAL_DMA_Init+0x10c>)
 80035b0:	4694      	mov	ip, r2
 80035b2:	4463      	add	r3, ip
 80035b4:	2114      	movs	r1, #20
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fc fda4 	bl	8000104 <__udivsi3>
 80035bc:	0003      	movs	r3, r0
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2225      	movs	r2, #37	; 0x25
 80035c8:	2102      	movs	r1, #2
 80035ca:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4934      	ldr	r1, [pc, #208]	; (80036a8 <HAL_DMA_Init+0x110>)
 80035d8:	400a      	ands	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6819      	ldr	r1, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f971 	bl	80038fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	01db      	lsls	r3, r3, #7
 8003622:	429a      	cmp	r2, r3
 8003624:	d102      	bne.n	800362c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	213f      	movs	r1, #63	; 0x3f
 8003636:	400a      	ands	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003642:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d011      	beq.n	8003670 <HAL_DMA_Init+0xd8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d80d      	bhi.n	8003670 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f97c 	bl	8003954 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	e008      	b.n	8003682 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2225      	movs	r2, #37	; 0x25
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	0018      	movs	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	b002      	add	sp, #8
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	bffdfff8 	.word	0xbffdfff8
 80036a8:	ffff800f 	.word	0xffff800f

080036ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	210f      	movs	r1, #15
 80036b6:	187b      	adds	r3, r7, r1
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2225      	movs	r2, #37	; 0x25
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d006      	beq.n	80036d6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2204      	movs	r2, #4
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036ce:	187b      	adds	r3, r7, r1
 80036d0:	2201      	movs	r2, #1
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e049      	b.n	800376a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	210e      	movs	r1, #14
 80036e2:	438a      	bics	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	438a      	bics	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	491d      	ldr	r1, [pc, #116]	; (8003778 <HAL_DMA_Abort_IT+0xcc>)
 8003702:	400a      	ands	r2, r1
 8003704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_DMA_Abort_IT+0xd0>)
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	221c      	movs	r2, #28
 8003710:	4013      	ands	r3, r2
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	4b19      	ldr	r3, [pc, #100]	; (800377c <HAL_DMA_Abort_IT+0xd0>)
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003738:	490f      	ldr	r1, [pc, #60]	; (8003778 <HAL_DMA_Abort_IT+0xcc>)
 800373a:	400a      	ands	r2, r1
 800373c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2225      	movs	r2, #37	; 0x25
 800374c:	2101      	movs	r1, #1
 800374e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	0010      	movs	r0, r2
 8003768:	4798      	blx	r3
    }
  }
  return status;
 800376a:	230f      	movs	r3, #15
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	781b      	ldrb	r3, [r3, #0]
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}
 8003778:	fffffeff 	.word	0xfffffeff
 800377c:	40020000 	.word	0x40020000

08003780 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003788:	4b55      	ldr	r3, [pc, #340]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	221c      	movs	r2, #28
 800379c:	4013      	ands	r3, r2
 800379e:	2204      	movs	r2, #4
 80037a0:	409a      	lsls	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4013      	ands	r3, r2
 80037a8:	d027      	beq.n	80037fa <HAL_DMA_IRQHandler+0x7a>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2204      	movs	r2, #4
 80037ae:	4013      	ands	r3, r2
 80037b0:	d023      	beq.n	80037fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2220      	movs	r2, #32
 80037ba:	4013      	ands	r3, r2
 80037bc:	d107      	bne.n	80037ce <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2104      	movs	r1, #4
 80037ca:	438a      	bics	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80037ce:	4b44      	ldr	r3, [pc, #272]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	221c      	movs	r2, #28
 80037d8:	4013      	ands	r3, r2
 80037da:	2204      	movs	r2, #4
 80037dc:	409a      	lsls	r2, r3
 80037de:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d100      	bne.n	80037ee <HAL_DMA_IRQHandler+0x6e>
 80037ec:	e073      	b.n	80038d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	0010      	movs	r0, r2
 80037f6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80037f8:	e06d      	b.n	80038d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	221c      	movs	r2, #28
 8003800:	4013      	ands	r3, r2
 8003802:	2202      	movs	r2, #2
 8003804:	409a      	lsls	r2, r3
 8003806:	0013      	movs	r3, r2
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	d02e      	beq.n	800386c <HAL_DMA_IRQHandler+0xec>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2202      	movs	r2, #2
 8003812:	4013      	ands	r3, r2
 8003814:	d02a      	beq.n	800386c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2220      	movs	r2, #32
 800381e:	4013      	ands	r3, r2
 8003820:	d10b      	bne.n	800383a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	210a      	movs	r1, #10
 800382e:	438a      	bics	r2, r1
 8003830:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2225      	movs	r2, #37	; 0x25
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	221c      	movs	r2, #28
 8003844:	4013      	ands	r3, r2
 8003846:	2202      	movs	r2, #2
 8003848:	409a      	lsls	r2, r3
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 800384c:	430a      	orrs	r2, r1
 800384e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	2100      	movs	r1, #0
 8003856:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03a      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	0010      	movs	r0, r2
 8003868:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800386a:	e034      	b.n	80038d6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	221c      	movs	r2, #28
 8003872:	4013      	ands	r3, r2
 8003874:	2208      	movs	r2, #8
 8003876:	409a      	lsls	r2, r3
 8003878:	0013      	movs	r3, r2
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4013      	ands	r3, r2
 800387e:	d02b      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x158>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2208      	movs	r2, #8
 8003884:	4013      	ands	r3, r2
 8003886:	d027      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	210e      	movs	r1, #14
 8003894:	438a      	bics	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	221c      	movs	r2, #28
 80038a2:	4013      	ands	r3, r2
 80038a4:	2201      	movs	r2, #1
 80038a6:	409a      	lsls	r2, r3
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_DMA_IRQHandler+0x160>)
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2225      	movs	r2, #37	; 0x25
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	; 0x24
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	0010      	movs	r0, r2
 80038d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	46c0      	nop			; (mov r8, r8)
}
 80038da:	46bd      	mov	sp, r7
 80038dc:	b004      	add	sp, #16
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40020000 	.word	0x40020000

080038e4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2225      	movs	r2, #37	; 0x25
 80038f0:	5c9b      	ldrb	r3, [r3, r2]
 80038f2:	b2db      	uxtb	r3, r3
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}

080038fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800390c:	4694      	mov	ip, r2
 800390e:	4463      	add	r3, ip
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	001a      	movs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	001a      	movs	r2, r3
 800391e:	23ff      	movs	r3, #255	; 0xff
 8003920:	4013      	ands	r3, r2
 8003922:	3b08      	subs	r3, #8
 8003924:	2114      	movs	r1, #20
 8003926:	0018      	movs	r0, r3
 8003928:	f7fc fbec 	bl	8000104 <__udivsi3>
 800392c:	0003      	movs	r3, r0
 800392e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003934:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	221f      	movs	r2, #31
 800393a:	4013      	ands	r3, r2
 800393c:	2201      	movs	r2, #1
 800393e:	409a      	lsls	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}
 800394c:	10008200 	.word	0x10008200
 8003950:	40020880 	.word	0x40020880

08003954 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	223f      	movs	r2, #63	; 0x3f
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800396a:	4694      	mov	ip, r2
 800396c:	4463      	add	r3, ip
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	001a      	movs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800397a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3b01      	subs	r3, #1
 8003980:	2203      	movs	r2, #3
 8003982:	4013      	ands	r3, r2
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b004      	add	sp, #16
 8003992:	bd80      	pop	{r7, pc}
 8003994:	1000823f 	.word	0x1000823f
 8003998:	40020940 	.word	0x40020940

0800399c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039aa:	e147      	b.n	8003c3c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4091      	lsls	r1, r2
 80039b6:	000a      	movs	r2, r1
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d100      	bne.n	80039c4 <HAL_GPIO_Init+0x28>
 80039c2:	e138      	b.n	8003c36 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d00b      	beq.n	80039e4 <HAL_GPIO_Init+0x48>
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d007      	beq.n	80039e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d8:	2b11      	cmp	r3, #17
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b12      	cmp	r3, #18
 80039e2:	d130      	bne.n	8003a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	409a      	lsls	r2, r3
 80039f2:	0013      	movs	r3, r2
 80039f4:	43da      	mvns	r2, r3
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4013      	ands	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	409a      	lsls	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	0013      	movs	r3, r2
 8003a22:	43da      	mvns	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	2201      	movs	r2, #1
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
 8003a38:	0013      	movs	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	409a      	lsls	r2, r3
 8003a54:	0013      	movs	r3, r2
 8003a56:	43da      	mvns	r2, r3
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	409a      	lsls	r2, r3
 8003a68:	0013      	movs	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0xea>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b12      	cmp	r3, #18
 8003a84:	d123      	bne.n	8003ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	08da      	lsrs	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3208      	adds	r2, #8
 8003a8e:	0092      	lsls	r2, r2, #2
 8003a90:	58d3      	ldr	r3, [r2, r3]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2207      	movs	r2, #7
 8003a98:	4013      	ands	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2107      	movs	r1, #7
 8003ab2:	400b      	ands	r3, r1
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	0092      	lsls	r2, r2, #2
 8003aca:	6939      	ldr	r1, [r7, #16]
 8003acc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	2203      	movs	r2, #3
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	401a      	ands	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	0013      	movs	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	055b      	lsls	r3, r3, #21
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d100      	bne.n	8003b10 <HAL_GPIO_Init+0x174>
 8003b0e:	e092      	b.n	8003c36 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b10:	4a50      	ldr	r2, [pc, #320]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3318      	adds	r3, #24
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2203      	movs	r2, #3
 8003b22:	4013      	ands	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	220f      	movs	r2, #15
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	23a0      	movs	r3, #160	; 0xa0
 8003b38:	05db      	lsls	r3, r3, #23
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d013      	beq.n	8003b66 <HAL_GPIO_Init+0x1ca>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a45      	ldr	r2, [pc, #276]	; (8003c58 <HAL_GPIO_Init+0x2bc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00d      	beq.n	8003b62 <HAL_GPIO_Init+0x1c6>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a44      	ldr	r2, [pc, #272]	; (8003c5c <HAL_GPIO_Init+0x2c0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <HAL_GPIO_Init+0x1c2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a43      	ldr	r2, [pc, #268]	; (8003c60 <HAL_GPIO_Init+0x2c4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_GPIO_Init+0x1be>
 8003b56:	2303      	movs	r3, #3
 8003b58:	e006      	b.n	8003b68 <HAL_GPIO_Init+0x1cc>
 8003b5a:	2305      	movs	r3, #5
 8003b5c:	e004      	b.n	8003b68 <HAL_GPIO_Init+0x1cc>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_Init+0x1cc>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <HAL_GPIO_Init+0x1cc>
 8003b66:	2300      	movs	r3, #0
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	00d2      	lsls	r2, r2, #3
 8003b70:	4093      	lsls	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003b78:	4936      	ldr	r1, [pc, #216]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3318      	adds	r3, #24
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b86:	4a33      	ldr	r2, [pc, #204]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	58d3      	ldr	r3, [r2, r3]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	43da      	mvns	r2, r3
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	025b      	lsls	r3, r3, #9
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bac:	4929      	ldr	r1, [pc, #164]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003bb4:	4a27      	ldr	r2, [pc, #156]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003bb6:	2384      	movs	r3, #132	; 0x84
 8003bb8:	58d3      	ldr	r3, [r2, r3]
 8003bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	029b      	lsls	r3, r3, #10
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bda:	491e      	ldr	r1, [pc, #120]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003bdc:	2284      	movs	r2, #132	; 0x84
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003be2:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	43da      	mvns	r2, r3
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	035b      	lsls	r3, r3, #13
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43da      	mvns	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	039b      	lsls	r3, r3, #14
 8003c24:	4013      	ands	r3, r2
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_GPIO_Init+0x2b8>)
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	40da      	lsrs	r2, r3
 8003c44:	1e13      	subs	r3, r2, #0
 8003c46:	d000      	beq.n	8003c4a <HAL_GPIO_Init+0x2ae>
 8003c48:	e6b0      	b.n	80039ac <HAL_GPIO_Init+0x10>
  }
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021800 	.word	0x40021800
 8003c58:	50000400 	.word	0x50000400
 8003c5c:	50000800 	.word	0x50000800
 8003c60:	50000c00 	.word	0x50000c00

08003c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e082      	b.n	8003d7c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2241      	movs	r2, #65	; 0x41
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2240      	movs	r2, #64	; 0x40
 8003c86:	2100      	movs	r1, #0
 8003c88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7fe fd11 	bl	80026b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2241      	movs	r2, #65	; 0x41
 8003c96:	2124      	movs	r1, #36	; 0x24
 8003c98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	438a      	bics	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4934      	ldr	r1, [pc, #208]	; (8003d84 <HAL_I2C_Init+0x120>)
 8003cb4:	400a      	ands	r2, r1
 8003cb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4931      	ldr	r1, [pc, #196]	; (8003d88 <HAL_I2C_Init+0x124>)
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d108      	bne.n	8003ce2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	0209      	lsls	r1, r1, #8
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	e007      	b.n	8003cf2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2184      	movs	r1, #132	; 0x84
 8003cec:	0209      	lsls	r1, r1, #8
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d104      	bne.n	8003d04 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	491f      	ldr	r1, [pc, #124]	; (8003d8c <HAL_I2C_Init+0x128>)
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	491a      	ldr	r1, [pc, #104]	; (8003d88 <HAL_I2C_Init+0x124>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	0011      	movs	r1, r2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	021a      	lsls	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69d9      	ldr	r1, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2241      	movs	r2, #65	; 0x41
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2242      	movs	r2, #66	; 0x42
 8003d76:	2100      	movs	r1, #0
 8003d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	f0ffffff 	.word	0xf0ffffff
 8003d88:	ffff7fff 	.word	0xffff7fff
 8003d8c:	02008000 	.word	0x02008000

08003d90 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d005      	beq.n	8003dbc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
  }
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	b004      	add	sp, #16
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	001a      	movs	r2, r3
 8003de2:	2301      	movs	r3, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d010      	beq.n	8003e0a <HAL_I2C_ER_IRQHandler+0x46>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	09db      	lsrs	r3, r3, #7
 8003dec:	001a      	movs	r2, r3
 8003dee:	2301      	movs	r3, #1
 8003df0:	4013      	ands	r3, r2
 8003df2:	d00a      	beq.n	8003e0a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	2201      	movs	r2, #1
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	0052      	lsls	r2, r2, #1
 8003e08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	0a9b      	lsrs	r3, r3, #10
 8003e0e:	001a      	movs	r2, r3
 8003e10:	2301      	movs	r3, #1
 8003e12:	4013      	ands	r3, r2
 8003e14:	d010      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x74>
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	09db      	lsrs	r3, r3, #7
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d00a      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	2208      	movs	r2, #8
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	00d2      	lsls	r2, r2, #3
 8003e36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	0a5b      	lsrs	r3, r3, #9
 8003e3c:	001a      	movs	r2, r3
 8003e3e:	2301      	movs	r3, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	d010      	beq.n	8003e66 <HAL_I2C_ER_IRQHandler+0xa2>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	09db      	lsrs	r3, r3, #7
 8003e48:	001a      	movs	r2, r3
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d00a      	beq.n	8003e66 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	2202      	movs	r2, #2
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	0092      	lsls	r2, r2, #2
 8003e64:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	220b      	movs	r2, #11
 8003e70:	4013      	ands	r3, r2
 8003e72:	d005      	beq.n	8003e80 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0011      	movs	r1, r2
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 fbd8 	bl	8004630 <I2C_ITError>
  }
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b006      	add	sp, #24
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	0008      	movs	r0, r1
 8003eb2:	0011      	movs	r1, r2
 8003eb4:	1cfb      	adds	r3, r7, #3
 8003eb6:	1c02      	adds	r2, r0, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	003b      	movs	r3, r7
 8003ebc:	1c0a      	adds	r2, r1, #0
 8003ebe:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ec0:	46c0      	nop			; (mov r8, r8)
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	b002      	add	sp, #8
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b002      	add	sp, #8
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b002      	add	sp, #8
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2240      	movs	r2, #64	; 0x40
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <I2C_Slave_ISR_IT+0x24>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0fa      	b.n	8004112 <I2C_Slave_ISR_IT+0x21a>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	2101      	movs	r1, #1
 8003f22:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	001a      	movs	r2, r3
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <I2C_Slave_ISR_IT+0x50>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	001a      	movs	r2, r3
 8003f36:	2301      	movs	r3, #1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d005      	beq.n	8003f48 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	0011      	movs	r1, r2
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 f9f6 	bl	8004334 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	001a      	movs	r2, r3
 8003f4e:	2301      	movs	r3, #1
 8003f50:	4013      	ands	r3, r2
 8003f52:	d054      	beq.n	8003ffe <I2C_Slave_ISR_IT+0x106>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	091b      	lsrs	r3, r3, #4
 8003f58:	001a      	movs	r2, r3
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d04e      	beq.n	8003ffe <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12d      	bne.n	8003fc6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2241      	movs	r2, #65	; 0x41
 8003f6e:	5c9b      	ldrb	r3, [r3, r2]
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b28      	cmp	r3, #40	; 0x28
 8003f74:	d10b      	bne.n	8003f8e <I2C_Slave_ISR_IT+0x96>
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	049b      	lsls	r3, r3, #18
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d106      	bne.n	8003f8e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	0011      	movs	r1, r2
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 faf8 	bl	800457c <I2C_ITListenCplt>
 8003f8c:	e036      	b.n	8003ffc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2241      	movs	r2, #65	; 0x41
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b29      	cmp	r3, #41	; 0x29
 8003f98:	d110      	bne.n	8003fbc <I2C_Slave_ISR_IT+0xc4>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4a5f      	ldr	r2, [pc, #380]	; (800411c <I2C_Slave_ISR_IT+0x224>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00c      	beq.n	8003fbc <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2210      	movs	r2, #16
 8003fa8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 fc4a 	bl	8004846 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 f957 	bl	8004268 <I2C_ITSlaveSeqCplt>
 8003fba:	e01f      	b.n	8003ffc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2210      	movs	r2, #16
 8003fc2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003fc4:	e09d      	b.n	8004102 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2210      	movs	r2, #16
 8003fcc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <I2C_Slave_ISR_IT+0xf4>
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	045b      	lsls	r3, r3, #17
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d000      	beq.n	8003fec <I2C_Slave_ISR_IT+0xf4>
 8003fea:	e08a      	b.n	8004102 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 fb1b 	bl	8004630 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ffa:	e082      	b.n	8004102 <I2C_Slave_ISR_IT+0x20a>
 8003ffc:	e081      	b.n	8004102 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	089b      	lsrs	r3, r3, #2
 8004002:	001a      	movs	r2, r3
 8004004:	2301      	movs	r3, #1
 8004006:	4013      	ands	r3, r2
 8004008:	d031      	beq.n	800406e <I2C_Slave_ISR_IT+0x176>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	001a      	movs	r2, r3
 8004010:	2301      	movs	r3, #1
 8004012:	4013      	ands	r3, r2
 8004014:	d02b      	beq.n	800406e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d154      	bne.n	8004106 <I2C_Slave_ISR_IT+0x20e>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <I2C_Slave_ISR_IT+0x224>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d050      	beq.n	8004106 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f8fe 	bl	8004268 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800406c:	e04b      	b.n	8004106 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	001a      	movs	r2, r3
 8004074:	2301      	movs	r3, #1
 8004076:	4013      	ands	r3, r2
 8004078:	d00c      	beq.n	8004094 <I2C_Slave_ISR_IT+0x19c>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	001a      	movs	r2, r3
 8004080:	2301      	movs	r3, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d006      	beq.n	8004094 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	0011      	movs	r1, r2
 800408c:	0018      	movs	r0, r3
 800408e:	f000 f847 	bl	8004120 <I2C_ITAddrCplt>
 8004092:	e039      	b.n	8004108 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	001a      	movs	r2, r3
 800409a:	2301      	movs	r3, #1
 800409c:	4013      	ands	r3, r2
 800409e:	d033      	beq.n	8004108 <I2C_Slave_ISR_IT+0x210>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	001a      	movs	r2, r3
 80040a6:	2301      	movs	r3, #1
 80040a8:	4013      	ands	r3, r2
 80040aa:	d02d      	beq.n	8004108 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	781a      	ldrb	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80040e6:	e00f      	b.n	8004108 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	045b      	lsls	r3, r3, #17
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d002      	beq.n	80040f8 <I2C_Slave_ISR_IT+0x200>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 f8b4 	bl	8004268 <I2C_ITSlaveSeqCplt>
 8004100:	e002      	b.n	8004108 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	e000      	b.n	8004108 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004106:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2240      	movs	r2, #64	; 0x40
 800410c:	2100      	movs	r1, #0
 800410e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	0018      	movs	r0, r3
 8004114:	46bd      	mov	sp, r7
 8004116:	b006      	add	sp, #24
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	ffff0000 	.word	0xffff0000

08004120 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004120:	b5b0      	push	{r4, r5, r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2241      	movs	r2, #65	; 0x41
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	001a      	movs	r2, r3
 8004134:	2328      	movs	r3, #40	; 0x28
 8004136:	4013      	ands	r3, r2
 8004138:	2b28      	cmp	r3, #40	; 0x28
 800413a:	d000      	beq.n	800413e <I2C_ITAddrCplt+0x1e>
 800413c:	e088      	b.n	8004250 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	b2da      	uxtb	r2, r3
 8004148:	250f      	movs	r5, #15
 800414a:	197b      	adds	r3, r7, r5
 800414c:	2101      	movs	r1, #1
 800414e:	400a      	ands	r2, r1
 8004150:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	b29a      	uxth	r2, r3
 800415c:	200c      	movs	r0, #12
 800415e:	183b      	adds	r3, r7, r0
 8004160:	21fe      	movs	r1, #254	; 0xfe
 8004162:	400a      	ands	r2, r1
 8004164:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	b29a      	uxth	r2, r3
 800416e:	240a      	movs	r4, #10
 8004170:	193b      	adds	r3, r7, r4
 8004172:	0592      	lsls	r2, r2, #22
 8004174:	0d92      	lsrs	r2, r2, #22
 8004176:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	b29a      	uxth	r2, r3
 8004180:	2308      	movs	r3, #8
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	21fe      	movs	r1, #254	; 0xfe
 8004186:	400a      	ands	r2, r1
 8004188:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d148      	bne.n	8004224 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004192:	0021      	movs	r1, r4
 8004194:	187b      	adds	r3, r7, r1
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	09db      	lsrs	r3, r3, #7
 800419a:	b29a      	uxth	r2, r3
 800419c:	183b      	adds	r3, r7, r0
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	4053      	eors	r3, r2
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	001a      	movs	r2, r3
 80041a6:	2306      	movs	r3, #6
 80041a8:	4013      	ands	r3, r2
 80041aa:	d120      	bne.n	80041ee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80041ac:	183b      	adds	r3, r7, r0
 80041ae:	187a      	adds	r2, r7, r1
 80041b0:	8812      	ldrh	r2, [r2, #0]
 80041b2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d14c      	bne.n	8004260 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2208      	movs	r2, #8
 80041d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2240      	movs	r2, #64	; 0x40
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	197b      	adds	r3, r7, r5
 80041e2:	7819      	ldrb	r1, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7ff fe5e 	bl	8003ea8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041ec:	e038      	b.n	8004260 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80041ee:	240c      	movs	r4, #12
 80041f0:	193b      	adds	r3, r7, r4
 80041f2:	2208      	movs	r2, #8
 80041f4:	18ba      	adds	r2, r7, r2
 80041f6:	8812      	ldrh	r2, [r2, #0]
 80041f8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	021a      	lsls	r2, r3, #8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0011      	movs	r1, r2
 8004202:	0018      	movs	r0, r3
 8004204:	f000 fb60 	bl	80048c8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2240      	movs	r2, #64	; 0x40
 800420c:	2100      	movs	r1, #0
 800420e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004210:	193b      	adds	r3, r7, r4
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	230f      	movs	r3, #15
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	7819      	ldrb	r1, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0018      	movs	r0, r3
 800421e:	f7ff fe43 	bl	8003ea8 <HAL_I2C_AddrCallback>
}
 8004222:	e01d      	b.n	8004260 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0011      	movs	r1, r2
 800422c:	0018      	movs	r0, r3
 800422e:	f000 fb4b 	bl	80048c8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2240      	movs	r2, #64	; 0x40
 8004236:	2100      	movs	r1, #0
 8004238:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800423a:	230c      	movs	r3, #12
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	230f      	movs	r3, #15
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	7819      	ldrb	r1, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	0018      	movs	r0, r3
 800424a:	f7ff fe2d 	bl	8003ea8 <HAL_I2C_AddrCallback>
}
 800424e:	e007      	b.n	8004260 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2208      	movs	r2, #8
 8004256:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bdb0      	pop	{r4, r5, r7, pc}

08004268 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2242      	movs	r2, #66	; 0x42
 800427c:	2100      	movs	r1, #0
 800427e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	0b9b      	lsrs	r3, r3, #14
 8004284:	001a      	movs	r2, r3
 8004286:	2301      	movs	r3, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d008      	beq.n	800429e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4925      	ldr	r1, [pc, #148]	; (800432c <I2C_ITSlaveSeqCplt+0xc4>)
 8004298:	400a      	ands	r2, r1
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e00d      	b.n	80042ba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	0bdb      	lsrs	r3, r3, #15
 80042a2:	001a      	movs	r2, r3
 80042a4:	2301      	movs	r3, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	d007      	beq.n	80042ba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	491e      	ldr	r1, [pc, #120]	; (8004330 <I2C_ITSlaveSeqCplt+0xc8>)
 80042b6:	400a      	ands	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2241      	movs	r2, #65	; 0x41
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b29      	cmp	r3, #41	; 0x29
 80042c4:	d114      	bne.n	80042f0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2241      	movs	r2, #65	; 0x41
 80042ca:	2128      	movs	r1, #40	; 0x28
 80042cc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2221      	movs	r2, #33	; 0x21
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2101      	movs	r1, #1
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 faf5 	bl	80048c8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2240      	movs	r2, #64	; 0x40
 80042e2:	2100      	movs	r1, #0
 80042e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f7ff fdcd 	bl	8003e88 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042ee:	e019      	b.n	8004324 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2241      	movs	r2, #65	; 0x41
 80042f4:	5c9b      	ldrb	r3, [r3, r2]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b2a      	cmp	r3, #42	; 0x2a
 80042fa:	d113      	bne.n	8004324 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2241      	movs	r2, #65	; 0x41
 8004300:	2128      	movs	r1, #40	; 0x28
 8004302:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2222      	movs	r2, #34	; 0x22
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2102      	movs	r1, #2
 800430e:	0018      	movs	r0, r3
 8004310:	f000 fada 	bl	80048c8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	2100      	movs	r1, #0
 800431a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff fdba 	bl	8003e98 <HAL_I2C_SlaveRxCpltCallback>
}
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	ffffbfff 	.word	0xffffbfff
 8004330:	ffff7fff 	.word	0xffff7fff

08004334 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800434a:	200f      	movs	r0, #15
 800434c:	183b      	adds	r3, r7, r0
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	2141      	movs	r1, #65	; 0x41
 8004352:	5c52      	ldrb	r2, [r2, r1]
 8004354:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2220      	movs	r2, #32
 800435c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800435e:	183b      	adds	r3, r7, r0
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b21      	cmp	r3, #33	; 0x21
 8004364:	d003      	beq.n	800436e <I2C_ITSlaveCplt+0x3a>
 8004366:	183b      	adds	r3, r7, r0
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b29      	cmp	r3, #41	; 0x29
 800436c:	d109      	bne.n	8004382 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800436e:	4a7d      	ldr	r2, [pc, #500]	; (8004564 <I2C_ITSlaveCplt+0x230>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0011      	movs	r1, r2
 8004374:	0018      	movs	r0, r3
 8004376:	f000 faa7 	bl	80048c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
 8004380:	e011      	b.n	80043a6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004382:	220f      	movs	r2, #15
 8004384:	18bb      	adds	r3, r7, r2
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b22      	cmp	r3, #34	; 0x22
 800438a:	d003      	beq.n	8004394 <I2C_ITSlaveCplt+0x60>
 800438c:	18bb      	adds	r3, r7, r2
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b2a      	cmp	r3, #42	; 0x2a
 8004392:	d108      	bne.n	80043a6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004394:	4a74      	ldr	r2, [pc, #464]	; (8004568 <I2C_ITSlaveCplt+0x234>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0011      	movs	r1, r2
 800439a:	0018      	movs	r0, r3
 800439c:	f000 fa94 	bl	80048c8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2222      	movs	r2, #34	; 0x22
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	0209      	lsls	r1, r1, #8
 80043b4:	430a      	orrs	r2, r1
 80043b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	496a      	ldr	r1, [pc, #424]	; (800456c <I2C_ITSlaveCplt+0x238>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 fa3b 	bl	8004846 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	0b9b      	lsrs	r3, r3, #14
 80043d4:	001a      	movs	r2, r3
 80043d6:	2301      	movs	r3, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d013      	beq.n	8004404 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4962      	ldr	r1, [pc, #392]	; (8004570 <I2C_ITSlaveCplt+0x23c>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004402:	e018      	b.n	8004436 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	0bdb      	lsrs	r3, r3, #15
 8004408:	001a      	movs	r2, r3
 800440a:	2301      	movs	r3, #1
 800440c:	4013      	ands	r3, r2
 800440e:	d012      	beq.n	8004436 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4956      	ldr	r1, [pc, #344]	; (8004574 <I2C_ITSlaveCplt+0x240>)
 800441c:	400a      	ands	r2, r1
 800441e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	089b      	lsrs	r3, r3, #2
 800443a:	001a      	movs	r2, r3
 800443c:	2301      	movs	r3, #1
 800443e:	4013      	ands	r3, r2
 8004440:	d020      	beq.n	8004484 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2204      	movs	r2, #4
 8004446:	4393      	bics	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d005      	beq.n	800449a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	2204      	movs	r2, #4
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2242      	movs	r2, #66	; 0x42
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0011      	movs	r1, r2
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 f8b9 	bl	8004630 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2241      	movs	r2, #65	; 0x41
 80044c2:	5c9b      	ldrb	r3, [r3, r2]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b28      	cmp	r3, #40	; 0x28
 80044c8:	d147      	bne.n	800455a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	0011      	movs	r1, r2
 80044d0:	0018      	movs	r0, r3
 80044d2:	f000 f853 	bl	800457c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044d6:	e040      	b.n	800455a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a26      	ldr	r2, [pc, #152]	; (8004578 <I2C_ITSlaveCplt+0x244>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d016      	beq.n	8004510 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff febf 	bl	8004268 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a22      	ldr	r2, [pc, #136]	; (8004578 <I2C_ITSlaveCplt+0x244>)
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2241      	movs	r2, #65	; 0x41
 80044f4:	2120      	movs	r1, #32
 80044f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2240      	movs	r2, #64	; 0x40
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f7ff fcdd 	bl	8003ec8 <HAL_I2C_ListenCpltCallback>
}
 800450e:	e024      	b.n	800455a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2241      	movs	r2, #65	; 0x41
 8004514:	5c9b      	ldrb	r3, [r3, r2]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b22      	cmp	r3, #34	; 0x22
 800451a:	d10f      	bne.n	800453c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2241      	movs	r2, #65	; 0x41
 8004520:	2120      	movs	r1, #32
 8004522:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2240      	movs	r2, #64	; 0x40
 800452e:	2100      	movs	r1, #0
 8004530:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	0018      	movs	r0, r3
 8004536:	f7ff fcaf 	bl	8003e98 <HAL_I2C_SlaveRxCpltCallback>
}
 800453a:	e00e      	b.n	800455a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2241      	movs	r2, #65	; 0x41
 8004540:	2120      	movs	r1, #32
 8004542:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2240      	movs	r2, #64	; 0x40
 800454e:	2100      	movs	r1, #0
 8004550:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	0018      	movs	r0, r3
 8004556:	f7ff fc97 	bl	8003e88 <HAL_I2C_SlaveTxCpltCallback>
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	00008001 	.word	0x00008001
 8004568:	00008002 	.word	0x00008002
 800456c:	fe00e800 	.word	0xfe00e800
 8004570:	ffffbfff 	.word	0xffffbfff
 8004574:	ffff7fff 	.word	0xffff7fff
 8004578:	ffff0000 	.word	0xffff0000

0800457c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <I2C_ITListenCplt+0xac>)
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2241      	movs	r2, #65	; 0x41
 8004596:	2120      	movs	r1, #32
 8004598:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2242      	movs	r2, #66	; 0x42
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	001a      	movs	r2, r3
 80045ae:	2301      	movs	r3, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	d022      	beq.n	80045fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d012      	beq.n	80045fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	2204      	movs	r2, #4
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <I2C_ITListenCplt+0xb0>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	0011      	movs	r1, r2
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f961 	bl	80048c8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2210      	movs	r2, #16
 800460c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2240      	movs	r2, #64	; 0x40
 8004612:	2100      	movs	r1, #0
 8004614:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff fc55 	bl	8003ec8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b002      	add	sp, #8
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	ffff0000 	.word	0xffff0000
 800462c:	00008003 	.word	0x00008003

08004630 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800463a:	200f      	movs	r0, #15
 800463c:	183b      	adds	r3, r7, r0
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	2141      	movs	r1, #65	; 0x41
 8004642:	5c52      	ldrb	r2, [r2, r1]
 8004644:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2242      	movs	r2, #66	; 0x42
 800464a:	2100      	movs	r1, #0
 800464c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a62      	ldr	r2, [pc, #392]	; (80047dc <I2C_ITError+0x1ac>)
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004666:	183b      	adds	r3, r7, r0
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b28      	cmp	r3, #40	; 0x28
 800466c:	d007      	beq.n	800467e <I2C_ITError+0x4e>
 800466e:	183b      	adds	r3, r7, r0
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b29      	cmp	r3, #41	; 0x29
 8004674:	d003      	beq.n	800467e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004676:	183b      	adds	r3, r7, r0
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b2a      	cmp	r3, #42	; 0x2a
 800467c:	d10c      	bne.n	8004698 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2103      	movs	r1, #3
 8004682:	0018      	movs	r0, r3
 8004684:	f000 f920 	bl	80048c8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2241      	movs	r2, #65	; 0x41
 800468c:	2128      	movs	r1, #40	; 0x28
 800468e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a53      	ldr	r2, [pc, #332]	; (80047e0 <I2C_ITError+0x1b0>)
 8004694:	635a      	str	r2, [r3, #52]	; 0x34
 8004696:	e012      	b.n	80046be <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <I2C_ITError+0x1b4>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0011      	movs	r1, r2
 800469e:	0018      	movs	r0, r3
 80046a0:	f000 f912 	bl	80048c8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2241      	movs	r2, #65	; 0x41
 80046a8:	5c9b      	ldrb	r3, [r3, r2]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d003      	beq.n	80046b8 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2241      	movs	r2, #65	; 0x41
 80046b4:	2120      	movs	r1, #32
 80046b6:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d03b      	beq.n	8004744 <I2C_ITError+0x114>
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b11      	cmp	r3, #17
 80046d0:	d002      	beq.n	80046d8 <I2C_ITError+0xa8>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b21      	cmp	r3, #33	; 0x21
 80046d6:	d135      	bne.n	8004744 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	01db      	lsls	r3, r3, #7
 80046e2:	401a      	ands	r2, r3
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	01db      	lsls	r3, r3, #7
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d107      	bne.n	80046fc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	493c      	ldr	r1, [pc, #240]	; (80047e8 <I2C_ITError+0x1b8>)
 80046f8:	400a      	ands	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff f8ef 	bl	80038e4 <HAL_DMA_GetState>
 8004706:	0003      	movs	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d016      	beq.n	800473a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	4a36      	ldr	r2, [pc, #216]	; (80047ec <I2C_ITError+0x1bc>)
 8004712:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2240      	movs	r2, #64	; 0x40
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	0018      	movs	r0, r3
 8004722:	f7fe ffc3 	bl	80036ac <HAL_DMA_Abort_IT>
 8004726:	1e03      	subs	r3, r0, #0
 8004728:	d051      	beq.n	80047ce <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	0018      	movs	r0, r3
 8004736:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004738:	e049      	b.n	80047ce <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f000 f859 	bl	80047f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004742:	e044      	b.n	80047ce <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03b      	beq.n	80047c4 <I2C_ITError+0x194>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b12      	cmp	r3, #18
 8004750:	d002      	beq.n	8004758 <I2C_ITError+0x128>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b22      	cmp	r3, #34	; 0x22
 8004756:	d135      	bne.n	80047c4 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	401a      	ands	r2, r3
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	429a      	cmp	r2, r3
 800476a:	d107      	bne.n	800477c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	491e      	ldr	r1, [pc, #120]	; (80047f0 <I2C_ITError+0x1c0>)
 8004778:	400a      	ands	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	0018      	movs	r0, r3
 8004782:	f7ff f8af 	bl	80038e4 <HAL_DMA_GetState>
 8004786:	0003      	movs	r3, r0
 8004788:	2b01      	cmp	r3, #1
 800478a:	d016      	beq.n	80047ba <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	4a16      	ldr	r2, [pc, #88]	; (80047ec <I2C_ITError+0x1bc>)
 8004792:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2240      	movs	r2, #64	; 0x40
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fe ff83 	bl	80036ac <HAL_DMA_Abort_IT>
 80047a6:	1e03      	subs	r3, r0, #0
 80047a8:	d013      	beq.n	80047d2 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	0018      	movs	r0, r3
 80047b6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047b8:	e00b      	b.n	80047d2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 f819 	bl	80047f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047c2:	e006      	b.n	80047d2 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 f814 	bl	80047f4 <I2C_TreatErrorCallback>
  }
}
 80047cc:	e002      	b.n	80047d4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	e000      	b.n	80047d4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047d2:	46c0      	nop			; (mov r8, r8)
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	ffff0000 	.word	0xffff0000
 80047e0:	08003ef9 	.word	0x08003ef9
 80047e4:	00008003 	.word	0x00008003
 80047e8:	ffffbfff 	.word	0xffffbfff
 80047ec:	0800488b 	.word	0x0800488b
 80047f0:	ffff7fff 	.word	0xffff7fff

080047f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2241      	movs	r2, #65	; 0x41
 8004800:	5c9b      	ldrb	r3, [r3, r2]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d10f      	bne.n	8004828 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2241      	movs	r2, #65	; 0x41
 800480c:	2120      	movs	r1, #32
 800480e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2240      	movs	r2, #64	; 0x40
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7ff fb61 	bl	8003ee8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004826:	e00a      	b.n	800483e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2240      	movs	r2, #64	; 0x40
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff fb4d 	bl	8003ed8 <HAL_I2C_ErrorCallback>
}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}

08004846 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2202      	movs	r2, #2
 8004856:	4013      	ands	r3, r2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d103      	bne.n	8004864 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2200      	movs	r2, #0
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2201      	movs	r2, #1
 800486c:	4013      	ands	r3, r2
 800486e:	2b01      	cmp	r3, #1
 8004870:	d007      	beq.n	8004882 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	430a      	orrs	r2, r1
 8004880:	619a      	str	r2, [r3, #24]
  }
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b002      	add	sp, #8
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	2200      	movs	r2, #0
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	2200      	movs	r2, #0
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	0018      	movs	r0, r3
 80048bc:	f7ff ff9a 	bl	80047f4 <I2C_TreatErrorCallback>
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b004      	add	sp, #16
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	000a      	movs	r2, r1
 80048d2:	1cbb      	adds	r3, r7, #2
 80048d4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80048da:	1cbb      	adds	r3, r7, #2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d010      	beq.n	8004906 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2242      	movs	r2, #66	; 0x42
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2241      	movs	r2, #65	; 0x41
 80048f0:	5c9b      	ldrb	r3, [r3, r2]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	001a      	movs	r2, r3
 80048f6:	2328      	movs	r3, #40	; 0x28
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b28      	cmp	r3, #40	; 0x28
 80048fc:	d003      	beq.n	8004906 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	22b0      	movs	r2, #176	; 0xb0
 8004902:	4313      	orrs	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004906:	1cbb      	adds	r3, r7, #2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	2202      	movs	r2, #2
 800490c:	4013      	ands	r3, r2
 800490e:	d010      	beq.n	8004932 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2244      	movs	r2, #68	; 0x44
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2241      	movs	r2, #65	; 0x41
 800491c:	5c9b      	ldrb	r3, [r3, r2]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	001a      	movs	r2, r3
 8004922:	2328      	movs	r3, #40	; 0x28
 8004924:	4013      	ands	r3, r2
 8004926:	2b28      	cmp	r3, #40	; 0x28
 8004928:	d003      	beq.n	8004932 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	22b0      	movs	r2, #176	; 0xb0
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004932:	1cbb      	adds	r3, r7, #2
 8004934:	2200      	movs	r2, #0
 8004936:	5e9b      	ldrsh	r3, [r3, r2]
 8004938:	2b00      	cmp	r3, #0
 800493a:	da03      	bge.n	8004944 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	22b8      	movs	r2, #184	; 0xb8
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004944:	1cbb      	adds	r3, r7, #2
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	2b10      	cmp	r3, #16
 800494a:	d103      	bne.n	8004954 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2290      	movs	r2, #144	; 0x90
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004954:	1cbb      	adds	r3, r7, #2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	2b20      	cmp	r3, #32
 800495a:	d103      	bne.n	8004964 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004964:	1cbb      	adds	r3, r7, #2
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	2b40      	cmp	r3, #64	; 0x40
 800496a:	d103      	bne.n	8004974 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	43d9      	mvns	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	400a      	ands	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2241      	movs	r2, #65	; 0x41
 800499e:	5c9b      	ldrb	r3, [r3, r2]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d138      	bne.n	8004a18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	5c9b      	ldrb	r3, [r3, r2]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e032      	b.n	8004a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2240      	movs	r2, #64	; 0x40
 80049b8:	2101      	movs	r1, #1
 80049ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2241      	movs	r2, #65	; 0x41
 80049c0:	2124      	movs	r1, #36	; 0x24
 80049c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4911      	ldr	r1, [pc, #68]	; (8004a24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80049e0:	400a      	ands	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6819      	ldr	r1, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2101      	movs	r1, #1
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2241      	movs	r2, #65	; 0x41
 8004a08:	2120      	movs	r1, #32
 8004a0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2240      	movs	r2, #64	; 0x40
 8004a10:	2100      	movs	r1, #0
 8004a12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	ffffefff 	.word	0xffffefff

08004a28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2241      	movs	r2, #65	; 0x41
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d139      	bne.n	8004ab2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2240      	movs	r2, #64	; 0x40
 8004a42:	5c9b      	ldrb	r3, [r3, r2]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e033      	b.n	8004ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	2101      	movs	r1, #1
 8004a52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2241      	movs	r2, #65	; 0x41
 8004a58:	2124      	movs	r1, #36	; 0x24
 8004a5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2101      	movs	r1, #1
 8004a68:	438a      	bics	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2101      	movs	r1, #1
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2241      	movs	r2, #65	; 0x41
 8004aa2:	2120      	movs	r1, #32
 8004aa4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2240      	movs	r2, #64	; 0x40
 8004aaa:	2100      	movs	r1, #0
 8004aac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b004      	add	sp, #16
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	fffff0ff 	.word	0xfffff0ff

08004ac0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0e5      	b.n	8004c9e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2235      	movs	r2, #53	; 0x35
 8004ad6:	5c9b      	ldrb	r3, [r3, r2]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2234      	movs	r2, #52	; 0x34
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fd fe37 	bl	800275c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2235      	movs	r2, #53	; 0x35
 8004af2:	2102      	movs	r1, #2
 8004af4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4969      	ldr	r1, [pc, #420]	; (8004ca8 <HAL_I2S_Init+0x1e8>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d100      	bne.n	8004b18 <HAL_I2S_Init+0x58>
 8004b16:	e076      	b.n	8004c06 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b20:	2310      	movs	r3, #16
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e001      	b.n	8004b2a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b26:	2320      	movs	r3, #32
 8004b28:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d802      	bhi.n	8004b38 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004b38:	2380      	movs	r3, #128	; 0x80
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f001 f865 	bl	8005c0c <HAL_RCCEx_GetPeriphCLKFreq>
 8004b42:	0003      	movs	r3, r0
 8004b44:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d131      	bne.n	8004bb6 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	0019      	movs	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7fb facf 	bl	8000104 <__udivsi3>
 8004b66:	0003      	movs	r3, r0
 8004b68:	001a      	movs	r2, r3
 8004b6a:	0013      	movs	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	001a      	movs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	0019      	movs	r1, r3
 8004b7a:	0010      	movs	r0, r2
 8004b7c:	f7fb fac2 	bl	8000104 <__udivsi3>
 8004b80:	0003      	movs	r3, r0
 8004b82:	3305      	adds	r3, #5
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	e02a      	b.n	8004bde <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7fb fab8 	bl	8000104 <__udivsi3>
 8004b94:	0003      	movs	r3, r0
 8004b96:	001a      	movs	r2, r3
 8004b98:	0013      	movs	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	001a      	movs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	0010      	movs	r0, r2
 8004baa:	f7fb faab 	bl	8000104 <__udivsi3>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	3305      	adds	r3, #5
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	e013      	b.n	8004bde <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bb6:	6979      	ldr	r1, [r7, #20]
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7fb faa3 	bl	8000104 <__udivsi3>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	0013      	movs	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	189b      	adds	r3, r3, r2
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	001a      	movs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	0010      	movs	r0, r2
 8004bd4:	f7fb fa96 	bl	8000104 <__udivsi3>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	3305      	adds	r3, #5
 8004bdc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	210a      	movs	r1, #10
 8004be2:	0018      	movs	r0, r3
 8004be4:	f7fb fa8e 	bl	8000104 <__udivsi3>
 8004be8:	0003      	movs	r3, r0
 8004bea:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	085b      	lsrs	r3, r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	e003      	b.n	8004c0e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c06:	2302      	movs	r3, #2
 8004c08:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d902      	bls.n	8004c1a <HAL_I2S_Init+0x15a>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2bff      	cmp	r3, #255	; 0xff
 8004c18:	d907      	bls.n	8004c2a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	2210      	movs	r2, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e039      	b.n	8004c9e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691a      	ldr	r2, [r3, #16]
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	0011      	movs	r1, r2
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_I2S_Init+0x1e8>)
 8004c46:	401a      	ands	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6859      	ldr	r1, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4319      	orrs	r1, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4319      	orrs	r1, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2180      	movs	r1, #128	; 0x80
 8004c66:	0109      	lsls	r1, r1, #4
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b30      	cmp	r3, #48	; 0x30
 8004c72:	d003      	beq.n	8004c7c <HAL_I2S_Init+0x1bc>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2bb0      	cmp	r3, #176	; 0xb0
 8004c7a:	d108      	bne.n	8004c8e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	0149      	lsls	r1, r1, #5
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2235      	movs	r2, #53	; 0x35
 8004c98:	2101      	movs	r1, #1
 8004c9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	0018      	movs	r0, r3
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b008      	add	sp, #32
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	fffff040 	.word	0xfffff040

08004cac <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	001a      	movs	r2, r3
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d10e      	bne.n	8004cee <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004cd6:	d00a      	beq.n	8004cee <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	099b      	lsrs	r3, r3, #6
 8004cdc:	001a      	movs	r2, r3
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d004      	beq.n	8004cee <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 f892 	bl	8004e10 <I2S_Receive_IT>
    return;
 8004cec:	e046      	b.n	8004d7c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	085b      	lsrs	r3, r3, #1
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d00a      	beq.n	8004d10 <HAL_I2S_IRQHandler+0x64>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	001a      	movs	r2, r3
 8004d00:	2301      	movs	r3, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	d004      	beq.n	8004d10 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 f852 	bl	8004db2 <I2S_Transmit_IT>
    return;
 8004d0e:	e035      	b.n	8004d7c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	001a      	movs	r2, r3
 8004d16:	2301      	movs	r3, #1
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d02f      	beq.n	8004d7c <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	099b      	lsrs	r3, r3, #6
 8004d20:	001a      	movs	r2, r3
 8004d22:	2301      	movs	r3, #1
 8004d24:	4013      	ands	r3, r2
 8004d26:	d00d      	beq.n	8004d44 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2160      	movs	r1, #96	; 0x60
 8004d34:	438a      	bics	r2, r1
 8004d36:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	08db      	lsrs	r3, r3, #3
 8004d48:	001a      	movs	r2, r3
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d00d      	beq.n	8004d6c <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	21a0      	movs	r1, #160	; 0xa0
 8004d5c:	438a      	bics	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	2204      	movs	r2, #4
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2235      	movs	r2, #53	; 0x35
 8004d70:	2101      	movs	r1, #1
 8004d72:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f000 f813 	bl	8004da2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	b002      	add	sp, #8
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b002      	add	sp, #8
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	881a      	ldrh	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	1c9a      	adds	r2, r3, #2
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10f      	bne.n	8004e08 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	21a0      	movs	r1, #160	; 0xa0
 8004df4:	438a      	bics	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2235      	movs	r2, #53	; 0x35
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7ff ffbd 	bl	8004d82 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b292      	uxth	r2, r2
 8004e24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c9a      	adds	r2, r3, #2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10f      	bne.n	8004e68 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2160      	movs	r1, #96	; 0x60
 8004e54:	438a      	bics	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2235      	movs	r2, #53	; 0x35
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff ff95 	bl	8004d92 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b002      	add	sp, #8
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e78:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d11f      	bne.n	8004ed4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	0013      	movs	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	189b      	adds	r3, r3, r2
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	4912      	ldr	r1, [pc, #72]	; (8004eec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f7fb f92e 	bl	8000104 <__udivsi3>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eae:	e008      	b.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e001      	b.n	8004ec2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e009      	b.n	8004ed6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	401a      	ands	r2, r3
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d0ed      	beq.n	8004eb0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b004      	add	sp, #16
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	40007000 	.word	0x40007000
 8004ee4:	fffff9ff 	.word	0xfffff9ff
 8004ee8:	20005134 	.word	0x20005134
 8004eec:	000f4240 	.word	0x000f4240

08004ef0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004ef4:	4b03      	ldr	r3, [pc, #12]	; (8004f04 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	23e0      	movs	r3, #224	; 0xe0
 8004efa:	01db      	lsls	r3, r3, #7
 8004efc:	4013      	ands	r3, r2
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000

08004f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e304      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4013      	ands	r3, r2
 8004f22:	d100      	bne.n	8004f26 <HAL_RCC_OscConfig+0x1e>
 8004f24:	e07c      	b.n	8005020 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f26:	4bc3      	ldr	r3, [pc, #780]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2238      	movs	r2, #56	; 0x38
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f30:	4bc0      	ldr	r3, [pc, #768]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2203      	movs	r2, #3
 8004f36:	4013      	ands	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCC_OscConfig+0x3e>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d002      	beq.n	8004f4c <HAL_RCC_OscConfig+0x44>
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d10b      	bne.n	8004f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	4bb9      	ldr	r3, [pc, #740]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	029b      	lsls	r3, r3, #10
 8004f54:	4013      	ands	r3, r2
 8004f56:	d062      	beq.n	800501e <HAL_RCC_OscConfig+0x116>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d15e      	bne.n	800501e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e2df      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	025b      	lsls	r3, r3, #9
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d107      	bne.n	8004f80 <HAL_RCC_OscConfig+0x78>
 8004f70:	4bb0      	ldr	r3, [pc, #704]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4baf      	ldr	r3, [pc, #700]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f76:	2180      	movs	r1, #128	; 0x80
 8004f78:	0249      	lsls	r1, r1, #9
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e020      	b.n	8004fc2 <HAL_RCC_OscConfig+0xba>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	23a0      	movs	r3, #160	; 0xa0
 8004f86:	02db      	lsls	r3, r3, #11
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d10e      	bne.n	8004faa <HAL_RCC_OscConfig+0xa2>
 8004f8c:	4ba9      	ldr	r3, [pc, #676]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4ba8      	ldr	r3, [pc, #672]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f92:	2180      	movs	r1, #128	; 0x80
 8004f94:	02c9      	lsls	r1, r1, #11
 8004f96:	430a      	orrs	r2, r1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	4ba6      	ldr	r3, [pc, #664]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4ba5      	ldr	r3, [pc, #660]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	0249      	lsls	r1, r1, #9
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]
 8004fa8:	e00b      	b.n	8004fc2 <HAL_RCC_OscConfig+0xba>
 8004faa:	4ba2      	ldr	r3, [pc, #648]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4ba1      	ldr	r3, [pc, #644]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004fb0:	49a1      	ldr	r1, [pc, #644]	; (8005238 <HAL_RCC_OscConfig+0x330>)
 8004fb2:	400a      	ands	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b9e      	ldr	r3, [pc, #632]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004fbc:	499f      	ldr	r1, [pc, #636]	; (800523c <HAL_RCC_OscConfig+0x334>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d014      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd ff63 	bl	8002e94 <HAL_GetTick>
 8004fce:	0003      	movs	r3, r0
 8004fd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd4:	f7fd ff5e 	bl	8002e94 <HAL_GetTick>
 8004fd8:	0002      	movs	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e29e      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fe6:	4b93      	ldr	r3, [pc, #588]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	029b      	lsls	r3, r3, #10
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d0f0      	beq.n	8004fd4 <HAL_RCC_OscConfig+0xcc>
 8004ff2:	e015      	b.n	8005020 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd ff4e 	bl	8002e94 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffe:	f7fd ff49 	bl	8002e94 <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b64      	cmp	r3, #100	; 0x64
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e289      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005010:	4b88      	ldr	r3, [pc, #544]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	029b      	lsls	r3, r3, #10
 8005018:	4013      	ands	r3, r2
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0xf6>
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2202      	movs	r2, #2
 8005026:	4013      	ands	r3, r2
 8005028:	d100      	bne.n	800502c <HAL_RCC_OscConfig+0x124>
 800502a:	e099      	b.n	8005160 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800502c:	4b81      	ldr	r3, [pc, #516]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2238      	movs	r2, #56	; 0x38
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005036:	4b7f      	ldr	r3, [pc, #508]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	2203      	movs	r2, #3
 800503c:	4013      	ands	r3, r2
 800503e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b10      	cmp	r3, #16
 8005044:	d102      	bne.n	800504c <HAL_RCC_OscConfig+0x144>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d002      	beq.n	8005052 <HAL_RCC_OscConfig+0x14a>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d135      	bne.n	80050be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005052:	4b78      	ldr	r3, [pc, #480]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	2380      	movs	r3, #128	; 0x80
 8005058:	00db      	lsls	r3, r3, #3
 800505a:	4013      	ands	r3, r2
 800505c:	d005      	beq.n	800506a <HAL_RCC_OscConfig+0x162>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e25c      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800506a:	4b72      	ldr	r3, [pc, #456]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4a74      	ldr	r2, [pc, #464]	; (8005240 <HAL_RCC_OscConfig+0x338>)
 8005070:	4013      	ands	r3, r2
 8005072:	0019      	movs	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	021a      	lsls	r2, r3, #8
 800507a:	4b6e      	ldr	r3, [pc, #440]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d112      	bne.n	80050ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005086:	4b6b      	ldr	r3, [pc, #428]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a6e      	ldr	r2, [pc, #440]	; (8005244 <HAL_RCC_OscConfig+0x33c>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	4b67      	ldr	r3, [pc, #412]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800509a:	4b66      	ldr	r3, [pc, #408]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	0adb      	lsrs	r3, r3, #11
 80050a0:	2207      	movs	r2, #7
 80050a2:	4013      	ands	r3, r2
 80050a4:	4a68      	ldr	r2, [pc, #416]	; (8005248 <HAL_RCC_OscConfig+0x340>)
 80050a6:	40da      	lsrs	r2, r3
 80050a8:	4b68      	ldr	r3, [pc, #416]	; (800524c <HAL_RCC_OscConfig+0x344>)
 80050aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050ac:	4b68      	ldr	r3, [pc, #416]	; (8005250 <HAL_RCC_OscConfig+0x348>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	0018      	movs	r0, r3
 80050b2:	f7fd fe93 	bl	8002ddc <HAL_InitTick>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d051      	beq.n	800515e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e232      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d030      	beq.n	8005128 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050c6:	4b5b      	ldr	r3, [pc, #364]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5e      	ldr	r2, [pc, #376]	; (8005244 <HAL_RCC_OscConfig+0x33c>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	4b57      	ldr	r3, [pc, #348]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80050d6:	430a      	orrs	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050da:	4b56      	ldr	r3, [pc, #344]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b55      	ldr	r3, [pc, #340]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80050e0:	2180      	movs	r1, #128	; 0x80
 80050e2:	0049      	lsls	r1, r1, #1
 80050e4:	430a      	orrs	r2, r1
 80050e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e8:	f7fd fed4 	bl	8002e94 <HAL_GetTick>
 80050ec:	0003      	movs	r3, r0
 80050ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050f2:	f7fd fecf 	bl	8002e94 <HAL_GetTick>
 80050f6:	0002      	movs	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e20f      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005104:	4b4b      	ldr	r3, [pc, #300]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4013      	ands	r3, r2
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005110:	4b48      	ldr	r3, [pc, #288]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a4a      	ldr	r2, [pc, #296]	; (8005240 <HAL_RCC_OscConfig+0x338>)
 8005116:	4013      	ands	r3, r2
 8005118:	0019      	movs	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	021a      	lsls	r2, r3, #8
 8005120:	4b44      	ldr	r3, [pc, #272]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	e01b      	b.n	8005160 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005128:	4b42      	ldr	r3, [pc, #264]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	4b41      	ldr	r3, [pc, #260]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800512e:	4949      	ldr	r1, [pc, #292]	; (8005254 <HAL_RCC_OscConfig+0x34c>)
 8005130:	400a      	ands	r2, r1
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd feae 	bl	8002e94 <HAL_GetTick>
 8005138:	0003      	movs	r3, r0
 800513a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513e:	f7fd fea9 	bl	8002e94 <HAL_GetTick>
 8005142:	0002      	movs	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e1e9      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005150:	4b38      	ldr	r3, [pc, #224]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	2380      	movs	r3, #128	; 0x80
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4013      	ands	r3, r2
 800515a:	d1f0      	bne.n	800513e <HAL_RCC_OscConfig+0x236>
 800515c:	e000      	b.n	8005160 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800515e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2208      	movs	r2, #8
 8005166:	4013      	ands	r3, r2
 8005168:	d047      	beq.n	80051fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800516a:	4b32      	ldr	r3, [pc, #200]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2238      	movs	r2, #56	; 0x38
 8005170:	4013      	ands	r3, r2
 8005172:	2b18      	cmp	r3, #24
 8005174:	d10a      	bne.n	800518c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005176:	4b2f      	ldr	r3, [pc, #188]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517a:	2202      	movs	r2, #2
 800517c:	4013      	ands	r3, r2
 800517e:	d03c      	beq.n	80051fa <HAL_RCC_OscConfig+0x2f2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d138      	bne.n	80051fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e1cb      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d019      	beq.n	80051c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005194:	4b27      	ldr	r3, [pc, #156]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005196:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800519a:	2101      	movs	r1, #1
 800519c:	430a      	orrs	r2, r1
 800519e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fd fe78 	bl	8002e94 <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051aa:	f7fd fe73 	bl	8002e94 <HAL_GetTick>
 80051ae:	0002      	movs	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e1b3      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051bc:	4b1d      	ldr	r3, [pc, #116]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	2202      	movs	r2, #2
 80051c2:	4013      	ands	r3, r2
 80051c4:	d0f1      	beq.n	80051aa <HAL_RCC_OscConfig+0x2a2>
 80051c6:	e018      	b.n	80051fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80051ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80051ce:	2101      	movs	r1, #1
 80051d0:	438a      	bics	r2, r1
 80051d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fd fe5e 	bl	8002e94 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051de:	f7fd fe59 	bl	8002e94 <HAL_GetTick>
 80051e2:	0002      	movs	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e199      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051f0:	4b10      	ldr	r3, [pc, #64]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 80051f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051f4:	2202      	movs	r2, #2
 80051f6:	4013      	ands	r3, r2
 80051f8:	d1f1      	bne.n	80051de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2204      	movs	r2, #4
 8005200:	4013      	ands	r3, r2
 8005202:	d100      	bne.n	8005206 <HAL_RCC_OscConfig+0x2fe>
 8005204:	e0c6      	b.n	8005394 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005206:	231f      	movs	r3, #31
 8005208:	18fb      	adds	r3, r7, r3
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2238      	movs	r2, #56	; 0x38
 8005214:	4013      	ands	r3, r2
 8005216:	2b20      	cmp	r3, #32
 8005218:	d11e      	bne.n	8005258 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800521a:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCC_OscConfig+0x32c>)
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	2202      	movs	r2, #2
 8005220:	4013      	ands	r3, r2
 8005222:	d100      	bne.n	8005226 <HAL_RCC_OscConfig+0x31e>
 8005224:	e0b6      	b.n	8005394 <HAL_RCC_OscConfig+0x48c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d000      	beq.n	8005230 <HAL_RCC_OscConfig+0x328>
 800522e:	e0b1      	b.n	8005394 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e177      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
 8005234:	40021000 	.word	0x40021000
 8005238:	fffeffff 	.word	0xfffeffff
 800523c:	fffbffff 	.word	0xfffbffff
 8005240:	ffff80ff 	.word	0xffff80ff
 8005244:	ffffc7ff 	.word	0xffffc7ff
 8005248:	00f42400 	.word	0x00f42400
 800524c:	20005134 	.word	0x20005134
 8005250:	20005138 	.word	0x20005138
 8005254:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005258:	4bb4      	ldr	r3, [pc, #720]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	055b      	lsls	r3, r3, #21
 8005260:	4013      	ands	r3, r2
 8005262:	d101      	bne.n	8005268 <HAL_RCC_OscConfig+0x360>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <HAL_RCC_OscConfig+0x362>
 8005268:	2300      	movs	r3, #0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d011      	beq.n	8005292 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4baf      	ldr	r3, [pc, #700]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005272:	4bae      	ldr	r3, [pc, #696]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005274:	2180      	movs	r1, #128	; 0x80
 8005276:	0549      	lsls	r1, r1, #21
 8005278:	430a      	orrs	r2, r1
 800527a:	63da      	str	r2, [r3, #60]	; 0x3c
 800527c:	4bab      	ldr	r3, [pc, #684]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800527e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	055b      	lsls	r3, r3, #21
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800528a:	231f      	movs	r3, #31
 800528c:	18fb      	adds	r3, r7, r3
 800528e:	2201      	movs	r2, #1
 8005290:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005292:	4ba7      	ldr	r3, [pc, #668]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4013      	ands	r3, r2
 800529c:	d11a      	bne.n	80052d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800529e:	4ba4      	ldr	r3, [pc, #656]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4ba3      	ldr	r3, [pc, #652]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 80052a4:	2180      	movs	r1, #128	; 0x80
 80052a6:	0049      	lsls	r1, r1, #1
 80052a8:	430a      	orrs	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80052ac:	f7fd fdf2 	bl	8002e94 <HAL_GetTick>
 80052b0:	0003      	movs	r3, r0
 80052b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fd fded 	bl	8002e94 <HAL_GetTick>
 80052ba:	0002      	movs	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e12d      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052c8:	4b99      	ldr	r3, [pc, #612]	; (8005530 <HAL_RCC_OscConfig+0x628>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4013      	ands	r3, r2
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d106      	bne.n	80052ea <HAL_RCC_OscConfig+0x3e2>
 80052dc:	4b93      	ldr	r3, [pc, #588]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80052de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052e0:	4b92      	ldr	r3, [pc, #584]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80052e2:	2101      	movs	r1, #1
 80052e4:	430a      	orrs	r2, r1
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e8:	e01c      	b.n	8005324 <HAL_RCC_OscConfig+0x41c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10c      	bne.n	800530c <HAL_RCC_OscConfig+0x404>
 80052f2:	4b8e      	ldr	r3, [pc, #568]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80052f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f6:	4b8d      	ldr	r3, [pc, #564]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80052f8:	2104      	movs	r1, #4
 80052fa:	430a      	orrs	r2, r1
 80052fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80052fe:	4b8b      	ldr	r3, [pc, #556]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005302:	4b8a      	ldr	r3, [pc, #552]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005304:	2101      	movs	r1, #1
 8005306:	430a      	orrs	r2, r1
 8005308:	65da      	str	r2, [r3, #92]	; 0x5c
 800530a:	e00b      	b.n	8005324 <HAL_RCC_OscConfig+0x41c>
 800530c:	4b87      	ldr	r3, [pc, #540]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800530e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005310:	4b86      	ldr	r3, [pc, #536]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005312:	2101      	movs	r1, #1
 8005314:	438a      	bics	r2, r1
 8005316:	65da      	str	r2, [r3, #92]	; 0x5c
 8005318:	4b84      	ldr	r3, [pc, #528]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800531a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531c:	4b83      	ldr	r3, [pc, #524]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800531e:	2104      	movs	r1, #4
 8005320:	438a      	bics	r2, r1
 8005322:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d014      	beq.n	8005356 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532c:	f7fd fdb2 	bl	8002e94 <HAL_GetTick>
 8005330:	0003      	movs	r3, r0
 8005332:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005334:	e009      	b.n	800534a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fd fdad 	bl	8002e94 <HAL_GetTick>
 800533a:	0002      	movs	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	4a7c      	ldr	r2, [pc, #496]	; (8005534 <HAL_RCC_OscConfig+0x62c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0ec      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800534a:	4b78      	ldr	r3, [pc, #480]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800534c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800534e:	2202      	movs	r2, #2
 8005350:	4013      	ands	r3, r2
 8005352:	d0f0      	beq.n	8005336 <HAL_RCC_OscConfig+0x42e>
 8005354:	e013      	b.n	800537e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005356:	f7fd fd9d 	bl	8002e94 <HAL_GetTick>
 800535a:	0003      	movs	r3, r0
 800535c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800535e:	e009      	b.n	8005374 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fd fd98 	bl	8002e94 <HAL_GetTick>
 8005364:	0002      	movs	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	4a72      	ldr	r2, [pc, #456]	; (8005534 <HAL_RCC_OscConfig+0x62c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e0d7      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005374:	4b6d      	ldr	r3, [pc, #436]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005378:	2202      	movs	r2, #2
 800537a:	4013      	ands	r3, r2
 800537c:	d1f0      	bne.n	8005360 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800537e:	231f      	movs	r3, #31
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005388:	4b68      	ldr	r3, [pc, #416]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800538a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800538c:	4b67      	ldr	r3, [pc, #412]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800538e:	496a      	ldr	r1, [pc, #424]	; (8005538 <HAL_RCC_OscConfig+0x630>)
 8005390:	400a      	ands	r2, r1
 8005392:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d100      	bne.n	800539e <HAL_RCC_OscConfig+0x496>
 800539c:	e0c1      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800539e:	4b63      	ldr	r3, [pc, #396]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2238      	movs	r2, #56	; 0x38
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d100      	bne.n	80053ac <HAL_RCC_OscConfig+0x4a4>
 80053aa:	e081      	b.n	80054b0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d156      	bne.n	8005462 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b4:	4b5d      	ldr	r3, [pc, #372]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b5c      	ldr	r3, [pc, #368]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80053ba:	4960      	ldr	r1, [pc, #384]	; (800553c <HAL_RCC_OscConfig+0x634>)
 80053bc:	400a      	ands	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd fd68 	bl	8002e94 <HAL_GetTick>
 80053c4:	0003      	movs	r3, r0
 80053c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ca:	f7fd fd63 	bl	8002e94 <HAL_GetTick>
 80053ce:	0002      	movs	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0a3      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053dc:	4b53      	ldr	r3, [pc, #332]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	049b      	lsls	r3, r3, #18
 80053e4:	4013      	ands	r3, r2
 80053e6:	d1f0      	bne.n	80053ca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053e8:	4b50      	ldr	r3, [pc, #320]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4a54      	ldr	r2, [pc, #336]	; (8005540 <HAL_RCC_OscConfig+0x638>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	0019      	movs	r1, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1a      	ldr	r2, [r3, #32]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005414:	431a      	orrs	r2, r3
 8005416:	4b45      	ldr	r3, [pc, #276]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005418:	430a      	orrs	r2, r1
 800541a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800541c:	4b43      	ldr	r3, [pc, #268]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b42      	ldr	r3, [pc, #264]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005422:	2180      	movs	r1, #128	; 0x80
 8005424:	0449      	lsls	r1, r1, #17
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800542a:	4b40      	ldr	r3, [pc, #256]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	4b3f      	ldr	r3, [pc, #252]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005430:	2180      	movs	r1, #128	; 0x80
 8005432:	0549      	lsls	r1, r1, #21
 8005434:	430a      	orrs	r2, r1
 8005436:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fd fd2c 	bl	8002e94 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005442:	f7fd fd27 	bl	8002e94 <HAL_GetTick>
 8005446:	0002      	movs	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e067      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	049b      	lsls	r3, r3, #18
 800545c:	4013      	ands	r3, r2
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x53a>
 8005460:	e05f      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b32      	ldr	r3, [pc, #200]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b31      	ldr	r3, [pc, #196]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005468:	4934      	ldr	r1, [pc, #208]	; (800553c <HAL_RCC_OscConfig+0x634>)
 800546a:	400a      	ands	r2, r1
 800546c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800546e:	4b2f      	ldr	r3, [pc, #188]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	4b2e      	ldr	r3, [pc, #184]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005474:	2103      	movs	r1, #3
 8005476:	438a      	bics	r2, r1
 8005478:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <HAL_RCC_OscConfig+0x624>)
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	4b2b      	ldr	r3, [pc, #172]	; (800552c <HAL_RCC_OscConfig+0x624>)
 8005480:	4930      	ldr	r1, [pc, #192]	; (8005544 <HAL_RCC_OscConfig+0x63c>)
 8005482:	400a      	ands	r2, r1
 8005484:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fd fd05 	bl	8002e94 <HAL_GetTick>
 800548a:	0003      	movs	r3, r0
 800548c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005490:	f7fd fd00 	bl	8002e94 <HAL_GetTick>
 8005494:	0002      	movs	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e040      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	049b      	lsls	r3, r3, #18
 80054aa:	4013      	ands	r3, r2
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0x588>
 80054ae:	e038      	b.n	8005522 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e033      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <HAL_RCC_OscConfig+0x624>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2203      	movs	r2, #3
 80054c6:	401a      	ands	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d126      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2270      	movs	r2, #112	; 0x70
 80054d4:	401a      	ands	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d11f      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	23fe      	movs	r3, #254	; 0xfe
 80054e2:	01db      	lsls	r3, r3, #7
 80054e4:	401a      	ands	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d116      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	23f8      	movs	r3, #248	; 0xf8
 80054f4:	039b      	lsls	r3, r3, #14
 80054f6:	401a      	ands	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d10e      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	23e0      	movs	r3, #224	; 0xe0
 8005504:	051b      	lsls	r3, r3, #20
 8005506:	401a      	ands	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	0f5b      	lsrs	r3, r3, #29
 8005514:	075a      	lsls	r2, r3, #29
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b008      	add	sp, #32
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	40007000 	.word	0x40007000
 8005534:	00001388 	.word	0x00001388
 8005538:	efffffff 	.word	0xefffffff
 800553c:	feffffff 	.word	0xfeffffff
 8005540:	11c1808c 	.word	0x11c1808c
 8005544:	eefeffff 	.word	0xeefeffff

08005548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0e9      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800555c:	4b76      	ldr	r3, [pc, #472]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2207      	movs	r2, #7
 8005562:	4013      	ands	r3, r2
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d91e      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556a:	4b73      	ldr	r3, [pc, #460]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2207      	movs	r2, #7
 8005570:	4393      	bics	r3, r2
 8005572:	0019      	movs	r1, r3
 8005574:	4b70      	ldr	r3, [pc, #448]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800557c:	f7fd fc8a 	bl	8002e94 <HAL_GetTick>
 8005580:	0003      	movs	r3, r0
 8005582:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005584:	e009      	b.n	800559a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005586:	f7fd fc85 	bl	8002e94 <HAL_GetTick>
 800558a:	0002      	movs	r2, r0
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	4a6a      	ldr	r2, [pc, #424]	; (800573c <HAL_RCC_ClockConfig+0x1f4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0ca      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800559a:	4b67      	ldr	r3, [pc, #412]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2207      	movs	r2, #7
 80055a0:	4013      	ands	r3, r2
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d1ee      	bne.n	8005586 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2202      	movs	r2, #2
 80055ae:	4013      	ands	r3, r2
 80055b0:	d015      	beq.n	80055de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2204      	movs	r2, #4
 80055b8:	4013      	ands	r3, r2
 80055ba:	d006      	beq.n	80055ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055bc:	4b60      	ldr	r3, [pc, #384]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	4b5f      	ldr	r3, [pc, #380]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80055c2:	21e0      	movs	r1, #224	; 0xe0
 80055c4:	01c9      	lsls	r1, r1, #7
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ca:	4b5d      	ldr	r3, [pc, #372]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	4a5d      	ldr	r2, [pc, #372]	; (8005744 <HAL_RCC_ClockConfig+0x1fc>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80055da:	430a      	orrs	r2, r1
 80055dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2201      	movs	r2, #1
 80055e4:	4013      	ands	r3, r2
 80055e6:	d057      	beq.n	8005698 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f0:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	4013      	ands	r3, r2
 80055fa:	d12b      	bne.n	8005654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e097      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d107      	bne.n	8005618 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005608:	4b4d      	ldr	r3, [pc, #308]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	2380      	movs	r3, #128	; 0x80
 800560e:	049b      	lsls	r3, r3, #18
 8005610:	4013      	ands	r3, r2
 8005612:	d11f      	bne.n	8005654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e08b      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d107      	bne.n	8005630 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005620:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	2380      	movs	r3, #128	; 0x80
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	4013      	ands	r3, r2
 800562a:	d113      	bne.n	8005654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e07f      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d106      	bne.n	8005646 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005638:	4b41      	ldr	r3, [pc, #260]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 800563a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563c:	2202      	movs	r2, #2
 800563e:	4013      	ands	r3, r2
 8005640:	d108      	bne.n	8005654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e074      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005646:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 8005648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564a:	2202      	movs	r2, #2
 800564c:	4013      	ands	r3, r2
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e06d      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005654:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2207      	movs	r2, #7
 800565a:	4393      	bics	r3, r2
 800565c:	0019      	movs	r1, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005668:	f7fd fc14 	bl	8002e94 <HAL_GetTick>
 800566c:	0003      	movs	r3, r0
 800566e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005670:	e009      	b.n	8005686 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005672:	f7fd fc0f 	bl	8002e94 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	4a2f      	ldr	r2, [pc, #188]	; (800573c <HAL_RCC_ClockConfig+0x1f4>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e054      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005686:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2238      	movs	r2, #56	; 0x38
 800568c:	401a      	ands	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	429a      	cmp	r2, r3
 8005696:	d1ec      	bne.n	8005672 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005698:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2207      	movs	r2, #7
 800569e:	4013      	ands	r3, r2
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d21e      	bcs.n	80056e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056a6:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2207      	movs	r2, #7
 80056ac:	4393      	bics	r3, r2
 80056ae:	0019      	movs	r1, r3
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056b8:	f7fd fbec 	bl	8002e94 <HAL_GetTick>
 80056bc:	0003      	movs	r3, r0
 80056be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056c0:	e009      	b.n	80056d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c2:	f7fd fbe7 	bl	8002e94 <HAL_GetTick>
 80056c6:	0002      	movs	r2, r0
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	4a1b      	ldr	r2, [pc, #108]	; (800573c <HAL_RCC_ClockConfig+0x1f4>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e02c      	b.n	8005730 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056d6:	4b18      	ldr	r3, [pc, #96]	; (8005738 <HAL_RCC_ClockConfig+0x1f0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2207      	movs	r2, #7
 80056dc:	4013      	ands	r3, r2
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d1ee      	bne.n	80056c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2204      	movs	r2, #4
 80056ea:	4013      	ands	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056ee:	4b14      	ldr	r3, [pc, #80]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_RCC_ClockConfig+0x200>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	0019      	movs	r1, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 80056fe:	430a      	orrs	r2, r1
 8005700:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005702:	f000 f829 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005706:	0001      	movs	r1, r0
 8005708:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <HAL_RCC_ClockConfig+0x1f8>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	220f      	movs	r2, #15
 8005710:	401a      	ands	r2, r3
 8005712:	4b0e      	ldr	r3, [pc, #56]	; (800574c <HAL_RCC_ClockConfig+0x204>)
 8005714:	0092      	lsls	r2, r2, #2
 8005716:	58d3      	ldr	r3, [r2, r3]
 8005718:	221f      	movs	r2, #31
 800571a:	4013      	ands	r3, r2
 800571c:	000a      	movs	r2, r1
 800571e:	40da      	lsrs	r2, r3
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_ClockConfig+0x208>)
 8005722:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_RCC_ClockConfig+0x20c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	0018      	movs	r0, r3
 800572a:	f7fd fb57 	bl	8002ddc <HAL_InitTick>
 800572e:	0003      	movs	r3, r0
}
 8005730:	0018      	movs	r0, r3
 8005732:	46bd      	mov	sp, r7
 8005734:	b004      	add	sp, #16
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40022000 	.word	0x40022000
 800573c:	00001388 	.word	0x00001388
 8005740:	40021000 	.word	0x40021000
 8005744:	fffff0ff 	.word	0xfffff0ff
 8005748:	ffff8fff 	.word	0xffff8fff
 800574c:	080099f4 	.word	0x080099f4
 8005750:	20005134 	.word	0x20005134
 8005754:	20005138 	.word	0x20005138

08005758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800575e:	4b3c      	ldr	r3, [pc, #240]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2238      	movs	r2, #56	; 0x38
 8005764:	4013      	ands	r3, r2
 8005766:	d10f      	bne.n	8005788 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005768:	4b39      	ldr	r3, [pc, #228]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0adb      	lsrs	r3, r3, #11
 800576e:	2207      	movs	r2, #7
 8005770:	4013      	ands	r3, r2
 8005772:	2201      	movs	r2, #1
 8005774:	409a      	lsls	r2, r3
 8005776:	0013      	movs	r3, r2
 8005778:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	4835      	ldr	r0, [pc, #212]	; (8005854 <HAL_RCC_GetSysClockFreq+0xfc>)
 800577e:	f7fa fcc1 	bl	8000104 <__udivsi3>
 8005782:	0003      	movs	r3, r0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e05d      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005788:	4b31      	ldr	r3, [pc, #196]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2238      	movs	r2, #56	; 0x38
 800578e:	4013      	ands	r3, r2
 8005790:	2b08      	cmp	r3, #8
 8005792:	d102      	bne.n	800579a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005794:	4b30      	ldr	r3, [pc, #192]	; (8005858 <HAL_RCC_GetSysClockFreq+0x100>)
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	e054      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800579a:	4b2d      	ldr	r3, [pc, #180]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2238      	movs	r2, #56	; 0x38
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b10      	cmp	r3, #16
 80057a4:	d138      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80057a6:	4b2a      	ldr	r3, [pc, #168]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	091b      	lsrs	r3, r3, #4
 80057b6:	2207      	movs	r2, #7
 80057b8:	4013      	ands	r3, r2
 80057ba:	3301      	adds	r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d10d      	bne.n	80057e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	4824      	ldr	r0, [pc, #144]	; (8005858 <HAL_RCC_GetSysClockFreq+0x100>)
 80057c8:	f7fa fc9c 	bl	8000104 <__udivsi3>
 80057cc:	0003      	movs	r3, r0
 80057ce:	0019      	movs	r1, r3
 80057d0:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	227f      	movs	r2, #127	; 0x7f
 80057d8:	4013      	ands	r3, r2
 80057da:	434b      	muls	r3, r1
 80057dc:	617b      	str	r3, [r7, #20]
        break;
 80057de:	e00d      	b.n	80057fc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80057e0:	68b9      	ldr	r1, [r7, #8]
 80057e2:	481c      	ldr	r0, [pc, #112]	; (8005854 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057e4:	f7fa fc8e 	bl	8000104 <__udivsi3>
 80057e8:	0003      	movs	r3, r0
 80057ea:	0019      	movs	r1, r3
 80057ec:	4b18      	ldr	r3, [pc, #96]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	0a1b      	lsrs	r3, r3, #8
 80057f2:	227f      	movs	r2, #127	; 0x7f
 80057f4:	4013      	ands	r3, r2
 80057f6:	434b      	muls	r3, r1
 80057f8:	617b      	str	r3, [r7, #20]
        break;
 80057fa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057fc:	4b14      	ldr	r3, [pc, #80]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	0f5b      	lsrs	r3, r3, #29
 8005802:	2207      	movs	r2, #7
 8005804:	4013      	ands	r3, r2
 8005806:	3301      	adds	r3, #1
 8005808:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	6978      	ldr	r0, [r7, #20]
 800580e:	f7fa fc79 	bl	8000104 <__udivsi3>
 8005812:	0003      	movs	r3, r0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e015      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005818:	4b0d      	ldr	r3, [pc, #52]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2238      	movs	r2, #56	; 0x38
 800581e:	4013      	ands	r3, r2
 8005820:	2b20      	cmp	r3, #32
 8005822:	d103      	bne.n	800582c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005824:	2380      	movs	r3, #128	; 0x80
 8005826:	021b      	lsls	r3, r3, #8
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e00b      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800582c:	4b08      	ldr	r3, [pc, #32]	; (8005850 <HAL_RCC_GetSysClockFreq+0xf8>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2238      	movs	r2, #56	; 0x38
 8005832:	4013      	ands	r3, r2
 8005834:	2b18      	cmp	r3, #24
 8005836:	d103      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005838:	23fa      	movs	r3, #250	; 0xfa
 800583a:	01db      	lsls	r3, r3, #7
 800583c:	613b      	str	r3, [r7, #16]
 800583e:	e001      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005844:	693b      	ldr	r3, [r7, #16]
}
 8005846:	0018      	movs	r0, r3
 8005848:	46bd      	mov	sp, r7
 800584a:	b006      	add	sp, #24
 800584c:	bd80      	pop	{r7, pc}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	40021000 	.word	0x40021000
 8005854:	00f42400 	.word	0x00f42400
 8005858:	007a1200 	.word	0x007a1200

0800585c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <HAL_RCC_GetHCLKFreq+0x10>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	0018      	movs	r0, r3
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	20005134 	.word	0x20005134

08005870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005870:	b5b0      	push	{r4, r5, r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005874:	f7ff fff2 	bl	800585c <HAL_RCC_GetHCLKFreq>
 8005878:	0004      	movs	r4, r0
 800587a:	f7ff fb39 	bl	8004ef0 <LL_RCC_GetAPB1Prescaler>
 800587e:	0003      	movs	r3, r0
 8005880:	0b1a      	lsrs	r2, r3, #12
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005884:	0092      	lsls	r2, r2, #2
 8005886:	58d3      	ldr	r3, [r2, r3]
 8005888:	221f      	movs	r2, #31
 800588a:	4013      	ands	r3, r2
 800588c:	40dc      	lsrs	r4, r3
 800588e:	0023      	movs	r3, r4
}
 8005890:	0018      	movs	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	bdb0      	pop	{r4, r5, r7, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	08009a34 	.word	0x08009a34

0800589c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80058a4:	2313      	movs	r3, #19
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058ac:	2312      	movs	r3, #18
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	2380      	movs	r3, #128	; 0x80
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	4013      	ands	r3, r2
 80058be:	d100      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80058c0:	e0a3      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058c2:	2011      	movs	r0, #17
 80058c4:	183b      	adds	r3, r7, r0
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ca:	4bc3      	ldr	r3, [pc, #780]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ce:	2380      	movs	r3, #128	; 0x80
 80058d0:	055b      	lsls	r3, r3, #21
 80058d2:	4013      	ands	r3, r2
 80058d4:	d110      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058d6:	4bc0      	ldr	r3, [pc, #768]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058da:	4bbf      	ldr	r3, [pc, #764]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058dc:	2180      	movs	r1, #128	; 0x80
 80058de:	0549      	lsls	r1, r1, #21
 80058e0:	430a      	orrs	r2, r1
 80058e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80058e4:	4bbc      	ldr	r3, [pc, #752]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e8:	2380      	movs	r3, #128	; 0x80
 80058ea:	055b      	lsls	r3, r3, #21
 80058ec:	4013      	ands	r3, r2
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	2201      	movs	r2, #1
 80058f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058f8:	4bb8      	ldr	r3, [pc, #736]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4bb7      	ldr	r3, [pc, #732]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80058fe:	2180      	movs	r1, #128	; 0x80
 8005900:	0049      	lsls	r1, r1, #1
 8005902:	430a      	orrs	r2, r1
 8005904:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005906:	f7fd fac5 	bl	8002e94 <HAL_GetTick>
 800590a:	0003      	movs	r3, r0
 800590c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800590e:	e00b      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005910:	f7fd fac0 	bl	8002e94 <HAL_GetTick>
 8005914:	0002      	movs	r2, r0
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d904      	bls.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800591e:	2313      	movs	r3, #19
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	2203      	movs	r2, #3
 8005924:	701a      	strb	r2, [r3, #0]
        break;
 8005926:	e005      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005928:	4bac      	ldr	r3, [pc, #688]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	2380      	movs	r3, #128	; 0x80
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4013      	ands	r3, r2
 8005932:	d0ed      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005934:	2313      	movs	r3, #19
 8005936:	18fb      	adds	r3, r7, r3
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d154      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800593e:	4ba6      	ldr	r3, [pc, #664]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005942:	23c0      	movs	r3, #192	; 0xc0
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4013      	ands	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d019      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	429a      	cmp	r2, r3
 8005958:	d014      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800595a:	4b9f      	ldr	r3, [pc, #636]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800595c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595e:	4aa0      	ldr	r2, [pc, #640]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005960:	4013      	ands	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005964:	4b9c      	ldr	r3, [pc, #624]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005968:	4b9b      	ldr	r3, [pc, #620]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	0249      	lsls	r1, r1, #9
 800596e:	430a      	orrs	r2, r1
 8005970:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005972:	4b99      	ldr	r3, [pc, #612]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005974:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005976:	4b98      	ldr	r3, [pc, #608]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005978:	499a      	ldr	r1, [pc, #616]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800597a:	400a      	ands	r2, r1
 800597c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800597e:	4b96      	ldr	r3, [pc, #600]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2201      	movs	r2, #1
 8005988:	4013      	ands	r3, r2
 800598a:	d016      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fd fa82 	bl	8002e94 <HAL_GetTick>
 8005990:	0003      	movs	r3, r0
 8005992:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005994:	e00c      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005996:	f7fd fa7d 	bl	8002e94 <HAL_GetTick>
 800599a:	0002      	movs	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	4a91      	ldr	r2, [pc, #580]	; (8005be8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d904      	bls.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80059a6:	2313      	movs	r3, #19
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	2203      	movs	r2, #3
 80059ac:	701a      	strb	r2, [r3, #0]
            break;
 80059ae:	e004      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b0:	4b89      	ldr	r3, [pc, #548]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b4:	2202      	movs	r2, #2
 80059b6:	4013      	ands	r3, r2
 80059b8:	d0ed      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80059ba:	2313      	movs	r3, #19
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c4:	4b84      	ldr	r3, [pc, #528]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	4a85      	ldr	r2, [pc, #532]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	4b81      	ldr	r3, [pc, #516]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d4:	430a      	orrs	r2, r1
 80059d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80059d8:	e00c      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059da:	2312      	movs	r3, #18
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	2213      	movs	r2, #19
 80059e0:	18ba      	adds	r2, r7, r2
 80059e2:	7812      	ldrb	r2, [r2, #0]
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e005      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	2312      	movs	r3, #18
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	2213      	movs	r2, #19
 80059ee:	18ba      	adds	r2, r7, r2
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059f4:	2311      	movs	r3, #17
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d105      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fe:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a02:	4b75      	ldr	r3, [pc, #468]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a04:	4979      	ldr	r1, [pc, #484]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	4013      	ands	r3, r2
 8005a12:	d009      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a14:	4b70      	ldr	r3, [pc, #448]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	2203      	movs	r2, #3
 8005a1a:	4393      	bics	r3, r2
 8005a1c:	0019      	movs	r1, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a24:	430a      	orrs	r2, r1
 8005a26:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	4013      	ands	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a32:	4b69      	ldr	r3, [pc, #420]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	220c      	movs	r2, #12
 8005a38:	4393      	bics	r3, r2
 8005a3a:	0019      	movs	r1, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a42:	430a      	orrs	r2, r1
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2210      	movs	r2, #16
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a50:	4b61      	ldr	r3, [pc, #388]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a54:	4a66      	ldr	r2, [pc, #408]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	0019      	movs	r1, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	4b5e      	ldr	r3, [pc, #376]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d009      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a74:	4a5f      	ldr	r2, [pc, #380]	; (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	0019      	movs	r1, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	2380      	movs	r3, #128	; 0x80
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a90:	4b51      	ldr	r3, [pc, #324]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	4a58      	ldr	r2, [pc, #352]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a96:	4013      	ands	r3, r2
 8005a98:	0019      	movs	r1, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	4b4e      	ldr	r3, [pc, #312]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005aae:	4b4a      	ldr	r3, [pc, #296]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab2:	4a52      	ldr	r2, [pc, #328]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	4b46      	ldr	r3, [pc, #280]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	01db      	lsls	r3, r3, #7
 8005aca:	4013      	ands	r3, r2
 8005acc:	d015      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ace:	4b42      	ldr	r3, [pc, #264]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	0899      	lsrs	r1, r3, #2
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005adc:	430a      	orrs	r2, r1
 8005ade:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	05db      	lsls	r3, r3, #23
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d106      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005aec:	4b3a      	ldr	r3, [pc, #232]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	4b39      	ldr	r3, [pc, #228]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	0249      	lsls	r1, r1, #9
 8005af6:	430a      	orrs	r2, r1
 8005af8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	4013      	ands	r3, r2
 8005b04:	d009      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b06:	4b34      	ldr	r3, [pc, #208]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	2240      	movs	r2, #64	; 0x40
 8005b0c:	4393      	bics	r3, r2
 8005b0e:	0019      	movs	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b14:	4b30      	ldr	r3, [pc, #192]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b16:	430a      	orrs	r2, r1
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	039b      	lsls	r3, r3, #14
 8005b22:	4013      	ands	r3, r2
 8005b24:	d016      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b26:	4b2c      	ldr	r3, [pc, #176]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	4a35      	ldr	r2, [pc, #212]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	0019      	movs	r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b34:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b36:	430a      	orrs	r2, r1
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	03db      	lsls	r3, r3, #15
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d106      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b4c:	2180      	movs	r1, #128	; 0x80
 8005b4e:	0449      	lsls	r1, r1, #17
 8005b50:	430a      	orrs	r2, r1
 8005b52:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	03db      	lsls	r3, r3, #15
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d016      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b60:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b64:	4a27      	ldr	r2, [pc, #156]	; (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b70:	430a      	orrs	r2, r1
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	045b      	lsls	r3, r3, #17
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b80:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4b14      	ldr	r3, [pc, #80]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	0449      	lsls	r1, r1, #17
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	4013      	ands	r3, r2
 8005b98:	d016      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	4a1a      	ldr	r2, [pc, #104]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	0019      	movs	r1, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695a      	ldr	r2, [r3, #20]
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	2380      	movs	r3, #128	; 0x80
 8005bb4:	01db      	lsls	r3, r3, #7
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d106      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bba:	4b07      	ldr	r3, [pc, #28]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005bc0:	2180      	movs	r1, #128	; 0x80
 8005bc2:	0249      	lsls	r1, r1, #9
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005bc8:	2312      	movs	r3, #18
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	781b      	ldrb	r3, [r3, #0]
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b006      	add	sp, #24
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	40007000 	.word	0x40007000
 8005be0:	fffffcff 	.word	0xfffffcff
 8005be4:	fffeffff 	.word	0xfffeffff
 8005be8:	00001388 	.word	0x00001388
 8005bec:	efffffff 	.word	0xefffffff
 8005bf0:	fffff3ff 	.word	0xfffff3ff
 8005bf4:	fff3ffff 	.word	0xfff3ffff
 8005bf8:	ffcfffff 	.word	0xffcfffff
 8005bfc:	ffffcfff 	.word	0xffffcfff
 8005c00:	ffbfffff 	.word	0xffbfffff
 8005c04:	feffffff 	.word	0xfeffffff
 8005c08:	ffff3fff 	.word	0xffff3fff

08005c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	029b      	lsls	r3, r3, #10
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d136      	bne.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005c22:	4bcd      	ldr	r3, [pc, #820]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c26:	23c0      	movs	r3, #192	; 0xc0
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005c2e:	4bca      	ldr	r3, [pc, #808]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c32:	2202      	movs	r2, #2
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d108      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d103      	bne.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	e31c      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005c4c:	4bc2      	ldr	r3, [pc, #776]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c50:	2202      	movs	r2, #2
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d108      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	2380      	movs	r3, #128	; 0x80
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d103      	bne.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005c62:	23fa      	movs	r3, #250	; 0xfa
 8005c64:	01db      	lsls	r3, r3, #7
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e30d      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005c6a:	4bbb      	ldr	r3, [pc, #748]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	029b      	lsls	r3, r3, #10
 8005c72:	401a      	ands	r2, r3
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	029b      	lsls	r3, r3, #10
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d000      	beq.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005c7c:	e303      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	23c0      	movs	r3, #192	; 0xc0
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d000      	beq.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005c88:	e2fd      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8005c8a:	4bb4      	ldr	r3, [pc, #720]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005c8c:	617b      	str	r3, [r7, #20]
 8005c8e:	e2fa      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005c90:	4bb1      	ldr	r3, [pc, #708]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	2203      	movs	r2, #3
 8005c96:	4013      	ands	r3, r2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d102      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005c9c:	4bb0      	ldr	r3, [pc, #704]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e00a      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005ca2:	4bad      	ldr	r3, [pc, #692]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4013      	ands	r3, r2
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d102      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005cae:	4bad      	ldr	r3, [pc, #692]	; (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8005cb0:	613b      	str	r3, [r7, #16]
 8005cb2:	e001      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cb8:	4ba7      	ldr	r3, [pc, #668]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	2207      	movs	r2, #7
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	0019      	movs	r1, r3
 8005cc6:	6938      	ldr	r0, [r7, #16]
 8005cc8:	f7fa fa1c 	bl	8000104 <__udivsi3>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	03db      	lsls	r3, r3, #15
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d100      	bne.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005cda:	e28e      	b.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	03db      	lsls	r3, r3, #15
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d900      	bls.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005ce6:	e2b7      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	039b      	lsls	r3, r3, #14
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d100      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005cf2:	e253      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	039b      	lsls	r3, r3, #14
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d900      	bls.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005cfe:	e2ab      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d100      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005d0a:	e0b2      	b.n	8005e72 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	031b      	lsls	r3, r3, #12
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d900      	bls.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005d16:	e29f      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	01db      	lsls	r3, r3, #7
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d100      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005d22:	e103      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	2380      	movs	r3, #128	; 0x80
 8005d28:	01db      	lsls	r3, r3, #7
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d900      	bls.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005d2e:	e293      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d100      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005d3a:	e165      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	2380      	movs	r3, #128	; 0x80
 8005d40:	011b      	lsls	r3, r3, #4
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d900      	bls.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005d46:	e287      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	2380      	movs	r3, #128	; 0x80
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d100      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005d52:	e1e3      	b.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	2380      	movs	r3, #128	; 0x80
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d900      	bls.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005d5e:	e27b      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d100      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005d6a:	e197      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d900      	bls.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005d76:	e26f      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d100      	bne.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005d7e:	e118      	b.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b20      	cmp	r3, #32
 8005d84:	d900      	bls.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005d86:	e267      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b10      	cmp	r3, #16
 8005d8c:	d100      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005d8e:	e093      	b.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d900      	bls.n	8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005d96:	e25f      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d033      	beq.n	8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005da4:	e258      	b.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005da6:	4b6c      	ldr	r3, [pc, #432]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005daa:	2203      	movs	r2, #3
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005db6:	f7ff fd5b 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	617b      	str	r3, [r7, #20]
        break;
 8005dbe:	e24d      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d104      	bne.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005dc6:	f7ff fcc7 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	617b      	str	r3, [r7, #20]
        break;
 8005dce:	e245      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005dd0:	4b61      	ldr	r3, [pc, #388]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2380      	movs	r3, #128	; 0x80
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	401a      	ands	r2, r3
 8005dda:	2380      	movs	r3, #128	; 0x80
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d105      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d102      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8005de8:	4b5d      	ldr	r3, [pc, #372]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005dea:	617b      	str	r3, [r7, #20]
        break;
 8005dec:	e236      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005dee:	4b5a      	ldr	r3, [pc, #360]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	2202      	movs	r2, #2
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d000      	beq.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8005dfa:	e22f      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d000      	beq.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8005e02:	e22b      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	617b      	str	r3, [r7, #20]
        break;
 8005e0a:	e227      	b.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005e0c:	4b52      	ldr	r3, [pc, #328]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	220c      	movs	r2, #12
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d104      	bne.n	8005e26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e1c:	f7ff fd28 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8005e20:	0003      	movs	r3, r0
 8005e22:	617b      	str	r3, [r7, #20]
        break;
 8005e24:	e21c      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b04      	cmp	r3, #4
 8005e2a:	d104      	bne.n	8005e36 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e2c:	f7ff fc94 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005e30:	0003      	movs	r3, r0
 8005e32:	617b      	str	r3, [r7, #20]
        break;
 8005e34:	e214      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005e36:	4b48      	ldr	r3, [pc, #288]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	401a      	ands	r2, r3
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d105      	bne.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d102      	bne.n	8005e54 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8005e4e:	4b44      	ldr	r3, [pc, #272]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e50:	617b      	str	r3, [r7, #20]
        break;
 8005e52:	e205      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005e54:	4b40      	ldr	r3, [pc, #256]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e58:	2202      	movs	r2, #2
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d000      	beq.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005e60:	e1fe      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b0c      	cmp	r3, #12
 8005e66:	d000      	beq.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005e68:	e1fa      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8005e6a:	2380      	movs	r3, #128	; 0x80
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	617b      	str	r3, [r7, #20]
        break;
 8005e70:	e1f6      	b.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e76:	2240      	movs	r2, #64	; 0x40
 8005e78:	4013      	ands	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005e7c:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	401a      	ands	r2, r3
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d105      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8005e94:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8005e96:	617b      	str	r3, [r7, #20]
        break;
 8005e98:	e1e4      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005e9a:	4b2f      	ldr	r3, [pc, #188]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d000      	beq.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005ea6:	e1dd      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d000      	beq.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005eae:	e1d9      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	021b      	lsls	r3, r3, #8
 8005eb4:	617b      	str	r3, [r7, #20]
        break;
 8005eb6:	e1d5      	b.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005eb8:	4b27      	ldr	r3, [pc, #156]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ebc:	23c0      	movs	r3, #192	; 0xc0
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005eca:	f7ff fcd1 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	617b      	str	r3, [r7, #20]
        break;
 8005ed2:	e1c9      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d104      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ede:	f7ff fc3b 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	617b      	str	r3, [r7, #20]
        break;
 8005ee6:	e1bf      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005ee8:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	2380      	movs	r3, #128	; 0x80
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	401a      	ands	r2, r3
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d102      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8005f04:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005f06:	617b      	str	r3, [r7, #20]
        break;
 8005f08:	e1ae      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	2202      	movs	r2, #2
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d000      	beq.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005f16:	e1a7      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	23c0      	movs	r3, #192	; 0xc0
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d000      	beq.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005f22:	e1a1      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8005f24:	2380      	movs	r3, #128	; 0x80
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	617b      	str	r3, [r7, #20]
        break;
 8005f2a:	e19d      	b.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f30:	0f9b      	lsrs	r3, r3, #30
 8005f32:	079b      	lsls	r3, r3, #30
 8005f34:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f3c:	f7ff fc0c 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005f40:	0003      	movs	r3, r0
 8005f42:	617b      	str	r3, [r7, #20]
        break;
 8005f44:	e192      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	2380      	movs	r3, #128	; 0x80
 8005f4a:	061b      	lsls	r3, r3, #24
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d10d      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8005f50:	4b03      	ldr	r3, [pc, #12]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005f52:	617b      	str	r3, [r7, #20]
        break;
 8005f54:	e18a      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	0003d090 	.word	0x0003d090
 8005f60:	00f42400 	.word	0x00f42400
 8005f64:	007a1200 	.word	0x007a1200
 8005f68:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	2380      	movs	r3, #128	; 0x80
 8005f70:	05db      	lsls	r3, r3, #23
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d000      	beq.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8005f76:	e179      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005f78:	4bc5      	ldr	r3, [pc, #788]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	025b      	lsls	r3, r3, #9
 8005f80:	4013      	ands	r3, r2
 8005f82:	d100      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005f84:	e172      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f86:	4bc2      	ldr	r3, [pc, #776]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	227f      	movs	r2, #127	; 0x7f
 8005f8e:	4013      	ands	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	435a      	muls	r2, r3
 8005f98:	4bbd      	ldr	r3, [pc, #756]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	0c5b      	lsrs	r3, r3, #17
 8005f9e:	211f      	movs	r1, #31
 8005fa0:	400b      	ands	r3, r1
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	0019      	movs	r1, r3
 8005fa6:	0010      	movs	r0, r2
 8005fa8:	f7fa f8ac 	bl	8000104 <__udivsi3>
 8005fac:	0003      	movs	r3, r0
 8005fae:	617b      	str	r3, [r7, #20]
        break;
 8005fb0:	e15c      	b.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005fb2:	4bb7      	ldr	r3, [pc, #732]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb6:	23c0      	movs	r3, #192	; 0xc0
 8005fb8:	019b      	lsls	r3, r3, #6
 8005fba:	4013      	ands	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7ff fc54 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	617b      	str	r3, [r7, #20]
        break;
 8005fcc:	e150      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	015b      	lsls	r3, r3, #5
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d104      	bne.n	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005fd8:	f7ff fbbe 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	617b      	str	r3, [r7, #20]
        break;
 8005fe0:	e146      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005fe2:	4bab      	ldr	r3, [pc, #684]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	401a      	ands	r2, r3
 8005fec:	2380      	movs	r3, #128	; 0x80
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d000      	beq.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8005ff4:	e13c      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	019b      	lsls	r3, r3, #6
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d000      	beq.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006000:	e136      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8006002:	4ba4      	ldr	r3, [pc, #656]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006004:	617b      	str	r3, [r7, #20]
        break;
 8006006:	e133      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006008:	4ba1      	ldr	r3, [pc, #644]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800600a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800600c:	23c0      	movs	r3, #192	; 0xc0
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	01db      	lsls	r3, r3, #7
 800601a:	429a      	cmp	r2, r3
 800601c:	d11c      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800601e:	4b9c      	ldr	r3, [pc, #624]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	025b      	lsls	r3, r3, #9
 8006026:	4013      	ands	r3, r2
 8006028:	d100      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800602a:	e123      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800602c:	4b98      	ldr	r3, [pc, #608]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	0a1b      	lsrs	r3, r3, #8
 8006032:	227f      	movs	r2, #127	; 0x7f
 8006034:	4013      	ands	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	435a      	muls	r2, r3
 800603e:	4b94      	ldr	r3, [pc, #592]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	0c5b      	lsrs	r3, r3, #17
 8006044:	211f      	movs	r1, #31
 8006046:	400b      	ands	r3, r1
 8006048:	3301      	adds	r3, #1
 800604a:	0019      	movs	r1, r3
 800604c:	0010      	movs	r0, r2
 800604e:	f7fa f859 	bl	8000104 <__udivsi3>
 8006052:	0003      	movs	r3, r0
 8006054:	617b      	str	r3, [r7, #20]
        break;
 8006056:	e10d      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800605e:	f7ff fb7b 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8006062:	0003      	movs	r3, r0
 8006064:	617b      	str	r3, [r7, #20]
        break;
 8006066:	e105      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006068:	4b89      	ldr	r3, [pc, #548]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	401a      	ands	r2, r3
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	429a      	cmp	r2, r3
 8006078:	d107      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	429a      	cmp	r2, r3
 8006082:	d102      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006084:	4b83      	ldr	r3, [pc, #524]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006086:	617b      	str	r3, [r7, #20]
        break;
 8006088:	e0f4      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	23c0      	movs	r3, #192	; 0xc0
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	429a      	cmp	r2, r3
 8006092:	d000      	beq.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006094:	e0ee      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006096:	4b80      	ldr	r3, [pc, #512]	; (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006098:	617b      	str	r3, [r7, #20]
        break;
 800609a:	e0eb      	b.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800609c:	4b7c      	ldr	r3, [pc, #496]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800609e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060a0:	23c0      	movs	r3, #192	; 0xc0
 80060a2:	031b      	lsls	r3, r3, #12
 80060a4:	4013      	ands	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d104      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80060ae:	f7ff fbdf 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 80060b2:	0003      	movs	r3, r0
 80060b4:	617b      	str	r3, [r7, #20]
        break;
 80060b6:	e0df      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80060b8:	4b75      	ldr	r3, [pc, #468]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	2202      	movs	r2, #2
 80060be:	4013      	ands	r3, r2
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d108      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	02db      	lsls	r3, r3, #11
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d103      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 80060ce:	23fa      	movs	r3, #250	; 0xfa
 80060d0:	01db      	lsls	r3, r3, #7
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	e021      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80060d6:	4b6e      	ldr	r3, [pc, #440]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	2380      	movs	r3, #128	; 0x80
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	401a      	ands	r2, r3
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d107      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	031b      	lsls	r3, r3, #12
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d102      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80060f2:	4b68      	ldr	r3, [pc, #416]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	e010      	b.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80060f8:	4b65      	ldr	r3, [pc, #404]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fc:	2202      	movs	r2, #2
 80060fe:	4013      	ands	r3, r2
 8006100:	2b02      	cmp	r3, #2
 8006102:	d000      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006104:	e0b8      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	23c0      	movs	r3, #192	; 0xc0
 800610a:	031b      	lsls	r3, r3, #12
 800610c:	429a      	cmp	r2, r3
 800610e:	d000      	beq.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006110:	e0b2      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	617b      	str	r3, [r7, #20]
        break;
 8006118:	e0ae      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800611a:	e0ad      	b.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800611c:	4b5c      	ldr	r3, [pc, #368]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800611e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006120:	23c0      	movs	r3, #192	; 0xc0
 8006122:	039b      	lsls	r3, r3, #14
 8006124:	4013      	ands	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800612e:	f7ff fb9f 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8006132:	0003      	movs	r3, r0
 8006134:	617b      	str	r3, [r7, #20]
        break;
 8006136:	e0a1      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006138:	4b55      	ldr	r3, [pc, #340]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800613a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613c:	2202      	movs	r2, #2
 800613e:	4013      	ands	r3, r2
 8006140:	2b02      	cmp	r3, #2
 8006142:	d108      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	035b      	lsls	r3, r3, #13
 800614a:	429a      	cmp	r2, r3
 800614c:	d103      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800614e:	23fa      	movs	r3, #250	; 0xfa
 8006150:	01db      	lsls	r3, r3, #7
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	e021      	b.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006156:	4b4e      	ldr	r3, [pc, #312]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	2380      	movs	r3, #128	; 0x80
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	401a      	ands	r2, r3
 8006160:	2380      	movs	r3, #128	; 0x80
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	429a      	cmp	r2, r3
 8006166:	d107      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	2380      	movs	r3, #128	; 0x80
 800616c:	039b      	lsls	r3, r3, #14
 800616e:	429a      	cmp	r2, r3
 8006170:	d102      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8006172:	4b48      	ldr	r3, [pc, #288]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e010      	b.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006178:	4b45      	ldr	r3, [pc, #276]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800617a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617c:	2202      	movs	r2, #2
 800617e:	4013      	ands	r3, r2
 8006180:	2b02      	cmp	r3, #2
 8006182:	d000      	beq.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006184:	e07a      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	23c0      	movs	r3, #192	; 0xc0
 800618a:	039b      	lsls	r3, r3, #14
 800618c:	429a      	cmp	r2, r3
 800618e:	d000      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006190:	e074      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	617b      	str	r3, [r7, #20]
        break;
 8006198:	e070      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800619a:	e06f      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800619c:	4b3c      	ldr	r3, [pc, #240]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800619e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	03db      	lsls	r3, r3, #15
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	2380      	movs	r3, #128	; 0x80
 80061ac:	03db      	lsls	r3, r3, #15
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d11b      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80061b2:	4b37      	ldr	r3, [pc, #220]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	045b      	lsls	r3, r3, #17
 80061ba:	4013      	ands	r3, r2
 80061bc:	d060      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061be:	4b34      	ldr	r3, [pc, #208]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	227f      	movs	r2, #127	; 0x7f
 80061c6:	4013      	ands	r3, r2
 80061c8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	435a      	muls	r2, r3
 80061d0:	4b2f      	ldr	r3, [pc, #188]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	0e5b      	lsrs	r3, r3, #25
 80061d6:	2107      	movs	r1, #7
 80061d8:	400b      	ands	r3, r1
 80061da:	3301      	adds	r3, #1
 80061dc:	0019      	movs	r1, r3
 80061de:	0010      	movs	r0, r2
 80061e0:	f7f9 ff90 	bl	8000104 <__udivsi3>
 80061e4:	0003      	movs	r3, r0
 80061e6:	617b      	str	r3, [r7, #20]
        break;
 80061e8:	e04a      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d147      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061f0:	f7ff fb3e 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 80061f4:	0003      	movs	r3, r0
 80061f6:	617b      	str	r3, [r7, #20]
        break;
 80061f8:	e042      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80061fa:	4b25      	ldr	r3, [pc, #148]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80061fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	045b      	lsls	r3, r3, #17
 8006202:	4013      	ands	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	2380      	movs	r3, #128	; 0x80
 800620a:	045b      	lsls	r3, r3, #17
 800620c:	429a      	cmp	r2, r3
 800620e:	d11b      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006210:	4b1f      	ldr	r3, [pc, #124]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	045b      	lsls	r3, r3, #17
 8006218:	4013      	ands	r3, r2
 800621a:	d033      	beq.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800621c:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	227f      	movs	r2, #127	; 0x7f
 8006224:	4013      	ands	r3, r2
 8006226:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	435a      	muls	r2, r3
 800622e:	4b18      	ldr	r3, [pc, #96]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	0e5b      	lsrs	r3, r3, #25
 8006234:	2107      	movs	r1, #7
 8006236:	400b      	ands	r3, r1
 8006238:	3301      	adds	r3, #1
 800623a:	0019      	movs	r1, r3
 800623c:	0010      	movs	r0, r2
 800623e:	f7f9 ff61 	bl	8000104 <__udivsi3>
 8006242:	0003      	movs	r3, r0
 8006244:	617b      	str	r3, [r7, #20]
        break;
 8006246:	e01d      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d11a      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800624e:	f7ff fb0f 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8006252:	0003      	movs	r3, r0
 8006254:	617b      	str	r3, [r7, #20]
        break;
 8006256:	e015      	b.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	e014      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800625c:	46c0      	nop			; (mov r8, r8)
 800625e:	e012      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006260:	46c0      	nop			; (mov r8, r8)
 8006262:	e010      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	e00e      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006268:	46c0      	nop			; (mov r8, r8)
 800626a:	e00c      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800626c:	46c0      	nop			; (mov r8, r8)
 800626e:	e00a      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	e008      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006274:	46c0      	nop			; (mov r8, r8)
 8006276:	e006      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	e004      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800627c:	46c0      	nop			; (mov r8, r8)
 800627e:	e002      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	e000      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006284:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006286:	697b      	ldr	r3, [r7, #20]
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b006      	add	sp, #24
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40021000 	.word	0x40021000
 8006294:	00f42400 	.word	0x00f42400
 8006298:	0000bb80 	.word	0x0000bb80

0800629c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e0a8      	b.n	8006400 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	2382      	movs	r3, #130	; 0x82
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	429a      	cmp	r2, r3
 80062c0:	d009      	beq.n	80062d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	61da      	str	r2, [r3, #28]
 80062c8:	e005      	b.n	80062d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	225d      	movs	r2, #93	; 0x5d
 80062e0:	5c9b      	ldrb	r3, [r3, r2]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d107      	bne.n	80062f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	225c      	movs	r2, #92	; 0x5c
 80062ec:	2100      	movs	r1, #0
 80062ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	0018      	movs	r0, r3
 80062f4:	f7fc fad8 	bl	80028a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	225d      	movs	r2, #93	; 0x5d
 80062fc:	2102      	movs	r1, #2
 80062fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2140      	movs	r1, #64	; 0x40
 800630c:	438a      	bics	r2, r1
 800630e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	23e0      	movs	r3, #224	; 0xe0
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	429a      	cmp	r2, r3
 800631a:	d902      	bls.n	8006322 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e002      	b.n	8006328 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006322:	2380      	movs	r3, #128	; 0x80
 8006324:	015b      	lsls	r3, r3, #5
 8006326:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	23f0      	movs	r3, #240	; 0xf0
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	429a      	cmp	r2, r3
 8006332:	d008      	beq.n	8006346 <HAL_SPI_Init+0xaa>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	23e0      	movs	r3, #224	; 0xe0
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	429a      	cmp	r2, r3
 800633e:	d002      	beq.n	8006346 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	2382      	movs	r3, #130	; 0x82
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	401a      	ands	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6899      	ldr	r1, [r3, #8]
 8006354:	2384      	movs	r3, #132	; 0x84
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	400b      	ands	r3, r1
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2102      	movs	r1, #2
 8006362:	400b      	ands	r3, r1
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	2101      	movs	r1, #1
 800636c:	400b      	ands	r3, r1
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6999      	ldr	r1, [r3, #24]
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	400b      	ands	r3, r1
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	2138      	movs	r1, #56	; 0x38
 8006382:	400b      	ands	r3, r1
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	2180      	movs	r1, #128	; 0x80
 800638c:	400b      	ands	r3, r1
 800638e:	431a      	orrs	r2, r3
 8006390:	0011      	movs	r1, r2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	019b      	lsls	r3, r3, #6
 800639a:	401a      	ands	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	2204      	movs	r2, #4
 80063ac:	401a      	ands	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	2110      	movs	r1, #16
 80063b4:	400b      	ands	r3, r1
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	2108      	movs	r1, #8
 80063be:	400b      	ands	r3, r1
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68d9      	ldr	r1, [r3, #12]
 80063c6:	23f0      	movs	r3, #240	; 0xf0
 80063c8:	011b      	lsls	r3, r3, #4
 80063ca:	400b      	ands	r3, r1
 80063cc:	431a      	orrs	r2, r3
 80063ce:	0011      	movs	r1, r2
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	015b      	lsls	r3, r3, #5
 80063d6:	401a      	ands	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	69da      	ldr	r2, [r3, #28]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4907      	ldr	r1, [pc, #28]	; (8006408 <HAL_SPI_Init+0x16c>)
 80063ec:	400a      	ands	r2, r1
 80063ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	225d      	movs	r2, #93	; 0x5d
 80063fa:	2101      	movs	r1, #1
 80063fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	0018      	movs	r0, r3
 8006402:	46bd      	mov	sp, r7
 8006404:	b004      	add	sp, #16
 8006406:	bd80      	pop	{r7, pc}
 8006408:	fffff7ff 	.word	0xfffff7ff

0800640c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b088      	sub	sp, #32
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	1dbb      	adds	r3, r7, #6
 800641a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800641c:	231f      	movs	r3, #31
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	225c      	movs	r2, #92	; 0x5c
 8006428:	5c9b      	ldrb	r3, [r3, r2]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_SPI_Transmit+0x26>
 800642e:	2302      	movs	r3, #2
 8006430:	e140      	b.n	80066b4 <HAL_SPI_Transmit+0x2a8>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	225c      	movs	r2, #92	; 0x5c
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800643a:	f7fc fd2b 	bl	8002e94 <HAL_GetTick>
 800643e:	0003      	movs	r3, r0
 8006440:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006442:	2316      	movs	r3, #22
 8006444:	18fb      	adds	r3, r7, r3
 8006446:	1dba      	adds	r2, r7, #6
 8006448:	8812      	ldrh	r2, [r2, #0]
 800644a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	225d      	movs	r2, #93	; 0x5d
 8006450:	5c9b      	ldrb	r3, [r3, r2]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	d004      	beq.n	8006462 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006458:	231f      	movs	r3, #31
 800645a:	18fb      	adds	r3, r7, r3
 800645c:	2202      	movs	r2, #2
 800645e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006460:	e11d      	b.n	800669e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_SPI_Transmit+0x64>
 8006468:	1dbb      	adds	r3, r7, #6
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006470:	231f      	movs	r3, #31
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	2201      	movs	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
    goto error;
 8006478:	e111      	b.n	800669e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	225d      	movs	r2, #93	; 0x5d
 800647e:	2103      	movs	r1, #3
 8006480:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	1dba      	adds	r2, r7, #6
 8006492:	8812      	ldrh	r2, [r2, #0]
 8006494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1dba      	adds	r2, r7, #6
 800649a:	8812      	ldrh	r2, [r2, #0]
 800649c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2244      	movs	r2, #68	; 0x44
 80064a8:	2100      	movs	r1, #0
 80064aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2246      	movs	r2, #70	; 0x46
 80064b0:	2100      	movs	r1, #0
 80064b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d110      	bne.n	80064ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2140      	movs	r1, #64	; 0x40
 80064d8:	438a      	bics	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	01c9      	lsls	r1, r1, #7
 80064ea:	430a      	orrs	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2240      	movs	r2, #64	; 0x40
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d007      	beq.n	800650c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2140      	movs	r1, #64	; 0x40
 8006508:	430a      	orrs	r2, r1
 800650a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	23e0      	movs	r3, #224	; 0xe0
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	429a      	cmp	r2, r3
 8006516:	d94e      	bls.n	80065b6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <HAL_SPI_Transmit+0x11e>
 8006520:	2316      	movs	r3, #22
 8006522:	18fb      	adds	r3, r7, r3
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d13f      	bne.n	80065aa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800654e:	e02c      	b.n	80065aa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2202      	movs	r2, #2
 8006558:	4013      	ands	r3, r2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d112      	bne.n	8006584 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	881a      	ldrh	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	1c9a      	adds	r2, r3, #2
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006582:	e012      	b.n	80065aa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006584:	f7fc fc86 	bl	8002e94 <HAL_GetTick>
 8006588:	0002      	movs	r2, r0
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	429a      	cmp	r2, r3
 8006592:	d802      	bhi.n	800659a <HAL_SPI_Transmit+0x18e>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_Transmit+0x194>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80065a0:	231f      	movs	r3, #31
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	2203      	movs	r2, #3
 80065a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80065a8:	e079      	b.n	800669e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1cd      	bne.n	8006550 <HAL_SPI_Transmit+0x144>
 80065b4:	e04f      	b.n	8006656 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d004      	beq.n	80065c8 <HAL_SPI_Transmit+0x1bc>
 80065be:	2316      	movs	r3, #22
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d141      	bne.n	800664c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80065ee:	e02d      	b.n	800664c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2202      	movs	r2, #2
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d113      	bne.n	8006626 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	7812      	ldrb	r2, [r2, #0]
 800660a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006624:	e012      	b.n	800664c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006626:	f7fc fc35 	bl	8002e94 <HAL_GetTick>
 800662a:	0002      	movs	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d802      	bhi.n	800663c <HAL_SPI_Transmit+0x230>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	d102      	bne.n	8006642 <HAL_SPI_Transmit+0x236>
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006642:	231f      	movs	r3, #31
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	2203      	movs	r2, #3
 8006648:	701a      	strb	r2, [r3, #0]
          goto error;
 800664a:	e028      	b.n	800669e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1cc      	bne.n	80065f0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006656:	69ba      	ldr	r2, [r7, #24]
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fde9 	bl	8007234 <SPI_EndRxTxTransaction>
 8006662:	1e03      	subs	r3, r0, #0
 8006664:	d002      	beq.n	800666c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006674:	2300      	movs	r3, #0
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668e:	2b00      	cmp	r3, #0
 8006690:	d004      	beq.n	800669c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006692:	231f      	movs	r3, #31
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	2201      	movs	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e000      	b.n	800669e <HAL_SPI_Transmit+0x292>
  }

error:
 800669c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	225d      	movs	r2, #93	; 0x5d
 80066a2:	2101      	movs	r1, #1
 80066a4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	225c      	movs	r2, #92	; 0x5c
 80066aa:	2100      	movs	r1, #0
 80066ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80066ae:	231f      	movs	r3, #31
 80066b0:	18fb      	adds	r3, r7, r3
 80066b2:	781b      	ldrb	r3, [r3, #0]
}
 80066b4:	0018      	movs	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b008      	add	sp, #32
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066bc:	b590      	push	{r4, r7, lr}
 80066be:	b089      	sub	sp, #36	; 0x24
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	1dbb      	adds	r3, r7, #6
 80066ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066cc:	2317      	movs	r3, #23
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	2382      	movs	r3, #130	; 0x82
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	429a      	cmp	r2, r3
 80066de:	d113      	bne.n	8006708 <HAL_SPI_Receive+0x4c>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10f      	bne.n	8006708 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	225d      	movs	r2, #93	; 0x5d
 80066ec:	2104      	movs	r1, #4
 80066ee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80066f0:	1dbb      	adds	r3, r7, #6
 80066f2:	881c      	ldrh	r4, [r3, #0]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	0023      	movs	r3, r4
 8006700:	f000 f928 	bl	8006954 <HAL_SPI_TransmitReceive>
 8006704:	0003      	movs	r3, r0
 8006706:	e11c      	b.n	8006942 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	225c      	movs	r2, #92	; 0x5c
 800670c:	5c9b      	ldrb	r3, [r3, r2]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_SPI_Receive+0x5a>
 8006712:	2302      	movs	r3, #2
 8006714:	e115      	b.n	8006942 <HAL_SPI_Receive+0x286>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	225c      	movs	r2, #92	; 0x5c
 800671a:	2101      	movs	r1, #1
 800671c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800671e:	f7fc fbb9 	bl	8002e94 <HAL_GetTick>
 8006722:	0003      	movs	r3, r0
 8006724:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	225d      	movs	r2, #93	; 0x5d
 800672a:	5c9b      	ldrb	r3, [r3, r2]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	d004      	beq.n	800673c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006732:	2317      	movs	r3, #23
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	2202      	movs	r2, #2
 8006738:	701a      	strb	r2, [r3, #0]
    goto error;
 800673a:	e0f7      	b.n	800692c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_SPI_Receive+0x8e>
 8006742:	1dbb      	adds	r3, r7, #6
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800674a:	2317      	movs	r3, #23
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	2201      	movs	r2, #1
 8006750:	701a      	strb	r2, [r3, #0]
    goto error;
 8006752:	e0eb      	b.n	800692c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	225d      	movs	r2, #93	; 0x5d
 8006758:	2104      	movs	r1, #4
 800675a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1dba      	adds	r2, r7, #6
 800676c:	2144      	movs	r1, #68	; 0x44
 800676e:	8812      	ldrh	r2, [r2, #0]
 8006770:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1dba      	adds	r2, r7, #6
 8006776:	2146      	movs	r1, #70	; 0x46
 8006778:	8812      	ldrh	r2, [r2, #0]
 800677a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	23e0      	movs	r3, #224	; 0xe0
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d908      	bls.n	80067b8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4966      	ldr	r1, [pc, #408]	; (800694c <HAL_SPI_Receive+0x290>)
 80067b2:	400a      	ands	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e008      	b.n	80067ca <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2180      	movs	r1, #128	; 0x80
 80067c4:	0149      	lsls	r1, r1, #5
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	2380      	movs	r3, #128	; 0x80
 80067d0:	021b      	lsls	r3, r3, #8
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d10f      	bne.n	80067f6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2140      	movs	r1, #64	; 0x40
 80067e2:	438a      	bics	r2, r1
 80067e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4957      	ldr	r1, [pc, #348]	; (8006950 <HAL_SPI_Receive+0x294>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2240      	movs	r2, #64	; 0x40
 80067fe:	4013      	ands	r3, r2
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d007      	beq.n	8006814 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2140      	movs	r1, #64	; 0x40
 8006810:	430a      	orrs	r2, r1
 8006812:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	23e0      	movs	r3, #224	; 0xe0
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	429a      	cmp	r2, r3
 800681e:	d900      	bls.n	8006822 <HAL_SPI_Receive+0x166>
 8006820:	e069      	b.n	80068f6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006822:	e031      	b.n	8006888 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2201      	movs	r2, #1
 800682c:	4013      	ands	r3, r2
 800682e:	2b01      	cmp	r3, #1
 8006830:	d117      	bne.n	8006862 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	001a      	movs	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	b2d2      	uxtb	r2, r2
 8006842:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2246      	movs	r2, #70	; 0x46
 8006852:	5a9b      	ldrh	r3, [r3, r2]
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b299      	uxth	r1, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2246      	movs	r2, #70	; 0x46
 800685e:	5299      	strh	r1, [r3, r2]
 8006860:	e012      	b.n	8006888 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006862:	f7fc fb17 	bl	8002e94 <HAL_GetTick>
 8006866:	0002      	movs	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d802      	bhi.n	8006878 <HAL_SPI_Receive+0x1bc>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	d102      	bne.n	800687e <HAL_SPI_Receive+0x1c2>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800687e:	2317      	movs	r3, #23
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	2203      	movs	r2, #3
 8006884:	701a      	strb	r2, [r3, #0]
          goto error;
 8006886:	e051      	b.n	800692c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2246      	movs	r2, #70	; 0x46
 800688c:	5a9b      	ldrh	r3, [r3, r2]
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1c7      	bne.n	8006824 <HAL_SPI_Receive+0x168>
 8006894:	e035      	b.n	8006902 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2201      	movs	r2, #1
 800689e:	4013      	ands	r3, r2
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d115      	bne.n	80068d0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	b292      	uxth	r2, r2
 80068b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	1c9a      	adds	r2, r3, #2
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2246      	movs	r2, #70	; 0x46
 80068c0:	5a9b      	ldrh	r3, [r3, r2]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b299      	uxth	r1, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2246      	movs	r2, #70	; 0x46
 80068cc:	5299      	strh	r1, [r3, r2]
 80068ce:	e012      	b.n	80068f6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d0:	f7fc fae0 	bl	8002e94 <HAL_GetTick>
 80068d4:	0002      	movs	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d802      	bhi.n	80068e6 <HAL_SPI_Receive+0x22a>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	d102      	bne.n	80068ec <HAL_SPI_Receive+0x230>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d104      	bne.n	80068f6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80068ec:	2317      	movs	r3, #23
 80068ee:	18fb      	adds	r3, r7, r3
 80068f0:	2203      	movs	r2, #3
 80068f2:	701a      	strb	r2, [r3, #0]
          goto error;
 80068f4:	e01a      	b.n	800692c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2246      	movs	r2, #70	; 0x46
 80068fa:	5a9b      	ldrh	r3, [r3, r2]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1c9      	bne.n	8006896 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	0018      	movs	r0, r3
 800690a:	f000 fc35 	bl	8007178 <SPI_EndRxTransaction>
 800690e:	1e03      	subs	r3, r0, #0
 8006910:	d002      	beq.n	8006918 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006920:	2317      	movs	r3, #23
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	2201      	movs	r2, #1
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	e000      	b.n	800692c <HAL_SPI_Receive+0x270>
  }

error :
 800692a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	225d      	movs	r2, #93	; 0x5d
 8006930:	2101      	movs	r1, #1
 8006932:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	225c      	movs	r2, #92	; 0x5c
 8006938:	2100      	movs	r1, #0
 800693a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800693c:	2317      	movs	r3, #23
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	781b      	ldrb	r3, [r3, #0]
}
 8006942:	0018      	movs	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	b007      	add	sp, #28
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	ffffefff 	.word	0xffffefff
 8006950:	ffffbfff 	.word	0xffffbfff

08006954 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08a      	sub	sp, #40	; 0x28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	001a      	movs	r2, r3
 8006962:	1cbb      	adds	r3, r7, #2
 8006964:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006966:	2301      	movs	r3, #1
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800696a:	2323      	movs	r3, #35	; 0x23
 800696c:	18fb      	adds	r3, r7, r3
 800696e:	2200      	movs	r2, #0
 8006970:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	225c      	movs	r2, #92	; 0x5c
 8006976:	5c9b      	ldrb	r3, [r3, r2]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d101      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x2c>
 800697c:	2302      	movs	r3, #2
 800697e:	e1b5      	b.n	8006cec <HAL_SPI_TransmitReceive+0x398>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	225c      	movs	r2, #92	; 0x5c
 8006984:	2101      	movs	r1, #1
 8006986:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006988:	f7fc fa84 	bl	8002e94 <HAL_GetTick>
 800698c:	0003      	movs	r3, r0
 800698e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006990:	201b      	movs	r0, #27
 8006992:	183b      	adds	r3, r7, r0
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	215d      	movs	r1, #93	; 0x5d
 8006998:	5c52      	ldrb	r2, [r2, r1]
 800699a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80069a2:	2312      	movs	r3, #18
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	1cba      	adds	r2, r7, #2
 80069a8:	8812      	ldrh	r2, [r2, #0]
 80069aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069ac:	183b      	adds	r3, r7, r0
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d011      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x84>
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	2382      	movs	r3, #130	; 0x82
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d107      	bne.n	80069ce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_SPI_TransmitReceive+0x7a>
 80069c6:	183b      	adds	r3, r7, r0
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d004      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80069ce:	2323      	movs	r3, #35	; 0x23
 80069d0:	18fb      	adds	r3, r7, r3
 80069d2:	2202      	movs	r2, #2
 80069d4:	701a      	strb	r2, [r3, #0]
    goto error;
 80069d6:	e17e      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d006      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x98>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x98>
 80069e4:	1cbb      	adds	r3, r7, #2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80069ec:	2323      	movs	r3, #35	; 0x23
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80069f4:	e16f      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	225d      	movs	r2, #93	; 0x5d
 80069fa:	5c9b      	ldrb	r3, [r3, r2]
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d003      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	225d      	movs	r2, #93	; 0x5d
 8006a06:	2105      	movs	r1, #5
 8006a08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1cba      	adds	r2, r7, #2
 8006a1a:	2146      	movs	r1, #70	; 0x46
 8006a1c:	8812      	ldrh	r2, [r2, #0]
 8006a1e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	1cba      	adds	r2, r7, #2
 8006a24:	2144      	movs	r1, #68	; 0x44
 8006a26:	8812      	ldrh	r2, [r2, #0]
 8006a28:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1cba      	adds	r2, r7, #2
 8006a34:	8812      	ldrh	r2, [r2, #0]
 8006a36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1cba      	adds	r2, r7, #2
 8006a3c:	8812      	ldrh	r2, [r2, #0]
 8006a3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	23e0      	movs	r3, #224	; 0xe0
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d908      	bls.n	8006a6a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	49a4      	ldr	r1, [pc, #656]	; (8006cf4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006a64:	400a      	ands	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
 8006a68:	e008      	b.n	8006a7c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2180      	movs	r1, #128	; 0x80
 8006a76:	0149      	lsls	r1, r1, #5
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2240      	movs	r2, #64	; 0x40
 8006a84:	4013      	ands	r3, r2
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d007      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2140      	movs	r1, #64	; 0x40
 8006a96:	430a      	orrs	r2, r1
 8006a98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	23e0      	movs	r3, #224	; 0xe0
 8006aa0:	00db      	lsls	r3, r3, #3
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d800      	bhi.n	8006aa8 <HAL_SPI_TransmitReceive+0x154>
 8006aa6:	e07f      	b.n	8006ba8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_SPI_TransmitReceive+0x168>
 8006ab0:	2312      	movs	r3, #18
 8006ab2:	18fb      	adds	r3, r7, r3
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d000      	beq.n	8006abc <HAL_SPI_TransmitReceive+0x168>
 8006aba:	e069      	b.n	8006b90 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	881a      	ldrh	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae0:	e056      	b.n	8006b90 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d11b      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x1d4>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d016      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x1d4>
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d113      	bne.n	8006b28 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	881a      	ldrh	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	1c9a      	adds	r2, r3, #2
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d11c      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x21c>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2246      	movs	r2, #70	; 0x46
 8006b3a:	5a9b      	ldrh	r3, [r3, r2]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	1c9a      	adds	r2, r3, #2
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2246      	movs	r2, #70	; 0x46
 8006b5e:	5a9b      	ldrh	r3, [r3, r2]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b299      	uxth	r1, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2246      	movs	r2, #70	; 0x46
 8006b6a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b70:	f7fc f990 	bl	8002e94 <HAL_GetTick>
 8006b74:	0002      	movs	r2, r0
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d807      	bhi.n	8006b90 <HAL_SPI_TransmitReceive+0x23c>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	3301      	adds	r3, #1
 8006b84:	d004      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006b86:	2323      	movs	r3, #35	; 0x23
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006b8e:	e0a2      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1a3      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x18e>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2246      	movs	r2, #70	; 0x46
 8006b9e:	5a9b      	ldrh	r3, [r3, r2]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d19d      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x18e>
 8006ba6:	e085      	b.n	8006cb4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_SPI_TransmitReceive+0x268>
 8006bb0:	2312      	movs	r3, #18
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d000      	beq.n	8006bbc <HAL_SPI_TransmitReceive+0x268>
 8006bba:	e070      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	7812      	ldrb	r2, [r2, #0]
 8006bc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006be2:	e05c      	b.n	8006c9e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	2202      	movs	r2, #2
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d11c      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x2d8>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d017      	beq.n	8006c2c <HAL_SPI_TransmitReceive+0x2d8>
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d114      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	2201      	movs	r2, #1
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d11e      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x324>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2246      	movs	r2, #70	; 0x46
 8006c3e:	5a9b      	ldrh	r3, [r3, r2]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d018      	beq.n	8006c78 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	001a      	movs	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2246      	movs	r2, #70	; 0x46
 8006c66:	5a9b      	ldrh	r3, [r3, r2]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b299      	uxth	r1, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2246      	movs	r2, #70	; 0x46
 8006c72:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c74:	2301      	movs	r3, #1
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c78:	f7fc f90c 	bl	8002e94 <HAL_GetTick>
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d802      	bhi.n	8006c8e <HAL_SPI_TransmitReceive+0x33a>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	d102      	bne.n	8006c94 <HAL_SPI_TransmitReceive+0x340>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006c94:	2323      	movs	r3, #35	; 0x23
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	2203      	movs	r2, #3
 8006c9a:	701a      	strb	r2, [r3, #0]
        goto error;
 8006c9c:	e01b      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d19d      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x290>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2246      	movs	r2, #70	; 0x46
 8006cac:	5a9b      	ldrh	r3, [r3, r2]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d197      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f000 faba 	bl	8007234 <SPI_EndRxTxTransaction>
 8006cc0:	1e03      	subs	r3, r0, #0
 8006cc2:	d007      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006cc4:	2323      	movs	r3, #35	; 0x23
 8006cc6:	18fb      	adds	r3, r7, r3
 8006cc8:	2201      	movs	r2, #1
 8006cca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	661a      	str	r2, [r3, #96]	; 0x60
 8006cd2:	e000      	b.n	8006cd6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006cd4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	225d      	movs	r2, #93	; 0x5d
 8006cda:	2101      	movs	r1, #1
 8006cdc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	225c      	movs	r2, #92	; 0x5c
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006ce6:	2323      	movs	r3, #35	; 0x23
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	781b      	ldrb	r3, [r3, #0]
}
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b00a      	add	sp, #40	; 0x28
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	ffffefff 	.word	0xffffefff

08006cf8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	001a      	movs	r2, r3
 8006d16:	2301      	movs	r3, #1
 8006d18:	4013      	ands	r3, r2
 8006d1a:	d10f      	bne.n	8006d3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006d22:	d00b      	beq.n	8006d3c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	099b      	lsrs	r3, r3, #6
 8006d28:	001a      	movs	r2, r3
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d005      	beq.n	8006d3c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	0010      	movs	r0, r2
 8006d38:	4798      	blx	r3
    return;
 8006d3a:	e0d5      	b.n	8006ee8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	085b      	lsrs	r3, r3, #1
 8006d40:	001a      	movs	r2, r3
 8006d42:	2301      	movs	r3, #1
 8006d44:	4013      	ands	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <HAL_SPI_IRQHandler+0x68>
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	09db      	lsrs	r3, r3, #7
 8006d4c:	001a      	movs	r2, r3
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4013      	ands	r3, r2
 8006d52:	d005      	beq.n	8006d60 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	0010      	movs	r0, r2
 8006d5c:	4798      	blx	r3
    return;
 8006d5e:	e0c3      	b.n	8006ee8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	001a      	movs	r2, r3
 8006d66:	2301      	movs	r3, #1
 8006d68:	4013      	ands	r3, r2
 8006d6a:	d10c      	bne.n	8006d86 <HAL_SPI_IRQHandler+0x8e>
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	099b      	lsrs	r3, r3, #6
 8006d70:	001a      	movs	r2, r3
 8006d72:	2301      	movs	r3, #1
 8006d74:	4013      	ands	r3, r2
 8006d76:	d106      	bne.n	8006d86 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	2301      	movs	r3, #1
 8006d80:	4013      	ands	r3, r2
 8006d82:	d100      	bne.n	8006d86 <HAL_SPI_IRQHandler+0x8e>
 8006d84:	e0b0      	b.n	8006ee8 <HAL_SPI_IRQHandler+0x1f0>
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	001a      	movs	r2, r3
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d100      	bne.n	8006d94 <HAL_SPI_IRQHandler+0x9c>
 8006d92:	e0a9      	b.n	8006ee8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	d023      	beq.n	8006de8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	225d      	movs	r2, #93	; 0x5d
 8006da4:	5c9b      	ldrb	r3, [r3, r2]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d011      	beq.n	8006dd0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db0:	2204      	movs	r2, #4
 8006db2:	431a      	orrs	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006db8:	2300      	movs	r3, #0
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	e00b      	b.n	8006de8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	613b      	str	r3, [r7, #16]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	693b      	ldr	r3, [r7, #16]
        return;
 8006de6:	e07f      	b.n	8006ee8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	001a      	movs	r2, r3
 8006dee:	2301      	movs	r3, #1
 8006df0:	4013      	ands	r3, r2
 8006df2:	d014      	beq.n	8006e1e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df8:	2201      	movs	r2, #1
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2140      	movs	r1, #64	; 0x40
 8006e18:	438a      	bics	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	0a1b      	lsrs	r3, r3, #8
 8006e22:	001a      	movs	r2, r3
 8006e24:	2301      	movs	r3, #1
 8006e26:	4013      	ands	r3, r2
 8006e28:	d00c      	beq.n	8006e44 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2e:	2208      	movs	r2, #8
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006e36:	2300      	movs	r3, #0
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d04c      	beq.n	8006ee6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	21e0      	movs	r1, #224	; 0xe0
 8006e58:	438a      	bics	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	225d      	movs	r2, #93	; 0x5d
 8006e60:	2101      	movs	r1, #1
 8006e62:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	2202      	movs	r2, #2
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d103      	bne.n	8006e74 <HAL_SPI_IRQHandler+0x17c>
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4013      	ands	r3, r2
 8006e72:	d032      	beq.n	8006eda <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2103      	movs	r1, #3
 8006e80:	438a      	bics	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e90:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <HAL_SPI_IRQHandler+0x1f8>)
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7fc fc07 	bl	80036ac <HAL_DMA_Abort_IT>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea6:	2240      	movs	r2, #64	; 0x40
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d016      	beq.n	8006ee4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	4a0d      	ldr	r2, [pc, #52]	; (8006ef0 <HAL_SPI_IRQHandler+0x1f8>)
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7fc fbf2 	bl	80036ac <HAL_DMA_Abort_IT>
 8006ec8:	1e03      	subs	r3, r0, #0
 8006eca:	d00b      	beq.n	8006ee4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed0:	2240      	movs	r2, #64	; 0x40
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006ed8:	e004      	b.n	8006ee4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f000 f809 	bl	8006ef4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ee2:	e000      	b.n	8006ee6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006ee4:	46c0      	nop			; (mov r8, r8)
    return;
 8006ee6:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b008      	add	sp, #32
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	08006f05 	.word	0x08006f05

08006ef4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46bd      	mov	sp, r7
 8006f00:	b002      	add	sp, #8
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2246      	movs	r2, #70	; 0x46
 8006f16:	2100      	movs	r1, #0
 8006f18:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff ffe6 	bl	8006ef4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006f28:	46c0      	nop			; (mov r8, r8)
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b004      	add	sp, #16
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	1dfb      	adds	r3, r7, #7
 8006f3e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f40:	f7fb ffa8 	bl	8002e94 <HAL_GetTick>
 8006f44:	0002      	movs	r2, r0
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	18d3      	adds	r3, r2, r3
 8006f4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f50:	f7fb ffa0 	bl	8002e94 <HAL_GetTick>
 8006f54:	0003      	movs	r3, r0
 8006f56:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f58:	4b3a      	ldr	r3, [pc, #232]	; (8007044 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	015b      	lsls	r3, r3, #5
 8006f5e:	0d1b      	lsrs	r3, r3, #20
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	4353      	muls	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f66:	e058      	b.n	800701a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	d055      	beq.n	800701a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f6e:	f7fb ff91 	bl	8002e94 <HAL_GetTick>
 8006f72:	0002      	movs	r2, r0
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d902      	bls.n	8006f84 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d142      	bne.n	800700a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	21e0      	movs	r1, #224	; 0xe0
 8006f90:	438a      	bics	r2, r1
 8006f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	2382      	movs	r3, #130	; 0x82
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d113      	bne.n	8006fc8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	689a      	ldr	r2, [r3, #8]
 8006fa4:	2380      	movs	r3, #128	; 0x80
 8006fa6:	021b      	lsls	r3, r3, #8
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d005      	beq.n	8006fb8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d107      	bne.n	8006fc8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2140      	movs	r1, #64	; 0x40
 8006fc4:	438a      	bics	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	019b      	lsls	r3, r3, #6
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d110      	bne.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	491a      	ldr	r1, [pc, #104]	; (8007048 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006fe0:	400a      	ands	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2180      	movs	r1, #128	; 0x80
 8006ff0:	0189      	lsls	r1, r1, #6
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	225d      	movs	r2, #93	; 0x5d
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	225c      	movs	r2, #92	; 0x5c
 8007002:	2100      	movs	r1, #0
 8007004:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e017      	b.n	800703a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	3b01      	subs	r3, #1
 8007018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	4013      	ands	r3, r2
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	425a      	negs	r2, r3
 800702a:	4153      	adcs	r3, r2
 800702c:	b2db      	uxtb	r3, r3
 800702e:	001a      	movs	r2, r3
 8007030:	1dfb      	adds	r3, r7, #7
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d197      	bne.n	8006f68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	0018      	movs	r0, r3
 800703c:	46bd      	mov	sp, r7
 800703e:	b008      	add	sp, #32
 8007040:	bd80      	pop	{r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	20005134 	.word	0x20005134
 8007048:	ffffdfff 	.word	0xffffdfff

0800704c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800705a:	f7fb ff1b 	bl	8002e94 <HAL_GetTick>
 800705e:	0002      	movs	r2, r0
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	18d3      	adds	r3, r2, r3
 8007068:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800706a:	f7fb ff13 	bl	8002e94 <HAL_GetTick>
 800706e:	0003      	movs	r3, r0
 8007070:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007072:	4b3f      	ldr	r3, [pc, #252]	; (8007170 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	0013      	movs	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	189b      	adds	r3, r3, r2
 800707c:	00da      	lsls	r2, r3, #3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	0d1b      	lsrs	r3, r3, #20
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	4353      	muls	r3, r2
 8007086:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007088:	e064      	b.n	8007154 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	23c0      	movs	r3, #192	; 0xc0
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	429a      	cmp	r2, r3
 8007092:	d106      	bne.n	80070a2 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	d055      	beq.n	8007154 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070a8:	f7fb fef4 	bl	8002e94 <HAL_GetTick>
 80070ac:	0002      	movs	r2, r0
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d902      	bls.n	80070be <SPI_WaitFifoStateUntilTimeout+0x72>
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d142      	bne.n	8007144 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	21e0      	movs	r1, #224	; 0xe0
 80070ca:	438a      	bics	r2, r1
 80070cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	2382      	movs	r3, #130	; 0x82
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d113      	bne.n	8007102 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	2380      	movs	r3, #128	; 0x80
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d005      	beq.n	80070f2 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	2380      	movs	r3, #128	; 0x80
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d107      	bne.n	8007102 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2140      	movs	r1, #64	; 0x40
 80070fe:	438a      	bics	r2, r1
 8007100:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007106:	2380      	movs	r3, #128	; 0x80
 8007108:	019b      	lsls	r3, r3, #6
 800710a:	429a      	cmp	r2, r3
 800710c:	d110      	bne.n	8007130 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4916      	ldr	r1, [pc, #88]	; (8007174 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800711a:	400a      	ands	r2, r1
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2180      	movs	r1, #128	; 0x80
 800712a:	0189      	lsls	r1, r1, #6
 800712c:	430a      	orrs	r2, r1
 800712e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	225d      	movs	r2, #93	; 0x5d
 8007134:	2101      	movs	r1, #1
 8007136:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	225c      	movs	r2, #92	; 0x5c
 800713c:	2100      	movs	r1, #0
 800713e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e010      	b.n	8007166 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800714a:	2300      	movs	r3, #0
 800714c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	3b01      	subs	r3, #1
 8007152:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d192      	bne.n	800708a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	0018      	movs	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	b008      	add	sp, #32
 800716c:	bd80      	pop	{r7, pc}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	20005134 	.word	0x20005134
 8007174:	ffffdfff 	.word	0xffffdfff

08007178 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	2382      	movs	r3, #130	; 0x82
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	429a      	cmp	r2, r3
 800718e:	d113      	bne.n	80071b8 <SPI_EndRxTransaction+0x40>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	021b      	lsls	r3, r3, #8
 8007198:	429a      	cmp	r2, r3
 800719a:	d005      	beq.n	80071a8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	2380      	movs	r3, #128	; 0x80
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d107      	bne.n	80071b8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2140      	movs	r1, #64	; 0x40
 80071b4:	438a      	bics	r2, r1
 80071b6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	0013      	movs	r3, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	2180      	movs	r1, #128	; 0x80
 80071c6:	f7ff feb3 	bl	8006f30 <SPI_WaitFlagStateUntilTimeout>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d007      	beq.n	80071de <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d2:	2220      	movs	r2, #32
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e026      	b.n	800722c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	2382      	movs	r3, #130	; 0x82
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d11f      	bne.n	800722a <SPI_EndRxTransaction+0xb2>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	2380      	movs	r3, #128	; 0x80
 80071f0:	021b      	lsls	r3, r3, #8
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d005      	beq.n	8007202 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	2380      	movs	r3, #128	; 0x80
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	429a      	cmp	r2, r3
 8007200:	d113      	bne.n	800722a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	23c0      	movs	r3, #192	; 0xc0
 8007206:	00d9      	lsls	r1, r3, #3
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	0013      	movs	r3, r2
 8007210:	2200      	movs	r2, #0
 8007212:	f7ff ff1b 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 8007216:	1e03      	subs	r3, r0, #0
 8007218:	d007      	beq.n	800722a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	2220      	movs	r2, #32
 8007220:	431a      	orrs	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e000      	b.n	800722c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	0018      	movs	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	b004      	add	sp, #16
 8007232:	bd80      	pop	{r7, pc}

08007234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	23c0      	movs	r3, #192	; 0xc0
 8007244:	0159      	lsls	r1, r3, #5
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	0013      	movs	r3, r2
 800724e:	2200      	movs	r2, #0
 8007250:	f7ff fefc 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 8007254:	1e03      	subs	r3, r0, #0
 8007256:	d007      	beq.n	8007268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725c:	2220      	movs	r2, #32
 800725e:	431a      	orrs	r2, r3
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e027      	b.n	80072b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	0013      	movs	r3, r2
 8007272:	2200      	movs	r2, #0
 8007274:	2180      	movs	r1, #128	; 0x80
 8007276:	f7ff fe5b 	bl	8006f30 <SPI_WaitFlagStateUntilTimeout>
 800727a:	1e03      	subs	r3, r0, #0
 800727c:	d007      	beq.n	800728e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007282:	2220      	movs	r2, #32
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e014      	b.n	80072b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	23c0      	movs	r3, #192	; 0xc0
 8007292:	00d9      	lsls	r1, r3, #3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	0013      	movs	r3, r2
 800729c:	2200      	movs	r2, #0
 800729e:	f7ff fed5 	bl	800704c <SPI_WaitFifoStateUntilTimeout>
 80072a2:	1e03      	subs	r3, r0, #0
 80072a4:	d007      	beq.n	80072b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072aa:	2220      	movs	r2, #32
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e000      	b.n	80072b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	0018      	movs	r0, r3
 80072ba:	46bd      	mov	sp, r7
 80072bc:	b004      	add	sp, #16
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d101      	bne.n	80072d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e04a      	b.n	8007368 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	223d      	movs	r2, #61	; 0x3d
 80072d6:	5c9b      	ldrb	r3, [r3, r2]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d107      	bne.n	80072ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	223c      	movs	r2, #60	; 0x3c
 80072e2:	2100      	movs	r1, #0
 80072e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	0018      	movs	r0, r3
 80072ea:	f7fb fb47 	bl	800297c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	223d      	movs	r2, #61	; 0x3d
 80072f2:	2102      	movs	r1, #2
 80072f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	3304      	adds	r3, #4
 80072fe:	0019      	movs	r1, r3
 8007300:	0010      	movs	r0, r2
 8007302:	f000 fb41 	bl	8007988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2248      	movs	r2, #72	; 0x48
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	223e      	movs	r2, #62	; 0x3e
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	223f      	movs	r2, #63	; 0x3f
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2240      	movs	r2, #64	; 0x40
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2241      	movs	r2, #65	; 0x41
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2242      	movs	r2, #66	; 0x42
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2243      	movs	r2, #67	; 0x43
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2244      	movs	r2, #68	; 0x44
 8007342:	2101      	movs	r1, #1
 8007344:	5499      	strb	r1, [r3, r2]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2245      	movs	r2, #69	; 0x45
 800734a:	2101      	movs	r1, #1
 800734c:	5499      	strb	r1, [r3, r2]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2246      	movs	r2, #70	; 0x46
 8007352:	2101      	movs	r1, #1
 8007354:	5499      	strb	r1, [r3, r2]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2247      	movs	r2, #71	; 0x47
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	223d      	movs	r2, #61	; 0x3d
 8007362:	2101      	movs	r1, #1
 8007364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	0018      	movs	r0, r3
 800736a:	46bd      	mov	sp, r7
 800736c:	b002      	add	sp, #8
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e04a      	b.n	8007418 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	223d      	movs	r2, #61	; 0x3d
 8007386:	5c9b      	ldrb	r3, [r3, r2]
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	223c      	movs	r2, #60	; 0x3c
 8007392:	2100      	movs	r1, #0
 8007394:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0018      	movs	r0, r3
 800739a:	f000 f841 	bl	8007420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	223d      	movs	r2, #61	; 0x3d
 80073a2:	2102      	movs	r1, #2
 80073a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3304      	adds	r3, #4
 80073ae:	0019      	movs	r1, r3
 80073b0:	0010      	movs	r0, r2
 80073b2:	f000 fae9 	bl	8007988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2248      	movs	r2, #72	; 0x48
 80073ba:	2101      	movs	r1, #1
 80073bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	223e      	movs	r2, #62	; 0x3e
 80073c2:	2101      	movs	r1, #1
 80073c4:	5499      	strb	r1, [r3, r2]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	223f      	movs	r2, #63	; 0x3f
 80073ca:	2101      	movs	r1, #1
 80073cc:	5499      	strb	r1, [r3, r2]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2240      	movs	r2, #64	; 0x40
 80073d2:	2101      	movs	r1, #1
 80073d4:	5499      	strb	r1, [r3, r2]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2241      	movs	r2, #65	; 0x41
 80073da:	2101      	movs	r1, #1
 80073dc:	5499      	strb	r1, [r3, r2]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2242      	movs	r2, #66	; 0x42
 80073e2:	2101      	movs	r1, #1
 80073e4:	5499      	strb	r1, [r3, r2]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2243      	movs	r2, #67	; 0x43
 80073ea:	2101      	movs	r1, #1
 80073ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2244      	movs	r2, #68	; 0x44
 80073f2:	2101      	movs	r1, #1
 80073f4:	5499      	strb	r1, [r3, r2]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2245      	movs	r2, #69	; 0x45
 80073fa:	2101      	movs	r1, #1
 80073fc:	5499      	strb	r1, [r3, r2]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2246      	movs	r2, #70	; 0x46
 8007402:	2101      	movs	r1, #1
 8007404:	5499      	strb	r1, [r3, r2]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2247      	movs	r2, #71	; 0x47
 800740a:	2101      	movs	r1, #1
 800740c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	223d      	movs	r2, #61	; 0x3d
 8007412:	2101      	movs	r1, #1
 8007414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}

08007420 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007428:	46c0      	nop			; (mov r8, r8)
 800742a:	46bd      	mov	sp, r7
 800742c:	b002      	add	sp, #8
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d108      	bne.n	8007452 <HAL_TIM_PWM_Start+0x22>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	223e      	movs	r2, #62	; 0x3e
 8007444:	5c9b      	ldrb	r3, [r3, r2]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	1e5a      	subs	r2, r3, #1
 800744c:	4193      	sbcs	r3, r2
 800744e:	b2db      	uxtb	r3, r3
 8007450:	e037      	b.n	80074c2 <HAL_TIM_PWM_Start+0x92>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b04      	cmp	r3, #4
 8007456:	d108      	bne.n	800746a <HAL_TIM_PWM_Start+0x3a>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	223f      	movs	r2, #63	; 0x3f
 800745c:	5c9b      	ldrb	r3, [r3, r2]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	4193      	sbcs	r3, r2
 8007466:	b2db      	uxtb	r3, r3
 8007468:	e02b      	b.n	80074c2 <HAL_TIM_PWM_Start+0x92>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b08      	cmp	r3, #8
 800746e:	d108      	bne.n	8007482 <HAL_TIM_PWM_Start+0x52>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2240      	movs	r2, #64	; 0x40
 8007474:	5c9b      	ldrb	r3, [r3, r2]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	1e5a      	subs	r2, r3, #1
 800747c:	4193      	sbcs	r3, r2
 800747e:	b2db      	uxtb	r3, r3
 8007480:	e01f      	b.n	80074c2 <HAL_TIM_PWM_Start+0x92>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b0c      	cmp	r3, #12
 8007486:	d108      	bne.n	800749a <HAL_TIM_PWM_Start+0x6a>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2241      	movs	r2, #65	; 0x41
 800748c:	5c9b      	ldrb	r3, [r3, r2]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	1e5a      	subs	r2, r3, #1
 8007494:	4193      	sbcs	r3, r2
 8007496:	b2db      	uxtb	r3, r3
 8007498:	e013      	b.n	80074c2 <HAL_TIM_PWM_Start+0x92>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b10      	cmp	r3, #16
 800749e:	d108      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x82>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2242      	movs	r2, #66	; 0x42
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	3b01      	subs	r3, #1
 80074aa:	1e5a      	subs	r2, r3, #1
 80074ac:	4193      	sbcs	r3, r2
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e007      	b.n	80074c2 <HAL_TIM_PWM_Start+0x92>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2243      	movs	r2, #67	; 0x43
 80074b6:	5c9b      	ldrb	r3, [r3, r2]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	1e5a      	subs	r2, r3, #1
 80074be:	4193      	sbcs	r3, r2
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e08b      	b.n	80075e2 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d104      	bne.n	80074da <HAL_TIM_PWM_Start+0xaa>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	223e      	movs	r2, #62	; 0x3e
 80074d4:	2102      	movs	r1, #2
 80074d6:	5499      	strb	r1, [r3, r2]
 80074d8:	e023      	b.n	8007522 <HAL_TIM_PWM_Start+0xf2>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b04      	cmp	r3, #4
 80074de:	d104      	bne.n	80074ea <HAL_TIM_PWM_Start+0xba>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	223f      	movs	r2, #63	; 0x3f
 80074e4:	2102      	movs	r1, #2
 80074e6:	5499      	strb	r1, [r3, r2]
 80074e8:	e01b      	b.n	8007522 <HAL_TIM_PWM_Start+0xf2>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d104      	bne.n	80074fa <HAL_TIM_PWM_Start+0xca>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2240      	movs	r2, #64	; 0x40
 80074f4:	2102      	movs	r1, #2
 80074f6:	5499      	strb	r1, [r3, r2]
 80074f8:	e013      	b.n	8007522 <HAL_TIM_PWM_Start+0xf2>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b0c      	cmp	r3, #12
 80074fe:	d104      	bne.n	800750a <HAL_TIM_PWM_Start+0xda>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2241      	movs	r2, #65	; 0x41
 8007504:	2102      	movs	r1, #2
 8007506:	5499      	strb	r1, [r3, r2]
 8007508:	e00b      	b.n	8007522 <HAL_TIM_PWM_Start+0xf2>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b10      	cmp	r3, #16
 800750e:	d104      	bne.n	800751a <HAL_TIM_PWM_Start+0xea>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2242      	movs	r2, #66	; 0x42
 8007514:	2102      	movs	r1, #2
 8007516:	5499      	strb	r1, [r3, r2]
 8007518:	e003      	b.n	8007522 <HAL_TIM_PWM_Start+0xf2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2243      	movs	r2, #67	; 0x43
 800751e:	2102      	movs	r1, #2
 8007520:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6839      	ldr	r1, [r7, #0]
 8007528:	2201      	movs	r2, #1
 800752a:	0018      	movs	r0, r3
 800752c:	f000 fe0c 	bl	8008148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a2d      	ldr	r2, [pc, #180]	; (80075ec <HAL_TIM_PWM_Start+0x1bc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00e      	beq.n	8007558 <HAL_TIM_PWM_Start+0x128>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a2c      	ldr	r2, [pc, #176]	; (80075f0 <HAL_TIM_PWM_Start+0x1c0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d009      	beq.n	8007558 <HAL_TIM_PWM_Start+0x128>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a2a      	ldr	r2, [pc, #168]	; (80075f4 <HAL_TIM_PWM_Start+0x1c4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d004      	beq.n	8007558 <HAL_TIM_PWM_Start+0x128>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <HAL_TIM_PWM_Start+0x1c8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d101      	bne.n	800755c <HAL_TIM_PWM_Start+0x12c>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <HAL_TIM_PWM_Start+0x12e>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d008      	beq.n	8007574 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2180      	movs	r1, #128	; 0x80
 800756e:	0209      	lsls	r1, r1, #8
 8007570:	430a      	orrs	r2, r1
 8007572:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <HAL_TIM_PWM_Start+0x1bc>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <HAL_TIM_PWM_Start+0x16e>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	2380      	movs	r3, #128	; 0x80
 8007584:	05db      	lsls	r3, r3, #23
 8007586:	429a      	cmp	r2, r3
 8007588:	d009      	beq.n	800759e <HAL_TIM_PWM_Start+0x16e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <HAL_TIM_PWM_Start+0x1cc>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d004      	beq.n	800759e <HAL_TIM_PWM_Start+0x16e>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <HAL_TIM_PWM_Start+0x1c0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d116      	bne.n	80075cc <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	4a16      	ldr	r2, [pc, #88]	; (8007600 <HAL_TIM_PWM_Start+0x1d0>)
 80075a6:	4013      	ands	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d016      	beq.n	80075de <HAL_TIM_PWM_Start+0x1ae>
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	2380      	movs	r3, #128	; 0x80
 80075b4:	025b      	lsls	r3, r3, #9
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d011      	beq.n	80075de <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2101      	movs	r1, #1
 80075c6:	430a      	orrs	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ca:	e008      	b.n	80075de <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2101      	movs	r1, #1
 80075d8:	430a      	orrs	r2, r1
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e000      	b.n	80075e0 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075de:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b004      	add	sp, #16
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40014000 	.word	0x40014000
 80075f4:	40014400 	.word	0x40014400
 80075f8:	40014800 	.word	0x40014800
 80075fc:	40000400 	.word	0x40000400
 8007600:	00010007 	.word	0x00010007

08007604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	223c      	movs	r2, #60	; 0x3c
 8007614:	5c9b      	ldrb	r3, [r3, r2]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800761a:	2302      	movs	r3, #2
 800761c:	e0df      	b.n	80077de <HAL_TIM_PWM_ConfigChannel+0x1da>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	223c      	movs	r2, #60	; 0x3c
 8007622:	2101      	movs	r1, #1
 8007624:	5499      	strb	r1, [r3, r2]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b14      	cmp	r3, #20
 800762a:	d900      	bls.n	800762e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800762c:	e0d1      	b.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	009a      	lsls	r2, r3, #2
 8007632:	4b6d      	ldr	r3, [pc, #436]	; (80077e8 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8007634:	18d3      	adds	r3, r2, r3
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	0011      	movs	r1, r2
 8007642:	0018      	movs	r0, r3
 8007644:	f000 fa20 	bl	8007a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2108      	movs	r1, #8
 8007654:	430a      	orrs	r2, r1
 8007656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2104      	movs	r1, #4
 8007664:	438a      	bics	r2, r1
 8007666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	619a      	str	r2, [r3, #24]
      break;
 800767a:	e0ab      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	0011      	movs	r1, r2
 8007684:	0018      	movs	r0, r3
 8007686:	f000 fa89 	bl	8007b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699a      	ldr	r2, [r3, #24]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2180      	movs	r1, #128	; 0x80
 8007696:	0109      	lsls	r1, r1, #4
 8007698:	430a      	orrs	r2, r1
 800769a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4951      	ldr	r1, [pc, #324]	; (80077ec <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80076a8:	400a      	ands	r2, r1
 80076aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6999      	ldr	r1, [r3, #24]
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	021a      	lsls	r2, r3, #8
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	619a      	str	r2, [r3, #24]
      break;
 80076c0:	e088      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 faea 	bl	8007ca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	69da      	ldr	r2, [r3, #28]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2108      	movs	r1, #8
 80076dc:	430a      	orrs	r2, r1
 80076de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69da      	ldr	r2, [r3, #28]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2104      	movs	r1, #4
 80076ec:	438a      	bics	r2, r1
 80076ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69d9      	ldr	r1, [r3, #28]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691a      	ldr	r2, [r3, #16]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	61da      	str	r2, [r3, #28]
      break;
 8007702:	e067      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	0011      	movs	r1, r2
 800770c:	0018      	movs	r0, r3
 800770e:	f000 fb51 	bl	8007db4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69da      	ldr	r2, [r3, #28]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2180      	movs	r1, #128	; 0x80
 800771e:	0109      	lsls	r1, r1, #4
 8007720:	430a      	orrs	r2, r1
 8007722:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	492f      	ldr	r1, [pc, #188]	; (80077ec <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007730:	400a      	ands	r2, r1
 8007732:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69d9      	ldr	r1, [r3, #28]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	021a      	lsls	r2, r3, #8
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	61da      	str	r2, [r3, #28]
      break;
 8007748:	e044      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0011      	movs	r1, r2
 8007752:	0018      	movs	r0, r3
 8007754:	f000 fb98 	bl	8007e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2108      	movs	r1, #8
 8007764:	430a      	orrs	r2, r1
 8007766:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2104      	movs	r1, #4
 8007774:	438a      	bics	r2, r1
 8007776:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691a      	ldr	r2, [r3, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800778a:	e023      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	0011      	movs	r1, r2
 8007794:	0018      	movs	r0, r3
 8007796:	f000 fbd7 	bl	8007f48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2180      	movs	r1, #128	; 0x80
 80077a6:	0109      	lsls	r1, r1, #4
 80077a8:	430a      	orrs	r2, r1
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	490d      	ldr	r1, [pc, #52]	; (80077ec <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80077b8:	400a      	ands	r2, r1
 80077ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	021a      	lsls	r2, r3, #8
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077d0:	e000      	b.n	80077d4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80077d2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	223c      	movs	r2, #60	; 0x3c
 80077d8:	2100      	movs	r1, #0
 80077da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b004      	add	sp, #16
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	46c0      	nop			; (mov r8, r8)
 80077e8:	08009a54 	.word	0x08009a54
 80077ec:	fffffbff 	.word	0xfffffbff

080077f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	223c      	movs	r2, #60	; 0x3c
 80077fe:	5c9b      	ldrb	r3, [r3, r2]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_TIM_ConfigClockSource+0x18>
 8007804:	2302      	movs	r3, #2
 8007806:	e0b7      	b.n	8007978 <HAL_TIM_ConfigClockSource+0x188>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	223c      	movs	r2, #60	; 0x3c
 800780c:	2101      	movs	r1, #1
 800780e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	223d      	movs	r2, #61	; 0x3d
 8007814:	2102      	movs	r1, #2
 8007816:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4a57      	ldr	r2, [pc, #348]	; (8007980 <HAL_TIM_ConfigClockSource+0x190>)
 8007824:	4013      	ands	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4a56      	ldr	r2, [pc, #344]	; (8007984 <HAL_TIM_ConfigClockSource+0x194>)
 800782c:	4013      	ands	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2280      	movs	r2, #128	; 0x80
 800783e:	0192      	lsls	r2, r2, #6
 8007840:	4293      	cmp	r3, r2
 8007842:	d040      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0xd6>
 8007844:	2280      	movs	r2, #128	; 0x80
 8007846:	0192      	lsls	r2, r2, #6
 8007848:	4293      	cmp	r3, r2
 800784a:	d900      	bls.n	800784e <HAL_TIM_ConfigClockSource+0x5e>
 800784c:	e088      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	0152      	lsls	r2, r2, #5
 8007852:	4293      	cmp	r3, r2
 8007854:	d100      	bne.n	8007858 <HAL_TIM_ConfigClockSource+0x68>
 8007856:	e085      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x174>
 8007858:	2280      	movs	r2, #128	; 0x80
 800785a:	0152      	lsls	r2, r2, #5
 800785c:	4293      	cmp	r3, r2
 800785e:	d900      	bls.n	8007862 <HAL_TIM_ConfigClockSource+0x72>
 8007860:	e07e      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 8007862:	2b70      	cmp	r3, #112	; 0x70
 8007864:	d018      	beq.n	8007898 <HAL_TIM_ConfigClockSource+0xa8>
 8007866:	d900      	bls.n	800786a <HAL_TIM_ConfigClockSource+0x7a>
 8007868:	e07a      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 800786a:	2b60      	cmp	r3, #96	; 0x60
 800786c:	d04f      	beq.n	800790e <HAL_TIM_ConfigClockSource+0x11e>
 800786e:	d900      	bls.n	8007872 <HAL_TIM_ConfigClockSource+0x82>
 8007870:	e076      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 8007872:	2b50      	cmp	r3, #80	; 0x50
 8007874:	d03b      	beq.n	80078ee <HAL_TIM_ConfigClockSource+0xfe>
 8007876:	d900      	bls.n	800787a <HAL_TIM_ConfigClockSource+0x8a>
 8007878:	e072      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d057      	beq.n	800792e <HAL_TIM_ConfigClockSource+0x13e>
 800787e:	d900      	bls.n	8007882 <HAL_TIM_ConfigClockSource+0x92>
 8007880:	e06e      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 8007882:	2b30      	cmp	r3, #48	; 0x30
 8007884:	d063      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x15e>
 8007886:	d86b      	bhi.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 8007888:	2b20      	cmp	r3, #32
 800788a:	d060      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x15e>
 800788c:	d868      	bhi.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d05d      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x15e>
 8007892:	2b10      	cmp	r3, #16
 8007894:	d05b      	beq.n	800794e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007896:	e063      	b.n	8007960 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	6899      	ldr	r1, [r3, #8]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f000 fc2e 	bl	8008108 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2277      	movs	r2, #119	; 0x77
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	609a      	str	r2, [r3, #8]
      break;
 80078c4:	e04f      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	6899      	ldr	r1, [r3, #8]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f000 fc17 	bl	8008108 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689a      	ldr	r2, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	01c9      	lsls	r1, r1, #7
 80078e8:	430a      	orrs	r2, r1
 80078ea:	609a      	str	r2, [r3, #8]
      break;
 80078ec:	e03b      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6818      	ldr	r0, [r3, #0]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6859      	ldr	r1, [r3, #4]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	001a      	movs	r2, r3
 80078fc:	f000 fb88 	bl	8008010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2150      	movs	r1, #80	; 0x50
 8007906:	0018      	movs	r0, r3
 8007908:	f000 fbe2 	bl	80080d0 <TIM_ITRx_SetConfig>
      break;
 800790c:	e02b      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6859      	ldr	r1, [r3, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	001a      	movs	r2, r3
 800791c:	f000 fba6 	bl	800806c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2160      	movs	r1, #96	; 0x60
 8007926:	0018      	movs	r0, r3
 8007928:	f000 fbd2 	bl	80080d0 <TIM_ITRx_SetConfig>
      break;
 800792c:	e01b      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6859      	ldr	r1, [r3, #4]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	001a      	movs	r2, r3
 800793c:	f000 fb68 	bl	8008010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2140      	movs	r1, #64	; 0x40
 8007946:	0018      	movs	r0, r3
 8007948:	f000 fbc2 	bl	80080d0 <TIM_ITRx_SetConfig>
      break;
 800794c:	e00b      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	0019      	movs	r1, r3
 8007958:	0010      	movs	r0, r2
 800795a:	f000 fbb9 	bl	80080d0 <TIM_ITRx_SetConfig>
        break;
 800795e:	e002      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007960:	46c0      	nop			; (mov r8, r8)
 8007962:	e000      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007964:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	223d      	movs	r2, #61	; 0x3d
 800796a:	2101      	movs	r1, #1
 800796c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	223c      	movs	r2, #60	; 0x3c
 8007972:	2100      	movs	r1, #0
 8007974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	0018      	movs	r0, r3
 800797a:	46bd      	mov	sp, r7
 800797c:	b004      	add	sp, #16
 800797e:	bd80      	pop	{r7, pc}
 8007980:	ffceff88 	.word	0xffceff88
 8007984:	ffff00ff 	.word	0xffff00ff

08007988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a34      	ldr	r2, [pc, #208]	; (8007a6c <TIM_Base_SetConfig+0xe4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d008      	beq.n	80079b2 <TIM_Base_SetConfig+0x2a>
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	2380      	movs	r3, #128	; 0x80
 80079a4:	05db      	lsls	r3, r3, #23
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d003      	beq.n	80079b2 <TIM_Base_SetConfig+0x2a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a30      	ldr	r2, [pc, #192]	; (8007a70 <TIM_Base_SetConfig+0xe8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d108      	bne.n	80079c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2270      	movs	r2, #112	; 0x70
 80079b6:	4393      	bics	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a29      	ldr	r2, [pc, #164]	; (8007a6c <TIM_Base_SetConfig+0xe4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d018      	beq.n	80079fe <TIM_Base_SetConfig+0x76>
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	2380      	movs	r3, #128	; 0x80
 80079d0:	05db      	lsls	r3, r3, #23
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d013      	beq.n	80079fe <TIM_Base_SetConfig+0x76>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a25      	ldr	r2, [pc, #148]	; (8007a70 <TIM_Base_SetConfig+0xe8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00f      	beq.n	80079fe <TIM_Base_SetConfig+0x76>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a24      	ldr	r2, [pc, #144]	; (8007a74 <TIM_Base_SetConfig+0xec>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00b      	beq.n	80079fe <TIM_Base_SetConfig+0x76>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a23      	ldr	r2, [pc, #140]	; (8007a78 <TIM_Base_SetConfig+0xf0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d007      	beq.n	80079fe <TIM_Base_SetConfig+0x76>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <TIM_Base_SetConfig+0xf4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_Base_SetConfig+0x76>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <TIM_Base_SetConfig+0xf8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d108      	bne.n	8007a10 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4a20      	ldr	r2, [pc, #128]	; (8007a84 <TIM_Base_SetConfig+0xfc>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2280      	movs	r2, #128	; 0x80
 8007a14:	4393      	bics	r3, r2
 8007a16:	001a      	movs	r2, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a0c      	ldr	r2, [pc, #48]	; (8007a6c <TIM_Base_SetConfig+0xe4>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d00b      	beq.n	8007a56 <TIM_Base_SetConfig+0xce>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a0d      	ldr	r2, [pc, #52]	; (8007a78 <TIM_Base_SetConfig+0xf0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d007      	beq.n	8007a56 <TIM_Base_SetConfig+0xce>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4a0c      	ldr	r2, [pc, #48]	; (8007a7c <TIM_Base_SetConfig+0xf4>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d003      	beq.n	8007a56 <TIM_Base_SetConfig+0xce>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a0b      	ldr	r2, [pc, #44]	; (8007a80 <TIM_Base_SetConfig+0xf8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d103      	bne.n	8007a5e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	615a      	str	r2, [r3, #20]
}
 8007a64:	46c0      	nop			; (mov r8, r8)
 8007a66:	46bd      	mov	sp, r7
 8007a68:	b004      	add	sp, #16
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40012c00 	.word	0x40012c00
 8007a70:	40000400 	.word	0x40000400
 8007a74:	40002000 	.word	0x40002000
 8007a78:	40014000 	.word	0x40014000
 8007a7c:	40014400 	.word	0x40014400
 8007a80:	40014800 	.word	0x40014800
 8007a84:	fffffcff 	.word	0xfffffcff

08007a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	2201      	movs	r2, #1
 8007a98:	4393      	bics	r3, r2
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a32      	ldr	r2, [pc, #200]	; (8007b80 <TIM_OC1_SetConfig+0xf8>)
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4393      	bics	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	4393      	bics	r3, r2
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a28      	ldr	r2, [pc, #160]	; (8007b84 <TIM_OC1_SetConfig+0xfc>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00b      	beq.n	8007afe <TIM_OC1_SetConfig+0x76>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a27      	ldr	r2, [pc, #156]	; (8007b88 <TIM_OC1_SetConfig+0x100>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d007      	beq.n	8007afe <TIM_OC1_SetConfig+0x76>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a26      	ldr	r2, [pc, #152]	; (8007b8c <TIM_OC1_SetConfig+0x104>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC1_SetConfig+0x76>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a25      	ldr	r2, [pc, #148]	; (8007b90 <TIM_OC1_SetConfig+0x108>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d10c      	bne.n	8007b18 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2208      	movs	r2, #8
 8007b02:	4393      	bics	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2204      	movs	r2, #4
 8007b14:	4393      	bics	r3, r2
 8007b16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a1a      	ldr	r2, [pc, #104]	; (8007b84 <TIM_OC1_SetConfig+0xfc>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00b      	beq.n	8007b38 <TIM_OC1_SetConfig+0xb0>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a19      	ldr	r2, [pc, #100]	; (8007b88 <TIM_OC1_SetConfig+0x100>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d007      	beq.n	8007b38 <TIM_OC1_SetConfig+0xb0>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <TIM_OC1_SetConfig+0x104>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_OC1_SetConfig+0xb0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <TIM_OC1_SetConfig+0x108>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d111      	bne.n	8007b5c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <TIM_OC1_SetConfig+0x10c>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <TIM_OC1_SetConfig+0x110>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	b006      	add	sp, #24
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	46c0      	nop			; (mov r8, r8)
 8007b80:	fffeff8f 	.word	0xfffeff8f
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800
 8007b94:	fffffeff 	.word	0xfffffeff
 8007b98:	fffffdff 	.word	0xfffffdff

08007b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	2210      	movs	r2, #16
 8007bac:	4393      	bics	r3, r2
 8007bae:	001a      	movs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4a2e      	ldr	r2, [pc, #184]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4a2d      	ldr	r2, [pc, #180]	; (8007c88 <TIM_OC2_SetConfig+0xec>)
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2220      	movs	r2, #32
 8007be6:	4393      	bics	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a24      	ldr	r2, [pc, #144]	; (8007c8c <TIM_OC2_SetConfig+0xf0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d10d      	bne.n	8007c1a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2280      	movs	r2, #128	; 0x80
 8007c02:	4393      	bics	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2240      	movs	r2, #64	; 0x40
 8007c16:	4393      	bics	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a1b      	ldr	r2, [pc, #108]	; (8007c8c <TIM_OC2_SetConfig+0xf0>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00b      	beq.n	8007c3a <TIM_OC2_SetConfig+0x9e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a1a      	ldr	r2, [pc, #104]	; (8007c90 <TIM_OC2_SetConfig+0xf4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <TIM_OC2_SetConfig+0x9e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <TIM_OC2_SetConfig+0xf8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d003      	beq.n	8007c3a <TIM_OC2_SetConfig+0x9e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a18      	ldr	r2, [pc, #96]	; (8007c98 <TIM_OC2_SetConfig+0xfc>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d113      	bne.n	8007c62 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <TIM_OC2_SetConfig+0x100>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4a16      	ldr	r2, [pc, #88]	; (8007ca0 <TIM_OC2_SetConfig+0x104>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	621a      	str	r2, [r3, #32]
}
 8007c7c:	46c0      	nop			; (mov r8, r8)
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b006      	add	sp, #24
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	feff8fff 	.word	0xfeff8fff
 8007c88:	fffffcff 	.word	0xfffffcff
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800
 8007c9c:	fffffbff 	.word	0xfffffbff
 8007ca0:	fffff7ff 	.word	0xfffff7ff

08007ca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	4a35      	ldr	r2, [pc, #212]	; (8007d88 <TIM_OC3_SetConfig+0xe4>)
 8007cb4:	401a      	ands	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4a2f      	ldr	r2, [pc, #188]	; (8007d8c <TIM_OC3_SetConfig+0xe8>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	4393      	bics	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	4a29      	ldr	r2, [pc, #164]	; (8007d90 <TIM_OC3_SetConfig+0xec>)
 8007cea:	4013      	ands	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	021b      	lsls	r3, r3, #8
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a25      	ldr	r2, [pc, #148]	; (8007d94 <TIM_OC3_SetConfig+0xf0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d10d      	bne.n	8007d1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	4a24      	ldr	r2, [pc, #144]	; (8007d98 <TIM_OC3_SetConfig+0xf4>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <TIM_OC3_SetConfig+0xf8>)
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a1c      	ldr	r2, [pc, #112]	; (8007d94 <TIM_OC3_SetConfig+0xf0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d00b      	beq.n	8007d3e <TIM_OC3_SetConfig+0x9a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a1d      	ldr	r2, [pc, #116]	; (8007da0 <TIM_OC3_SetConfig+0xfc>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d007      	beq.n	8007d3e <TIM_OC3_SetConfig+0x9a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a1c      	ldr	r2, [pc, #112]	; (8007da4 <TIM_OC3_SetConfig+0x100>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d003      	beq.n	8007d3e <TIM_OC3_SetConfig+0x9a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <TIM_OC3_SetConfig+0x104>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d113      	bne.n	8007d66 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	4a1a      	ldr	r2, [pc, #104]	; (8007dac <TIM_OC3_SetConfig+0x108>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	4a19      	ldr	r2, [pc, #100]	; (8007db0 <TIM_OC3_SetConfig+0x10c>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	695b      	ldr	r3, [r3, #20]
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	621a      	str	r2, [r3, #32]
}
 8007d80:	46c0      	nop			; (mov r8, r8)
 8007d82:	46bd      	mov	sp, r7
 8007d84:	b006      	add	sp, #24
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	fffffeff 	.word	0xfffffeff
 8007d8c:	fffeff8f 	.word	0xfffeff8f
 8007d90:	fffffdff 	.word	0xfffffdff
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	fffff7ff 	.word	0xfffff7ff
 8007d9c:	fffffbff 	.word	0xfffffbff
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800
 8007dac:	ffffefff 	.word	0xffffefff
 8007db0:	ffffdfff 	.word	0xffffdfff

08007db4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	4a28      	ldr	r2, [pc, #160]	; (8007e64 <TIM_OC4_SetConfig+0xb0>)
 8007dc4:	401a      	ands	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4a22      	ldr	r2, [pc, #136]	; (8007e68 <TIM_OC4_SetConfig+0xb4>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a21      	ldr	r2, [pc, #132]	; (8007e6c <TIM_OC4_SetConfig+0xb8>)
 8007de8:	4013      	ands	r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	4a1d      	ldr	r2, [pc, #116]	; (8007e70 <TIM_OC4_SetConfig+0xbc>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	031b      	lsls	r3, r3, #12
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a19      	ldr	r2, [pc, #100]	; (8007e74 <TIM_OC4_SetConfig+0xc0>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00b      	beq.n	8007e2c <TIM_OC4_SetConfig+0x78>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <TIM_OC4_SetConfig+0xc4>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d007      	beq.n	8007e2c <TIM_OC4_SetConfig+0x78>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	; (8007e7c <TIM_OC4_SetConfig+0xc8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_OC4_SetConfig+0x78>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a16      	ldr	r2, [pc, #88]	; (8007e80 <TIM_OC4_SetConfig+0xcc>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d109      	bne.n	8007e40 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	; (8007e84 <TIM_OC4_SetConfig+0xd0>)
 8007e30:	4013      	ands	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	019b      	lsls	r3, r3, #6
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b006      	add	sp, #24
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	ffffefff 	.word	0xffffefff
 8007e68:	feff8fff 	.word	0xfeff8fff
 8007e6c:	fffffcff 	.word	0xfffffcff
 8007e70:	ffffdfff 	.word	0xffffdfff
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40014000 	.word	0x40014000
 8007e7c:	40014400 	.word	0x40014400
 8007e80:	40014800 	.word	0x40014800
 8007e84:	ffffbfff 	.word	0xffffbfff

08007e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <TIM_OC5_SetConfig+0xa4>)
 8007e98:	401a      	ands	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <TIM_OC5_SetConfig+0xa8>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <TIM_OC5_SetConfig+0xac>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <TIM_OC5_SetConfig+0xb0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00b      	beq.n	8007ef6 <TIM_OC5_SetConfig+0x6e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <TIM_OC5_SetConfig+0xb4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d007      	beq.n	8007ef6 <TIM_OC5_SetConfig+0x6e>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a15      	ldr	r2, [pc, #84]	; (8007f40 <TIM_OC5_SetConfig+0xb8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d003      	beq.n	8007ef6 <TIM_OC5_SetConfig+0x6e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a14      	ldr	r2, [pc, #80]	; (8007f44 <TIM_OC5_SetConfig+0xbc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d109      	bne.n	8007f0a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	4a0c      	ldr	r2, [pc, #48]	; (8007f2c <TIM_OC5_SetConfig+0xa4>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	021b      	lsls	r3, r3, #8
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	621a      	str	r2, [r3, #32]
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b006      	add	sp, #24
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	fffeffff 	.word	0xfffeffff
 8007f30:	fffeff8f 	.word	0xfffeff8f
 8007f34:	fffdffff 	.word	0xfffdffff
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800

08007f48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	4a26      	ldr	r2, [pc, #152]	; (8007ff0 <TIM_OC6_SetConfig+0xa8>)
 8007f58:	401a      	ands	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4a20      	ldr	r2, [pc, #128]	; (8007ff4 <TIM_OC6_SetConfig+0xac>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <TIM_OC6_SetConfig+0xb0>)
 8007f88:	4013      	ands	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	051b      	lsls	r3, r3, #20
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <TIM_OC6_SetConfig+0xb4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00b      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x70>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a17      	ldr	r2, [pc, #92]	; (8008000 <TIM_OC6_SetConfig+0xb8>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d007      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x70>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a16      	ldr	r2, [pc, #88]	; (8008004 <TIM_OC6_SetConfig+0xbc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d003      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x70>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a15      	ldr	r2, [pc, #84]	; (8008008 <TIM_OC6_SetConfig+0xc0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d109      	bne.n	8007fcc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	4a14      	ldr	r2, [pc, #80]	; (800800c <TIM_OC6_SetConfig+0xc4>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	029b      	lsls	r3, r3, #10
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	621a      	str	r2, [r3, #32]
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b006      	add	sp, #24
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	ffefffff 	.word	0xffefffff
 8007ff4:	feff8fff 	.word	0xfeff8fff
 8007ff8:	ffdfffff 	.word	0xffdfffff
 8007ffc:	40012c00 	.word	0x40012c00
 8008000:	40014000 	.word	0x40014000
 8008004:	40014400 	.word	0x40014400
 8008008:	40014800 	.word	0x40014800
 800800c:	fffbffff 	.word	0xfffbffff

08008010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	2201      	movs	r2, #1
 8008028:	4393      	bics	r3, r2
 800802a:	001a      	movs	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	22f0      	movs	r2, #240	; 0xf0
 800803a:	4393      	bics	r3, r2
 800803c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	220a      	movs	r2, #10
 800804c:	4393      	bics	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b006      	add	sp, #24
 800806a:	bd80      	pop	{r7, pc}

0800806c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	2210      	movs	r2, #16
 800807e:	4393      	bics	r3, r2
 8008080:	001a      	movs	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <TIM_TI2_ConfigInputStage+0x60>)
 8008096:	4013      	ands	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	031b      	lsls	r3, r3, #12
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	22a0      	movs	r2, #160	; 0xa0
 80080a8:	4393      	bics	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	011b      	lsls	r3, r3, #4
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b006      	add	sp, #24
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	ffff0fff 	.word	0xffff0fff

080080d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	4a08      	ldr	r2, [pc, #32]	; (8008104 <TIM_ITRx_SetConfig+0x34>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	2207      	movs	r2, #7
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	609a      	str	r2, [r3, #8]
}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	46bd      	mov	sp, r7
 80080fe:	b004      	add	sp, #16
 8008100:	bd80      	pop	{r7, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	ffcfff8f 	.word	0xffcfff8f

08008108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	4a09      	ldr	r2, [pc, #36]	; (8008144 <TIM_ETR_SetConfig+0x3c>)
 8008120:	4013      	ands	r3, r2
 8008122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	021a      	lsls	r2, r3, #8
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	431a      	orrs	r2, r3
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	4313      	orrs	r3, r2
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	609a      	str	r2, [r3, #8]
}
 800813c:	46c0      	nop			; (mov r8, r8)
 800813e:	46bd      	mov	sp, r7
 8008140:	b006      	add	sp, #24
 8008142:	bd80      	pop	{r7, pc}
 8008144:	ffff00ff 	.word	0xffff00ff

08008148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	221f      	movs	r2, #31
 8008158:	4013      	ands	r3, r2
 800815a:	2201      	movs	r2, #1
 800815c:	409a      	lsls	r2, r3
 800815e:	0013      	movs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	43d2      	mvns	r2, r2
 800816a:	401a      	ands	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6a1a      	ldr	r2, [r3, #32]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	211f      	movs	r1, #31
 8008178:	400b      	ands	r3, r1
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4099      	lsls	r1, r3
 800817e:	000b      	movs	r3, r1
 8008180:	431a      	orrs	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	46bd      	mov	sp, r7
 800818a:	b006      	add	sp, #24
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	223c      	movs	r2, #60	; 0x3c
 800819e:	5c9b      	ldrb	r3, [r3, r2]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e055      	b.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	223c      	movs	r2, #60	; 0x3c
 80081ac:	2101      	movs	r1, #1
 80081ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	223d      	movs	r2, #61	; 0x3d
 80081b4:	2102      	movs	r1, #2
 80081b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a23      	ldr	r2, [pc, #140]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d108      	bne.n	80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4a22      	ldr	r2, [pc, #136]	; (8008260 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081d6:	4013      	ands	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2270      	movs	r2, #112	; 0x70
 80081e8:	4393      	bics	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a16      	ldr	r2, [pc, #88]	; (800825c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00f      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	2380      	movs	r3, #128	; 0x80
 800820e:	05db      	lsls	r3, r3, #23
 8008210:	429a      	cmp	r2, r3
 8008212:	d009      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a12      	ldr	r2, [pc, #72]	; (8008264 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a11      	ldr	r2, [pc, #68]	; (8008268 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d10c      	bne.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2280      	movs	r2, #128	; 0x80
 800822c:	4393      	bics	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	4313      	orrs	r3, r2
 8008238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	223d      	movs	r2, #61	; 0x3d
 8008246:	2101      	movs	r1, #1
 8008248:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	223c      	movs	r2, #60	; 0x3c
 800824e:	2100      	movs	r1, #0
 8008250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	0018      	movs	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	b004      	add	sp, #16
 800825a:	bd80      	pop	{r7, pc}
 800825c:	40012c00 	.word	0x40012c00
 8008260:	ff0fffff 	.word	0xff0fffff
 8008264:	40000400 	.word	0x40000400
 8008268:	40014000 	.word	0x40014000

0800826c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	223c      	movs	r2, #60	; 0x3c
 800827e:	5c9b      	ldrb	r3, [r3, r2]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008284:	2302      	movs	r3, #2
 8008286:	e079      	b.n	800837c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	223c      	movs	r2, #60	; 0x3c
 800828c:	2101      	movs	r1, #1
 800828e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	22ff      	movs	r2, #255	; 0xff
 8008294:	4393      	bics	r3, r2
 8008296:	001a      	movs	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4a38      	ldr	r2, [pc, #224]	; (8008384 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80082a4:	401a      	ands	r2, r3
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a35      	ldr	r2, [pc, #212]	; (8008388 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80082b2:	401a      	ands	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4a33      	ldr	r2, [pc, #204]	; (800838c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80082c0:	401a      	ands	r2, r3
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a30      	ldr	r2, [pc, #192]	; (8008390 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80082ce:	401a      	ands	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a2e      	ldr	r2, [pc, #184]	; (8008394 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80082dc:	401a      	ands	r2, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a2b      	ldr	r2, [pc, #172]	; (8008398 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80082ea:	401a      	ands	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4a29      	ldr	r2, [pc, #164]	; (800839c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80082f8:	401a      	ands	r2, r3
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	041b      	lsls	r3, r3, #16
 8008300:	4313      	orrs	r3, r2
 8008302:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a25      	ldr	r2, [pc, #148]	; (80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d106      	bne.n	800831c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a24      	ldr	r2, [pc, #144]	; (80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008312:	401a      	ands	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	4313      	orrs	r3, r2
 800831a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a1f      	ldr	r2, [pc, #124]	; (80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d121      	bne.n	800836a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a1f      	ldr	r2, [pc, #124]	; (80083a8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800832a:	401a      	ands	r2, r3
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	051b      	lsls	r3, r3, #20
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4a1c      	ldr	r2, [pc, #112]	; (80083ac <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800833a:	401a      	ands	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	4313      	orrs	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008348:	401a      	ands	r2, r3
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a12      	ldr	r2, [pc, #72]	; (80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d106      	bne.n	800836a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a15      	ldr	r2, [pc, #84]	; (80083b4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008360:	401a      	ands	r2, r3
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68fa      	ldr	r2, [r7, #12]
 8008370:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	223c      	movs	r2, #60	; 0x3c
 8008376:	2100      	movs	r1, #0
 8008378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	0018      	movs	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	b004      	add	sp, #16
 8008382:	bd80      	pop	{r7, pc}
 8008384:	fffffcff 	.word	0xfffffcff
 8008388:	fffffbff 	.word	0xfffffbff
 800838c:	fffff7ff 	.word	0xfffff7ff
 8008390:	ffffefff 	.word	0xffffefff
 8008394:	ffffdfff 	.word	0xffffdfff
 8008398:	ffffbfff 	.word	0xffffbfff
 800839c:	fff0ffff 	.word	0xfff0ffff
 80083a0:	40012c00 	.word	0x40012c00
 80083a4:	efffffff 	.word	0xefffffff
 80083a8:	ff0fffff 	.word	0xff0fffff
 80083ac:	feffffff 	.word	0xfeffffff
 80083b0:	fdffffff 	.word	0xfdffffff
 80083b4:	dfffffff 	.word	0xdfffffff

080083b8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	223c      	movs	r2, #60	; 0x3c
 80083c8:	5c9b      	ldrb	r3, [r3, r2]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d101      	bne.n	80083d2 <HAL_TIMEx_ConfigBreakInput+0x1a>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e08e      	b.n	80084f0 <HAL_TIMEx_ConfigBreakInput+0x138>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	223c      	movs	r2, #60	; 0x3c
 80083d6:	2101      	movs	r1, #1
 80083d8:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b04      	cmp	r3, #4
 80083e0:	d019      	beq.n	8008416 <HAL_TIMEx_ConfigBreakInput+0x5e>
 80083e2:	d822      	bhi.n	800842a <HAL_TIMEx_ConfigBreakInput+0x72>
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d002      	beq.n	80083ee <HAL_TIMEx_ConfigBreakInput+0x36>
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d00a      	beq.n	8008402 <HAL_TIMEx_ConfigBreakInput+0x4a>
 80083ec:	e01d      	b.n	800842a <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80083f2:	2300      	movs	r3, #0
 80083f4:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80083fc:	2309      	movs	r3, #9
 80083fe:	61bb      	str	r3, [r7, #24]
      break;
 8008400:	e01c      	b.n	800843c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008402:	2302      	movs	r3, #2
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008406:	2301      	movs	r3, #1
 8008408:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008410:	230a      	movs	r3, #10
 8008412:	61bb      	str	r3, [r7, #24]
      break;
 8008414:	e012      	b.n	800843c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008416:	2304      	movs	r3, #4
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800841a:	2302      	movs	r3, #2
 800841c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008424:	230b      	movs	r3, #11
 8008426:	61bb      	str	r3, [r7, #24]
      break;
 8008428:	e008      	b.n	800843c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	61bb      	str	r3, [r7, #24]
      break;
 800843a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d003      	beq.n	800844a <HAL_TIMEx_ConfigBreakInput+0x92>
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d027      	beq.n	8008498 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008448:	e04d      	b.n	80084e6 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008450:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	43da      	mvns	r2, r3
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	4013      	ands	r3, r2
 800845a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	409a      	lsls	r2, r3
 8008464:	0013      	movs	r3, r2
 8008466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008468:	4013      	ands	r3, r2
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4313      	orrs	r3, r2
 800846e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	43da      	mvns	r2, r3
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	4013      	ands	r3, r2
 8008478:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	409a      	lsls	r2, r3
 8008482:	0013      	movs	r3, r2
 8008484:	6a3a      	ldr	r2, [r7, #32]
 8008486:	4013      	ands	r3, r2
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008496:	e026      	b.n	80084e6 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	43da      	mvns	r2, r3
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	4013      	ands	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	409a      	lsls	r2, r3
 80084b2:	0013      	movs	r3, r2
 80084b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b6:	4013      	ands	r3, r2
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80084be:	6a3b      	ldr	r3, [r7, #32]
 80084c0:	43da      	mvns	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	4013      	ands	r3, r2
 80084c6:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	409a      	lsls	r2, r3
 80084d0:	0013      	movs	r3, r2
 80084d2:	6a3a      	ldr	r2, [r7, #32]
 80084d4:	4013      	ands	r3, r2
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80084e4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	223c      	movs	r2, #60	; 0x3c
 80084ea:	2100      	movs	r1, #0
 80084ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	0018      	movs	r0, r3
 80084f2:	46bd      	mov	sp, r7
 80084f4:	b00a      	add	sp, #40	; 0x28
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e03f      	b.n	800858a <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2259      	movs	r2, #89	; 0x59
 800850e:	5c9b      	ldrb	r3, [r3, r2]
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d107      	bne.n	8008526 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2258      	movs	r2, #88	; 0x58
 800851a:	2100      	movs	r1, #0
 800851c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	0018      	movs	r0, r3
 8008522:	f7fa fa89 	bl	8002a38 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2259      	movs	r2, #89	; 0x59
 800852a:	2102      	movs	r1, #2
 800852c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2101      	movs	r1, #1
 800853a:	438a      	bics	r2, r1
 800853c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	0018      	movs	r0, r3
 8008542:	f000 fad7 	bl	8008af4 <USART_SetConfig>
 8008546:	0003      	movs	r3, r0
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e01c      	b.n	800858a <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	490e      	ldr	r1, [pc, #56]	; (8008594 <HAL_USART_Init+0x9c>)
 800855c:	400a      	ands	r2, r1
 800855e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	212a      	movs	r1, #42	; 0x2a
 800856c:	438a      	bics	r2, r1
 800856e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2101      	movs	r1, #1
 800857c:	430a      	orrs	r2, r1
 800857e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	0018      	movs	r0, r3
 8008584:	f000 fd52 	bl	800902c <USART_CheckIdleState>
 8008588:	0003      	movs	r3, r0
}
 800858a:	0018      	movs	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	b002      	add	sp, #8
 8008590:	bd80      	pop	{r7, pc}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	ffffbfff 	.word	0xffffbfff

08008598 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af02      	add	r7, sp, #8
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	603b      	str	r3, [r7, #0]
 80085a4:	1dbb      	adds	r3, r7, #6
 80085a6:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2259      	movs	r2, #89	; 0x59
 80085ac:	5c9b      	ldrb	r3, [r3, r2]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d000      	beq.n	80085b6 <HAL_USART_Transmit+0x1e>
 80085b4:	e0a9      	b.n	800870a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_USART_Transmit+0x2c>
 80085bc:	1dbb      	adds	r3, r7, #6
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0a1      	b.n	800870c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	689a      	ldr	r2, [r3, #8]
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	015b      	lsls	r3, r3, #5
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d109      	bne.n	80085e8 <HAL_USART_Transmit+0x50>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2201      	movs	r2, #1
 80085e0:	4013      	ands	r3, r2
 80085e2:	d001      	beq.n	80085e8 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e091      	b.n	800870c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2258      	movs	r2, #88	; 0x58
 80085ec:	5c9b      	ldrb	r3, [r3, r2]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <HAL_USART_Transmit+0x5e>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e08a      	b.n	800870c <HAL_USART_Transmit+0x174>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2258      	movs	r2, #88	; 0x58
 80085fa:	2101      	movs	r1, #1
 80085fc:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2259      	movs	r2, #89	; 0x59
 8008608:	2112      	movs	r1, #18
 800860a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800860c:	f7fa fc42 	bl	8002e94 <HAL_GetTick>
 8008610:	0003      	movs	r3, r0
 8008612:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	1dba      	adds	r2, r7, #6
 8008618:	8812      	ldrh	r2, [r2, #0]
 800861a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	1dba      	adds	r2, r7, #6
 8008620:	8812      	ldrh	r2, [r2, #0]
 8008622:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	2380      	movs	r3, #128	; 0x80
 800862a:	015b      	lsls	r3, r3, #5
 800862c:	429a      	cmp	r2, r3
 800862e:	d108      	bne.n	8008642 <HAL_USART_Transmit+0xaa>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d104      	bne.n	8008642 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	61bb      	str	r3, [r7, #24]
 8008640:	e003      	b.n	800864a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800864a:	e02a      	b.n	80086a2 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	0013      	movs	r3, r2
 8008656:	2200      	movs	r2, #0
 8008658:	2180      	movs	r1, #128	; 0x80
 800865a:	f000 fa16 	bl	8008a8a <USART_WaitOnFlagUntilTimeout>
 800865e:	1e03      	subs	r3, r0, #0
 8008660:	d001      	beq.n	8008666 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e052      	b.n	800870c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d10b      	bne.n	8008684 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	001a      	movs	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	05d2      	lsls	r2, r2, #23
 8008678:	0dd2      	lsrs	r2, r2, #23
 800867a:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	3302      	adds	r3, #2
 8008680:	61bb      	str	r3, [r7, #24]
 8008682:	e007      	b.n	8008694 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	3301      	adds	r3, #1
 8008692:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008698:	b29b      	uxth	r3, r3
 800869a:	3b01      	subs	r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1cf      	bne.n	800864c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	0013      	movs	r3, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	2140      	movs	r1, #64	; 0x40
 80086ba:	f000 f9e6 	bl	8008a8a <USART_WaitOnFlagUntilTimeout>
 80086be:	1e03      	subs	r3, r0, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e022      	b.n	800870c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2240      	movs	r2, #64	; 0x40
 80086cc:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2208      	movs	r2, #8
 80086d4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2108      	movs	r1, #8
 80086e2:	430a      	orrs	r2, r1
 80086e4:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2110      	movs	r1, #16
 80086f2:	430a      	orrs	r2, r1
 80086f4:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2259      	movs	r2, #89	; 0x59
 80086fa:	2101      	movs	r1, #1
 80086fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2258      	movs	r2, #88	; 0x58
 8008702:	2100      	movs	r1, #0
 8008704:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	e000      	b.n	800870c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800870a:	2302      	movs	r3, #2
  }
}
 800870c:	0018      	movs	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	b008      	add	sp, #32
 8008712:	bd80      	pop	{r7, pc}

08008714 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	4aab      	ldr	r2, [pc, #684]	; (80089e4 <HAL_USART_IRQHandler+0x2d0>)
 8008738:	4013      	ands	r3, r2
 800873a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d117      	bne.n	8008772 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	2220      	movs	r2, #32
 8008746:	4013      	ands	r3, r2
 8008748:	d013      	beq.n	8008772 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2220      	movs	r2, #32
 800874e:	4013      	ands	r3, r2
 8008750:	d104      	bne.n	800875c <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	2380      	movs	r3, #128	; 0x80
 8008756:	055b      	lsls	r3, r3, #21
 8008758:	4013      	ands	r3, r2
 800875a:	d00a      	beq.n	8008772 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008760:	2b00      	cmp	r3, #0
 8008762:	d100      	bne.n	8008766 <HAL_USART_IRQHandler+0x52>
 8008764:	e135      	b.n	80089d2 <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	0010      	movs	r0, r2
 800876e:	4798      	blx	r3
      }
      return;
 8008770:	e12f      	b.n	80089d2 <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d100      	bne.n	800877a <HAL_USART_IRQHandler+0x66>
 8008778:	e0eb      	b.n	8008952 <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	4a9a      	ldr	r2, [pc, #616]	; (80089e8 <HAL_USART_IRQHandler+0x2d4>)
 800877e:	4013      	ands	r3, r2
 8008780:	d105      	bne.n	800878e <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	2390      	movs	r3, #144	; 0x90
 8008786:	005b      	lsls	r3, r3, #1
 8008788:	4013      	ands	r3, r2
 800878a:	d100      	bne.n	800878e <HAL_USART_IRQHandler+0x7a>
 800878c:	e0e1      	b.n	8008952 <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	2201      	movs	r2, #1
 8008792:	4013      	ands	r3, r2
 8008794:	d00e      	beq.n	80087b4 <HAL_USART_IRQHandler+0xa0>
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	2380      	movs	r3, #128	; 0x80
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4013      	ands	r3, r2
 800879e:	d009      	beq.n	80087b4 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2201      	movs	r2, #1
 80087a6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ac:	2201      	movs	r2, #1
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2202      	movs	r2, #2
 80087b8:	4013      	ands	r3, r2
 80087ba:	d00d      	beq.n	80087d8 <HAL_USART_IRQHandler+0xc4>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2201      	movs	r2, #1
 80087c0:	4013      	ands	r3, r2
 80087c2:	d009      	beq.n	80087d8 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2202      	movs	r2, #2
 80087ca:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d0:	2204      	movs	r2, #4
 80087d2:	431a      	orrs	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2204      	movs	r2, #4
 80087dc:	4013      	ands	r3, r2
 80087de:	d00d      	beq.n	80087fc <HAL_USART_IRQHandler+0xe8>
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2201      	movs	r2, #1
 80087e4:	4013      	ands	r3, r2
 80087e6:	d009      	beq.n	80087fc <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2204      	movs	r2, #4
 80087ee:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f4:	2202      	movs	r2, #2
 80087f6:	431a      	orrs	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2208      	movs	r2, #8
 8008800:	4013      	ands	r3, r2
 8008802:	d011      	beq.n	8008828 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2220      	movs	r2, #32
 8008808:	4013      	ands	r3, r2
 800880a:	d103      	bne.n	8008814 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	4a76      	ldr	r2, [pc, #472]	; (80089e8 <HAL_USART_IRQHandler+0x2d4>)
 8008810:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008812:	d009      	beq.n	8008828 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2208      	movs	r2, #8
 800881a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008820:	2208      	movs	r2, #8
 8008822:	431a      	orrs	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008828:	69fa      	ldr	r2, [r7, #28]
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	019b      	lsls	r3, r3, #6
 800882e:	4013      	ands	r3, r2
 8008830:	d01a      	beq.n	8008868 <HAL_USART_IRQHandler+0x154>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2201      	movs	r2, #1
 8008836:	4013      	ands	r3, r2
 8008838:	d016      	beq.n	8008868 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2259      	movs	r2, #89	; 0x59
 800883e:	5c9b      	ldrb	r3, [r3, r2]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b22      	cmp	r3, #34	; 0x22
 8008844:	d105      	bne.n	8008852 <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2280      	movs	r2, #128	; 0x80
 800884c:	0192      	lsls	r2, r2, #6
 800884e:	621a      	str	r2, [r3, #32]
        return;
 8008850:	e0c4      	b.n	80089dc <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2280      	movs	r2, #128	; 0x80
 8008858:	0192      	lsls	r2, r2, #6
 800885a:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008860:	2220      	movs	r2, #32
 8008862:	431a      	orrs	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d100      	bne.n	8008872 <HAL_USART_IRQHandler+0x15e>
 8008870:	e0b1      	b.n	80089d6 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	2220      	movs	r2, #32
 8008876:	4013      	ands	r3, r2
 8008878:	d011      	beq.n	800889e <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2220      	movs	r2, #32
 800887e:	4013      	ands	r3, r2
 8008880:	d104      	bne.n	800888c <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	055b      	lsls	r3, r3, #21
 8008888:	4013      	ands	r3, r2
 800888a:	d008      	beq.n	800889e <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008890:	2b00      	cmp	r3, #0
 8008892:	d004      	beq.n	800889e <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	0010      	movs	r0, r2
 800889c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a2:	2208      	movs	r2, #8
 80088a4:	4013      	ands	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2240      	movs	r2, #64	; 0x40
 80088b0:	4013      	ands	r3, r2
 80088b2:	2b40      	cmp	r3, #64	; 0x40
 80088b4:	d002      	beq.n	80088bc <HAL_USART_IRQHandler+0x1a8>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d040      	beq.n	800893e <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	0018      	movs	r0, r3
 80088c0:	f000 f8ae 	bl	8008a20 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2240      	movs	r2, #64	; 0x40
 80088cc:	4013      	ands	r3, r2
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d130      	bne.n	8008934 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2140      	movs	r1, #64	; 0x40
 80088de:	438a      	bics	r2, r1
 80088e0:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ee:	2200      	movs	r2, #0
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	0018      	movs	r0, r3
 80088f8:	f7fa fed8 	bl	80036ac <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008900:	2b00      	cmp	r3, #0
 8008902:	d012      	beq.n	800892a <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008908:	4a38      	ldr	r2, [pc, #224]	; (80089ec <HAL_USART_IRQHandler+0x2d8>)
 800890a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008910:	0018      	movs	r0, r3
 8008912:	f7fa fecb 	bl	80036ac <HAL_DMA_Abort_IT>
 8008916:	1e03      	subs	r3, r0, #0
 8008918:	d019      	beq.n	800894e <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008924:	0018      	movs	r0, r3
 8008926:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008928:	e011      	b.n	800894e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	0018      	movs	r0, r3
 800892e:	f000 f86f 	bl	8008a10 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008932:	e00c      	b.n	800894e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	0018      	movs	r0, r3
 8008938:	f000 f86a 	bl	8008a10 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800893c:	e007      	b.n	800894e <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0018      	movs	r0, r3
 8008942:	f000 f865 	bl	8008a10 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800894c:	e043      	b.n	80089d6 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800894e:	46c0      	nop			; (mov r8, r8)
    return;
 8008950:	e041      	b.n	80089d6 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2280      	movs	r2, #128	; 0x80
 8008956:	4013      	ands	r3, r2
 8008958:	d012      	beq.n	8008980 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2280      	movs	r2, #128	; 0x80
 800895e:	4013      	ands	r3, r2
 8008960:	d104      	bne.n	800896c <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	2380      	movs	r3, #128	; 0x80
 8008966:	041b      	lsls	r3, r3, #16
 8008968:	4013      	ands	r3, r2
 800896a:	d009      	beq.n	8008980 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008970:	2b00      	cmp	r3, #0
 8008972:	d032      	beq.n	80089da <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	0010      	movs	r0, r2
 800897c:	4798      	blx	r3
    }
    return;
 800897e:	e02c      	b.n	80089da <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	2240      	movs	r2, #64	; 0x40
 8008984:	4013      	ands	r3, r2
 8008986:	d008      	beq.n	800899a <HAL_USART_IRQHandler+0x286>
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2240      	movs	r2, #64	; 0x40
 800898c:	4013      	ands	r3, r2
 800898e:	d004      	beq.n	800899a <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	0018      	movs	r0, r3
 8008994:	f000 fb8e 	bl	80090b4 <USART_EndTransmit_IT>
    return;
 8008998:	e020      	b.n	80089dc <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800899a:	69fa      	ldr	r2, [r7, #28]
 800899c:	2380      	movs	r3, #128	; 0x80
 800899e:	041b      	lsls	r3, r3, #16
 80089a0:	4013      	ands	r3, r2
 80089a2:	d009      	beq.n	80089b8 <HAL_USART_IRQHandler+0x2a4>
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	2380      	movs	r3, #128	; 0x80
 80089a8:	05db      	lsls	r3, r3, #23
 80089aa:	4013      	ands	r3, r2
 80089ac:	d004      	beq.n	80089b8 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	0018      	movs	r0, r3
 80089b2:	f000 fbca 	bl	800914a <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80089b6:	e011      	b.n	80089dc <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	2380      	movs	r3, #128	; 0x80
 80089bc:	045b      	lsls	r3, r3, #17
 80089be:	4013      	ands	r3, r2
 80089c0:	d00c      	beq.n	80089dc <HAL_USART_IRQHandler+0x2c8>
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da09      	bge.n	80089dc <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	0018      	movs	r0, r3
 80089cc:	f000 fbb5 	bl	800913a <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80089d0:	e004      	b.n	80089dc <HAL_USART_IRQHandler+0x2c8>
      return;
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	e002      	b.n	80089dc <HAL_USART_IRQHandler+0x2c8>
    return;
 80089d6:	46c0      	nop			; (mov r8, r8)
 80089d8:	e000      	b.n	80089dc <HAL_USART_IRQHandler+0x2c8>
    return;
 80089da:	46c0      	nop			; (mov r8, r8)
  }
}
 80089dc:	46bd      	mov	sp, r7
 80089de:	b008      	add	sp, #32
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	0000200f 	.word	0x0000200f
 80089e8:	10000001 	.word	0x10000001
 80089ec:	08008a61 	.word	0x08008a61

080089f0 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 80089f8:	46c0      	nop			; (mov r8, r8)
 80089fa:	46bd      	mov	sp, r7
 80089fc:	b002      	add	sp, #8
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8008a08:	46c0      	nop			; (mov r8, r8)
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	b002      	add	sp, #8
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8008a18:	46c0      	nop			; (mov r8, r8)
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	b002      	add	sp, #8
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4909      	ldr	r1, [pc, #36]	; (8008a58 <USART_EndTransfer+0x38>)
 8008a34:	400a      	ands	r2, r1
 8008a36:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689a      	ldr	r2, [r3, #8]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4906      	ldr	r1, [pc, #24]	; (8008a5c <USART_EndTransfer+0x3c>)
 8008a44:	400a      	ands	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2259      	movs	r2, #89	; 0x59
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	5499      	strb	r1, [r3, r2]
}
 8008a50:	46c0      	nop			; (mov r8, r8)
 8008a52:	46bd      	mov	sp, r7
 8008a54:	b002      	add	sp, #8
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	fffffe1f 	.word	0xfffffe1f
 8008a5c:	ef7ffffe 	.word	0xef7ffffe

08008a60 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7ff ffc7 	bl	8008a10 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b004      	add	sp, #16
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	1dfb      	adds	r3, r7, #7
 8008a98:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008a9a:	e017      	b.n	8008acc <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	d014      	beq.n	8008acc <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa2:	f7fa f9f7 	bl	8002e94 <HAL_GetTick>
 8008aa6:	0002      	movs	r2, r0
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d302      	bcc.n	8008ab8 <USART_WaitOnFlagUntilTimeout+0x2e>
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d109      	bne.n	8008acc <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2259      	movs	r2, #89	; 0x59
 8008abc:	2101      	movs	r1, #1
 8008abe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2258      	movs	r2, #88	; 0x58
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e00f      	b.n	8008aec <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	425a      	negs	r2, r3
 8008adc:	4153      	adcs	r3, r2
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	1dfb      	adds	r3, r7, #7
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d0d8      	beq.n	8008a9c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	0018      	movs	r0, r3
 8008aee:	46bd      	mov	sp, r7
 8008af0:	b004      	add	sp, #16
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b088      	sub	sp, #32
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008afc:	231e      	movs	r3, #30
 8008afe:	18fb      	adds	r3, r7, r3
 8008b00:	2200      	movs	r2, #0
 8008b02:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008b04:	2300      	movs	r3, #0
 8008b06:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689a      	ldr	r2, [r3, #8]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	2280      	movs	r2, #128	; 0x80
 8008b1a:	0212      	lsls	r2, r2, #8
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4ab1      	ldr	r2, [pc, #708]	; (8008dec <USART_SetConfig+0x2f8>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	697a      	ldr	r2, [r7, #20]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008b36:	2380      	movs	r3, #128	; 0x80
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a1b      	ldr	r3, [r3, #32]
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699a      	ldr	r2, [r3, #24]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	4aa2      	ldr	r2, [pc, #648]	; (8008df0 <USART_SetConfig+0x2fc>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	220f      	movs	r2, #15
 8008b7e:	4393      	bics	r3, r2
 8008b80:	0019      	movs	r1, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a98      	ldr	r2, [pc, #608]	; (8008df4 <USART_SetConfig+0x300>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d127      	bne.n	8008be8 <USART_SetConfig+0xf4>
 8008b98:	4b97      	ldr	r3, [pc, #604]	; (8008df8 <USART_SetConfig+0x304>)
 8008b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d017      	beq.n	8008bd4 <USART_SetConfig+0xe0>
 8008ba4:	d81b      	bhi.n	8008bde <USART_SetConfig+0xea>
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d00a      	beq.n	8008bc0 <USART_SetConfig+0xcc>
 8008baa:	d818      	bhi.n	8008bde <USART_SetConfig+0xea>
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <USART_SetConfig+0xc2>
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d00a      	beq.n	8008bca <USART_SetConfig+0xd6>
 8008bb4:	e013      	b.n	8008bde <USART_SetConfig+0xea>
 8008bb6:	231f      	movs	r3, #31
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e058      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008bc0:	231f      	movs	r3, #31
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	701a      	strb	r2, [r3, #0]
 8008bc8:	e053      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008bca:	231f      	movs	r3, #31
 8008bcc:	18fb      	adds	r3, r7, r3
 8008bce:	2204      	movs	r2, #4
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	e04e      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008bd4:	231f      	movs	r3, #31
 8008bd6:	18fb      	adds	r3, r7, r3
 8008bd8:	2208      	movs	r2, #8
 8008bda:	701a      	strb	r2, [r3, #0]
 8008bdc:	e049      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008bde:	231f      	movs	r3, #31
 8008be0:	18fb      	adds	r3, r7, r3
 8008be2:	2210      	movs	r2, #16
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	e044      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a83      	ldr	r2, [pc, #524]	; (8008dfc <USART_SetConfig+0x308>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d127      	bne.n	8008c42 <USART_SetConfig+0x14e>
 8008bf2:	4b81      	ldr	r3, [pc, #516]	; (8008df8 <USART_SetConfig+0x304>)
 8008bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf6:	220c      	movs	r2, #12
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2b0c      	cmp	r3, #12
 8008bfc:	d017      	beq.n	8008c2e <USART_SetConfig+0x13a>
 8008bfe:	d81b      	bhi.n	8008c38 <USART_SetConfig+0x144>
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d00a      	beq.n	8008c1a <USART_SetConfig+0x126>
 8008c04:	d818      	bhi.n	8008c38 <USART_SetConfig+0x144>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <USART_SetConfig+0x11c>
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d00a      	beq.n	8008c24 <USART_SetConfig+0x130>
 8008c0e:	e013      	b.n	8008c38 <USART_SetConfig+0x144>
 8008c10:	231f      	movs	r3, #31
 8008c12:	18fb      	adds	r3, r7, r3
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e02b      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c1a:	231f      	movs	r3, #31
 8008c1c:	18fb      	adds	r3, r7, r3
 8008c1e:	2202      	movs	r2, #2
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e026      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c24:	231f      	movs	r3, #31
 8008c26:	18fb      	adds	r3, r7, r3
 8008c28:	2204      	movs	r2, #4
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e021      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c2e:	231f      	movs	r3, #31
 8008c30:	18fb      	adds	r3, r7, r3
 8008c32:	2208      	movs	r2, #8
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e01c      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c38:	231f      	movs	r3, #31
 8008c3a:	18fb      	adds	r3, r7, r3
 8008c3c:	2210      	movs	r2, #16
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	e017      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a6e      	ldr	r2, [pc, #440]	; (8008e00 <USART_SetConfig+0x30c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d104      	bne.n	8008c56 <USART_SetConfig+0x162>
 8008c4c:	231f      	movs	r3, #31
 8008c4e:	18fb      	adds	r3, r7, r3
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	e00d      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a6a      	ldr	r2, [pc, #424]	; (8008e04 <USART_SetConfig+0x310>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d104      	bne.n	8008c6a <USART_SetConfig+0x176>
 8008c60:	231f      	movs	r3, #31
 8008c62:	18fb      	adds	r3, r7, r3
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
 8008c68:	e003      	b.n	8008c72 <USART_SetConfig+0x17e>
 8008c6a:	231f      	movs	r3, #31
 8008c6c:	18fb      	adds	r3, r7, r3
 8008c6e:	2210      	movs	r2, #16
 8008c70:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008c72:	231f      	movs	r3, #31
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d100      	bne.n	8008c7e <USART_SetConfig+0x18a>
 8008c7c:	e139      	b.n	8008ef2 <USART_SetConfig+0x3fe>
 8008c7e:	dd00      	ble.n	8008c82 <USART_SetConfig+0x18e>
 8008c80:	e195      	b.n	8008fae <USART_SetConfig+0x4ba>
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d100      	bne.n	8008c88 <USART_SetConfig+0x194>
 8008c86:	e0d3      	b.n	8008e30 <USART_SetConfig+0x33c>
 8008c88:	dd00      	ble.n	8008c8c <USART_SetConfig+0x198>
 8008c8a:	e190      	b.n	8008fae <USART_SetConfig+0x4ba>
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <USART_SetConfig+0x1a4>
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d100      	bne.n	8008c96 <USART_SetConfig+0x1a2>
 8008c94:	e061      	b.n	8008d5a <USART_SetConfig+0x266>
 8008c96:	e18a      	b.n	8008fae <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c98:	f7fc fdea 	bl	8005870 <HAL_RCC_GetPCLK1Freq>
 8008c9c:	0003      	movs	r3, r0
 8008c9e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d044      	beq.n	8008d32 <USART_SetConfig+0x23e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d03e      	beq.n	8008d2e <USART_SetConfig+0x23a>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d038      	beq.n	8008d2a <USART_SetConfig+0x236>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b03      	cmp	r3, #3
 8008cbe:	d032      	beq.n	8008d26 <USART_SetConfig+0x232>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d02c      	beq.n	8008d22 <USART_SetConfig+0x22e>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d026      	beq.n	8008d1e <USART_SetConfig+0x22a>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b06      	cmp	r3, #6
 8008cd6:	d020      	beq.n	8008d1a <USART_SetConfig+0x226>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	2b07      	cmp	r3, #7
 8008cde:	d01a      	beq.n	8008d16 <USART_SetConfig+0x222>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	d014      	beq.n	8008d12 <USART_SetConfig+0x21e>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b09      	cmp	r3, #9
 8008cee:	d00e      	beq.n	8008d0e <USART_SetConfig+0x21a>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b0a      	cmp	r3, #10
 8008cf6:	d008      	beq.n	8008d0a <USART_SetConfig+0x216>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfc:	2b0b      	cmp	r3, #11
 8008cfe:	d102      	bne.n	8008d06 <USART_SetConfig+0x212>
 8008d00:	2380      	movs	r3, #128	; 0x80
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	e016      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e014      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d0a:	2380      	movs	r3, #128	; 0x80
 8008d0c:	e012      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	e010      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d12:	2320      	movs	r3, #32
 8008d14:	e00e      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d16:	2310      	movs	r3, #16
 8008d18:	e00c      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d1a:	230c      	movs	r3, #12
 8008d1c:	e00a      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d1e:	230a      	movs	r3, #10
 8008d20:	e008      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d22:	2308      	movs	r3, #8
 8008d24:	e006      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d26:	2306      	movs	r3, #6
 8008d28:	e004      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d2a:	2304      	movs	r3, #4
 8008d2c:	e002      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d2e:	2302      	movs	r3, #2
 8008d30:	e000      	b.n	8008d34 <USART_SetConfig+0x240>
 8008d32:	2301      	movs	r3, #1
 8008d34:	0019      	movs	r1, r3
 8008d36:	6938      	ldr	r0, [r7, #16]
 8008d38:	f7f7 f9e4 	bl	8000104 <__udivsi3>
 8008d3c:	0003      	movs	r3, r0
 8008d3e:	005a      	lsls	r2, r3, #1
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	085b      	lsrs	r3, r3, #1
 8008d46:	18d2      	adds	r2, r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	0019      	movs	r1, r3
 8008d4e:	0010      	movs	r0, r2
 8008d50:	f7f7 f9d8 	bl	8000104 <__udivsi3>
 8008d54:	0003      	movs	r3, r0
 8008d56:	61bb      	str	r3, [r7, #24]
      break;
 8008d58:	e12e      	b.n	8008fb8 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d052      	beq.n	8008e08 <USART_SetConfig+0x314>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d03e      	beq.n	8008de8 <USART_SetConfig+0x2f4>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d038      	beq.n	8008de4 <USART_SetConfig+0x2f0>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d032      	beq.n	8008de0 <USART_SetConfig+0x2ec>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d02c      	beq.n	8008ddc <USART_SetConfig+0x2e8>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d026      	beq.n	8008dd8 <USART_SetConfig+0x2e4>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b06      	cmp	r3, #6
 8008d90:	d020      	beq.n	8008dd4 <USART_SetConfig+0x2e0>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b07      	cmp	r3, #7
 8008d98:	d01a      	beq.n	8008dd0 <USART_SetConfig+0x2dc>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	d014      	beq.n	8008dcc <USART_SetConfig+0x2d8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b09      	cmp	r3, #9
 8008da8:	d00e      	beq.n	8008dc8 <USART_SetConfig+0x2d4>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b0a      	cmp	r3, #10
 8008db0:	d008      	beq.n	8008dc4 <USART_SetConfig+0x2d0>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b0b      	cmp	r3, #11
 8008db8:	d102      	bne.n	8008dc0 <USART_SetConfig+0x2cc>
 8008dba:	2380      	movs	r3, #128	; 0x80
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	e024      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e022      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dc4:	2380      	movs	r3, #128	; 0x80
 8008dc6:	e020      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	e01e      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dcc:	2320      	movs	r3, #32
 8008dce:	e01c      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dd0:	2310      	movs	r3, #16
 8008dd2:	e01a      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	e018      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dd8:	230a      	movs	r3, #10
 8008dda:	e016      	b.n	8008e0a <USART_SetConfig+0x316>
 8008ddc:	2308      	movs	r3, #8
 8008dde:	e014      	b.n	8008e0a <USART_SetConfig+0x316>
 8008de0:	2306      	movs	r3, #6
 8008de2:	e012      	b.n	8008e0a <USART_SetConfig+0x316>
 8008de4:	2304      	movs	r3, #4
 8008de6:	e010      	b.n	8008e0a <USART_SetConfig+0x316>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e00e      	b.n	8008e0a <USART_SetConfig+0x316>
 8008dec:	cfff69f3 	.word	0xcfff69f3
 8008df0:	ffffc0f6 	.word	0xffffc0f6
 8008df4:	40013800 	.word	0x40013800
 8008df8:	40021000 	.word	0x40021000
 8008dfc:	40004400 	.word	0x40004400
 8008e00:	40004800 	.word	0x40004800
 8008e04:	40004c00 	.word	0x40004c00
 8008e08:	2301      	movs	r3, #1
 8008e0a:	0019      	movs	r1, r3
 8008e0c:	4886      	ldr	r0, [pc, #536]	; (8009028 <USART_SetConfig+0x534>)
 8008e0e:	f7f7 f979 	bl	8000104 <__udivsi3>
 8008e12:	0003      	movs	r3, r0
 8008e14:	005a      	lsls	r2, r3, #1
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	18d2      	adds	r2, r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	0019      	movs	r1, r3
 8008e24:	0010      	movs	r0, r2
 8008e26:	f7f7 f96d 	bl	8000104 <__udivsi3>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	61bb      	str	r3, [r7, #24]
      break;
 8008e2e:	e0c3      	b.n	8008fb8 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008e30:	f7fc fc92 	bl	8005758 <HAL_RCC_GetSysClockFreq>
 8008e34:	0003      	movs	r3, r0
 8008e36:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d044      	beq.n	8008eca <USART_SetConfig+0x3d6>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d03e      	beq.n	8008ec6 <USART_SetConfig+0x3d2>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d038      	beq.n	8008ec2 <USART_SetConfig+0x3ce>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d032      	beq.n	8008ebe <USART_SetConfig+0x3ca>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b04      	cmp	r3, #4
 8008e5e:	d02c      	beq.n	8008eba <USART_SetConfig+0x3c6>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b05      	cmp	r3, #5
 8008e66:	d026      	beq.n	8008eb6 <USART_SetConfig+0x3c2>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b06      	cmp	r3, #6
 8008e6e:	d020      	beq.n	8008eb2 <USART_SetConfig+0x3be>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	2b07      	cmp	r3, #7
 8008e76:	d01a      	beq.n	8008eae <USART_SetConfig+0x3ba>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7c:	2b08      	cmp	r3, #8
 8008e7e:	d014      	beq.n	8008eaa <USART_SetConfig+0x3b6>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d00e      	beq.n	8008ea6 <USART_SetConfig+0x3b2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8c:	2b0a      	cmp	r3, #10
 8008e8e:	d008      	beq.n	8008ea2 <USART_SetConfig+0x3ae>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	2b0b      	cmp	r3, #11
 8008e96:	d102      	bne.n	8008e9e <USART_SetConfig+0x3aa>
 8008e98:	2380      	movs	r3, #128	; 0x80
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	e016      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e014      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008ea2:	2380      	movs	r3, #128	; 0x80
 8008ea4:	e012      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	e010      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008eaa:	2320      	movs	r3, #32
 8008eac:	e00e      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008eae:	2310      	movs	r3, #16
 8008eb0:	e00c      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	e00a      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	e008      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008eba:	2308      	movs	r3, #8
 8008ebc:	e006      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008ebe:	2306      	movs	r3, #6
 8008ec0:	e004      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	e002      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	e000      	b.n	8008ecc <USART_SetConfig+0x3d8>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	0019      	movs	r1, r3
 8008ece:	6938      	ldr	r0, [r7, #16]
 8008ed0:	f7f7 f918 	bl	8000104 <__udivsi3>
 8008ed4:	0003      	movs	r3, r0
 8008ed6:	005a      	lsls	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	18d2      	adds	r2, r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	0019      	movs	r1, r3
 8008ee6:	0010      	movs	r0, r2
 8008ee8:	f7f7 f90c 	bl	8000104 <__udivsi3>
 8008eec:	0003      	movs	r3, r0
 8008eee:	61bb      	str	r3, [r7, #24]
      break;
 8008ef0:	e062      	b.n	8008fb8 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d044      	beq.n	8008f84 <USART_SetConfig+0x490>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d03e      	beq.n	8008f80 <USART_SetConfig+0x48c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d038      	beq.n	8008f7c <USART_SetConfig+0x488>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d032      	beq.n	8008f78 <USART_SetConfig+0x484>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d02c      	beq.n	8008f74 <USART_SetConfig+0x480>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	2b05      	cmp	r3, #5
 8008f20:	d026      	beq.n	8008f70 <USART_SetConfig+0x47c>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b06      	cmp	r3, #6
 8008f28:	d020      	beq.n	8008f6c <USART_SetConfig+0x478>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2b07      	cmp	r3, #7
 8008f30:	d01a      	beq.n	8008f68 <USART_SetConfig+0x474>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	2b08      	cmp	r3, #8
 8008f38:	d014      	beq.n	8008f64 <USART_SetConfig+0x470>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	2b09      	cmp	r3, #9
 8008f40:	d00e      	beq.n	8008f60 <USART_SetConfig+0x46c>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	2b0a      	cmp	r3, #10
 8008f48:	d008      	beq.n	8008f5c <USART_SetConfig+0x468>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4e:	2b0b      	cmp	r3, #11
 8008f50:	d102      	bne.n	8008f58 <USART_SetConfig+0x464>
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	005b      	lsls	r3, r3, #1
 8008f56:	e016      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e014      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	e012      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f60:	2340      	movs	r3, #64	; 0x40
 8008f62:	e010      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f64:	2320      	movs	r3, #32
 8008f66:	e00e      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f68:	2310      	movs	r3, #16
 8008f6a:	e00c      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	e00a      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f70:	230a      	movs	r3, #10
 8008f72:	e008      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f74:	2308      	movs	r3, #8
 8008f76:	e006      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f78:	2306      	movs	r3, #6
 8008f7a:	e004      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	e002      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f80:	2302      	movs	r3, #2
 8008f82:	e000      	b.n	8008f86 <USART_SetConfig+0x492>
 8008f84:	2301      	movs	r3, #1
 8008f86:	0019      	movs	r1, r3
 8008f88:	2380      	movs	r3, #128	; 0x80
 8008f8a:	0218      	lsls	r0, r3, #8
 8008f8c:	f7f7 f8ba 	bl	8000104 <__udivsi3>
 8008f90:	0003      	movs	r3, r0
 8008f92:	005a      	lsls	r2, r3, #1
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	18d2      	adds	r2, r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	0019      	movs	r1, r3
 8008fa2:	0010      	movs	r0, r2
 8008fa4:	f7f7 f8ae 	bl	8000104 <__udivsi3>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	61bb      	str	r3, [r7, #24]
      break;
 8008fac:	e004      	b.n	8008fb8 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8008fae:	231e      	movs	r3, #30
 8008fb0:	18fb      	adds	r3, r7, r3
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	701a      	strb	r2, [r3, #0]
      break;
 8008fb6:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	2b0f      	cmp	r3, #15
 8008fbc:	d91c      	bls.n	8008ff8 <USART_SetConfig+0x504>
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	2380      	movs	r3, #128	; 0x80
 8008fc2:	025b      	lsls	r3, r3, #9
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d217      	bcs.n	8008ff8 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	200e      	movs	r0, #14
 8008fce:	183b      	adds	r3, r7, r0
 8008fd0:	210f      	movs	r1, #15
 8008fd2:	438a      	bics	r2, r1
 8008fd4:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	085b      	lsrs	r3, r3, #1
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2207      	movs	r2, #7
 8008fde:	4013      	ands	r3, r2
 8008fe0:	b299      	uxth	r1, r3
 8008fe2:	183b      	adds	r3, r7, r0
 8008fe4:	183a      	adds	r2, r7, r0
 8008fe6:	8812      	ldrh	r2, [r2, #0]
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	183a      	adds	r2, r7, r0
 8008ff2:	8812      	ldrh	r2, [r2, #0]
 8008ff4:	60da      	str	r2, [r3, #12]
 8008ff6:	e003      	b.n	8009000 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8008ff8:	231e      	movs	r3, #30
 8008ffa:	18fb      	adds	r3, r7, r3
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009018:	231e      	movs	r3, #30
 800901a:	18fb      	adds	r3, r7, r3
 800901c:	781b      	ldrb	r3, [r3, #0]
}
 800901e:	0018      	movs	r0, r3
 8009020:	46bd      	mov	sp, r7
 8009022:	b008      	add	sp, #32
 8009024:	bd80      	pop	{r7, pc}
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	00f42400 	.word	0x00f42400

0800902c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af02      	add	r7, sp, #8
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800903a:	f7f9 ff2b 	bl	8002e94 <HAL_GetTick>
 800903e:	0003      	movs	r3, r0
 8009040:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2208      	movs	r2, #8
 800904a:	4013      	ands	r3, r2
 800904c:	2b08      	cmp	r3, #8
 800904e:	d10e      	bne.n	800906e <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	2380      	movs	r3, #128	; 0x80
 8009054:	0399      	lsls	r1, r3, #14
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	23fa      	movs	r3, #250	; 0xfa
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	0013      	movs	r3, r2
 8009060:	2200      	movs	r2, #0
 8009062:	f7ff fd12 	bl	8008a8a <USART_WaitOnFlagUntilTimeout>
 8009066:	1e03      	subs	r3, r0, #0
 8009068:	d001      	beq.n	800906e <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e01e      	b.n	80090ac <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2204      	movs	r2, #4
 8009076:	4013      	ands	r3, r2
 8009078:	2b04      	cmp	r3, #4
 800907a:	d10e      	bne.n	800909a <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	2380      	movs	r3, #128	; 0x80
 8009080:	03d9      	lsls	r1, r3, #15
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	23fa      	movs	r3, #250	; 0xfa
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	0013      	movs	r3, r2
 800908c:	2200      	movs	r2, #0
 800908e:	f7ff fcfc 	bl	8008a8a <USART_WaitOnFlagUntilTimeout>
 8009092:	1e03      	subs	r3, r0, #0
 8009094:	d001      	beq.n	800909a <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e008      	b.n	80090ac <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2259      	movs	r2, #89	; 0x59
 800909e:	2101      	movs	r1, #1
 80090a0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2258      	movs	r2, #88	; 0x58
 80090a6:	2100      	movs	r1, #0
 80090a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	0018      	movs	r0, r3
 80090ae:	46bd      	mov	sp, r7
 80090b0:	b004      	add	sp, #16
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2140      	movs	r1, #64	; 0x40
 80090c8:	438a      	bics	r2, r1
 80090ca:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2101      	movs	r1, #1
 80090d8:	438a      	bics	r2, r1
 80090da:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2259      	movs	r2, #89	; 0x59
 80090e6:	5c9b      	ldrb	r3, [r3, r2]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b12      	cmp	r3, #18
 80090ec:	d114      	bne.n	8009118 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2208      	movs	r2, #8
 80090f4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2108      	movs	r1, #8
 8009102:	430a      	orrs	r2, r1
 8009104:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2259      	movs	r2, #89	; 0x59
 800910a:	2101      	movs	r1, #1
 800910c:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	0018      	movs	r0, r3
 8009112:	f7ff fc6d 	bl	80089f0 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009116:	e00c      	b.n	8009132 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	d107      	bne.n	8009132 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2259      	movs	r2, #89	; 0x59
 8009126:	2101      	movs	r1, #1
 8009128:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	0018      	movs	r0, r3
 800912e:	f7ff fc67 	bl	8008a00 <HAL_USART_TxRxCpltCallback>
}
 8009132:	46c0      	nop			; (mov r8, r8)
 8009134:	46bd      	mov	sp, r7
 8009136:	b002      	add	sp, #8
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	46bd      	mov	sp, r7
 8009146:	b002      	add	sp, #8
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009152:	46c0      	nop			; (mov r8, r8)
 8009154:	46bd      	mov	sp, r7
 8009156:	b002      	add	sp, #8
 8009158:	bd80      	pop	{r7, pc}

0800915a <LL_GPIO_SetPinMode>:
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6819      	ldr	r1, [r3, #0]
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	435b      	muls	r3, r3
 800916e:	001a      	movs	r2, r3
 8009170:	0013      	movs	r3, r2
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	189b      	adds	r3, r3, r2
 8009176:	43db      	mvns	r3, r3
 8009178:	400b      	ands	r3, r1
 800917a:	001a      	movs	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	435b      	muls	r3, r3
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	434b      	muls	r3, r1
 8009184:	431a      	orrs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	601a      	str	r2, [r3, #0]
}
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	46bd      	mov	sp, r7
 800918e:	b004      	add	sp, #16
 8009190:	bd80      	pop	{r7, pc}

08009192 <LL_GPIO_SetPinOutputType>:
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	43d2      	mvns	r2, r2
 80091a6:	401a      	ands	r2, r3
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	434b      	muls	r3, r1
 80091ae:	431a      	orrs	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	605a      	str	r2, [r3, #4]
}
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b004      	add	sp, #16
 80091ba:	bd80      	pop	{r7, pc}

080091bc <LL_GPIO_SetPinSpeed>:
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6899      	ldr	r1, [r3, #8]
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	435b      	muls	r3, r3
 80091d0:	001a      	movs	r2, r3
 80091d2:	0013      	movs	r3, r2
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	189b      	adds	r3, r3, r2
 80091d8:	43db      	mvns	r3, r3
 80091da:	400b      	ands	r3, r1
 80091dc:	001a      	movs	r2, r3
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	435b      	muls	r3, r3
 80091e2:	6879      	ldr	r1, [r7, #4]
 80091e4:	434b      	muls	r3, r1
 80091e6:	431a      	orrs	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	609a      	str	r2, [r3, #8]
}
 80091ec:	46c0      	nop			; (mov r8, r8)
 80091ee:	46bd      	mov	sp, r7
 80091f0:	b004      	add	sp, #16
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <LL_GPIO_SetPinPull>:
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68d9      	ldr	r1, [r3, #12]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	435b      	muls	r3, r3
 8009208:	001a      	movs	r2, r3
 800920a:	0013      	movs	r3, r2
 800920c:	005b      	lsls	r3, r3, #1
 800920e:	189b      	adds	r3, r3, r2
 8009210:	43db      	mvns	r3, r3
 8009212:	400b      	ands	r3, r1
 8009214:	001a      	movs	r2, r3
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	435b      	muls	r3, r3
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	434b      	muls	r3, r1
 800921e:	431a      	orrs	r2, r3
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	60da      	str	r2, [r3, #12]
}
 8009224:	46c0      	nop			; (mov r8, r8)
 8009226:	46bd      	mov	sp, r7
 8009228:	b004      	add	sp, #16
 800922a:	bd80      	pop	{r7, pc}

0800922c <LL_GPIO_SetAFPin_0_7>:
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a19      	ldr	r1, [r3, #32]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	435b      	muls	r3, r3
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	4353      	muls	r3, r2
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	435a      	muls	r2, r3
 8009248:	0013      	movs	r3, r2
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	43db      	mvns	r3, r3
 8009250:	400b      	ands	r3, r1
 8009252:	001a      	movs	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	435b      	muls	r3, r3
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	434b      	muls	r3, r1
 800925c:	68b9      	ldr	r1, [r7, #8]
 800925e:	434b      	muls	r3, r1
 8009260:	6879      	ldr	r1, [r7, #4]
 8009262:	434b      	muls	r3, r1
 8009264:	431a      	orrs	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	46bd      	mov	sp, r7
 800926e:	b004      	add	sp, #16
 8009270:	bd80      	pop	{r7, pc}

08009272 <LL_GPIO_SetAFPin_8_15>:
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	0a1b      	lsrs	r3, r3, #8
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	0a12      	lsrs	r2, r2, #8
 800928a:	4353      	muls	r3, r2
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	0a12      	lsrs	r2, r2, #8
 8009290:	4353      	muls	r3, r2
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	0a12      	lsrs	r2, r2, #8
 8009296:	435a      	muls	r2, r3
 8009298:	0013      	movs	r3, r2
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	1a9b      	subs	r3, r3, r2
 800929e:	43db      	mvns	r3, r3
 80092a0:	400b      	ands	r3, r1
 80092a2:	001a      	movs	r2, r3
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	0a09      	lsrs	r1, r1, #8
 80092ac:	434b      	muls	r3, r1
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	0a09      	lsrs	r1, r1, #8
 80092b2:	434b      	muls	r3, r1
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	0a09      	lsrs	r1, r1, #8
 80092b8:	434b      	muls	r3, r1
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	434b      	muls	r3, r1
 80092be:	431a      	orrs	r2, r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80092c4:	46c0      	nop			; (mov r8, r8)
 80092c6:	46bd      	mov	sp, r7
 80092c8:	b004      	add	sp, #16
 80092ca:	bd80      	pop	{r7, pc}

080092cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80092da:	e047      	b.n	800936c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2101      	movs	r1, #1
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	4091      	lsls	r1, r2
 80092e6:	000a      	movs	r2, r1
 80092e8:	4013      	ands	r3, r2
 80092ea:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d039      	beq.n	8009366 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d003      	beq.n	8009302 <LL_GPIO_Init+0x36>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d10d      	bne.n	800931e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	0018      	movs	r0, r3
 800930c:	f7ff ff56 	bl	80091bc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	68da      	ldr	r2, [r3, #12]
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	0018      	movs	r0, r3
 800931a:	f7ff ff3a 	bl	8009192 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	68b9      	ldr	r1, [r7, #8]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	0018      	movs	r0, r3
 8009328:	f7ff ff64 	bl	80091f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2b02      	cmp	r3, #2
 8009332:	d111      	bne.n	8009358 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2bff      	cmp	r3, #255	; 0xff
 8009338:	d807      	bhi.n	800934a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	68b9      	ldr	r1, [r7, #8]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	0018      	movs	r0, r3
 8009344:	f7ff ff72 	bl	800922c <LL_GPIO_SetAFPin_0_7>
 8009348:	e006      	b.n	8009358 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	695a      	ldr	r2, [r3, #20]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	0018      	movs	r0, r3
 8009354:	f7ff ff8d 	bl	8009272 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	68b9      	ldr	r1, [r7, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	0018      	movs	r0, r3
 8009362:	f7ff fefa 	bl	800915a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	40da      	lsrs	r2, r3
 8009374:	1e13      	subs	r3, r2, #0
 8009376:	d1b1      	bne.n	80092dc <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009378:	2300      	movs	r3, #0
}
 800937a:	0018      	movs	r0, r3
 800937c:	46bd      	mov	sp, r7
 800937e:	b004      	add	sp, #16
 8009380:	bd80      	pop	{r7, pc}
	...

08009384 <LL_RCC_HSI_IsReady>:
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <LL_RCC_HSI_IsReady+0x24>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	2380      	movs	r3, #128	; 0x80
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	401a      	ands	r2, r3
 8009392:	2380      	movs	r3, #128	; 0x80
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	429a      	cmp	r2, r3
 8009398:	d101      	bne.n	800939e <LL_RCC_HSI_IsReady+0x1a>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <LL_RCC_HSI_IsReady+0x1c>
 800939e:	2300      	movs	r3, #0
}
 80093a0:	0018      	movs	r0, r3
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	46c0      	nop			; (mov r8, r8)
 80093a8:	40021000 	.word	0x40021000

080093ac <LL_RCC_LSE_IsReady>:
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <LL_RCC_LSE_IsReady+0x1c>)
 80093b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b4:	2202      	movs	r2, #2
 80093b6:	4013      	ands	r3, r2
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d101      	bne.n	80093c0 <LL_RCC_LSE_IsReady+0x14>
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <LL_RCC_LSE_IsReady+0x16>
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	0018      	movs	r0, r3
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40021000 	.word	0x40021000

080093cc <LL_RCC_GetSysClkSource>:
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <LL_RCC_GetSysClkSource+0x14>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	2238      	movs	r2, #56	; 0x38
 80093d6:	4013      	ands	r3, r2
}
 80093d8:	0018      	movs	r0, r3
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	40021000 	.word	0x40021000

080093e4 <LL_RCC_GetAHBPrescaler>:
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80093e8:	4b03      	ldr	r3, [pc, #12]	; (80093f8 <LL_RCC_GetAHBPrescaler+0x14>)
 80093ea:	689a      	ldr	r2, [r3, #8]
 80093ec:	23f0      	movs	r3, #240	; 0xf0
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	4013      	ands	r3, r2
}
 80093f2:	0018      	movs	r0, r3
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40021000 	.word	0x40021000

080093fc <LL_RCC_GetAPB1Prescaler>:
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009400:	4b03      	ldr	r3, [pc, #12]	; (8009410 <LL_RCC_GetAPB1Prescaler+0x14>)
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	23e0      	movs	r3, #224	; 0xe0
 8009406:	01db      	lsls	r3, r3, #7
 8009408:	4013      	ands	r3, r2
}
 800940a:	0018      	movs	r0, r3
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	40021000 	.word	0x40021000

08009414 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800941c:	4b05      	ldr	r3, [pc, #20]	; (8009434 <LL_RCC_GetUSARTClockSource+0x20>)
 800941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	401a      	ands	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	041b      	lsls	r3, r3, #16
 8009428:	4313      	orrs	r3, r2
}
 800942a:	0018      	movs	r0, r3
 800942c:	46bd      	mov	sp, r7
 800942e:	b002      	add	sp, #8
 8009430:	bd80      	pop	{r7, pc}
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	40021000 	.word	0x40021000

08009438 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800943c:	4b03      	ldr	r3, [pc, #12]	; (800944c <LL_RCC_PLL_GetN+0x14>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	0a1b      	lsrs	r3, r3, #8
 8009442:	227f      	movs	r2, #127	; 0x7f
 8009444:	4013      	ands	r3, r2
}
 8009446:	0018      	movs	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	40021000 	.word	0x40021000

08009450 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <LL_RCC_PLL_GetR+0x14>)
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	0f5b      	lsrs	r3, r3, #29
 800945a:	075b      	lsls	r3, r3, #29
}
 800945c:	0018      	movs	r0, r3
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	40021000 	.word	0x40021000

08009468 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800946c:	4b03      	ldr	r3, [pc, #12]	; (800947c <LL_RCC_PLL_GetMainSource+0x14>)
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	2203      	movs	r2, #3
 8009472:	4013      	ands	r3, r2
}
 8009474:	0018      	movs	r0, r3
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	46c0      	nop			; (mov r8, r8)
 800947c:	40021000 	.word	0x40021000

08009480 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <LL_RCC_PLL_GetDivider+0x14>)
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2270      	movs	r2, #112	; 0x70
 800948a:	4013      	ands	r3, r2
}
 800948c:	0018      	movs	r0, r3
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	46c0      	nop			; (mov r8, r8)
 8009494:	40021000 	.word	0x40021000

08009498 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80094a0:	f000 f8a8 	bl	80095f4 <RCC_GetSystemClockFreq>
 80094a4:	0002      	movs	r2, r0
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 f8ce 	bl	8009650 <RCC_GetHCLKClockFreq>
 80094b4:	0002      	movs	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	0018      	movs	r0, r3
 80094c0:	f000 f8de 	bl	8009680 <RCC_GetPCLK1ClockFreq>
 80094c4:	0002      	movs	r2, r0
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	609a      	str	r2, [r3, #8]
}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	46bd      	mov	sp, r7
 80094ce:	b002      	add	sp, #8
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d134      	bne.n	8009550 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	0018      	movs	r0, r3
 80094ea:	f7ff ff93 	bl	8009414 <LL_RCC_GetUSARTClockSource>
 80094ee:	0003      	movs	r3, r0
 80094f0:	4a39      	ldr	r2, [pc, #228]	; (80095d8 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d016      	beq.n	8009524 <LL_RCC_GetUSARTClockFreq+0x50>
 80094f6:	4a38      	ldr	r2, [pc, #224]	; (80095d8 <LL_RCC_GetUSARTClockFreq+0x104>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d81c      	bhi.n	8009536 <LL_RCC_GetUSARTClockFreq+0x62>
 80094fc:	4a37      	ldr	r2, [pc, #220]	; (80095dc <LL_RCC_GetUSARTClockFreq+0x108>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d003      	beq.n	800950a <LL_RCC_GetUSARTClockFreq+0x36>
 8009502:	4a37      	ldr	r2, [pc, #220]	; (80095e0 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d005      	beq.n	8009514 <LL_RCC_GetUSARTClockFreq+0x40>
 8009508:	e015      	b.n	8009536 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800950a:	f000 f873 	bl	80095f4 <RCC_GetSystemClockFreq>
 800950e:	0003      	movs	r3, r0
 8009510:	60fb      	str	r3, [r7, #12]
        break;
 8009512:	e05c      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009514:	f7ff ff36 	bl	8009384 <LL_RCC_HSI_IsReady>
 8009518:	0003      	movs	r3, r0
 800951a:	2b01      	cmp	r3, #1
 800951c:	d150      	bne.n	80095c0 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800951e:	4b31      	ldr	r3, [pc, #196]	; (80095e4 <LL_RCC_GetUSARTClockFreq+0x110>)
 8009520:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009522:	e04d      	b.n	80095c0 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009524:	f7ff ff42 	bl	80093ac <LL_RCC_LSE_IsReady>
 8009528:	0003      	movs	r3, r0
 800952a:	2b01      	cmp	r3, #1
 800952c:	d14a      	bne.n	80095c4 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800952e:	2380      	movs	r3, #128	; 0x80
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009534:	e046      	b.n	80095c4 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8009536:	f000 f85d 	bl	80095f4 <RCC_GetSystemClockFreq>
 800953a:	0003      	movs	r3, r0
 800953c:	0018      	movs	r0, r3
 800953e:	f000 f887 	bl	8009650 <RCC_GetHCLKClockFreq>
 8009542:	0003      	movs	r3, r0
 8009544:	0018      	movs	r0, r3
 8009546:	f000 f89b 	bl	8009680 <RCC_GetPCLK1ClockFreq>
 800954a:	0003      	movs	r3, r0
 800954c:	60fb      	str	r3, [r7, #12]
        break;
 800954e:	e03e      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b0c      	cmp	r3, #12
 8009554:	d13b      	bne.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	0018      	movs	r0, r3
 800955a:	f7ff ff5b 	bl	8009414 <LL_RCC_GetUSARTClockSource>
 800955e:	0003      	movs	r3, r0
 8009560:	4a21      	ldr	r2, [pc, #132]	; (80095e8 <LL_RCC_GetUSARTClockFreq+0x114>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d016      	beq.n	8009594 <LL_RCC_GetUSARTClockFreq+0xc0>
 8009566:	4a20      	ldr	r2, [pc, #128]	; (80095e8 <LL_RCC_GetUSARTClockFreq+0x114>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d81c      	bhi.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xd2>
 800956c:	4a1f      	ldr	r2, [pc, #124]	; (80095ec <LL_RCC_GetUSARTClockFreq+0x118>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d003      	beq.n	800957a <LL_RCC_GetUSARTClockFreq+0xa6>
 8009572:	4a1f      	ldr	r2, [pc, #124]	; (80095f0 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d005      	beq.n	8009584 <LL_RCC_GetUSARTClockFreq+0xb0>
 8009578:	e015      	b.n	80095a6 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800957a:	f000 f83b 	bl	80095f4 <RCC_GetSystemClockFreq>
 800957e:	0003      	movs	r3, r0
 8009580:	60fb      	str	r3, [r7, #12]
        break;
 8009582:	e024      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8009584:	f7ff fefe 	bl	8009384 <LL_RCC_HSI_IsReady>
 8009588:	0003      	movs	r3, r0
 800958a:	2b01      	cmp	r3, #1
 800958c:	d11c      	bne.n	80095c8 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800958e:	4b15      	ldr	r3, [pc, #84]	; (80095e4 <LL_RCC_GetUSARTClockFreq+0x110>)
 8009590:	60fb      	str	r3, [r7, #12]
        }
        break;
 8009592:	e019      	b.n	80095c8 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8009594:	f7ff ff0a 	bl	80093ac <LL_RCC_LSE_IsReady>
 8009598:	0003      	movs	r3, r0
 800959a:	2b01      	cmp	r3, #1
 800959c:	d116      	bne.n	80095cc <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800959e:	2380      	movs	r3, #128	; 0x80
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80095a4:	e012      	b.n	80095cc <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80095a6:	f000 f825 	bl	80095f4 <RCC_GetSystemClockFreq>
 80095aa:	0003      	movs	r3, r0
 80095ac:	0018      	movs	r0, r3
 80095ae:	f000 f84f 	bl	8009650 <RCC_GetHCLKClockFreq>
 80095b2:	0003      	movs	r3, r0
 80095b4:	0018      	movs	r0, r3
 80095b6:	f000 f863 	bl	8009680 <RCC_GetPCLK1ClockFreq>
 80095ba:	0003      	movs	r3, r0
 80095bc:	60fb      	str	r3, [r7, #12]
        break;
 80095be:	e006      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80095c0:	46c0      	nop			; (mov r8, r8)
 80095c2:	e004      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80095c4:	46c0      	nop			; (mov r8, r8)
 80095c6:	e002      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80095c8:	46c0      	nop			; (mov r8, r8)
 80095ca:	e000      	b.n	80095ce <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80095cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80095ce:	68fb      	ldr	r3, [r7, #12]
}
 80095d0:	0018      	movs	r0, r3
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b004      	add	sp, #16
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	00030003 	.word	0x00030003
 80095dc:	00030001 	.word	0x00030001
 80095e0:	00030002 	.word	0x00030002
 80095e4:	00f42400 	.word	0x00f42400
 80095e8:	000c000c 	.word	0x000c000c
 80095ec:	000c0004 	.word	0x000c0004
 80095f0:	000c0008 	.word	0x000c0008

080095f4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80095fa:	f7ff fee7 	bl	80093cc <LL_RCC_GetSysClkSource>
 80095fe:	0003      	movs	r3, r0
 8009600:	2b08      	cmp	r3, #8
 8009602:	d002      	beq.n	800960a <RCC_GetSystemClockFreq+0x16>
 8009604:	2b10      	cmp	r3, #16
 8009606:	d003      	beq.n	8009610 <RCC_GetSystemClockFreq+0x1c>
 8009608:	e007      	b.n	800961a <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800960a:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <RCC_GetSystemClockFreq+0x50>)
 800960c:	607b      	str	r3, [r7, #4]
      break;
 800960e:	e014      	b.n	800963a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8009610:	f000 f84c 	bl	80096ac <RCC_PLL_GetFreqDomain_SYS>
 8009614:	0003      	movs	r3, r0
 8009616:	607b      	str	r3, [r7, #4]
      break;
 8009618:	e00f      	b.n	800963a <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <RCC_GetSystemClockFreq+0x54>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	0adb      	lsrs	r3, r3, #11
 8009620:	2207      	movs	r2, #7
 8009622:	4013      	ands	r3, r2
 8009624:	2201      	movs	r2, #1
 8009626:	409a      	lsls	r2, r3
 8009628:	0013      	movs	r3, r2
 800962a:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	4807      	ldr	r0, [pc, #28]	; (800964c <RCC_GetSystemClockFreq+0x58>)
 8009630:	f7f6 fd68 	bl	8000104 <__udivsi3>
 8009634:	0003      	movs	r3, r0
 8009636:	607b      	str	r3, [r7, #4]
      break;
 8009638:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800963a:	687b      	ldr	r3, [r7, #4]
}
 800963c:	0018      	movs	r0, r3
 800963e:	46bd      	mov	sp, r7
 8009640:	b002      	add	sp, #8
 8009642:	bd80      	pop	{r7, pc}
 8009644:	007a1200 	.word	0x007a1200
 8009648:	40021000 	.word	0x40021000
 800964c:	00f42400 	.word	0x00f42400

08009650 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009658:	f7ff fec4 	bl	80093e4 <LL_RCC_GetAHBPrescaler>
 800965c:	0003      	movs	r3, r0
 800965e:	0a1b      	lsrs	r3, r3, #8
 8009660:	220f      	movs	r2, #15
 8009662:	401a      	ands	r2, r3
 8009664:	4b05      	ldr	r3, [pc, #20]	; (800967c <RCC_GetHCLKClockFreq+0x2c>)
 8009666:	0092      	lsls	r2, r2, #2
 8009668:	58d3      	ldr	r3, [r2, r3]
 800966a:	221f      	movs	r2, #31
 800966c:	4013      	ands	r3, r2
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	40da      	lsrs	r2, r3
 8009672:	0013      	movs	r3, r2
}
 8009674:	0018      	movs	r0, r3
 8009676:	46bd      	mov	sp, r7
 8009678:	b002      	add	sp, #8
 800967a:	bd80      	pop	{r7, pc}
 800967c:	080099f4 	.word	0x080099f4

08009680 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009688:	f7ff feb8 	bl	80093fc <LL_RCC_GetAPB1Prescaler>
 800968c:	0003      	movs	r3, r0
 800968e:	0b1a      	lsrs	r2, r3, #12
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <RCC_GetPCLK1ClockFreq+0x28>)
 8009692:	0092      	lsls	r2, r2, #2
 8009694:	58d3      	ldr	r3, [r2, r3]
 8009696:	221f      	movs	r2, #31
 8009698:	4013      	ands	r3, r2
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	40da      	lsrs	r2, r3
 800969e:	0013      	movs	r3, r2
}
 80096a0:	0018      	movs	r0, r3
 80096a2:	46bd      	mov	sp, r7
 80096a4:	b002      	add	sp, #8
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	08009a34 	.word	0x08009a34

080096ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80096ac:	b590      	push	{r4, r7, lr}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80096b2:	f7ff fed9 	bl	8009468 <LL_RCC_PLL_GetMainSource>
 80096b6:	0003      	movs	r3, r0
 80096b8:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d003      	beq.n	80096c8 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d003      	beq.n	80096ce <RCC_PLL_GetFreqDomain_SYS+0x22>
 80096c6:	e005      	b.n	80096d4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80096c8:	4b13      	ldr	r3, [pc, #76]	; (8009718 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80096ca:	607b      	str	r3, [r7, #4]
      break;
 80096cc:	e005      	b.n	80096da <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80096d0:	607b      	str	r3, [r7, #4]
      break;
 80096d2:	e002      	b.n	80096da <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80096d4:	4b10      	ldr	r3, [pc, #64]	; (8009718 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80096d6:	607b      	str	r3, [r7, #4]
      break;
 80096d8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80096da:	f7ff fead 	bl	8009438 <LL_RCC_PLL_GetN>
 80096de:	0002      	movs	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4353      	muls	r3, r2
 80096e4:	001c      	movs	r4, r3
 80096e6:	f7ff fecb 	bl	8009480 <LL_RCC_PLL_GetDivider>
 80096ea:	0003      	movs	r3, r0
 80096ec:	091b      	lsrs	r3, r3, #4
 80096ee:	3301      	adds	r3, #1
 80096f0:	0019      	movs	r1, r3
 80096f2:	0020      	movs	r0, r4
 80096f4:	f7f6 fd06 	bl	8000104 <__udivsi3>
 80096f8:	0003      	movs	r3, r0
 80096fa:	001c      	movs	r4, r3
 80096fc:	f7ff fea8 	bl	8009450 <LL_RCC_PLL_GetR>
 8009700:	0003      	movs	r3, r0
 8009702:	0f5b      	lsrs	r3, r3, #29
 8009704:	3301      	adds	r3, #1
 8009706:	0019      	movs	r1, r3
 8009708:	0020      	movs	r0, r4
 800970a:	f7f6 fcfb 	bl	8000104 <__udivsi3>
 800970e:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009710:	0018      	movs	r0, r3
 8009712:	46bd      	mov	sp, r7
 8009714:	b003      	add	sp, #12
 8009716:	bd90      	pop	{r4, r7, pc}
 8009718:	00f42400 	.word	0x00f42400
 800971c:	007a1200 	.word	0x007a1200

08009720 <LL_USART_IsEnabled>:
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2201      	movs	r2, #1
 800972e:	4013      	ands	r3, r2
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <LL_USART_IsEnabled+0x18>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <LL_USART_IsEnabled+0x1a>
 8009738:	2300      	movs	r3, #0
}
 800973a:	0018      	movs	r0, r3
 800973c:	46bd      	mov	sp, r7
 800973e:	b002      	add	sp, #8
 8009740:	bd80      	pop	{r7, pc}

08009742 <LL_USART_SetPrescaler>:
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	220f      	movs	r2, #15
 8009752:	4393      	bics	r3, r2
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	b292      	uxth	r2, r2
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	46bd      	mov	sp, r7
 8009762:	b002      	add	sp, #8
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <LL_USART_SetStopBitsLength>:
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	4a05      	ldr	r2, [pc, #20]	; (800978c <LL_USART_SetStopBitsLength+0x24>)
 8009778:	401a      	ands	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	605a      	str	r2, [r3, #4]
}
 8009782:	46c0      	nop			; (mov r8, r8)
 8009784:	46bd      	mov	sp, r7
 8009786:	b002      	add	sp, #8
 8009788:	bd80      	pop	{r7, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	ffffcfff 	.word	0xffffcfff

08009790 <LL_USART_SetHWFlowCtrl>:
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	4a05      	ldr	r2, [pc, #20]	; (80097b4 <LL_USART_SetHWFlowCtrl+0x24>)
 80097a0:	401a      	ands	r2, r3
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	609a      	str	r2, [r3, #8]
}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	46bd      	mov	sp, r7
 80097ae:	b002      	add	sp, #8
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	fffffcff 	.word	0xfffffcff

080097b8 <LL_USART_SetBaudRate>:
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b086      	sub	sp, #24
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b0b      	cmp	r3, #11
 80097ca:	d843      	bhi.n	8009854 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	2380      	movs	r3, #128	; 0x80
 80097d0:	021b      	lsls	r3, r3, #8
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d126      	bne.n	8009824 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	001a      	movs	r2, r3
 80097dc:	4b1f      	ldr	r3, [pc, #124]	; (800985c <LL_USART_SetBaudRate+0xa4>)
 80097de:	0092      	lsls	r2, r2, #2
 80097e0:	58d3      	ldr	r3, [r2, r3]
 80097e2:	0019      	movs	r1, r3
 80097e4:	68b8      	ldr	r0, [r7, #8]
 80097e6:	f7f6 fc8d 	bl	8000104 <__udivsi3>
 80097ea:	0003      	movs	r3, r0
 80097ec:	005a      	lsls	r2, r3, #1
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	085b      	lsrs	r3, r3, #1
 80097f2:	18d3      	adds	r3, r2, r3
 80097f4:	6a39      	ldr	r1, [r7, #32]
 80097f6:	0018      	movs	r0, r3
 80097f8:	f7f6 fc84 	bl	8000104 <__udivsi3>
 80097fc:	0003      	movs	r3, r0
 80097fe:	b29b      	uxth	r3, r3
 8009800:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	4a16      	ldr	r2, [pc, #88]	; (8009860 <LL_USART_SetBaudRate+0xa8>)
 8009806:	4013      	ands	r3, r2
 8009808:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	b29b      	uxth	r3, r3
 8009810:	001a      	movs	r2, r3
 8009812:	2307      	movs	r3, #7
 8009814:	4013      	ands	r3, r2
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	4313      	orrs	r3, r2
 800981a:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	693a      	ldr	r2, [r7, #16]
 8009820:	60da      	str	r2, [r3, #12]
}
 8009822:	e017      	b.n	8009854 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	001a      	movs	r2, r3
 800982a:	4b0c      	ldr	r3, [pc, #48]	; (800985c <LL_USART_SetBaudRate+0xa4>)
 800982c:	0092      	lsls	r2, r2, #2
 800982e:	58d3      	ldr	r3, [r2, r3]
 8009830:	0019      	movs	r1, r3
 8009832:	68b8      	ldr	r0, [r7, #8]
 8009834:	f7f6 fc66 	bl	8000104 <__udivsi3>
 8009838:	0003      	movs	r3, r0
 800983a:	001a      	movs	r2, r3
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	085b      	lsrs	r3, r3, #1
 8009840:	18d3      	adds	r3, r2, r3
 8009842:	6a39      	ldr	r1, [r7, #32]
 8009844:	0018      	movs	r0, r3
 8009846:	f7f6 fc5d 	bl	8000104 <__udivsi3>
 800984a:	0003      	movs	r3, r0
 800984c:	b29b      	uxth	r3, r3
 800984e:	001a      	movs	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	60da      	str	r2, [r3, #12]
}
 8009854:	46c0      	nop			; (mov r8, r8)
 8009856:	46bd      	mov	sp, r7
 8009858:	b006      	add	sp, #24
 800985a:	bd80      	pop	{r7, pc}
 800985c:	08009aa8 	.word	0x08009aa8
 8009860:	0000fff0 	.word	0x0000fff0

08009864 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b08b      	sub	sp, #44	; 0x2c
 8009868:	af02      	add	r7, sp, #8
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800986e:	231f      	movs	r3, #31
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	2201      	movs	r2, #1
 8009874:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8009876:	2300      	movs	r3, #0
 8009878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	0018      	movs	r0, r3
 800987e:	f7ff ff4f 	bl	8009720 <LL_USART_IsEnabled>
 8009882:	1e03      	subs	r3, r0, #0
 8009884:	d16a      	bne.n	800995c <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a38      	ldr	r2, [pc, #224]	; (800996c <LL_USART_Init+0x108>)
 800988c:	401a      	ands	r2, r3
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	6899      	ldr	r1, [r3, #8]
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	4319      	orrs	r1, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	4319      	orrs	r1, r3
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	430b      	orrs	r3, r1
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68da      	ldr	r2, [r3, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	0011      	movs	r1, r2
 80098b2:	0018      	movs	r0, r3
 80098b4:	f7ff ff58 	bl	8009768 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	699a      	ldr	r2, [r3, #24]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	0011      	movs	r1, r2
 80098c0:	0018      	movs	r0, r3
 80098c2:	f7ff ff65 	bl	8009790 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a29      	ldr	r2, [pc, #164]	; (8009970 <LL_USART_Init+0x10c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d105      	bne.n	80098da <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80098ce:	2003      	movs	r0, #3
 80098d0:	f7ff fe00 	bl	80094d4 <LL_RCC_GetUSARTClockFreq>
 80098d4:	0003      	movs	r3, r0
 80098d6:	61bb      	str	r3, [r7, #24]
 80098d8:	e022      	b.n	8009920 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a25      	ldr	r2, [pc, #148]	; (8009974 <LL_USART_Init+0x110>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d105      	bne.n	80098ee <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80098e2:	200c      	movs	r0, #12
 80098e4:	f7ff fdf6 	bl	80094d4 <LL_RCC_GetUSARTClockFreq>
 80098e8:	0003      	movs	r3, r0
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	e018      	b.n	8009920 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a21      	ldr	r2, [pc, #132]	; (8009978 <LL_USART_Init+0x114>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d108      	bne.n	8009908 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80098f6:	240c      	movs	r4, #12
 80098f8:	193b      	adds	r3, r7, r4
 80098fa:	0018      	movs	r0, r3
 80098fc:	f7ff fdcc 	bl	8009498 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8009900:	193b      	adds	r3, r7, r4
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	e00b      	b.n	8009920 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a1c      	ldr	r2, [pc, #112]	; (800997c <LL_USART_Init+0x118>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d107      	bne.n	8009920 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8009910:	240c      	movs	r4, #12
 8009912:	193b      	adds	r3, r7, r4
 8009914:	0018      	movs	r0, r3
 8009916:	f7ff fdbf 	bl	8009498 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800991a:	193b      	adds	r3, r7, r4
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d013      	beq.n	800994e <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00f      	beq.n	800994e <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800992e:	231f      	movs	r3, #31
 8009930:	18fb      	adds	r3, r7, r3
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	69dc      	ldr	r4, [r3, #28]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	69b9      	ldr	r1, [r7, #24]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	0023      	movs	r3, r4
 800994a:	f7ff ff35 	bl	80097b8 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	0011      	movs	r1, r2
 8009956:	0018      	movs	r0, r3
 8009958:	f7ff fef3 	bl	8009742 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800995c:	231f      	movs	r3, #31
 800995e:	18fb      	adds	r3, r7, r3
 8009960:	781b      	ldrb	r3, [r3, #0]
}
 8009962:	0018      	movs	r0, r3
 8009964:	46bd      	mov	sp, r7
 8009966:	b009      	add	sp, #36	; 0x24
 8009968:	bd90      	pop	{r4, r7, pc}
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	efff69f3 	.word	0xefff69f3
 8009970:	40013800 	.word	0x40013800
 8009974:	40004400 	.word	0x40004400
 8009978:	40004800 	.word	0x40004800
 800997c:	40004c00 	.word	0x40004c00

08009980 <__libc_init_array>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	2600      	movs	r6, #0
 8009984:	4d0c      	ldr	r5, [pc, #48]	; (80099b8 <__libc_init_array+0x38>)
 8009986:	4c0d      	ldr	r4, [pc, #52]	; (80099bc <__libc_init_array+0x3c>)
 8009988:	1b64      	subs	r4, r4, r5
 800998a:	10a4      	asrs	r4, r4, #2
 800998c:	42a6      	cmp	r6, r4
 800998e:	d109      	bne.n	80099a4 <__libc_init_array+0x24>
 8009990:	2600      	movs	r6, #0
 8009992:	f000 f821 	bl	80099d8 <_init>
 8009996:	4d0a      	ldr	r5, [pc, #40]	; (80099c0 <__libc_init_array+0x40>)
 8009998:	4c0a      	ldr	r4, [pc, #40]	; (80099c4 <__libc_init_array+0x44>)
 800999a:	1b64      	subs	r4, r4, r5
 800999c:	10a4      	asrs	r4, r4, #2
 800999e:	42a6      	cmp	r6, r4
 80099a0:	d105      	bne.n	80099ae <__libc_init_array+0x2e>
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	00b3      	lsls	r3, r6, #2
 80099a6:	58eb      	ldr	r3, [r5, r3]
 80099a8:	4798      	blx	r3
 80099aa:	3601      	adds	r6, #1
 80099ac:	e7ee      	b.n	800998c <__libc_init_array+0xc>
 80099ae:	00b3      	lsls	r3, r6, #2
 80099b0:	58eb      	ldr	r3, [r5, r3]
 80099b2:	4798      	blx	r3
 80099b4:	3601      	adds	r6, #1
 80099b6:	e7f2      	b.n	800999e <__libc_init_array+0x1e>
 80099b8:	08009ad8 	.word	0x08009ad8
 80099bc:	08009ad8 	.word	0x08009ad8
 80099c0:	08009ad8 	.word	0x08009ad8
 80099c4:	08009adc 	.word	0x08009adc

080099c8 <memset>:
 80099c8:	0003      	movs	r3, r0
 80099ca:	1882      	adds	r2, r0, r2
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d100      	bne.n	80099d2 <memset+0xa>
 80099d0:	4770      	bx	lr
 80099d2:	7019      	strb	r1, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	e7f9      	b.n	80099cc <memset+0x4>

080099d8 <_init>:
 80099d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099da:	46c0      	nop			; (mov r8, r8)
 80099dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099de:	bc08      	pop	{r3}
 80099e0:	469e      	mov	lr, r3
 80099e2:	4770      	bx	lr

080099e4 <_fini>:
 80099e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099e6:	46c0      	nop			; (mov r8, r8)
 80099e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ea:	bc08      	pop	{r3}
 80099ec:	469e      	mov	lr, r3
 80099ee:	4770      	bx	lr
