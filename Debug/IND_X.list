
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a67c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a820  0800a820  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800a820  0800a820  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a820  0800a820  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a820  0800a820  0001a820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a824  0800a824  0001a824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800a828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003140  0800d968  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005600  0800d968  00025600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d46  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003ceae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  00043330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d09d  00000000  00000000  0005f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae241  00000000  00000000  0007c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aa05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d4  00000000  00000000  0012aa58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a720 	.word	0x0800a720

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800a720 	.word	0x0800a720

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	2316      	movs	r3, #22
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	2314      	movs	r3, #20
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	2312      	movs	r3, #18
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd1d 	bl	8002f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f871 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <main+0xf0>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b31      	ldr	r3, [pc, #196]	; (8000620 <main+0xf0>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <main+0xf0>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <main+0xf0>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0xf0>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0xf0>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <main+0xf0>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0xf0>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0xf0>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbb3 	bl	8000d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fb83 	bl	8000cac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 faa1 	bl	8000aec <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8c5 	bl	8000738 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9a3 	bl	80008f8 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb39 	bl	8000c28 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f931 	bl	800081c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8ef 	bl	800079c <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f957 	bl	8000870 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0xf4>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ffaf 	bl	8003528 <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fd64 	bl	8003098 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fc60 	bl	8001e94 <MEM_Reset>

	weoInit();
 80005d4:	f000 fdfa 	bl	80011cc <weoInit>
	weoClear();
 80005d8:	f000 fe64 	bl	80012a4 <weoClear>

	MEM_GetID();
 80005dc:	f001 feac 	bl	8002338 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0xf8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0xf8>)
 80005e6:	4911      	ldr	r1, [pc, #68]	; (800062c <main+0xfc>)
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0xf8>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff20 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <main+0xf8>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ff2a 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <main+0xf8>)
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0xf8>)
 8000602:	2108      	movs	r1, #8
 8000604:	430a      	orrs	r2, r1
 8000606:	621a      	str	r2, [r3, #32]
//	USART3->CR1 |= USART_CR1_UE;
//weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x100>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <main+0x100>)
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <main+0x104>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	0018      	movs	r0, r3
 800061a:	f001 feef 	bl	80023fc <cmdExecute>
 800061e:	e7f9      	b.n	8000614 <main+0xe4>
 8000620:	40021000 	.word	0x40021000
 8000624:	20003350 	.word	0x20003350
 8000628:	40004400 	.word	0x40004400
 800062c:	1000100d 	.word	0x1000100d
 8000630:	50000800 	.word	0x50000800
 8000634:	2000345a 	.word	0x2000345a

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b0a1      	sub	sp, #132	; 0x84
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	2448      	movs	r4, #72	; 0x48
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2338      	movs	r3, #56	; 0x38
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f00a f861 	bl	800a710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	2338      	movs	r3, #56	; 0x38
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f00a f859 	bl	800a710 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	2334      	movs	r3, #52	; 0x34
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f00a f852 	bl	800a710 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	0018      	movs	r0, r3
 8000672:	f004 fdbb 	bl	80051ec <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2208      	movs	r2, #8
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0292      	lsls	r2, r2, #10
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0492      	lsls	r2, r2, #18
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0592      	lsls	r2, r2, #22
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fddd 	bl	8005284 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f001 ffdb 	bl	8002688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	2138      	movs	r1, #56	; 0x38
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2207      	movs	r2, #7
 80006d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2102      	movs	r1, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f005 f8e7 	bl	80058c4 <HAL_RCC_ClockConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fa:	f001 ffc5 	bl	8002688 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <SystemClock_Config+0xfc>)
 8000702:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	0018      	movs	r0, r3
 8000720:	f005 fa7a 	bl	8005c18 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000728:	f001 ffae 	bl	8002688 <Error_Handler>
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b021      	add	sp, #132	; 0x84
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	00200822 	.word	0x00200822

08000738 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_COMP1_Init+0x5c>)
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_COMP1_Init+0x60>)
 8000740:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_COMP1_Init+0x5c>)
 800074c:	2230      	movs	r2, #48	; 0x30
 800074e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_COMP1_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0392      	lsls	r2, r2, #14
 8000768:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_COMP1_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000778:	2212      	movs	r2, #18
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_COMP1_Init+0x5c>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fd70 	bl	8003264 <HAL_COMP_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000788:	f001 ff7e 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20003350 	.word	0x20003350
 8000798:	40010200 	.word	0x40010200

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f003 fc01 	bl	8003fe0 <HAL_I2C_Init>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f001 ff51 	bl	8002688 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x74>)
 80007e8:	2100      	movs	r1, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f004 fa8e 	bl	8004d0c <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f001 ff48 	bl	8002688 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f004 fad1 	bl	8004da4 <HAL_I2CEx_ConfigDigitalFilter>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f001 ff3f 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20003230 	.word	0x20003230
 8000814:	40005400 	.word	0x40005400
 8000818:	1094102c 	.word	0x1094102c

0800081c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_I2S1_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S1_Init+0x4c>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000844:	22fa      	movs	r2, #250	; 0xfa
 8000846:	0192      	lsls	r2, r2, #6
 8000848:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2S1_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000852:	0018      	movs	r0, r3
 8000854:	f004 faf2 	bl	8004e3c <HAL_I2S_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800085c:	f001 ff14 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	2000345c 	.word	0x2000345c
 800086c:	40013000 	.word	0x40013000

08000870 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000876:	2208      	movs	r2, #8
 8000878:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_SPI2_Init+0x80>)
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <MX_SPI2_Init+0x84>)
 800087e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000882:	2282      	movs	r2, #130	; 0x82
 8000884:	0052      	lsls	r2, r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_SPI2_Init+0x80>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000890:	22e0      	movs	r2, #224	; 0xe0
 8000892:	00d2      	lsls	r2, r2, #3
 8000894:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x80>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008ac:	2208      	movs	r2, #8
 80008ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f005 fe9e 	bl	8006618 <HAL_SPI_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e0:	f001 fed2 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200031b0 	.word	0x200031b0
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2368      	movs	r3, #104	; 0x68
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f009 ff01 	bl	800a710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	235c      	movs	r3, #92	; 0x5c
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	230c      	movs	r3, #12
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f009 fef9 	bl	800a710 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800091e:	2350      	movs	r3, #80	; 0x50
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f009 fef1 	bl	800a710 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	231c      	movs	r3, #28
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 fee9 	bl	800a710 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f009 fee2 	bl	800a710 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b64      	ldr	r3, [pc, #400]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <MX_TIM1_Init+0x1ec>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000952:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b61      	ldr	r3, [pc, #388]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800095e:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000960:	4a61      	ldr	r2, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1f0>)
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f007 fa41 	bl	8007e00 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f001 fe81 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2168      	movs	r1, #104	; 0x68
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f007 fcca 	bl	8008330 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a0:	f001 fe72 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f007 fa82 	bl	8007eb0 <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b0:	f001 fe6a 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	215c      	movs	r1, #92	; 0x5c
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f008 f97e 	bl	8008cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009d8:	f001 fe56 	bl	8002688 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009dc:	2150      	movs	r1, #80	; 0x50
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f008 fa7e 	bl	8008ef8 <HAL_TIMEx_ConfigBreakInput>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a00:	f001 fe42 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a04:	2134      	movs	r1, #52	; 0x34
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2260      	movs	r2, #96	; 0x60
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2296      	movs	r2, #150	; 0x96
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f007 fb83 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a42:	f001 fe21 	bl	8002688 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a46:	2134      	movs	r1, #52	; 0x34
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2232      	movs	r2, #50	; 0x32
 8000a4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a4e:	1879      	adds	r1, r7, r1
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f007 fb75 	bl	8008144 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a5e:	f001 fe13 	bl	8002688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	00d2      	lsls	r2, r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0152      	lsls	r2, r2, #5
 8000a84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0192      	lsls	r2, r2, #6
 8000a8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	220a      	movs	r2, #10
 8000a92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0492      	lsls	r2, r2, #18
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	01d2      	lsls	r2, r2, #7
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	003a      	movs	r2, r7
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f008 f972 	bl	8008dac <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000acc:	f001 fddc 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 f81e 	bl	8002b14 <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b01e      	add	sp, #120	; 0x78
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20003404 	.word	0x20003404
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	0000027f 	.word	0x0000027f

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08f      	sub	sp, #60	; 0x3c
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000af2:	2418      	movs	r4, #24
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2320      	movs	r3, #32
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f009 fe07 	bl	800a710 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	003b      	movs	r3, r7
 8000b04:	0018      	movs	r0, r3
 8000b06:	2318      	movs	r3, #24
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f009 fe00 	bl	800a710 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fcdf 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fcf2 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2202      	movs	r2, #2
 8000b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	003a      	movs	r2, r7
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f009 fa61 	bl	800a014 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2208      	movs	r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2201      	movs	r2, #1
 8000b74:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	003a      	movs	r2, r7
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f009 fa48 	bl	800a014 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	201c      	movs	r0, #28
 8000b88:	f7ff fb62 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	201c      	movs	r0, #28
 8000b8e:	f7ff fb45 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	22e1      	movs	r2, #225	; 0xe1
 8000b9c:	0212      	lsls	r2, r2, #8
 8000b9e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	220c      	movs	r2, #12
 8000bba:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f009 fcec 	bl	800a5ac <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbc5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbd2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbac 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fbde 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fb96 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbed 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d0f9      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbfb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d0f3      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00f      	add	sp, #60	; 0x3c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0309      	lsls	r1, r1, #12
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c3e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c44:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0052      	lsls	r2, r2, #1
 8000c74:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f008 f9d7 	bl	8009038 <HAL_USART_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c8e:	f001 fcfb 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c96:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	20003390 	.word	0x20003390
 8000ca8:	007b98a0 	.word	0x007b98a0

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2009      	movs	r0, #9
 8000cd0:	f002 fd28 	bl	8003724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd4:	2009      	movs	r0, #9
 8000cd6:	f002 fd3a 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f002 fd20 	bl	8003724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f002 fd32 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200b      	movs	r0, #11
 8000cf0:	f002 fd18 	bl	8003724 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f002 fd2a 	bl	800374e <HAL_NVIC_EnableIRQ>

}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	003b      	movs	r3, r7
 8000d10:	0018      	movs	r0, r3
 8000d12:	2318      	movs	r3, #24
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f009 fcfa 	bl	800a710 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fbf1 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f7ff fbee 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fbeb 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a8f      	ldr	r2, [pc, #572]	; (8000f70 <MX_GPIO_Init+0x268>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f7ff fbb6 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4a8c      	ldr	r2, [pc, #560]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d42:	0019      	movs	r1, r3
 8000d44:	0010      	movs	r0, r2
 8000d46:	f7ff fbaf 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4a89      	ldr	r2, [pc, #548]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f7ff fba8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fba2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fb9c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d70:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb97 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	011a      	lsls	r2, r3, #4
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fb9b 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fb93 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2203      	movs	r2, #3
 8000dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db4:	003b      	movs	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dba:	003b      	movs	r3, r7
 8000dbc:	4a6c      	ldr	r2, [pc, #432]	; (8000f70 <MX_GPIO_Init+0x268>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f009 f927 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	01d2      	lsls	r2, r2, #7
 8000dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000de6:	003b      	movs	r3, r7
 8000de8:	4a62      	ldr	r2, [pc, #392]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f009 f911 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	003b      	movs	r3, r7
 8000e14:	4a57      	ldr	r2, [pc, #348]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f009 f8fb 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e30:	003a      	movs	r2, r7
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f009 f8eb 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2202      	movs	r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e50:	003a      	movs	r2, r7
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f009 f8db 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2210      	movs	r2, #16
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f009 f8cb 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f009 f8b5 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f009 f89f 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0010      	movs	r0, r2
 8000efc:	f009 f88a 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2203      	movs	r2, #3
 8000f12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	003a      	movs	r2, r7
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f009 f873 	bl	800a014 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0152      	lsls	r2, r2, #5
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2203      	movs	r2, #3
 8000f40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	003a      	movs	r2, r7
 8000f50:	23a0      	movs	r3, #160	; 0xa0
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f009 f85c 	bl	800a014 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	031b      	lsls	r3, r3, #12
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff fa91 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b006      	add	sp, #24
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	50000400 	.word	0x50000400
 8000f74:	50000800 	.word	0x50000800

08000f78 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <USART2_RX_Callback+0x60>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fa74 	bl	800046c <LL_USART_ReceiveData9>
 8000f84:	0003      	movs	r3, r0
 8000f86:	001a      	movs	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <USART2_RX_Callback+0x60>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0ddb      	lsrs	r3, r3, #23
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000f9a:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <USART2_RX_Callback+0x68>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	2bff      	cmp	r3, #255	; 0xff
 8000fa8:	d90a      	bls.n	8000fc0 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <USART2_RX_Callback+0x6c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <USART2_RX_Callback+0x70>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <USART2_RX_Callback+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <USART2_RX_Callback+0x74>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d104      	bne.n	8000fd2 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 f87f 	bl	80010d0 <cmdReceive>
  }
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	200035da 	.word	0x200035da
 8000fe0:	20003160 	.word	0x20003160
 8000fe4:	200055e0 	.word	0x200055e0
 8000fe8:	20003162 	.word	0x20003162
 8000fec:	20003161 	.word	0x20003161

08000ff0 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0109      	lsls	r1, r1, #4
 8001006:	430a      	orrs	r2, r1
 8001008:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	490e      	ldr	r1, [pc, #56]	; (8001050 <HAL_SPI_RxHalfCpltCallback+0x60>)
 8001016:	400a      	ands	r2, r1
 8001018:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	23a0      	movs	r3, #160	; 0xa0
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	438a      	bics	r2, r1
 8001028:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 800102a:	23a0      	movs	r3, #160	; 0xa0
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	430a      	orrs	r2, r1
 8001038:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_SPI_RxHalfCpltCallback+0x64>)
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	4906      	ldr	r1, [pc, #24]	; (8001058 <HAL_SPI_RxHalfCpltCallback+0x68>)
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_SPI_RxHalfCpltCallback+0x6c>)
 8001042:	0018      	movs	r0, r3
 8001044:	f008 f906 	bl	8009254 <HAL_USART_Transmit_DMA>

}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	fffff7ff 	.word	0xfffff7ff
 8001054:	200035d8 	.word	0x200035d8
 8001058:	200035e0 	.word	0x200035e0
 800105c:	20003390 	.word	0x20003390

08001060 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_SPI_RxCpltCallback+0x20>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_SPI_RxCpltCallback+0x20>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0209      	lsls	r1, r1, #8
 8001072:	430a      	orrs	r2, r1
 8001074:	615a      	str	r2, [r3, #20]
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	50000800 	.word	0x50000800

08001084 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 800108c:	23a0      	movs	r3, #160	; 0xa0
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	438a      	bics	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	23a0      	movs	r3, #160	; 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_USART_TxCpltCallback+0x44>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_USART_TxCpltCallback+0x44>)
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	430a      	orrs	r2, r1
 80010b6:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_USART_TxCpltCallback+0x48>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	50000800 	.word	0x50000800
 80010cc:	2000345a 	.word	0x2000345a

080010d0 <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 80010dc:	230f      	movs	r3, #15
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <cmdReceive+0xc4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0fb      	beq.n	80010e6 <cmdReceive+0x16>
	  ByteReceived=0;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <cmdReceive+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <cmdReceive+0xc8>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b2d9      	uxtb	r1, r3
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <cmdReceive+0xcc>)
 8001102:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <cmdReceive+0xc8>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <cmdReceive+0xc8>)
 800110e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <cmdReceive+0xc8>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d033      	beq.n	8001180 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <cmdReceive+0xc8>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <cmdReceive+0xcc>)
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	3301      	adds	r3, #1
 8001124:	429a      	cmp	r2, r3
 8001126:	dd2b      	ble.n	8001180 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e00f      	b.n	8001152 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001132:	210f      	movs	r1, #15
 8001134:	187b      	adds	r3, r7, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4a18      	ldr	r2, [pc, #96]	; (800119c <cmdReceive+0xcc>)
 800113a:	5cd2      	ldrb	r2, [r2, r3]
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <cmdReceive+0xd0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <cmdReceive+0xd0>)
 8001146:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001148:	187b      	adds	r3, r7, r1
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	187b      	adds	r3, r7, r1
 800114e:	3201      	adds	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <cmdReceive+0xcc>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	210f      	movs	r1, #15
 800115a:	187b      	adds	r3, r7, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	dae7      	bge.n	8001132 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <cmdReceive+0xd0>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10a      	bne.n	8001180 <cmdReceive+0xb0>
 800116a:	187b      	adds	r3, r7, r1
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <cmdReceive+0xcc>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	3302      	adds	r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d103      	bne.n	8001180 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <cmdReceive+0xcc>)
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fa60 	bl	8001640 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <cmdReceive+0xd4>)
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <cmdReceive+0xd4>)
 8001186:	2108      	movs	r1, #8
 8001188:	430a      	orrs	r2, r1
 800118a:	621a      	str	r2, [r3, #32]
	}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20003160 	.word	0x20003160
 8001198:	20003162 	.word	0x20003162
 800119c:	200055e0 	.word	0x200055e0
 80011a0:	20003164 	.word	0x20003164
 80011a4:	40004400 	.word	0x40004400

080011a8 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
 80011b4:	1df9      	adds	r1, r7, #7
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <USART_AS_SPI_sendCMD+0x20>)
 80011b8:	230a      	movs	r3, #10
 80011ba:	2201      	movs	r2, #1
 80011bc:	f007 ff8c 	bl	80090d8 <HAL_USART_Transmit>
		}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20003390 	.word	0x20003390

080011cc <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
	}
	void weoInit(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <weoInit+0xd0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <weoInit+0xd0>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <weoInit+0xd0>)
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <weoInit+0xd0>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0309      	lsls	r1, r1, #12
 80011e6:	430a      	orrs	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <weoInit+0xd0>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <weoInit+0xd0>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f001 ff4e 	bl	8003098 <HAL_Delay>
		HAL_Delay(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f001 ff4b 	bl	8003098 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <weoInit+0xd4>)
 8001204:	2100      	movs	r1, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f006 feb2 	bl	8007f70 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f001 ff43 	bl	8003098 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	438a      	bics	r2, r1
 8001220:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	23a0      	movs	r3, #160	; 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	438a      	bics	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001232:	20af      	movs	r0, #175	; 0xaf
 8001234:	f7ff ffb8 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001238:	20a0      	movs	r0, #160	; 0xa0
 800123a:	f7ff ffb5 	bl	80011a8 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800123e:	2051      	movs	r0, #81	; 0x51
 8001240:	f7ff ffb2 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001244:	2081      	movs	r0, #129	; 0x81
 8001246:	f7ff ffaf 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800124a:	20ff      	movs	r0, #255	; 0xff
 800124c:	f7ff ffac 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001250:	20a1      	movs	r0, #161	; 0xa1
 8001252:	f7ff ffa9 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ffa6 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 800125c:	20a2      	movs	r0, #162	; 0xa2
 800125e:	f7ff ffa3 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ffa0 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001268:	20a8      	movs	r0, #168	; 0xa8
 800126a:	f7ff ff9d 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800126e:	207f      	movs	r0, #127	; 0x7f
 8001270:	f7ff ff9a 	bl	80011a8 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	430a      	orrs	r2, r1
 8001282:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	430a      	orrs	r2, r1
 8001292:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40004800 	.word	0x40004800
 80012a0:	20003404 	.word	0x20003404

080012a4 <weoClear>:
	void weoClear(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
		uint16_t i = 0;
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012b0:	23a0      	movs	r3, #160	; 0xa0
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	23a0      	movs	r3, #160	; 0xa0
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	438a      	bics	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	438a      	bics	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80012d0:	2075      	movs	r0, #117	; 0x75
 80012d2:	f7ff ff69 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ff66 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80012dc:	207f      	movs	r0, #127	; 0x7f
 80012de:	f7ff ff63 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80012e2:	2015      	movs	r0, #21
 80012e4:	f7ff ff60 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff5d 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80012ee:	207f      	movs	r0, #127	; 0x7f
 80012f0:	f7ff ff5a 	bl	80011a8 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012f4:	23a0      	movs	r3, #160	; 0xa0
 80012f6:	05db      	lsls	r3, r3, #23
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	23a0      	movs	r3, #160	; 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	438a      	bics	r2, r1
 8001302:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
					for (i = 0; i < 8192;i++) {	//fullScreen + small reserve
 8001314:	1dbb      	adds	r3, r7, #6
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	e00d      	b.n	8001338 <weoClear+0x94>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <weoClear+0xc8>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	4013      	ands	r3, r2
 8001326:	d0fa      	beq.n	800131e <weoClear+0x7a>
						USART3->TDR = 0x00;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <weoClear+0xc8>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i < 8192;i++) {	//fullScreen + small reserve
 800132e:	1dbb      	adds	r3, r7, #6
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	1dbb      	adds	r3, r7, #6
 8001334:	3201      	adds	r2, #1
 8001336:	801a      	strh	r2, [r3, #0]
 8001338:	1dbb      	adds	r3, r7, #6
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	019b      	lsls	r3, r3, #6
 8001340:	429a      	cmp	r2, r3
 8001342:	d3eb      	bcc.n	800131c <weoClear+0x78>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001344:	23a0      	movs	r3, #160	; 0xa0
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	438a      	bics	r2, r1
 8001352:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	23a0      	movs	r3, #160	; 0xa0
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	430a      	orrs	r2, r1
 8001362:	615a      	str	r2, [r3, #20]
	}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40004800 	.word	0x40004800

08001370 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	0005      	movs	r5, r0
 8001378:	000c      	movs	r4, r1
 800137a:	0010      	movs	r0, r2
 800137c:	0019      	movs	r1, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	1c2a      	adds	r2, r5, #0
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	1dbb      	adds	r3, r7, #6
 8001386:	1c22      	adds	r2, r4, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	1d7b      	adds	r3, r7, #5
 800138c:	1c02      	adds	r2, r0, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	1c0a      	adds	r2, r1, #0
 8001394:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001396:	240e      	movs	r4, #14
 8001398:	193b      	adds	r3, r7, r4
 800139a:	2200      	movs	r2, #0
 800139c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da00      	bge.n	80013aa <weoDrawRectangleFilled+0x3a>
 80013a8:	e0bc      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da00      	bge.n	80013b6 <weoDrawRectangleFilled+0x46>
 80013b4:	e0b6      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80013b6:	1d7b      	adds	r3, r7, #5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da00      	bge.n	80013c2 <weoDrawRectangleFilled+0x52>
 80013c0:	e0b0      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da00      	bge.n	80013ce <weoDrawRectangleFilled+0x5e>
 80013cc:	e0aa      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
				return;
			}


			start_x_New=start_x;
 80013ce:	250d      	movs	r5, #13
 80013d0:	197b      	adds	r3, r7, r5
 80013d2:	1dfa      	adds	r2, r7, #7
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80013d8:	260c      	movs	r6, #12
 80013da:	19bb      	adds	r3, r7, r6
 80013dc:	1d3a      	adds	r2, r7, #4
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	217f      	movs	r1, #127	; 0x7f
 80013e2:	1a8a      	subs	r2, r1, r2
 80013e4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80013e6:	230b      	movs	r3, #11
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	1d7a      	adds	r2, r7, #5
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80013f0:	220a      	movs	r2, #10
 80013f2:	18bb      	adds	r3, r7, r2
 80013f4:	1dba      	adds	r2, r7, #6
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	217f      	movs	r1, #127	; 0x7f
 80013fa:	1a8a      	subs	r2, r1, r2
 80013fc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	438a      	bics	r2, r1
 800140c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	23a0      	movs	r3, #160	; 0xa0
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	438a      	bics	r2, r1
 800141c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800141e:	2075      	movs	r0, #117	; 0x75
 8001420:	f7ff fec2 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001424:	197b      	adds	r3, r7, r5
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff febd 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800142e:	230b      	movs	r3, #11
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff feb7 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800143a:	2015      	movs	r0, #21
 800143c:	f7ff feb4 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001440:	19bb      	adds	r3, r7, r6
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fead 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800144e:	220a      	movs	r2, #10
 8001450:	18bb      	adds	r3, r7, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fea5 	bl	80011a8 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	430a      	orrs	r2, r1
 800146c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800146e:	23a0      	movs	r3, #160	; 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	430a      	orrs	r2, r1
 800147c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	438a      	bics	r2, r1
 800148c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	430a      	orrs	r2, r1
 800149c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	e012      	b.n	80014cc <weoDrawRectangleFilled+0x15c>
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <weoDrawRectangleFilled+0x1bc>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	4013      	ands	r3, r2
 80014b0:	d0fa      	beq.n	80014a8 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80014b2:	210e      	movs	r1, #14
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <weoDrawRectangleFilled+0x1bc>)
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	3201      	adds	r2, #1
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	230e      	movs	r3, #14
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	230b      	movs	r3, #11
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	7819      	ldrb	r1, [r3, #0]
 80014d8:	230d      	movs	r3, #13
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	1acb      	subs	r3, r1, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	210a      	movs	r1, #10
 80014e4:	1879      	adds	r1, r7, r1
 80014e6:	7809      	ldrb	r1, [r1, #0]
 80014e8:	0849      	lsrs	r1, r1, #1
 80014ea:	b2c9      	uxtb	r1, r1
 80014ec:	0008      	movs	r0, r1
 80014ee:	210c      	movs	r1, #12
 80014f0:	1879      	adds	r1, r7, r1
 80014f2:	7809      	ldrb	r1, [r1, #0]
 80014f4:	0849      	lsrs	r1, r1, #1
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	1a41      	subs	r1, r0, r1
 80014fa:	3101      	adds	r1, #1
 80014fc:	434b      	muls	r3, r1
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbd1      	blt.n	80014a6 <weoDrawRectangleFilled+0x136>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001502:	23a0      	movs	r3, #160	; 0xa0
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	23a0      	movs	r3, #160	; 0xa0
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	438a      	bics	r2, r1
 8001510:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001512:	23a0      	movs	r3, #160	; 0xa0
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	23a0      	movs	r3, #160	; 0xa0
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	430a      	orrs	r2, r1
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	e000      	b.n	8001526 <weoDrawRectangleFilled+0x1b6>
				return;
 8001524:	46c0      	nop			; (mov r8, r8)
		}
 8001526:	46bd      	mov	sp, r7
 8001528:	b005      	add	sp, #20
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152c:	40004800 	.word	0x40004800

08001530 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	0005      	movs	r5, r0
 8001538:	000c      	movs	r4, r1
 800153a:	0010      	movs	r0, r2
 800153c:	0019      	movs	r1, r3
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	1c2a      	adds	r2, r5, #0
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	1c22      	adds	r2, r4, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	1d7b      	adds	r3, r7, #5
 800154c:	1c02      	adds	r2, r0, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	1c0a      	adds	r2, r1, #0
 8001554:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001556:	230e      	movs	r3, #14
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	2200      	movs	r2, #0
 800155c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b25b      	sxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	db66      	blt.n	8001636 <weoDrawRectangleInit+0x106>
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	db61      	blt.n	8001636 <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001572:	1d7b      	adds	r3, r7, #5
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	db5c      	blt.n	8001636 <weoDrawRectangleInit+0x106>
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	db57      	blt.n	8001636 <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 8001586:	240d      	movs	r4, #13
 8001588:	193b      	adds	r3, r7, r4
 800158a:	1dfa      	adds	r2, r7, #7
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001590:	250c      	movs	r5, #12
 8001592:	197b      	adds	r3, r7, r5
 8001594:	1d3a      	adds	r2, r7, #4
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	217f      	movs	r1, #127	; 0x7f
 800159a:	1a8a      	subs	r2, r1, r2
 800159c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800159e:	260b      	movs	r6, #11
 80015a0:	19bb      	adds	r3, r7, r6
 80015a2:	1d7a      	adds	r2, r7, #5
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80015a8:	230a      	movs	r3, #10
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	1dba      	adds	r2, r7, #6
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	217f      	movs	r1, #127	; 0x7f
 80015b2:	1a8a      	subs	r2, r1, r2
 80015b4:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015b6:	23a0      	movs	r3, #160	; 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	23a0      	movs	r3, #160	; 0xa0
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	438a      	bics	r2, r1
 80015c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	23a0      	movs	r3, #160	; 0xa0
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	438a      	bics	r2, r1
 80015d4:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015d6:	2075      	movs	r0, #117	; 0x75
 80015d8:	f7ff fde6 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fde1 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80015e6:	19bb      	adds	r3, r7, r6
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff fddc 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015f0:	2015      	movs	r0, #21
 80015f2:	f7ff fdd9 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80015f6:	197b      	adds	r3, r7, r5
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fdd2 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001604:	230a      	movs	r3, #10
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fdca 	bl	80011a8 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001614:	23a0      	movs	r3, #160	; 0xa0
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	23a0      	movs	r3, #160	; 0xa0
 800161c:	05db      	lsls	r3, r3, #23
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	430a      	orrs	r2, r1
 8001622:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	23a0      	movs	r3, #160	; 0xa0
 800162c:	05db      	lsls	r3, r3, #23
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	430a      	orrs	r2, r1
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	e000      	b.n	8001638 <weoDrawRectangleInit+0x108>
				return;
 8001636:	46c0      	nop			; (mov r8, r8)
		}
 8001638:	46bd      	mov	sp, r7
 800163a:	b005      	add	sp, #20
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001640 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001648:	210f      	movs	r1, #15
 800164a:	187b      	adds	r3, r7, r1
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001650:	230d      	movs	r3, #13
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8001658:	230a      	movs	r3, #10
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 8001660:	4bc7      	ldr	r3, [pc, #796]	; (8001980 <answer2CPU+0x340>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		ans[0] = cmd[0]|0x80;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	4252      	negs	r2, r2
 800166e:	4313      	orrs	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	b29a      	uxth	r2, r3
 8001674:	4bc3      	ldr	r3, [pc, #780]	; (8001984 <answer2CPU+0x344>)
 8001676:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d800      	bhi.n	8001682 <answer2CPU+0x42>
 8001680:	e14f      	b.n	8001922 <answer2CPU+0x2e2>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b15      	cmp	r3, #21
 8001688:	d900      	bls.n	800168c <answer2CPU+0x4c>
 800168a:	e14a      	b.n	8001922 <answer2CPU+0x2e2>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	05db      	lsls	r3, r3, #23
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d105      	bne.n	80016a4 <answer2CPU+0x64>
					keyboard &= 0b11111110;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	187a      	adds	r2, r7, r1
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	438a      	bics	r2, r1
 80016a2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80016a4:	23a0      	movs	r3, #160	; 0xa0
 80016a6:	05db      	lsls	r3, r3, #23
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d106      	bne.n	80016be <answer2CPU+0x7e>
					keyboard &= 0b11111101;
 80016b0:	220f      	movs	r2, #15
 80016b2:	18bb      	adds	r3, r7, r2
 80016b4:	18ba      	adds	r2, r7, r2
 80016b6:	7812      	ldrb	r2, [r2, #0]
 80016b8:	2102      	movs	r1, #2
 80016ba:	438a      	bics	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	05db      	lsls	r3, r3, #23
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	2210      	movs	r2, #16
 80016c6:	4013      	ands	r3, r2
 80016c8:	d106      	bne.n	80016d8 <answer2CPU+0x98>
					keyboard &= 0b11111011;
 80016ca:	220f      	movs	r2, #15
 80016cc:	18bb      	adds	r3, r7, r2
 80016ce:	18ba      	adds	r2, r7, r2
 80016d0:	7812      	ldrb	r2, [r2, #0]
 80016d2:	2104      	movs	r1, #4
 80016d4:	438a      	bics	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80016d8:	23a0      	movs	r3, #160	; 0xa0
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	019b      	lsls	r3, r3, #6
 80016e2:	4013      	ands	r3, r2
 80016e4:	d106      	bne.n	80016f4 <answer2CPU+0xb4>
					keyboard &= 0b11110111;
 80016e6:	220f      	movs	r2, #15
 80016e8:	18bb      	adds	r3, r7, r2
 80016ea:	18ba      	adds	r2, r7, r2
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	2108      	movs	r1, #8
 80016f0:	438a      	bics	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 80016f4:	23a0      	movs	r3, #160	; 0xa0
 80016f6:	05db      	lsls	r3, r3, #23
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	01db      	lsls	r3, r3, #7
 80016fe:	4013      	ands	r3, r2
 8001700:	d106      	bne.n	8001710 <answer2CPU+0xd0>
					keyboard &= 0b11101111;
 8001702:	220f      	movs	r2, #15
 8001704:	18bb      	adds	r3, r7, r2
 8001706:	18ba      	adds	r2, r7, r2
 8001708:	7812      	ldrb	r2, [r2, #0]
 800170a:	2110      	movs	r1, #16
 800170c:	438a      	bics	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001710:	210f      	movs	r1, #15
 8001712:	187b      	adds	r3, r7, r1
 8001714:	187a      	adds	r2, r7, r1
 8001716:	7812      	ldrb	r2, [r2, #0]
 8001718:	43d2      	mvns	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 800171c:	2009      	movs	r0, #9
 800171e:	183b      	adds	r3, r7, r0
 8001720:	2204      	movs	r2, #4
 8001722:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001724:	183b      	adds	r3, r7, r0
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b29b      	uxth	r3, r3
 800172a:	3b02      	subs	r3, #2
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b95      	ldr	r3, [pc, #596]	; (8001984 <answer2CPU+0x344>)
 8001730:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001732:	187b      	adds	r3, r7, r1
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b92      	ldr	r3, [pc, #584]	; (8001984 <answer2CPU+0x344>)
 800173a:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 800173c:	230e      	movs	r3, #14
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	e011      	b.n	800176a <answer2CPU+0x12a>
					myCS = myCS + ans[i];
 8001746:	200e      	movs	r0, #14
 8001748:	183b      	adds	r3, r7, r0
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	4b8d      	ldr	r3, [pc, #564]	; (8001984 <answer2CPU+0x344>)
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	5ad3      	ldrh	r3, [r2, r3]
 8001752:	b2d9      	uxtb	r1, r3
 8001754:	220d      	movs	r2, #13
 8001756:	18bb      	adds	r3, r7, r2
 8001758:	18ba      	adds	r2, r7, r2
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	188a      	adds	r2, r1, r2
 800175e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001760:	183b      	adds	r3, r7, r0
 8001762:	781a      	ldrb	r2, [r3, #0]
 8001764:	183b      	adds	r3, r7, r0
 8001766:	3201      	adds	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	200e      	movs	r0, #14
 800176c:	183b      	adds	r3, r7, r0
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	2309      	movs	r3, #9
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3b01      	subs	r3, #1
 8001778:	429a      	cmp	r2, r3
 800177a:	dbe4      	blt.n	8001746 <answer2CPU+0x106>
				}
				myCS = 0 - myCS;
 800177c:	210d      	movs	r1, #13
 800177e:	187b      	adds	r3, r7, r1
 8001780:	187a      	adds	r2, r7, r1
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	4252      	negs	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b29a      	uxth	r2, r3
 800178e:	4b7d      	ldr	r3, [pc, #500]	; (8001984 <answer2CPU+0x344>)
 8001790:	80da      	strh	r2, [r3, #6]
				i=0;
 8001792:	183b      	adds	r3, r7, r0
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <answer2CPU+0x348>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	4013      	ands	r3, r2
 80017a2:	d0fa      	beq.n	800179a <answer2CPU+0x15a>
				USART2->TDR = ans[0]|0x0100;
 80017a4:	4b77      	ldr	r3, [pc, #476]	; (8001984 <answer2CPU+0x344>)
 80017a6:	881b      	ldrh	r3, [r3, #0]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0052      	lsls	r2, r2, #1
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	4b75      	ldr	r3, [pc, #468]	; (8001988 <answer2CPU+0x348>)
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80017b4:	230e      	movs	r3, #14
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e013      	b.n	80017e6 <answer2CPU+0x1a6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	4b71      	ldr	r3, [pc, #452]	; (8001988 <answer2CPU+0x348>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0fa      	beq.n	80017c0 <answer2CPU+0x180>
				    USART2->TDR = (uint8_t)ans[i];
 80017ca:	210e      	movs	r1, #14
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <answer2CPU+0x344>)
 80017d2:	0052      	lsls	r2, r2, #1
 80017d4:	5ad3      	ldrh	r3, [r2, r3]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <answer2CPU+0x348>)
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	3201      	adds	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	230e      	movs	r3, #14
 80017e8:	18fa      	adds	r2, r7, r3
 80017ea:	2309      	movs	r3, #9
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	7812      	ldrb	r2, [r2, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d3e3      	bcc.n	80017be <answer2CPU+0x17e>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b11      	cmp	r3, #17
 80017fc:	d109      	bne.n	8001812 <answer2CPU+0x1d2>
					picNum = cmd[2];
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	789a      	ldrb	r2, [r3, #2]
 8001802:	4b62      	ldr	r3, [pc, #392]	; (800198c <answer2CPU+0x34c>)
 8001804:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <answer2CPU+0x340>)
 8001808:	2211      	movs	r2, #17
 800180a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800180c:	4b60      	ldr	r3, [pc, #384]	; (8001990 <answer2CPU+0x350>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b12      	cmp	r3, #18
 8001818:	d115      	bne.n	8001846 <answer2CPU+0x206>
					imX = cmd[2];
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3302      	adds	r3, #2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	001a      	movs	r2, r3
 8001822:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <answer2CPU+0x354>)
 8001824:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3303      	adds	r3, #3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <answer2CPU+0x358>)
 8001830:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	791a      	ldrb	r2, [r3, #4]
 8001836:	4b55      	ldr	r3, [pc, #340]	; (800198c <answer2CPU+0x34c>)
 8001838:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 800183a:	4b51      	ldr	r3, [pc, #324]	; (8001980 <answer2CPU+0x340>)
 800183c:	2212      	movs	r2, #18
 800183e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <answer2CPU+0x350>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b13      	cmp	r3, #19
 800184c:	d134      	bne.n	80018b8 <answer2CPU+0x278>
					imX = cmd[2];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3302      	adds	r3, #2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	001a      	movs	r2, r3
 8001856:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <answer2CPU+0x354>)
 8001858:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3303      	adds	r3, #3
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	001a      	movs	r2, r3
 8001862:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <answer2CPU+0x358>)
 8001864:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3301      	adds	r3, #1
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	3b03      	subs	r3, #3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b4a      	ldr	r3, [pc, #296]	; (800199c <answer2CPU+0x35c>)
 8001872:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001874:	230e      	movs	r3, #14
 8001876:	18fb      	adds	r3, r7, r3
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e00f      	b.n	800189e <answer2CPU+0x25e>
					dataASCII[i] = cmd[i+4];
 800187e:	200e      	movs	r0, #14
 8001880:	183b      	adds	r3, r7, r0
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	3304      	adds	r3, #4
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	18d2      	adds	r2, r2, r3
 800188a:	183b      	adds	r3, r7, r0
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	7811      	ldrb	r1, [r2, #0]
 8001890:	4a43      	ldr	r2, [pc, #268]	; (80019a0 <answer2CPU+0x360>)
 8001892:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001894:	183b      	adds	r3, r7, r0
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	183b      	adds	r3, r7, r0
 800189a:	3201      	adds	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	4b3f      	ldr	r3, [pc, #252]	; (800199c <answer2CPU+0x35c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	220e      	movs	r2, #14
 80018a4:	18ba      	adds	r2, r7, r2
 80018a6:	7812      	ldrb	r2, [r2, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3e8      	bcc.n	800187e <answer2CPU+0x23e>
				}
					cmd2Execute=0x13;
 80018ac:	4b34      	ldr	r3, [pc, #208]	; (8001980 <answer2CPU+0x340>)
 80018ae:	2213      	movs	r2, #19
 80018b0:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <answer2CPU+0x350>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b14      	cmp	r3, #20
 80018be:	d10c      	bne.n	80018da <answer2CPU+0x29a>
					numSound = cmd[3];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	78da      	ldrb	r2, [r3, #3]
 80018c4:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <answer2CPU+0x364>)
 80018c6:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <answer2CPU+0x340>)
 80018ca:	2214      	movs	r2, #20
 80018cc:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	22ff      	movs	r2, #255	; 0xff
 80018d2:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80018d4:	4b2e      	ldr	r3, [pc, #184]	; (8001990 <answer2CPU+0x350>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b15      	cmp	r3, #21
 80018e0:	d10d      	bne.n	80018fe <answer2CPU+0x2be>
					volume = cmd[2];
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	789a      	ldrb	r2, [r3, #2]
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <answer2CPU+0x368>)
 80018e8:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	78da      	ldrb	r2, [r3, #3]
 80018ee:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <answer2CPU+0x36c>)
 80018f0:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <answer2CPU+0x340>)
 80018f4:	2215      	movs	r2, #21
 80018f6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <answer2CPU+0x350>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b16      	cmp	r3, #22
 8001904:	d10d      	bne.n	8001922 <answer2CPU+0x2e2>
					volume = cmd[3];
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	78da      	ldrb	r2, [r3, #3]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <answer2CPU+0x368>)
 800190c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	791a      	ldrb	r2, [r3, #4]
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <answer2CPU+0x36c>)
 8001914:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <answer2CPU+0x340>)
 8001918:	2216      	movs	r2, #22
 800191a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <answer2CPU+0x350>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d000      	beq.n	800192c <answer2CPU+0x2ec>
 800192a:	e099      	b.n	8001a60 <answer2CPU+0x420>
				myLength = 0x14; //20 bytes length answer
 800192c:	2109      	movs	r1, #9
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2214      	movs	r2, #20
 8001932:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001934:	187b      	adds	r3, r7, r1
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b02      	subs	r3, #2
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <answer2CPU+0x344>)
 8001940:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001942:	230e      	movs	r3, #14
 8001944:	18fb      	adds	r3, r7, r3
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e010      	b.n	800196e <answer2CPU+0x32e>
					ans[i + 2] = PCB_type[i];
 800194c:	200e      	movs	r0, #14
 800194e:	183b      	adds	r3, r7, r0
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <answer2CPU+0x370>)
 8001954:	5cd1      	ldrb	r1, [r2, r3]
 8001956:	183b      	adds	r3, r7, r0
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	1c9a      	adds	r2, r3, #2
 800195c:	b289      	uxth	r1, r1
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <answer2CPU+0x344>)
 8001960:	0052      	lsls	r2, r2, #1
 8001962:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001964:	183b      	adds	r3, r7, r0
 8001966:	781a      	ldrb	r2, [r3, #0]
 8001968:	183b      	adds	r3, r7, r0
 800196a:	3201      	adds	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	220e      	movs	r2, #14
 8001970:	18bb      	adds	r3, r7, r2
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b10      	cmp	r3, #16
 8001976:	d9e9      	bls.n	800194c <answer2CPU+0x30c>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001978:	18bb      	adds	r3, r7, r2
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e02b      	b.n	80019d8 <answer2CPU+0x398>
 8001980:	2000345a 	.word	0x2000345a
 8001984:	2000349c 	.word	0x2000349c
 8001988:	40004400 	.word	0x40004400
 800198c:	20003459 	.word	0x20003459
 8001990:	200034b0 	.word	0x200034b0
 8001994:	200032f0 	.word	0x200032f0
 8001998:	20003384 	.word	0x20003384
 800199c:	20003499 	.word	0x20003499
 80019a0:	200031a0 	.word	0x200031a0
 80019a4:	20003519 	.word	0x20003519
 80019a8:	200032ed 	.word	0x200032ed
 80019ac:	200033f0 	.word	0x200033f0
 80019b0:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 80019b4:	200e      	movs	r0, #14
 80019b6:	183b      	adds	r3, r7, r0
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	4bdb      	ldr	r3, [pc, #876]	; (8001d28 <answer2CPU+0x6e8>)
 80019bc:	0052      	lsls	r2, r2, #1
 80019be:	5ad3      	ldrh	r3, [r2, r3]
 80019c0:	b2d9      	uxtb	r1, r3
 80019c2:	220d      	movs	r2, #13
 80019c4:	18bb      	adds	r3, r7, r2
 80019c6:	18ba      	adds	r2, r7, r2
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	188a      	adds	r2, r1, r2
 80019cc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	183b      	adds	r3, r7, r0
 80019d4:	3201      	adds	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	230e      	movs	r3, #14
 80019da:	18fb      	adds	r3, r7, r3
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	2009      	movs	r0, #9
 80019e0:	183b      	adds	r3, r7, r0
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	429a      	cmp	r2, r3
 80019e8:	dbe4      	blt.n	80019b4 <answer2CPU+0x374>
				}
				myCS = 0 - myCS;
 80019ea:	210d      	movs	r1, #13
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	187a      	adds	r2, r7, r1
 80019f0:	7812      	ldrb	r2, [r2, #0]
 80019f2:	4252      	negs	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 80019f6:	183b      	adds	r3, r7, r0
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b299      	uxth	r1, r3
 8001a02:	4bc9      	ldr	r3, [pc, #804]	; (8001d28 <answer2CPU+0x6e8>)
 8001a04:	0052      	lsls	r2, r2, #1
 8001a06:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a08:	46c0      	nop			; (mov r8, r8)
 8001a0a:	4bc8      	ldr	r3, [pc, #800]	; (8001d2c <answer2CPU+0x6ec>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	4013      	ands	r3, r2
 8001a12:	d0fa      	beq.n	8001a0a <answer2CPU+0x3ca>
				USART2->TDR = ans[0]|0x0100;
 8001a14:	4bc4      	ldr	r3, [pc, #784]	; (8001d28 <answer2CPU+0x6e8>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	0052      	lsls	r2, r2, #1
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4bc2      	ldr	r3, [pc, #776]	; (8001d2c <answer2CPU+0x6ec>)
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a24:	e014      	b.n	8001a50 <answer2CPU+0x410>
				  {
				    i++;
 8001a26:	210e      	movs	r1, #14
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	3201      	adds	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	4bbd      	ldr	r3, [pc, #756]	; (8001d2c <answer2CPU+0x6ec>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2280      	movs	r2, #128	; 0x80
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d0fa      	beq.n	8001a34 <answer2CPU+0x3f4>
				    USART2->TDR = (uint8_t)ans[i];
 8001a3e:	230e      	movs	r3, #14
 8001a40:	18fb      	adds	r3, r7, r3
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	4bb8      	ldr	r3, [pc, #736]	; (8001d28 <answer2CPU+0x6e8>)
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	5ad3      	ldrh	r3, [r2, r3]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4bb7      	ldr	r3, [pc, #732]	; (8001d2c <answer2CPU+0x6ec>)
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a50:	230e      	movs	r3, #14
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4bb4      	ldr	r3, [pc, #720]	; (8001d28 <answer2CPU+0x6e8>)
 8001a58:	0052      	lsls	r2, r2, #1
 8001a5a:	5ad3      	ldrh	r3, [r2, r3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1e2      	bne.n	8001a26 <answer2CPU+0x3e6>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d000      	beq.n	8001a6a <answer2CPU+0x42a>
 8001a68:	e07f      	b.n	8001b6a <answer2CPU+0x52a>
				myLength = 0x0B; //19 bytes length answer
 8001a6a:	2109      	movs	r1, #9
 8001a6c:	187b      	adds	r3, r7, r1
 8001a6e:	220b      	movs	r2, #11
 8001a70:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a72:	187b      	adds	r3, r7, r1
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	3b02      	subs	r3, #2
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4baa      	ldr	r3, [pc, #680]	; (8001d28 <answer2CPU+0x6e8>)
 8001a7e:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001a80:	230e      	movs	r3, #14
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e010      	b.n	8001aac <answer2CPU+0x46c>
					ans[i + 2] = PCB_rev[i];
 8001a8a:	200e      	movs	r0, #14
 8001a8c:	183b      	adds	r3, r7, r0
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4aa7      	ldr	r2, [pc, #668]	; (8001d30 <answer2CPU+0x6f0>)
 8001a92:	5cd1      	ldrb	r1, [r2, r3]
 8001a94:	183b      	adds	r3, r7, r0
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	1c9a      	adds	r2, r3, #2
 8001a9a:	b289      	uxth	r1, r1
 8001a9c:	4ba2      	ldr	r3, [pc, #648]	; (8001d28 <answer2CPU+0x6e8>)
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001aa2:	183b      	adds	r3, r7, r0
 8001aa4:	781a      	ldrb	r2, [r3, #0]
 8001aa6:	183b      	adds	r3, r7, r0
 8001aa8:	3201      	adds	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	220e      	movs	r2, #14
 8001aae:	18bb      	adds	r3, r7, r2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d9e9      	bls.n	8001a8a <answer2CPU+0x44a>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001ab6:	18bb      	adds	r3, r7, r2
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e011      	b.n	8001ae2 <answer2CPU+0x4a2>
					myCS = myCS + ans[i];
 8001abe:	200e      	movs	r0, #14
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b98      	ldr	r3, [pc, #608]	; (8001d28 <answer2CPU+0x6e8>)
 8001ac6:	0052      	lsls	r2, r2, #1
 8001ac8:	5ad3      	ldrh	r3, [r2, r3]
 8001aca:	b2d9      	uxtb	r1, r3
 8001acc:	220d      	movs	r2, #13
 8001ace:	18bb      	adds	r3, r7, r2
 8001ad0:	18ba      	adds	r2, r7, r2
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	188a      	adds	r2, r1, r2
 8001ad6:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001ad8:	183b      	adds	r3, r7, r0
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	183b      	adds	r3, r7, r0
 8001ade:	3201      	adds	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	230e      	movs	r3, #14
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	781a      	ldrb	r2, [r3, #0]
 8001ae8:	2009      	movs	r0, #9
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	429a      	cmp	r2, r3
 8001af2:	dbe4      	blt.n	8001abe <answer2CPU+0x47e>
				}
				myCS = 0 - myCS;
 8001af4:	210d      	movs	r1, #13
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	187a      	adds	r2, r7, r1
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	4252      	negs	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	4b86      	ldr	r3, [pc, #536]	; (8001d28 <answer2CPU+0x6e8>)
 8001b0e:	0052      	lsls	r2, r2, #1
 8001b10:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <answer2CPU+0x6ec>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0fa      	beq.n	8001b14 <answer2CPU+0x4d4>
				USART2->TDR = ans[0]|0x0100;
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <answer2CPU+0x6e8>)
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	0052      	lsls	r2, r2, #1
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <answer2CPU+0x6ec>)
 8001b2c:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b2e:	e014      	b.n	8001b5a <answer2CPU+0x51a>
					  {
					    i++;
 8001b30:	210e      	movs	r1, #14
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	3201      	adds	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <answer2CPU+0x6ec>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	4013      	ands	r3, r2
 8001b46:	d0fa      	beq.n	8001b3e <answer2CPU+0x4fe>
					    USART2->TDR = (uint8_t)ans[i];
 8001b48:	230e      	movs	r3, #14
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <answer2CPU+0x6e8>)
 8001b50:	0052      	lsls	r2, r2, #1
 8001b52:	5ad3      	ldrh	r3, [r2, r3]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b75      	ldr	r3, [pc, #468]	; (8001d2c <answer2CPU+0x6ec>)
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b5a:	230e      	movs	r3, #14
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	4b71      	ldr	r3, [pc, #452]	; (8001d28 <answer2CPU+0x6e8>)
 8001b62:	0052      	lsls	r2, r2, #1
 8001b64:	5ad3      	ldrh	r3, [r2, r3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e2      	bne.n	8001b30 <answer2CPU+0x4f0>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d000      	beq.n	8001b74 <answer2CPU+0x534>
 8001b72:	e07f      	b.n	8001c74 <answer2CPU+0x634>
				myLength = 0x13; //19 bytes length answer
 8001b74:	2109      	movs	r1, #9
 8001b76:	187b      	adds	r3, r7, r1
 8001b78:	2213      	movs	r2, #19
 8001b7a:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b02      	subs	r3, #2
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b68      	ldr	r3, [pc, #416]	; (8001d28 <answer2CPU+0x6e8>)
 8001b88:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b8a:	230e      	movs	r3, #14
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e010      	b.n	8001bb6 <answer2CPU+0x576>
					ans[i + 2] = EmitterSN[i];
 8001b94:	200e      	movs	r0, #14
 8001b96:	183b      	adds	r3, r7, r0
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <answer2CPU+0x6f4>)
 8001b9c:	5cd1      	ldrb	r1, [r2, r3]
 8001b9e:	183b      	adds	r3, r7, r0
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	1c9a      	adds	r2, r3, #2
 8001ba4:	b289      	uxth	r1, r1
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <answer2CPU+0x6e8>)
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001bac:	183b      	adds	r3, r7, r0
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	183b      	adds	r3, r7, r0
 8001bb2:	3201      	adds	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	220e      	movs	r2, #14
 8001bb8:	18bb      	adds	r3, r7, r2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d9e9      	bls.n	8001b94 <answer2CPU+0x554>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001bc0:	18bb      	adds	r3, r7, r2
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e011      	b.n	8001bec <answer2CPU+0x5ac>
					myCS = myCS + ans[i];
 8001bc8:	200e      	movs	r0, #14
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <answer2CPU+0x6e8>)
 8001bd0:	0052      	lsls	r2, r2, #1
 8001bd2:	5ad3      	ldrh	r3, [r2, r3]
 8001bd4:	b2d9      	uxtb	r1, r3
 8001bd6:	220d      	movs	r2, #13
 8001bd8:	18bb      	adds	r3, r7, r2
 8001bda:	18ba      	adds	r2, r7, r2
 8001bdc:	7812      	ldrb	r2, [r2, #0]
 8001bde:	188a      	adds	r2, r1, r2
 8001be0:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001be2:	183b      	adds	r3, r7, r0
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	183b      	adds	r3, r7, r0
 8001be8:	3201      	adds	r2, #1
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	230e      	movs	r3, #14
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	2009      	movs	r0, #9
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbe4      	blt.n	8001bc8 <answer2CPU+0x588>
				}
				myCS = 0 - myCS;
 8001bfe:	210d      	movs	r1, #13
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	187a      	adds	r2, r7, r1
 8001c04:	7812      	ldrb	r2, [r2, #0]
 8001c06:	4252      	negs	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	1e5a      	subs	r2, r3, #1
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b299      	uxth	r1, r3
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <answer2CPU+0x6e8>)
 8001c18:	0052      	lsls	r2, r2, #1
 8001c1a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <answer2CPU+0x6ec>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	4013      	ands	r3, r2
 8001c26:	d0fa      	beq.n	8001c1e <answer2CPU+0x5de>
				USART2->TDR = ans[0]|0x0100;
 8001c28:	4b3f      	ldr	r3, [pc, #252]	; (8001d28 <answer2CPU+0x6e8>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	0052      	lsls	r2, r2, #1
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <answer2CPU+0x6ec>)
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c38:	e014      	b.n	8001c64 <answer2CPU+0x624>
				  {
				    i++;
 8001c3a:	210e      	movs	r1, #14
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	3201      	adds	r2, #1
 8001c44:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <answer2CPU+0x6ec>)
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d0fa      	beq.n	8001c48 <answer2CPU+0x608>
				    	USART2->TDR = (uint8_t)ans[i];
 8001c52:	230e      	movs	r3, #14
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	4b33      	ldr	r3, [pc, #204]	; (8001d28 <answer2CPU+0x6e8>)
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	5ad3      	ldrh	r3, [r2, r3]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <answer2CPU+0x6ec>)
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c64:	230e      	movs	r3, #14
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <answer2CPU+0x6e8>)
 8001c6c:	0052      	lsls	r2, r2, #1
 8001c6e:	5ad3      	ldrh	r3, [r2, r3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e2      	bne.n	8001c3a <answer2CPU+0x5fa>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b03      	cmp	r3, #3
 8001c7a:	d000      	beq.n	8001c7e <answer2CPU+0x63e>
 8001c7c:	e07b      	b.n	8001d76 <answer2CPU+0x736>
				myLength = 0x04; //4 bytes length answer
 8001c7e:	2109      	movs	r1, #9
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2204      	movs	r2, #4
 8001c84:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b02      	subs	r3, #2
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	4b25      	ldr	r3, [pc, #148]	; (8001d28 <answer2CPU+0x6e8>)
 8001c92:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <answer2CPU+0x6f8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <answer2CPU+0x6e8>)
 8001c9c:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c9e:	230d      	movs	r3, #13
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <answer2CPU+0x6e8>)
 8001ca8:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001caa:	230e      	movs	r3, #14
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
 8001cb2:	e011      	b.n	8001cd8 <answer2CPU+0x698>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001cb4:	200e      	movs	r0, #14
 8001cb6:	183b      	adds	r3, r7, r0
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <answer2CPU+0x6e8>)
 8001cbc:	0052      	lsls	r2, r2, #1
 8001cbe:	5ad3      	ldrh	r3, [r2, r3]
 8001cc0:	b2d9      	uxtb	r1, r3
 8001cc2:	220d      	movs	r2, #13
 8001cc4:	18bb      	adds	r3, r7, r2
 8001cc6:	18ba      	adds	r2, r7, r2
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	188a      	adds	r2, r1, r2
 8001ccc:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	3201      	adds	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	230e      	movs	r3, #14
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	2009      	movs	r0, #9
 8001ce0:	183b      	adds	r3, r7, r0
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbe4      	blt.n	8001cb4 <answer2CPU+0x674>
				}
				myCS = 0 - myCS;
 8001cea:	210d      	movs	r1, #13
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	187a      	adds	r2, r7, r1
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	4252      	negs	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001cf6:	183b      	adds	r3, r7, r0
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	1e5a      	subs	r2, r3, #1
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b299      	uxth	r1, r3
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <answer2CPU+0x6e8>)
 8001d04:	0052      	lsls	r2, r2, #1
 8001d06:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d08:	46c0      	nop			; (mov r8, r8)
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <answer2CPU+0x6ec>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	2280      	movs	r2, #128	; 0x80
 8001d10:	4013      	ands	r3, r2
 8001d12:	d0fa      	beq.n	8001d0a <answer2CPU+0x6ca>
					USART2->TDR = ans[0]|0x0100;
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <answer2CPU+0x6e8>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	0052      	lsls	r2, r2, #1
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <answer2CPU+0x6ec>)
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d24:	e01f      	b.n	8001d66 <answer2CPU+0x726>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	2000349c 	.word	0x2000349c
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	20003114 	.word	0x20003114
 8001d34:	20003120 	.word	0x20003120
 8001d38:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001d3c:	210e      	movs	r1, #14
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	3201      	adds	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d48:	46c0      	nop			; (mov r8, r8)
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <answer2CPU+0x844>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	4013      	ands	r3, r2
 8001d52:	d0fa      	beq.n	8001d4a <answer2CPU+0x70a>
						     USART2->TDR = (uint8_t)ans[i];
 8001d54:	230e      	movs	r3, #14
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <answer2CPU+0x848>)
 8001d5c:	0052      	lsls	r2, r2, #1
 8001d5e:	5ad3      	ldrh	r3, [r2, r3]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <answer2CPU+0x844>)
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d66:	230e      	movs	r3, #14
 8001d68:	18fb      	adds	r3, r7, r3
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <answer2CPU+0x848>)
 8001d6e:	0052      	lsls	r2, r2, #1
 8001d70:	5ad3      	ldrh	r3, [r2, r3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1e2      	bne.n	8001d3c <answer2CPU+0x6fc>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d000      	beq.n	8001d80 <answer2CPU+0x740>
 8001d7e:	e076      	b.n	8001e6e <answer2CPU+0x82e>
				myLength = 0x04; //4 bytes length answer
 8001d80:	2109      	movs	r1, #9
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	2204      	movs	r2, #4
 8001d86:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001d88:	187b      	adds	r3, r7, r1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b02      	subs	r3, #2
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <answer2CPU+0x848>)
 8001d94:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <answer2CPU+0x84c>)
 8001da0:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001da2:	4b3b      	ldr	r3, [pc, #236]	; (8001e90 <answer2CPU+0x850>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <answer2CPU+0x848>)
 8001daa:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001dac:	230d      	movs	r3, #13
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <answer2CPU+0x848>)
 8001db6:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001db8:	230e      	movs	r3, #14
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e011      	b.n	8001de6 <answer2CPU+0x7a6>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001dc2:	200e      	movs	r0, #14
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <answer2CPU+0x848>)
 8001dca:	0052      	lsls	r2, r2, #1
 8001dcc:	5ad3      	ldrh	r3, [r2, r3]
 8001dce:	b2d9      	uxtb	r1, r3
 8001dd0:	220d      	movs	r2, #13
 8001dd2:	18bb      	adds	r3, r7, r2
 8001dd4:	18ba      	adds	r2, r7, r2
 8001dd6:	7812      	ldrb	r2, [r2, #0]
 8001dd8:	188a      	adds	r2, r1, r2
 8001dda:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	183b      	adds	r3, r7, r0
 8001de2:	3201      	adds	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	230e      	movs	r3, #14
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	2009      	movs	r0, #9
 8001dee:	183b      	adds	r3, r7, r0
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbe4      	blt.n	8001dc2 <answer2CPU+0x782>
				}
				myCS = 0 - myCS;
 8001df8:	210d      	movs	r1, #13
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	187a      	adds	r2, r7, r1
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	4252      	negs	r2, r2
 8001e02:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e04:	183b      	adds	r3, r7, r0
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	1e5a      	subs	r2, r3, #1
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b299      	uxth	r1, r3
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <answer2CPU+0x848>)
 8001e12:	0052      	lsls	r2, r2, #1
 8001e14:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <answer2CPU+0x844>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2280      	movs	r2, #128	; 0x80
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d0fa      	beq.n	8001e18 <answer2CPU+0x7d8>
				USART2->TDR = ans[0]|0x0100;
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <answer2CPU+0x848>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	0052      	lsls	r2, r2, #1
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <answer2CPU+0x844>)
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e32:	e014      	b.n	8001e5e <answer2CPU+0x81e>
				{
				  i++;
 8001e34:	210e      	movs	r1, #14
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	3201      	adds	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <answer2CPU+0x844>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d0fa      	beq.n	8001e42 <answer2CPU+0x802>
				  USART2->TDR = (uint8_t)ans[i];
 8001e4c:	230e      	movs	r3, #14
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <answer2CPU+0x848>)
 8001e54:	0052      	lsls	r2, r2, #1
 8001e56:	5ad3      	ldrh	r3, [r2, r3]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <answer2CPU+0x844>)
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e5e:	230e      	movs	r3, #14
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <answer2CPU+0x848>)
 8001e66:	0052      	lsls	r2, r2, #1
 8001e68:	5ad3      	ldrh	r3, [r2, r3]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e2      	bne.n	8001e34 <answer2CPU+0x7f4>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <answer2CPU+0x844>)
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <answer2CPU+0x844>)
 8001e74:	2108      	movs	r1, #8
 8001e76:	430a      	orrs	r2, r1
 8001e78:	621a      	str	r2, [r3, #32]
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40004400 	.word	0x40004400
 8001e88:	2000349c 	.word	0x2000349c
 8001e8c:	200033f8 	.word	0x200033f8
 8001e90:	200032ee 	.word	0x200032ee

08001e94 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f001 f8fc 	bl	8003098 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <MEM_Reset+0xb0>)
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <MEM_Reset+0xb0>)
 8001ea6:	4928      	ldr	r1, [pc, #160]	; (8001f48 <MEM_Reset+0xb4>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001eac:	1dfb      	adds	r3, r7, #7
 8001eae:	2266      	movs	r2, #102	; 0x66
 8001eb0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001eb2:	1df9      	adds	r1, r7, #7
 8001eb4:	4825      	ldr	r0, [pc, #148]	; (8001f4c <MEM_Reset+0xb8>)
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f004 fc65 	bl	8006788 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <MEM_Reset+0xb0>)
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MEM_Reset+0xb0>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0209      	lsls	r1, r1, #8
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001ecc:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001ece:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001ed0:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001ed2:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001ed4:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001ed6:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MEM_Reset+0xb0>)
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MEM_Reset+0xb0>)
 8001ede:	491a      	ldr	r1, [pc, #104]	; (8001f48 <MEM_Reset+0xb4>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001ee4:	1dfb      	adds	r3, r7, #7
 8001ee6:	2299      	movs	r2, #153	; 0x99
 8001ee8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001eea:	1df9      	adds	r1, r7, #7
 8001eec:	4817      	ldr	r0, [pc, #92]	; (8001f4c <MEM_Reset+0xb8>)
 8001eee:	2305      	movs	r3, #5
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f004 fc49 	bl	8006788 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <MEM_Reset+0xb0>)
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MEM_Reset+0xb0>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0209      	lsls	r1, r1, #8
 8001f00:	430a      	orrs	r2, r1
 8001f02:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f04:	2001      	movs	r0, #1
 8001f06:	f001 f8c7 	bl	8003098 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001f0a:	1dfb      	adds	r3, r7, #7
 8001f0c:	22b7      	movs	r2, #183	; 0xb7
 8001f0e:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MEM_Reset+0xb0>)
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MEM_Reset+0xb0>)
 8001f16:	490c      	ldr	r1, [pc, #48]	; (8001f48 <MEM_Reset+0xb4>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f1c:	1df9      	adds	r1, r7, #7
 8001f1e:	480b      	ldr	r0, [pc, #44]	; (8001f4c <MEM_Reset+0xb8>)
 8001f20:	2305      	movs	r3, #5
 8001f22:	2201      	movs	r2, #1
 8001f24:	f004 fc30 	bl	8006788 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MEM_Reset+0xb0>)
 8001f2a:	695a      	ldr	r2, [r3, #20]
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <MEM_Reset+0xb0>)
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	0209      	lsls	r1, r1, #8
 8001f32:	430a      	orrs	r2, r1
 8001f34:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f36:	2001      	movs	r0, #1
 8001f38:	f001 f8ae 	bl	8003098 <HAL_Delay>
	}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b002      	add	sp, #8
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	50000800 	.word	0x50000800
 8001f48:	ffff7fff 	.word	0xffff7fff
 8001f4c:	200031b0 	.word	0x200031b0

08001f50 <weoShowFullScreenFAST>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenFAST(uint8_t picNum) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	4c41      	ldr	r4, [pc, #260]	; (8002058 <weoShowFullScreenFAST+0x108>)
 8001f54:	44a5      	add	sp, r4
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	0002      	movs	r2, r0
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <weoShowFullScreenFAST+0x10c>)
 8001f5c:	4940      	ldr	r1, [pc, #256]	; (8002060 <weoShowFullScreenFAST+0x110>)
 8001f5e:	468c      	mov	ip, r1
 8001f60:	44bc      	add	ip, r7
 8001f62:	4463      	add	r3, ip
 8001f64:	701a      	strb	r2, [r3, #0]
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
//		uint16_t len;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8001f66:	237f      	movs	r3, #127	; 0x7f
 8001f68:	227f      	movs	r2, #127	; 0x7f
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff fadf 	bl	8001530 <weoDrawRectangleInit>

		len=8192;
 8001f72:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <weoShowFullScreenFAST+0x114>)
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	0192      	lsls	r2, r2, #6
 8001f78:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <weoShowFullScreenFAST+0x114>)
 8001f7c:	881a      	ldrh	r2, [r3, #0]
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <weoShowFullScreenFAST+0x118>)
 8001f80:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001f82:	483a      	ldr	r0, [pc, #232]	; (800206c <weoShowFullScreenFAST+0x11c>)
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	2213      	movs	r2, #19
 8001f88:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8001f8a:	4b34      	ldr	r3, [pc, #208]	; (800205c <weoShowFullScreenFAST+0x10c>)
 8001f8c:	4a34      	ldr	r2, [pc, #208]	; (8002060 <weoShowFullScreenFAST+0x110>)
 8001f8e:	4694      	mov	ip, r2
 8001f90:	44bc      	add	ip, r7
 8001f92:	4463      	add	r3, ip
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	035b      	lsls	r3, r3, #13
 8001f98:	4935      	ldr	r1, [pc, #212]	; (8002070 <weoShowFullScreenFAST+0x120>)
 8001f9a:	187a      	adds	r2, r7, r1
 8001f9c:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8001f9e:	187b      	adds	r3, r7, r1
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <weoShowFullScreenFAST+0x124>)
 8001fa6:	4c2e      	ldr	r4, [pc, #184]	; (8002060 <weoShowFullScreenFAST+0x110>)
 8001fa8:	46a4      	mov	ip, r4
 8001faa:	44bc      	add	ip, r7
 8001fac:	4463      	add	r3, ip
 8001fae:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <weoShowFullScreenFAST+0x124>)
 8001fba:	4c29      	ldr	r4, [pc, #164]	; (8002060 <weoShowFullScreenFAST+0x110>)
 8001fbc:	46a4      	mov	ip, r4
 8001fbe:	44bc      	add	ip, r7
 8001fc0:	4463      	add	r3, ip
 8001fc2:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0c1b      	lsrs	r3, r3, #16
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <weoShowFullScreenFAST+0x124>)
 8001fce:	4c24      	ldr	r4, [pc, #144]	; (8002060 <weoShowFullScreenFAST+0x110>)
 8001fd0:	46a4      	mov	ip, r4
 8001fd2:	44bc      	add	ip, r7
 8001fd4:	4463      	add	r3, ip
 8001fd6:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e1b      	lsrs	r3, r3, #24
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <weoShowFullScreenFAST+0x124>)
 8001fe2:	491f      	ldr	r1, [pc, #124]	; (8002060 <weoShowFullScreenFAST+0x110>)
 8001fe4:	468c      	mov	ip, r1
 8001fe6:	44bc      	add	ip, r7
 8001fe8:	4463      	add	r3, ip
 8001fea:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <weoShowFullScreenFAST+0x128>)
 8001fee:	695a      	ldr	r2, [r3, #20]
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <weoShowFullScreenFAST+0x128>)
 8001ff2:	4922      	ldr	r1, [pc, #136]	; (800207c <weoShowFullScreenFAST+0x12c>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001ff8:	1839      	adds	r1, r7, r0
 8001ffa:	4821      	ldr	r0, [pc, #132]	; (8002080 <weoShowFullScreenFAST+0x130>)
 8001ffc:	2332      	movs	r3, #50	; 0x32
 8001ffe:	2201      	movs	r2, #1
 8002000:	f004 fbc2 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002004:	2408      	movs	r4, #8
 8002006:	193b      	adds	r3, r7, r4
 8002008:	1cd9      	adds	r1, r3, #3
 800200a:	481d      	ldr	r0, [pc, #116]	; (8002080 <weoShowFullScreenFAST+0x130>)
 800200c:	2332      	movs	r3, #50	; 0x32
 800200e:	2201      	movs	r2, #1
 8002010:	f004 fbba 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002014:	193b      	adds	r3, r7, r4
 8002016:	1c99      	adds	r1, r3, #2
 8002018:	4819      	ldr	r0, [pc, #100]	; (8002080 <weoShowFullScreenFAST+0x130>)
 800201a:	2332      	movs	r3, #50	; 0x32
 800201c:	2201      	movs	r2, #1
 800201e:	f004 fbb3 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002022:	193b      	adds	r3, r7, r4
 8002024:	1c59      	adds	r1, r3, #1
 8002026:	4816      	ldr	r0, [pc, #88]	; (8002080 <weoShowFullScreenFAST+0x130>)
 8002028:	2332      	movs	r3, #50	; 0x32
 800202a:	2201      	movs	r2, #1
 800202c:	f004 fbac 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002030:	1939      	adds	r1, r7, r4
 8002032:	4813      	ldr	r0, [pc, #76]	; (8002080 <weoShowFullScreenFAST+0x130>)
 8002034:	2332      	movs	r3, #50	; 0x32
 8002036:	2201      	movs	r2, #1
 8002038:	f004 fba6 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 800203c:	4b09      	ldr	r3, [pc, #36]	; (8002064 <weoShowFullScreenFAST+0x114>)
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	4910      	ldr	r1, [pc, #64]	; (8002084 <weoShowFullScreenFAST+0x134>)
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <weoShowFullScreenFAST+0x130>)
 8002044:	0018      	movs	r0, r3
 8002046:	f005 f815 	bl	8007074 <HAL_SPI_Receive_DMA>
	}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <weoShowFullScreenFAST+0x138>)
 8002052:	449d      	add	sp, r3
 8002054:	bd90      	pop	{r4, r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	ffffdfe4 	.word	0xffffdfe4
 800205c:	ffffdfef 	.word	0xffffdfef
 8002060:	00002018 	.word	0x00002018
 8002064:	200035d8 	.word	0x200035d8
 8002068:	20003132 	.word	0x20003132
 800206c:	00002013 	.word	0x00002013
 8002070:	00002014 	.word	0x00002014
 8002074:	ffffdff0 	.word	0xffffdff0
 8002078:	50000800 	.word	0x50000800
 800207c:	ffff7fff 	.word	0xffff7fff
 8002080:	200031b0 	.word	0x200031b0
 8002084:	200035e0 	.word	0x200035e0
 8002088:	0000201c 	.word	0x0000201c

0800208c <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	4c97      	ldr	r4, [pc, #604]	; (80022ec <weoShowSmallImage+0x260>)
 8002090:	44a5      	add	sp, r4
 8002092:	af02      	add	r7, sp, #8
 8002094:	0004      	movs	r4, r0
 8002096:	0008      	movs	r0, r1
 8002098:	0011      	movs	r1, r2
 800209a:	4b95      	ldr	r3, [pc, #596]	; (80022f0 <weoShowSmallImage+0x264>)
 800209c:	4a95      	ldr	r2, [pc, #596]	; (80022f4 <weoShowSmallImage+0x268>)
 800209e:	4694      	mov	ip, r2
 80020a0:	44bc      	add	ip, r7
 80020a2:	4463      	add	r3, ip
 80020a4:	1c22      	adds	r2, r4, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	4b93      	ldr	r3, [pc, #588]	; (80022f8 <weoShowSmallImage+0x26c>)
 80020aa:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <weoShowSmallImage+0x268>)
 80020ac:	4694      	mov	ip, r2
 80020ae:	44bc      	add	ip, r7
 80020b0:	4463      	add	r3, ip
 80020b2:	1c02      	adds	r2, r0, #0
 80020b4:	701a      	strb	r2, [r3, #0]
 80020b6:	4b91      	ldr	r3, [pc, #580]	; (80022fc <weoShowSmallImage+0x270>)
 80020b8:	4a8e      	ldr	r2, [pc, #568]	; (80022f4 <weoShowSmallImage+0x268>)
 80020ba:	4694      	mov	ip, r2
 80020bc:	44bc      	add	ip, r7
 80020be:	4463      	add	r3, ip
 80020c0:	1c0a      	adds	r2, r1, #0
 80020c2:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 80020c4:	2300      	movs	r3, #0
 80020c6:	498e      	ldr	r1, [pc, #568]	; (8002300 <weoShowSmallImage+0x274>)
 80020c8:	187a      	adds	r2, r7, r1
 80020ca:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80020cc:	4d8d      	ldr	r5, [pc, #564]	; (8002304 <weoShowSmallImage+0x278>)
 80020ce:	197b      	adds	r3, r7, r5
 80020d0:	2213      	movs	r2, #19
 80020d2:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 80020d4:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <weoShowSmallImage+0x264>)
 80020d6:	4a87      	ldr	r2, [pc, #540]	; (80022f4 <weoShowSmallImage+0x268>)
 80020d8:	4694      	mov	ip, r2
 80020da:	44bc      	add	ip, r7
 80020dc:	4463      	add	r3, ip
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	331e      	adds	r3, #30
 80020e2:	035b      	lsls	r3, r3, #13
 80020e4:	187a      	adds	r2, r7, r1
 80020e6:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	4b86      	ldr	r3, [pc, #536]	; (8002308 <weoShowSmallImage+0x27c>)
 80020f0:	4880      	ldr	r0, [pc, #512]	; (80022f4 <weoShowSmallImage+0x268>)
 80020f2:	4684      	mov	ip, r0
 80020f4:	44bc      	add	ip, r7
 80020f6:	4463      	add	r3, ip
 80020f8:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b81      	ldr	r3, [pc, #516]	; (8002308 <weoShowSmallImage+0x27c>)
 8002104:	487b      	ldr	r0, [pc, #492]	; (80022f4 <weoShowSmallImage+0x268>)
 8002106:	4684      	mov	ip, r0
 8002108:	44bc      	add	ip, r7
 800210a:	4463      	add	r3, ip
 800210c:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800210e:	187b      	adds	r3, r7, r1
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b7c      	ldr	r3, [pc, #496]	; (8002308 <weoShowSmallImage+0x27c>)
 8002118:	4876      	ldr	r0, [pc, #472]	; (80022f4 <weoShowSmallImage+0x268>)
 800211a:	4684      	mov	ip, r0
 800211c:	44bc      	add	ip, r7
 800211e:	4463      	add	r3, ip
 8002120:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0e1b      	lsrs	r3, r3, #24
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b77      	ldr	r3, [pc, #476]	; (8002308 <weoShowSmallImage+0x27c>)
 800212c:	4971      	ldr	r1, [pc, #452]	; (80022f4 <weoShowSmallImage+0x268>)
 800212e:	468c      	mov	ip, r1
 8002130:	44bc      	add	ip, r7
 8002132:	4463      	add	r3, ip
 8002134:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002136:	4b75      	ldr	r3, [pc, #468]	; (800230c <weoShowSmallImage+0x280>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	4b74      	ldr	r3, [pc, #464]	; (800230c <weoShowSmallImage+0x280>)
 800213c:	4974      	ldr	r1, [pc, #464]	; (8002310 <weoShowSmallImage+0x284>)
 800213e:	400a      	ands	r2, r1
 8002140:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002142:	1979      	adds	r1, r7, r5
 8002144:	4873      	ldr	r0, [pc, #460]	; (8002314 <weoShowSmallImage+0x288>)
 8002146:	2332      	movs	r3, #50	; 0x32
 8002148:	2201      	movs	r2, #1
 800214a:	f004 fb1d 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800214e:	240c      	movs	r4, #12
 8002150:	193b      	adds	r3, r7, r4
 8002152:	1cd9      	adds	r1, r3, #3
 8002154:	486f      	ldr	r0, [pc, #444]	; (8002314 <weoShowSmallImage+0x288>)
 8002156:	2332      	movs	r3, #50	; 0x32
 8002158:	2201      	movs	r2, #1
 800215a:	f004 fb15 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800215e:	193b      	adds	r3, r7, r4
 8002160:	1c99      	adds	r1, r3, #2
 8002162:	486c      	ldr	r0, [pc, #432]	; (8002314 <weoShowSmallImage+0x288>)
 8002164:	2332      	movs	r3, #50	; 0x32
 8002166:	2201      	movs	r2, #1
 8002168:	f004 fb0e 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800216c:	193b      	adds	r3, r7, r4
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	4868      	ldr	r0, [pc, #416]	; (8002314 <weoShowSmallImage+0x288>)
 8002172:	2332      	movs	r3, #50	; 0x32
 8002174:	2201      	movs	r2, #1
 8002176:	f004 fb07 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800217a:	1939      	adds	r1, r7, r4
 800217c:	4865      	ldr	r0, [pc, #404]	; (8002314 <weoShowSmallImage+0x288>)
 800217e:	2332      	movs	r3, #50	; 0x32
 8002180:	2201      	movs	r2, #1
 8002182:	f004 fb01 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <weoShowSmallImage+0x28c>)
 8002188:	2210      	movs	r2, #16
 800218a:	18b9      	adds	r1, r7, r2
 800218c:	4861      	ldr	r0, [pc, #388]	; (8002314 <weoShowSmallImage+0x288>)
 800218e:	2202      	movs	r2, #2
 8002190:	f004 fc52 	bl	8006a38 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002194:	4b5d      	ldr	r3, [pc, #372]	; (800230c <weoShowSmallImage+0x280>)
 8002196:	695a      	ldr	r2, [r3, #20]
 8002198:	4b5c      	ldr	r3, [pc, #368]	; (800230c <weoShowSmallImage+0x280>)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0209      	lsls	r1, r1, #8
 800219e:	430a      	orrs	r2, r1
 80021a0:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80021a2:	4e5e      	ldr	r6, [pc, #376]	; (800231c <weoShowSmallImage+0x290>)
 80021a4:	19bb      	adds	r3, r7, r6
 80021a6:	4a5e      	ldr	r2, [pc, #376]	; (8002320 <weoShowSmallImage+0x294>)
 80021a8:	4952      	ldr	r1, [pc, #328]	; (80022f4 <weoShowSmallImage+0x268>)
 80021aa:	468c      	mov	ip, r1
 80021ac:	44bc      	add	ip, r7
 80021ae:	4462      	add	r2, ip
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80021b4:	495b      	ldr	r1, [pc, #364]	; (8002324 <weoShowSmallImage+0x298>)
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	4a59      	ldr	r2, [pc, #356]	; (8002320 <weoShowSmallImage+0x294>)
 80021ba:	484e      	ldr	r0, [pc, #312]	; (80022f4 <weoShowSmallImage+0x268>)
 80021bc:	4684      	mov	ip, r0
 80021be:	44bc      	add	ip, r7
 80021c0:	4462      	add	r2, ip
 80021c2:	7852      	ldrb	r2, [r2, #1]
 80021c4:	701a      	strb	r2, [r3, #0]

		len=(width*height>>1)+0x20;
 80021c6:	19bb      	adds	r3, r7, r6
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	187a      	adds	r2, r7, r1
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	4353      	muls	r3, r2
 80021d0:	105b      	asrs	r3, r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	4b54      	ldr	r3, [pc, #336]	; (8002328 <weoShowSmallImage+0x29c>)
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	3220      	adds	r2, #32
 80021da:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <weoShowSmallImage+0x27c>)
 80021de:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <weoShowSmallImage+0x268>)
 80021e0:	4694      	mov	ip, r2
 80021e2:	44bc      	add	ip, r7
 80021e4:	4463      	add	r3, ip
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3302      	adds	r3, #2
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b46      	ldr	r3, [pc, #280]	; (8002308 <weoShowSmallImage+0x27c>)
 80021ee:	4841      	ldr	r0, [pc, #260]	; (80022f4 <weoShowSmallImage+0x268>)
 80021f0:	4684      	mov	ip, r0
 80021f2:	44bc      	add	ip, r7
 80021f4:	4463      	add	r3, ip
 80021f6:	701a      	strb	r2, [r3, #0]

		USART2->ICR|=USART_ICR_ORECF;
 80021f8:	4b4c      	ldr	r3, [pc, #304]	; (800232c <weoShowSmallImage+0x2a0>)
 80021fa:	6a1a      	ldr	r2, [r3, #32]
 80021fc:	4b4b      	ldr	r3, [pc, #300]	; (800232c <weoShowSmallImage+0x2a0>)
 80021fe:	2108      	movs	r1, #8
 8002200:	430a      	orrs	r2, r1
 8002202:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002204:	197b      	adds	r3, r7, r5
 8002206:	2213      	movs	r2, #19
 8002208:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800220a:	4b40      	ldr	r3, [pc, #256]	; (800230c <weoShowSmallImage+0x280>)
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <weoShowSmallImage+0x280>)
 8002210:	493f      	ldr	r1, [pc, #252]	; (8002310 <weoShowSmallImage+0x284>)
 8002212:	400a      	ands	r2, r1
 8002214:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002216:	1979      	adds	r1, r7, r5
 8002218:	483e      	ldr	r0, [pc, #248]	; (8002314 <weoShowSmallImage+0x288>)
 800221a:	2332      	movs	r3, #50	; 0x32
 800221c:	2201      	movs	r2, #1
 800221e:	f004 fab3 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002222:	193b      	adds	r3, r7, r4
 8002224:	1cd9      	adds	r1, r3, #3
 8002226:	483b      	ldr	r0, [pc, #236]	; (8002314 <weoShowSmallImage+0x288>)
 8002228:	2332      	movs	r3, #50	; 0x32
 800222a:	2201      	movs	r2, #1
 800222c:	f004 faac 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 8002230:	193b      	adds	r3, r7, r4
 8002232:	1c99      	adds	r1, r3, #2
 8002234:	4837      	ldr	r0, [pc, #220]	; (8002314 <weoShowSmallImage+0x288>)
 8002236:	2332      	movs	r3, #50	; 0x32
 8002238:	2201      	movs	r2, #1
 800223a:	f004 faa5 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800223e:	193b      	adds	r3, r7, r4
 8002240:	1c59      	adds	r1, r3, #1
 8002242:	4834      	ldr	r0, [pc, #208]	; (8002314 <weoShowSmallImage+0x288>)
 8002244:	2332      	movs	r3, #50	; 0x32
 8002246:	2201      	movs	r2, #1
 8002248:	f004 fa9e 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 800224c:	1939      	adds	r1, r7, r4
 800224e:	4831      	ldr	r0, [pc, #196]	; (8002314 <weoShowSmallImage+0x288>)
 8002250:	2332      	movs	r3, #50	; 0x32
 8002252:	2201      	movs	r2, #1
 8002254:	f004 fa98 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002258:	4c2f      	ldr	r4, [pc, #188]	; (8002318 <weoShowSmallImage+0x28c>)
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <weoShowSmallImage+0x29c>)
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	2514      	movs	r5, #20
 8002262:	1979      	adds	r1, r7, r5
 8002264:	482b      	ldr	r0, [pc, #172]	; (8002314 <weoShowSmallImage+0x288>)
 8002266:	0023      	movs	r3, r4
 8002268:	f004 fbe6 	bl	8006a38 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <weoShowSmallImage+0x280>)
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <weoShowSmallImage+0x280>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0209      	lsls	r1, r1, #8
 8002276:	430a      	orrs	r2, r1
 8002278:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <weoShowSmallImage+0x26c>)
 800227c:	481d      	ldr	r0, [pc, #116]	; (80022f4 <weoShowSmallImage+0x268>)
 800227e:	183a      	adds	r2, r7, r0
 8002280:	18d2      	adds	r2, r2, r3
 8002282:	19bb      	adds	r3, r7, r6
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b2dc      	uxtb	r4, r3
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <weoShowSmallImage+0x270>)
 8002292:	183a      	adds	r2, r7, r0
 8002294:	18d2      	adds	r2, r2, r3
 8002296:	4923      	ldr	r1, [pc, #140]	; (8002324 <weoShowSmallImage+0x298>)
 8002298:	187b      	adds	r3, r7, r1
 800229a:	7812      	ldrb	r2, [r2, #0]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	18d3      	adds	r3, r2, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <weoShowSmallImage+0x270>)
 80022a8:	4912      	ldr	r1, [pc, #72]	; (80022f4 <weoShowSmallImage+0x268>)
 80022aa:	468c      	mov	ip, r1
 80022ac:	44bc      	add	ip, r7
 80022ae:	4463      	add	r3, ip
 80022b0:	7819      	ldrb	r1, [r3, #0]
 80022b2:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <weoShowSmallImage+0x26c>)
 80022b4:	480f      	ldr	r0, [pc, #60]	; (80022f4 <weoShowSmallImage+0x268>)
 80022b6:	4684      	mov	ip, r0
 80022b8:	44bc      	add	ip, r7
 80022ba:	4463      	add	r3, ip
 80022bc:	7818      	ldrb	r0, [r3, #0]
 80022be:	197b      	adds	r3, r7, r5
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	23ff      	movs	r3, #255	; 0xff
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	0013      	movs	r3, r2
 80022c8:	0022      	movs	r2, r4
 80022ca:	f7ff f851 	bl	8001370 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <weoShowSmallImage+0x280>)
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <weoShowSmallImage+0x280>)
 80022d4:	2140      	movs	r1, #64	; 0x40
 80022d6:	430a      	orrs	r2, r1
 80022d8:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <weoShowSmallImage+0x2a4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
	}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <weoShowSmallImage+0x2a8>)
 80022e8:	449d      	add	sp, r3
 80022ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ec:	ffffdfd4 	.word	0xffffdfd4
 80022f0:	ffffdfe7 	.word	0xffffdfe7
 80022f4:	00002020 	.word	0x00002020
 80022f8:	ffffdfe6 	.word	0xffffdfe6
 80022fc:	ffffdfe5 	.word	0xffffdfe5
 8002300:	0000201c 	.word	0x0000201c
 8002304:	00002017 	.word	0x00002017
 8002308:	ffffdfec 	.word	0xffffdfec
 800230c:	50000800 	.word	0x50000800
 8002310:	ffff7fff 	.word	0xffff7fff
 8002314:	200031b0 	.word	0x200031b0
 8002318:	00001388 	.word	0x00001388
 800231c:	0000201b 	.word	0x0000201b
 8002320:	ffffdff0 	.word	0xffffdff0
 8002324:	0000201a 	.word	0x0000201a
 8002328:	00002018 	.word	0x00002018
 800232c:	40004400 	.word	0x40004400
 8002330:	2000345a 	.word	0x2000345a
 8002334:	00002024 	.word	0x00002024

08002338 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <MEM_GetID+0xb0>)
 8002342:	7812      	ldrb	r2, [r2, #0]
 8002344:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	229e      	movs	r2, #158	; 0x9e
 800234a:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <MEM_GetID+0xb4>)
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <MEM_GetID+0xb4>)
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <MEM_GetID+0xb8>)
 8002354:	400a      	ands	r2, r1
 8002356:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002358:	1df9      	adds	r1, r7, #7
 800235a:	4826      	ldr	r0, [pc, #152]	; (80023f4 <MEM_GetID+0xbc>)
 800235c:	2332      	movs	r3, #50	; 0x32
 800235e:	2201      	movs	r2, #1
 8002360:	f004 fa12 	bl	8006788 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002364:	23fa      	movs	r3, #250	; 0xfa
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	1d39      	adds	r1, r7, #4
 800236a:	4822      	ldr	r0, [pc, #136]	; (80023f4 <MEM_GetID+0xbc>)
 800236c:	2201      	movs	r2, #1
 800236e:	f004 fb63 	bl	8006a38 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	001a      	movs	r2, r3
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <MEM_GetID+0xc0>)
 800237a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MEM_GetID+0xc0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	4b1d      	ldr	r3, [pc, #116]	; (80023f8 <MEM_GetID+0xc0>)
 8002384:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002386:	23fa      	movs	r3, #250	; 0xfa
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	1d39      	adds	r1, r7, #4
 800238c:	4819      	ldr	r0, [pc, #100]	; (80023f4 <MEM_GetID+0xbc>)
 800238e:	2201      	movs	r2, #1
 8002390:	f004 fb52 	bl	8006a38 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	001a      	movs	r2, r3
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <MEM_GetID+0xc0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	18d2      	adds	r2, r2, r3
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MEM_GetID+0xc0>)
 80023a2:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MEM_GetID+0xc0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	021a      	lsls	r2, r3, #8
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MEM_GetID+0xc0>)
 80023ac:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80023ae:	23fa      	movs	r3, #250	; 0xfa
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	1d39      	adds	r1, r7, #4
 80023b4:	480f      	ldr	r0, [pc, #60]	; (80023f4 <MEM_GetID+0xbc>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	f004 fb3e 	bl	8006a38 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	001a      	movs	r2, r3
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <MEM_GetID+0xc0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	18d2      	adds	r2, r2, r3
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MEM_GetID+0xc0>)
 80023ca:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <MEM_GetID+0xb4>)
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MEM_GetID+0xb4>)
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	0209      	lsls	r1, r1, #8
 80023d6:	430a      	orrs	r2, r1
 80023d8:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <MEM_GetID+0xc0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
	}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	0800a738 	.word	0x0800a738
 80023ec:	50000800 	.word	0x50000800
 80023f0:	ffff7fff 	.word	0xffff7fff
 80023f4:	200031b0 	.word	0x200031b0
 80023f8:	2000315c 	.word	0x2000315c

080023fc <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	0002      	movs	r2, r0
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002408:	4b49      	ldr	r3, [pc, #292]	; (8002530 <cmdExecute+0x134>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b10      	cmp	r3, #16
 800240e:	d100      	bne.n	8002412 <cmdExecute+0x16>
 8002410:	e087      	b.n	8002522 <cmdExecute+0x126>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002412:	4b48      	ldr	r3, [pc, #288]	; (8002534 <cmdExecute+0x138>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d000      	beq.n	800241c <cmdExecute+0x20>
 800241a:	e084      	b.n	8002526 <cmdExecute+0x12a>
		USART2->ICR|=USART_ICR_ORECF;
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <cmdExecute+0x13c>)
 800241e:	6a1a      	ldr	r2, [r3, #32]
 8002420:	4b45      	ldr	r3, [pc, #276]	; (8002538 <cmdExecute+0x13c>)
 8002422:	2108      	movs	r1, #8
 8002424:	430a      	orrs	r2, r1
 8002426:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002428:	1dfb      	adds	r3, r7, #7
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b11      	cmp	r3, #17
 800242e:	d111      	bne.n	8002454 <cmdExecute+0x58>
			bf4me=0x11;	//set BF flag 4 me
 8002430:	4b40      	ldr	r3, [pc, #256]	; (8002534 <cmdExecute+0x138>)
 8002432:	2211      	movs	r2, #17
 8002434:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <cmdExecute+0x4e>
 800243e:	4b3f      	ldr	r3, [pc, #252]	; (800253c <cmdExecute+0x140>)
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	4b3e      	ldr	r3, [pc, #248]	; (800253c <cmdExecute+0x140>)
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	438a      	bics	r2, r1
 8002448:	615a      	str	r2, [r3, #20]
//			weoShowFullScreen(picNum);
			weoShowFullScreenFAST(picNum);
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <cmdExecute+0x144>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	f7ff fd7e 	bl	8001f50 <weoShowFullScreenFAST>
				}
		if(cmd2Execute==0x12){
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d117      	bne.n	800248c <cmdExecute+0x90>
			bf4me=0x12;	//set BF flag 4 me
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <cmdExecute+0x138>)
 800245e:	2212      	movs	r2, #18
 8002460:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <cmdExecute+0x7a>
 800246a:	4b34      	ldr	r3, [pc, #208]	; (800253c <cmdExecute+0x140>)
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <cmdExecute+0x140>)
 8002470:	2140      	movs	r1, #64	; 0x40
 8002472:	438a      	bics	r2, r1
 8002474:	615a      	str	r2, [r3, #20]
//			weoShowSmallImageFAST(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002476:	4b32      	ldr	r3, [pc, #200]	; (8002540 <cmdExecute+0x144>)
 8002478:	7818      	ldrb	r0, [r3, #0]
 800247a:	4b32      	ldr	r3, [pc, #200]	; (8002544 <cmdExecute+0x148>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b2d9      	uxtb	r1, r3
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <cmdExecute+0x14c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	001a      	movs	r2, r3
 8002488:	f7ff fe00 	bl	800208c <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b13      	cmp	r3, #19
 8002492:	d117      	bne.n	80024c4 <cmdExecute+0xc8>
			bf4me=0x13;	//set BF flag 4 me
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <cmdExecute+0x138>)
 8002496:	2213      	movs	r2, #19
 8002498:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <cmdExecute+0xb2>
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <cmdExecute+0x140>)
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	4b25      	ldr	r3, [pc, #148]	; (800253c <cmdExecute+0x140>)
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	438a      	bics	r2, r1
 80024ac:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <cmdExecute+0x148>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b2d8      	uxtb	r0, r3
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <cmdExecute+0x14c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b2d9      	uxtb	r1, r3
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <cmdExecute+0x150>)
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	4b24      	ldr	r3, [pc, #144]	; (8002550 <cmdExecute+0x154>)
 80024c0:	f000 f848 	bl	8002554 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b14      	cmp	r3, #20
 80024ca:	d10c      	bne.n	80024e6 <cmdExecute+0xea>
			bf4me=0x14;	//set BF flag 4 me
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <cmdExecute+0x138>)
 80024ce:	2214      	movs	r2, #20
 80024d0:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <cmdExecute+0xea>
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <cmdExecute+0x140>)
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	4b17      	ldr	r3, [pc, #92]	; (800253c <cmdExecute+0x140>)
 80024e0:	2140      	movs	r1, #64	; 0x40
 80024e2:	438a      	bics	r2, r1
 80024e4:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b15      	cmp	r3, #21
 80024ec:	d108      	bne.n	8002500 <cmdExecute+0x104>
			if(cmd[3]==0x00){
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <cmdExecute+0x134>)
 80024f0:	78db      	ldrb	r3, [r3, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <cmdExecute+0xfe>
				weoClear();
 80024f6:	f7fe fed5 	bl	80012a4 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <cmdExecute+0x138>)
 80024fc:	2215      	movs	r2, #21
 80024fe:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b16      	cmp	r3, #22
 8002506:	d102      	bne.n	800250e <cmdExecute+0x112>
			bf4me=0x16;	//set BF flag 4 me
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <cmdExecute+0x138>)
 800250a:	2216      	movs	r2, #22
 800250c:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <cmdExecute+0x13c>)
 8002516:	6a1a      	ldr	r2, [r3, #32]
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <cmdExecute+0x13c>)
 800251a:	2108      	movs	r1, #8
 800251c:	430a      	orrs	r2, r1
 800251e:	621a      	str	r2, [r3, #32]
 8002520:	e002      	b.n	8002528 <cmdExecute+0x12c>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	e000      	b.n	8002528 <cmdExecute+0x12c>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 8002526:	46c0      	nop			; (mov r8, r8)
	}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200055e0 	.word	0x200055e0
 8002534:	200034b0 	.word	0x200034b0
 8002538:	40004400 	.word	0x40004400
 800253c:	50000800 	.word	0x50000800
 8002540:	20003459 	.word	0x20003459
 8002544:	200032f0 	.word	0x200032f0
 8002548:	20003384 	.word	0x20003384
 800254c:	20003499 	.word	0x20003499
 8002550:	200031a0 	.word	0x200031a0

08002554 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002554:	b5b0      	push	{r4, r5, r7, lr}
 8002556:	b092      	sub	sp, #72	; 0x48
 8002558:	af02      	add	r7, sp, #8
 800255a:	0004      	movs	r4, r0
 800255c:	0008      	movs	r0, r1
 800255e:	0011      	movs	r1, r2
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	1c22      	adds	r2, r4, #0
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	1dbb      	adds	r3, r7, #6
 800256a:	1c02      	adds	r2, r0, #0
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	1d7b      	adds	r3, r7, #5
 8002570:	1c0a      	adds	r2, r1, #0
 8002572:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 8002574:	233e      	movs	r3, #62	; 0x3e
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	1dfa      	adds	r2, r7, #7
 800257a:	7812      	ldrb	r2, [r2, #0]
 800257c:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 800257e:	233c      	movs	r3, #60	; 0x3c
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]
 8002586:	e04f      	b.n	8002628 <printASCIIarray+0xd4>
				for(j=0;j<49;j++){
 8002588:	233f      	movs	r3, #63	; 0x3f
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e01b      	b.n	80025ca <printASCIIarray+0x76>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8002592:	233c      	movs	r3, #60	; 0x3c
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	001a      	movs	r2, r3
 80025a0:	253f      	movs	r5, #63	; 0x3f
 80025a2:	197b      	adds	r3, r7, r5
 80025a4:	7818      	ldrb	r0, [r3, #0]
 80025a6:	197b      	adds	r3, r7, r5
 80025a8:	7819      	ldrb	r1, [r3, #0]
 80025aa:	4c33      	ldr	r4, [pc, #204]	; (8002678 <printASCIIarray+0x124>)
 80025ac:	0013      	movs	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	00da      	lsls	r2, r3, #3
 80025b4:	1ad2      	subs	r2, r2, r3
 80025b6:	18a3      	adds	r3, r4, r2
 80025b8:	5c1a      	ldrb	r2, [r3, r0]
 80025ba:	2308      	movs	r3, #8
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 80025c0:	197b      	adds	r3, r7, r5
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	197b      	adds	r3, r7, r5
 80025c6:	3201      	adds	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	233f      	movs	r3, #63	; 0x3f
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d9de      	bls.n	8002592 <printASCIIarray+0x3e>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 80025d4:	4b29      	ldr	r3, [pc, #164]	; (800267c <printASCIIarray+0x128>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	203e      	movs	r0, #62	; 0x3e
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	18d3      	adds	r3, r2, r3
 80025e0:	b2dc      	uxtb	r4, r3
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <printASCIIarray+0x12c>)
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	18d3      	adds	r3, r2, r3
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	1dbb      	adds	r3, r7, #6
 80025f0:	7819      	ldrb	r1, [r3, #0]
 80025f2:	0005      	movs	r5, r0
 80025f4:	183b      	adds	r3, r7, r0
 80025f6:	7818      	ldrb	r0, [r3, #0]
 80025f8:	2308      	movs	r3, #8
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	23ff      	movs	r3, #255	; 0xff
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	0013      	movs	r3, r2
 8002604:	0022      	movs	r2, r4
 8002606:	f7fe feb3 	bl	8001370 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <printASCIIarray+0x128>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	197b      	adds	r3, r7, r5
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	b2da      	uxtb	r2, r3
 8002616:	197b      	adds	r3, r7, r5
 8002618:	3201      	adds	r2, #1
 800261a:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 800261c:	213c      	movs	r1, #60	; 0x3c
 800261e:	187b      	adds	r3, r7, r1
 8002620:	881a      	ldrh	r2, [r3, #0]
 8002622:	187b      	adds	r3, r7, r1
 8002624:	3201      	adds	r2, #1
 8002626:	801a      	strh	r2, [r3, #0]
 8002628:	1d7b      	adds	r3, r7, #5
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	213c      	movs	r1, #60	; 0x3c
 8002630:	187a      	adds	r2, r7, r1
 8002632:	8812      	ldrh	r2, [r2, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d3a7      	bcc.n	8002588 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2200      	movs	r2, #0
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	e00b      	b.n	8002658 <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 8002640:	203c      	movs	r0, #60	; 0x3c
 8002642:	183b      	adds	r3, r7, r0
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	2208      	movs	r2, #8
 8002648:	18ba      	adds	r2, r7, r2
 800264a:	2100      	movs	r1, #0
 800264c:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 800264e:	183b      	adds	r3, r7, r0
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	183b      	adds	r3, r7, r0
 8002654:	3201      	adds	r2, #1
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	233c      	movs	r3, #60	; 0x3c
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	2b30      	cmp	r3, #48	; 0x30
 8002660:	d9ee      	bls.n	8002640 <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002662:	4b08      	ldr	r3, [pc, #32]	; (8002684 <printASCIIarray+0x130>)
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <printASCIIarray+0x130>)
 8002668:	2140      	movs	r1, #64	; 0x40
 800266a:	430a      	orrs	r2, r1
 800266c:	615a      	str	r2, [r3, #20]

		}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	0018      	movs	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	b010      	add	sp, #64	; 0x40
 8002676:	bdb0      	pop	{r4, r5, r7, pc}
 8002678:	20000000 	.word	0x20000000
 800267c:	20003130 	.word	0x20003130
 8002680:	20003131 	.word	0x20003131
 8002684:	50000800 	.word	0x50000800

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_MspInit+0x4c>)
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	430a      	orrs	r2, r1
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_MspInit+0x4c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	2201      	movs	r2, #1
 80026ac:	4013      	ands	r3, r2
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_MspInit+0x4c>)
 80026b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_MspInit+0x4c>)
 80026b8:	2180      	movs	r1, #128	; 0x80
 80026ba:	0549      	lsls	r1, r1, #21
 80026bc:	430a      	orrs	r2, r1
 80026be:	63da      	str	r2, [r3, #60]	; 0x3c
 80026c0:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <HAL_MspInit+0x4c>)
 80026c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	055b      	lsls	r3, r3, #21
 80026c8:	4013      	ands	r3, r2
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 fd04 	bl	80030e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000

080026e4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	240c      	movs	r4, #12
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	0018      	movs	r0, r3
 80026f2:	2314      	movs	r3, #20
 80026f4:	001a      	movs	r2, r3
 80026f6:	2100      	movs	r1, #0
 80026f8:	f008 f80a 	bl	800a710 <memset>
  if(hcomp->Instance==COMP1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a10      	ldr	r2, [pc, #64]	; (8002744 <HAL_COMP_MspInit+0x60>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11a      	bne.n	800273c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_COMP_MspInit+0x64>)
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_COMP_MspInit+0x64>)
 800270c:	2102      	movs	r1, #2
 800270e:	430a      	orrs	r2, r1
 8002710:	635a      	str	r2, [r3, #52]	; 0x34
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_COMP_MspInit+0x64>)
 8002714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800271e:	193b      	adds	r3, r7, r4
 8002720:	2204      	movs	r2, #4
 8002722:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002724:	193b      	adds	r3, r7, r4
 8002726:	2203      	movs	r2, #3
 8002728:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002730:	193b      	adds	r3, r7, r4
 8002732:	4a06      	ldr	r2, [pc, #24]	; (800274c <HAL_COMP_MspInit+0x68>)
 8002734:	0019      	movs	r1, r3
 8002736:	0010      	movs	r0, r2
 8002738:	f001 faee 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b009      	add	sp, #36	; 0x24
 8002742:	bd90      	pop	{r4, r7, pc}
 8002744:	40010200 	.word	0x40010200
 8002748:	40021000 	.word	0x40021000
 800274c:	50000400 	.word	0x50000400

08002750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b08b      	sub	sp, #44	; 0x2c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	2414      	movs	r4, #20
 800275a:	193b      	adds	r3, r7, r4
 800275c:	0018      	movs	r0, r3
 800275e:	2314      	movs	r3, #20
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f007 ffd4 	bl	800a710 <memset>
  if(hi2c->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <HAL_I2C_MspInit+0xa0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d139      	bne.n	80027e6 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_I2C_MspInit+0xa4>)
 8002774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_I2C_MspInit+0xa4>)
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	635a      	str	r2, [r3, #52]	; 0x34
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_I2C_MspInit+0xa4>)
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800278a:	193b      	adds	r3, r7, r4
 800278c:	22c0      	movs	r2, #192	; 0xc0
 800278e:	00d2      	lsls	r2, r2, #3
 8002790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002792:	0021      	movs	r1, r4
 8002794:	187b      	adds	r3, r7, r1
 8002796:	2212      	movs	r2, #18
 8002798:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800279a:	187b      	adds	r3, r7, r1
 800279c:	2201      	movs	r2, #1
 800279e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80027a6:	187b      	adds	r3, r7, r1
 80027a8:	2206      	movs	r2, #6
 80027aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ac:	187a      	adds	r2, r7, r1
 80027ae:	23a0      	movs	r3, #160	; 0xa0
 80027b0:	05db      	lsls	r3, r3, #23
 80027b2:	0011      	movs	r1, r2
 80027b4:	0018      	movs	r0, r3
 80027b6:	f001 faaf 	bl	8003d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_I2C_MspInit+0xa4>)
 80027bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_I2C_MspInit+0xa4>)
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0389      	lsls	r1, r1, #14
 80027c4:	430a      	orrs	r2, r1
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_I2C_MspInit+0xa4>)
 80027ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	039b      	lsls	r3, r3, #14
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2017      	movs	r0, #23
 80027dc:	f000 ffa2 	bl	8003724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80027e0:	2017      	movs	r0, #23
 80027e2:	f000 ffb4 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b00b      	add	sp, #44	; 0x2c
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	40005400 	.word	0x40005400
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b08b      	sub	sp, #44	; 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	2414      	movs	r4, #20
 8002802:	193b      	adds	r3, r7, r4
 8002804:	0018      	movs	r0, r3
 8002806:	2314      	movs	r3, #20
 8002808:	001a      	movs	r2, r3
 800280a:	2100      	movs	r1, #0
 800280c:	f007 ff80 	bl	800a710 <memset>
  if(hi2s->Instance==SPI1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_I2S_MspInit+0x13c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d000      	beq.n	800281c <HAL_I2S_MspInit+0x24>
 800281a:	e086      	b.n	800292a <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_I2S_MspInit+0x140>)
 800281e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002820:	4b45      	ldr	r3, [pc, #276]	; (8002938 <HAL_I2S_MspInit+0x140>)
 8002822:	2180      	movs	r1, #128	; 0x80
 8002824:	0149      	lsls	r1, r1, #5
 8002826:	430a      	orrs	r2, r1
 8002828:	641a      	str	r2, [r3, #64]	; 0x40
 800282a:	4b43      	ldr	r3, [pc, #268]	; (8002938 <HAL_I2S_MspInit+0x140>)
 800282c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	015b      	lsls	r3, r3, #5
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <HAL_I2S_MspInit+0x140>)
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_I2S_MspInit+0x140>)
 800283e:	2101      	movs	r1, #1
 8002840:	430a      	orrs	r2, r1
 8002842:	635a      	str	r2, [r3, #52]	; 0x34
 8002844:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_I2S_MspInit+0x140>)
 8002846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002848:	2201      	movs	r2, #1
 800284a:	4013      	ands	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <HAL_I2S_MspInit+0x140>)
 8002852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002854:	4b38      	ldr	r3, [pc, #224]	; (8002938 <HAL_I2S_MspInit+0x140>)
 8002856:	2102      	movs	r1, #2
 8002858:	430a      	orrs	r2, r1
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_I2S_MspInit+0x140>)
 800285e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002868:	193b      	adds	r3, r7, r4
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	0212      	lsls	r2, r2, #8
 800286e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002870:	193b      	adds	r3, r7, r4
 8002872:	2202      	movs	r2, #2
 8002874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	193b      	adds	r3, r7, r4
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002882:	193b      	adds	r3, r7, r4
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	193a      	adds	r2, r7, r4
 800288a:	23a0      	movs	r3, #160	; 0xa0
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f001 fa41 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002896:	0021      	movs	r1, r4
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2238      	movs	r2, #56	; 0x38
 800289c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2202      	movs	r2, #2
 80028a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b6:	187b      	adds	r3, r7, r1
 80028b8:	4a20      	ldr	r2, [pc, #128]	; (800293c <HAL_I2S_MspInit+0x144>)
 80028ba:	0019      	movs	r1, r3
 80028bc:	0010      	movs	r0, r2
 80028be:	f001 fa2b 	bl	8003d18 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_I2S_MspInit+0x14c>)
 80028c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028ca:	2211      	movs	r2, #17
 80028cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028d0:	2210      	movs	r2, #16
 80028d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028da:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028dc:	2280      	movs	r2, #128	; 0x80
 80028de:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028e0:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	0052      	lsls	r2, r2, #1
 80028e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	00d2      	lsls	r2, r2, #3
 80028ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_I2S_MspInit+0x148>)
 80028f8:	22c0      	movs	r2, #192	; 0xc0
 80028fa:	0192      	lsls	r2, r2, #6
 80028fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <HAL_I2S_MspInit+0x148>)
 8002900:	0018      	movs	r0, r3
 8002902:	f000 ff41 	bl	8003788 <HAL_DMA_Init>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d001      	beq.n	800290e <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 800290a:	f7ff febd 	bl	8002688 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <HAL_I2S_MspInit+0x148>)
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_I2S_MspInit+0x148>)
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	2019      	movs	r0, #25
 8002920:	f000 ff00 	bl	8003724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002924:	2019      	movs	r0, #25
 8002926:	f000 ff12 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b00b      	add	sp, #44	; 0x2c
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	40013000 	.word	0x40013000
 8002938:	40021000 	.word	0x40021000
 800293c:	50000400 	.word	0x50000400
 8002940:	2000357c 	.word	0x2000357c
 8002944:	40020008 	.word	0x40020008

08002948 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b08b      	sub	sp, #44	; 0x2c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	2414      	movs	r4, #20
 8002952:	193b      	adds	r3, r7, r4
 8002954:	0018      	movs	r0, r3
 8002956:	2314      	movs	r3, #20
 8002958:	001a      	movs	r2, r3
 800295a:	2100      	movs	r1, #0
 800295c:	f007 fed8 	bl	800a710 <memset>
  if(hspi->Instance==SPI2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_SPI_MspInit+0x170>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d000      	beq.n	800296c <HAL_SPI_MspInit+0x24>
 800296a:	e0a0      	b.n	8002aae <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800296c:	4b53      	ldr	r3, [pc, #332]	; (8002abc <HAL_SPI_MspInit+0x174>)
 800296e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002970:	4b52      	ldr	r3, [pc, #328]	; (8002abc <HAL_SPI_MspInit+0x174>)
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	01c9      	lsls	r1, r1, #7
 8002976:	430a      	orrs	r2, r1
 8002978:	63da      	str	r2, [r3, #60]	; 0x3c
 800297a:	4b50      	ldr	r3, [pc, #320]	; (8002abc <HAL_SPI_MspInit+0x174>)
 800297c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	01db      	lsls	r3, r3, #7
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002988:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <HAL_SPI_MspInit+0x174>)
 800298a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298c:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <HAL_SPI_MspInit+0x174>)
 800298e:	2102      	movs	r1, #2
 8002990:	430a      	orrs	r2, r1
 8002992:	635a      	str	r2, [r3, #52]	; 0x34
 8002994:	4b49      	ldr	r3, [pc, #292]	; (8002abc <HAL_SPI_MspInit+0x174>)
 8002996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80029a0:	193b      	adds	r3, r7, r4
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2202      	movs	r2, #2
 80029aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	193b      	adds	r3, r7, r4
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	2200      	movs	r2, #0
 80029b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	2204      	movs	r2, #4
 80029bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	4a3f      	ldr	r2, [pc, #252]	; (8002ac0 <HAL_SPI_MspInit+0x178>)
 80029c2:	0019      	movs	r1, r3
 80029c4:	0010      	movs	r0, r2
 80029c6:	f001 f9a7 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80029ca:	0021      	movs	r1, r4
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	22c0      	movs	r2, #192	; 0xc0
 80029d0:	0052      	lsls	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2202      	movs	r2, #2
 80029d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2201      	movs	r2, #1
 80029ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	4a34      	ldr	r2, [pc, #208]	; (8002ac0 <HAL_SPI_MspInit+0x178>)
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f001 f990 	bl	8003d18 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80029f8:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 80029fa:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <HAL_SPI_MspInit+0x180>)
 80029fc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a00:	2212      	movs	r2, #18
 8002a02:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a10:	4b2c      	ldr	r3, [pc, #176]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1c:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a28:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a2a:	2280      	movs	r2, #128	; 0x80
 8002a2c:	0192      	lsls	r2, r2, #6
 8002a2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a30:	4b24      	ldr	r3, [pc, #144]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fea8 	bl	8003788 <HAL_DMA_Init>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002a3c:	f7ff fe24 	bl	8002688 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a20      	ldr	r2, [pc, #128]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a44:	659a      	str	r2, [r3, #88]	; 0x58
 8002a46:	4b1f      	ldr	r3, [pc, #124]	; (8002ac4 <HAL_SPI_MspInit+0x17c>)
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_SPI_MspInit+0x188>)
 8002a50:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002a52:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a54:	2213      	movs	r2, #19
 8002a56:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a84:	0018      	movs	r0, r3
 8002a86:	f000 fe7f 	bl	8003788 <HAL_DMA_Init>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002a8e:	f7ff fdfb 	bl	8002688 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_SPI_MspInit+0x184>)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	201a      	movs	r0, #26
 8002aa4:	f000 fe3e 	bl	8003724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002aa8:	201a      	movs	r0, #26
 8002aaa:	f000 fe50 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b00b      	add	sp, #44	; 0x2c
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	40003800 	.word	0x40003800
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	50000400 	.word	0x50000400
 8002ac4:	20003290 	.word	0x20003290
 8002ac8:	4002001c 	.word	0x4002001c
 8002acc:	2000351c 	.word	0x2000351c
 8002ad0:	40020030 	.word	0x40020030

08002ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <HAL_TIM_Base_MspInit+0x38>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d10d      	bne.n	8002b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_TIM_Base_MspInit+0x3c>)
 8002ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_TIM_Base_MspInit+0x3c>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0109      	lsls	r1, r1, #4
 8002af0:	430a      	orrs	r2, r1
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_TIM_Base_MspInit+0x3c>)
 8002af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	240c      	movs	r4, #12
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	0018      	movs	r0, r3
 8002b22:	2314      	movs	r3, #20
 8002b24:	001a      	movs	r2, r3
 8002b26:	2100      	movs	r1, #0
 8002b28:	f007 fdf2 	bl	800a710 <memset>
  if(htim->Instance==TIM1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a15      	ldr	r2, [pc, #84]	; (8002b88 <HAL_TIM_MspPostInit+0x74>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d123      	bne.n	8002b7e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_TIM_MspPostInit+0x78>)
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_TIM_MspPostInit+0x78>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_TIM_MspPostInit+0x78>)
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2201      	movs	r2, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60bb      	str	r3, [r7, #8]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b4e:	193b      	adds	r3, r7, r4
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	0052      	lsls	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	0021      	movs	r1, r4
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	2202      	movs	r2, #2
 8002b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	2203      	movs	r2, #3
 8002b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b6a:	187b      	adds	r3, r7, r1
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	187a      	adds	r2, r7, r1
 8002b72:	23a0      	movs	r3, #160	; 0xa0
 8002b74:	05db      	lsls	r3, r3, #23
 8002b76:	0011      	movs	r1, r2
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f001 f8cd 	bl	8003d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	46bd      	mov	sp, r7
 8002b82:	b009      	add	sp, #36	; 0x24
 8002b84:	bd90      	pop	{r4, r7, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40012c00 	.word	0x40012c00
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b98:	2414      	movs	r4, #20
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	2314      	movs	r3, #20
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f007 fdb4 	bl	800a710 <memset>
  if(husart->Instance==USART3)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_USART_MspInit+0x134>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d000      	beq.n	8002bb4 <HAL_USART_MspInit+0x24>
 8002bb2:	e083      	b.n	8002cbc <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bb4:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	02c9      	lsls	r1, r1, #11
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bc2:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc6:	2380      	movs	r3, #128	; 0x80
 8002bc8:	02db      	lsls	r3, r3, #11
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd4:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bee:	2102      	movs	r1, #2
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <HAL_USART_MspInit+0x138>)
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2220      	movs	r2, #32
 8002c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	2202      	movs	r2, #2
 8002c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	193b      	adds	r3, r7, r4
 8002c14:	2203      	movs	r2, #3
 8002c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	193a      	adds	r2, r7, r4
 8002c20:	23a0      	movs	r3, #160	; 0xa0
 8002c22:	05db      	lsls	r3, r3, #23
 8002c24:	0011      	movs	r1, r2
 8002c26:	0018      	movs	r0, r3
 8002c28:	f001 f876 	bl	8003d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c2c:	0021      	movs	r1, r4
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	2203      	movs	r2, #3
 8002c32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	187b      	adds	r3, r7, r1
 8002c36:	2202      	movs	r2, #2
 8002c38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2203      	movs	r2, #3
 8002c44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	2204      	movs	r2, #4
 8002c4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_USART_MspInit+0x13c>)
 8002c50:	0019      	movs	r1, r3
 8002c52:	0010      	movs	r0, r2
 8002c54:	f001 f860 	bl	8003d18 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_USART_MspInit+0x144>)
 8002c5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c60:	2237      	movs	r2, #55	; 0x37
 8002c62:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c64:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c66:	2210      	movs	r2, #16
 8002c68:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c76:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c8a:	2280      	movs	r2, #128	; 0x80
 8002c8c:	0192      	lsls	r2, r2, #6
 8002c8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002c92:	0018      	movs	r0, r3
 8002c94:	f000 fd78 	bl	8003788 <HAL_DMA_Init>
 8002c98:	1e03      	subs	r3, r0, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002c9c:	f7ff fcf4 	bl	8002688 <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002ca4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_USART_MspInit+0x140>)
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	201d      	movs	r0, #29
 8002cb2:	f000 fd37 	bl	8003724 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002cb6:	201d      	movs	r0, #29
 8002cb8:	f000 fd49 	bl	800374e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b00b      	add	sp, #44	; 0x2c
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	40004800 	.word	0x40004800
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	50000400 	.word	0x50000400
 8002cd0:	200032f4 	.word	0x200032f4
 8002cd4:	40020044 	.word	0x40020044

08002cd8 <LL_USART_IsActiveFlag_FE>:
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d101      	bne.n	8002cf0 <LL_USART_IsActiveFlag_FE+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_USART_IsActiveFlag_FE+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <LL_USART_IsActiveFlag_NE>:
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d101      	bne.n	8002d12 <LL_USART_IsActiveFlag_NE+0x18>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_USART_IsActiveFlag_NE+0x1a>
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <LL_USART_IsActiveFlag_ORE>:
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d101      	bne.n	8002d34 <LL_USART_IsActiveFlag_ORE+0x18>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <LL_USART_IsActiveFlag_ORE+0x1a>
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d101      	bne.n	8002d56 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d101      	bne.n	8002d78 <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <HardFault_Handler+0x4>

08002d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002daa:	f000 f959 	bl	8003060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <DMA1_Channel1_IRQHandler+0x14>)
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 fe5e 	bl	8003a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	2000357c 	.word	0x2000357c

08002dcc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f000 fe52 	bl	8003a7c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002dd8:	4b04      	ldr	r3, [pc, #16]	; (8002dec <DMA1_Channel2_3_IRQHandler+0x20>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f000 fe4e 	bl	8003a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	20003290 	.word	0x20003290
 8002dec:	2000351c 	.word	0x2000351c

08002df0 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 fe40 	bl	8003a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	200032f4 	.word	0x200032f4

08002e08 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <I2C1_IRQHandler+0x2c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699a      	ldr	r2, [r3, #24]
 8002e12:	23e0      	movs	r3, #224	; 0xe0
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4013      	ands	r3, r2
 8002e18:	d004      	beq.n	8002e24 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <I2C1_IRQHandler+0x2c>)
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f001 f98f 	bl	8004140 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002e22:	e003      	b.n	8002e2c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <I2C1_IRQHandler+0x2c>)
 8002e26:	0018      	movs	r0, r3
 8002e28:	f001 f970 	bl	800410c <HAL_I2C_EV_IRQHandler>
}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	20003230 	.word	0x20003230

08002e38 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <SPI1_IRQHandler+0x14>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f002 f8f2 	bl	8005028 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	2000345c 	.word	0x2000345c

08002e50 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <SPI2_IRQHandler+0x14>)
 8002e56:	0018      	movs	r0, r3
 8002e58:	f004 fbfc 	bl	8007654 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	200031b0 	.word	0x200031b0

08002e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002e6c:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e72:	2108      	movs	r1, #8
 8002e74:	430a      	orrs	r2, r1
 8002e76:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002e78:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e7e:	2102      	movs	r1, #2
 8002e80:	430a      	orrs	r2, r1
 8002e82:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002e84:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002e90:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff ff53 	bl	8002d3e <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d009      	beq.n	8002eb0 <USART2_IRQHandler+0x48>
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7ff ff5e 	bl	8002d60 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d003      	beq.n	8002eb0 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002ea8:	f7fe f866 	bl	8000f78 <USART2_RX_Callback>
	  {
 8002eac:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002eae:	e025      	b.n	8002efc <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002eb6:	2108      	movs	r1, #8
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff ff2c 	bl	8002d1c <LL_USART_IsActiveFlag_ORE>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d008      	beq.n	8002eda <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002eca:	6a1a      	ldr	r2, [r3, #32]
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002ece:	2108      	movs	r1, #8
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ed8:	e010      	b.n	8002efc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7ff fefb 	bl	8002cd8 <LL_USART_IsActiveFlag_FE>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d002      	beq.n	8002eec <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002eea:	e007      	b.n	8002efc <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff ff03 	bl	8002cfa <LL_USART_IsActiveFlag_NE>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d001      	beq.n	8002efc <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <USART2_IRQHandler+0x9c>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	40004400 	.word	0x40004400

08002f08 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <USART3_4_LPUART1_IRQHandler+0x14>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f006 fa3c 	bl	800938c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	20003390 	.word	0x20003390

08002f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <SystemInit+0x14>)
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	0512      	lsls	r2, r2, #20
 8002f2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f3c:	f7ff fff0 	bl	8002f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f40:	480c      	ldr	r0, [pc, #48]	; (8002f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f42:	490d      	ldr	r1, [pc, #52]	; (8002f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <LoopForever+0xe>)
  movs r3, #0
 8002f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f48:	e002      	b.n	8002f50 <LoopCopyDataInit>

08002f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f4e:	3304      	adds	r3, #4

08002f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f54:	d3f9      	bcc.n	8002f4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f58:	4c0a      	ldr	r4, [pc, #40]	; (8002f84 <LoopForever+0x16>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f5c:	e001      	b.n	8002f62 <LoopFillZerobss>

08002f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f60:	3204      	adds	r2, #4

08002f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f64:	d3fb      	bcc.n	8002f5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f66:	f007 fbaf 	bl	800a6c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f6a:	f7fd fae1 	bl	8000530 <main>

08002f6e <LoopForever>:

LoopForever:
  b LoopForever
 8002f6e:	e7fe      	b.n	8002f6e <LoopForever>
  ldr   r0, =_estack
 8002f70:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f78:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8002f7c:	0800a828 	.word	0x0800a828
  ldr r2, =_sbss
 8002f80:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8002f84:	20005600 	.word	0x20005600

08002f88 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f88:	e7fe      	b.n	8002f88 <ADC1_COMP_IRQHandler>
	...

08002f8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_Init+0x3c>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_Init+0x3c>)
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	0049      	lsls	r1, r1, #1
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f000 f810 	bl	8002fcc <HAL_InitTick>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
 8002fb6:	e001      	b.n	8002fbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f7ff fb6c 	bl	8002694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	781b      	ldrb	r3, [r3, #0]
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40022000 	.word	0x40022000

08002fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fd4:	230f      	movs	r3, #15
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_InitTick+0x88>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02b      	beq.n	800303c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_InitTick+0x8c>)
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_InitTick+0x88>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	0019      	movs	r1, r3
 8002fee:	23fa      	movs	r3, #250	; 0xfa
 8002ff0:	0098      	lsls	r0, r3, #2
 8002ff2:	f7fd f887 	bl	8000104 <__udivsi3>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	0020      	movs	r0, r4
 8002ffc:	f7fd f882 	bl	8000104 <__udivsi3>
 8003000:	0003      	movs	r3, r0
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fbb3 	bl	800376e <HAL_SYSTICK_Config>
 8003008:	1e03      	subs	r3, r0, #0
 800300a:	d112      	bne.n	8003032 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d80a      	bhi.n	8003028 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	2301      	movs	r3, #1
 8003016:	425b      	negs	r3, r3
 8003018:	2200      	movs	r2, #0
 800301a:	0018      	movs	r0, r3
 800301c:	f000 fb82 	bl	8003724 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_InitTick+0x90>)
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e00d      	b.n	8003044 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003028:	230f      	movs	r3, #15
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e008      	b.n	8003044 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003032:	230f      	movs	r3, #15
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e003      	b.n	8003044 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800303c:	230f      	movs	r3, #15
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003044:	230f      	movs	r3, #15
 8003046:	18fb      	adds	r3, r7, r3
 8003048:	781b      	ldrb	r3, [r3, #0]
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b005      	add	sp, #20
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	2000313c 	.word	0x2000313c
 8003058:	20003134 	.word	0x20003134
 800305c:	20003138 	.word	0x20003138

08003060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_IncTick+0x1c>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	001a      	movs	r2, r3
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_IncTick+0x20>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	18d2      	adds	r2, r2, r3
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <HAL_IncTick+0x20>)
 8003072:	601a      	str	r2, [r3, #0]
}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	2000313c 	.word	0x2000313c
 8003080:	200055fc 	.word	0x200055fc

08003084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  return uwTick;
 8003088:	4b02      	ldr	r3, [pc, #8]	; (8003094 <HAL_GetTick+0x10>)
 800308a:	681b      	ldr	r3, [r3, #0]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	200055fc 	.word	0x200055fc

08003098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff fff0 	bl	8003084 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	d005      	beq.n	80030be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_Delay+0x44>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	001a      	movs	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	f7ff ffe0 	bl	8003084 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d8f7      	bhi.n	80030c0 <HAL_Delay+0x28>
  {
  }
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	2000313c 	.word	0x2000313c

080030e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a06      	ldr	r2, [pc, #24]	; (8003108 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	4b04      	ldr	r3, [pc, #16]	; (8003104 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b002      	add	sp, #8
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	40010000 	.word	0x40010000
 8003108:	fffff9ff 	.word	0xfffff9ff

0800310c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003114:	4a05      	ldr	r2, [pc, #20]	; (800312c <LL_EXTI_EnableIT_0_31+0x20>)
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	58d2      	ldr	r2, [r2, r3]
 800311a:	4904      	ldr	r1, [pc, #16]	; (800312c <LL_EXTI_EnableIT_0_31+0x20>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4313      	orrs	r3, r2
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	508b      	str	r3, [r1, r2]
}
 8003124:	46c0      	nop			; (mov r8, r8)
 8003126:	46bd      	mov	sp, r7
 8003128:	b002      	add	sp, #8
 800312a:	bd80      	pop	{r7, pc}
 800312c:	40021800 	.word	0x40021800

08003130 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <LL_EXTI_DisableIT_0_31+0x24>)
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	58d3      	ldr	r3, [r2, r3]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	43d2      	mvns	r2, r2
 8003142:	4904      	ldr	r1, [pc, #16]	; (8003154 <LL_EXTI_DisableIT_0_31+0x24>)
 8003144:	4013      	ands	r3, r2
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	508b      	str	r3, [r1, r2]
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	46bd      	mov	sp, r7
 800314e:	b002      	add	sp, #8
 8003150:	bd80      	pop	{r7, pc}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	40021800 	.word	0x40021800

08003158 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003162:	2384      	movs	r3, #132	; 0x84
 8003164:	58d2      	ldr	r2, [r2, r3]
 8003166:	4904      	ldr	r1, [pc, #16]	; (8003178 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4313      	orrs	r3, r2
 800316c:	2284      	movs	r2, #132	; 0x84
 800316e:	508b      	str	r3, [r1, r2]

}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021800 	.word	0x40021800

0800317c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003184:	4a06      	ldr	r2, [pc, #24]	; (80031a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003186:	2384      	movs	r3, #132	; 0x84
 8003188:	58d3      	ldr	r3, [r2, r3]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	43d2      	mvns	r2, r2
 800318e:	4904      	ldr	r1, [pc, #16]	; (80031a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003190:	4013      	ands	r3, r2
 8003192:	2284      	movs	r2, #132	; 0x84
 8003194:	508b      	str	r3, [r1, r2]
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	40021800 	.word	0x40021800

080031a4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80031ae:	6819      	ldr	r1, [r3, #0]
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

}
 80031b8:	46c0      	nop			; (mov r8, r8)
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b002      	add	sp, #8
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021800 	.word	0x40021800

080031c4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	43d9      	mvns	r1, r3
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80031d6:	400a      	ands	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]

}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	40021800 	.word	0x40021800

080031e8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}
 8003204:	40021800 	.word	0x40021800

08003208 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	43d9      	mvns	r1, r3
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800321a:	400a      	ands	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	40021800 	.word	0x40021800

0800322c <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	611a      	str	r2, [r3, #16]
}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	40021800 	.word	0x40021800

08003248 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	60da      	str	r2, [r3, #12]
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	46bd      	mov	sp, r7
 800325a:	b002      	add	sp, #8
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40021800 	.word	0x40021800

08003264 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	211f      	movs	r1, #31
 8003272:	187b      	adds	r3, r7, r1
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d103      	bne.n	8003286 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800327e:	187b      	adds	r3, r7, r1
 8003280:	2201      	movs	r2, #1
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e13d      	b.n	8003502 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0fdb      	lsrs	r3, r3, #31
 800328e:	07da      	lsls	r2, r3, #31
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	429a      	cmp	r2, r3
 8003296:	d104      	bne.n	80032a2 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e12f      	b.n	8003502 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2229      	movs	r2, #41	; 0x29
 80032a6:	5c9b      	ldrb	r3, [r3, r2]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2228      	movs	r2, #40	; 0x28
 80032b2:	2100      	movs	r1, #0
 80032b4:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff fa10 	bl	80026e4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2230      	movs	r2, #48	; 0x30
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a85      	ldr	r2, [pc, #532]	; (8003510 <HAL_COMP_Init+0x2ac>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	430a      	orrs	r2, r1
 8003308:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	429a      	cmp	r2, r3
 8003314:	d10d      	bne.n	8003332 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b7e      	ldr	r3, [pc, #504]	; (8003514 <HAL_COMP_Init+0x2b0>)
 800331c:	497e      	ldr	r1, [pc, #504]	; (8003518 <HAL_COMP_Init+0x2b4>)
 800331e:	400a      	ands	r2, r1
 8003320:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003322:	4b7c      	ldr	r3, [pc, #496]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4b7b      	ldr	r3, [pc, #492]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003328:	2180      	movs	r1, #128	; 0x80
 800332a:	0109      	lsls	r1, r1, #4
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	e01f      	b.n	8003372 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	23c0      	movs	r3, #192	; 0xc0
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	429a      	cmp	r2, r3
 800333c:	d10d      	bne.n	800335a <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800333e:	4b75      	ldr	r3, [pc, #468]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b74      	ldr	r3, [pc, #464]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0109      	lsls	r1, r1, #4
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800334c:	4b71      	ldr	r3, [pc, #452]	; (8003514 <HAL_COMP_Init+0x2b0>)
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003352:	4971      	ldr	r1, [pc, #452]	; (8003518 <HAL_COMP_Init+0x2b4>)
 8003354:	400a      	ands	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	e00b      	b.n	8003372 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800335a:	4b6e      	ldr	r3, [pc, #440]	; (8003514 <HAL_COMP_Init+0x2b0>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003360:	496d      	ldr	r1, [pc, #436]	; (8003518 <HAL_COMP_Init+0x2b4>)
 8003362:	400a      	ands	r2, r1
 8003364:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003366:	4b6b      	ldr	r3, [pc, #428]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	4b6a      	ldr	r3, [pc, #424]	; (8003514 <HAL_COMP_Init+0x2b0>)
 800336c:	496a      	ldr	r1, [pc, #424]	; (8003518 <HAL_COMP_Init+0x2b4>)
 800336e:	400a      	ands	r2, r1
 8003370:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	22a0      	movs	r2, #160	; 0xa0
 8003378:	01d2      	lsls	r2, r2, #7
 800337a:	4293      	cmp	r3, r2
 800337c:	d017      	beq.n	80033ae <HAL_COMP_Init+0x14a>
 800337e:	22a0      	movs	r2, #160	; 0xa0
 8003380:	01d2      	lsls	r2, r2, #7
 8003382:	4293      	cmp	r3, r2
 8003384:	d830      	bhi.n	80033e8 <HAL_COMP_Init+0x184>
 8003386:	2b01      	cmp	r3, #1
 8003388:	d01f      	beq.n	80033ca <HAL_COMP_Init+0x166>
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	01d2      	lsls	r2, r2, #7
 800338e:	4293      	cmp	r3, r2
 8003390:	d12a      	bne.n	80033e8 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003392:	4b60      	ldr	r3, [pc, #384]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	01c9      	lsls	r1, r1, #7
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033a0:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033a6:	495d      	ldr	r1, [pc, #372]	; (800351c <HAL_COMP_Init+0x2b8>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
        break;
 80033ac:	e029      	b.n	8003402 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033ae:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033b4:	4959      	ldr	r1, [pc, #356]	; (800351c <HAL_COMP_Init+0x2b8>)
 80033b6:	400a      	ands	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033ba:	4b56      	ldr	r3, [pc, #344]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	01c9      	lsls	r1, r1, #7
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
        break;
 80033c8:	e01b      	b.n	8003402 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033ca:	4b52      	ldr	r3, [pc, #328]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	01c9      	lsls	r1, r1, #7
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033d8:	4b4e      	ldr	r3, [pc, #312]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	01c9      	lsls	r1, r1, #7
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
        break;
 80033e6:	e00c      	b.n	8003402 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033e8:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033ee:	494b      	ldr	r1, [pc, #300]	; (800351c <HAL_COMP_Init+0x2b8>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033f4:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_COMP_Init+0x2b0>)
 80033fa:	4948      	ldr	r1, [pc, #288]	; (800351c <HAL_COMP_Init+0x2b8>)
 80033fc:	400a      	ands	r2, r1
 80033fe:	605a      	str	r2, [r3, #4]
        break;
 8003400:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2230      	movs	r2, #48	; 0x30
 800340a:	4013      	ands	r3, r2
 800340c:	d016      	beq.n	800343c <HAL_COMP_Init+0x1d8>
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d113      	bne.n	800343c <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <HAL_COMP_Init+0x2bc>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4942      	ldr	r1, [pc, #264]	; (8003524 <HAL_COMP_Init+0x2c0>)
 800341a:	0018      	movs	r0, r3
 800341c:	f7fc fe72 	bl	8000104 <__udivsi3>
 8003420:	0003      	movs	r3, r0
 8003422:	001a      	movs	r2, r3
 8003424:	0013      	movs	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	189b      	adds	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800342e:	e002      	b.n	8003436 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f9      	bne.n	8003430 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a34      	ldr	r2, [pc, #208]	; (8003514 <HAL_COMP_Init+0x2b0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d102      	bne.n	800344c <HAL_COMP_Init+0x1e8>
 8003446:	2380      	movs	r3, #128	; 0x80
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	e001      	b.n	8003450 <HAL_COMP_Init+0x1ec>
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	02db      	lsls	r3, r3, #11
 8003450:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2203      	movs	r2, #3
 8003458:	4013      	ands	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2210      	movs	r2, #16
 8003462:	4013      	ands	r3, r2
 8003464:	d004      	beq.n	8003470 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff fe9b 	bl	80031a4 <LL_EXTI_EnableRisingTrig_0_31>
 800346e:	e003      	b.n	8003478 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fea6 	bl	80031c4 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2220      	movs	r2, #32
 800347e:	4013      	ands	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff feaf 	bl	80031e8 <LL_EXTI_EnableFallingTrig_0_31>
 800348a:	e003      	b.n	8003494 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff feba 	bl	8003208 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	0018      	movs	r0, r3
 8003498:	f7ff fed6 	bl	8003248 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	0018      	movs	r0, r3
 80034a0:	f7ff fec4 	bl	800322c <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	2202      	movs	r2, #2
 80034aa:	4013      	ands	r3, r2
 80034ac:	d004      	beq.n	80034b8 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff fe51 	bl	8003158 <LL_EXTI_EnableEvent_0_31>
 80034b6:	e003      	b.n	80034c0 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff fe5e 	bl	800317c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2201      	movs	r2, #1
 80034c6:	4013      	ands	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fe1d 	bl	800310c <LL_EXTI_EnableIT_0_31>
 80034d2:	e00c      	b.n	80034ee <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	0018      	movs	r0, r3
 80034d8:	f7ff fe2a 	bl	8003130 <LL_EXTI_DisableIT_0_31>
 80034dc:	e007      	b.n	80034ee <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7ff fe4b 	bl	800317c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff fe21 	bl	8003130 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2229      	movs	r2, #41	; 0x29
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d103      	bne.n	8003502 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2229      	movs	r2, #41	; 0x29
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003502:	231f      	movs	r3, #31
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	781b      	ldrb	r3, [r3, #0]
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b008      	add	sp, #32
 800350e:	bd80      	pop	{r7, pc}
 8003510:	fe00740f 	.word	0xfe00740f
 8003514:	40010200 	.word	0x40010200
 8003518:	fffff7ff 	.word	0xfffff7ff
 800351c:	ffffbfff 	.word	0xffffbfff
 8003520:	20003134 	.word	0x20003134
 8003524:	00030d40 	.word	0x00030d40

08003528 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003530:	2300      	movs	r3, #0
 8003532:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	210f      	movs	r1, #15
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	e034      	b.n	80035b4 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	0fdb      	lsrs	r3, r3, #31
 8003552:	07da      	lsls	r2, r3, #31
 8003554:	2380      	movs	r3, #128	; 0x80
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	429a      	cmp	r2, r3
 800355a:	d104      	bne.n	8003566 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 800355c:	230f      	movs	r3, #15
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	2201      	movs	r2, #1
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	e026      	b.n	80035b4 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2229      	movs	r2, #41	; 0x29
 800356a:	5c9b      	ldrb	r3, [r3, r2]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d11c      	bne.n	80035ac <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2229      	movs	r2, #41	; 0x29
 8003586:	2102      	movs	r1, #2
 8003588:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_COMP_Start+0x9c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	490e      	ldr	r1, [pc, #56]	; (80035c8 <HAL_COMP_Start+0xa0>)
 8003590:	0018      	movs	r0, r3
 8003592:	f7fc fdb7 	bl	8000104 <__udivsi3>
 8003596:	0003      	movs	r3, r0
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800359c:	e002      	b.n	80035a4 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f9      	bne.n	800359e <HAL_COMP_Start+0x76>
 80035aa:	e003      	b.n	80035b4 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80035ac:	230f      	movs	r3, #15
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80035b4:	230f      	movs	r3, #15
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	781b      	ldrb	r3, [r3, #0]
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	20003134 	.word	0x20003134
 80035c8:	00030d40 	.word	0x00030d40

080035cc <__NVIC_EnableIRQ>:
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	0002      	movs	r2, r0
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	1dfb      	adds	r3, r7, #7
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b7f      	cmp	r3, #127	; 0x7f
 80035de:	d809      	bhi.n	80035f4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	001a      	movs	r2, r3
 80035e6:	231f      	movs	r3, #31
 80035e8:	401a      	ands	r2, r3
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <__NVIC_EnableIRQ+0x30>)
 80035ec:	2101      	movs	r1, #1
 80035ee:	4091      	lsls	r1, r2
 80035f0:	000a      	movs	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	0002      	movs	r2, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	1dfb      	adds	r3, r7, #7
 800360c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b7f      	cmp	r3, #127	; 0x7f
 8003614:	d828      	bhi.n	8003668 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003616:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <__NVIC_SetPriority+0xd4>)
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	b25b      	sxtb	r3, r3
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	33c0      	adds	r3, #192	; 0xc0
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	589b      	ldr	r3, [r3, r2]
 8003626:	1dfa      	adds	r2, r7, #7
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	0011      	movs	r1, r2
 800362c:	2203      	movs	r2, #3
 800362e:	400a      	ands	r2, r1
 8003630:	00d2      	lsls	r2, r2, #3
 8003632:	21ff      	movs	r1, #255	; 0xff
 8003634:	4091      	lsls	r1, r2
 8003636:	000a      	movs	r2, r1
 8003638:	43d2      	mvns	r2, r2
 800363a:	401a      	ands	r2, r3
 800363c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	019b      	lsls	r3, r3, #6
 8003642:	22ff      	movs	r2, #255	; 0xff
 8003644:	401a      	ands	r2, r3
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	0018      	movs	r0, r3
 800364c:	2303      	movs	r3, #3
 800364e:	4003      	ands	r3, r0
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003654:	481f      	ldr	r0, [pc, #124]	; (80036d4 <__NVIC_SetPriority+0xd4>)
 8003656:	1dfb      	adds	r3, r7, #7
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	089b      	lsrs	r3, r3, #2
 800365e:	430a      	orrs	r2, r1
 8003660:	33c0      	adds	r3, #192	; 0xc0
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	501a      	str	r2, [r3, r0]
}
 8003666:	e031      	b.n	80036cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003668:	4a1b      	ldr	r2, [pc, #108]	; (80036d8 <__NVIC_SetPriority+0xd8>)
 800366a:	1dfb      	adds	r3, r7, #7
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	0019      	movs	r1, r3
 8003670:	230f      	movs	r3, #15
 8003672:	400b      	ands	r3, r1
 8003674:	3b08      	subs	r3, #8
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3306      	adds	r3, #6
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	3304      	adds	r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1dfa      	adds	r2, r7, #7
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	0011      	movs	r1, r2
 8003688:	2203      	movs	r2, #3
 800368a:	400a      	ands	r2, r1
 800368c:	00d2      	lsls	r2, r2, #3
 800368e:	21ff      	movs	r1, #255	; 0xff
 8003690:	4091      	lsls	r1, r2
 8003692:	000a      	movs	r2, r1
 8003694:	43d2      	mvns	r2, r2
 8003696:	401a      	ands	r2, r3
 8003698:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	019b      	lsls	r3, r3, #6
 800369e:	22ff      	movs	r2, #255	; 0xff
 80036a0:	401a      	ands	r2, r3
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	0018      	movs	r0, r3
 80036a8:	2303      	movs	r3, #3
 80036aa:	4003      	ands	r3, r0
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036b0:	4809      	ldr	r0, [pc, #36]	; (80036d8 <__NVIC_SetPriority+0xd8>)
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	001c      	movs	r4, r3
 80036b8:	230f      	movs	r3, #15
 80036ba:	4023      	ands	r3, r4
 80036bc:	3b08      	subs	r3, #8
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	430a      	orrs	r2, r1
 80036c2:	3306      	adds	r3, #6
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	18c3      	adds	r3, r0, r3
 80036c8:	3304      	adds	r3, #4
 80036ca:	601a      	str	r2, [r3, #0]
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b003      	add	sp, #12
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	e000e100 	.word	0xe000e100
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1e5a      	subs	r2, r3, #1
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	045b      	lsls	r3, r3, #17
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d301      	bcc.n	80036f4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f0:	2301      	movs	r3, #1
 80036f2:	e010      	b.n	8003716 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f4:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <SysTick_Config+0x44>)
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	3a01      	subs	r2, #1
 80036fa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fc:	2301      	movs	r3, #1
 80036fe:	425b      	negs	r3, r3
 8003700:	2103      	movs	r1, #3
 8003702:	0018      	movs	r0, r3
 8003704:	f7ff ff7c 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <SysTick_Config+0x44>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <SysTick_Config+0x44>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003714:	2300      	movs	r3, #0
}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b002      	add	sp, #8
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	e000e010 	.word	0xe000e010

08003724 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
 800372e:	210f      	movs	r1, #15
 8003730:	187b      	adds	r3, r7, r1
 8003732:	1c02      	adds	r2, r0, #0
 8003734:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	187b      	adds	r3, r7, r1
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	b25b      	sxtb	r3, r3
 800373e:	0011      	movs	r1, r2
 8003740:	0018      	movs	r0, r3
 8003742:	f7ff ff5d 	bl	8003600 <__NVIC_SetPriority>
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	b004      	add	sp, #16
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	0002      	movs	r2, r0
 8003756:	1dfb      	adds	r3, r7, #7
 8003758:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b25b      	sxtb	r3, r3
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff ff33 	bl	80035cc <__NVIC_EnableIRQ>
}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b002      	add	sp, #8
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0018      	movs	r0, r3
 800377a:	f7ff ffaf 	bl	80036dc <SysTick_Config>
 800377e:	0003      	movs	r3, r0
}
 8003780:	0018      	movs	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e077      	b.n	800388a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a3d      	ldr	r2, [pc, #244]	; (8003894 <HAL_DMA_Init+0x10c>)
 80037a0:	4694      	mov	ip, r2
 80037a2:	4463      	add	r3, ip
 80037a4:	2114      	movs	r1, #20
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fc fcac 	bl	8000104 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	009a      	lsls	r2, r3, #2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2225      	movs	r2, #37	; 0x25
 80037b8:	2102      	movs	r1, #2
 80037ba:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4934      	ldr	r1, [pc, #208]	; (8003898 <HAL_DMA_Init+0x110>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fa37 	bl	8003c78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	01db      	lsls	r3, r3, #7
 8003812:	429a      	cmp	r2, r3
 8003814:	d102      	bne.n	800381c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003824:	213f      	movs	r1, #63	; 0x3f
 8003826:	400a      	ands	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003832:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d011      	beq.n	8003860 <HAL_DMA_Init+0xd8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d80d      	bhi.n	8003860 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f000 fa42 	bl	8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	e008      	b.n	8003872 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2225      	movs	r2, #37	; 0x25
 800387c:	2101      	movs	r1, #1
 800387e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b002      	add	sp, #8
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	bffdfff8 	.word	0xbffdfff8
 8003898:	ffff800f 	.word	0xffff800f

0800389c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2317      	movs	r3, #23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2224      	movs	r2, #36	; 0x24
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_DMA_Start_IT+0x24>
 80038bc:	2302      	movs	r3, #2
 80038be:	e06f      	b.n	80039a0 <HAL_DMA_Start_IT+0x104>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2225      	movs	r2, #37	; 0x25
 80038cc:	5c9b      	ldrb	r3, [r3, r2]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d157      	bne.n	8003984 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2225      	movs	r2, #37	; 0x25
 80038d8:	2102      	movs	r1, #2
 80038da:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	438a      	bics	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 f97d 	bl	8003bf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	210e      	movs	r1, #14
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e00f      	b.n	8003938 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2104      	movs	r1, #4
 8003924:	438a      	bics	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	210a      	movs	r1, #10
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	2380      	movs	r3, #128	; 0x80
 8003940:	025b      	lsls	r3, r3, #9
 8003942:	4013      	ands	r3, r2
 8003944:	d008      	beq.n	8003958 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0049      	lsls	r1, r1, #1
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	2180      	movs	r1, #128	; 0x80
 800396c:	0049      	lsls	r1, r1, #1
 800396e:	430a      	orrs	r2, r1
 8003970:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2101      	movs	r1, #1
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e00a      	b.n	800399a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2224      	movs	r2, #36	; 0x24
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003992:	2317      	movs	r3, #23
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800399a:	2317      	movs	r3, #23
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	781b      	ldrb	r3, [r3, #0]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b006      	add	sp, #24
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b0:	210f      	movs	r1, #15
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2225      	movs	r2, #37	; 0x25
 80039bc:	5c9b      	ldrb	r3, [r3, r2]
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d006      	beq.n	80039d2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2204      	movs	r2, #4
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e049      	b.n	8003a66 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	210e      	movs	r1, #14
 80039de:	438a      	bics	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	438a      	bics	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	491d      	ldr	r1, [pc, #116]	; (8003a74 <HAL_DMA_Abort_IT+0xcc>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_DMA_Abort_IT+0xd0>)
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	221c      	movs	r2, #28
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2201      	movs	r2, #1
 8003a10:	409a      	lsls	r2, r3
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_DMA_Abort_IT+0xd0>)
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a20:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	490f      	ldr	r1, [pc, #60]	; (8003a74 <HAL_DMA_Abort_IT+0xcc>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a42:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2225      	movs	r2, #37	; 0x25
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	2100      	movs	r1, #0
 8003a52:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	0010      	movs	r0, r2
 8003a64:	4798      	blx	r3
    }
  }
  return status;
 8003a66:	230f      	movs	r3, #15
 8003a68:	18fb      	adds	r3, r7, r3
 8003a6a:	781b      	ldrb	r3, [r3, #0]
}
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b004      	add	sp, #16
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	fffffeff 	.word	0xfffffeff
 8003a78:	40020000 	.word	0x40020000

08003a7c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	221c      	movs	r2, #28
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2204      	movs	r2, #4
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	0013      	movs	r3, r2
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x7a>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d023      	beq.n	8003af6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d107      	bne.n	8003aca <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	438a      	bics	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	221c      	movs	r2, #28
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	4b40      	ldr	r3, [pc, #256]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d100      	bne.n	8003aea <HAL_DMA_IRQHandler+0x6e>
 8003ae8:	e073      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	0010      	movs	r0, r2
 8003af2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003af4:	e06d      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	221c      	movs	r2, #28
 8003afc:	4013      	ands	r3, r2
 8003afe:	2202      	movs	r2, #2
 8003b00:	409a      	lsls	r2, r3
 8003b02:	0013      	movs	r3, r2
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4013      	ands	r3, r2
 8003b08:	d02e      	beq.n	8003b68 <HAL_DMA_IRQHandler+0xec>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d02a      	beq.n	8003b68 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d10b      	bne.n	8003b36 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	210a      	movs	r1, #10
 8003b2a:	438a      	bics	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2225      	movs	r2, #37	; 0x25
 8003b32:	2101      	movs	r1, #1
 8003b34:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b36:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	221c      	movs	r2, #28
 8003b40:	4013      	ands	r3, r2
 8003b42:	2202      	movs	r2, #2
 8003b44:	409a      	lsls	r2, r3
 8003b46:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	; 0x24
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03a      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	0010      	movs	r0, r2
 8003b64:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b66:	e034      	b.n	8003bd2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	221c      	movs	r2, #28
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2208      	movs	r2, #8
 8003b72:	409a      	lsls	r2, r3
 8003b74:	0013      	movs	r3, r2
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d02b      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x158>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2208      	movs	r2, #8
 8003b80:	4013      	ands	r3, r2
 8003b82:	d027      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	210e      	movs	r1, #14
 8003b90:	438a      	bics	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	221c      	movs	r2, #28
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <HAL_DMA_IRQHandler+0x160>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2225      	movs	r2, #37	; 0x25
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2224      	movs	r2, #36	; 0x24
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	0010      	movs	r0, r2
 8003bd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	46c0      	nop			; (mov r8, r8)
}
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40020000 	.word	0x40020000

08003be0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2225      	movs	r2, #37	; 0x25
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	b2db      	uxtb	r3, r3
}
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d004      	beq.n	8003c22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c20:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c22:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <DMA_SetConfig+0x7c>)
 8003c24:	6859      	ldr	r1, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	221c      	movs	r2, #28
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <DMA_SetConfig+0x7c>)
 8003c34:	430a      	orrs	r2, r1
 8003c36:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d108      	bne.n	8003c5a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c58:	e007      	b.n	8003c6a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	40020000 	.word	0x40020000

08003c78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c84:	089b      	lsrs	r3, r3, #2
 8003c86:	4a10      	ldr	r2, [pc, #64]	; (8003cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003c88:	4694      	mov	ip, r2
 8003c8a:	4463      	add	r3, ip
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	001a      	movs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	001a      	movs	r2, r3
 8003c9a:	23ff      	movs	r3, #255	; 0xff
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	3b08      	subs	r3, #8
 8003ca0:	2114      	movs	r1, #20
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7fc fa2e 	bl	8000104 <__udivsi3>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003cb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	221f      	movs	r2, #31
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2201      	movs	r2, #1
 8003cba:	409a      	lsls	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b004      	add	sp, #16
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	10008200 	.word	0x10008200
 8003ccc:	40020880 	.word	0x40020880

08003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	223f      	movs	r2, #63	; 0x3f
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003ce6:	4694      	mov	ip, r2
 8003ce8:	4463      	add	r3, ip
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	001a      	movs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2201      	movs	r2, #1
 8003d02:	409a      	lsls	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b004      	add	sp, #16
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	1000823f 	.word	0x1000823f
 8003d14:	40020940 	.word	0x40020940

08003d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d26:	e147      	b.n	8003fb8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4091      	lsls	r1, r2
 8003d32:	000a      	movs	r2, r1
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d100      	bne.n	8003d40 <HAL_GPIO_Init+0x28>
 8003d3e:	e138      	b.n	8003fb2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d00b      	beq.n	8003d60 <HAL_GPIO_Init+0x48>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d007      	beq.n	8003d60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d54:	2b11      	cmp	r3, #17
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b12      	cmp	r3, #18
 8003d5e:	d130      	bne.n	8003dc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	0013      	movs	r3, r2
 8003d70:	43da      	mvns	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	409a      	lsls	r2, r3
 8003d82:	0013      	movs	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d96:	2201      	movs	r2, #1
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	2201      	movs	r2, #1
 8003dae:	401a      	ands	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	409a      	lsls	r2, r3
 8003db4:	0013      	movs	r3, r2
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	2203      	movs	r2, #3
 8003dce:	409a      	lsls	r2, r3
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	409a      	lsls	r2, r3
 8003de4:	0013      	movs	r3, r2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_Init+0xea>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b12      	cmp	r3, #18
 8003e00:	d123      	bne.n	8003e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	08da      	lsrs	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3208      	adds	r2, #8
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	58d3      	ldr	r3, [r2, r3]
 8003e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2207      	movs	r2, #7
 8003e14:	4013      	ands	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	220f      	movs	r2, #15
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4013      	ands	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2107      	movs	r1, #7
 8003e2e:	400b      	ands	r3, r1
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	409a      	lsls	r2, r3
 8003e34:	0013      	movs	r3, r2
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	08da      	lsrs	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3208      	adds	r2, #8
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	6939      	ldr	r1, [r7, #16]
 8003e48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	409a      	lsls	r2, r3
 8003e58:	0013      	movs	r3, r2
 8003e5a:	43da      	mvns	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2203      	movs	r2, #3
 8003e68:	401a      	ands	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	0013      	movs	r3, r2
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	055b      	lsls	r3, r3, #21
 8003e86:	4013      	ands	r3, r2
 8003e88:	d100      	bne.n	8003e8c <HAL_GPIO_Init+0x174>
 8003e8a:	e092      	b.n	8003fb2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e8c:	4a50      	ldr	r2, [pc, #320]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3318      	adds	r3, #24
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	589b      	ldr	r3, [r3, r2]
 8003e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	220f      	movs	r2, #15
 8003ea4:	409a      	lsls	r2, r3
 8003ea6:	0013      	movs	r3, r2
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	23a0      	movs	r3, #160	; 0xa0
 8003eb4:	05db      	lsls	r3, r3, #23
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d013      	beq.n	8003ee2 <HAL_GPIO_Init+0x1ca>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a45      	ldr	r2, [pc, #276]	; (8003fd4 <HAL_GPIO_Init+0x2bc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00d      	beq.n	8003ede <HAL_GPIO_Init+0x1c6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a44      	ldr	r2, [pc, #272]	; (8003fd8 <HAL_GPIO_Init+0x2c0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d007      	beq.n	8003eda <HAL_GPIO_Init+0x1c2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a43      	ldr	r2, [pc, #268]	; (8003fdc <HAL_GPIO_Init+0x2c4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d101      	bne.n	8003ed6 <HAL_GPIO_Init+0x1be>
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_Init+0x1cc>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_Init+0x1cc>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_Init+0x1cc>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x1cc>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	400a      	ands	r2, r1
 8003eea:	00d2      	lsls	r2, r2, #3
 8003eec:	4093      	lsls	r3, r2
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ef4:	4936      	ldr	r1, [pc, #216]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3318      	adds	r3, #24
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f02:	4a33      	ldr	r2, [pc, #204]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	58d3      	ldr	r3, [r2, r3]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	025b      	lsls	r3, r3, #9
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003f28:	4929      	ldr	r1, [pc, #164]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f2a:	2280      	movs	r2, #128	; 0x80
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003f30:	4a27      	ldr	r2, [pc, #156]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f32:	2384      	movs	r3, #132	; 0x84
 8003f34:	58d3      	ldr	r3, [r2, r3]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f56:	491e      	ldr	r1, [pc, #120]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f58:	2284      	movs	r2, #132	; 0x84
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	43da      	mvns	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	035b      	lsls	r3, r3, #13
 8003f76:	4013      	ands	r3, r2
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f82:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	039b      	lsls	r3, r3, #14
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <HAL_GPIO_Init+0x2b8>)
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	40da      	lsrs	r2, r3
 8003fc0:	1e13      	subs	r3, r2, #0
 8003fc2:	d000      	beq.n	8003fc6 <HAL_GPIO_Init+0x2ae>
 8003fc4:	e6b0      	b.n	8003d28 <HAL_GPIO_Init+0x10>
  }
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b006      	add	sp, #24
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021800 	.word	0x40021800
 8003fd4:	50000400 	.word	0x50000400
 8003fd8:	50000800 	.word	0x50000800
 8003fdc:	50000c00 	.word	0x50000c00

08003fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e082      	b.n	80040f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2241      	movs	r2, #65	; 0x41
 8003ff6:	5c9b      	ldrb	r3, [r3, r2]
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2240      	movs	r2, #64	; 0x40
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0018      	movs	r0, r3
 800400a:	f7fe fba1 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2241      	movs	r2, #65	; 0x41
 8004012:	2124      	movs	r1, #36	; 0x24
 8004014:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2101      	movs	r1, #1
 8004022:	438a      	bics	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4934      	ldr	r1, [pc, #208]	; (8004100 <HAL_I2C_Init+0x120>)
 8004030:	400a      	ands	r2, r1
 8004032:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4931      	ldr	r1, [pc, #196]	; (8004104 <HAL_I2C_Init+0x124>)
 8004040:	400a      	ands	r2, r1
 8004042:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d108      	bne.n	800405e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	0209      	lsls	r1, r1, #8
 8004058:	430a      	orrs	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	e007      	b.n	800406e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2184      	movs	r1, #132	; 0x84
 8004068:	0209      	lsls	r1, r1, #8
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d104      	bne.n	8004080 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	0112      	lsls	r2, r2, #4
 800407e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	491f      	ldr	r1, [pc, #124]	; (8004108 <HAL_I2C_Init+0x128>)
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	491a      	ldr	r1, [pc, #104]	; (8004104 <HAL_I2C_Init+0x124>)
 800409c:	400a      	ands	r2, r1
 800409e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	0011      	movs	r1, r2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69d9      	ldr	r1, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	430a      	orrs	r2, r1
 80040d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2241      	movs	r2, #65	; 0x41
 80040e4:	2120      	movs	r1, #32
 80040e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2242      	movs	r2, #66	; 0x42
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b002      	add	sp, #8
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	f0ffffff 	.word	0xf0ffffff
 8004104:	ffff7fff 	.word	0xffff7fff
 8004108:	02008000 	.word	0x02008000

0800410c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
  }
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	0a1b      	lsrs	r3, r3, #8
 800415c:	001a      	movs	r2, r3
 800415e:	2301      	movs	r3, #1
 8004160:	4013      	ands	r3, r2
 8004162:	d010      	beq.n	8004186 <HAL_I2C_ER_IRQHandler+0x46>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	09db      	lsrs	r3, r3, #7
 8004168:	001a      	movs	r2, r3
 800416a:	2301      	movs	r3, #1
 800416c:	4013      	ands	r3, r2
 800416e:	d00a      	beq.n	8004186 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	2201      	movs	r2, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	0052      	lsls	r2, r2, #1
 8004184:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a9b      	lsrs	r3, r3, #10
 800418a:	001a      	movs	r2, r3
 800418c:	2301      	movs	r3, #1
 800418e:	4013      	ands	r3, r2
 8004190:	d010      	beq.n	80041b4 <HAL_I2C_ER_IRQHandler+0x74>
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	001a      	movs	r2, r3
 8004198:	2301      	movs	r3, #1
 800419a:	4013      	ands	r3, r2
 800419c:	d00a      	beq.n	80041b4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	2208      	movs	r2, #8
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	00d2      	lsls	r2, r2, #3
 80041b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	0a5b      	lsrs	r3, r3, #9
 80041b8:	001a      	movs	r2, r3
 80041ba:	2301      	movs	r3, #1
 80041bc:	4013      	ands	r3, r2
 80041be:	d010      	beq.n	80041e2 <HAL_I2C_ER_IRQHandler+0xa2>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	09db      	lsrs	r3, r3, #7
 80041c4:	001a      	movs	r2, r3
 80041c6:	2301      	movs	r3, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00a      	beq.n	80041e2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	2202      	movs	r2, #2
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2280      	movs	r2, #128	; 0x80
 80041de:	0092      	lsls	r2, r2, #2
 80041e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	220b      	movs	r2, #11
 80041ec:	4013      	ands	r3, r2
 80041ee:	d005      	beq.n	80041fc <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0011      	movs	r1, r2
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 fbd8 	bl	80049ac <I2C_ITError>
  }
}
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800420c:	46c0      	nop			; (mov r8, r8)
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800421c:	46c0      	nop			; (mov r8, r8)
 800421e:	46bd      	mov	sp, r7
 8004220:	b002      	add	sp, #8
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	0008      	movs	r0, r1
 800422e:	0011      	movs	r1, r2
 8004230:	1cfb      	adds	r3, r7, #3
 8004232:	1c02      	adds	r2, r0, #0
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	003b      	movs	r3, r7
 8004238:	1c0a      	adds	r2, r1, #0
 800423a:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b002      	add	sp, #8
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800425c:	46c0      	nop			; (mov r8, r8)
 800425e:	46bd      	mov	sp, r7
 8004260:	b002      	add	sp, #8
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b002      	add	sp, #8
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2240      	movs	r2, #64	; 0x40
 800428e:	5c9b      	ldrb	r3, [r3, r2]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <I2C_Slave_ISR_IT+0x24>
 8004294:	2302      	movs	r3, #2
 8004296:	e0fa      	b.n	800448e <I2C_Slave_ISR_IT+0x21a>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2240      	movs	r2, #64	; 0x40
 800429c:	2101      	movs	r1, #1
 800429e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	001a      	movs	r2, r3
 80042a6:	2301      	movs	r3, #1
 80042a8:	4013      	ands	r3, r2
 80042aa:	d00b      	beq.n	80042c4 <I2C_Slave_ISR_IT+0x50>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	001a      	movs	r2, r3
 80042b2:	2301      	movs	r3, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	d005      	beq.n	80042c4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	0011      	movs	r1, r2
 80042be:	0018      	movs	r0, r3
 80042c0:	f000 f9f6 	bl	80046b0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	091b      	lsrs	r3, r3, #4
 80042c8:	001a      	movs	r2, r3
 80042ca:	2301      	movs	r3, #1
 80042cc:	4013      	ands	r3, r2
 80042ce:	d054      	beq.n	800437a <I2C_Slave_ISR_IT+0x106>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	001a      	movs	r2, r3
 80042d6:	2301      	movs	r3, #1
 80042d8:	4013      	ands	r3, r2
 80042da:	d04e      	beq.n	800437a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d12d      	bne.n	8004342 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2241      	movs	r2, #65	; 0x41
 80042ea:	5c9b      	ldrb	r3, [r3, r2]
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b28      	cmp	r3, #40	; 0x28
 80042f0:	d10b      	bne.n	800430a <I2C_Slave_ISR_IT+0x96>
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	049b      	lsls	r3, r3, #18
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d106      	bne.n	800430a <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f000 faf8 	bl	80048f8 <I2C_ITListenCplt>
 8004308:	e036      	b.n	8004378 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2241      	movs	r2, #65	; 0x41
 800430e:	5c9b      	ldrb	r3, [r3, r2]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b29      	cmp	r3, #41	; 0x29
 8004314:	d110      	bne.n	8004338 <I2C_Slave_ISR_IT+0xc4>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4a5f      	ldr	r2, [pc, #380]	; (8004498 <I2C_Slave_ISR_IT+0x224>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00c      	beq.n	8004338 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2210      	movs	r2, #16
 8004324:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 fc4a 	bl	8004bc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	0018      	movs	r0, r3
 8004332:	f000 f957 	bl	80045e4 <I2C_ITSlaveSeqCplt>
 8004336:	e01f      	b.n	8004378 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2210      	movs	r2, #16
 800433e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004340:	e09d      	b.n	800447e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2210      	movs	r2, #16
 8004348:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	2204      	movs	r2, #4
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <I2C_Slave_ISR_IT+0xf4>
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	045b      	lsls	r3, r3, #17
 8004362:	429a      	cmp	r2, r3
 8004364:	d000      	beq.n	8004368 <I2C_Slave_ISR_IT+0xf4>
 8004366:	e08a      	b.n	800447e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f000 fb1b 	bl	80049ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004376:	e082      	b.n	800447e <I2C_Slave_ISR_IT+0x20a>
 8004378:	e081      	b.n	800447e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	089b      	lsrs	r3, r3, #2
 800437e:	001a      	movs	r2, r3
 8004380:	2301      	movs	r3, #1
 8004382:	4013      	ands	r3, r2
 8004384:	d031      	beq.n	80043ea <I2C_Slave_ISR_IT+0x176>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	001a      	movs	r2, r3
 800438c:	2301      	movs	r3, #1
 800438e:	4013      	ands	r3, r2
 8004390:	d02b      	beq.n	80043ea <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d018      	beq.n	80043ce <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d154      	bne.n	8004482 <I2C_Slave_ISR_IT+0x20e>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <I2C_Slave_ISR_IT+0x224>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d050      	beq.n	8004482 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 f8fe 	bl	80045e4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043e8:	e04b      	b.n	8004482 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	08db      	lsrs	r3, r3, #3
 80043ee:	001a      	movs	r2, r3
 80043f0:	2301      	movs	r3, #1
 80043f2:	4013      	ands	r3, r2
 80043f4:	d00c      	beq.n	8004410 <I2C_Slave_ISR_IT+0x19c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	001a      	movs	r2, r3
 80043fc:	2301      	movs	r3, #1
 80043fe:	4013      	ands	r3, r2
 8004400:	d006      	beq.n	8004410 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	0011      	movs	r1, r2
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f847 	bl	800449c <I2C_ITAddrCplt>
 800440e:	e039      	b.n	8004484 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	001a      	movs	r2, r3
 8004416:	2301      	movs	r3, #1
 8004418:	4013      	ands	r3, r2
 800441a:	d033      	beq.n	8004484 <I2C_Slave_ISR_IT+0x210>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	001a      	movs	r2, r3
 8004422:	2301      	movs	r3, #1
 8004424:	4013      	ands	r3, r2
 8004426:	d02d      	beq.n	8004484 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445a:	3b01      	subs	r3, #1
 800445c:	b29a      	uxth	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	851a      	strh	r2, [r3, #40]	; 0x28
 8004462:	e00f      	b.n	8004484 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	045b      	lsls	r3, r3, #17
 800446a:	429a      	cmp	r2, r3
 800446c:	d002      	beq.n	8004474 <I2C_Slave_ISR_IT+0x200>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	0018      	movs	r0, r3
 8004478:	f000 f8b4 	bl	80045e4 <I2C_ITSlaveSeqCplt>
 800447c:	e002      	b.n	8004484 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	e000      	b.n	8004484 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004482:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	2100      	movs	r1, #0
 800448a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b006      	add	sp, #24
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	ffff0000 	.word	0xffff0000

0800449c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800449c:	b5b0      	push	{r4, r5, r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2241      	movs	r2, #65	; 0x41
 80044aa:	5c9b      	ldrb	r3, [r3, r2]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	001a      	movs	r2, r3
 80044b0:	2328      	movs	r3, #40	; 0x28
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b28      	cmp	r3, #40	; 0x28
 80044b6:	d000      	beq.n	80044ba <I2C_ITAddrCplt+0x1e>
 80044b8:	e088      	b.n	80045cc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	250f      	movs	r5, #15
 80044c6:	197b      	adds	r3, r7, r5
 80044c8:	2101      	movs	r1, #1
 80044ca:	400a      	ands	r2, r1
 80044cc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	200c      	movs	r0, #12
 80044da:	183b      	adds	r3, r7, r0
 80044dc:	21fe      	movs	r1, #254	; 0xfe
 80044de:	400a      	ands	r2, r1
 80044e0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	240a      	movs	r4, #10
 80044ec:	193b      	adds	r3, r7, r4
 80044ee:	0592      	lsls	r2, r2, #22
 80044f0:	0d92      	lsrs	r2, r2, #22
 80044f2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	2308      	movs	r3, #8
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	21fe      	movs	r1, #254	; 0xfe
 8004502:	400a      	ands	r2, r1
 8004504:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d148      	bne.n	80045a0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800450e:	0021      	movs	r1, r4
 8004510:	187b      	adds	r3, r7, r1
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	09db      	lsrs	r3, r3, #7
 8004516:	b29a      	uxth	r2, r3
 8004518:	183b      	adds	r3, r7, r0
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	4053      	eors	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	001a      	movs	r2, r3
 8004522:	2306      	movs	r3, #6
 8004524:	4013      	ands	r3, r2
 8004526:	d120      	bne.n	800456a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004528:	183b      	adds	r3, r7, r0
 800452a:	187a      	adds	r2, r7, r1
 800452c:	8812      	ldrh	r2, [r2, #0]
 800452e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453e:	2b02      	cmp	r3, #2
 8004540:	d14c      	bne.n	80045dc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2208      	movs	r2, #8
 800454e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	2100      	movs	r1, #0
 8004556:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004558:	183b      	adds	r3, r7, r0
 800455a:	881a      	ldrh	r2, [r3, #0]
 800455c:	197b      	adds	r3, r7, r5
 800455e:	7819      	ldrb	r1, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	0018      	movs	r0, r3
 8004564:	f7ff fe5e 	bl	8004224 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004568:	e038      	b.n	80045dc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800456a:	240c      	movs	r4, #12
 800456c:	193b      	adds	r3, r7, r4
 800456e:	2208      	movs	r2, #8
 8004570:	18ba      	adds	r2, r7, r2
 8004572:	8812      	ldrh	r2, [r2, #0]
 8004574:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004576:	2380      	movs	r3, #128	; 0x80
 8004578:	021a      	lsls	r2, r3, #8
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0011      	movs	r1, r2
 800457e:	0018      	movs	r0, r3
 8004580:	f000 fb60 	bl	8004c44 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	2100      	movs	r1, #0
 800458a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800458c:	193b      	adds	r3, r7, r4
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	230f      	movs	r3, #15
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	7819      	ldrb	r1, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff fe43 	bl	8004224 <HAL_I2C_AddrCallback>
}
 800459e:	e01d      	b.n	80045dc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0011      	movs	r1, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fb4b 	bl	8004c44 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2240      	movs	r2, #64	; 0x40
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045b6:	230c      	movs	r3, #12
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	881a      	ldrh	r2, [r3, #0]
 80045bc:	230f      	movs	r3, #15
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	7819      	ldrb	r1, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0018      	movs	r0, r3
 80045c6:	f7ff fe2d 	bl	8004224 <HAL_I2C_AddrCallback>
}
 80045ca:	e007      	b.n	80045dc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	2100      	movs	r1, #0
 80045da:	5499      	strb	r1, [r3, r2]
}
 80045dc:	46c0      	nop			; (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b004      	add	sp, #16
 80045e2:	bdb0      	pop	{r4, r5, r7, pc}

080045e4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2242      	movs	r2, #66	; 0x42
 80045f8:	2100      	movs	r1, #0
 80045fa:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0b9b      	lsrs	r3, r3, #14
 8004600:	001a      	movs	r2, r3
 8004602:	2301      	movs	r3, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d008      	beq.n	800461a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4925      	ldr	r1, [pc, #148]	; (80046a8 <I2C_ITSlaveSeqCplt+0xc4>)
 8004614:	400a      	ands	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e00d      	b.n	8004636 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	0bdb      	lsrs	r3, r3, #15
 800461e:	001a      	movs	r2, r3
 8004620:	2301      	movs	r3, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d007      	beq.n	8004636 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	491e      	ldr	r1, [pc, #120]	; (80046ac <I2C_ITSlaveSeqCplt+0xc8>)
 8004632:	400a      	ands	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2241      	movs	r2, #65	; 0x41
 800463a:	5c9b      	ldrb	r3, [r3, r2]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b29      	cmp	r3, #41	; 0x29
 8004640:	d114      	bne.n	800466c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2241      	movs	r2, #65	; 0x41
 8004646:	2128      	movs	r1, #40	; 0x28
 8004648:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2221      	movs	r2, #33	; 0x21
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2101      	movs	r1, #1
 8004654:	0018      	movs	r0, r3
 8004656:	f000 faf5 	bl	8004c44 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2240      	movs	r2, #64	; 0x40
 800465e:	2100      	movs	r1, #0
 8004660:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0018      	movs	r0, r3
 8004666:	f7ff fdcd 	bl	8004204 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800466a:	e019      	b.n	80046a0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2241      	movs	r2, #65	; 0x41
 8004670:	5c9b      	ldrb	r3, [r3, r2]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b2a      	cmp	r3, #42	; 0x2a
 8004676:	d113      	bne.n	80046a0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2241      	movs	r2, #65	; 0x41
 800467c:	2128      	movs	r1, #40	; 0x28
 800467e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2222      	movs	r2, #34	; 0x22
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2102      	movs	r1, #2
 800468a:	0018      	movs	r0, r3
 800468c:	f000 fada 	bl	8004c44 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	0018      	movs	r0, r3
 800469c:	f7ff fdba 	bl	8004214 <HAL_I2C_SlaveRxCpltCallback>
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	ffffbfff 	.word	0xffffbfff
 80046ac:	ffff7fff 	.word	0xffff7fff

080046b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80046c6:	200f      	movs	r0, #15
 80046c8:	183b      	adds	r3, r7, r0
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	2141      	movs	r1, #65	; 0x41
 80046ce:	5c52      	ldrb	r2, [r2, r1]
 80046d0:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2220      	movs	r2, #32
 80046d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046da:	183b      	adds	r3, r7, r0
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b21      	cmp	r3, #33	; 0x21
 80046e0:	d003      	beq.n	80046ea <I2C_ITSlaveCplt+0x3a>
 80046e2:	183b      	adds	r3, r7, r0
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b29      	cmp	r3, #41	; 0x29
 80046e8:	d109      	bne.n	80046fe <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046ea:	4a7d      	ldr	r2, [pc, #500]	; (80048e0 <I2C_ITSlaveCplt+0x230>)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	0011      	movs	r1, r2
 80046f0:	0018      	movs	r0, r3
 80046f2:	f000 faa7 	bl	8004c44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2221      	movs	r2, #33	; 0x21
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
 80046fc:	e011      	b.n	8004722 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046fe:	220f      	movs	r2, #15
 8004700:	18bb      	adds	r3, r7, r2
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b22      	cmp	r3, #34	; 0x22
 8004706:	d003      	beq.n	8004710 <I2C_ITSlaveCplt+0x60>
 8004708:	18bb      	adds	r3, r7, r2
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b2a      	cmp	r3, #42	; 0x2a
 800470e:	d108      	bne.n	8004722 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004710:	4a74      	ldr	r2, [pc, #464]	; (80048e4 <I2C_ITSlaveCplt+0x234>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f000 fa94 	bl	8004c44 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2222      	movs	r2, #34	; 0x22
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2180      	movs	r1, #128	; 0x80
 800472e:	0209      	lsls	r1, r1, #8
 8004730:	430a      	orrs	r2, r1
 8004732:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	496a      	ldr	r1, [pc, #424]	; (80048e8 <I2C_ITSlaveCplt+0x238>)
 8004740:	400a      	ands	r2, r1
 8004742:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f000 fa3b 	bl	8004bc2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	0b9b      	lsrs	r3, r3, #14
 8004750:	001a      	movs	r2, r3
 8004752:	2301      	movs	r3, #1
 8004754:	4013      	ands	r3, r2
 8004756:	d013      	beq.n	8004780 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4962      	ldr	r1, [pc, #392]	; (80048ec <I2C_ITSlaveCplt+0x23c>)
 8004764:	400a      	ands	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800477e:	e018      	b.n	80047b2 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	0bdb      	lsrs	r3, r3, #15
 8004784:	001a      	movs	r2, r3
 8004786:	2301      	movs	r3, #1
 8004788:	4013      	ands	r3, r2
 800478a:	d012      	beq.n	80047b2 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4956      	ldr	r1, [pc, #344]	; (80048f0 <I2C_ITSlaveCplt+0x240>)
 8004798:	400a      	ands	r2, r1
 800479a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	001a      	movs	r2, r3
 80047b8:	2301      	movs	r3, #1
 80047ba:	4013      	ands	r3, r2
 80047bc:	d020      	beq.n	8004800 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2204      	movs	r2, #4
 80047c2:	4393      	bics	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	2204      	movs	r2, #4
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2242      	movs	r2, #66	; 0x42
 800481a:	2100      	movs	r1, #0
 800481c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	0011      	movs	r1, r2
 8004834:	0018      	movs	r0, r3
 8004836:	f000 f8b9 	bl	80049ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2241      	movs	r2, #65	; 0x41
 800483e:	5c9b      	ldrb	r3, [r3, r2]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b28      	cmp	r3, #40	; 0x28
 8004844:	d147      	bne.n	80048d6 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	0011      	movs	r1, r2
 800484c:	0018      	movs	r0, r3
 800484e:	f000 f853 	bl	80048f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004852:	e040      	b.n	80048d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <I2C_ITSlaveCplt+0x244>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d016      	beq.n	800488c <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	0018      	movs	r0, r3
 8004862:	f7ff febf 	bl	80045e4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <I2C_ITSlaveCplt+0x244>)
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2241      	movs	r2, #65	; 0x41
 8004870:	2120      	movs	r1, #32
 8004872:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff fcdd 	bl	8004244 <HAL_I2C_ListenCpltCallback>
}
 800488a:	e024      	b.n	80048d6 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2241      	movs	r2, #65	; 0x41
 8004890:	5c9b      	ldrb	r3, [r3, r2]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b22      	cmp	r3, #34	; 0x22
 8004896:	d10f      	bne.n	80048b8 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2241      	movs	r2, #65	; 0x41
 800489c:	2120      	movs	r1, #32
 800489e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2240      	movs	r2, #64	; 0x40
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7ff fcaf 	bl	8004214 <HAL_I2C_SlaveRxCpltCallback>
}
 80048b6:	e00e      	b.n	80048d6 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2241      	movs	r2, #65	; 0x41
 80048bc:	2120      	movs	r1, #32
 80048be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2240      	movs	r2, #64	; 0x40
 80048ca:	2100      	movs	r1, #0
 80048cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff fc97 	bl	8004204 <HAL_I2C_SlaveTxCpltCallback>
}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	46bd      	mov	sp, r7
 80048da:	b006      	add	sp, #24
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	00008001 	.word	0x00008001
 80048e4:	00008002 	.word	0x00008002
 80048e8:	fe00e800 	.word	0xfe00e800
 80048ec:	ffffbfff 	.word	0xffffbfff
 80048f0:	ffff7fff 	.word	0xffff7fff
 80048f4:	ffff0000 	.word	0xffff0000

080048f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <I2C_ITListenCplt+0xac>)
 8004906:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2241      	movs	r2, #65	; 0x41
 8004912:	2120      	movs	r1, #32
 8004914:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2242      	movs	r2, #66	; 0x42
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	001a      	movs	r2, r3
 800492a:	2301      	movs	r3, #1
 800492c:	4013      	ands	r3, r2
 800492e:	d022      	beq.n	8004976 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496e:	2204      	movs	r2, #4
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004976:	4a0c      	ldr	r2, [pc, #48]	; (80049a8 <I2C_ITListenCplt+0xb0>)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	0011      	movs	r1, r2
 800497c:	0018      	movs	r0, r3
 800497e:	f000 f961 	bl	8004c44 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2210      	movs	r2, #16
 8004988:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2240      	movs	r2, #64	; 0x40
 800498e:	2100      	movs	r1, #0
 8004990:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0018      	movs	r0, r3
 8004996:	f7ff fc55 	bl	8004244 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	ffff0000 	.word	0xffff0000
 80049a8:	00008003 	.word	0x00008003

080049ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049b6:	200f      	movs	r0, #15
 80049b8:	183b      	adds	r3, r7, r0
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	2141      	movs	r1, #65	; 0x41
 80049be:	5c52      	ldrb	r2, [r2, r1]
 80049c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2242      	movs	r2, #66	; 0x42
 80049c6:	2100      	movs	r1, #0
 80049c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a62      	ldr	r2, [pc, #392]	; (8004b58 <I2C_ITError+0x1ac>)
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049e2:	183b      	adds	r3, r7, r0
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b28      	cmp	r3, #40	; 0x28
 80049e8:	d007      	beq.n	80049fa <I2C_ITError+0x4e>
 80049ea:	183b      	adds	r3, r7, r0
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b29      	cmp	r3, #41	; 0x29
 80049f0:	d003      	beq.n	80049fa <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049f2:	183b      	adds	r3, r7, r0
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b2a      	cmp	r3, #42	; 0x2a
 80049f8:	d10c      	bne.n	8004a14 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2103      	movs	r1, #3
 80049fe:	0018      	movs	r0, r3
 8004a00:	f000 f920 	bl	8004c44 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2241      	movs	r2, #65	; 0x41
 8004a08:	2128      	movs	r1, #40	; 0x28
 8004a0a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a53      	ldr	r2, [pc, #332]	; (8004b5c <I2C_ITError+0x1b0>)
 8004a10:	635a      	str	r2, [r3, #52]	; 0x34
 8004a12:	e012      	b.n	8004a3a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a14:	4a52      	ldr	r2, [pc, #328]	; (8004b60 <I2C_ITError+0x1b4>)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 f912 	bl	8004c44 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2241      	movs	r2, #65	; 0x41
 8004a24:	5c9b      	ldrb	r3, [r3, r2]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b60      	cmp	r3, #96	; 0x60
 8004a2a:	d003      	beq.n	8004a34 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2241      	movs	r2, #65	; 0x41
 8004a30:	2120      	movs	r1, #32
 8004a32:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d03b      	beq.n	8004ac0 <I2C_ITError+0x114>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b11      	cmp	r3, #17
 8004a4c:	d002      	beq.n	8004a54 <I2C_ITError+0xa8>
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b21      	cmp	r3, #33	; 0x21
 8004a52:	d135      	bne.n	8004ac0 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	01db      	lsls	r3, r3, #7
 8004a5e:	401a      	ands	r2, r3
 8004a60:	2380      	movs	r3, #128	; 0x80
 8004a62:	01db      	lsls	r3, r3, #7
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d107      	bne.n	8004a78 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	493c      	ldr	r1, [pc, #240]	; (8004b64 <I2C_ITError+0x1b8>)
 8004a74:	400a      	ands	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f7ff f8af 	bl	8003be0 <HAL_DMA_GetState>
 8004a82:	0003      	movs	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d016      	beq.n	8004ab6 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8c:	4a36      	ldr	r2, [pc, #216]	; (8004b68 <I2C_ITError+0x1bc>)
 8004a8e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2240      	movs	r2, #64	; 0x40
 8004a94:	2100      	movs	r1, #0
 8004a96:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f7fe ff83 	bl	80039a8 <HAL_DMA_Abort_IT>
 8004aa2:	1e03      	subs	r3, r0, #0
 8004aa4:	d051      	beq.n	8004b4a <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ab4:	e049      	b.n	8004b4a <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 f859 	bl	8004b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004abe:	e044      	b.n	8004b4a <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d03b      	beq.n	8004b40 <I2C_ITError+0x194>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b12      	cmp	r3, #18
 8004acc:	d002      	beq.n	8004ad4 <I2C_ITError+0x128>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b22      	cmp	r3, #34	; 0x22
 8004ad2:	d135      	bne.n	8004b40 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	401a      	ands	r2, r3
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d107      	bne.n	8004af8 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	491e      	ldr	r1, [pc, #120]	; (8004b6c <I2C_ITError+0x1c0>)
 8004af4:	400a      	ands	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff f86f 	bl	8003be0 <HAL_DMA_GetState>
 8004b02:	0003      	movs	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d016      	beq.n	8004b36 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <I2C_ITError+0x1bc>)
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	2100      	movs	r1, #0
 8004b16:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f7fe ff43 	bl	80039a8 <HAL_DMA_Abort_IT>
 8004b22:	1e03      	subs	r3, r0, #0
 8004b24:	d013      	beq.n	8004b4e <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	0018      	movs	r0, r3
 8004b32:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b34:	e00b      	b.n	8004b4e <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 f819 	bl	8004b70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b3e:	e006      	b.n	8004b4e <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	0018      	movs	r0, r3
 8004b44:	f000 f814 	bl	8004b70 <I2C_TreatErrorCallback>
  }
}
 8004b48:	e002      	b.n	8004b50 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	e000      	b.n	8004b50 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b4e:	46c0      	nop			; (mov r8, r8)
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b004      	add	sp, #16
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	ffff0000 	.word	0xffff0000
 8004b5c:	08004275 	.word	0x08004275
 8004b60:	00008003 	.word	0x00008003
 8004b64:	ffffbfff 	.word	0xffffbfff
 8004b68:	08004c07 	.word	0x08004c07
 8004b6c:	ffff7fff 	.word	0xffff7fff

08004b70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2241      	movs	r2, #65	; 0x41
 8004b7c:	5c9b      	ldrb	r3, [r3, r2]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b60      	cmp	r3, #96	; 0x60
 8004b82:	d10f      	bne.n	8004ba4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2241      	movs	r2, #65	; 0x41
 8004b88:	2120      	movs	r1, #32
 8004b8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2240      	movs	r2, #64	; 0x40
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff fb61 	bl	8004264 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ba2:	e00a      	b.n	8004bba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2240      	movs	r2, #64	; 0x40
 8004bae:	2100      	movs	r1, #0
 8004bb0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7ff fb4d 	bl	8004254 <HAL_I2C_ErrorCallback>
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b002      	add	sp, #8
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d103      	bne.n	8004be0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2201      	movs	r2, #1
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d007      	beq.n	8004bfe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	619a      	str	r2, [r3, #24]
  }
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b002      	add	sp, #8
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2200      	movs	r2, #0
 8004c22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	2200      	movs	r2, #0
 8004c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f7ff ff9a 	bl	8004b70 <I2C_TreatErrorCallback>
}
 8004c3c:	46c0      	nop			; (mov r8, r8)
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b004      	add	sp, #16
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	000a      	movs	r2, r1
 8004c4e:	1cbb      	adds	r3, r7, #2
 8004c50:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c56:	1cbb      	adds	r3, r7, #2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d010      	beq.n	8004c82 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2242      	movs	r2, #66	; 0x42
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2241      	movs	r2, #65	; 0x41
 8004c6c:	5c9b      	ldrb	r3, [r3, r2]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	001a      	movs	r2, r3
 8004c72:	2328      	movs	r3, #40	; 0x28
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b28      	cmp	r3, #40	; 0x28
 8004c78:	d003      	beq.n	8004c82 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22b0      	movs	r2, #176	; 0xb0
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c82:	1cbb      	adds	r3, r7, #2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	2202      	movs	r2, #2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d010      	beq.n	8004cae <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2244      	movs	r2, #68	; 0x44
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2241      	movs	r2, #65	; 0x41
 8004c98:	5c9b      	ldrb	r3, [r3, r2]
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	2328      	movs	r3, #40	; 0x28
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b28      	cmp	r3, #40	; 0x28
 8004ca4:	d003      	beq.n	8004cae <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	22b0      	movs	r2, #176	; 0xb0
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004cae:	1cbb      	adds	r3, r7, #2
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	5e9b      	ldrsh	r3, [r3, r2]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	da03      	bge.n	8004cc0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	22b8      	movs	r2, #184	; 0xb8
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004cc0:	1cbb      	adds	r3, r7, #2
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d103      	bne.n	8004cd0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2290      	movs	r2, #144	; 0x90
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004cd0:	1cbb      	adds	r3, r7, #2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d103      	bne.n	8004ce0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ce0:	1cbb      	adds	r3, r7, #2
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d103      	bne.n	8004cf0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	43d9      	mvns	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	400a      	ands	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	46bd      	mov	sp, r7
 8004d06:	b004      	add	sp, #16
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2241      	movs	r2, #65	; 0x41
 8004d1a:	5c9b      	ldrb	r3, [r3, r2]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d138      	bne.n	8004d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2240      	movs	r2, #64	; 0x40
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e032      	b.n	8004d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	2101      	movs	r1, #1
 8004d36:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2241      	movs	r2, #65	; 0x41
 8004d3c:	2124      	movs	r1, #36	; 0x24
 8004d3e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4911      	ldr	r1, [pc, #68]	; (8004da0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2241      	movs	r2, #65	; 0x41
 8004d84:	2120      	movs	r1, #32
 8004d86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	e000      	b.n	8004d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d94:	2302      	movs	r3, #2
  }
}
 8004d96:	0018      	movs	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	ffffefff 	.word	0xffffefff

08004da4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2241      	movs	r2, #65	; 0x41
 8004db2:	5c9b      	ldrb	r3, [r3, r2]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d139      	bne.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2240      	movs	r2, #64	; 0x40
 8004dbe:	5c9b      	ldrb	r3, [r3, r2]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e033      	b.n	8004e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2240      	movs	r2, #64	; 0x40
 8004dcc:	2101      	movs	r1, #1
 8004dce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2241      	movs	r2, #65	; 0x41
 8004dd4:	2124      	movs	r1, #36	; 0x24
 8004dd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2101      	movs	r1, #1
 8004de4:	438a      	bics	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2241      	movs	r2, #65	; 0x41
 8004e1e:	2120      	movs	r1, #32
 8004e20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2240      	movs	r2, #64	; 0x40
 8004e26:	2100      	movs	r1, #0
 8004e28:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e000      	b.n	8004e30 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
  }
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b004      	add	sp, #16
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	fffff0ff 	.word	0xfffff0ff

08004e3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e0e5      	b.n	800501a <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2235      	movs	r2, #53	; 0x35
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d107      	bne.n	8004e6a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2234      	movs	r2, #52	; 0x34
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f7fd fcc7 	bl	80027f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2235      	movs	r2, #53	; 0x35
 8004e6e:	2102      	movs	r1, #2
 8004e70:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4969      	ldr	r1, [pc, #420]	; (8005024 <HAL_I2S_Init+0x1e8>)
 8004e7e:	400a      	ands	r2, r1
 8004e80:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2202      	movs	r2, #2
 8004e88:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d100      	bne.n	8004e94 <HAL_I2S_Init+0x58>
 8004e92:	e076      	b.n	8004f82 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e001      	b.n	8004ea6 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d802      	bhi.n	8004eb4 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004eb4:	2380      	movs	r3, #128	; 0x80
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f001 f865 	bl	8005f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d131      	bne.n	8004f32 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	0019      	movs	r1, r3
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7fb f911 	bl	8000104 <__udivsi3>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	0013      	movs	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	189b      	adds	r3, r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	001a      	movs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	0010      	movs	r0, r2
 8004ef8:	f7fb f904 	bl	8000104 <__udivsi3>
 8004efc:	0003      	movs	r3, r0
 8004efe:	3305      	adds	r3, #5
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	e02a      	b.n	8004f5a <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	0019      	movs	r1, r3
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7fb f8fa 	bl	8000104 <__udivsi3>
 8004f10:	0003      	movs	r3, r0
 8004f12:	001a      	movs	r2, r3
 8004f14:	0013      	movs	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	189b      	adds	r3, r3, r2
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	0019      	movs	r1, r3
 8004f24:	0010      	movs	r0, r2
 8004f26:	f7fb f8ed 	bl	8000104 <__udivsi3>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	3305      	adds	r3, #5
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e013      	b.n	8004f5a <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f32:	6979      	ldr	r1, [r7, #20]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fb f8e5 	bl	8000104 <__udivsi3>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	0013      	movs	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	001a      	movs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	0010      	movs	r0, r2
 8004f50:	f7fb f8d8 	bl	8000104 <__udivsi3>
 8004f54:	0003      	movs	r3, r0
 8004f56:	3305      	adds	r3, #5
 8004f58:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	210a      	movs	r1, #10
 8004f5e:	0018      	movs	r0, r3
 8004f60:	f7fb f8d0 	bl	8000104 <__udivsi3>
 8004f64:	0003      	movs	r3, r0
 8004f66:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e003      	b.n	8004f8a <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004f82:	2302      	movs	r3, #2
 8004f84:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d902      	bls.n	8004f96 <HAL_I2S_Init+0x15a>
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	2bff      	cmp	r3, #255	; 0xff
 8004f94:	d907      	bls.n	8004fa6 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e039      	b.n	800501a <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	0011      	movs	r1, r2
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_I2S_Init+0x1e8>)
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4319      	orrs	r1, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	4319      	orrs	r1, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2180      	movs	r1, #128	; 0x80
 8004fe2:	0109      	lsls	r1, r1, #4
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b30      	cmp	r3, #48	; 0x30
 8004fee:	d003      	beq.n	8004ff8 <HAL_I2S_Init+0x1bc>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	2bb0      	cmp	r3, #176	; 0xb0
 8004ff6:	d108      	bne.n	800500a <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	69da      	ldr	r2, [r3, #28]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	0149      	lsls	r1, r1, #5
 8005006:	430a      	orrs	r2, r1
 8005008:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2235      	movs	r2, #53	; 0x35
 8005014:	2101      	movs	r1, #1
 8005016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	0018      	movs	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	b008      	add	sp, #32
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	fffff040 	.word	0xfffff040

08005028 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	001a      	movs	r2, r3
 8005046:	2301      	movs	r3, #1
 8005048:	4013      	ands	r3, r2
 800504a:	d10e      	bne.n	800506a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2201      	movs	r2, #1
 8005050:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005052:	d00a      	beq.n	800506a <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	001a      	movs	r2, r3
 800505a:	2301      	movs	r3, #1
 800505c:	4013      	ands	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 f892 	bl	800518c <I2S_Receive_IT>
    return;
 8005068:	e046      	b.n	80050f8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	085b      	lsrs	r3, r3, #1
 800506e:	001a      	movs	r2, r3
 8005070:	2301      	movs	r3, #1
 8005072:	4013      	ands	r3, r2
 8005074:	d00a      	beq.n	800508c <HAL_I2S_IRQHandler+0x64>
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	09db      	lsrs	r3, r3, #7
 800507a:	001a      	movs	r2, r3
 800507c:	2301      	movs	r3, #1
 800507e:	4013      	ands	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	0018      	movs	r0, r3
 8005086:	f000 f852 	bl	800512e <I2S_Transmit_IT>
    return;
 800508a:	e035      	b.n	80050f8 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	001a      	movs	r2, r3
 8005092:	2301      	movs	r3, #1
 8005094:	4013      	ands	r3, r2
 8005096:	d02f      	beq.n	80050f8 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	001a      	movs	r2, r3
 800509e:	2301      	movs	r3, #1
 80050a0:	4013      	ands	r3, r2
 80050a2:	d00d      	beq.n	80050c0 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2160      	movs	r1, #96	; 0x60
 80050b0:	438a      	bics	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	2202      	movs	r2, #2
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	001a      	movs	r2, r3
 80050c6:	2301      	movs	r3, #1
 80050c8:	4013      	ands	r3, r2
 80050ca:	d00d      	beq.n	80050e8 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	21a0      	movs	r1, #160	; 0xa0
 80050d8:	438a      	bics	r2, r1
 80050da:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	2204      	movs	r2, #4
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2235      	movs	r2, #53	; 0x35
 80050ec:	2101      	movs	r1, #1
 80050ee:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 f813 	bl	800511e <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b002      	add	sp, #8
 800510c:	bd80      	pop	{r7, pc}

0800510e <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	46bd      	mov	sp, r7
 800511a:	b002      	add	sp, #8
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	881a      	ldrh	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69db      	ldr	r3, [r3, #28]
 8005146:	1c9a      	adds	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	21a0      	movs	r1, #160	; 0xa0
 8005170:	438a      	bics	r2, r1
 8005172:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2235      	movs	r2, #53	; 0x35
 8005178:	2101      	movs	r1, #1
 800517a:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	0018      	movs	r0, r3
 8005180:	f7ff ffbd 	bl	80050fe <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005184:	46c0      	nop			; (mov r8, r8)
 8005186:	46bd      	mov	sp, r7
 8005188:	b002      	add	sp, #8
 800518a:	bd80      	pop	{r7, pc}

0800518c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	b292      	uxth	r2, r2
 80051a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c9a      	adds	r2, r3, #2
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2160      	movs	r1, #96	; 0x60
 80051d0:	438a      	bics	r2, r1
 80051d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2235      	movs	r2, #53	; 0x35
 80051d8:	2101      	movs	r1, #1
 80051da:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0018      	movs	r0, r3
 80051e0:	f7ff ff95 	bl	800510e <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b002      	add	sp, #8
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a19      	ldr	r2, [pc, #100]	; (8005260 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	430a      	orrs	r2, r1
 8005204:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	2380      	movs	r3, #128	; 0x80
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	429a      	cmp	r2, r3
 800520e:	d11f      	bne.n	8005250 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	0013      	movs	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	189b      	adds	r3, r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4912      	ldr	r1, [pc, #72]	; (8005268 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800521e:	0018      	movs	r0, r3
 8005220:	f7fa ff70 	bl	8000104 <__udivsi3>
 8005224:	0003      	movs	r3, r0
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800522a:	e008      	b.n	800523e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3b01      	subs	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e001      	b.n	800523e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e009      	b.n	8005252 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	2380      	movs	r3, #128	; 0x80
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	401a      	ands	r2, r3
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	429a      	cmp	r2, r3
 800524e:	d0ed      	beq.n	800522c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	b004      	add	sp, #16
 8005258:	bd80      	pop	{r7, pc}
 800525a:	46c0      	nop			; (mov r8, r8)
 800525c:	40007000 	.word	0x40007000
 8005260:	fffff9ff 	.word	0xfffff9ff
 8005264:	20003134 	.word	0x20003134
 8005268:	000f4240 	.word	0x000f4240

0800526c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	23e0      	movs	r3, #224	; 0xe0
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	4013      	ands	r3, r2
}
 800527a:	0018      	movs	r0, r3
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40021000 	.word	0x40021000

08005284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e304      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2201      	movs	r2, #1
 800529c:	4013      	ands	r3, r2
 800529e:	d100      	bne.n	80052a2 <HAL_RCC_OscConfig+0x1e>
 80052a0:	e07c      	b.n	800539c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a2:	4bc3      	ldr	r3, [pc, #780]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2238      	movs	r2, #56	; 0x38
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052ac:	4bc0      	ldr	r3, [pc, #768]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2203      	movs	r2, #3
 80052b2:	4013      	ands	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d102      	bne.n	80052c2 <HAL_RCC_OscConfig+0x3e>
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d002      	beq.n	80052c8 <HAL_RCC_OscConfig+0x44>
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b08      	cmp	r3, #8
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c8:	4bb9      	ldr	r3, [pc, #740]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	029b      	lsls	r3, r3, #10
 80052d0:	4013      	ands	r3, r2
 80052d2:	d062      	beq.n	800539a <HAL_RCC_OscConfig+0x116>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d15e      	bne.n	800539a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e2df      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	025b      	lsls	r3, r3, #9
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x78>
 80052ec:	4bb0      	ldr	r3, [pc, #704]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	4baf      	ldr	r3, [pc, #700]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80052f2:	2180      	movs	r1, #128	; 0x80
 80052f4:	0249      	lsls	r1, r1, #9
 80052f6:	430a      	orrs	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	e020      	b.n	800533e <HAL_RCC_OscConfig+0xba>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	23a0      	movs	r3, #160	; 0xa0
 8005302:	02db      	lsls	r3, r3, #11
 8005304:	429a      	cmp	r2, r3
 8005306:	d10e      	bne.n	8005326 <HAL_RCC_OscConfig+0xa2>
 8005308:	4ba9      	ldr	r3, [pc, #676]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	4ba8      	ldr	r3, [pc, #672]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	02c9      	lsls	r1, r1, #11
 8005312:	430a      	orrs	r2, r1
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	4ba6      	ldr	r3, [pc, #664]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4ba5      	ldr	r3, [pc, #660]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	0249      	lsls	r1, r1, #9
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	e00b      	b.n	800533e <HAL_RCC_OscConfig+0xba>
 8005326:	4ba2      	ldr	r3, [pc, #648]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4ba1      	ldr	r3, [pc, #644]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800532c:	49a1      	ldr	r1, [pc, #644]	; (80055b4 <HAL_RCC_OscConfig+0x330>)
 800532e:	400a      	ands	r2, r1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	4b9f      	ldr	r3, [pc, #636]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b9e      	ldr	r3, [pc, #632]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005338:	499f      	ldr	r1, [pc, #636]	; (80055b8 <HAL_RCC_OscConfig+0x334>)
 800533a:	400a      	ands	r2, r1
 800533c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d014      	beq.n	8005370 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7fd fe9d 	bl	8003084 <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005350:	f7fd fe98 	bl	8003084 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e29e      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005362:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	4013      	ands	r3, r2
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xcc>
 800536e:	e015      	b.n	800539c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fd fe88 	bl	8003084 <HAL_GetTick>
 8005374:	0003      	movs	r3, r0
 8005376:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800537a:	f7fd fe83 	bl	8003084 <HAL_GetTick>
 800537e:	0002      	movs	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b64      	cmp	r3, #100	; 0x64
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e289      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800538c:	4b88      	ldr	r3, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	4013      	ands	r3, r2
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0xf6>
 8005398:	e000      	b.n	800539c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2202      	movs	r2, #2
 80053a2:	4013      	ands	r3, r2
 80053a4:	d100      	bne.n	80053a8 <HAL_RCC_OscConfig+0x124>
 80053a6:	e099      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a8:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2238      	movs	r2, #56	; 0x38
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053b2:	4b7f      	ldr	r3, [pc, #508]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2203      	movs	r2, #3
 80053b8:	4013      	ands	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d102      	bne.n	80053c8 <HAL_RCC_OscConfig+0x144>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d002      	beq.n	80053ce <HAL_RCC_OscConfig+0x14a>
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d135      	bne.n	800543a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ce:	4b78      	ldr	r3, [pc, #480]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	2380      	movs	r3, #128	; 0x80
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4013      	ands	r3, r2
 80053d8:	d005      	beq.n	80053e6 <HAL_RCC_OscConfig+0x162>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e25c      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e6:	4b72      	ldr	r3, [pc, #456]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4a74      	ldr	r2, [pc, #464]	; (80055bc <HAL_RCC_OscConfig+0x338>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	0019      	movs	r1, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	4b6e      	ldr	r3, [pc, #440]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d112      	bne.n	8005428 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005402:	4b6b      	ldr	r3, [pc, #428]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a6e      	ldr	r2, [pc, #440]	; (80055c0 <HAL_RCC_OscConfig+0x33c>)
 8005408:	4013      	ands	r3, r2
 800540a:	0019      	movs	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005416:	4b66      	ldr	r3, [pc, #408]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	0adb      	lsrs	r3, r3, #11
 800541c:	2207      	movs	r2, #7
 800541e:	4013      	ands	r3, r2
 8005420:	4a68      	ldr	r2, [pc, #416]	; (80055c4 <HAL_RCC_OscConfig+0x340>)
 8005422:	40da      	lsrs	r2, r3
 8005424:	4b68      	ldr	r3, [pc, #416]	; (80055c8 <HAL_RCC_OscConfig+0x344>)
 8005426:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005428:	4b68      	ldr	r3, [pc, #416]	; (80055cc <HAL_RCC_OscConfig+0x348>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	0018      	movs	r0, r3
 800542e:	f7fd fdcd 	bl	8002fcc <HAL_InitTick>
 8005432:	1e03      	subs	r3, r0, #0
 8005434:	d051      	beq.n	80054da <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e232      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d030      	beq.n	80054a4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005442:	4b5b      	ldr	r3, [pc, #364]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a5e      	ldr	r2, [pc, #376]	; (80055c0 <HAL_RCC_OscConfig+0x33c>)
 8005448:	4013      	ands	r3, r2
 800544a:	0019      	movs	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	4b57      	ldr	r3, [pc, #348]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005452:	430a      	orrs	r2, r1
 8005454:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005456:	4b56      	ldr	r3, [pc, #344]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b55      	ldr	r3, [pc, #340]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	0049      	lsls	r1, r1, #1
 8005460:	430a      	orrs	r2, r1
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fd fe0e 	bl	8003084 <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800546e:	f7fd fe09 	bl	8003084 <HAL_GetTick>
 8005472:	0002      	movs	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e20f      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005480:	4b4b      	ldr	r3, [pc, #300]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4013      	ands	r3, r2
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b48      	ldr	r3, [pc, #288]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a4a      	ldr	r2, [pc, #296]	; (80055bc <HAL_RCC_OscConfig+0x338>)
 8005492:	4013      	ands	r3, r2
 8005494:	0019      	movs	r1, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	4b44      	ldr	r3, [pc, #272]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800549e:	430a      	orrs	r2, r1
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	e01b      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80054a4:	4b42      	ldr	r3, [pc, #264]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054aa:	4949      	ldr	r1, [pc, #292]	; (80055d0 <HAL_RCC_OscConfig+0x34c>)
 80054ac:	400a      	ands	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fd fde8 	bl	8003084 <HAL_GetTick>
 80054b4:	0003      	movs	r3, r0
 80054b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ba:	f7fd fde3 	bl	8003084 <HAL_GetTick>
 80054be:	0002      	movs	r2, r0
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e1e9      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054cc:	4b38      	ldr	r3, [pc, #224]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4013      	ands	r3, r2
 80054d6:	d1f0      	bne.n	80054ba <HAL_RCC_OscConfig+0x236>
 80054d8:	e000      	b.n	80054dc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054da:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2208      	movs	r2, #8
 80054e2:	4013      	ands	r3, r2
 80054e4:	d047      	beq.n	8005576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054e6:	4b32      	ldr	r3, [pc, #200]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	2238      	movs	r2, #56	; 0x38
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b18      	cmp	r3, #24
 80054f0:	d10a      	bne.n	8005508 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80054f2:	4b2f      	ldr	r3, [pc, #188]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 80054f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f6:	2202      	movs	r2, #2
 80054f8:	4013      	ands	r3, r2
 80054fa:	d03c      	beq.n	8005576 <HAL_RCC_OscConfig+0x2f2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d138      	bne.n	8005576 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e1cb      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d019      	beq.n	8005544 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005512:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005514:	4b26      	ldr	r3, [pc, #152]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005516:	2101      	movs	r1, #1
 8005518:	430a      	orrs	r2, r1
 800551a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fd fdb2 	bl	8003084 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005526:	f7fd fdad 	bl	8003084 <HAL_GetTick>
 800552a:	0002      	movs	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e1b3      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800553a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553c:	2202      	movs	r2, #2
 800553e:	4013      	ands	r3, r2
 8005540:	d0f1      	beq.n	8005526 <HAL_RCC_OscConfig+0x2a2>
 8005542:	e018      	b.n	8005576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005546:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800554a:	2101      	movs	r1, #1
 800554c:	438a      	bics	r2, r1
 800554e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd fd98 	bl	8003084 <HAL_GetTick>
 8005554:	0003      	movs	r3, r0
 8005556:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800555a:	f7fd fd93 	bl	8003084 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e199      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800556c:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	2202      	movs	r2, #2
 8005572:	4013      	ands	r3, r2
 8005574:	d1f1      	bne.n	800555a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2204      	movs	r2, #4
 800557c:	4013      	ands	r3, r2
 800557e:	d100      	bne.n	8005582 <HAL_RCC_OscConfig+0x2fe>
 8005580:	e0c6      	b.n	8005710 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005582:	231f      	movs	r3, #31
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	2238      	movs	r2, #56	; 0x38
 8005590:	4013      	ands	r3, r2
 8005592:	2b20      	cmp	r3, #32
 8005594:	d11e      	bne.n	80055d4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005596:	4b06      	ldr	r3, [pc, #24]	; (80055b0 <HAL_RCC_OscConfig+0x32c>)
 8005598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559a:	2202      	movs	r2, #2
 800559c:	4013      	ands	r3, r2
 800559e:	d100      	bne.n	80055a2 <HAL_RCC_OscConfig+0x31e>
 80055a0:	e0b6      	b.n	8005710 <HAL_RCC_OscConfig+0x48c>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d000      	beq.n	80055ac <HAL_RCC_OscConfig+0x328>
 80055aa:	e0b1      	b.n	8005710 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e177      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
 80055b0:	40021000 	.word	0x40021000
 80055b4:	fffeffff 	.word	0xfffeffff
 80055b8:	fffbffff 	.word	0xfffbffff
 80055bc:	ffff80ff 	.word	0xffff80ff
 80055c0:	ffffc7ff 	.word	0xffffc7ff
 80055c4:	00f42400 	.word	0x00f42400
 80055c8:	20003134 	.word	0x20003134
 80055cc:	20003138 	.word	0x20003138
 80055d0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055d4:	4bb4      	ldr	r3, [pc, #720]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80055d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	055b      	lsls	r3, r3, #21
 80055dc:	4013      	ands	r3, r2
 80055de:	d101      	bne.n	80055e4 <HAL_RCC_OscConfig+0x360>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x362>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80055ea:	4baf      	ldr	r3, [pc, #700]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80055ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ee:	4bae      	ldr	r3, [pc, #696]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80055f0:	2180      	movs	r1, #128	; 0x80
 80055f2:	0549      	lsls	r1, r1, #21
 80055f4:	430a      	orrs	r2, r1
 80055f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80055f8:	4bab      	ldr	r3, [pc, #684]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	2380      	movs	r3, #128	; 0x80
 80055fe:	055b      	lsls	r3, r3, #21
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005606:	231f      	movs	r3, #31
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560e:	4ba7      	ldr	r3, [pc, #668]	; (80058ac <HAL_RCC_OscConfig+0x628>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4013      	ands	r3, r2
 8005618:	d11a      	bne.n	8005650 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800561a:	4ba4      	ldr	r3, [pc, #656]	; (80058ac <HAL_RCC_OscConfig+0x628>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4ba3      	ldr	r3, [pc, #652]	; (80058ac <HAL_RCC_OscConfig+0x628>)
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	0049      	lsls	r1, r1, #1
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005628:	f7fd fd2c 	bl	8003084 <HAL_GetTick>
 800562c:	0003      	movs	r3, r0
 800562e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005632:	f7fd fd27 	bl	8003084 <HAL_GetTick>
 8005636:	0002      	movs	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e12d      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005644:	4b99      	ldr	r3, [pc, #612]	; (80058ac <HAL_RCC_OscConfig+0x628>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4013      	ands	r3, r2
 800564e:	d0f0      	beq.n	8005632 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d106      	bne.n	8005666 <HAL_RCC_OscConfig+0x3e2>
 8005658:	4b93      	ldr	r3, [pc, #588]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800565a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800565c:	4b92      	ldr	r3, [pc, #584]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800565e:	2101      	movs	r1, #1
 8005660:	430a      	orrs	r2, r1
 8005662:	65da      	str	r2, [r3, #92]	; 0x5c
 8005664:	e01c      	b.n	80056a0 <HAL_RCC_OscConfig+0x41c>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b05      	cmp	r3, #5
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x404>
 800566e:	4b8e      	ldr	r3, [pc, #568]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005672:	4b8d      	ldr	r3, [pc, #564]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005674:	2104      	movs	r1, #4
 8005676:	430a      	orrs	r2, r1
 8005678:	65da      	str	r2, [r3, #92]	; 0x5c
 800567a:	4b8b      	ldr	r3, [pc, #556]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800567c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800567e:	4b8a      	ldr	r3, [pc, #552]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005680:	2101      	movs	r1, #1
 8005682:	430a      	orrs	r2, r1
 8005684:	65da      	str	r2, [r3, #92]	; 0x5c
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0x41c>
 8005688:	4b87      	ldr	r3, [pc, #540]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800568a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800568c:	4b86      	ldr	r3, [pc, #536]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800568e:	2101      	movs	r1, #1
 8005690:	438a      	bics	r2, r1
 8005692:	65da      	str	r2, [r3, #92]	; 0x5c
 8005694:	4b84      	ldr	r3, [pc, #528]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005696:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005698:	4b83      	ldr	r3, [pc, #524]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800569a:	2104      	movs	r1, #4
 800569c:	438a      	bics	r2, r1
 800569e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d014      	beq.n	80056d2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd fcec 	bl	8003084 <HAL_GetTick>
 80056ac:	0003      	movs	r3, r0
 80056ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056b0:	e009      	b.n	80056c6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b2:	f7fd fce7 	bl	8003084 <HAL_GetTick>
 80056b6:	0002      	movs	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	4a7c      	ldr	r2, [pc, #496]	; (80058b0 <HAL_RCC_OscConfig+0x62c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0ec      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056c6:	4b78      	ldr	r3, [pc, #480]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80056c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ca:	2202      	movs	r2, #2
 80056cc:	4013      	ands	r3, r2
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x42e>
 80056d0:	e013      	b.n	80056fa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d2:	f7fd fcd7 	bl	8003084 <HAL_GetTick>
 80056d6:	0003      	movs	r3, r0
 80056d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056da:	e009      	b.n	80056f0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fd fcd2 	bl	8003084 <HAL_GetTick>
 80056e0:	0002      	movs	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	4a72      	ldr	r2, [pc, #456]	; (80058b0 <HAL_RCC_OscConfig+0x62c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0d7      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056f0:	4b6d      	ldr	r3, [pc, #436]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	2202      	movs	r2, #2
 80056f6:	4013      	ands	r3, r2
 80056f8:	d1f0      	bne.n	80056dc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056fa:	231f      	movs	r3, #31
 80056fc:	18fb      	adds	r3, r7, r3
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005704:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	4b67      	ldr	r3, [pc, #412]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800570a:	496a      	ldr	r1, [pc, #424]	; (80058b4 <HAL_RCC_OscConfig+0x630>)
 800570c:	400a      	ands	r2, r1
 800570e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d100      	bne.n	800571a <HAL_RCC_OscConfig+0x496>
 8005718:	e0c1      	b.n	800589e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800571a:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2238      	movs	r2, #56	; 0x38
 8005720:	4013      	ands	r3, r2
 8005722:	2b10      	cmp	r3, #16
 8005724:	d100      	bne.n	8005728 <HAL_RCC_OscConfig+0x4a4>
 8005726:	e081      	b.n	800582c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d156      	bne.n	80057de <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005730:	4b5d      	ldr	r3, [pc, #372]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b5c      	ldr	r3, [pc, #368]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005736:	4960      	ldr	r1, [pc, #384]	; (80058b8 <HAL_RCC_OscConfig+0x634>)
 8005738:	400a      	ands	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573c:	f7fd fca2 	bl	8003084 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fd fc9d 	bl	8003084 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0a3      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005758:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	049b      	lsls	r3, r3, #18
 8005760:	4013      	ands	r3, r2
 8005762:	d1f0      	bne.n	8005746 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005764:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a54      	ldr	r2, [pc, #336]	; (80058bc <HAL_RCC_OscConfig+0x638>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	431a      	orrs	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005790:	431a      	orrs	r2, r3
 8005792:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005794:	430a      	orrs	r2, r1
 8005796:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005798:	4b43      	ldr	r3, [pc, #268]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800579e:	2180      	movs	r1, #128	; 0x80
 80057a0:	0449      	lsls	r1, r1, #17
 80057a2:	430a      	orrs	r2, r1
 80057a4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80057a6:	4b40      	ldr	r3, [pc, #256]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	4b3f      	ldr	r3, [pc, #252]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057ac:	2180      	movs	r1, #128	; 0x80
 80057ae:	0549      	lsls	r1, r1, #21
 80057b0:	430a      	orrs	r2, r1
 80057b2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fd fc66 	bl	8003084 <HAL_GetTick>
 80057b8:	0003      	movs	r3, r0
 80057ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057be:	f7fd fc61 	bl	8003084 <HAL_GetTick>
 80057c2:	0002      	movs	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e067      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	2380      	movs	r3, #128	; 0x80
 80057d6:	049b      	lsls	r3, r3, #18
 80057d8:	4013      	ands	r3, r2
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x53a>
 80057dc:	e05f      	b.n	800589e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	4b32      	ldr	r3, [pc, #200]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b31      	ldr	r3, [pc, #196]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057e4:	4934      	ldr	r1, [pc, #208]	; (80058b8 <HAL_RCC_OscConfig+0x634>)
 80057e6:	400a      	ands	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80057ea:	4b2f      	ldr	r3, [pc, #188]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	4b2e      	ldr	r3, [pc, #184]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057f0:	2103      	movs	r1, #3
 80057f2:	438a      	bics	r2, r1
 80057f4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80057f6:	4b2c      	ldr	r3, [pc, #176]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 80057fc:	4930      	ldr	r1, [pc, #192]	; (80058c0 <HAL_RCC_OscConfig+0x63c>)
 80057fe:	400a      	ands	r2, r1
 8005800:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005802:	f7fd fc3f 	bl	8003084 <HAL_GetTick>
 8005806:	0003      	movs	r3, r0
 8005808:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580c:	f7fd fc3a 	bl	8003084 <HAL_GetTick>
 8005810:	0002      	movs	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e040      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	049b      	lsls	r3, r3, #18
 8005826:	4013      	ands	r3, r2
 8005828:	d1f0      	bne.n	800580c <HAL_RCC_OscConfig+0x588>
 800582a:	e038      	b.n	800589e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e033      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005838:	4b1b      	ldr	r3, [pc, #108]	; (80058a8 <HAL_RCC_OscConfig+0x624>)
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2203      	movs	r2, #3
 8005842:	401a      	ands	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	429a      	cmp	r2, r3
 800584a:	d126      	bne.n	800589a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2270      	movs	r2, #112	; 0x70
 8005850:	401a      	ands	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d11f      	bne.n	800589a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	23fe      	movs	r3, #254	; 0xfe
 800585e:	01db      	lsls	r3, r3, #7
 8005860:	401a      	ands	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005868:	429a      	cmp	r2, r3
 800586a:	d116      	bne.n	800589a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	23f8      	movs	r3, #248	; 0xf8
 8005870:	039b      	lsls	r3, r3, #14
 8005872:	401a      	ands	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005878:	429a      	cmp	r2, r3
 800587a:	d10e      	bne.n	800589a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	23e0      	movs	r3, #224	; 0xe0
 8005880:	051b      	lsls	r3, r3, #20
 8005882:	401a      	ands	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d106      	bne.n	800589a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	0f5b      	lsrs	r3, r3, #29
 8005890:	075a      	lsls	r2, r3, #29
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005896:	429a      	cmp	r2, r3
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	0018      	movs	r0, r3
 80058a2:	46bd      	mov	sp, r7
 80058a4:	b008      	add	sp, #32
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	40007000 	.word	0x40007000
 80058b0:	00001388 	.word	0x00001388
 80058b4:	efffffff 	.word	0xefffffff
 80058b8:	feffffff 	.word	0xfeffffff
 80058bc:	11c1808c 	.word	0x11c1808c
 80058c0:	eefeffff 	.word	0xeefeffff

080058c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0e9      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058d8:	4b76      	ldr	r3, [pc, #472]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2207      	movs	r2, #7
 80058de:	4013      	ands	r3, r2
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d91e      	bls.n	8005924 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e6:	4b73      	ldr	r3, [pc, #460]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2207      	movs	r2, #7
 80058ec:	4393      	bics	r3, r2
 80058ee:	0019      	movs	r1, r3
 80058f0:	4b70      	ldr	r3, [pc, #448]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058f8:	f7fd fbc4 	bl	8003084 <HAL_GetTick>
 80058fc:	0003      	movs	r3, r0
 80058fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005900:	e009      	b.n	8005916 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005902:	f7fd fbbf 	bl	8003084 <HAL_GetTick>
 8005906:	0002      	movs	r2, r0
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	4a6a      	ldr	r2, [pc, #424]	; (8005ab8 <HAL_RCC_ClockConfig+0x1f4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e0ca      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005916:	4b67      	ldr	r3, [pc, #412]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2207      	movs	r2, #7
 800591c:	4013      	ands	r3, r2
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d1ee      	bne.n	8005902 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2202      	movs	r2, #2
 800592a:	4013      	ands	r3, r2
 800592c:	d015      	beq.n	800595a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2204      	movs	r2, #4
 8005934:	4013      	ands	r3, r2
 8005936:	d006      	beq.n	8005946 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005938:	4b60      	ldr	r3, [pc, #384]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	4b5f      	ldr	r3, [pc, #380]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 800593e:	21e0      	movs	r1, #224	; 0xe0
 8005940:	01c9      	lsls	r1, r1, #7
 8005942:	430a      	orrs	r2, r1
 8005944:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005946:	4b5d      	ldr	r3, [pc, #372]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	4a5d      	ldr	r2, [pc, #372]	; (8005ac0 <HAL_RCC_ClockConfig+0x1fc>)
 800594c:	4013      	ands	r3, r2
 800594e:	0019      	movs	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	4b59      	ldr	r3, [pc, #356]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005956:	430a      	orrs	r2, r1
 8005958:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2201      	movs	r2, #1
 8005960:	4013      	ands	r3, r2
 8005962:	d057      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d107      	bne.n	800597c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800596c:	4b53      	ldr	r3, [pc, #332]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	2380      	movs	r3, #128	; 0x80
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	4013      	ands	r3, r2
 8005976:	d12b      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e097      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b02      	cmp	r3, #2
 8005982:	d107      	bne.n	8005994 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005984:	4b4d      	ldr	r3, [pc, #308]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	049b      	lsls	r3, r3, #18
 800598c:	4013      	ands	r3, r2
 800598e:	d11f      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e08b      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d107      	bne.n	80059ac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800599c:	4b47      	ldr	r3, [pc, #284]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4013      	ands	r3, r2
 80059a6:	d113      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e07f      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059b4:	4b41      	ldr	r3, [pc, #260]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 80059b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b8:	2202      	movs	r2, #2
 80059ba:	4013      	ands	r3, r2
 80059bc:	d108      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e074      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059c2:	4b3e      	ldr	r3, [pc, #248]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 80059c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c6:	2202      	movs	r2, #2
 80059c8:	4013      	ands	r3, r2
 80059ca:	d101      	bne.n	80059d0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e06d      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059d0:	4b3a      	ldr	r3, [pc, #232]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2207      	movs	r2, #7
 80059d6:	4393      	bics	r3, r2
 80059d8:	0019      	movs	r1, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b37      	ldr	r3, [pc, #220]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 80059e0:	430a      	orrs	r2, r1
 80059e2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e4:	f7fd fb4e 	bl	8003084 <HAL_GetTick>
 80059e8:	0003      	movs	r3, r0
 80059ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ec:	e009      	b.n	8005a02 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059ee:	f7fd fb49 	bl	8003084 <HAL_GetTick>
 80059f2:	0002      	movs	r2, r0
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	4a2f      	ldr	r2, [pc, #188]	; (8005ab8 <HAL_RCC_ClockConfig+0x1f4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e054      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2238      	movs	r2, #56	; 0x38
 8005a08:	401a      	ands	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1ec      	bne.n	80059ee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a14:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2207      	movs	r2, #7
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d21e      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a22:	4b24      	ldr	r3, [pc, #144]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2207      	movs	r2, #7
 8005a28:	4393      	bics	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a34:	f7fd fb26 	bl	8003084 <HAL_GetTick>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a3c:	e009      	b.n	8005a52 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3e:	f7fd fb21 	bl	8003084 <HAL_GetTick>
 8005a42:	0002      	movs	r2, r0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <HAL_RCC_ClockConfig+0x1f4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e02c      	b.n	8005aac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a52:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2207      	movs	r2, #7
 8005a58:	4013      	ands	r3, r2
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1ee      	bne.n	8005a3e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2204      	movs	r2, #4
 8005a66:	4013      	ands	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6a:	4b14      	ldr	r3, [pc, #80]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <HAL_RCC_ClockConfig+0x200>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	4b10      	ldr	r3, [pc, #64]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a7e:	f000 f829 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 8005a82:	0001      	movs	r1, r0
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <HAL_RCC_ClockConfig+0x1f8>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	220f      	movs	r2, #15
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <HAL_RCC_ClockConfig+0x204>)
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	58d3      	ldr	r3, [r2, r3]
 8005a94:	221f      	movs	r2, #31
 8005a96:	4013      	ands	r3, r2
 8005a98:	000a      	movs	r2, r1
 8005a9a:	40da      	lsrs	r2, r3
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <HAL_RCC_ClockConfig+0x208>)
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <HAL_RCC_ClockConfig+0x20c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f7fd fa91 	bl	8002fcc <HAL_InitTick>
 8005aaa:	0003      	movs	r3, r0
}
 8005aac:	0018      	movs	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b004      	add	sp, #16
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40022000 	.word	0x40022000
 8005ab8:	00001388 	.word	0x00001388
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	fffff0ff 	.word	0xfffff0ff
 8005ac4:	ffff8fff 	.word	0xffff8fff
 8005ac8:	0800a73c 	.word	0x0800a73c
 8005acc:	20003134 	.word	0x20003134
 8005ad0:	20003138 	.word	0x20003138

08005ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ada:	4b3c      	ldr	r3, [pc, #240]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2238      	movs	r2, #56	; 0x38
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d10f      	bne.n	8005b04 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ae4:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	0adb      	lsrs	r3, r3, #11
 8005aea:	2207      	movs	r2, #7
 8005aec:	4013      	ands	r3, r2
 8005aee:	2201      	movs	r2, #1
 8005af0:	409a      	lsls	r2, r3
 8005af2:	0013      	movs	r3, r2
 8005af4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005af6:	6839      	ldr	r1, [r7, #0]
 8005af8:	4835      	ldr	r0, [pc, #212]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005afa:	f7fa fb03 	bl	8000104 <__udivsi3>
 8005afe:	0003      	movs	r3, r0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e05d      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b04:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2238      	movs	r2, #56	; 0x38
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b10:	4b30      	ldr	r3, [pc, #192]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e054      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2238      	movs	r2, #56	; 0x38
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d138      	bne.n	8005b94 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b22:	4b2a      	ldr	r3, [pc, #168]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2203      	movs	r2, #3
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2c:	4b27      	ldr	r3, [pc, #156]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	2207      	movs	r2, #7
 8005b34:	4013      	ands	r3, r2
 8005b36:	3301      	adds	r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10d      	bne.n	8005b5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	4824      	ldr	r0, [pc, #144]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b44:	f7fa fade 	bl	8000104 <__udivsi3>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	227f      	movs	r2, #127	; 0x7f
 8005b54:	4013      	ands	r3, r2
 8005b56:	434b      	muls	r3, r1
 8005b58:	617b      	str	r3, [r7, #20]
        break;
 8005b5a:	e00d      	b.n	8005b78 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b5c:	68b9      	ldr	r1, [r7, #8]
 8005b5e:	481c      	ldr	r0, [pc, #112]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b60:	f7fa fad0 	bl	8000104 <__udivsi3>
 8005b64:	0003      	movs	r3, r0
 8005b66:	0019      	movs	r1, r3
 8005b68:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	227f      	movs	r2, #127	; 0x7f
 8005b70:	4013      	ands	r3, r2
 8005b72:	434b      	muls	r3, r1
 8005b74:	617b      	str	r3, [r7, #20]
        break;
 8005b76:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b78:	4b14      	ldr	r3, [pc, #80]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	0f5b      	lsrs	r3, r3, #29
 8005b7e:	2207      	movs	r2, #7
 8005b80:	4013      	ands	r3, r2
 8005b82:	3301      	adds	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	6978      	ldr	r0, [r7, #20]
 8005b8a:	f7fa fabb 	bl	8000104 <__udivsi3>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	613b      	str	r3, [r7, #16]
 8005b92:	e015      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2238      	movs	r2, #56	; 0x38
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d103      	bne.n	8005ba8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005ba0:	2380      	movs	r3, #128	; 0x80
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	e00b      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2238      	movs	r2, #56	; 0x38
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b18      	cmp	r3, #24
 8005bb2:	d103      	bne.n	8005bbc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005bb4:	23fa      	movs	r3, #250	; 0xfa
 8005bb6:	01db      	lsls	r3, r3, #7
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	e001      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bc0:	693b      	ldr	r3, [r7, #16]
}
 8005bc2:	0018      	movs	r0, r3
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b006      	add	sp, #24
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	00f42400 	.word	0x00f42400
 8005bd4:	007a1200 	.word	0x007a1200

08005bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bdc:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bde:	681b      	ldr	r3, [r3, #0]
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	20003134 	.word	0x20003134

08005bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005bf0:	f7ff fff2 	bl	8005bd8 <HAL_RCC_GetHCLKFreq>
 8005bf4:	0004      	movs	r4, r0
 8005bf6:	f7ff fb39 	bl	800526c <LL_RCC_GetAPB1Prescaler>
 8005bfa:	0003      	movs	r3, r0
 8005bfc:	0b1a      	lsrs	r2, r3, #12
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c00:	0092      	lsls	r2, r2, #2
 8005c02:	58d3      	ldr	r3, [r2, r3]
 8005c04:	221f      	movs	r2, #31
 8005c06:	4013      	ands	r3, r2
 8005c08:	40dc      	lsrs	r4, r3
 8005c0a:	0023      	movs	r3, r4
}
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bdb0      	pop	{r4, r5, r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	0800a77c 	.word	0x0800a77c

08005c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005c20:	2313      	movs	r3, #19
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c28:	2312      	movs	r3, #18
 8005c2a:	18fb      	adds	r3, r7, r3
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	029b      	lsls	r3, r3, #10
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d100      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005c3c:	e0a3      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	2011      	movs	r0, #17
 8005c40:	183b      	adds	r3, r7, r0
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c46:	4bc3      	ldr	r3, [pc, #780]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	055b      	lsls	r3, r3, #21
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d110      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c52:	4bc0      	ldr	r3, [pc, #768]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c56:	4bbf      	ldr	r3, [pc, #764]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c58:	2180      	movs	r1, #128	; 0x80
 8005c5a:	0549      	lsls	r1, r1, #21
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c60:	4bbc      	ldr	r3, [pc, #752]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	055b      	lsls	r3, r3, #21
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c6e:	183b      	adds	r3, r7, r0
 8005c70:	2201      	movs	r2, #1
 8005c72:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c74:	4bb8      	ldr	r3, [pc, #736]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	4bb7      	ldr	r3, [pc, #732]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c7a:	2180      	movs	r1, #128	; 0x80
 8005c7c:	0049      	lsls	r1, r1, #1
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c82:	f7fd f9ff 	bl	8003084 <HAL_GetTick>
 8005c86:	0003      	movs	r3, r0
 8005c88:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8a:	e00b      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c8c:	f7fd f9fa 	bl	8003084 <HAL_GetTick>
 8005c90:	0002      	movs	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d904      	bls.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005c9a:	2313      	movs	r3, #19
 8005c9c:	18fb      	adds	r3, r7, r3
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	701a      	strb	r2, [r3, #0]
        break;
 8005ca2:	e005      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ca4:	4bac      	ldr	r3, [pc, #688]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	005b      	lsls	r3, r3, #1
 8005cac:	4013      	ands	r3, r2
 8005cae:	d0ed      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005cb0:	2313      	movs	r3, #19
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d154      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cba:	4ba6      	ldr	r3, [pc, #664]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cbe:	23c0      	movs	r3, #192	; 0xc0
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d019      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d014      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005cd6:	4b9f      	ldr	r3, [pc, #636]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cda:	4aa0      	ldr	r2, [pc, #640]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ce0:	4b9c      	ldr	r3, [pc, #624]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ce4:	4b9b      	ldr	r3, [pc, #620]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce6:	2180      	movs	r1, #128	; 0x80
 8005ce8:	0249      	lsls	r1, r1, #9
 8005cea:	430a      	orrs	r2, r1
 8005cec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cee:	4b99      	ldr	r3, [pc, #612]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf2:	4b98      	ldr	r3, [pc, #608]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cf4:	499a      	ldr	r1, [pc, #616]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005cf6:	400a      	ands	r2, r1
 8005cf8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cfa:	4b96      	ldr	r3, [pc, #600]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2201      	movs	r2, #1
 8005d04:	4013      	ands	r3, r2
 8005d06:	d016      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fd f9bc 	bl	8003084 <HAL_GetTick>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d10:	e00c      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d12:	f7fd f9b7 	bl	8003084 <HAL_GetTick>
 8005d16:	0002      	movs	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	4a91      	ldr	r2, [pc, #580]	; (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d904      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005d22:	2313      	movs	r3, #19
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	2203      	movs	r2, #3
 8005d28:	701a      	strb	r2, [r3, #0]
            break;
 8005d2a:	e004      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d2c:	4b89      	ldr	r3, [pc, #548]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d30:	2202      	movs	r2, #2
 8005d32:	4013      	ands	r3, r2
 8005d34:	d0ed      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005d36:	2313      	movs	r3, #19
 8005d38:	18fb      	adds	r3, r7, r3
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d40:	4b84      	ldr	r3, [pc, #528]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d44:	4a85      	ldr	r2, [pc, #532]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d46:	4013      	ands	r3, r2
 8005d48:	0019      	movs	r1, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d4e:	4b81      	ldr	r3, [pc, #516]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d50:	430a      	orrs	r2, r1
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d54:	e00c      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d56:	2312      	movs	r3, #18
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2213      	movs	r2, #19
 8005d5c:	18ba      	adds	r2, r7, r2
 8005d5e:	7812      	ldrb	r2, [r2, #0]
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	e005      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	2312      	movs	r3, #18
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	2213      	movs	r2, #19
 8005d6a:	18ba      	adds	r2, r7, r2
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d70:	2311      	movs	r3, #17
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d105      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d7a:	4b76      	ldr	r3, [pc, #472]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d7e:	4b75      	ldr	r3, [pc, #468]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d80:	4979      	ldr	r1, [pc, #484]	; (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005d82:	400a      	ands	r2, r1
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d90:	4b70      	ldr	r3, [pc, #448]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d94:	2203      	movs	r2, #3
 8005d96:	4393      	bics	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005da0:	430a      	orrs	r2, r1
 8005da2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2202      	movs	r2, #2
 8005daa:	4013      	ands	r3, r2
 8005dac:	d009      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dae:	4b69      	ldr	r3, [pc, #420]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db2:	220c      	movs	r2, #12
 8005db4:	4393      	bics	r3, r2
 8005db6:	0019      	movs	r1, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2210      	movs	r2, #16
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d009      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dcc:	4b61      	ldr	r3, [pc, #388]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd0:	4a66      	ldr	r2, [pc, #408]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	0019      	movs	r1, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4013      	ands	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dec:	4b59      	ldr	r3, [pc, #356]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df0:	4a5f      	ldr	r2, [pc, #380]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	0019      	movs	r1, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	4b56      	ldr	r3, [pc, #344]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e0c:	4b51      	ldr	r3, [pc, #324]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	4a58      	ldr	r2, [pc, #352]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	4b4e      	ldr	r3, [pc, #312]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2220      	movs	r2, #32
 8005e26:	4013      	ands	r3, r2
 8005e28:	d009      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e2a:	4b4a      	ldr	r3, [pc, #296]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	4a52      	ldr	r2, [pc, #328]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005e30:	4013      	ands	r3, r2
 8005e32:	0019      	movs	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691a      	ldr	r2, [r3, #16]
 8005e38:	4b46      	ldr	r3, [pc, #280]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	01db      	lsls	r3, r3, #7
 8005e46:	4013      	ands	r3, r2
 8005e48:	d015      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e4a:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	0899      	lsrs	r1, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	05db      	lsls	r3, r3, #23
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d106      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e68:	4b3a      	ldr	r3, [pc, #232]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	0249      	lsls	r1, r1, #9
 8005e72:	430a      	orrs	r2, r1
 8005e74:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	031b      	lsls	r3, r3, #12
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e82:	4b34      	ldr	r3, [pc, #208]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	4393      	bics	r3, r2
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e90:	4b30      	ldr	r3, [pc, #192]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e92:	430a      	orrs	r2, r1
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	039b      	lsls	r3, r3, #14
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d016      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	4a35      	ldr	r2, [pc, #212]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eb0:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	03db      	lsls	r3, r3, #15
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d106      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	0449      	lsls	r1, r1, #17
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	03db      	lsls	r3, r3, #15
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d016      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005edc:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	4a27      	ldr	r2, [pc, #156]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eec:	430a      	orrs	r2, r1
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	045b      	lsls	r3, r3, #17
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d106      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005efc:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f02:	2180      	movs	r1, #128	; 0x80
 8005f04:	0449      	lsls	r1, r1, #17
 8005f06:	430a      	orrs	r2, r1
 8005f08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	4013      	ands	r3, r2
 8005f14:	d016      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f16:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	0019      	movs	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d106      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f36:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f3c:	2180      	movs	r1, #128	; 0x80
 8005f3e:	0249      	lsls	r1, r1, #9
 8005f40:	430a      	orrs	r2, r1
 8005f42:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f44:	2312      	movs	r3, #18
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	781b      	ldrb	r3, [r3, #0]
}
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	b006      	add	sp, #24
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	40021000 	.word	0x40021000
 8005f58:	40007000 	.word	0x40007000
 8005f5c:	fffffcff 	.word	0xfffffcff
 8005f60:	fffeffff 	.word	0xfffeffff
 8005f64:	00001388 	.word	0x00001388
 8005f68:	efffffff 	.word	0xefffffff
 8005f6c:	fffff3ff 	.word	0xfffff3ff
 8005f70:	fff3ffff 	.word	0xfff3ffff
 8005f74:	ffcfffff 	.word	0xffcfffff
 8005f78:	ffffcfff 	.word	0xffffcfff
 8005f7c:	ffbfffff 	.word	0xffbfffff
 8005f80:	feffffff 	.word	0xfeffffff
 8005f84:	ffff3fff 	.word	0xffff3fff

08005f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	029b      	lsls	r3, r3, #10
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d136      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f9e:	4bcd      	ldr	r3, [pc, #820]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fa2:	23c0      	movs	r3, #192	; 0xc0
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005faa:	4bca      	ldr	r3, [pc, #808]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fae:	2202      	movs	r2, #2
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d108      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d103      	bne.n	8005fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005fc0:	2380      	movs	r3, #128	; 0x80
 8005fc2:	021b      	lsls	r3, r3, #8
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	e31c      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005fc8:	4bc2      	ldr	r3, [pc, #776]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fcc:	2202      	movs	r2, #2
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d108      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d103      	bne.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005fde:	23fa      	movs	r3, #250	; 0xfa
 8005fe0:	01db      	lsls	r3, r3, #7
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e30d      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005fe6:	4bbb      	ldr	r3, [pc, #748]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	029b      	lsls	r3, r3, #10
 8005fee:	401a      	ands	r2, r3
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	029b      	lsls	r3, r3, #10
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d000      	beq.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005ff8:	e303      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	23c0      	movs	r3, #192	; 0xc0
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	429a      	cmp	r2, r3
 8006002:	d000      	beq.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8006004:	e2fd      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8006006:	4bb4      	ldr	r3, [pc, #720]	; (80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	e2fa      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 800600c:	4bb1      	ldr	r3, [pc, #708]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	2203      	movs	r2, #3
 8006012:	4013      	ands	r3, r2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d102      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8006018:	4bb0      	ldr	r3, [pc, #704]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	e00a      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 800601e:	4bad      	ldr	r3, [pc, #692]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	2203      	movs	r2, #3
 8006024:	4013      	ands	r3, r2
 8006026:	2b03      	cmp	r3, #3
 8006028:	d102      	bne.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 800602a:	4bad      	ldr	r3, [pc, #692]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	e001      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006034:	4ba7      	ldr	r3, [pc, #668]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	091b      	lsrs	r3, r3, #4
 800603a:	2207      	movs	r2, #7
 800603c:	4013      	ands	r3, r2
 800603e:	3301      	adds	r3, #1
 8006040:	0019      	movs	r1, r3
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7fa f85e 	bl	8000104 <__udivsi3>
 8006048:	0003      	movs	r3, r0
 800604a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	03db      	lsls	r3, r3, #15
 8006052:	429a      	cmp	r2, r3
 8006054:	d100      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8006056:	e28e      	b.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	03db      	lsls	r3, r3, #15
 800605e:	429a      	cmp	r2, r3
 8006060:	d900      	bls.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006062:	e2b7      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	2380      	movs	r3, #128	; 0x80
 8006068:	039b      	lsls	r3, r3, #14
 800606a:	429a      	cmp	r2, r3
 800606c:	d100      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800606e:	e253      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	039b      	lsls	r3, r3, #14
 8006076:	429a      	cmp	r2, r3
 8006078:	d900      	bls.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800607a:	e2ab      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	2380      	movs	r3, #128	; 0x80
 8006080:	031b      	lsls	r3, r3, #12
 8006082:	429a      	cmp	r2, r3
 8006084:	d100      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006086:	e0b2      	b.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	429a      	cmp	r2, r3
 8006090:	d900      	bls.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006092:	e29f      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	01db      	lsls	r3, r3, #7
 800609a:	429a      	cmp	r2, r3
 800609c:	d100      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 800609e:	e103      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	2380      	movs	r3, #128	; 0x80
 80060a4:	01db      	lsls	r3, r3, #7
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d900      	bls.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80060aa:	e293      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	2380      	movs	r3, #128	; 0x80
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d100      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 80060b6:	e165      	b.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	429a      	cmp	r2, r3
 80060c0:	d900      	bls.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 80060c2:	e287      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	2380      	movs	r3, #128	; 0x80
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d100      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80060ce:	e1e3      	b.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d900      	bls.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80060da:	e27b      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d100      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80060e6:	e197      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d900      	bls.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80060f2:	e26f      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d100      	bne.n	80060fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80060fa:	e118      	b.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d900      	bls.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8006102:	e267      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b10      	cmp	r3, #16
 8006108:	d100      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800610a:	e093      	b.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b10      	cmp	r3, #16
 8006110:	d900      	bls.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006112:	e25f      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d003      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d033      	beq.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8006120:	e258      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006122:	4b6c      	ldr	r3, [pc, #432]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	2203      	movs	r2, #3
 8006128:	4013      	ands	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006132:	f7ff fd5b 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 8006136:	0003      	movs	r3, r0
 8006138:	617b      	str	r3, [r7, #20]
        break;
 800613a:	e24d      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d104      	bne.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006142:	f7ff fcc7 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 8006146:	0003      	movs	r3, r0
 8006148:	617b      	str	r3, [r7, #20]
        break;
 800614a:	e245      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800614c:	4b61      	ldr	r3, [pc, #388]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	401a      	ands	r2, r3
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	429a      	cmp	r2, r3
 800615c:	d105      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d102      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006164:	4b5d      	ldr	r3, [pc, #372]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006166:	617b      	str	r3, [r7, #20]
        break;
 8006168:	e236      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800616a:	4b5a      	ldr	r3, [pc, #360]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800616c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616e:	2202      	movs	r2, #2
 8006170:	4013      	ands	r3, r2
 8006172:	2b02      	cmp	r3, #2
 8006174:	d000      	beq.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8006176:	e22f      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b03      	cmp	r3, #3
 800617c:	d000      	beq.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 800617e:	e22b      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	617b      	str	r3, [r7, #20]
        break;
 8006186:	e227      	b.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006188:	4b52      	ldr	r3, [pc, #328]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800618a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618c:	220c      	movs	r2, #12
 800618e:	4013      	ands	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006198:	f7ff fd28 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 800619c:	0003      	movs	r3, r0
 800619e:	617b      	str	r3, [r7, #20]
        break;
 80061a0:	e21c      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d104      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 80061a8:	f7ff fc94 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 80061ac:	0003      	movs	r3, r0
 80061ae:	617b      	str	r3, [r7, #20]
        break;
 80061b0:	e214      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80061b2:	4b48      	ldr	r3, [pc, #288]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	2380      	movs	r3, #128	; 0x80
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	401a      	ands	r2, r3
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d105      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d102      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 80061ca:	4b44      	ldr	r3, [pc, #272]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061cc:	617b      	str	r3, [r7, #20]
        break;
 80061ce:	e205      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80061d0:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d4:	2202      	movs	r2, #2
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d000      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80061dc:	e1fe      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d000      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80061e4:	e1fa      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80061e6:	2380      	movs	r3, #128	; 0x80
 80061e8:	021b      	lsls	r3, r3, #8
 80061ea:	617b      	str	r3, [r7, #20]
        break;
 80061ec:	e1f6      	b.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80061ee:	4b39      	ldr	r3, [pc, #228]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f2:	2240      	movs	r2, #64	; 0x40
 80061f4:	4013      	ands	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	401a      	ands	r2, r3
 8006202:	2380      	movs	r3, #128	; 0x80
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	429a      	cmp	r2, r3
 8006208:	d105      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8006210:	4b34      	ldr	r3, [pc, #208]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006212:	617b      	str	r3, [r7, #20]
        break;
 8006214:	e1e4      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006216:	4b2f      	ldr	r3, [pc, #188]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621a:	2202      	movs	r2, #2
 800621c:	4013      	ands	r3, r2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d000      	beq.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8006222:	e1dd      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b40      	cmp	r3, #64	; 0x40
 8006228:	d000      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 800622a:	e1d9      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 800622c:	2380      	movs	r3, #128	; 0x80
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	617b      	str	r3, [r7, #20]
        break;
 8006232:	e1d5      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006234:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006238:	23c0      	movs	r3, #192	; 0xc0
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4013      	ands	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d104      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006246:	f7ff fcd1 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 800624a:	0003      	movs	r3, r0
 800624c:	617b      	str	r3, [r7, #20]
        break;
 800624e:	e1c9      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	2380      	movs	r3, #128	; 0x80
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	429a      	cmp	r2, r3
 8006258:	d104      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800625a:	f7ff fc3b 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 800625e:	0003      	movs	r3, r0
 8006260:	617b      	str	r3, [r7, #20]
        break;
 8006262:	e1bf      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006264:	4b1b      	ldr	r3, [pc, #108]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	401a      	ands	r2, r3
 800626e:	2380      	movs	r3, #128	; 0x80
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	429a      	cmp	r2, r3
 8006274:	d107      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	429a      	cmp	r2, r3
 800627e:	d102      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006280:	4b16      	ldr	r3, [pc, #88]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006282:	617b      	str	r3, [r7, #20]
        break;
 8006284:	e1ae      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628a:	2202      	movs	r2, #2
 800628c:	4013      	ands	r3, r2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d000      	beq.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006292:	e1a7      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	23c0      	movs	r3, #192	; 0xc0
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	429a      	cmp	r2, r3
 800629c:	d000      	beq.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800629e:	e1a1      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 80062a0:	2380      	movs	r3, #128	; 0x80
 80062a2:	021b      	lsls	r3, r3, #8
 80062a4:	617b      	str	r3, [r7, #20]
        break;
 80062a6:	e19d      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80062a8:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	0f9b      	lsrs	r3, r3, #30
 80062ae:	079b      	lsls	r3, r3, #30
 80062b0:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 80062b8:	f7ff fc0c 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 80062bc:	0003      	movs	r3, r0
 80062be:	617b      	str	r3, [r7, #20]
        break;
 80062c0:	e192      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	061b      	lsls	r3, r3, #24
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 80062cc:	4b03      	ldr	r3, [pc, #12]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062ce:	617b      	str	r3, [r7, #20]
        break;
 80062d0:	e18a      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	40021000 	.word	0x40021000
 80062d8:	0003d090 	.word	0x0003d090
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	007a1200 	.word	0x007a1200
 80062e4:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	05db      	lsls	r3, r3, #23
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d000      	beq.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80062f2:	e179      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80062f4:	4bc5      	ldr	r3, [pc, #788]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	2380      	movs	r3, #128	; 0x80
 80062fa:	025b      	lsls	r3, r3, #9
 80062fc:	4013      	ands	r3, r2
 80062fe:	d100      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006300:	e172      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006302:	4bc2      	ldr	r3, [pc, #776]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	227f      	movs	r2, #127	; 0x7f
 800630a:	4013      	ands	r3, r2
 800630c:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	435a      	muls	r2, r3
 8006314:	4bbd      	ldr	r3, [pc, #756]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	0c5b      	lsrs	r3, r3, #17
 800631a:	211f      	movs	r1, #31
 800631c:	400b      	ands	r3, r1
 800631e:	3301      	adds	r3, #1
 8006320:	0019      	movs	r1, r3
 8006322:	0010      	movs	r0, r2
 8006324:	f7f9 feee 	bl	8000104 <__udivsi3>
 8006328:	0003      	movs	r3, r0
 800632a:	617b      	str	r3, [r7, #20]
        break;
 800632c:	e15c      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800632e:	4bb7      	ldr	r3, [pc, #732]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006332:	23c0      	movs	r3, #192	; 0xc0
 8006334:	019b      	lsls	r3, r3, #6
 8006336:	4013      	ands	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006340:	f7ff fc54 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 8006344:	0003      	movs	r3, r0
 8006346:	617b      	str	r3, [r7, #20]
        break;
 8006348:	e150      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	2380      	movs	r3, #128	; 0x80
 800634e:	015b      	lsls	r3, r3, #5
 8006350:	429a      	cmp	r2, r3
 8006352:	d104      	bne.n	800635e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006354:	f7ff fbbe 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 8006358:	0003      	movs	r3, r0
 800635a:	617b      	str	r3, [r7, #20]
        break;
 800635c:	e146      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800635e:	4bab      	ldr	r3, [pc, #684]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	2380      	movs	r3, #128	; 0x80
 8006364:	00db      	lsls	r3, r3, #3
 8006366:	401a      	ands	r2, r3
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	429a      	cmp	r2, r3
 800636e:	d000      	beq.n	8006372 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8006370:	e13c      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	019b      	lsls	r3, r3, #6
 8006378:	429a      	cmp	r2, r3
 800637a:	d000      	beq.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800637c:	e136      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 800637e:	4ba4      	ldr	r3, [pc, #656]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006380:	617b      	str	r3, [r7, #20]
        break;
 8006382:	e133      	b.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006384:	4ba1      	ldr	r3, [pc, #644]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006388:	23c0      	movs	r3, #192	; 0xc0
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	01db      	lsls	r3, r3, #7
 8006396:	429a      	cmp	r2, r3
 8006398:	d11c      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800639a:	4b9c      	ldr	r3, [pc, #624]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	025b      	lsls	r3, r3, #9
 80063a2:	4013      	ands	r3, r2
 80063a4:	d100      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 80063a6:	e123      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80063a8:	4b98      	ldr	r3, [pc, #608]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	0a1b      	lsrs	r3, r3, #8
 80063ae:	227f      	movs	r2, #127	; 0x7f
 80063b0:	4013      	ands	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	435a      	muls	r2, r3
 80063ba:	4b94      	ldr	r3, [pc, #592]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	0c5b      	lsrs	r3, r3, #17
 80063c0:	211f      	movs	r1, #31
 80063c2:	400b      	ands	r3, r1
 80063c4:	3301      	adds	r3, #1
 80063c6:	0019      	movs	r1, r3
 80063c8:	0010      	movs	r0, r2
 80063ca:	f7f9 fe9b 	bl	8000104 <__udivsi3>
 80063ce:	0003      	movs	r3, r0
 80063d0:	617b      	str	r3, [r7, #20]
        break;
 80063d2:	e10d      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d104      	bne.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80063da:	f7ff fb7b 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 80063de:	0003      	movs	r3, r0
 80063e0:	617b      	str	r3, [r7, #20]
        break;
 80063e2:	e105      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80063e4:	4b89      	ldr	r3, [pc, #548]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	00db      	lsls	r3, r3, #3
 80063ec:	401a      	ands	r2, r3
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	00db      	lsls	r3, r3, #3
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d107      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d102      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006400:	4b83      	ldr	r3, [pc, #524]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006402:	617b      	str	r3, [r7, #20]
        break;
 8006404:	e0f4      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	23c0      	movs	r3, #192	; 0xc0
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	429a      	cmp	r2, r3
 800640e:	d000      	beq.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006410:	e0ee      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006412:	4b80      	ldr	r3, [pc, #512]	; (8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006414:	617b      	str	r3, [r7, #20]
        break;
 8006416:	e0eb      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006418:	4b7c      	ldr	r3, [pc, #496]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800641a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800641c:	23c0      	movs	r3, #192	; 0xc0
 800641e:	031b      	lsls	r3, r3, #12
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800642a:	f7ff fbdf 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 800642e:	0003      	movs	r3, r0
 8006430:	617b      	str	r3, [r7, #20]
        break;
 8006432:	e0df      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006434:	4b75      	ldr	r3, [pc, #468]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006438:	2202      	movs	r2, #2
 800643a:	4013      	ands	r3, r2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d108      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	2380      	movs	r3, #128	; 0x80
 8006444:	02db      	lsls	r3, r3, #11
 8006446:	429a      	cmp	r2, r3
 8006448:	d103      	bne.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800644a:	23fa      	movs	r3, #250	; 0xfa
 800644c:	01db      	lsls	r3, r3, #7
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e021      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006452:	4b6e      	ldr	r3, [pc, #440]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	401a      	ands	r2, r3
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	429a      	cmp	r2, r3
 8006462:	d107      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	2380      	movs	r3, #128	; 0x80
 8006468:	031b      	lsls	r3, r3, #12
 800646a:	429a      	cmp	r2, r3
 800646c:	d102      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800646e:	4b68      	ldr	r3, [pc, #416]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e010      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006474:	4b65      	ldr	r3, [pc, #404]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006478:	2202      	movs	r2, #2
 800647a:	4013      	ands	r3, r2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d000      	beq.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006480:	e0b8      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	23c0      	movs	r3, #192	; 0xc0
 8006486:	031b      	lsls	r3, r3, #12
 8006488:	429a      	cmp	r2, r3
 800648a:	d000      	beq.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800648c:	e0b2      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800648e:	2380      	movs	r3, #128	; 0x80
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	617b      	str	r3, [r7, #20]
        break;
 8006494:	e0ae      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006496:	e0ad      	b.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006498:	4b5c      	ldr	r3, [pc, #368]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800649a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800649c:	23c0      	movs	r3, #192	; 0xc0
 800649e:	039b      	lsls	r3, r3, #14
 80064a0:	4013      	ands	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d104      	bne.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064aa:	f7ff fb9f 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 80064ae:	0003      	movs	r3, r0
 80064b0:	617b      	str	r3, [r7, #20]
        break;
 80064b2:	e0a1      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80064b4:	4b55      	ldr	r3, [pc, #340]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b8:	2202      	movs	r2, #2
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d108      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	035b      	lsls	r3, r3, #13
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d103      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80064ca:	23fa      	movs	r3, #250	; 0xfa
 80064cc:	01db      	lsls	r3, r3, #7
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	e021      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80064d2:	4b4e      	ldr	r3, [pc, #312]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	2380      	movs	r3, #128	; 0x80
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	401a      	ands	r2, r3
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d107      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	2380      	movs	r3, #128	; 0x80
 80064e8:	039b      	lsls	r3, r3, #14
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d102      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80064ee:	4b48      	ldr	r3, [pc, #288]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064f0:	617b      	str	r3, [r7, #20]
 80064f2:	e010      	b.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80064f4:	4b45      	ldr	r3, [pc, #276]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f8:	2202      	movs	r2, #2
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d000      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006500:	e07a      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	23c0      	movs	r3, #192	; 0xc0
 8006506:	039b      	lsls	r3, r3, #14
 8006508:	429a      	cmp	r2, r3
 800650a:	d000      	beq.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 800650c:	e074      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	617b      	str	r3, [r7, #20]
        break;
 8006514:	e070      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006516:	e06f      	b.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 8006518:	4b3c      	ldr	r3, [pc, #240]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800651a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800651c:	2380      	movs	r3, #128	; 0x80
 800651e:	03db      	lsls	r3, r3, #15
 8006520:	4013      	ands	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	03db      	lsls	r3, r3, #15
 800652a:	429a      	cmp	r2, r3
 800652c:	d11b      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800652e:	4b37      	ldr	r3, [pc, #220]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	2380      	movs	r3, #128	; 0x80
 8006534:	045b      	lsls	r3, r3, #17
 8006536:	4013      	ands	r3, r2
 8006538:	d060      	beq.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800653a:	4b34      	ldr	r3, [pc, #208]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	227f      	movs	r2, #127	; 0x7f
 8006542:	4013      	ands	r3, r2
 8006544:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	435a      	muls	r2, r3
 800654c:	4b2f      	ldr	r3, [pc, #188]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	0e5b      	lsrs	r3, r3, #25
 8006552:	2107      	movs	r1, #7
 8006554:	400b      	ands	r3, r1
 8006556:	3301      	adds	r3, #1
 8006558:	0019      	movs	r1, r3
 800655a:	0010      	movs	r0, r2
 800655c:	f7f9 fdd2 	bl	8000104 <__udivsi3>
 8006560:	0003      	movs	r3, r0
 8006562:	617b      	str	r3, [r7, #20]
        break;
 8006564:	e04a      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d147      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 800656c:	f7ff fb3e 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 8006570:	0003      	movs	r3, r0
 8006572:	617b      	str	r3, [r7, #20]
        break;
 8006574:	e042      	b.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006576:	4b25      	ldr	r3, [pc, #148]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800657a:	2380      	movs	r3, #128	; 0x80
 800657c:	045b      	lsls	r3, r3, #17
 800657e:	4013      	ands	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	2380      	movs	r3, #128	; 0x80
 8006586:	045b      	lsls	r3, r3, #17
 8006588:	429a      	cmp	r2, r3
 800658a:	d11b      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800658c:	4b1f      	ldr	r3, [pc, #124]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	045b      	lsls	r3, r3, #17
 8006594:	4013      	ands	r3, r2
 8006596:	d033      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006598:	4b1c      	ldr	r3, [pc, #112]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	0a1b      	lsrs	r3, r3, #8
 800659e:	227f      	movs	r2, #127	; 0x7f
 80065a0:	4013      	ands	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	435a      	muls	r2, r3
 80065aa:	4b18      	ldr	r3, [pc, #96]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	0e5b      	lsrs	r3, r3, #25
 80065b0:	2107      	movs	r1, #7
 80065b2:	400b      	ands	r3, r1
 80065b4:	3301      	adds	r3, #1
 80065b6:	0019      	movs	r1, r3
 80065b8:	0010      	movs	r0, r2
 80065ba:	f7f9 fda3 	bl	8000104 <__udivsi3>
 80065be:	0003      	movs	r3, r0
 80065c0:	617b      	str	r3, [r7, #20]
        break;
 80065c2:	e01d      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d11a      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065ca:	f7ff fb0f 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 80065ce:	0003      	movs	r3, r0
 80065d0:	617b      	str	r3, [r7, #20]
        break;
 80065d2:	e015      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	e014      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065d8:	46c0      	nop			; (mov r8, r8)
 80065da:	e012      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065dc:	46c0      	nop			; (mov r8, r8)
 80065de:	e010      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065e0:	46c0      	nop			; (mov r8, r8)
 80065e2:	e00e      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065e4:	46c0      	nop			; (mov r8, r8)
 80065e6:	e00c      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065e8:	46c0      	nop			; (mov r8, r8)
 80065ea:	e00a      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	e008      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065f0:	46c0      	nop			; (mov r8, r8)
 80065f2:	e006      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065f4:	46c0      	nop			; (mov r8, r8)
 80065f6:	e004      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065f8:	46c0      	nop			; (mov r8, r8)
 80065fa:	e002      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065fc:	46c0      	nop			; (mov r8, r8)
 80065fe:	e000      	b.n	8006602 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006600:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006602:	697b      	ldr	r3, [r7, #20]
}
 8006604:	0018      	movs	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	b006      	add	sp, #24
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40021000 	.word	0x40021000
 8006610:	00f42400 	.word	0x00f42400
 8006614:	0000bb80 	.word	0x0000bb80

08006618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e0a8      	b.n	800677c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	2382      	movs	r3, #130	; 0x82
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	429a      	cmp	r2, r3
 800663c:	d009      	beq.n	8006652 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	61da      	str	r2, [r3, #28]
 8006644:	e005      	b.n	8006652 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	225d      	movs	r2, #93	; 0x5d
 800665c:	5c9b      	ldrb	r3, [r3, r2]
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d107      	bne.n	8006674 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	225c      	movs	r2, #92	; 0x5c
 8006668:	2100      	movs	r1, #0
 800666a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0018      	movs	r0, r3
 8006670:	f7fc f96a 	bl	8002948 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	225d      	movs	r2, #93	; 0x5d
 8006678:	2102      	movs	r1, #2
 800667a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2140      	movs	r1, #64	; 0x40
 8006688:	438a      	bics	r2, r1
 800668a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	23e0      	movs	r3, #224	; 0xe0
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	429a      	cmp	r2, r3
 8006696:	d902      	bls.n	800669e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e002      	b.n	80066a4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800669e:	2380      	movs	r3, #128	; 0x80
 80066a0:	015b      	lsls	r3, r3, #5
 80066a2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	23f0      	movs	r3, #240	; 0xf0
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d008      	beq.n	80066c2 <HAL_SPI_Init+0xaa>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	23e0      	movs	r3, #224	; 0xe0
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d002      	beq.n	80066c2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	2382      	movs	r3, #130	; 0x82
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	401a      	ands	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6899      	ldr	r1, [r3, #8]
 80066d0:	2384      	movs	r3, #132	; 0x84
 80066d2:	021b      	lsls	r3, r3, #8
 80066d4:	400b      	ands	r3, r1
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2102      	movs	r1, #2
 80066de:	400b      	ands	r3, r1
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	2101      	movs	r1, #1
 80066e8:	400b      	ands	r3, r1
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6999      	ldr	r1, [r3, #24]
 80066f0:	2380      	movs	r3, #128	; 0x80
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	400b      	ands	r3, r1
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	2138      	movs	r1, #56	; 0x38
 80066fe:	400b      	ands	r3, r1
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	400b      	ands	r3, r1
 800670a:	431a      	orrs	r2, r3
 800670c:	0011      	movs	r1, r2
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	401a      	ands	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	2204      	movs	r2, #4
 8006728:	401a      	ands	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	2110      	movs	r1, #16
 8006730:	400b      	ands	r3, r1
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	2108      	movs	r1, #8
 800673a:	400b      	ands	r3, r1
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68d9      	ldr	r1, [r3, #12]
 8006742:	23f0      	movs	r3, #240	; 0xf0
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	400b      	ands	r3, r1
 8006748:	431a      	orrs	r2, r3
 800674a:	0011      	movs	r1, r2
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	015b      	lsls	r3, r3, #5
 8006752:	401a      	ands	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	69da      	ldr	r2, [r3, #28]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4907      	ldr	r1, [pc, #28]	; (8006784 <HAL_SPI_Init+0x16c>)
 8006768:	400a      	ands	r2, r1
 800676a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	225d      	movs	r2, #93	; 0x5d
 8006776:	2101      	movs	r1, #1
 8006778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	0018      	movs	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	b004      	add	sp, #16
 8006782:	bd80      	pop	{r7, pc}
 8006784:	fffff7ff 	.word	0xfffff7ff

08006788 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b088      	sub	sp, #32
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	1dbb      	adds	r3, r7, #6
 8006796:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006798:	231f      	movs	r3, #31
 800679a:	18fb      	adds	r3, r7, r3
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	225c      	movs	r2, #92	; 0x5c
 80067a4:	5c9b      	ldrb	r3, [r3, r2]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_SPI_Transmit+0x26>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e140      	b.n	8006a30 <HAL_SPI_Transmit+0x2a8>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	225c      	movs	r2, #92	; 0x5c
 80067b2:	2101      	movs	r1, #1
 80067b4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067b6:	f7fc fc65 	bl	8003084 <HAL_GetTick>
 80067ba:	0003      	movs	r3, r0
 80067bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80067be:	2316      	movs	r3, #22
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	1dba      	adds	r2, r7, #6
 80067c4:	8812      	ldrh	r2, [r2, #0]
 80067c6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	225d      	movs	r2, #93	; 0x5d
 80067cc:	5c9b      	ldrb	r3, [r3, r2]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d004      	beq.n	80067de <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80067d4:	231f      	movs	r3, #31
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2202      	movs	r2, #2
 80067da:	701a      	strb	r2, [r3, #0]
    goto error;
 80067dc:	e11d      	b.n	8006a1a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_SPI_Transmit+0x64>
 80067e4:	1dbb      	adds	r3, r7, #6
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80067ec:	231f      	movs	r3, #31
 80067ee:	18fb      	adds	r3, r7, r3
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
    goto error;
 80067f4:	e111      	b.n	8006a1a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	225d      	movs	r2, #93	; 0x5d
 80067fa:	2103      	movs	r1, #3
 80067fc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1dba      	adds	r2, r7, #6
 800680e:	8812      	ldrh	r2, [r2, #0]
 8006810:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1dba      	adds	r2, r7, #6
 8006816:	8812      	ldrh	r2, [r2, #0]
 8006818:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2244      	movs	r2, #68	; 0x44
 8006824:	2100      	movs	r1, #0
 8006826:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2246      	movs	r2, #70	; 0x46
 800682c:	2100      	movs	r1, #0
 800682e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	2380      	movs	r3, #128	; 0x80
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	429a      	cmp	r2, r3
 8006846:	d110      	bne.n	800686a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2140      	movs	r1, #64	; 0x40
 8006854:	438a      	bics	r2, r1
 8006856:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	01c9      	lsls	r1, r1, #7
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2240      	movs	r2, #64	; 0x40
 8006872:	4013      	ands	r3, r2
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d007      	beq.n	8006888 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2140      	movs	r1, #64	; 0x40
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68da      	ldr	r2, [r3, #12]
 800688c:	23e0      	movs	r3, #224	; 0xe0
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	429a      	cmp	r2, r3
 8006892:	d94e      	bls.n	8006932 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d004      	beq.n	80068a6 <HAL_SPI_Transmit+0x11e>
 800689c:	2316      	movs	r3, #22
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d13f      	bne.n	8006926 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	881a      	ldrh	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	1c9a      	adds	r2, r3, #2
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068ca:	e02c      	b.n	8006926 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2202      	movs	r2, #2
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d112      	bne.n	8006900 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068de:	881a      	ldrh	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	1c9a      	adds	r2, r3, #2
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068fe:	e012      	b.n	8006926 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006900:	f7fc fbc0 	bl	8003084 <HAL_GetTick>
 8006904:	0002      	movs	r2, r0
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	429a      	cmp	r2, r3
 800690e:	d802      	bhi.n	8006916 <HAL_SPI_Transmit+0x18e>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	d102      	bne.n	800691c <HAL_SPI_Transmit+0x194>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800691c:	231f      	movs	r3, #31
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	2203      	movs	r2, #3
 8006922:	701a      	strb	r2, [r3, #0]
          goto error;
 8006924:	e079      	b.n	8006a1a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1cd      	bne.n	80068cc <HAL_SPI_Transmit+0x144>
 8006930:	e04f      	b.n	80069d2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <HAL_SPI_Transmit+0x1bc>
 800693a:	2316      	movs	r3, #22
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d141      	bne.n	80069c8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800696a:	e02d      	b.n	80069c8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	2202      	movs	r2, #2
 8006974:	4013      	ands	r3, r2
 8006976:	2b02      	cmp	r3, #2
 8006978:	d113      	bne.n	80069a2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	7812      	ldrb	r2, [r2, #0]
 8006986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069a0:	e012      	b.n	80069c8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a2:	f7fc fb6f 	bl	8003084 <HAL_GetTick>
 80069a6:	0002      	movs	r2, r0
 80069a8:	69bb      	ldr	r3, [r7, #24]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d802      	bhi.n	80069b8 <HAL_SPI_Transmit+0x230>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	d102      	bne.n	80069be <HAL_SPI_Transmit+0x236>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80069be:	231f      	movs	r3, #31
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2203      	movs	r2, #3
 80069c4:	701a      	strb	r2, [r3, #0]
          goto error;
 80069c6:	e028      	b.n	8006a1a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1cc      	bne.n	800696c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	0018      	movs	r0, r3
 80069da:	f001 f9cb 	bl	8007d74 <SPI_EndRxTxTransaction>
 80069de:	1e03      	subs	r3, r0, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d004      	beq.n	8006a18 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006a0e:	231f      	movs	r3, #31
 8006a10:	18fb      	adds	r3, r7, r3
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e000      	b.n	8006a1a <HAL_SPI_Transmit+0x292>
  }

error:
 8006a18:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	225d      	movs	r2, #93	; 0x5d
 8006a1e:	2101      	movs	r1, #1
 8006a20:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	225c      	movs	r2, #92	; 0x5c
 8006a26:	2100      	movs	r1, #0
 8006a28:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a2a:	231f      	movs	r3, #31
 8006a2c:	18fb      	adds	r3, r7, r3
 8006a2e:	781b      	ldrb	r3, [r3, #0]
}
 8006a30:	0018      	movs	r0, r3
 8006a32:	46bd      	mov	sp, r7
 8006a34:	b008      	add	sp, #32
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b590      	push	{r4, r7, lr}
 8006a3a:	b089      	sub	sp, #36	; 0x24
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	603b      	str	r3, [r7, #0]
 8006a44:	1dbb      	adds	r3, r7, #6
 8006a46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a48:	2317      	movs	r3, #23
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	2382      	movs	r3, #130	; 0x82
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d113      	bne.n	8006a84 <HAL_SPI_Receive+0x4c>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10f      	bne.n	8006a84 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	225d      	movs	r2, #93	; 0x5d
 8006a68:	2104      	movs	r1, #4
 8006a6a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a6c:	1dbb      	adds	r3, r7, #6
 8006a6e:	881c      	ldrh	r4, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	0023      	movs	r3, r4
 8006a7c:	f000 f928 	bl	8006cd0 <HAL_SPI_TransmitReceive>
 8006a80:	0003      	movs	r3, r0
 8006a82:	e11c      	b.n	8006cbe <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	225c      	movs	r2, #92	; 0x5c
 8006a88:	5c9b      	ldrb	r3, [r3, r2]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d101      	bne.n	8006a92 <HAL_SPI_Receive+0x5a>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	e115      	b.n	8006cbe <HAL_SPI_Receive+0x286>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	225c      	movs	r2, #92	; 0x5c
 8006a96:	2101      	movs	r1, #1
 8006a98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a9a:	f7fc faf3 	bl	8003084 <HAL_GetTick>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	225d      	movs	r2, #93	; 0x5d
 8006aa6:	5c9b      	ldrb	r3, [r3, r2]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d004      	beq.n	8006ab8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006aae:	2317      	movs	r3, #23
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ab6:	e0f7      	b.n	8006ca8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_SPI_Receive+0x8e>
 8006abe:	1dbb      	adds	r3, r7, #6
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006ac6:	2317      	movs	r3, #23
 8006ac8:	18fb      	adds	r3, r7, r3
 8006aca:	2201      	movs	r2, #1
 8006acc:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ace:	e0eb      	b.n	8006ca8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	225d      	movs	r2, #93	; 0x5d
 8006ad4:	2104      	movs	r1, #4
 8006ad6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	1dba      	adds	r2, r7, #6
 8006ae8:	2144      	movs	r1, #68	; 0x44
 8006aea:	8812      	ldrh	r2, [r2, #0]
 8006aec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	1dba      	adds	r2, r7, #6
 8006af2:	2146      	movs	r1, #70	; 0x46
 8006af4:	8812      	ldrh	r2, [r2, #0]
 8006af6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68da      	ldr	r2, [r3, #12]
 8006b1a:	23e0      	movs	r3, #224	; 0xe0
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d908      	bls.n	8006b34 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4966      	ldr	r1, [pc, #408]	; (8006cc8 <HAL_SPI_Receive+0x290>)
 8006b2e:	400a      	ands	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
 8006b32:	e008      	b.n	8006b46 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	0149      	lsls	r1, r1, #5
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	2380      	movs	r3, #128	; 0x80
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d10f      	bne.n	8006b72 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2140      	movs	r1, #64	; 0x40
 8006b5e:	438a      	bics	r2, r1
 8006b60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4957      	ldr	r1, [pc, #348]	; (8006ccc <HAL_SPI_Receive+0x294>)
 8006b6e:	400a      	ands	r2, r1
 8006b70:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2240      	movs	r2, #64	; 0x40
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d007      	beq.n	8006b90 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2140      	movs	r1, #64	; 0x40
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	23e0      	movs	r3, #224	; 0xe0
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d900      	bls.n	8006b9e <HAL_SPI_Receive+0x166>
 8006b9c:	e069      	b.n	8006c72 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b9e:	e031      	b.n	8006c04 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d117      	bne.n	8006bde <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	330c      	adds	r3, #12
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	1c5a      	adds	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2246      	movs	r2, #70	; 0x46
 8006bce:	5a9b      	ldrh	r3, [r3, r2]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b299      	uxth	r1, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2246      	movs	r2, #70	; 0x46
 8006bda:	5299      	strh	r1, [r3, r2]
 8006bdc:	e012      	b.n	8006c04 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bde:	f7fc fa51 	bl	8003084 <HAL_GetTick>
 8006be2:	0002      	movs	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d802      	bhi.n	8006bf4 <HAL_SPI_Receive+0x1bc>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	d102      	bne.n	8006bfa <HAL_SPI_Receive+0x1c2>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006bfa:	2317      	movs	r3, #23
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	2203      	movs	r2, #3
 8006c00:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c02:	e051      	b.n	8006ca8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2246      	movs	r2, #70	; 0x46
 8006c08:	5a9b      	ldrh	r3, [r3, r2]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1c7      	bne.n	8006ba0 <HAL_SPI_Receive+0x168>
 8006c10:	e035      	b.n	8006c7e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d115      	bne.n	8006c4c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	b292      	uxth	r2, r2
 8006c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2246      	movs	r2, #70	; 0x46
 8006c3c:	5a9b      	ldrh	r3, [r3, r2]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b299      	uxth	r1, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2246      	movs	r2, #70	; 0x46
 8006c48:	5299      	strh	r1, [r3, r2]
 8006c4a:	e012      	b.n	8006c72 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4c:	f7fc fa1a 	bl	8003084 <HAL_GetTick>
 8006c50:	0002      	movs	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d802      	bhi.n	8006c62 <HAL_SPI_Receive+0x22a>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	d102      	bne.n	8006c68 <HAL_SPI_Receive+0x230>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006c68:	2317      	movs	r3, #23
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c70:	e01a      	b.n	8006ca8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2246      	movs	r2, #70	; 0x46
 8006c76:	5a9b      	ldrh	r3, [r3, r2]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1c9      	bne.n	8006c12 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f001 f817 	bl	8007cb8 <SPI_EndRxTransaction>
 8006c8a:	1e03      	subs	r3, r0, #0
 8006c8c:	d002      	beq.n	8006c94 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d004      	beq.n	8006ca6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006c9c:	2317      	movs	r3, #23
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e000      	b.n	8006ca8 <HAL_SPI_Receive+0x270>
  }

error :
 8006ca6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	225d      	movs	r2, #93	; 0x5d
 8006cac:	2101      	movs	r1, #1
 8006cae:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	225c      	movs	r2, #92	; 0x5c
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006cb8:	2317      	movs	r3, #23
 8006cba:	18fb      	adds	r3, r7, r3
 8006cbc:	781b      	ldrb	r3, [r3, #0]
}
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b007      	add	sp, #28
 8006cc4:	bd90      	pop	{r4, r7, pc}
 8006cc6:	46c0      	nop			; (mov r8, r8)
 8006cc8:	ffffefff 	.word	0xffffefff
 8006ccc:	ffffbfff 	.word	0xffffbfff

08006cd0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	001a      	movs	r2, r3
 8006cde:	1cbb      	adds	r3, r7, #2
 8006ce0:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ce6:	2323      	movs	r3, #35	; 0x23
 8006ce8:	18fb      	adds	r3, r7, r3
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	225c      	movs	r2, #92	; 0x5c
 8006cf2:	5c9b      	ldrb	r3, [r3, r2]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_SPI_TransmitReceive+0x2c>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e1b5      	b.n	8007068 <HAL_SPI_TransmitReceive+0x398>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	225c      	movs	r2, #92	; 0x5c
 8006d00:	2101      	movs	r1, #1
 8006d02:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d04:	f7fc f9be 	bl	8003084 <HAL_GetTick>
 8006d08:	0003      	movs	r3, r0
 8006d0a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d0c:	201b      	movs	r0, #27
 8006d0e:	183b      	adds	r3, r7, r0
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	215d      	movs	r1, #93	; 0x5d
 8006d14:	5c52      	ldrb	r2, [r2, r1]
 8006d16:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d1e:	2312      	movs	r3, #18
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	1cba      	adds	r2, r7, #2
 8006d24:	8812      	ldrh	r2, [r2, #0]
 8006d26:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d28:	183b      	adds	r3, r7, r0
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d011      	beq.n	8006d54 <HAL_SPI_TransmitReceive+0x84>
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	2382      	movs	r3, #130	; 0x82
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d107      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <HAL_SPI_TransmitReceive+0x7a>
 8006d42:	183b      	adds	r3, r7, r0
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d004      	beq.n	8006d54 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006d4a:	2323      	movs	r3, #35	; 0x23
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	2202      	movs	r2, #2
 8006d50:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d52:	e17e      	b.n	8007052 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d006      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0x98>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0x98>
 8006d60:	1cbb      	adds	r3, r7, #2
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006d68:	2323      	movs	r3, #35	; 0x23
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d70:	e16f      	b.n	8007052 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	225d      	movs	r2, #93	; 0x5d
 8006d76:	5c9b      	ldrb	r3, [r3, r2]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d003      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	225d      	movs	r2, #93	; 0x5d
 8006d82:	2105      	movs	r1, #5
 8006d84:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1cba      	adds	r2, r7, #2
 8006d96:	2146      	movs	r1, #70	; 0x46
 8006d98:	8812      	ldrh	r2, [r2, #0]
 8006d9a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	1cba      	adds	r2, r7, #2
 8006da0:	2144      	movs	r1, #68	; 0x44
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	1cba      	adds	r2, r7, #2
 8006db0:	8812      	ldrh	r2, [r2, #0]
 8006db2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	1cba      	adds	r2, r7, #2
 8006db8:	8812      	ldrh	r2, [r2, #0]
 8006dba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	23e0      	movs	r3, #224	; 0xe0
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d908      	bls.n	8006de6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	49a4      	ldr	r1, [pc, #656]	; (8007070 <HAL_SPI_TransmitReceive+0x3a0>)
 8006de0:	400a      	ands	r2, r1
 8006de2:	605a      	str	r2, [r3, #4]
 8006de4:	e008      	b.n	8006df8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2180      	movs	r1, #128	; 0x80
 8006df2:	0149      	lsls	r1, r1, #5
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	4013      	ands	r3, r2
 8006e02:	2b40      	cmp	r3, #64	; 0x40
 8006e04:	d007      	beq.n	8006e16 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2140      	movs	r1, #64	; 0x40
 8006e12:	430a      	orrs	r2, r1
 8006e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	23e0      	movs	r3, #224	; 0xe0
 8006e1c:	00db      	lsls	r3, r3, #3
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d800      	bhi.n	8006e24 <HAL_SPI_TransmitReceive+0x154>
 8006e22:	e07f      	b.n	8006f24 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_SPI_TransmitReceive+0x168>
 8006e2c:	2312      	movs	r3, #18
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d000      	beq.n	8006e38 <HAL_SPI_TransmitReceive+0x168>
 8006e36:	e069      	b.n	8006f0c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	881a      	ldrh	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	1c9a      	adds	r2, r3, #2
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e5c:	e056      	b.n	8006f0c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2202      	movs	r2, #2
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d11b      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x1d4>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d016      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x1d4>
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d113      	bne.n	8006ea4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	881a      	ldrh	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	1c9a      	adds	r2, r3, #2
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d11c      	bne.n	8006eec <HAL_SPI_TransmitReceive+0x21c>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2246      	movs	r2, #70	; 0x46
 8006eb6:	5a9b      	ldrh	r3, [r3, r2]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d016      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	b292      	uxth	r2, r2
 8006eca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	1c9a      	adds	r2, r3, #2
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2246      	movs	r2, #70	; 0x46
 8006eda:	5a9b      	ldrh	r3, [r3, r2]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b299      	uxth	r1, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2246      	movs	r2, #70	; 0x46
 8006ee6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006eec:	f7fc f8ca 	bl	8003084 <HAL_GetTick>
 8006ef0:	0002      	movs	r2, r0
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d807      	bhi.n	8006f0c <HAL_SPI_TransmitReceive+0x23c>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	3301      	adds	r3, #1
 8006f00:	d004      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006f02:	2323      	movs	r3, #35	; 0x23
 8006f04:	18fb      	adds	r3, r7, r3
 8006f06:	2203      	movs	r2, #3
 8006f08:	701a      	strb	r2, [r3, #0]
        goto error;
 8006f0a:	e0a2      	b.n	8007052 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1a3      	bne.n	8006e5e <HAL_SPI_TransmitReceive+0x18e>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2246      	movs	r2, #70	; 0x46
 8006f1a:	5a9b      	ldrh	r3, [r3, r2]
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d19d      	bne.n	8006e5e <HAL_SPI_TransmitReceive+0x18e>
 8006f22:	e085      	b.n	8007030 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_SPI_TransmitReceive+0x268>
 8006f2c:	2312      	movs	r3, #18
 8006f2e:	18fb      	adds	r3, r7, r3
 8006f30:	881b      	ldrh	r3, [r3, #0]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d000      	beq.n	8006f38 <HAL_SPI_TransmitReceive+0x268>
 8006f36:	e070      	b.n	800701a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f5e:	e05c      	b.n	800701a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	2202      	movs	r2, #2
 8006f68:	4013      	ands	r3, r2
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d11c      	bne.n	8006fa8 <HAL_SPI_TransmitReceive+0x2d8>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d017      	beq.n	8006fa8 <HAL_SPI_TransmitReceive+0x2d8>
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d114      	bne.n	8006fa8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	330c      	adds	r3, #12
 8006f88:	7812      	ldrb	r2, [r2, #0]
 8006f8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d11e      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x324>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2246      	movs	r2, #70	; 0x46
 8006fba:	5a9b      	ldrh	r3, [r3, r2]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	001a      	movs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2246      	movs	r2, #70	; 0x46
 8006fe2:	5a9b      	ldrh	r3, [r3, r2]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2246      	movs	r2, #70	; 0x46
 8006fee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ff4:	f7fc f846 	bl	8003084 <HAL_GetTick>
 8006ff8:	0002      	movs	r2, r0
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007000:	429a      	cmp	r2, r3
 8007002:	d802      	bhi.n	800700a <HAL_SPI_TransmitReceive+0x33a>
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	3301      	adds	r3, #1
 8007008:	d102      	bne.n	8007010 <HAL_SPI_TransmitReceive+0x340>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007010:	2323      	movs	r3, #35	; 0x23
 8007012:	18fb      	adds	r3, r7, r3
 8007014:	2203      	movs	r2, #3
 8007016:	701a      	strb	r2, [r3, #0]
        goto error;
 8007018:	e01b      	b.n	8007052 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701e:	b29b      	uxth	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d19d      	bne.n	8006f60 <HAL_SPI_TransmitReceive+0x290>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2246      	movs	r2, #70	; 0x46
 8007028:	5a9b      	ldrh	r3, [r3, r2]
 800702a:	b29b      	uxth	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d197      	bne.n	8006f60 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007030:	69fa      	ldr	r2, [r7, #28]
 8007032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	0018      	movs	r0, r3
 8007038:	f000 fe9c 	bl	8007d74 <SPI_EndRxTxTransaction>
 800703c:	1e03      	subs	r3, r0, #0
 800703e:	d007      	beq.n	8007050 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007040:	2323      	movs	r3, #35	; 0x23
 8007042:	18fb      	adds	r3, r7, r3
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2220      	movs	r2, #32
 800704c:	661a      	str	r2, [r3, #96]	; 0x60
 800704e:	e000      	b.n	8007052 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007050:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	225d      	movs	r2, #93	; 0x5d
 8007056:	2101      	movs	r1, #1
 8007058:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	225c      	movs	r2, #92	; 0x5c
 800705e:	2100      	movs	r1, #0
 8007060:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007062:	2323      	movs	r3, #35	; 0x23
 8007064:	18fb      	adds	r3, r7, r3
 8007066:	781b      	ldrb	r3, [r3, #0]
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b00a      	add	sp, #40	; 0x28
 800706e:	bd80      	pop	{r7, pc}
 8007070:	ffffefff 	.word	0xffffefff

08007074 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007074:	b590      	push	{r4, r7, lr}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	1dbb      	adds	r3, r7, #6
 8007080:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007082:	2317      	movs	r3, #23
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d112      	bne.n	80070b8 <HAL_SPI_Receive_DMA+0x44>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	2382      	movs	r3, #130	; 0x82
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	429a      	cmp	r2, r3
 800709c:	d10c      	bne.n	80070b8 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	225d      	movs	r2, #93	; 0x5d
 80070a2:	2104      	movs	r1, #4
 80070a4:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80070a6:	1dbb      	adds	r3, r7, #6
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f91e 	bl	80072f0 <HAL_SPI_TransmitReceive_DMA>
 80070b4:	0003      	movs	r3, r0
 80070b6:	e10b      	b.n	80072d0 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	225c      	movs	r2, #92	; 0x5c
 80070bc:	5c9b      	ldrb	r3, [r3, r2]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_SPI_Receive_DMA+0x52>
 80070c2:	2302      	movs	r3, #2
 80070c4:	e104      	b.n	80072d0 <HAL_SPI_Receive_DMA+0x25c>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	225c      	movs	r2, #92	; 0x5c
 80070ca:	2101      	movs	r1, #1
 80070cc:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	225d      	movs	r2, #93	; 0x5d
 80070d2:	5c9b      	ldrb	r3, [r3, r2]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d004      	beq.n	80070e4 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80070da:	2317      	movs	r3, #23
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	2202      	movs	r2, #2
 80070e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80070e2:	e0ee      	b.n	80072c2 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_SPI_Receive_DMA+0x7e>
 80070ea:	1dbb      	adds	r3, r7, #6
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80070f2:	2317      	movs	r3, #23
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	2201      	movs	r2, #1
 80070f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80070fa:	e0e2      	b.n	80072c2 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	225d      	movs	r2, #93	; 0x5d
 8007100:	2104      	movs	r1, #4
 8007102:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1dba      	adds	r2, r7, #6
 8007114:	2144      	movs	r1, #68	; 0x44
 8007116:	8812      	ldrh	r2, [r2, #0]
 8007118:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1dba      	adds	r2, r7, #6
 800711e:	2146      	movs	r1, #70	; 0x46
 8007120:	8812      	ldrh	r2, [r2, #0]
 8007122:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	021b      	lsls	r3, r3, #8
 8007144:	429a      	cmp	r2, r3
 8007146:	d10f      	bne.n	8007168 <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2140      	movs	r1, #64	; 0x40
 8007154:	438a      	bics	r2, r1
 8007156:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	495d      	ldr	r1, [pc, #372]	; (80072d8 <HAL_SPI_Receive_DMA+0x264>)
 8007164:	400a      	ands	r2, r1
 8007166:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	495a      	ldr	r1, [pc, #360]	; (80072dc <HAL_SPI_Receive_DMA+0x268>)
 8007174:	400a      	ands	r2, r1
 8007176:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	23e0      	movs	r3, #224	; 0xe0
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	429a      	cmp	r2, r3
 8007182:	d908      	bls.n	8007196 <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4954      	ldr	r1, [pc, #336]	; (80072e0 <HAL_SPI_Receive_DMA+0x26c>)
 8007190:	400a      	ands	r2, r1
 8007192:	605a      	str	r2, [r3, #4]
 8007194:	e045      	b.n	8007222 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2180      	movs	r1, #128	; 0x80
 80071a2:	0149      	lsls	r1, r1, #5
 80071a4:	430a      	orrs	r2, r1
 80071a6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ac:	699a      	ldr	r2, [r3, #24]
 80071ae:	2380      	movs	r3, #128	; 0x80
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d135      	bne.n	8007222 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4947      	ldr	r1, [pc, #284]	; (80072e0 <HAL_SPI_Receive_DMA+0x26c>)
 80071c2:	400a      	ands	r2, r1
 80071c4:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2246      	movs	r2, #70	; 0x46
 80071ca:	5a9b      	ldrh	r3, [r3, r2]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	001a      	movs	r2, r3
 80071d0:	2301      	movs	r3, #1
 80071d2:	4013      	ands	r3, r2
 80071d4:	d111      	bne.n	80071fa <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	493e      	ldr	r1, [pc, #248]	; (80072dc <HAL_SPI_Receive_DMA+0x268>)
 80071e2:	400a      	ands	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2246      	movs	r2, #70	; 0x46
 80071ea:	5a9b      	ldrh	r3, [r3, r2]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	085b      	lsrs	r3, r3, #1
 80071f0:	b299      	uxth	r1, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2246      	movs	r2, #70	; 0x46
 80071f6:	5299      	strh	r1, [r3, r2]
 80071f8:	e013      	b.n	8007222 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	0189      	lsls	r1, r1, #6
 8007208:	430a      	orrs	r2, r1
 800720a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2246      	movs	r2, #70	; 0x46
 8007210:	5a9b      	ldrh	r3, [r3, r2]
 8007212:	b29b      	uxth	r3, r3
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	b29b      	uxth	r3, r3
 8007218:	3301      	adds	r3, #1
 800721a:	b299      	uxth	r1, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2246      	movs	r2, #70	; 0x46
 8007220:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007226:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <HAL_SPI_Receive_DMA+0x270>)
 8007228:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <HAL_SPI_Receive_DMA+0x274>)
 8007230:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007236:	4a2d      	ldr	r2, [pc, #180]	; (80072ec <HAL_SPI_Receive_DMA+0x278>)
 8007238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723e:	2200      	movs	r2, #0
 8007240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	330c      	adds	r3, #12
 800724c:	0019      	movs	r1, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2246      	movs	r2, #70	; 0x46
 8007258:	5a9b      	ldrh	r3, [r3, r2]
 800725a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800725c:	0022      	movs	r2, r4
 800725e:	f7fc fb1d 	bl	800389c <HAL_DMA_Start_IT>
 8007262:	1e03      	subs	r3, r0, #0
 8007264:	d00e      	beq.n	8007284 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726a:	2210      	movs	r2, #16
 800726c:	431a      	orrs	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007272:	2317      	movs	r3, #23
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	2201      	movs	r2, #1
 8007278:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	225d      	movs	r2, #93	; 0x5d
 800727e:	2101      	movs	r1, #1
 8007280:	5499      	strb	r1, [r3, r2]
    goto error;
 8007282:	e01e      	b.n	80072c2 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2240      	movs	r2, #64	; 0x40
 800728c:	4013      	ands	r3, r2
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d007      	beq.n	80072a2 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2140      	movs	r1, #64	; 0x40
 800729e:	430a      	orrs	r2, r1
 80072a0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2120      	movs	r1, #32
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2101      	movs	r1, #1
 80072be:	430a      	orrs	r2, r1
 80072c0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	225c      	movs	r2, #92	; 0x5c
 80072c6:	2100      	movs	r1, #0
 80072c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80072ca:	2317      	movs	r3, #23
 80072cc:	18fb      	adds	r3, r7, r3
 80072ce:	781b      	ldrb	r3, [r3, #0]
}
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b007      	add	sp, #28
 80072d6:	bd90      	pop	{r4, r7, pc}
 80072d8:	ffffbfff 	.word	0xffffbfff
 80072dc:	ffffdfff 	.word	0xffffdfff
 80072e0:	ffffefff 	.word	0xffffefff
 80072e4:	080079c7 	.word	0x080079c7
 80072e8:	08007881 	.word	0x08007881
 80072ec:	08007a03 	.word	0x08007a03

080072f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80072f0:	b590      	push	{r4, r7, lr}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	001a      	movs	r2, r3
 80072fe:	1cbb      	adds	r3, r7, #2
 8007300:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007302:	2317      	movs	r3, #23
 8007304:	18fb      	adds	r3, r7, r3
 8007306:	2200      	movs	r2, #0
 8007308:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	225c      	movs	r2, #92	; 0x5c
 800730e:	5c9b      	ldrb	r3, [r3, r2]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_SPI_TransmitReceive_DMA+0x28>
 8007314:	2302      	movs	r3, #2
 8007316:	e186      	b.n	8007626 <HAL_SPI_TransmitReceive_DMA+0x336>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	225c      	movs	r2, #92	; 0x5c
 800731c:	2101      	movs	r1, #1
 800731e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007320:	2016      	movs	r0, #22
 8007322:	183b      	adds	r3, r7, r0
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	215d      	movs	r1, #93	; 0x5d
 8007328:	5c52      	ldrb	r2, [r2, r1]
 800732a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007332:	0001      	movs	r1, r0
 8007334:	187b      	adds	r3, r7, r1
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d011      	beq.n	8007360 <HAL_SPI_TransmitReceive_DMA+0x70>
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	2382      	movs	r3, #130	; 0x82
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	429a      	cmp	r2, r3
 8007344:	d107      	bne.n	8007356 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <HAL_SPI_TransmitReceive_DMA+0x66>
 800734e:	187b      	adds	r3, r7, r1
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b04      	cmp	r3, #4
 8007354:	d004      	beq.n	8007360 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8007356:	2317      	movs	r3, #23
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	2202      	movs	r2, #2
 800735c:	701a      	strb	r2, [r3, #0]
    goto error;
 800735e:	e15b      	b.n	8007618 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d006      	beq.n	8007374 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_SPI_TransmitReceive_DMA+0x84>
 800736c:	1cbb      	adds	r3, r7, #2
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8007374:	2317      	movs	r3, #23
 8007376:	18fb      	adds	r3, r7, r3
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
    goto error;
 800737c:	e14c      	b.n	8007618 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	225d      	movs	r2, #93	; 0x5d
 8007382:	5c9b      	ldrb	r3, [r3, r2]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b04      	cmp	r3, #4
 8007388:	d003      	beq.n	8007392 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	225d      	movs	r2, #93	; 0x5d
 800738e:	2105      	movs	r1, #5
 8007390:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1cba      	adds	r2, r7, #2
 80073a2:	8812      	ldrh	r2, [r2, #0]
 80073a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	1cba      	adds	r2, r7, #2
 80073aa:	8812      	ldrh	r2, [r2, #0]
 80073ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1cba      	adds	r2, r7, #2
 80073b8:	2144      	movs	r1, #68	; 0x44
 80073ba:	8812      	ldrh	r2, [r2, #0]
 80073bc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1cba      	adds	r2, r7, #2
 80073c2:	2146      	movs	r1, #70	; 0x46
 80073c4:	8812      	ldrh	r2, [r2, #0]
 80073c6:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4994      	ldr	r1, [pc, #592]	; (8007630 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80073e0:	400a      	ands	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	23e0      	movs	r3, #224	; 0xe0
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d908      	bls.n	8007402 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	498e      	ldr	r1, [pc, #568]	; (8007634 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80073fc:	400a      	ands	r2, r1
 80073fe:	605a      	str	r2, [r3, #4]
 8007400:	e074      	b.n	80074ec <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	0149      	lsls	r1, r1, #5
 8007410:	430a      	orrs	r2, r1
 8007412:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	2380      	movs	r3, #128	; 0x80
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	429a      	cmp	r2, r3
 8007420:	d127      	bne.n	8007472 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007426:	001a      	movs	r2, r3
 8007428:	2301      	movs	r3, #1
 800742a:	4013      	ands	r3, r2
 800742c:	d10f      	bne.n	800744e <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	497f      	ldr	r1, [pc, #508]	; (8007638 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800743a:	400a      	ands	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007442:	b29b      	uxth	r3, r3
 8007444:	085b      	lsrs	r3, r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800744c:	e011      	b.n	8007472 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2180      	movs	r1, #128	; 0x80
 800745a:	01c9      	lsls	r1, r1, #7
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007464:	b29b      	uxth	r3, r3
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	b29b      	uxth	r3, r3
 800746a:	3301      	adds	r3, #1
 800746c:	b29a      	uxth	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	429a      	cmp	r2, r3
 800747e:	d135      	bne.n	80074ec <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	496a      	ldr	r1, [pc, #424]	; (8007634 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800748c:	400a      	ands	r2, r1
 800748e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2246      	movs	r2, #70	; 0x46
 8007494:	5a9b      	ldrh	r3, [r3, r2]
 8007496:	b29b      	uxth	r3, r3
 8007498:	001a      	movs	r2, r3
 800749a:	2301      	movs	r3, #1
 800749c:	4013      	ands	r3, r2
 800749e:	d111      	bne.n	80074c4 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4964      	ldr	r1, [pc, #400]	; (800763c <HAL_SPI_TransmitReceive_DMA+0x34c>)
 80074ac:	400a      	ands	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2246      	movs	r2, #70	; 0x46
 80074b4:	5a9b      	ldrh	r3, [r3, r2]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	b299      	uxth	r1, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2246      	movs	r2, #70	; 0x46
 80074c0:	5299      	strh	r1, [r3, r2]
 80074c2:	e013      	b.n	80074ec <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2180      	movs	r1, #128	; 0x80
 80074d0:	0189      	lsls	r1, r1, #6
 80074d2:	430a      	orrs	r2, r1
 80074d4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2246      	movs	r2, #70	; 0x46
 80074da:	5a9b      	ldrh	r3, [r3, r2]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	085b      	lsrs	r3, r3, #1
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3301      	adds	r3, #1
 80074e4:	b299      	uxth	r1, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2246      	movs	r2, #70	; 0x46
 80074ea:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	225d      	movs	r2, #93	; 0x5d
 80074f0:	5c9b      	ldrb	r3, [r3, r2]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d108      	bne.n	800750a <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fc:	4a50      	ldr	r2, [pc, #320]	; (8007640 <HAL_SPI_TransmitReceive_DMA+0x350>)
 80074fe:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007504:	4a4f      	ldr	r2, [pc, #316]	; (8007644 <HAL_SPI_TransmitReceive_DMA+0x354>)
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c
 8007508:	e007      	b.n	800751a <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750e:	4a4e      	ldr	r2, [pc, #312]	; (8007648 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007516:	4a4d      	ldr	r2, [pc, #308]	; (800764c <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8007518:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	4a4c      	ldr	r2, [pc, #304]	; (8007650 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8007520:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007526:	2200      	movs	r2, #0
 8007528:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	0019      	movs	r1, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2246      	movs	r2, #70	; 0x46
 8007540:	5a9b      	ldrh	r3, [r3, r2]
 8007542:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007544:	0022      	movs	r2, r4
 8007546:	f7fc f9a9 	bl	800389c <HAL_DMA_Start_IT>
 800754a:	1e03      	subs	r3, r0, #0
 800754c:	d00e      	beq.n	800756c <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007552:	2210      	movs	r2, #16
 8007554:	431a      	orrs	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800755a:	2317      	movs	r3, #23
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	2201      	movs	r2, #1
 8007560:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	225d      	movs	r2, #93	; 0x5d
 8007566:	2101      	movs	r1, #1
 8007568:	5499      	strb	r1, [r3, r2]
    goto error;
 800756a:	e055      	b.n	8007618 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2101      	movs	r1, #1
 8007578:	430a      	orrs	r2, r1
 800757a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007588:	2200      	movs	r2, #0
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	2200      	movs	r2, #0
 8007592:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	2200      	movs	r2, #0
 800759a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	0019      	movs	r1, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80075b4:	f7fc f972 	bl	800389c <HAL_DMA_Start_IT>
 80075b8:	1e03      	subs	r3, r0, #0
 80075ba:	d00e      	beq.n	80075da <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c0:	2210      	movs	r2, #16
 80075c2:	431a      	orrs	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80075c8:	2317      	movs	r3, #23
 80075ca:	18fb      	adds	r3, r7, r3
 80075cc:	2201      	movs	r2, #1
 80075ce:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	225d      	movs	r2, #93	; 0x5d
 80075d4:	2101      	movs	r1, #1
 80075d6:	5499      	strb	r1, [r3, r2]
    goto error;
 80075d8:	e01e      	b.n	8007618 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2240      	movs	r2, #64	; 0x40
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d007      	beq.n	80075f8 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2140      	movs	r1, #64	; 0x40
 80075f4:	430a      	orrs	r2, r1
 80075f6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2120      	movs	r1, #32
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2102      	movs	r1, #2
 8007614:	430a      	orrs	r2, r1
 8007616:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	225c      	movs	r2, #92	; 0x5c
 800761c:	2100      	movs	r1, #0
 800761e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007620:	2317      	movs	r3, #23
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	781b      	ldrb	r3, [r3, #0]
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	b007      	add	sp, #28
 800762c:	bd90      	pop	{r4, r7, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	ffff9fff 	.word	0xffff9fff
 8007634:	ffffefff 	.word	0xffffefff
 8007638:	ffffbfff 	.word	0xffffbfff
 800763c:	ffffdfff 	.word	0xffffdfff
 8007640:	080079c7 	.word	0x080079c7
 8007644:	08007881 	.word	0x08007881
 8007648:	080079e5 	.word	0x080079e5
 800764c:	08007931 	.word	0x08007931
 8007650:	08007a03 	.word	0x08007a03

08007654 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	099b      	lsrs	r3, r3, #6
 8007670:	001a      	movs	r2, r3
 8007672:	2301      	movs	r3, #1
 8007674:	4013      	ands	r3, r2
 8007676:	d10f      	bne.n	8007698 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2201      	movs	r2, #1
 800767c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800767e:	d00b      	beq.n	8007698 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	099b      	lsrs	r3, r3, #6
 8007684:	001a      	movs	r2, r3
 8007686:	2301      	movs	r3, #1
 8007688:	4013      	ands	r3, r2
 800768a:	d005      	beq.n	8007698 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	0010      	movs	r0, r2
 8007694:	4798      	blx	r3
    return;
 8007696:	e0d5      	b.n	8007844 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	001a      	movs	r2, r3
 800769e:	2301      	movs	r3, #1
 80076a0:	4013      	ands	r3, r2
 80076a2:	d00b      	beq.n	80076bc <HAL_SPI_IRQHandler+0x68>
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	09db      	lsrs	r3, r3, #7
 80076a8:	001a      	movs	r2, r3
 80076aa:	2301      	movs	r3, #1
 80076ac:	4013      	ands	r3, r2
 80076ae:	d005      	beq.n	80076bc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	0010      	movs	r0, r2
 80076b8:	4798      	blx	r3
    return;
 80076ba:	e0c3      	b.n	8007844 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	095b      	lsrs	r3, r3, #5
 80076c0:	001a      	movs	r2, r3
 80076c2:	2301      	movs	r3, #1
 80076c4:	4013      	ands	r3, r2
 80076c6:	d10c      	bne.n	80076e2 <HAL_SPI_IRQHandler+0x8e>
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	099b      	lsrs	r3, r3, #6
 80076cc:	001a      	movs	r2, r3
 80076ce:	2301      	movs	r3, #1
 80076d0:	4013      	ands	r3, r2
 80076d2:	d106      	bne.n	80076e2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	0a1b      	lsrs	r3, r3, #8
 80076d8:	001a      	movs	r2, r3
 80076da:	2301      	movs	r3, #1
 80076dc:	4013      	ands	r3, r2
 80076de:	d100      	bne.n	80076e2 <HAL_SPI_IRQHandler+0x8e>
 80076e0:	e0b0      	b.n	8007844 <HAL_SPI_IRQHandler+0x1f0>
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	001a      	movs	r2, r3
 80076e8:	2301      	movs	r3, #1
 80076ea:	4013      	ands	r3, r2
 80076ec:	d100      	bne.n	80076f0 <HAL_SPI_IRQHandler+0x9c>
 80076ee:	e0a9      	b.n	8007844 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	099b      	lsrs	r3, r3, #6
 80076f4:	001a      	movs	r2, r3
 80076f6:	2301      	movs	r3, #1
 80076f8:	4013      	ands	r3, r2
 80076fa:	d023      	beq.n	8007744 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	225d      	movs	r2, #93	; 0x5d
 8007700:	5c9b      	ldrb	r3, [r3, r2]
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b03      	cmp	r3, #3
 8007706:	d011      	beq.n	800772c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770c:	2204      	movs	r2, #4
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	e00b      	b.n	8007744 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
        return;
 8007742:	e07f      	b.n	8007844 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	001a      	movs	r2, r3
 800774a:	2301      	movs	r3, #1
 800774c:	4013      	ands	r3, r2
 800774e:	d014      	beq.n	800777a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	2201      	movs	r2, #1
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2140      	movs	r1, #64	; 0x40
 8007774:	438a      	bics	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	0a1b      	lsrs	r3, r3, #8
 800777e:	001a      	movs	r2, r3
 8007780:	2301      	movs	r3, #1
 8007782:	4013      	ands	r3, r2
 8007784:	d00c      	beq.n	80077a0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778a:	2208      	movs	r2, #8
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007792:	2300      	movs	r3, #0
 8007794:	60bb      	str	r3, [r7, #8]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	60bb      	str	r3, [r7, #8]
 800779e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d04c      	beq.n	8007842 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	21e0      	movs	r1, #224	; 0xe0
 80077b4:	438a      	bics	r2, r1
 80077b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	225d      	movs	r2, #93	; 0x5d
 80077bc:	2101      	movs	r1, #1
 80077be:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	2202      	movs	r2, #2
 80077c4:	4013      	ands	r3, r2
 80077c6:	d103      	bne.n	80077d0 <HAL_SPI_IRQHandler+0x17c>
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2201      	movs	r2, #1
 80077cc:	4013      	ands	r3, r2
 80077ce:	d032      	beq.n	8007836 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2103      	movs	r1, #3
 80077dc:	438a      	bics	r2, r1
 80077de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d010      	beq.n	800780a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ec:	4a17      	ldr	r2, [pc, #92]	; (800784c <HAL_SPI_IRQHandler+0x1f8>)
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f4:	0018      	movs	r0, r3
 80077f6:	f7fc f8d7 	bl	80039a8 <HAL_DMA_Abort_IT>
 80077fa:	1e03      	subs	r3, r0, #0
 80077fc:	d005      	beq.n	800780a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007802:	2240      	movs	r2, #64	; 0x40
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780e:	2b00      	cmp	r3, #0
 8007810:	d016      	beq.n	8007840 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	4a0d      	ldr	r2, [pc, #52]	; (800784c <HAL_SPI_IRQHandler+0x1f8>)
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	0018      	movs	r0, r3
 8007820:	f7fc f8c2 	bl	80039a8 <HAL_DMA_Abort_IT>
 8007824:	1e03      	subs	r3, r0, #0
 8007826:	d00b      	beq.n	8007840 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782c:	2240      	movs	r2, #64	; 0x40
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007834:	e004      	b.n	8007840 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0018      	movs	r0, r3
 800783a:	f000 f819 	bl	8007870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800783e:	e000      	b.n	8007842 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007840:	46c0      	nop			; (mov r8, r8)
    return;
 8007842:	46c0      	nop			; (mov r8, r8)
  }
}
 8007844:	46bd      	mov	sp, r7
 8007846:	b008      	add	sp, #32
 8007848:	bd80      	pop	{r7, pc}
 800784a:	46c0      	nop			; (mov r8, r8)
 800784c:	08007a45 	.word	0x08007a45

08007850 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b002      	add	sp, #8
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007868:	46c0      	nop			; (mov r8, r8)
 800786a:	46bd      	mov	sp, r7
 800786c:	b002      	add	sp, #8
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	46bd      	mov	sp, r7
 800787c:	b002      	add	sp, #8
 800787e:	bd80      	pop	{r7, pc}

08007880 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800788e:	f7fb fbf9 	bl	8003084 <HAL_GetTick>
 8007892:	0003      	movs	r3, r0
 8007894:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2220      	movs	r2, #32
 800789e:	4013      	ands	r3, r2
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d03e      	beq.n	8007922 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2120      	movs	r1, #32
 80078b0:	438a      	bics	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10e      	bne.n	80078da <SPI_DMAReceiveCplt+0x5a>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	2382      	movs	r3, #130	; 0x82
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d108      	bne.n	80078da <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2103      	movs	r1, #3
 80078d4:	438a      	bics	r2, r1
 80078d6:	605a      	str	r2, [r3, #4]
 80078d8:	e007      	b.n	80078ea <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2101      	movs	r1, #1
 80078e6:	438a      	bics	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2164      	movs	r1, #100	; 0x64
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 f9e1 	bl	8007cb8 <SPI_EndRxTransaction>
 80078f6:	1e03      	subs	r3, r0, #0
 80078f8:	d002      	beq.n	8007900 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2220      	movs	r2, #32
 80078fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2246      	movs	r2, #70	; 0x46
 8007904:	2100      	movs	r1, #0
 8007906:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	225d      	movs	r2, #93	; 0x5d
 800790c:	2101      	movs	r1, #1
 800790e:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0018      	movs	r0, r3
 800791c:	f7ff ffa8 	bl	8007870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007920:	e003      	b.n	800792a <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	0018      	movs	r0, r3
 8007926:	f7f9 fb9b 	bl	8001060 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800792a:	46bd      	mov	sp, r7
 800792c:	b004      	add	sp, #16
 800792e:	bd80      	pop	{r7, pc}

08007930 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800793e:	f7fb fba1 	bl	8003084 <HAL_GetTick>
 8007942:	0003      	movs	r3, r0
 8007944:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2220      	movs	r2, #32
 800794e:	4013      	ands	r3, r2
 8007950:	2b20      	cmp	r3, #32
 8007952:	d031      	beq.n	80079b8 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2120      	movs	r1, #32
 8007960:	438a      	bics	r2, r1
 8007962:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2164      	movs	r1, #100	; 0x64
 800796a:	0018      	movs	r0, r3
 800796c:	f000 fa02 	bl	8007d74 <SPI_EndRxTxTransaction>
 8007970:	1e03      	subs	r3, r0, #0
 8007972:	d005      	beq.n	8007980 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007978:	2220      	movs	r2, #32
 800797a:	431a      	orrs	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2103      	movs	r1, #3
 800798c:	438a      	bics	r2, r1
 800798e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2246      	movs	r2, #70	; 0x46
 800799a:	2100      	movs	r1, #0
 800799c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	225d      	movs	r2, #93	; 0x5d
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d004      	beq.n	80079b8 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7ff ff5d 	bl	8007870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079b6:	e003      	b.n	80079c0 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7ff ff48 	bl	8007850 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b004      	add	sp, #16
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	0018      	movs	r0, r3
 80079d8:	f7f9 fb0a 	bl	8000ff0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079dc:	46c0      	nop			; (mov r8, r8)
 80079de:	46bd      	mov	sp, r7
 80079e0:	b004      	add	sp, #16
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f7ff ff33 	bl	8007860 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b004      	add	sp, #16
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2103      	movs	r1, #3
 8007a1c:	438a      	bics	r2, r1
 8007a1e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a24:	2210      	movs	r2, #16
 8007a26:	431a      	orrs	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	225d      	movs	r2, #93	; 0x5d
 8007a30:	2101      	movs	r1, #1
 8007a32:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff ff1a 	bl	8007870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b004      	add	sp, #16
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a50:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2246      	movs	r2, #70	; 0x46
 8007a56:	2100      	movs	r1, #0
 8007a58:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0018      	movs	r0, r3
 8007a64:	f7ff ff04 	bl	8007870 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a68:	46c0      	nop			; (mov r8, r8)
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	b004      	add	sp, #16
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	1dfb      	adds	r3, r7, #7
 8007a7e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a80:	f7fb fb00 	bl	8003084 <HAL_GetTick>
 8007a84:	0002      	movs	r2, r0
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	1a9b      	subs	r3, r3, r2
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	18d3      	adds	r3, r2, r3
 8007a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a90:	f7fb faf8 	bl	8003084 <HAL_GetTick>
 8007a94:	0003      	movs	r3, r0
 8007a96:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a98:	4b3a      	ldr	r3, [pc, #232]	; (8007b84 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	015b      	lsls	r3, r3, #5
 8007a9e:	0d1b      	lsrs	r3, r3, #20
 8007aa0:	69fa      	ldr	r2, [r7, #28]
 8007aa2:	4353      	muls	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa6:	e058      	b.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	d055      	beq.n	8007b5a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aae:	f7fb fae9 	bl	8003084 <HAL_GetTick>
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d902      	bls.n	8007ac4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d142      	bne.n	8007b4a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	21e0      	movs	r1, #224	; 0xe0
 8007ad0:	438a      	bics	r2, r1
 8007ad2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	2382      	movs	r3, #130	; 0x82
 8007ada:	005b      	lsls	r3, r3, #1
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d113      	bne.n	8007b08 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	2380      	movs	r3, #128	; 0x80
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d005      	beq.n	8007af8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	2380      	movs	r3, #128	; 0x80
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d107      	bne.n	8007b08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2140      	movs	r1, #64	; 0x40
 8007b04:	438a      	bics	r2, r1
 8007b06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	019b      	lsls	r3, r3, #6
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d110      	bne.n	8007b36 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	491a      	ldr	r1, [pc, #104]	; (8007b88 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007b20:	400a      	ands	r2, r1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2180      	movs	r1, #128	; 0x80
 8007b30:	0189      	lsls	r1, r1, #6
 8007b32:	430a      	orrs	r2, r1
 8007b34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	225d      	movs	r2, #93	; 0x5d
 8007b3a:	2101      	movs	r1, #1
 8007b3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	225c      	movs	r2, #92	; 0x5c
 8007b42:	2100      	movs	r1, #0
 8007b44:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e017      	b.n	8007b7a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	425a      	negs	r2, r3
 8007b6a:	4153      	adcs	r3, r2
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	001a      	movs	r2, r3
 8007b70:	1dfb      	adds	r3, r7, #7
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d197      	bne.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b008      	add	sp, #32
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	46c0      	nop			; (mov r8, r8)
 8007b84:	20003134 	.word	0x20003134
 8007b88:	ffffdfff 	.word	0xffffdfff

08007b8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b9a:	f7fb fa73 	bl	8003084 <HAL_GetTick>
 8007b9e:	0002      	movs	r2, r0
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	18d3      	adds	r3, r2, r3
 8007ba8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007baa:	f7fb fa6b 	bl	8003084 <HAL_GetTick>
 8007bae:	0003      	movs	r3, r0
 8007bb0:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007bb2:	4b3f      	ldr	r3, [pc, #252]	; (8007cb0 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	0013      	movs	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	00da      	lsls	r2, r3, #3
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	0d1b      	lsrs	r3, r3, #20
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	4353      	muls	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007bc8:	e064      	b.n	8007c94 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	23c0      	movs	r3, #192	; 0xc0
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d106      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d103      	bne.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	3301      	adds	r3, #1
 8007be6:	d055      	beq.n	8007c94 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007be8:	f7fb fa4c 	bl	8003084 <HAL_GetTick>
 8007bec:	0002      	movs	r2, r0
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d902      	bls.n	8007bfe <SPI_WaitFifoStateUntilTimeout+0x72>
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d142      	bne.n	8007c84 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	21e0      	movs	r1, #224	; 0xe0
 8007c0a:	438a      	bics	r2, r1
 8007c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	2382      	movs	r3, #130	; 0x82
 8007c14:	005b      	lsls	r3, r3, #1
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d113      	bne.n	8007c42 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	2380      	movs	r3, #128	; 0x80
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d005      	beq.n	8007c32 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	2380      	movs	r3, #128	; 0x80
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d107      	bne.n	8007c42 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2140      	movs	r1, #64	; 0x40
 8007c3e:	438a      	bics	r2, r1
 8007c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c46:	2380      	movs	r3, #128	; 0x80
 8007c48:	019b      	lsls	r3, r3, #6
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d110      	bne.n	8007c70 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4916      	ldr	r1, [pc, #88]	; (8007cb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c5a:	400a      	ands	r2, r1
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2180      	movs	r1, #128	; 0x80
 8007c6a:	0189      	lsls	r1, r1, #6
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	225d      	movs	r2, #93	; 0x5d
 8007c74:	2101      	movs	r1, #1
 8007c76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	225c      	movs	r2, #92	; 0x5c
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e010      	b.n	8007ca6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d192      	bne.n	8007bca <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	b008      	add	sp, #32
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	46c0      	nop			; (mov r8, r8)
 8007cb0:	20003134 	.word	0x20003134
 8007cb4:	ffffdfff 	.word	0xffffdfff

08007cb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	2382      	movs	r3, #130	; 0x82
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d113      	bne.n	8007cf8 <SPI_EndRxTransaction+0x40>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689a      	ldr	r2, [r3, #8]
 8007cd4:	2380      	movs	r3, #128	; 0x80
 8007cd6:	021b      	lsls	r3, r3, #8
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d005      	beq.n	8007ce8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	2380      	movs	r3, #128	; 0x80
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d107      	bne.n	8007cf8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2140      	movs	r1, #64	; 0x40
 8007cf4:	438a      	bics	r2, r1
 8007cf6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cf8:	68ba      	ldr	r2, [r7, #8]
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	0013      	movs	r3, r2
 8007d02:	2200      	movs	r2, #0
 8007d04:	2180      	movs	r1, #128	; 0x80
 8007d06:	f7ff feb3 	bl	8007a70 <SPI_WaitFlagStateUntilTimeout>
 8007d0a:	1e03      	subs	r3, r0, #0
 8007d0c:	d007      	beq.n	8007d1e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d12:	2220      	movs	r2, #32
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e026      	b.n	8007d6c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	2382      	movs	r3, #130	; 0x82
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d11f      	bne.n	8007d6a <SPI_EndRxTransaction+0xb2>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	2380      	movs	r3, #128	; 0x80
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d005      	beq.n	8007d42 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689a      	ldr	r2, [r3, #8]
 8007d3a:	2380      	movs	r3, #128	; 0x80
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d113      	bne.n	8007d6a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	23c0      	movs	r3, #192	; 0xc0
 8007d46:	00d9      	lsls	r1, r3, #3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	0013      	movs	r3, r2
 8007d50:	2200      	movs	r2, #0
 8007d52:	f7ff ff1b 	bl	8007b8c <SPI_WaitFifoStateUntilTimeout>
 8007d56:	1e03      	subs	r3, r0, #0
 8007d58:	d007      	beq.n	8007d6a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5e:	2220      	movs	r2, #32
 8007d60:	431a      	orrs	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e000      	b.n	8007d6c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b004      	add	sp, #16
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	23c0      	movs	r3, #192	; 0xc0
 8007d84:	0159      	lsls	r1, r3, #5
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	0013      	movs	r3, r2
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f7ff fefc 	bl	8007b8c <SPI_WaitFifoStateUntilTimeout>
 8007d94:	1e03      	subs	r3, r0, #0
 8007d96:	d007      	beq.n	8007da8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e027      	b.n	8007df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	0013      	movs	r3, r2
 8007db2:	2200      	movs	r2, #0
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	f7ff fe5b 	bl	8007a70 <SPI_WaitFlagStateUntilTimeout>
 8007dba:	1e03      	subs	r3, r0, #0
 8007dbc:	d007      	beq.n	8007dce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e014      	b.n	8007df8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	23c0      	movs	r3, #192	; 0xc0
 8007dd2:	00d9      	lsls	r1, r3, #3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	9300      	str	r3, [sp, #0]
 8007dda:	0013      	movs	r3, r2
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f7ff fed5 	bl	8007b8c <SPI_WaitFifoStateUntilTimeout>
 8007de2:	1e03      	subs	r3, r0, #0
 8007de4:	d007      	beq.n	8007df6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dea:	2220      	movs	r2, #32
 8007dec:	431a      	orrs	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e000      	b.n	8007df8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b004      	add	sp, #16
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e04a      	b.n	8007ea8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	223d      	movs	r2, #61	; 0x3d
 8007e16:	5c9b      	ldrb	r3, [r3, r2]
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d107      	bne.n	8007e2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	223c      	movs	r2, #60	; 0x3c
 8007e22:	2100      	movs	r1, #0
 8007e24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7fa fe53 	bl	8002ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	223d      	movs	r2, #61	; 0x3d
 8007e32:	2102      	movs	r1, #2
 8007e34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	0019      	movs	r1, r3
 8007e40:	0010      	movs	r0, r2
 8007e42:	f000 fb41 	bl	80084c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2248      	movs	r2, #72	; 0x48
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	223e      	movs	r2, #62	; 0x3e
 8007e52:	2101      	movs	r1, #1
 8007e54:	5499      	strb	r1, [r3, r2]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	223f      	movs	r2, #63	; 0x3f
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	5499      	strb	r1, [r3, r2]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2240      	movs	r2, #64	; 0x40
 8007e62:	2101      	movs	r1, #1
 8007e64:	5499      	strb	r1, [r3, r2]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2241      	movs	r2, #65	; 0x41
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	5499      	strb	r1, [r3, r2]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2242      	movs	r2, #66	; 0x42
 8007e72:	2101      	movs	r1, #1
 8007e74:	5499      	strb	r1, [r3, r2]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2243      	movs	r2, #67	; 0x43
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2244      	movs	r2, #68	; 0x44
 8007e82:	2101      	movs	r1, #1
 8007e84:	5499      	strb	r1, [r3, r2]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2245      	movs	r2, #69	; 0x45
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	5499      	strb	r1, [r3, r2]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2246      	movs	r2, #70	; 0x46
 8007e92:	2101      	movs	r1, #1
 8007e94:	5499      	strb	r1, [r3, r2]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2247      	movs	r2, #71	; 0x47
 8007e9a:	2101      	movs	r1, #1
 8007e9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	223d      	movs	r2, #61	; 0x3d
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	b002      	add	sp, #8
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e04a      	b.n	8007f58 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	223d      	movs	r2, #61	; 0x3d
 8007ec6:	5c9b      	ldrb	r3, [r3, r2]
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d107      	bne.n	8007ede <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	223c      	movs	r2, #60	; 0x3c
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 f841 	bl	8007f60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	223d      	movs	r2, #61	; 0x3d
 8007ee2:	2102      	movs	r1, #2
 8007ee4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3304      	adds	r3, #4
 8007eee:	0019      	movs	r1, r3
 8007ef0:	0010      	movs	r0, r2
 8007ef2:	f000 fae9 	bl	80084c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2248      	movs	r2, #72	; 0x48
 8007efa:	2101      	movs	r1, #1
 8007efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	223e      	movs	r2, #62	; 0x3e
 8007f02:	2101      	movs	r1, #1
 8007f04:	5499      	strb	r1, [r3, r2]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	223f      	movs	r2, #63	; 0x3f
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	5499      	strb	r1, [r3, r2]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2240      	movs	r2, #64	; 0x40
 8007f12:	2101      	movs	r1, #1
 8007f14:	5499      	strb	r1, [r3, r2]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2241      	movs	r2, #65	; 0x41
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	5499      	strb	r1, [r3, r2]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2242      	movs	r2, #66	; 0x42
 8007f22:	2101      	movs	r1, #1
 8007f24:	5499      	strb	r1, [r3, r2]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2243      	movs	r2, #67	; 0x43
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2244      	movs	r2, #68	; 0x44
 8007f32:	2101      	movs	r1, #1
 8007f34:	5499      	strb	r1, [r3, r2]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2245      	movs	r2, #69	; 0x45
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	5499      	strb	r1, [r3, r2]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2246      	movs	r2, #70	; 0x46
 8007f42:	2101      	movs	r1, #1
 8007f44:	5499      	strb	r1, [r3, r2]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2247      	movs	r2, #71	; 0x47
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	223d      	movs	r2, #61	; 0x3d
 8007f52:	2101      	movs	r1, #1
 8007f54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	0018      	movs	r0, r3
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b002      	add	sp, #8
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d108      	bne.n	8007f92 <HAL_TIM_PWM_Start+0x22>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	223e      	movs	r2, #62	; 0x3e
 8007f84:	5c9b      	ldrb	r3, [r3, r2]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	1e5a      	subs	r2, r3, #1
 8007f8c:	4193      	sbcs	r3, r2
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	e037      	b.n	8008002 <HAL_TIM_PWM_Start+0x92>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d108      	bne.n	8007faa <HAL_TIM_PWM_Start+0x3a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	223f      	movs	r2, #63	; 0x3f
 8007f9c:	5c9b      	ldrb	r3, [r3, r2]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	1e5a      	subs	r2, r3, #1
 8007fa4:	4193      	sbcs	r3, r2
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	e02b      	b.n	8008002 <HAL_TIM_PWM_Start+0x92>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b08      	cmp	r3, #8
 8007fae:	d108      	bne.n	8007fc2 <HAL_TIM_PWM_Start+0x52>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2240      	movs	r2, #64	; 0x40
 8007fb4:	5c9b      	ldrb	r3, [r3, r2]
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	1e5a      	subs	r2, r3, #1
 8007fbc:	4193      	sbcs	r3, r2
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	e01f      	b.n	8008002 <HAL_TIM_PWM_Start+0x92>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b0c      	cmp	r3, #12
 8007fc6:	d108      	bne.n	8007fda <HAL_TIM_PWM_Start+0x6a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2241      	movs	r2, #65	; 0x41
 8007fcc:	5c9b      	ldrb	r3, [r3, r2]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	1e5a      	subs	r2, r3, #1
 8007fd4:	4193      	sbcs	r3, r2
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	e013      	b.n	8008002 <HAL_TIM_PWM_Start+0x92>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b10      	cmp	r3, #16
 8007fde:	d108      	bne.n	8007ff2 <HAL_TIM_PWM_Start+0x82>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2242      	movs	r2, #66	; 0x42
 8007fe4:	5c9b      	ldrb	r3, [r3, r2]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	1e5a      	subs	r2, r3, #1
 8007fec:	4193      	sbcs	r3, r2
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	e007      	b.n	8008002 <HAL_TIM_PWM_Start+0x92>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2243      	movs	r2, #67	; 0x43
 8007ff6:	5c9b      	ldrb	r3, [r3, r2]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	1e5a      	subs	r2, r3, #1
 8007ffe:	4193      	sbcs	r3, r2
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e08b      	b.n	8008122 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <HAL_TIM_PWM_Start+0xaa>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	223e      	movs	r2, #62	; 0x3e
 8008014:	2102      	movs	r1, #2
 8008016:	5499      	strb	r1, [r3, r2]
 8008018:	e023      	b.n	8008062 <HAL_TIM_PWM_Start+0xf2>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b04      	cmp	r3, #4
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start+0xba>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	223f      	movs	r2, #63	; 0x3f
 8008024:	2102      	movs	r1, #2
 8008026:	5499      	strb	r1, [r3, r2]
 8008028:	e01b      	b.n	8008062 <HAL_TIM_PWM_Start+0xf2>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d104      	bne.n	800803a <HAL_TIM_PWM_Start+0xca>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2240      	movs	r2, #64	; 0x40
 8008034:	2102      	movs	r1, #2
 8008036:	5499      	strb	r1, [r3, r2]
 8008038:	e013      	b.n	8008062 <HAL_TIM_PWM_Start+0xf2>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b0c      	cmp	r3, #12
 800803e:	d104      	bne.n	800804a <HAL_TIM_PWM_Start+0xda>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2241      	movs	r2, #65	; 0x41
 8008044:	2102      	movs	r1, #2
 8008046:	5499      	strb	r1, [r3, r2]
 8008048:	e00b      	b.n	8008062 <HAL_TIM_PWM_Start+0xf2>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b10      	cmp	r3, #16
 800804e:	d104      	bne.n	800805a <HAL_TIM_PWM_Start+0xea>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2242      	movs	r2, #66	; 0x42
 8008054:	2102      	movs	r1, #2
 8008056:	5499      	strb	r1, [r3, r2]
 8008058:	e003      	b.n	8008062 <HAL_TIM_PWM_Start+0xf2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2243      	movs	r2, #67	; 0x43
 800805e:	2102      	movs	r1, #2
 8008060:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6839      	ldr	r1, [r7, #0]
 8008068:	2201      	movs	r2, #1
 800806a:	0018      	movs	r0, r3
 800806c:	f000 fe0c 	bl	8008c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a2d      	ldr	r2, [pc, #180]	; (800812c <HAL_TIM_PWM_Start+0x1bc>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00e      	beq.n	8008098 <HAL_TIM_PWM_Start+0x128>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a2c      	ldr	r2, [pc, #176]	; (8008130 <HAL_TIM_PWM_Start+0x1c0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d009      	beq.n	8008098 <HAL_TIM_PWM_Start+0x128>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <HAL_TIM_PWM_Start+0x1c4>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d004      	beq.n	8008098 <HAL_TIM_PWM_Start+0x128>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a29      	ldr	r2, [pc, #164]	; (8008138 <HAL_TIM_PWM_Start+0x1c8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d101      	bne.n	800809c <HAL_TIM_PWM_Start+0x12c>
 8008098:	2301      	movs	r3, #1
 800809a:	e000      	b.n	800809e <HAL_TIM_PWM_Start+0x12e>
 800809c:	2300      	movs	r3, #0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d008      	beq.n	80080b4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	0209      	lsls	r1, r1, #8
 80080b0:	430a      	orrs	r2, r1
 80080b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a1c      	ldr	r2, [pc, #112]	; (800812c <HAL_TIM_PWM_Start+0x1bc>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <HAL_TIM_PWM_Start+0x16e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	2380      	movs	r3, #128	; 0x80
 80080c4:	05db      	lsls	r3, r3, #23
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d009      	beq.n	80080de <HAL_TIM_PWM_Start+0x16e>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a1b      	ldr	r2, [pc, #108]	; (800813c <HAL_TIM_PWM_Start+0x1cc>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d004      	beq.n	80080de <HAL_TIM_PWM_Start+0x16e>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a15      	ldr	r2, [pc, #84]	; (8008130 <HAL_TIM_PWM_Start+0x1c0>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d116      	bne.n	800810c <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	4a16      	ldr	r2, [pc, #88]	; (8008140 <HAL_TIM_PWM_Start+0x1d0>)
 80080e6:	4013      	ands	r3, r2
 80080e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b06      	cmp	r3, #6
 80080ee:	d016      	beq.n	800811e <HAL_TIM_PWM_Start+0x1ae>
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	2380      	movs	r3, #128	; 0x80
 80080f4:	025b      	lsls	r3, r3, #9
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d011      	beq.n	800811e <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2101      	movs	r1, #1
 8008106:	430a      	orrs	r2, r1
 8008108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810a:	e008      	b.n	800811e <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2101      	movs	r1, #1
 8008118:	430a      	orrs	r2, r1
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e000      	b.n	8008120 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	0018      	movs	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	b004      	add	sp, #16
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40014000 	.word	0x40014000
 8008134:	40014400 	.word	0x40014400
 8008138:	40014800 	.word	0x40014800
 800813c:	40000400 	.word	0x40000400
 8008140:	00010007 	.word	0x00010007

08008144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	223c      	movs	r2, #60	; 0x3c
 8008154:	5c9b      	ldrb	r3, [r3, r2]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800815a:	2302      	movs	r3, #2
 800815c:	e0df      	b.n	800831e <HAL_TIM_PWM_ConfigChannel+0x1da>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	223c      	movs	r2, #60	; 0x3c
 8008162:	2101      	movs	r1, #1
 8008164:	5499      	strb	r1, [r3, r2]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b14      	cmp	r3, #20
 800816a:	d900      	bls.n	800816e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800816c:	e0d1      	b.n	8008312 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	009a      	lsls	r2, r3, #2
 8008172:	4b6d      	ldr	r3, [pc, #436]	; (8008328 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008174:	18d3      	adds	r3, r2, r3
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	0011      	movs	r1, r2
 8008182:	0018      	movs	r0, r3
 8008184:	f000 fa20 	bl	80085c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	699a      	ldr	r2, [r3, #24]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2108      	movs	r1, #8
 8008194:	430a      	orrs	r2, r1
 8008196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2104      	movs	r1, #4
 80081a4:	438a      	bics	r2, r1
 80081a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6999      	ldr	r1, [r3, #24]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	430a      	orrs	r2, r1
 80081b8:	619a      	str	r2, [r3, #24]
      break;
 80081ba:	e0ab      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	0011      	movs	r1, r2
 80081c4:	0018      	movs	r0, r3
 80081c6:	f000 fa89 	bl	80086dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2180      	movs	r1, #128	; 0x80
 80081d6:	0109      	lsls	r1, r1, #4
 80081d8:	430a      	orrs	r2, r1
 80081da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4951      	ldr	r1, [pc, #324]	; (800832c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80081e8:	400a      	ands	r2, r1
 80081ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6999      	ldr	r1, [r3, #24]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	021a      	lsls	r2, r3, #8
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	430a      	orrs	r2, r1
 80081fe:	619a      	str	r2, [r3, #24]
      break;
 8008200:	e088      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68ba      	ldr	r2, [r7, #8]
 8008208:	0011      	movs	r1, r2
 800820a:	0018      	movs	r0, r3
 800820c:	f000 faea 	bl	80087e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69da      	ldr	r2, [r3, #28]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2108      	movs	r1, #8
 800821c:	430a      	orrs	r2, r1
 800821e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	69da      	ldr	r2, [r3, #28]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2104      	movs	r1, #4
 800822c:	438a      	bics	r2, r1
 800822e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69d9      	ldr	r1, [r3, #28]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	61da      	str	r2, [r3, #28]
      break;
 8008242:	e067      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	0011      	movs	r1, r2
 800824c:	0018      	movs	r0, r3
 800824e:	f000 fb51 	bl	80088f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2180      	movs	r1, #128	; 0x80
 800825e:	0109      	lsls	r1, r1, #4
 8008260:	430a      	orrs	r2, r1
 8008262:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	492f      	ldr	r1, [pc, #188]	; (800832c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008270:	400a      	ands	r2, r1
 8008272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	69d9      	ldr	r1, [r3, #28]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	021a      	lsls	r2, r3, #8
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	61da      	str	r2, [r3, #28]
      break;
 8008288:	e044      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	0011      	movs	r1, r2
 8008292:	0018      	movs	r0, r3
 8008294:	f000 fb98 	bl	80089c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2108      	movs	r1, #8
 80082a4:	430a      	orrs	r2, r1
 80082a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2104      	movs	r1, #4
 80082b4:	438a      	bics	r2, r1
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082ca:	e023      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68ba      	ldr	r2, [r7, #8]
 80082d2:	0011      	movs	r1, r2
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fbd7 	bl	8008a88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2180      	movs	r1, #128	; 0x80
 80082e6:	0109      	lsls	r1, r1, #4
 80082e8:	430a      	orrs	r2, r1
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	490d      	ldr	r1, [pc, #52]	; (800832c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082f8:	400a      	ands	r2, r1
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	021a      	lsls	r2, r3, #8
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008310:	e000      	b.n	8008314 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8008312:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	223c      	movs	r2, #60	; 0x3c
 8008318:	2100      	movs	r1, #0
 800831a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	0018      	movs	r0, r3
 8008320:	46bd      	mov	sp, r7
 8008322:	b004      	add	sp, #16
 8008324:	bd80      	pop	{r7, pc}
 8008326:	46c0      	nop			; (mov r8, r8)
 8008328:	0800a79c 	.word	0x0800a79c
 800832c:	fffffbff 	.word	0xfffffbff

08008330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	223c      	movs	r2, #60	; 0x3c
 800833e:	5c9b      	ldrb	r3, [r3, r2]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_TIM_ConfigClockSource+0x18>
 8008344:	2302      	movs	r3, #2
 8008346:	e0b7      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x188>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	223c      	movs	r2, #60	; 0x3c
 800834c:	2101      	movs	r1, #1
 800834e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	223d      	movs	r2, #61	; 0x3d
 8008354:	2102      	movs	r1, #2
 8008356:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a57      	ldr	r2, [pc, #348]	; (80084c0 <HAL_TIM_ConfigClockSource+0x190>)
 8008364:	4013      	ands	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a56      	ldr	r2, [pc, #344]	; (80084c4 <HAL_TIM_ConfigClockSource+0x194>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2280      	movs	r2, #128	; 0x80
 800837e:	0192      	lsls	r2, r2, #6
 8008380:	4293      	cmp	r3, r2
 8008382:	d040      	beq.n	8008406 <HAL_TIM_ConfigClockSource+0xd6>
 8008384:	2280      	movs	r2, #128	; 0x80
 8008386:	0192      	lsls	r2, r2, #6
 8008388:	4293      	cmp	r3, r2
 800838a:	d900      	bls.n	800838e <HAL_TIM_ConfigClockSource+0x5e>
 800838c:	e088      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 800838e:	2280      	movs	r2, #128	; 0x80
 8008390:	0152      	lsls	r2, r2, #5
 8008392:	4293      	cmp	r3, r2
 8008394:	d100      	bne.n	8008398 <HAL_TIM_ConfigClockSource+0x68>
 8008396:	e085      	b.n	80084a4 <HAL_TIM_ConfigClockSource+0x174>
 8008398:	2280      	movs	r2, #128	; 0x80
 800839a:	0152      	lsls	r2, r2, #5
 800839c:	4293      	cmp	r3, r2
 800839e:	d900      	bls.n	80083a2 <HAL_TIM_ConfigClockSource+0x72>
 80083a0:	e07e      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083a2:	2b70      	cmp	r3, #112	; 0x70
 80083a4:	d018      	beq.n	80083d8 <HAL_TIM_ConfigClockSource+0xa8>
 80083a6:	d900      	bls.n	80083aa <HAL_TIM_ConfigClockSource+0x7a>
 80083a8:	e07a      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083aa:	2b60      	cmp	r3, #96	; 0x60
 80083ac:	d04f      	beq.n	800844e <HAL_TIM_ConfigClockSource+0x11e>
 80083ae:	d900      	bls.n	80083b2 <HAL_TIM_ConfigClockSource+0x82>
 80083b0:	e076      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083b2:	2b50      	cmp	r3, #80	; 0x50
 80083b4:	d03b      	beq.n	800842e <HAL_TIM_ConfigClockSource+0xfe>
 80083b6:	d900      	bls.n	80083ba <HAL_TIM_ConfigClockSource+0x8a>
 80083b8:	e072      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083ba:	2b40      	cmp	r3, #64	; 0x40
 80083bc:	d057      	beq.n	800846e <HAL_TIM_ConfigClockSource+0x13e>
 80083be:	d900      	bls.n	80083c2 <HAL_TIM_ConfigClockSource+0x92>
 80083c0:	e06e      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083c2:	2b30      	cmp	r3, #48	; 0x30
 80083c4:	d063      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x15e>
 80083c6:	d86b      	bhi.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d060      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x15e>
 80083cc:	d868      	bhi.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d05d      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x15e>
 80083d2:	2b10      	cmp	r3, #16
 80083d4:	d05b      	beq.n	800848e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083d6:	e063      	b.n	80084a0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6899      	ldr	r1, [r3, #8]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f000 fc2e 	bl	8008c48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2277      	movs	r2, #119	; 0x77
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	609a      	str	r2, [r3, #8]
      break;
 8008404:	e04f      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6818      	ldr	r0, [r3, #0]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	6899      	ldr	r1, [r3, #8]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	f000 fc17 	bl	8008c48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2180      	movs	r1, #128	; 0x80
 8008426:	01c9      	lsls	r1, r1, #7
 8008428:	430a      	orrs	r2, r1
 800842a:	609a      	str	r2, [r3, #8]
      break;
 800842c:	e03b      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6859      	ldr	r1, [r3, #4]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	001a      	movs	r2, r3
 800843c:	f000 fb88 	bl	8008b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2150      	movs	r1, #80	; 0x50
 8008446:	0018      	movs	r0, r3
 8008448:	f000 fbe2 	bl	8008c10 <TIM_ITRx_SetConfig>
      break;
 800844c:	e02b      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	6859      	ldr	r1, [r3, #4]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	001a      	movs	r2, r3
 800845c:	f000 fba6 	bl	8008bac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2160      	movs	r1, #96	; 0x60
 8008466:	0018      	movs	r0, r3
 8008468:	f000 fbd2 	bl	8008c10 <TIM_ITRx_SetConfig>
      break;
 800846c:	e01b      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	6859      	ldr	r1, [r3, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	001a      	movs	r2, r3
 800847c:	f000 fb68 	bl	8008b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2140      	movs	r1, #64	; 0x40
 8008486:	0018      	movs	r0, r3
 8008488:	f000 fbc2 	bl	8008c10 <TIM_ITRx_SetConfig>
      break;
 800848c:	e00b      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	0019      	movs	r1, r3
 8008498:	0010      	movs	r0, r2
 800849a:	f000 fbb9 	bl	8008c10 <TIM_ITRx_SetConfig>
        break;
 800849e:	e002      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80084a0:	46c0      	nop			; (mov r8, r8)
 80084a2:	e000      	b.n	80084a6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80084a4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	223d      	movs	r2, #61	; 0x3d
 80084aa:	2101      	movs	r1, #1
 80084ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	223c      	movs	r2, #60	; 0x3c
 80084b2:	2100      	movs	r1, #0
 80084b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	0018      	movs	r0, r3
 80084ba:	46bd      	mov	sp, r7
 80084bc:	b004      	add	sp, #16
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	ffceff88 	.word	0xffceff88
 80084c4:	ffff00ff 	.word	0xffff00ff

080084c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a34      	ldr	r2, [pc, #208]	; (80085ac <TIM_Base_SetConfig+0xe4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d008      	beq.n	80084f2 <TIM_Base_SetConfig+0x2a>
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	2380      	movs	r3, #128	; 0x80
 80084e4:	05db      	lsls	r3, r3, #23
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d003      	beq.n	80084f2 <TIM_Base_SetConfig+0x2a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a30      	ldr	r2, [pc, #192]	; (80085b0 <TIM_Base_SetConfig+0xe8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d108      	bne.n	8008504 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2270      	movs	r2, #112	; 0x70
 80084f6:	4393      	bics	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4313      	orrs	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a29      	ldr	r2, [pc, #164]	; (80085ac <TIM_Base_SetConfig+0xe4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d018      	beq.n	800853e <TIM_Base_SetConfig+0x76>
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	2380      	movs	r3, #128	; 0x80
 8008510:	05db      	lsls	r3, r3, #23
 8008512:	429a      	cmp	r2, r3
 8008514:	d013      	beq.n	800853e <TIM_Base_SetConfig+0x76>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a25      	ldr	r2, [pc, #148]	; (80085b0 <TIM_Base_SetConfig+0xe8>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00f      	beq.n	800853e <TIM_Base_SetConfig+0x76>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <TIM_Base_SetConfig+0xec>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00b      	beq.n	800853e <TIM_Base_SetConfig+0x76>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a23      	ldr	r2, [pc, #140]	; (80085b8 <TIM_Base_SetConfig+0xf0>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d007      	beq.n	800853e <TIM_Base_SetConfig+0x76>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a22      	ldr	r2, [pc, #136]	; (80085bc <TIM_Base_SetConfig+0xf4>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d003      	beq.n	800853e <TIM_Base_SetConfig+0x76>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <TIM_Base_SetConfig+0xf8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d108      	bne.n	8008550 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a20      	ldr	r2, [pc, #128]	; (80085c4 <TIM_Base_SetConfig+0xfc>)
 8008542:	4013      	ands	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	4313      	orrs	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2280      	movs	r2, #128	; 0x80
 8008554:	4393      	bics	r3, r2
 8008556:	001a      	movs	r2, r3
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <TIM_Base_SetConfig+0xe4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0xce>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a0d      	ldr	r2, [pc, #52]	; (80085b8 <TIM_Base_SetConfig+0xf0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0xce>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <TIM_Base_SetConfig+0xf4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0xce>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a0b      	ldr	r2, [pc, #44]	; (80085c0 <TIM_Base_SetConfig+0xf8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d103      	bne.n	800859e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	615a      	str	r2, [r3, #20]
}
 80085a4:	46c0      	nop			; (mov r8, r8)
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b004      	add	sp, #16
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40000400 	.word	0x40000400
 80085b4:	40002000 	.word	0x40002000
 80085b8:	40014000 	.word	0x40014000
 80085bc:	40014400 	.word	0x40014400
 80085c0:	40014800 	.word	0x40014800
 80085c4:	fffffcff 	.word	0xfffffcff

080085c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	2201      	movs	r2, #1
 80085d8:	4393      	bics	r3, r2
 80085da:	001a      	movs	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	4a32      	ldr	r2, [pc, #200]	; (80086c0 <TIM_OC1_SetConfig+0xf8>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2203      	movs	r2, #3
 80085fe:	4393      	bics	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2202      	movs	r2, #2
 8008610:	4393      	bics	r3, r2
 8008612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4313      	orrs	r3, r2
 800861c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a28      	ldr	r2, [pc, #160]	; (80086c4 <TIM_OC1_SetConfig+0xfc>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00b      	beq.n	800863e <TIM_OC1_SetConfig+0x76>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <TIM_OC1_SetConfig+0x100>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d007      	beq.n	800863e <TIM_OC1_SetConfig+0x76>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a26      	ldr	r2, [pc, #152]	; (80086cc <TIM_OC1_SetConfig+0x104>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d003      	beq.n	800863e <TIM_OC1_SetConfig+0x76>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a25      	ldr	r2, [pc, #148]	; (80086d0 <TIM_OC1_SetConfig+0x108>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d10c      	bne.n	8008658 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2208      	movs	r2, #8
 8008642:	4393      	bics	r3, r2
 8008644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	4313      	orrs	r3, r2
 800864e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2204      	movs	r2, #4
 8008654:	4393      	bics	r3, r2
 8008656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <TIM_OC1_SetConfig+0xfc>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00b      	beq.n	8008678 <TIM_OC1_SetConfig+0xb0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a19      	ldr	r2, [pc, #100]	; (80086c8 <TIM_OC1_SetConfig+0x100>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <TIM_OC1_SetConfig+0xb0>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a18      	ldr	r2, [pc, #96]	; (80086cc <TIM_OC1_SetConfig+0x104>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_OC1_SetConfig+0xb0>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a17      	ldr	r2, [pc, #92]	; (80086d0 <TIM_OC1_SetConfig+0x108>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d111      	bne.n	800869c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	4a16      	ldr	r2, [pc, #88]	; (80086d4 <TIM_OC1_SetConfig+0x10c>)
 800867c:	4013      	ands	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <TIM_OC1_SetConfig+0x110>)
 8008684:	4013      	ands	r3, r2
 8008686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	621a      	str	r2, [r3, #32]
}
 80086b6:	46c0      	nop			; (mov r8, r8)
 80086b8:	46bd      	mov	sp, r7
 80086ba:	b006      	add	sp, #24
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	fffeff8f 	.word	0xfffeff8f
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40014400 	.word	0x40014400
 80086d0:	40014800 	.word	0x40014800
 80086d4:	fffffeff 	.word	0xfffffeff
 80086d8:	fffffdff 	.word	0xfffffdff

080086dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	2210      	movs	r2, #16
 80086ec:	4393      	bics	r3, r2
 80086ee:	001a      	movs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	699b      	ldr	r3, [r3, #24]
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a2e      	ldr	r2, [pc, #184]	; (80087c4 <TIM_OC2_SetConfig+0xe8>)
 800870a:	4013      	ands	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4a2d      	ldr	r2, [pc, #180]	; (80087c8 <TIM_OC2_SetConfig+0xec>)
 8008712:	4013      	ands	r3, r2
 8008714:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2220      	movs	r2, #32
 8008726:	4393      	bics	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a24      	ldr	r2, [pc, #144]	; (80087cc <TIM_OC2_SetConfig+0xf0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d10d      	bne.n	800875a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2280      	movs	r2, #128	; 0x80
 8008742:	4393      	bics	r3, r2
 8008744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2240      	movs	r2, #64	; 0x40
 8008756:	4393      	bics	r3, r2
 8008758:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1b      	ldr	r2, [pc, #108]	; (80087cc <TIM_OC2_SetConfig+0xf0>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00b      	beq.n	800877a <TIM_OC2_SetConfig+0x9e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1a      	ldr	r2, [pc, #104]	; (80087d0 <TIM_OC2_SetConfig+0xf4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d007      	beq.n	800877a <TIM_OC2_SetConfig+0x9e>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a19      	ldr	r2, [pc, #100]	; (80087d4 <TIM_OC2_SetConfig+0xf8>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d003      	beq.n	800877a <TIM_OC2_SetConfig+0x9e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a18      	ldr	r2, [pc, #96]	; (80087d8 <TIM_OC2_SetConfig+0xfc>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d113      	bne.n	80087a2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	4a17      	ldr	r2, [pc, #92]	; (80087dc <TIM_OC2_SetConfig+0x100>)
 800877e:	4013      	ands	r3, r2
 8008780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <TIM_OC2_SetConfig+0x104>)
 8008786:	4013      	ands	r3, r2
 8008788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	4313      	orrs	r3, r2
 80087a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	697a      	ldr	r2, [r7, #20]
 80087ba:	621a      	str	r2, [r3, #32]
}
 80087bc:	46c0      	nop			; (mov r8, r8)
 80087be:	46bd      	mov	sp, r7
 80087c0:	b006      	add	sp, #24
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	feff8fff 	.word	0xfeff8fff
 80087c8:	fffffcff 	.word	0xfffffcff
 80087cc:	40012c00 	.word	0x40012c00
 80087d0:	40014000 	.word	0x40014000
 80087d4:	40014400 	.word	0x40014400
 80087d8:	40014800 	.word	0x40014800
 80087dc:	fffffbff 	.word	0xfffffbff
 80087e0:	fffff7ff 	.word	0xfffff7ff

080087e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b086      	sub	sp, #24
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	4a35      	ldr	r2, [pc, #212]	; (80088c8 <TIM_OC3_SetConfig+0xe4>)
 80087f4:	401a      	ands	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4a2f      	ldr	r2, [pc, #188]	; (80088cc <TIM_OC3_SetConfig+0xe8>)
 8008810:	4013      	ands	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2203      	movs	r2, #3
 8008818:	4393      	bics	r3, r2
 800881a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	4a29      	ldr	r2, [pc, #164]	; (80088d0 <TIM_OC3_SetConfig+0xec>)
 800882a:	4013      	ands	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	021b      	lsls	r3, r3, #8
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a25      	ldr	r2, [pc, #148]	; (80088d4 <TIM_OC3_SetConfig+0xf0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d10d      	bne.n	800885e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4a24      	ldr	r2, [pc, #144]	; (80088d8 <TIM_OC3_SetConfig+0xf4>)
 8008846:	4013      	ands	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	021b      	lsls	r3, r3, #8
 8008850:	697a      	ldr	r2, [r7, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	4a20      	ldr	r2, [pc, #128]	; (80088dc <TIM_OC3_SetConfig+0xf8>)
 800885a:	4013      	ands	r3, r2
 800885c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a1c      	ldr	r2, [pc, #112]	; (80088d4 <TIM_OC3_SetConfig+0xf0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d00b      	beq.n	800887e <TIM_OC3_SetConfig+0x9a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <TIM_OC3_SetConfig+0xfc>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d007      	beq.n	800887e <TIM_OC3_SetConfig+0x9a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a1c      	ldr	r2, [pc, #112]	; (80088e4 <TIM_OC3_SetConfig+0x100>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d003      	beq.n	800887e <TIM_OC3_SetConfig+0x9a>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a1b      	ldr	r2, [pc, #108]	; (80088e8 <TIM_OC3_SetConfig+0x104>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d113      	bne.n	80088a6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	4a1a      	ldr	r2, [pc, #104]	; (80088ec <TIM_OC3_SetConfig+0x108>)
 8008882:	4013      	ands	r3, r2
 8008884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	4a19      	ldr	r2, [pc, #100]	; (80088f0 <TIM_OC3_SetConfig+0x10c>)
 800888a:	4013      	ands	r3, r2
 800888c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	4313      	orrs	r3, r2
 8008898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	011b      	lsls	r3, r3, #4
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685a      	ldr	r2, [r3, #4]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	621a      	str	r2, [r3, #32]
}
 80088c0:	46c0      	nop			; (mov r8, r8)
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b006      	add	sp, #24
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	fffffeff 	.word	0xfffffeff
 80088cc:	fffeff8f 	.word	0xfffeff8f
 80088d0:	fffffdff 	.word	0xfffffdff
 80088d4:	40012c00 	.word	0x40012c00
 80088d8:	fffff7ff 	.word	0xfffff7ff
 80088dc:	fffffbff 	.word	0xfffffbff
 80088e0:	40014000 	.word	0x40014000
 80088e4:	40014400 	.word	0x40014400
 80088e8:	40014800 	.word	0x40014800
 80088ec:	ffffefff 	.word	0xffffefff
 80088f0:	ffffdfff 	.word	0xffffdfff

080088f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	4a28      	ldr	r2, [pc, #160]	; (80089a4 <TIM_OC4_SetConfig+0xb0>)
 8008904:	401a      	ands	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a22      	ldr	r2, [pc, #136]	; (80089a8 <TIM_OC4_SetConfig+0xb4>)
 8008920:	4013      	ands	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	4a21      	ldr	r2, [pc, #132]	; (80089ac <TIM_OC4_SetConfig+0xb8>)
 8008928:	4013      	ands	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	021b      	lsls	r3, r3, #8
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	4313      	orrs	r3, r2
 8008936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	4a1d      	ldr	r2, [pc, #116]	; (80089b0 <TIM_OC4_SetConfig+0xbc>)
 800893c:	4013      	ands	r3, r2
 800893e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	031b      	lsls	r3, r3, #12
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a19      	ldr	r2, [pc, #100]	; (80089b4 <TIM_OC4_SetConfig+0xc0>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d00b      	beq.n	800896c <TIM_OC4_SetConfig+0x78>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a18      	ldr	r2, [pc, #96]	; (80089b8 <TIM_OC4_SetConfig+0xc4>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d007      	beq.n	800896c <TIM_OC4_SetConfig+0x78>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a17      	ldr	r2, [pc, #92]	; (80089bc <TIM_OC4_SetConfig+0xc8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d003      	beq.n	800896c <TIM_OC4_SetConfig+0x78>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a16      	ldr	r2, [pc, #88]	; (80089c0 <TIM_OC4_SetConfig+0xcc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d109      	bne.n	8008980 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	4a15      	ldr	r2, [pc, #84]	; (80089c4 <TIM_OC4_SetConfig+0xd0>)
 8008970:	4013      	ands	r3, r2
 8008972:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	695b      	ldr	r3, [r3, #20]
 8008978:	019b      	lsls	r3, r3, #6
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	621a      	str	r2, [r3, #32]
}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	46bd      	mov	sp, r7
 800899e:	b006      	add	sp, #24
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	46c0      	nop			; (mov r8, r8)
 80089a4:	ffffefff 	.word	0xffffefff
 80089a8:	feff8fff 	.word	0xfeff8fff
 80089ac:	fffffcff 	.word	0xfffffcff
 80089b0:	ffffdfff 	.word	0xffffdfff
 80089b4:	40012c00 	.word	0x40012c00
 80089b8:	40014000 	.word	0x40014000
 80089bc:	40014400 	.word	0x40014400
 80089c0:	40014800 	.word	0x40014800
 80089c4:	ffffbfff 	.word	0xffffbfff

080089c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	4a25      	ldr	r2, [pc, #148]	; (8008a6c <TIM_OC5_SetConfig+0xa4>)
 80089d8:	401a      	ands	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4a1f      	ldr	r2, [pc, #124]	; (8008a70 <TIM_OC5_SetConfig+0xa8>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	4a1b      	ldr	r2, [pc, #108]	; (8008a74 <TIM_OC5_SetConfig+0xac>)
 8008a06:	4013      	ands	r3, r2
 8008a08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	041b      	lsls	r3, r3, #16
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <TIM_OC5_SetConfig+0xb0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00b      	beq.n	8008a36 <TIM_OC5_SetConfig+0x6e>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <TIM_OC5_SetConfig+0xb4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d007      	beq.n	8008a36 <TIM_OC5_SetConfig+0x6e>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <TIM_OC5_SetConfig+0xb8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d003      	beq.n	8008a36 <TIM_OC5_SetConfig+0x6e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <TIM_OC5_SetConfig+0xbc>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d109      	bne.n	8008a4a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4a0c      	ldr	r2, [pc, #48]	; (8008a6c <TIM_OC5_SetConfig+0xa4>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	695b      	ldr	r3, [r3, #20]
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	621a      	str	r2, [r3, #32]
}
 8008a64:	46c0      	nop			; (mov r8, r8)
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b006      	add	sp, #24
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	fffeffff 	.word	0xfffeffff
 8008a70:	fffeff8f 	.word	0xfffeff8f
 8008a74:	fffdffff 	.word	0xfffdffff
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800

08008a88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <TIM_OC6_SetConfig+0xa8>)
 8008a98:	401a      	ands	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4a20      	ldr	r2, [pc, #128]	; (8008b34 <TIM_OC6_SetConfig+0xac>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	021b      	lsls	r3, r3, #8
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	4a1c      	ldr	r2, [pc, #112]	; (8008b38 <TIM_OC6_SetConfig+0xb0>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	051b      	lsls	r3, r3, #20
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a18      	ldr	r2, [pc, #96]	; (8008b3c <TIM_OC6_SetConfig+0xb4>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d00b      	beq.n	8008af8 <TIM_OC6_SetConfig+0x70>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a17      	ldr	r2, [pc, #92]	; (8008b40 <TIM_OC6_SetConfig+0xb8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d007      	beq.n	8008af8 <TIM_OC6_SetConfig+0x70>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a16      	ldr	r2, [pc, #88]	; (8008b44 <TIM_OC6_SetConfig+0xbc>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d003      	beq.n	8008af8 <TIM_OC6_SetConfig+0x70>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a15      	ldr	r2, [pc, #84]	; (8008b48 <TIM_OC6_SetConfig+0xc0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d109      	bne.n	8008b0c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	4a14      	ldr	r2, [pc, #80]	; (8008b4c <TIM_OC6_SetConfig+0xc4>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	029b      	lsls	r3, r3, #10
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68fa      	ldr	r2, [r7, #12]
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	621a      	str	r2, [r3, #32]
}
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	b006      	add	sp, #24
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	ffefffff 	.word	0xffefffff
 8008b34:	feff8fff 	.word	0xfeff8fff
 8008b38:	ffdfffff 	.word	0xffdfffff
 8008b3c:	40012c00 	.word	0x40012c00
 8008b40:	40014000 	.word	0x40014000
 8008b44:	40014400 	.word	0x40014400
 8008b48:	40014800 	.word	0x40014800
 8008b4c:	fffbffff 	.word	0xfffbffff

08008b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	2201      	movs	r2, #1
 8008b68:	4393      	bics	r3, r2
 8008b6a:	001a      	movs	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	22f0      	movs	r2, #240	; 0xf0
 8008b7a:	4393      	bics	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	220a      	movs	r2, #10
 8008b8c:	4393      	bics	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	621a      	str	r2, [r3, #32]
}
 8008ba4:	46c0      	nop			; (mov r8, r8)
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	b006      	add	sp, #24
 8008baa:	bd80      	pop	{r7, pc}

08008bac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	2210      	movs	r2, #16
 8008bbe:	4393      	bics	r3, r2
 8008bc0:	001a      	movs	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	4a0d      	ldr	r2, [pc, #52]	; (8008c0c <TIM_TI2_ConfigInputStage+0x60>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	031b      	lsls	r3, r3, #12
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	22a0      	movs	r2, #160	; 0xa0
 8008be8:	4393      	bics	r3, r2
 8008bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	011b      	lsls	r3, r3, #4
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	46c0      	nop			; (mov r8, r8)
 8008c04:	46bd      	mov	sp, r7
 8008c06:	b006      	add	sp, #24
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	46c0      	nop			; (mov r8, r8)
 8008c0c:	ffff0fff 	.word	0xffff0fff

08008c10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <TIM_ITRx_SetConfig+0x34>)
 8008c24:	4013      	ands	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	2207      	movs	r2, #7
 8008c30:	4313      	orrs	r3, r2
 8008c32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	609a      	str	r2, [r3, #8]
}
 8008c3a:	46c0      	nop			; (mov r8, r8)
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	b004      	add	sp, #16
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	ffcfff8f 	.word	0xffcfff8f

08008c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	4a09      	ldr	r2, [pc, #36]	; (8008c84 <TIM_ETR_SetConfig+0x3c>)
 8008c60:	4013      	ands	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	021a      	lsls	r2, r3, #8
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	431a      	orrs	r2, r3
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	609a      	str	r2, [r3, #8]
}
 8008c7c:	46c0      	nop			; (mov r8, r8)
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	b006      	add	sp, #24
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	ffff00ff 	.word	0xffff00ff

08008c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	221f      	movs	r2, #31
 8008c98:	4013      	ands	r3, r2
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	409a      	lsls	r2, r3
 8008c9e:	0013      	movs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	697a      	ldr	r2, [r7, #20]
 8008ca8:	43d2      	mvns	r2, r2
 8008caa:	401a      	ands	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6a1a      	ldr	r2, [r3, #32]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	211f      	movs	r1, #31
 8008cb8:	400b      	ands	r3, r1
 8008cba:	6879      	ldr	r1, [r7, #4]
 8008cbc:	4099      	lsls	r1, r3
 8008cbe:	000b      	movs	r3, r1
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	621a      	str	r2, [r3, #32]
}
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	b006      	add	sp, #24
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	223c      	movs	r2, #60	; 0x3c
 8008cde:	5c9b      	ldrb	r3, [r3, r2]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d101      	bne.n	8008ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	e055      	b.n	8008d94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	223c      	movs	r2, #60	; 0x3c
 8008cec:	2101      	movs	r1, #1
 8008cee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	223d      	movs	r2, #61	; 0x3d
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a23      	ldr	r2, [pc, #140]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d108      	bne.n	8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4a22      	ldr	r2, [pc, #136]	; (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d16:	4013      	ands	r3, r2
 8008d18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2270      	movs	r2, #112	; 0x70
 8008d28:	4393      	bics	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d00f      	beq.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	2380      	movs	r3, #128	; 0x80
 8008d4e:	05db      	lsls	r3, r3, #23
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d009      	beq.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d004      	beq.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d10c      	bne.n	8008d82 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2280      	movs	r2, #128	; 0x80
 8008d6c:	4393      	bics	r3, r2
 8008d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68ba      	ldr	r2, [r7, #8]
 8008d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	223d      	movs	r2, #61	; 0x3d
 8008d86:	2101      	movs	r1, #1
 8008d88:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	223c      	movs	r2, #60	; 0x3c
 8008d8e:	2100      	movs	r1, #0
 8008d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	0018      	movs	r0, r3
 8008d96:	46bd      	mov	sp, r7
 8008d98:	b004      	add	sp, #16
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	40012c00 	.word	0x40012c00
 8008da0:	ff0fffff 	.word	0xff0fffff
 8008da4:	40000400 	.word	0x40000400
 8008da8:	40014000 	.word	0x40014000

08008dac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	223c      	movs	r2, #60	; 0x3c
 8008dbe:	5c9b      	ldrb	r3, [r3, r2]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d101      	bne.n	8008dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e079      	b.n	8008ebc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	223c      	movs	r2, #60	; 0x3c
 8008dcc:	2101      	movs	r1, #1
 8008dce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	22ff      	movs	r2, #255	; 0xff
 8008dd4:	4393      	bics	r3, r2
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a38      	ldr	r2, [pc, #224]	; (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008de4:	401a      	ands	r2, r3
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	4a35      	ldr	r2, [pc, #212]	; (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008df2:	401a      	ands	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a33      	ldr	r2, [pc, #204]	; (8008ecc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008e00:	401a      	ands	r2, r3
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a30      	ldr	r2, [pc, #192]	; (8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008e0e:	401a      	ands	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	4a2e      	ldr	r2, [pc, #184]	; (8008ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4a2b      	ldr	r2, [pc, #172]	; (8008ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008e2a:	401a      	ands	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4a29      	ldr	r2, [pc, #164]	; (8008edc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008e38:	401a      	ands	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	041b      	lsls	r3, r3, #16
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a25      	ldr	r2, [pc, #148]	; (8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d106      	bne.n	8008e5c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	4a24      	ldr	r2, [pc, #144]	; (8008ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e52:	401a      	ands	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1f      	ldr	r2, [pc, #124]	; (8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d121      	bne.n	8008eaa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4a1f      	ldr	r2, [pc, #124]	; (8008ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008e6a:	401a      	ands	r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	051b      	lsls	r3, r3, #20
 8008e72:	4313      	orrs	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4a1c      	ldr	r2, [pc, #112]	; (8008eec <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008e7a:	401a      	ands	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4a1a      	ldr	r2, [pc, #104]	; (8008ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008e88:	401a      	ands	r2, r3
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a12      	ldr	r2, [pc, #72]	; (8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d106      	bne.n	8008eaa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008ea0:	401a      	ands	r2, r3
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	223c      	movs	r2, #60	; 0x3c
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b004      	add	sp, #16
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	fffffcff 	.word	0xfffffcff
 8008ec8:	fffffbff 	.word	0xfffffbff
 8008ecc:	fffff7ff 	.word	0xfffff7ff
 8008ed0:	ffffefff 	.word	0xffffefff
 8008ed4:	ffffdfff 	.word	0xffffdfff
 8008ed8:	ffffbfff 	.word	0xffffbfff
 8008edc:	fff0ffff 	.word	0xfff0ffff
 8008ee0:	40012c00 	.word	0x40012c00
 8008ee4:	efffffff 	.word	0xefffffff
 8008ee8:	ff0fffff 	.word	0xff0fffff
 8008eec:	feffffff 	.word	0xfeffffff
 8008ef0:	fdffffff 	.word	0xfdffffff
 8008ef4:	dfffffff 	.word	0xdfffffff

08008ef8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	; 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	223c      	movs	r2, #60	; 0x3c
 8008f08:	5c9b      	ldrb	r3, [r3, r2]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e08e      	b.n	8009030 <HAL_TIMEx_ConfigBreakInput+0x138>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	223c      	movs	r2, #60	; 0x3c
 8008f16:	2101      	movs	r1, #1
 8008f18:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b04      	cmp	r3, #4
 8008f20:	d019      	beq.n	8008f56 <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008f22:	d822      	bhi.n	8008f6a <HAL_TIMEx_ConfigBreakInput+0x72>
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d002      	beq.n	8008f2e <HAL_TIMEx_ConfigBreakInput+0x36>
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d00a      	beq.n	8008f42 <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008f2c:	e01d      	b.n	8008f6a <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008f36:	2380      	movs	r3, #128	; 0x80
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008f3c:	2309      	movs	r3, #9
 8008f3e:	61bb      	str	r3, [r7, #24]
      break;
 8008f40:	e01c      	b.n	8008f7c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008f42:	2302      	movs	r3, #2
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008f46:	2301      	movs	r3, #1
 8008f48:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008f4a:	2380      	movs	r3, #128	; 0x80
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008f50:	230a      	movs	r3, #10
 8008f52:	61bb      	str	r3, [r7, #24]
      break;
 8008f54:	e012      	b.n	8008f7c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008f56:	2304      	movs	r3, #4
 8008f58:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008f5e:	2380      	movs	r3, #128	; 0x80
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008f64:	230b      	movs	r3, #11
 8008f66:	61bb      	str	r3, [r7, #24]
      break;
 8008f68:	e008      	b.n	8008f7c <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61bb      	str	r3, [r7, #24]
      break;
 8008f7a:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d003      	beq.n	8008f8a <HAL_TIMEx_ConfigBreakInput+0x92>
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d027      	beq.n	8008fd8 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008f88:	e04d      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f90:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	43da      	mvns	r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	4013      	ands	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	409a      	lsls	r2, r3
 8008fa4:	0013      	movs	r3, r2
 8008fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa8:	4013      	ands	r3, r2
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	43da      	mvns	r2, r3
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	409a      	lsls	r2, r3
 8008fc2:	0013      	movs	r3, r2
 8008fc4:	6a3a      	ldr	r2, [r7, #32]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008fd6:	e026      	b.n	8009026 <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fde:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	43da      	mvns	r2, r3
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	409a      	lsls	r2, r3
 8008ff2:	0013      	movs	r3, r2
 8008ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	697a      	ldr	r2, [r7, #20]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	43da      	mvns	r2, r3
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	4013      	ands	r3, r2
 8009006:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	409a      	lsls	r2, r3
 8009010:	0013      	movs	r3, r2
 8009012:	6a3a      	ldr	r2, [r7, #32]
 8009014:	4013      	ands	r3, r2
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4313      	orrs	r3, r2
 800901a:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009024:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	223c      	movs	r2, #60	; 0x3c
 800902a:	2100      	movs	r1, #0
 800902c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	0018      	movs	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	b00a      	add	sp, #40	; 0x28
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e03f      	b.n	80090ca <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2259      	movs	r2, #89	; 0x59
 800904e:	5c9b      	ldrb	r3, [r3, r2]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d107      	bne.n	8009066 <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2258      	movs	r2, #88	; 0x58
 800905a:	2100      	movs	r1, #0
 800905c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	0018      	movs	r0, r3
 8009062:	f7f9 fd95 	bl	8002b90 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2259      	movs	r2, #89	; 0x59
 800906a:	2102      	movs	r1, #2
 800906c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2101      	movs	r1, #1
 800907a:	438a      	bics	r2, r1
 800907c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	0018      	movs	r0, r3
 8009082:	f000 fbdb 	bl	800983c <USART_SetConfig>
 8009086:	0003      	movs	r3, r0
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	e01c      	b.n	80090ca <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	490e      	ldr	r1, [pc, #56]	; (80090d4 <HAL_USART_Init+0x9c>)
 800909c:	400a      	ands	r2, r1
 800909e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689a      	ldr	r2, [r3, #8]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	212a      	movs	r1, #42	; 0x2a
 80090ac:	438a      	bics	r2, r1
 80090ae:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2101      	movs	r1, #1
 80090bc:	430a      	orrs	r2, r1
 80090be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	0018      	movs	r0, r3
 80090c4:	f000 fe56 	bl	8009d74 <USART_CheckIdleState>
 80090c8:	0003      	movs	r3, r0
}
 80090ca:	0018      	movs	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	b002      	add	sp, #8
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	ffffbfff 	.word	0xffffbfff

080090d8 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	1dbb      	adds	r3, r7, #6
 80090e6:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2259      	movs	r2, #89	; 0x59
 80090ec:	5c9b      	ldrb	r3, [r3, r2]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d000      	beq.n	80090f6 <HAL_USART_Transmit+0x1e>
 80090f4:	e0a9      	b.n	800924a <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_USART_Transmit+0x2c>
 80090fc:	1dbb      	adds	r3, r7, #6
 80090fe:	881b      	ldrh	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0a1      	b.n	800924c <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	015b      	lsls	r3, r3, #5
 8009110:	429a      	cmp	r2, r3
 8009112:	d109      	bne.n	8009128 <HAL_USART_Transmit+0x50>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d105      	bne.n	8009128 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2201      	movs	r2, #1
 8009120:	4013      	ands	r3, r2
 8009122:	d001      	beq.n	8009128 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 8009124:	2301      	movs	r3, #1
 8009126:	e091      	b.n	800924c <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2258      	movs	r2, #88	; 0x58
 800912c:	5c9b      	ldrb	r3, [r3, r2]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d101      	bne.n	8009136 <HAL_USART_Transmit+0x5e>
 8009132:	2302      	movs	r3, #2
 8009134:	e08a      	b.n	800924c <HAL_USART_Transmit+0x174>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2258      	movs	r2, #88	; 0x58
 800913a:	2101      	movs	r1, #1
 800913c:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2259      	movs	r2, #89	; 0x59
 8009148:	2112      	movs	r1, #18
 800914a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800914c:	f7f9 ff9a 	bl	8003084 <HAL_GetTick>
 8009150:	0003      	movs	r3, r0
 8009152:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	1dba      	adds	r2, r7, #6
 8009158:	8812      	ldrh	r2, [r2, #0]
 800915a:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	1dba      	adds	r2, r7, #6
 8009160:	8812      	ldrh	r2, [r2, #0]
 8009162:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	689a      	ldr	r2, [r3, #8]
 8009168:	2380      	movs	r3, #128	; 0x80
 800916a:	015b      	lsls	r3, r3, #5
 800916c:	429a      	cmp	r2, r3
 800916e:	d108      	bne.n	8009182 <HAL_USART_Transmit+0xaa>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	61bb      	str	r3, [r7, #24]
 8009180:	e003      	b.n	800918a <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800918a:	e02a      	b.n	80091e2 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	0013      	movs	r3, r2
 8009196:	2200      	movs	r2, #0
 8009198:	2180      	movs	r1, #128	; 0x80
 800919a:	f000 fb19 	bl	80097d0 <USART_WaitOnFlagUntilTimeout>
 800919e:	1e03      	subs	r3, r0, #0
 80091a0:	d001      	beq.n	80091a6 <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e052      	b.n	800924c <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10b      	bne.n	80091c4 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	001a      	movs	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	05d2      	lsls	r2, r2, #23
 80091b8:	0dd2      	lsrs	r2, r2, #23
 80091ba:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	3302      	adds	r3, #2
 80091c0:	61bb      	str	r3, [r7, #24]
 80091c2:	e007      	b.n	80091d4 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	781a      	ldrb	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	3301      	adds	r3, #1
 80091d2:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091d8:	b29b      	uxth	r3, r3
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1cf      	bne.n	800918c <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	0013      	movs	r3, r2
 80091f6:	2200      	movs	r2, #0
 80091f8:	2140      	movs	r1, #64	; 0x40
 80091fa:	f000 fae9 	bl	80097d0 <USART_WaitOnFlagUntilTimeout>
 80091fe:	1e03      	subs	r3, r0, #0
 8009200:	d001      	beq.n	8009206 <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e022      	b.n	800924c <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2240      	movs	r2, #64	; 0x40
 800920c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2208      	movs	r2, #8
 8009214:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2108      	movs	r1, #8
 8009222:	430a      	orrs	r2, r1
 8009224:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699a      	ldr	r2, [r3, #24]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2110      	movs	r1, #16
 8009232:	430a      	orrs	r2, r1
 8009234:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2259      	movs	r2, #89	; 0x59
 800923a:	2101      	movs	r1, #1
 800923c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2258      	movs	r2, #88	; 0x58
 8009242:	2100      	movs	r1, #0
 8009244:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800924a:	2302      	movs	r3, #2
  }
}
 800924c:	0018      	movs	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	b008      	add	sp, #32
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	1dbb      	adds	r3, r7, #6
 8009260:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009262:	2317      	movs	r3, #23
 8009264:	18fb      	adds	r3, r7, r3
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2259      	movs	r2, #89	; 0x59
 800926e:	5c9b      	ldrb	r3, [r3, r2]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d000      	beq.n	8009278 <HAL_USART_Transmit_DMA+0x24>
 8009276:	e07d      	b.n	8009374 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_USART_Transmit_DMA+0x32>
 800927e:	1dbb      	adds	r3, r7, #6
 8009280:	881b      	ldrh	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e075      	b.n	8009376 <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	2380      	movs	r3, #128	; 0x80
 8009290:	015b      	lsls	r3, r3, #5
 8009292:	429a      	cmp	r2, r3
 8009294:	d10a      	bne.n	80092ac <HAL_USART_Transmit_DMA+0x58>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d106      	bne.n	80092ac <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	001a      	movs	r2, r3
 80092a2:	2301      	movs	r3, #1
 80092a4:	4013      	ands	r3, r2
 80092a6:	d001      	beq.n	80092ac <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e064      	b.n	8009376 <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2258      	movs	r2, #88	; 0x58
 80092b0:	5c9b      	ldrb	r3, [r3, r2]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d101      	bne.n	80092ba <HAL_USART_Transmit_DMA+0x66>
 80092b6:	2302      	movs	r3, #2
 80092b8:	e05d      	b.n	8009376 <HAL_USART_Transmit_DMA+0x122>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2258      	movs	r2, #88	; 0x58
 80092be:	2101      	movs	r1, #1
 80092c0:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	1dba      	adds	r2, r7, #6
 80092cc:	8812      	ldrh	r2, [r2, #0]
 80092ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	1dba      	adds	r2, r7, #6
 80092d4:	8812      	ldrh	r2, [r2, #0]
 80092d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2259      	movs	r2, #89	; 0x59
 80092e2:	2112      	movs	r1, #18
 80092e4:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d01e      	beq.n	800932c <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f2:	4a23      	ldr	r2, [pc, #140]	; (8009380 <HAL_USART_Transmit_DMA+0x12c>)
 80092f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092fa:	4a22      	ldr	r2, [pc, #136]	; (8009384 <HAL_USART_Transmit_DMA+0x130>)
 80092fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009302:	4a21      	ldr	r2, [pc, #132]	; (8009388 <HAL_USART_Transmit_DMA+0x134>)
 8009304:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 8009306:	2308      	movs	r3, #8
 8009308:	18fb      	adds	r3, r7, r3
 800930a:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6819      	ldr	r1, [r3, #0]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3328      	adds	r3, #40	; 0x28
 800931a:	001a      	movs	r2, r3
 800931c:	1dbb      	adds	r3, r7, #6
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	2417      	movs	r4, #23
 8009322:	193c      	adds	r4, r7, r4
 8009324:	f7fa faba 	bl	800389c <HAL_DMA_Start_IT>
 8009328:	0003      	movs	r3, r0
 800932a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800932c:	2317      	movs	r3, #23
 800932e:	18fb      	adds	r3, r7, r3
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d111      	bne.n	800935a <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2240      	movs	r2, #64	; 0x40
 800933c:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2258      	movs	r2, #88	; 0x58
 8009342:	2100      	movs	r1, #0
 8009344:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2180      	movs	r1, #128	; 0x80
 8009352:	430a      	orrs	r2, r1
 8009354:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	e00d      	b.n	8009376 <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2210      	movs	r2, #16
 800935e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2258      	movs	r2, #88	; 0x58
 8009364:	2100      	movs	r1, #0
 8009366:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2259      	movs	r2, #89	; 0x59
 800936c:	2101      	movs	r1, #1
 800936e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e000      	b.n	8009376 <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 8009374:	2302      	movs	r3, #2
  }
}
 8009376:	0018      	movs	r0, r3
 8009378:	46bd      	mov	sp, r7
 800937a:	b007      	add	sp, #28
 800937c:	bd90      	pop	{r4, r7, pc}
 800937e:	46c0      	nop			; (mov r8, r8)
 8009380:	080096d9 	.word	0x080096d9
 8009384:	08009743 	.word	0x08009743
 8009388:	08009761 	.word	0x08009761

0800938c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4aab      	ldr	r2, [pc, #684]	; (800965c <HAL_USART_IRQHandler+0x2d0>)
 80093b0:	4013      	ands	r3, r2
 80093b2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d117      	bne.n	80093ea <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2220      	movs	r2, #32
 80093be:	4013      	ands	r3, r2
 80093c0:	d013      	beq.n	80093ea <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2220      	movs	r2, #32
 80093c6:	4013      	ands	r3, r2
 80093c8:	d104      	bne.n	80093d4 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	2380      	movs	r3, #128	; 0x80
 80093ce:	055b      	lsls	r3, r3, #21
 80093d0:	4013      	ands	r3, r2
 80093d2:	d00a      	beq.n	80093ea <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d100      	bne.n	80093de <HAL_USART_IRQHandler+0x52>
 80093dc:	e135      	b.n	800964a <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	0010      	movs	r0, r2
 80093e6:	4798      	blx	r3
      }
      return;
 80093e8:	e12f      	b.n	800964a <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d100      	bne.n	80093f2 <HAL_USART_IRQHandler+0x66>
 80093f0:	e0eb      	b.n	80095ca <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	4a9a      	ldr	r2, [pc, #616]	; (8009660 <HAL_USART_IRQHandler+0x2d4>)
 80093f6:	4013      	ands	r3, r2
 80093f8:	d105      	bne.n	8009406 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	2390      	movs	r3, #144	; 0x90
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4013      	ands	r3, r2
 8009402:	d100      	bne.n	8009406 <HAL_USART_IRQHandler+0x7a>
 8009404:	e0e1      	b.n	80095ca <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2201      	movs	r2, #1
 800940a:	4013      	ands	r3, r2
 800940c:	d00e      	beq.n	800942c <HAL_USART_IRQHandler+0xa0>
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	2380      	movs	r3, #128	; 0x80
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	4013      	ands	r3, r2
 8009416:	d009      	beq.n	800942c <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009424:	2201      	movs	r2, #1
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	2202      	movs	r2, #2
 8009430:	4013      	ands	r3, r2
 8009432:	d00d      	beq.n	8009450 <HAL_USART_IRQHandler+0xc4>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2201      	movs	r2, #1
 8009438:	4013      	ands	r3, r2
 800943a:	d009      	beq.n	8009450 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2202      	movs	r2, #2
 8009442:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009448:	2204      	movs	r2, #4
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	2204      	movs	r2, #4
 8009454:	4013      	ands	r3, r2
 8009456:	d00d      	beq.n	8009474 <HAL_USART_IRQHandler+0xe8>
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2201      	movs	r2, #1
 800945c:	4013      	ands	r3, r2
 800945e:	d009      	beq.n	8009474 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2204      	movs	r2, #4
 8009466:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946c:	2202      	movs	r2, #2
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	2208      	movs	r2, #8
 8009478:	4013      	ands	r3, r2
 800947a:	d011      	beq.n	80094a0 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	2220      	movs	r2, #32
 8009480:	4013      	ands	r3, r2
 8009482:	d103      	bne.n	800948c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	4a76      	ldr	r2, [pc, #472]	; (8009660 <HAL_USART_IRQHandler+0x2d4>)
 8009488:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800948a:	d009      	beq.n	80094a0 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2208      	movs	r2, #8
 8009492:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009498:	2208      	movs	r2, #8
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094a0:	69fa      	ldr	r2, [r7, #28]
 80094a2:	2380      	movs	r3, #128	; 0x80
 80094a4:	019b      	lsls	r3, r3, #6
 80094a6:	4013      	ands	r3, r2
 80094a8:	d01a      	beq.n	80094e0 <HAL_USART_IRQHandler+0x154>
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2201      	movs	r2, #1
 80094ae:	4013      	ands	r3, r2
 80094b0:	d016      	beq.n	80094e0 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2259      	movs	r2, #89	; 0x59
 80094b6:	5c9b      	ldrb	r3, [r3, r2]
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b22      	cmp	r3, #34	; 0x22
 80094bc:	d105      	bne.n	80094ca <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	0192      	lsls	r2, r2, #6
 80094c6:	621a      	str	r2, [r3, #32]
        return;
 80094c8:	e0c4      	b.n	8009654 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2280      	movs	r2, #128	; 0x80
 80094d0:	0192      	lsls	r2, r2, #6
 80094d2:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d8:	2220      	movs	r2, #32
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d100      	bne.n	80094ea <HAL_USART_IRQHandler+0x15e>
 80094e8:	e0b1      	b.n	800964e <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2220      	movs	r2, #32
 80094ee:	4013      	ands	r3, r2
 80094f0:	d011      	beq.n	8009516 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	2220      	movs	r2, #32
 80094f6:	4013      	ands	r3, r2
 80094f8:	d104      	bne.n	8009504 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	2380      	movs	r3, #128	; 0x80
 80094fe:	055b      	lsls	r3, r3, #21
 8009500:	4013      	ands	r3, r2
 8009502:	d008      	beq.n	8009516 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	0010      	movs	r0, r2
 8009514:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951a:	2208      	movs	r2, #8
 800951c:	4013      	ands	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	2240      	movs	r2, #64	; 0x40
 8009528:	4013      	ands	r3, r2
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d002      	beq.n	8009534 <HAL_USART_IRQHandler+0x1a8>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d040      	beq.n	80095b6 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0018      	movs	r0, r3
 8009538:	f000 f8ae 	bl	8009698 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	2240      	movs	r2, #64	; 0x40
 8009544:	4013      	ands	r3, r2
 8009546:	2b40      	cmp	r3, #64	; 0x40
 8009548:	d130      	bne.n	80095ac <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2140      	movs	r1, #64	; 0x40
 8009556:	438a      	bics	r2, r1
 8009558:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955e:	2b00      	cmp	r3, #0
 8009560:	d008      	beq.n	8009574 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009566:	2200      	movs	r2, #0
 8009568:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956e:	0018      	movs	r0, r3
 8009570:	f7fa fa1a 	bl	80039a8 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009578:	2b00      	cmp	r3, #0
 800957a:	d012      	beq.n	80095a2 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009580:	4a38      	ldr	r2, [pc, #224]	; (8009664 <HAL_USART_IRQHandler+0x2d8>)
 8009582:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009588:	0018      	movs	r0, r3
 800958a:	f7fa fa0d 	bl	80039a8 <HAL_DMA_Abort_IT>
 800958e:	1e03      	subs	r3, r0, #0
 8009590:	d019      	beq.n	80095c6 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959c:	0018      	movs	r0, r3
 800959e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095a0:	e011      	b.n	80095c6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 f86f 	bl	8009688 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095aa:	e00c      	b.n	80095c6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	0018      	movs	r0, r3
 80095b0:	f000 f86a 	bl	8009688 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095b4:	e007      	b.n	80095c6 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	0018      	movs	r0, r3
 80095ba:	f000 f865 	bl	8009688 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 80095c4:	e043      	b.n	800964e <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095c6:	46c0      	nop			; (mov r8, r8)
    return;
 80095c8:	e041      	b.n	800964e <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	2280      	movs	r2, #128	; 0x80
 80095ce:	4013      	ands	r3, r2
 80095d0:	d012      	beq.n	80095f8 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2280      	movs	r2, #128	; 0x80
 80095d6:	4013      	ands	r3, r2
 80095d8:	d104      	bne.n	80095e4 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	2380      	movs	r3, #128	; 0x80
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	4013      	ands	r3, r2
 80095e2:	d009      	beq.n	80095f8 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d032      	beq.n	8009652 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	0010      	movs	r0, r2
 80095f4:	4798      	blx	r3
    }
    return;
 80095f6:	e02c      	b.n	8009652 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	2240      	movs	r2, #64	; 0x40
 80095fc:	4013      	ands	r3, r2
 80095fe:	d008      	beq.n	8009612 <HAL_USART_IRQHandler+0x286>
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2240      	movs	r2, #64	; 0x40
 8009604:	4013      	ands	r3, r2
 8009606:	d004      	beq.n	8009612 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	0018      	movs	r0, r3
 800960c:	f000 fbf6 	bl	8009dfc <USART_EndTransmit_IT>
    return;
 8009610:	e020      	b.n	8009654 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	2380      	movs	r3, #128	; 0x80
 8009616:	041b      	lsls	r3, r3, #16
 8009618:	4013      	ands	r3, r2
 800961a:	d009      	beq.n	8009630 <HAL_USART_IRQHandler+0x2a4>
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	2380      	movs	r3, #128	; 0x80
 8009620:	05db      	lsls	r3, r3, #23
 8009622:	4013      	ands	r3, r2
 8009624:	d004      	beq.n	8009630 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0018      	movs	r0, r3
 800962a:	f000 fc32 	bl	8009e92 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800962e:	e011      	b.n	8009654 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009630:	69fa      	ldr	r2, [r7, #28]
 8009632:	2380      	movs	r3, #128	; 0x80
 8009634:	045b      	lsls	r3, r3, #17
 8009636:	4013      	ands	r3, r2
 8009638:	d00c      	beq.n	8009654 <HAL_USART_IRQHandler+0x2c8>
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	da09      	bge.n	8009654 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	0018      	movs	r0, r3
 8009644:	f000 fc1d 	bl	8009e82 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009648:	e004      	b.n	8009654 <HAL_USART_IRQHandler+0x2c8>
      return;
 800964a:	46c0      	nop			; (mov r8, r8)
 800964c:	e002      	b.n	8009654 <HAL_USART_IRQHandler+0x2c8>
    return;
 800964e:	46c0      	nop			; (mov r8, r8)
 8009650:	e000      	b.n	8009654 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009652:	46c0      	nop			; (mov r8, r8)
  }
}
 8009654:	46bd      	mov	sp, r7
 8009656:	b008      	add	sp, #32
 8009658:	bd80      	pop	{r7, pc}
 800965a:	46c0      	nop			; (mov r8, r8)
 800965c:	0000200f 	.word	0x0000200f
 8009660:	10000001 	.word	0x10000001
 8009664:	080097a7 	.word	0x080097a7

08009668 <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009670:	46c0      	nop			; (mov r8, r8)
 8009672:	46bd      	mov	sp, r7
 8009674:	b002      	add	sp, #8
 8009676:	bd80      	pop	{r7, pc}

08009678 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8009680:	46c0      	nop			; (mov r8, r8)
 8009682:	46bd      	mov	sp, r7
 8009684:	b002      	add	sp, #8
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8009690:	46c0      	nop			; (mov r8, r8)
 8009692:	46bd      	mov	sp, r7
 8009694:	b002      	add	sp, #8
 8009696:	bd80      	pop	{r7, pc}

08009698 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4909      	ldr	r1, [pc, #36]	; (80096d0 <USART_EndTransfer+0x38>)
 80096ac:	400a      	ands	r2, r1
 80096ae:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4906      	ldr	r1, [pc, #24]	; (80096d4 <USART_EndTransfer+0x3c>)
 80096bc:	400a      	ands	r2, r1
 80096be:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2259      	movs	r2, #89	; 0x59
 80096c4:	2101      	movs	r1, #1
 80096c6:	5499      	strb	r1, [r3, r2]
}
 80096c8:	46c0      	nop			; (mov r8, r8)
 80096ca:	46bd      	mov	sp, r7
 80096cc:	b002      	add	sp, #8
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	fffffe1f 	.word	0xfffffe1f
 80096d4:	ef7ffffe 	.word	0xef7ffffe

080096d8 <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2220      	movs	r2, #32
 80096ee:	4013      	ands	r3, r2
 80096f0:	d119      	bne.n	8009726 <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2259      	movs	r2, #89	; 0x59
 80096fc:	5c9b      	ldrb	r3, [r3, r2]
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b12      	cmp	r3, #18
 8009702:	d11a      	bne.n	800973a <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2180      	movs	r1, #128	; 0x80
 8009710:	438a      	bics	r2, r1
 8009712:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2140      	movs	r1, #64	; 0x40
 8009720:	430a      	orrs	r2, r1
 8009722:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 8009724:	e009      	b.n	800973a <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2259      	movs	r2, #89	; 0x59
 800972a:	5c9b      	ldrb	r3, [r3, r2]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b12      	cmp	r3, #18
 8009730:	d103      	bne.n	800973a <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	0018      	movs	r0, r3
 8009736:	f7f7 fca5 	bl	8001084 <HAL_USART_TxCpltCallback>
}
 800973a:	46c0      	nop			; (mov r8, r8)
 800973c:	46bd      	mov	sp, r7
 800973e:	b004      	add	sp, #16
 8009740:	bd80      	pop	{r7, pc}

08009742 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	0018      	movs	r0, r3
 8009754:	f7ff ff88 	bl	8009668 <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009758:	46c0      	nop			; (mov r8, r8)
 800975a:	46bd      	mov	sp, r7
 800975c:	b004      	add	sp, #16
 800975e:	bd80      	pop	{r7, pc}

08009760 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	0018      	movs	r0, r3
 800977e:	f7ff ff8b 	bl	8009698 <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009786:	2210      	movs	r2, #16
 8009788:	431a      	orrs	r2, r3
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2259      	movs	r2, #89	; 0x59
 8009792:	2101      	movs	r1, #1
 8009794:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	0018      	movs	r0, r3
 800979a:	f7ff ff75 	bl	8009688 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800979e:	46c0      	nop			; (mov r8, r8)
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b004      	add	sp, #16
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	0018      	movs	r0, r3
 80097c4:	f7ff ff60 	bl	8009688 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80097c8:	46c0      	nop			; (mov r8, r8)
 80097ca:	46bd      	mov	sp, r7
 80097cc:	b004      	add	sp, #16
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	1dfb      	adds	r3, r7, #7
 80097de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80097e0:	e017      	b.n	8009812 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	3301      	adds	r3, #1
 80097e6:	d014      	beq.n	8009812 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097e8:	f7f9 fc4c 	bl	8003084 <HAL_GetTick>
 80097ec:	0002      	movs	r2, r0
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d302      	bcc.n	80097fe <USART_WaitOnFlagUntilTimeout+0x2e>
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d109      	bne.n	8009812 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2259      	movs	r2, #89	; 0x59
 8009802:	2101      	movs	r1, #1
 8009804:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2258      	movs	r2, #88	; 0x58
 800980a:	2100      	movs	r1, #0
 800980c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e00f      	b.n	8009832 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	4013      	ands	r3, r2
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	425a      	negs	r2, r3
 8009822:	4153      	adcs	r3, r2
 8009824:	b2db      	uxtb	r3, r3
 8009826:	001a      	movs	r2, r3
 8009828:	1dfb      	adds	r3, r7, #7
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	429a      	cmp	r2, r3
 800982e:	d0d8      	beq.n	80097e2 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	0018      	movs	r0, r3
 8009834:	46bd      	mov	sp, r7
 8009836:	b004      	add	sp, #16
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b088      	sub	sp, #32
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009844:	231e      	movs	r3, #30
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	689a      	ldr	r2, [r3, #8]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	695b      	ldr	r3, [r3, #20]
 800985e:	4313      	orrs	r3, r2
 8009860:	2280      	movs	r2, #128	; 0x80
 8009862:	0212      	lsls	r2, r2, #8
 8009864:	4313      	orrs	r3, r2
 8009866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4ab1      	ldr	r2, [pc, #708]	; (8009b34 <USART_SetConfig+0x2f8>)
 8009870:	4013      	ands	r3, r2
 8009872:	0019      	movs	r1, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	430a      	orrs	r2, r1
 800987c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800987e:	2380      	movs	r3, #128	; 0x80
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	4313      	orrs	r3, r2
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	4313      	orrs	r3, r2
 800989c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	4aa2      	ldr	r2, [pc, #648]	; (8009b38 <USART_SetConfig+0x2fc>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	0019      	movs	r1, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	220f      	movs	r2, #15
 80098c6:	4393      	bics	r3, r2
 80098c8:	0019      	movs	r1, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a98      	ldr	r2, [pc, #608]	; (8009b3c <USART_SetConfig+0x300>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d127      	bne.n	8009930 <USART_SetConfig+0xf4>
 80098e0:	4b97      	ldr	r3, [pc, #604]	; (8009b40 <USART_SetConfig+0x304>)
 80098e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e4:	2203      	movs	r2, #3
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d017      	beq.n	800991c <USART_SetConfig+0xe0>
 80098ec:	d81b      	bhi.n	8009926 <USART_SetConfig+0xea>
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d00a      	beq.n	8009908 <USART_SetConfig+0xcc>
 80098f2:	d818      	bhi.n	8009926 <USART_SetConfig+0xea>
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <USART_SetConfig+0xc2>
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d00a      	beq.n	8009912 <USART_SetConfig+0xd6>
 80098fc:	e013      	b.n	8009926 <USART_SetConfig+0xea>
 80098fe:	231f      	movs	r3, #31
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	2200      	movs	r2, #0
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	e058      	b.n	80099ba <USART_SetConfig+0x17e>
 8009908:	231f      	movs	r3, #31
 800990a:	18fb      	adds	r3, r7, r3
 800990c:	2202      	movs	r2, #2
 800990e:	701a      	strb	r2, [r3, #0]
 8009910:	e053      	b.n	80099ba <USART_SetConfig+0x17e>
 8009912:	231f      	movs	r3, #31
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	2204      	movs	r2, #4
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	e04e      	b.n	80099ba <USART_SetConfig+0x17e>
 800991c:	231f      	movs	r3, #31
 800991e:	18fb      	adds	r3, r7, r3
 8009920:	2208      	movs	r2, #8
 8009922:	701a      	strb	r2, [r3, #0]
 8009924:	e049      	b.n	80099ba <USART_SetConfig+0x17e>
 8009926:	231f      	movs	r3, #31
 8009928:	18fb      	adds	r3, r7, r3
 800992a:	2210      	movs	r2, #16
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	e044      	b.n	80099ba <USART_SetConfig+0x17e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a83      	ldr	r2, [pc, #524]	; (8009b44 <USART_SetConfig+0x308>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d127      	bne.n	800998a <USART_SetConfig+0x14e>
 800993a:	4b81      	ldr	r3, [pc, #516]	; (8009b40 <USART_SetConfig+0x304>)
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	220c      	movs	r2, #12
 8009940:	4013      	ands	r3, r2
 8009942:	2b0c      	cmp	r3, #12
 8009944:	d017      	beq.n	8009976 <USART_SetConfig+0x13a>
 8009946:	d81b      	bhi.n	8009980 <USART_SetConfig+0x144>
 8009948:	2b08      	cmp	r3, #8
 800994a:	d00a      	beq.n	8009962 <USART_SetConfig+0x126>
 800994c:	d818      	bhi.n	8009980 <USART_SetConfig+0x144>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <USART_SetConfig+0x11c>
 8009952:	2b04      	cmp	r3, #4
 8009954:	d00a      	beq.n	800996c <USART_SetConfig+0x130>
 8009956:	e013      	b.n	8009980 <USART_SetConfig+0x144>
 8009958:	231f      	movs	r3, #31
 800995a:	18fb      	adds	r3, r7, r3
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
 8009960:	e02b      	b.n	80099ba <USART_SetConfig+0x17e>
 8009962:	231f      	movs	r3, #31
 8009964:	18fb      	adds	r3, r7, r3
 8009966:	2202      	movs	r2, #2
 8009968:	701a      	strb	r2, [r3, #0]
 800996a:	e026      	b.n	80099ba <USART_SetConfig+0x17e>
 800996c:	231f      	movs	r3, #31
 800996e:	18fb      	adds	r3, r7, r3
 8009970:	2204      	movs	r2, #4
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	e021      	b.n	80099ba <USART_SetConfig+0x17e>
 8009976:	231f      	movs	r3, #31
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	2208      	movs	r2, #8
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	e01c      	b.n	80099ba <USART_SetConfig+0x17e>
 8009980:	231f      	movs	r3, #31
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	2210      	movs	r2, #16
 8009986:	701a      	strb	r2, [r3, #0]
 8009988:	e017      	b.n	80099ba <USART_SetConfig+0x17e>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a6e      	ldr	r2, [pc, #440]	; (8009b48 <USART_SetConfig+0x30c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d104      	bne.n	800999e <USART_SetConfig+0x162>
 8009994:	231f      	movs	r3, #31
 8009996:	18fb      	adds	r3, r7, r3
 8009998:	2200      	movs	r2, #0
 800999a:	701a      	strb	r2, [r3, #0]
 800999c:	e00d      	b.n	80099ba <USART_SetConfig+0x17e>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a6a      	ldr	r2, [pc, #424]	; (8009b4c <USART_SetConfig+0x310>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d104      	bne.n	80099b2 <USART_SetConfig+0x176>
 80099a8:	231f      	movs	r3, #31
 80099aa:	18fb      	adds	r3, r7, r3
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
 80099b0:	e003      	b.n	80099ba <USART_SetConfig+0x17e>
 80099b2:	231f      	movs	r3, #31
 80099b4:	18fb      	adds	r3, r7, r3
 80099b6:	2210      	movs	r2, #16
 80099b8:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 80099ba:	231f      	movs	r3, #31
 80099bc:	18fb      	adds	r3, r7, r3
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d100      	bne.n	80099c6 <USART_SetConfig+0x18a>
 80099c4:	e139      	b.n	8009c3a <USART_SetConfig+0x3fe>
 80099c6:	dd00      	ble.n	80099ca <USART_SetConfig+0x18e>
 80099c8:	e195      	b.n	8009cf6 <USART_SetConfig+0x4ba>
 80099ca:	2b04      	cmp	r3, #4
 80099cc:	d100      	bne.n	80099d0 <USART_SetConfig+0x194>
 80099ce:	e0d3      	b.n	8009b78 <USART_SetConfig+0x33c>
 80099d0:	dd00      	ble.n	80099d4 <USART_SetConfig+0x198>
 80099d2:	e190      	b.n	8009cf6 <USART_SetConfig+0x4ba>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <USART_SetConfig+0x1a4>
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d100      	bne.n	80099de <USART_SetConfig+0x1a2>
 80099dc:	e061      	b.n	8009aa2 <USART_SetConfig+0x266>
 80099de:	e18a      	b.n	8009cf6 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80099e0:	f7fc f904 	bl	8005bec <HAL_RCC_GetPCLK1Freq>
 80099e4:	0003      	movs	r3, r0
 80099e6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d044      	beq.n	8009a7a <USART_SetConfig+0x23e>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d03e      	beq.n	8009a76 <USART_SetConfig+0x23a>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	2b02      	cmp	r3, #2
 80099fe:	d038      	beq.n	8009a72 <USART_SetConfig+0x236>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d032      	beq.n	8009a6e <USART_SetConfig+0x232>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d02c      	beq.n	8009a6a <USART_SetConfig+0x22e>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a14:	2b05      	cmp	r3, #5
 8009a16:	d026      	beq.n	8009a66 <USART_SetConfig+0x22a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	2b06      	cmp	r3, #6
 8009a1e:	d020      	beq.n	8009a62 <USART_SetConfig+0x226>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2b07      	cmp	r3, #7
 8009a26:	d01a      	beq.n	8009a5e <USART_SetConfig+0x222>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d014      	beq.n	8009a5a <USART_SetConfig+0x21e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a34:	2b09      	cmp	r3, #9
 8009a36:	d00e      	beq.n	8009a56 <USART_SetConfig+0x21a>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	2b0a      	cmp	r3, #10
 8009a3e:	d008      	beq.n	8009a52 <USART_SetConfig+0x216>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	2b0b      	cmp	r3, #11
 8009a46:	d102      	bne.n	8009a4e <USART_SetConfig+0x212>
 8009a48:	2380      	movs	r3, #128	; 0x80
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	e016      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e014      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a52:	2380      	movs	r3, #128	; 0x80
 8009a54:	e012      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a56:	2340      	movs	r3, #64	; 0x40
 8009a58:	e010      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a5a:	2320      	movs	r3, #32
 8009a5c:	e00e      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a5e:	2310      	movs	r3, #16
 8009a60:	e00c      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a62:	230c      	movs	r3, #12
 8009a64:	e00a      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a66:	230a      	movs	r3, #10
 8009a68:	e008      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a6a:	2308      	movs	r3, #8
 8009a6c:	e006      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a6e:	2306      	movs	r3, #6
 8009a70:	e004      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a72:	2304      	movs	r3, #4
 8009a74:	e002      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a76:	2302      	movs	r3, #2
 8009a78:	e000      	b.n	8009a7c <USART_SetConfig+0x240>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	0019      	movs	r1, r3
 8009a7e:	6938      	ldr	r0, [r7, #16]
 8009a80:	f7f6 fb40 	bl	8000104 <__udivsi3>
 8009a84:	0003      	movs	r3, r0
 8009a86:	005a      	lsls	r2, r3, #1
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	18d2      	adds	r2, r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	0019      	movs	r1, r3
 8009a96:	0010      	movs	r0, r2
 8009a98:	f7f6 fb34 	bl	8000104 <__udivsi3>
 8009a9c:	0003      	movs	r3, r0
 8009a9e:	61bb      	str	r3, [r7, #24]
      break;
 8009aa0:	e12e      	b.n	8009d00 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d052      	beq.n	8009b50 <USART_SetConfig+0x314>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d03e      	beq.n	8009b30 <USART_SetConfig+0x2f4>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	2b02      	cmp	r3, #2
 8009ab8:	d038      	beq.n	8009b2c <USART_SetConfig+0x2f0>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	d032      	beq.n	8009b28 <USART_SetConfig+0x2ec>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d02c      	beq.n	8009b24 <USART_SetConfig+0x2e8>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	2b05      	cmp	r3, #5
 8009ad0:	d026      	beq.n	8009b20 <USART_SetConfig+0x2e4>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b06      	cmp	r3, #6
 8009ad8:	d020      	beq.n	8009b1c <USART_SetConfig+0x2e0>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b07      	cmp	r3, #7
 8009ae0:	d01a      	beq.n	8009b18 <USART_SetConfig+0x2dc>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	2b08      	cmp	r3, #8
 8009ae8:	d014      	beq.n	8009b14 <USART_SetConfig+0x2d8>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d00e      	beq.n	8009b10 <USART_SetConfig+0x2d4>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	2b0a      	cmp	r3, #10
 8009af8:	d008      	beq.n	8009b0c <USART_SetConfig+0x2d0>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afe:	2b0b      	cmp	r3, #11
 8009b00:	d102      	bne.n	8009b08 <USART_SetConfig+0x2cc>
 8009b02:	2380      	movs	r3, #128	; 0x80
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	e024      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e022      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b0c:	2380      	movs	r3, #128	; 0x80
 8009b0e:	e020      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	e01e      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b14:	2320      	movs	r3, #32
 8009b16:	e01c      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b18:	2310      	movs	r3, #16
 8009b1a:	e01a      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b1c:	230c      	movs	r3, #12
 8009b1e:	e018      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b20:	230a      	movs	r3, #10
 8009b22:	e016      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b24:	2308      	movs	r3, #8
 8009b26:	e014      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b28:	2306      	movs	r3, #6
 8009b2a:	e012      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b2c:	2304      	movs	r3, #4
 8009b2e:	e010      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e00e      	b.n	8009b52 <USART_SetConfig+0x316>
 8009b34:	cfff69f3 	.word	0xcfff69f3
 8009b38:	ffffc0f6 	.word	0xffffc0f6
 8009b3c:	40013800 	.word	0x40013800
 8009b40:	40021000 	.word	0x40021000
 8009b44:	40004400 	.word	0x40004400
 8009b48:	40004800 	.word	0x40004800
 8009b4c:	40004c00 	.word	0x40004c00
 8009b50:	2301      	movs	r3, #1
 8009b52:	0019      	movs	r1, r3
 8009b54:	4886      	ldr	r0, [pc, #536]	; (8009d70 <USART_SetConfig+0x534>)
 8009b56:	f7f6 fad5 	bl	8000104 <__udivsi3>
 8009b5a:	0003      	movs	r3, r0
 8009b5c:	005a      	lsls	r2, r3, #1
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	085b      	lsrs	r3, r3, #1
 8009b64:	18d2      	adds	r2, r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	0019      	movs	r1, r3
 8009b6c:	0010      	movs	r0, r2
 8009b6e:	f7f6 fac9 	bl	8000104 <__udivsi3>
 8009b72:	0003      	movs	r3, r0
 8009b74:	61bb      	str	r3, [r7, #24]
      break;
 8009b76:	e0c3      	b.n	8009d00 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009b78:	f7fb ffac 	bl	8005ad4 <HAL_RCC_GetSysClockFreq>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d044      	beq.n	8009c12 <USART_SetConfig+0x3d6>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d03e      	beq.n	8009c0e <USART_SetConfig+0x3d2>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	2b02      	cmp	r3, #2
 8009b96:	d038      	beq.n	8009c0a <USART_SetConfig+0x3ce>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d032      	beq.n	8009c06 <USART_SetConfig+0x3ca>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d02c      	beq.n	8009c02 <USART_SetConfig+0x3c6>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	2b05      	cmp	r3, #5
 8009bae:	d026      	beq.n	8009bfe <USART_SetConfig+0x3c2>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	2b06      	cmp	r3, #6
 8009bb6:	d020      	beq.n	8009bfa <USART_SetConfig+0x3be>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	2b07      	cmp	r3, #7
 8009bbe:	d01a      	beq.n	8009bf6 <USART_SetConfig+0x3ba>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d014      	beq.n	8009bf2 <USART_SetConfig+0x3b6>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bcc:	2b09      	cmp	r3, #9
 8009bce:	d00e      	beq.n	8009bee <USART_SetConfig+0x3b2>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	2b0a      	cmp	r3, #10
 8009bd6:	d008      	beq.n	8009bea <USART_SetConfig+0x3ae>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b0b      	cmp	r3, #11
 8009bde:	d102      	bne.n	8009be6 <USART_SetConfig+0x3aa>
 8009be0:	2380      	movs	r3, #128	; 0x80
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	e016      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e014      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009bea:	2380      	movs	r3, #128	; 0x80
 8009bec:	e012      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	e010      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009bf2:	2320      	movs	r3, #32
 8009bf4:	e00e      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	e00c      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	e00a      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009bfe:	230a      	movs	r3, #10
 8009c00:	e008      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009c02:	2308      	movs	r3, #8
 8009c04:	e006      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009c06:	2306      	movs	r3, #6
 8009c08:	e004      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009c0a:	2304      	movs	r3, #4
 8009c0c:	e002      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e000      	b.n	8009c14 <USART_SetConfig+0x3d8>
 8009c12:	2301      	movs	r3, #1
 8009c14:	0019      	movs	r1, r3
 8009c16:	6938      	ldr	r0, [r7, #16]
 8009c18:	f7f6 fa74 	bl	8000104 <__udivsi3>
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	005a      	lsls	r2, r3, #1
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	085b      	lsrs	r3, r3, #1
 8009c26:	18d2      	adds	r2, r2, r3
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	0019      	movs	r1, r3
 8009c2e:	0010      	movs	r0, r2
 8009c30:	f7f6 fa68 	bl	8000104 <__udivsi3>
 8009c34:	0003      	movs	r3, r0
 8009c36:	61bb      	str	r3, [r7, #24]
      break;
 8009c38:	e062      	b.n	8009d00 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d044      	beq.n	8009ccc <USART_SetConfig+0x490>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d03e      	beq.n	8009cc8 <USART_SetConfig+0x48c>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d038      	beq.n	8009cc4 <USART_SetConfig+0x488>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d032      	beq.n	8009cc0 <USART_SetConfig+0x484>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	d02c      	beq.n	8009cbc <USART_SetConfig+0x480>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2b05      	cmp	r3, #5
 8009c68:	d026      	beq.n	8009cb8 <USART_SetConfig+0x47c>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6e:	2b06      	cmp	r3, #6
 8009c70:	d020      	beq.n	8009cb4 <USART_SetConfig+0x478>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b07      	cmp	r3, #7
 8009c78:	d01a      	beq.n	8009cb0 <USART_SetConfig+0x474>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	2b08      	cmp	r3, #8
 8009c80:	d014      	beq.n	8009cac <USART_SetConfig+0x470>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b09      	cmp	r3, #9
 8009c88:	d00e      	beq.n	8009ca8 <USART_SetConfig+0x46c>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2b0a      	cmp	r3, #10
 8009c90:	d008      	beq.n	8009ca4 <USART_SetConfig+0x468>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	2b0b      	cmp	r3, #11
 8009c98:	d102      	bne.n	8009ca0 <USART_SetConfig+0x464>
 8009c9a:	2380      	movs	r3, #128	; 0x80
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	e016      	b.n	8009cce <USART_SetConfig+0x492>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e014      	b.n	8009cce <USART_SetConfig+0x492>
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	e012      	b.n	8009cce <USART_SetConfig+0x492>
 8009ca8:	2340      	movs	r3, #64	; 0x40
 8009caa:	e010      	b.n	8009cce <USART_SetConfig+0x492>
 8009cac:	2320      	movs	r3, #32
 8009cae:	e00e      	b.n	8009cce <USART_SetConfig+0x492>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	e00c      	b.n	8009cce <USART_SetConfig+0x492>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	e00a      	b.n	8009cce <USART_SetConfig+0x492>
 8009cb8:	230a      	movs	r3, #10
 8009cba:	e008      	b.n	8009cce <USART_SetConfig+0x492>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	e006      	b.n	8009cce <USART_SetConfig+0x492>
 8009cc0:	2306      	movs	r3, #6
 8009cc2:	e004      	b.n	8009cce <USART_SetConfig+0x492>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	e002      	b.n	8009cce <USART_SetConfig+0x492>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	e000      	b.n	8009cce <USART_SetConfig+0x492>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	0019      	movs	r1, r3
 8009cd0:	2380      	movs	r3, #128	; 0x80
 8009cd2:	0218      	lsls	r0, r3, #8
 8009cd4:	f7f6 fa16 	bl	8000104 <__udivsi3>
 8009cd8:	0003      	movs	r3, r0
 8009cda:	005a      	lsls	r2, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	085b      	lsrs	r3, r3, #1
 8009ce2:	18d2      	adds	r2, r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	0019      	movs	r1, r3
 8009cea:	0010      	movs	r0, r2
 8009cec:	f7f6 fa0a 	bl	8000104 <__udivsi3>
 8009cf0:	0003      	movs	r3, r0
 8009cf2:	61bb      	str	r3, [r7, #24]
      break;
 8009cf4:	e004      	b.n	8009d00 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009cf6:	231e      	movs	r3, #30
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	701a      	strb	r2, [r3, #0]
      break;
 8009cfe:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	2b0f      	cmp	r3, #15
 8009d04:	d91c      	bls.n	8009d40 <USART_SetConfig+0x504>
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	2380      	movs	r3, #128	; 0x80
 8009d0a:	025b      	lsls	r3, r3, #9
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d217      	bcs.n	8009d40 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	b29a      	uxth	r2, r3
 8009d14:	200e      	movs	r0, #14
 8009d16:	183b      	adds	r3, r7, r0
 8009d18:	210f      	movs	r1, #15
 8009d1a:	438a      	bics	r2, r1
 8009d1c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	2207      	movs	r2, #7
 8009d26:	4013      	ands	r3, r2
 8009d28:	b299      	uxth	r1, r3
 8009d2a:	183b      	adds	r3, r7, r0
 8009d2c:	183a      	adds	r2, r7, r0
 8009d2e:	8812      	ldrh	r2, [r2, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	183a      	adds	r2, r7, r0
 8009d3a:	8812      	ldrh	r2, [r2, #0]
 8009d3c:	60da      	str	r2, [r3, #12]
 8009d3e:	e003      	b.n	8009d48 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009d40:	231e      	movs	r3, #30
 8009d42:	18fb      	adds	r3, r7, r3
 8009d44:	2201      	movs	r2, #1
 8009d46:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009d60:	231e      	movs	r3, #30
 8009d62:	18fb      	adds	r3, r7, r3
 8009d64:	781b      	ldrb	r3, [r3, #0]
}
 8009d66:	0018      	movs	r0, r3
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	b008      	add	sp, #32
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	46c0      	nop			; (mov r8, r8)
 8009d70:	00f42400 	.word	0x00f42400

08009d74 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d82:	f7f9 f97f 	bl	8003084 <HAL_GetTick>
 8009d86:	0003      	movs	r3, r0
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2208      	movs	r2, #8
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b08      	cmp	r3, #8
 8009d96:	d10e      	bne.n	8009db6 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	2380      	movs	r3, #128	; 0x80
 8009d9c:	0399      	lsls	r1, r3, #14
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	23fa      	movs	r3, #250	; 0xfa
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	0013      	movs	r3, r2
 8009da8:	2200      	movs	r2, #0
 8009daa:	f7ff fd11 	bl	80097d0 <USART_WaitOnFlagUntilTimeout>
 8009dae:	1e03      	subs	r3, r0, #0
 8009db0:	d001      	beq.n	8009db6 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e01e      	b.n	8009df4 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d10e      	bne.n	8009de2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	2380      	movs	r3, #128	; 0x80
 8009dc8:	03d9      	lsls	r1, r3, #15
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	23fa      	movs	r3, #250	; 0xfa
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	0013      	movs	r3, r2
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f7ff fcfb 	bl	80097d0 <USART_WaitOnFlagUntilTimeout>
 8009dda:	1e03      	subs	r3, r0, #0
 8009ddc:	d001      	beq.n	8009de2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e008      	b.n	8009df4 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2259      	movs	r2, #89	; 0x59
 8009de6:	2101      	movs	r1, #1
 8009de8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2258      	movs	r2, #88	; 0x58
 8009dee:	2100      	movs	r1, #0
 8009df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	0018      	movs	r0, r3
 8009df6:	46bd      	mov	sp, r7
 8009df8:	b004      	add	sp, #16
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2140      	movs	r1, #64	; 0x40
 8009e10:	438a      	bics	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689a      	ldr	r2, [r3, #8]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2101      	movs	r1, #1
 8009e20:	438a      	bics	r2, r1
 8009e22:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2259      	movs	r2, #89	; 0x59
 8009e2e:	5c9b      	ldrb	r3, [r3, r2]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b12      	cmp	r3, #18
 8009e34:	d114      	bne.n	8009e60 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2108      	movs	r1, #8
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2259      	movs	r2, #89	; 0x59
 8009e52:	2101      	movs	r1, #1
 8009e54:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f7f7 f913 	bl	8001084 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e5e:	e00c      	b.n	8009e7a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d107      	bne.n	8009e7a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2259      	movs	r2, #89	; 0x59
 8009e6e:	2101      	movs	r1, #1
 8009e70:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	0018      	movs	r0, r3
 8009e76:	f7ff fbff 	bl	8009678 <HAL_USART_TxRxCpltCallback>
}
 8009e7a:	46c0      	nop			; (mov r8, r8)
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	b002      	add	sp, #8
 8009e80:	bd80      	pop	{r7, pc}

08009e82 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009e82:	b580      	push	{r7, lr}
 8009e84:	b082      	sub	sp, #8
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e8a:	46c0      	nop			; (mov r8, r8)
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b002      	add	sp, #8
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b082      	sub	sp, #8
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e9a:	46c0      	nop			; (mov r8, r8)
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	b002      	add	sp, #8
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <LL_GPIO_SetPinMode>:
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	435b      	muls	r3, r3
 8009eb6:	001a      	movs	r2, r3
 8009eb8:	0013      	movs	r3, r2
 8009eba:	005b      	lsls	r3, r3, #1
 8009ebc:	189b      	adds	r3, r3, r2
 8009ebe:	43db      	mvns	r3, r3
 8009ec0:	400b      	ands	r3, r1
 8009ec2:	001a      	movs	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	435b      	muls	r3, r3
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	434b      	muls	r3, r1
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]
}
 8009ed2:	46c0      	nop			; (mov r8, r8)
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	b004      	add	sp, #16
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <LL_GPIO_SetPinOutputType>:
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	43d2      	mvns	r2, r2
 8009eee:	401a      	ands	r2, r3
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	434b      	muls	r3, r1
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	605a      	str	r2, [r3, #4]
}
 8009efc:	46c0      	nop			; (mov r8, r8)
 8009efe:	46bd      	mov	sp, r7
 8009f00:	b004      	add	sp, #16
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <LL_GPIO_SetPinSpeed>:
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6899      	ldr	r1, [r3, #8]
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	435b      	muls	r3, r3
 8009f18:	001a      	movs	r2, r3
 8009f1a:	0013      	movs	r3, r2
 8009f1c:	005b      	lsls	r3, r3, #1
 8009f1e:	189b      	adds	r3, r3, r2
 8009f20:	43db      	mvns	r3, r3
 8009f22:	400b      	ands	r3, r1
 8009f24:	001a      	movs	r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	435b      	muls	r3, r3
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	434b      	muls	r3, r1
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	609a      	str	r2, [r3, #8]
}
 8009f34:	46c0      	nop			; (mov r8, r8)
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b004      	add	sp, #16
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <LL_GPIO_SetPinPull>:
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	60b9      	str	r1, [r7, #8]
 8009f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	68d9      	ldr	r1, [r3, #12]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	435b      	muls	r3, r3
 8009f50:	001a      	movs	r2, r3
 8009f52:	0013      	movs	r3, r2
 8009f54:	005b      	lsls	r3, r3, #1
 8009f56:	189b      	adds	r3, r3, r2
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	400b      	ands	r3, r1
 8009f5c:	001a      	movs	r2, r3
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	435b      	muls	r3, r3
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	434b      	muls	r3, r1
 8009f66:	431a      	orrs	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	60da      	str	r2, [r3, #12]
}
 8009f6c:	46c0      	nop			; (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b004      	add	sp, #16
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <LL_GPIO_SetAFPin_0_7>:
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a19      	ldr	r1, [r3, #32]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	435b      	muls	r3, r3
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	4353      	muls	r3, r2
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	435a      	muls	r2, r3
 8009f90:	0013      	movs	r3, r2
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	1a9b      	subs	r3, r3, r2
 8009f96:	43db      	mvns	r3, r3
 8009f98:	400b      	ands	r3, r1
 8009f9a:	001a      	movs	r2, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	435b      	muls	r3, r3
 8009fa0:	68b9      	ldr	r1, [r7, #8]
 8009fa2:	434b      	muls	r3, r1
 8009fa4:	68b9      	ldr	r1, [r7, #8]
 8009fa6:	434b      	muls	r3, r1
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	434b      	muls	r3, r1
 8009fac:	431a      	orrs	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	621a      	str	r2, [r3, #32]
}
 8009fb2:	46c0      	nop			; (mov r8, r8)
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	b004      	add	sp, #16
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <LL_GPIO_SetAFPin_8_15>:
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	0a1b      	lsrs	r3, r3, #8
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	0a12      	lsrs	r2, r2, #8
 8009fd2:	4353      	muls	r3, r2
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	0a12      	lsrs	r2, r2, #8
 8009fd8:	4353      	muls	r3, r2
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	0a12      	lsrs	r2, r2, #8
 8009fde:	435a      	muls	r2, r3
 8009fe0:	0013      	movs	r3, r2
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	43db      	mvns	r3, r3
 8009fe8:	400b      	ands	r3, r1
 8009fea:	001a      	movs	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	68b9      	ldr	r1, [r7, #8]
 8009ff2:	0a09      	lsrs	r1, r1, #8
 8009ff4:	434b      	muls	r3, r1
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	0a09      	lsrs	r1, r1, #8
 8009ffa:	434b      	muls	r3, r1
 8009ffc:	68b9      	ldr	r1, [r7, #8]
 8009ffe:	0a09      	lsrs	r1, r1, #8
 800a000:	434b      	muls	r3, r1
 800a002:	6879      	ldr	r1, [r7, #4]
 800a004:	434b      	muls	r3, r1
 800a006:	431a      	orrs	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a00c:	46c0      	nop			; (mov r8, r8)
 800a00e:	46bd      	mov	sp, r7
 800a010:	b004      	add	sp, #16
 800a012:	bd80      	pop	{r7, pc}

0800a014 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a022:	e047      	b.n	800a0b4 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2101      	movs	r1, #1
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	4091      	lsls	r1, r2
 800a02e:	000a      	movs	r2, r1
 800a030:	4013      	ands	r3, r2
 800a032:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d039      	beq.n	800a0ae <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d003      	beq.n	800a04a <LL_GPIO_Init+0x36>
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	2b02      	cmp	r3, #2
 800a048:	d10d      	bne.n	800a066 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689a      	ldr	r2, [r3, #8]
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	0018      	movs	r0, r3
 800a054:	f7ff ff56 	bl	8009f04 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68da      	ldr	r2, [r3, #12]
 800a05c:	68b9      	ldr	r1, [r7, #8]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0018      	movs	r0, r3
 800a062:	f7ff ff3a 	bl	8009eda <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	0018      	movs	r0, r3
 800a070:	f7ff ff64 	bl	8009f3c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d111      	bne.n	800a0a0 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2bff      	cmp	r3, #255	; 0xff
 800a080:	d807      	bhi.n	800a092 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7ff ff72 	bl	8009f74 <LL_GPIO_SetAFPin_0_7>
 800a090:	e006      	b.n	800a0a0 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	695a      	ldr	r2, [r3, #20]
 800a096:	68b9      	ldr	r1, [r7, #8]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	0018      	movs	r0, r3
 800a09c:	f7ff ff8d 	bl	8009fba <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	0018      	movs	r0, r3
 800a0aa:	f7ff fefa 	bl	8009ea2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	40da      	lsrs	r2, r3
 800a0bc:	1e13      	subs	r3, r2, #0
 800a0be:	d1b1      	bne.n	800a024 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	0018      	movs	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b004      	add	sp, #16
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <LL_RCC_HSI_IsReady>:
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <LL_RCC_HSI_IsReady+0x24>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	2380      	movs	r3, #128	; 0x80
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	401a      	ands	r2, r3
 800a0da:	2380      	movs	r3, #128	; 0x80
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d101      	bne.n	800a0e6 <LL_RCC_HSI_IsReady+0x1a>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e000      	b.n	800a0e8 <LL_RCC_HSI_IsReady+0x1c>
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	40021000 	.word	0x40021000

0800a0f4 <LL_RCC_LSE_IsReady>:
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <LL_RCC_LSE_IsReady+0x1c>)
 800a0fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	4013      	ands	r3, r2
 800a100:	2b02      	cmp	r3, #2
 800a102:	d101      	bne.n	800a108 <LL_RCC_LSE_IsReady+0x14>
 800a104:	2301      	movs	r3, #1
 800a106:	e000      	b.n	800a10a <LL_RCC_LSE_IsReady+0x16>
 800a108:	2300      	movs	r3, #0
}
 800a10a:	0018      	movs	r0, r3
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	40021000 	.word	0x40021000

0800a114 <LL_RCC_GetSysClkSource>:
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a118:	4b03      	ldr	r3, [pc, #12]	; (800a128 <LL_RCC_GetSysClkSource+0x14>)
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	2238      	movs	r2, #56	; 0x38
 800a11e:	4013      	ands	r3, r2
}
 800a120:	0018      	movs	r0, r3
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	40021000 	.word	0x40021000

0800a12c <LL_RCC_GetAHBPrescaler>:
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a130:	4b03      	ldr	r3, [pc, #12]	; (800a140 <LL_RCC_GetAHBPrescaler+0x14>)
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	23f0      	movs	r3, #240	; 0xf0
 800a136:	011b      	lsls	r3, r3, #4
 800a138:	4013      	ands	r3, r2
}
 800a13a:	0018      	movs	r0, r3
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	40021000 	.word	0x40021000

0800a144 <LL_RCC_GetAPB1Prescaler>:
{
 800a144:	b580      	push	{r7, lr}
 800a146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a148:	4b03      	ldr	r3, [pc, #12]	; (800a158 <LL_RCC_GetAPB1Prescaler+0x14>)
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	23e0      	movs	r3, #224	; 0xe0
 800a14e:	01db      	lsls	r3, r3, #7
 800a150:	4013      	ands	r3, r2
}
 800a152:	0018      	movs	r0, r3
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40021000 	.word	0x40021000

0800a15c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a164:	4b05      	ldr	r3, [pc, #20]	; (800a17c <LL_RCC_GetUSARTClockSource+0x20>)
 800a166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	401a      	ands	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	041b      	lsls	r3, r3, #16
 800a170:	4313      	orrs	r3, r2
}
 800a172:	0018      	movs	r0, r3
 800a174:	46bd      	mov	sp, r7
 800a176:	b002      	add	sp, #8
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	46c0      	nop			; (mov r8, r8)
 800a17c:	40021000 	.word	0x40021000

0800a180 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a184:	4b03      	ldr	r3, [pc, #12]	; (800a194 <LL_RCC_PLL_GetN+0x14>)
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	0a1b      	lsrs	r3, r3, #8
 800a18a:	227f      	movs	r2, #127	; 0x7f
 800a18c:	4013      	ands	r3, r2
}
 800a18e:	0018      	movs	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	40021000 	.word	0x40021000

0800a198 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a19c:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <LL_RCC_PLL_GetR+0x14>)
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	0f5b      	lsrs	r3, r3, #29
 800a1a2:	075b      	lsls	r3, r3, #29
}
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	40021000 	.word	0x40021000

0800a1b0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a1b4:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <LL_RCC_PLL_GetMainSource+0x14>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	4013      	ands	r3, r2
}
 800a1bc:	0018      	movs	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	46c0      	nop			; (mov r8, r8)
 800a1c4:	40021000 	.word	0x40021000

0800a1c8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a1cc:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <LL_RCC_PLL_GetDivider+0x14>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	2270      	movs	r2, #112	; 0x70
 800a1d2:	4013      	ands	r3, r2
}
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	40021000 	.word	0x40021000

0800a1e0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a1e8:	f000 f8a8 	bl	800a33c <RCC_GetSystemClockFreq>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	f000 f8ce 	bl	800a398 <RCC_GetHCLKClockFreq>
 800a1fc:	0002      	movs	r2, r0
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	0018      	movs	r0, r3
 800a208:	f000 f8de 	bl	800a3c8 <RCC_GetPCLK1ClockFreq>
 800a20c:	0002      	movs	r2, r0
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	609a      	str	r2, [r3, #8]
}
 800a212:	46c0      	nop			; (mov r8, r8)
 800a214:	46bd      	mov	sp, r7
 800a216:	b002      	add	sp, #8
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a224:	2300      	movs	r3, #0
 800a226:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d134      	bne.n	800a298 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	0018      	movs	r0, r3
 800a232:	f7ff ff93 	bl	800a15c <LL_RCC_GetUSARTClockSource>
 800a236:	0003      	movs	r3, r0
 800a238:	4a39      	ldr	r2, [pc, #228]	; (800a320 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d016      	beq.n	800a26c <LL_RCC_GetUSARTClockFreq+0x50>
 800a23e:	4a38      	ldr	r2, [pc, #224]	; (800a320 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d81c      	bhi.n	800a27e <LL_RCC_GetUSARTClockFreq+0x62>
 800a244:	4a37      	ldr	r2, [pc, #220]	; (800a324 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d003      	beq.n	800a252 <LL_RCC_GetUSARTClockFreq+0x36>
 800a24a:	4a37      	ldr	r2, [pc, #220]	; (800a328 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d005      	beq.n	800a25c <LL_RCC_GetUSARTClockFreq+0x40>
 800a250:	e015      	b.n	800a27e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a252:	f000 f873 	bl	800a33c <RCC_GetSystemClockFreq>
 800a256:	0003      	movs	r3, r0
 800a258:	60fb      	str	r3, [r7, #12]
        break;
 800a25a:	e05c      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a25c:	f7ff ff36 	bl	800a0cc <LL_RCC_HSI_IsReady>
 800a260:	0003      	movs	r3, r0
 800a262:	2b01      	cmp	r3, #1
 800a264:	d150      	bne.n	800a308 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a266:	4b31      	ldr	r3, [pc, #196]	; (800a32c <LL_RCC_GetUSARTClockFreq+0x110>)
 800a268:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a26a:	e04d      	b.n	800a308 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a26c:	f7ff ff42 	bl	800a0f4 <LL_RCC_LSE_IsReady>
 800a270:	0003      	movs	r3, r0
 800a272:	2b01      	cmp	r3, #1
 800a274:	d14a      	bne.n	800a30c <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a276:	2380      	movs	r3, #128	; 0x80
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a27c:	e046      	b.n	800a30c <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a27e:	f000 f85d 	bl	800a33c <RCC_GetSystemClockFreq>
 800a282:	0003      	movs	r3, r0
 800a284:	0018      	movs	r0, r3
 800a286:	f000 f887 	bl	800a398 <RCC_GetHCLKClockFreq>
 800a28a:	0003      	movs	r3, r0
 800a28c:	0018      	movs	r0, r3
 800a28e:	f000 f89b 	bl	800a3c8 <RCC_GetPCLK1ClockFreq>
 800a292:	0003      	movs	r3, r0
 800a294:	60fb      	str	r3, [r7, #12]
        break;
 800a296:	e03e      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b0c      	cmp	r3, #12
 800a29c:	d13b      	bne.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	f7ff ff5b 	bl	800a15c <LL_RCC_GetUSARTClockSource>
 800a2a6:	0003      	movs	r3, r0
 800a2a8:	4a21      	ldr	r2, [pc, #132]	; (800a330 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d016      	beq.n	800a2dc <LL_RCC_GetUSARTClockFreq+0xc0>
 800a2ae:	4a20      	ldr	r2, [pc, #128]	; (800a330 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d81c      	bhi.n	800a2ee <LL_RCC_GetUSARTClockFreq+0xd2>
 800a2b4:	4a1f      	ldr	r2, [pc, #124]	; (800a334 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d003      	beq.n	800a2c2 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a2ba:	4a1f      	ldr	r2, [pc, #124]	; (800a338 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d005      	beq.n	800a2cc <LL_RCC_GetUSARTClockFreq+0xb0>
 800a2c0:	e015      	b.n	800a2ee <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a2c2:	f000 f83b 	bl	800a33c <RCC_GetSystemClockFreq>
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	60fb      	str	r3, [r7, #12]
        break;
 800a2ca:	e024      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a2cc:	f7ff fefe 	bl	800a0cc <LL_RCC_HSI_IsReady>
 800a2d0:	0003      	movs	r3, r0
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d11c      	bne.n	800a310 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a2d6:	4b15      	ldr	r3, [pc, #84]	; (800a32c <LL_RCC_GetUSARTClockFreq+0x110>)
 800a2d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2da:	e019      	b.n	800a310 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a2dc:	f7ff ff0a 	bl	800a0f4 <LL_RCC_LSE_IsReady>
 800a2e0:	0003      	movs	r3, r0
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d116      	bne.n	800a314 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a2e6:	2380      	movs	r3, #128	; 0x80
 800a2e8:	021b      	lsls	r3, r3, #8
 800a2ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2ec:	e012      	b.n	800a314 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a2ee:	f000 f825 	bl	800a33c <RCC_GetSystemClockFreq>
 800a2f2:	0003      	movs	r3, r0
 800a2f4:	0018      	movs	r0, r3
 800a2f6:	f000 f84f 	bl	800a398 <RCC_GetHCLKClockFreq>
 800a2fa:	0003      	movs	r3, r0
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f000 f863 	bl	800a3c8 <RCC_GetPCLK1ClockFreq>
 800a302:	0003      	movs	r3, r0
 800a304:	60fb      	str	r3, [r7, #12]
        break;
 800a306:	e006      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a308:	46c0      	nop			; (mov r8, r8)
 800a30a:	e004      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a30c:	46c0      	nop			; (mov r8, r8)
 800a30e:	e002      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a310:	46c0      	nop			; (mov r8, r8)
 800a312:	e000      	b.n	800a316 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a314:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a316:	68fb      	ldr	r3, [r7, #12]
}
 800a318:	0018      	movs	r0, r3
 800a31a:	46bd      	mov	sp, r7
 800a31c:	b004      	add	sp, #16
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	00030003 	.word	0x00030003
 800a324:	00030001 	.word	0x00030001
 800a328:	00030002 	.word	0x00030002
 800a32c:	00f42400 	.word	0x00f42400
 800a330:	000c000c 	.word	0x000c000c
 800a334:	000c0004 	.word	0x000c0004
 800a338:	000c0008 	.word	0x000c0008

0800a33c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a342:	f7ff fee7 	bl	800a114 <LL_RCC_GetSysClkSource>
 800a346:	0003      	movs	r3, r0
 800a348:	2b08      	cmp	r3, #8
 800a34a:	d002      	beq.n	800a352 <RCC_GetSystemClockFreq+0x16>
 800a34c:	2b10      	cmp	r3, #16
 800a34e:	d003      	beq.n	800a358 <RCC_GetSystemClockFreq+0x1c>
 800a350:	e007      	b.n	800a362 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a352:	4b0e      	ldr	r3, [pc, #56]	; (800a38c <RCC_GetSystemClockFreq+0x50>)
 800a354:	607b      	str	r3, [r7, #4]
      break;
 800a356:	e014      	b.n	800a382 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a358:	f000 f84c 	bl	800a3f4 <RCC_PLL_GetFreqDomain_SYS>
 800a35c:	0003      	movs	r3, r0
 800a35e:	607b      	str	r3, [r7, #4]
      break;
 800a360:	e00f      	b.n	800a382 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a362:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <RCC_GetSystemClockFreq+0x54>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	0adb      	lsrs	r3, r3, #11
 800a368:	2207      	movs	r2, #7
 800a36a:	4013      	ands	r3, r2
 800a36c:	2201      	movs	r2, #1
 800a36e:	409a      	lsls	r2, r3
 800a370:	0013      	movs	r3, r2
 800a372:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	4807      	ldr	r0, [pc, #28]	; (800a394 <RCC_GetSystemClockFreq+0x58>)
 800a378:	f7f5 fec4 	bl	8000104 <__udivsi3>
 800a37c:	0003      	movs	r3, r0
 800a37e:	607b      	str	r3, [r7, #4]
      break;
 800a380:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a382:	687b      	ldr	r3, [r7, #4]
}
 800a384:	0018      	movs	r0, r3
 800a386:	46bd      	mov	sp, r7
 800a388:	b002      	add	sp, #8
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	007a1200 	.word	0x007a1200
 800a390:	40021000 	.word	0x40021000
 800a394:	00f42400 	.word	0x00f42400

0800a398 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a3a0:	f7ff fec4 	bl	800a12c <LL_RCC_GetAHBPrescaler>
 800a3a4:	0003      	movs	r3, r0
 800a3a6:	0a1b      	lsrs	r3, r3, #8
 800a3a8:	220f      	movs	r2, #15
 800a3aa:	401a      	ands	r2, r3
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <RCC_GetHCLKClockFreq+0x2c>)
 800a3ae:	0092      	lsls	r2, r2, #2
 800a3b0:	58d3      	ldr	r3, [r2, r3]
 800a3b2:	221f      	movs	r2, #31
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	40da      	lsrs	r2, r3
 800a3ba:	0013      	movs	r3, r2
}
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	0800a73c 	.word	0x0800a73c

0800a3c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a3d0:	f7ff feb8 	bl	800a144 <LL_RCC_GetAPB1Prescaler>
 800a3d4:	0003      	movs	r3, r0
 800a3d6:	0b1a      	lsrs	r2, r3, #12
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <RCC_GetPCLK1ClockFreq+0x28>)
 800a3da:	0092      	lsls	r2, r2, #2
 800a3dc:	58d3      	ldr	r3, [r2, r3]
 800a3de:	221f      	movs	r2, #31
 800a3e0:	4013      	ands	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	40da      	lsrs	r2, r3
 800a3e6:	0013      	movs	r3, r2
}
 800a3e8:	0018      	movs	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	b002      	add	sp, #8
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	0800a77c 	.word	0x0800a77c

0800a3f4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a3f4:	b590      	push	{r4, r7, lr}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a3fa:	f7ff fed9 	bl	800a1b0 <LL_RCC_PLL_GetMainSource>
 800a3fe:	0003      	movs	r3, r0
 800a400:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	2b02      	cmp	r3, #2
 800a406:	d003      	beq.n	800a410 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d003      	beq.n	800a416 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a40e:	e005      	b.n	800a41c <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a410:	4b13      	ldr	r3, [pc, #76]	; (800a460 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a412:	607b      	str	r3, [r7, #4]
      break;
 800a414:	e005      	b.n	800a422 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a416:	4b13      	ldr	r3, [pc, #76]	; (800a464 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a418:	607b      	str	r3, [r7, #4]
      break;
 800a41a:	e002      	b.n	800a422 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a41c:	4b10      	ldr	r3, [pc, #64]	; (800a460 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a41e:	607b      	str	r3, [r7, #4]
      break;
 800a420:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a422:	f7ff fead 	bl	800a180 <LL_RCC_PLL_GetN>
 800a426:	0002      	movs	r2, r0
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	4353      	muls	r3, r2
 800a42c:	001c      	movs	r4, r3
 800a42e:	f7ff fecb 	bl	800a1c8 <LL_RCC_PLL_GetDivider>
 800a432:	0003      	movs	r3, r0
 800a434:	091b      	lsrs	r3, r3, #4
 800a436:	3301      	adds	r3, #1
 800a438:	0019      	movs	r1, r3
 800a43a:	0020      	movs	r0, r4
 800a43c:	f7f5 fe62 	bl	8000104 <__udivsi3>
 800a440:	0003      	movs	r3, r0
 800a442:	001c      	movs	r4, r3
 800a444:	f7ff fea8 	bl	800a198 <LL_RCC_PLL_GetR>
 800a448:	0003      	movs	r3, r0
 800a44a:	0f5b      	lsrs	r3, r3, #29
 800a44c:	3301      	adds	r3, #1
 800a44e:	0019      	movs	r1, r3
 800a450:	0020      	movs	r0, r4
 800a452:	f7f5 fe57 	bl	8000104 <__udivsi3>
 800a456:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a458:	0018      	movs	r0, r3
 800a45a:	46bd      	mov	sp, r7
 800a45c:	b003      	add	sp, #12
 800a45e:	bd90      	pop	{r4, r7, pc}
 800a460:	00f42400 	.word	0x00f42400
 800a464:	007a1200 	.word	0x007a1200

0800a468 <LL_USART_IsEnabled>:
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	2201      	movs	r2, #1
 800a476:	4013      	ands	r3, r2
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d101      	bne.n	800a480 <LL_USART_IsEnabled+0x18>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e000      	b.n	800a482 <LL_USART_IsEnabled+0x1a>
 800a480:	2300      	movs	r3, #0
}
 800a482:	0018      	movs	r0, r3
 800a484:	46bd      	mov	sp, r7
 800a486:	b002      	add	sp, #8
 800a488:	bd80      	pop	{r7, pc}

0800a48a <LL_USART_SetPrescaler>:
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	220f      	movs	r2, #15
 800a49a:	4393      	bics	r3, r2
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	b292      	uxth	r2, r2
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	b002      	add	sp, #8
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <LL_USART_SetStopBitsLength>:
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	4a05      	ldr	r2, [pc, #20]	; (800a4d4 <LL_USART_SetStopBitsLength+0x24>)
 800a4c0:	401a      	ands	r2, r3
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	605a      	str	r2, [r3, #4]
}
 800a4ca:	46c0      	nop			; (mov r8, r8)
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b002      	add	sp, #8
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	46c0      	nop			; (mov r8, r8)
 800a4d4:	ffffcfff 	.word	0xffffcfff

0800a4d8 <LL_USART_SetHWFlowCtrl>:
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	4a05      	ldr	r2, [pc, #20]	; (800a4fc <LL_USART_SetHWFlowCtrl+0x24>)
 800a4e8:	401a      	ands	r2, r3
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	609a      	str	r2, [r3, #8]
}
 800a4f2:	46c0      	nop			; (mov r8, r8)
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	b002      	add	sp, #8
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	46c0      	nop			; (mov r8, r8)
 800a4fc:	fffffcff 	.word	0xfffffcff

0800a500 <LL_USART_SetBaudRate>:
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b0b      	cmp	r3, #11
 800a512:	d843      	bhi.n	800a59c <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	2380      	movs	r3, #128	; 0x80
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d126      	bne.n	800a56c <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	001a      	movs	r2, r3
 800a524:	4b1f      	ldr	r3, [pc, #124]	; (800a5a4 <LL_USART_SetBaudRate+0xa4>)
 800a526:	0092      	lsls	r2, r2, #2
 800a528:	58d3      	ldr	r3, [r2, r3]
 800a52a:	0019      	movs	r1, r3
 800a52c:	68b8      	ldr	r0, [r7, #8]
 800a52e:	f7f5 fde9 	bl	8000104 <__udivsi3>
 800a532:	0003      	movs	r3, r0
 800a534:	005a      	lsls	r2, r3, #1
 800a536:	6a3b      	ldr	r3, [r7, #32]
 800a538:	085b      	lsrs	r3, r3, #1
 800a53a:	18d3      	adds	r3, r2, r3
 800a53c:	6a39      	ldr	r1, [r7, #32]
 800a53e:	0018      	movs	r0, r3
 800a540:	f7f5 fde0 	bl	8000104 <__udivsi3>
 800a544:	0003      	movs	r3, r0
 800a546:	b29b      	uxth	r3, r3
 800a548:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	4a16      	ldr	r2, [pc, #88]	; (800a5a8 <LL_USART_SetBaudRate+0xa8>)
 800a54e:	4013      	ands	r3, r2
 800a550:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	085b      	lsrs	r3, r3, #1
 800a556:	b29b      	uxth	r3, r3
 800a558:	001a      	movs	r2, r3
 800a55a:	2307      	movs	r3, #7
 800a55c:	4013      	ands	r3, r2
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	4313      	orrs	r3, r2
 800a562:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	60da      	str	r2, [r3, #12]
}
 800a56a:	e017      	b.n	800a59c <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	001a      	movs	r2, r3
 800a572:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <LL_USART_SetBaudRate+0xa4>)
 800a574:	0092      	lsls	r2, r2, #2
 800a576:	58d3      	ldr	r3, [r2, r3]
 800a578:	0019      	movs	r1, r3
 800a57a:	68b8      	ldr	r0, [r7, #8]
 800a57c:	f7f5 fdc2 	bl	8000104 <__udivsi3>
 800a580:	0003      	movs	r3, r0
 800a582:	001a      	movs	r2, r3
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	085b      	lsrs	r3, r3, #1
 800a588:	18d3      	adds	r3, r2, r3
 800a58a:	6a39      	ldr	r1, [r7, #32]
 800a58c:	0018      	movs	r0, r3
 800a58e:	f7f5 fdb9 	bl	8000104 <__udivsi3>
 800a592:	0003      	movs	r3, r0
 800a594:	b29b      	uxth	r3, r3
 800a596:	001a      	movs	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	60da      	str	r2, [r3, #12]
}
 800a59c:	46c0      	nop			; (mov r8, r8)
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	b006      	add	sp, #24
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	0800a7f0 	.word	0x0800a7f0
 800a5a8:	0000fff0 	.word	0x0000fff0

0800a5ac <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a5ac:	b590      	push	{r4, r7, lr}
 800a5ae:	b08b      	sub	sp, #44	; 0x2c
 800a5b0:	af02      	add	r7, sp, #8
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a5b6:	231f      	movs	r3, #31
 800a5b8:	18fb      	adds	r3, r7, r3
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	f7ff ff4f 	bl	800a468 <LL_USART_IsEnabled>
 800a5ca:	1e03      	subs	r3, r0, #0
 800a5cc:	d16a      	bne.n	800a6a4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a38      	ldr	r2, [pc, #224]	; (800a6b4 <LL_USART_Init+0x108>)
 800a5d4:	401a      	ands	r2, r3
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	6899      	ldr	r1, [r3, #8]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	4319      	orrs	r1, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	695b      	ldr	r3, [r3, #20]
 800a5e4:	4319      	orrs	r1, r3
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	431a      	orrs	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68da      	ldr	r2, [r3, #12]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0011      	movs	r1, r2
 800a5fa:	0018      	movs	r0, r3
 800a5fc:	f7ff ff58 	bl	800a4b0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	699a      	ldr	r2, [r3, #24]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	0011      	movs	r1, r2
 800a608:	0018      	movs	r0, r3
 800a60a:	f7ff ff65 	bl	800a4d8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a29      	ldr	r2, [pc, #164]	; (800a6b8 <LL_USART_Init+0x10c>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d105      	bne.n	800a622 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a616:	2003      	movs	r0, #3
 800a618:	f7ff fe00 	bl	800a21c <LL_RCC_GetUSARTClockFreq>
 800a61c:	0003      	movs	r3, r0
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e022      	b.n	800a668 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a25      	ldr	r2, [pc, #148]	; (800a6bc <LL_USART_Init+0x110>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d105      	bne.n	800a636 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a62a:	200c      	movs	r0, #12
 800a62c:	f7ff fdf6 	bl	800a21c <LL_RCC_GetUSARTClockFreq>
 800a630:	0003      	movs	r3, r0
 800a632:	61bb      	str	r3, [r7, #24]
 800a634:	e018      	b.n	800a668 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a21      	ldr	r2, [pc, #132]	; (800a6c0 <LL_USART_Init+0x114>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d108      	bne.n	800a650 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a63e:	240c      	movs	r4, #12
 800a640:	193b      	adds	r3, r7, r4
 800a642:	0018      	movs	r0, r3
 800a644:	f7ff fdcc 	bl	800a1e0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a648:	193b      	adds	r3, r7, r4
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	61bb      	str	r3, [r7, #24]
 800a64e:	e00b      	b.n	800a668 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a1c      	ldr	r2, [pc, #112]	; (800a6c4 <LL_USART_Init+0x118>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d107      	bne.n	800a668 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a658:	240c      	movs	r4, #12
 800a65a:	193b      	adds	r3, r7, r4
 800a65c:	0018      	movs	r0, r3
 800a65e:	f7ff fdbf 	bl	800a1e0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a662:	193b      	adds	r3, r7, r4
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d013      	beq.n	800a696 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00f      	beq.n	800a696 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a676:	231f      	movs	r3, #31
 800a678:	18fb      	adds	r3, r7, r3
 800a67a:	2200      	movs	r2, #0
 800a67c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	69dc      	ldr	r4, [r3, #28]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	69b9      	ldr	r1, [r7, #24]
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	0023      	movs	r3, r4
 800a692:	f7ff ff35 	bl	800a500 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	0011      	movs	r1, r2
 800a69e:	0018      	movs	r0, r3
 800a6a0:	f7ff fef3 	bl	800a48a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a6a4:	231f      	movs	r3, #31
 800a6a6:	18fb      	adds	r3, r7, r3
 800a6a8:	781b      	ldrb	r3, [r3, #0]
}
 800a6aa:	0018      	movs	r0, r3
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	b009      	add	sp, #36	; 0x24
 800a6b0:	bd90      	pop	{r4, r7, pc}
 800a6b2:	46c0      	nop			; (mov r8, r8)
 800a6b4:	efff69f3 	.word	0xefff69f3
 800a6b8:	40013800 	.word	0x40013800
 800a6bc:	40004400 	.word	0x40004400
 800a6c0:	40004800 	.word	0x40004800
 800a6c4:	40004c00 	.word	0x40004c00

0800a6c8 <__libc_init_array>:
 800a6c8:	b570      	push	{r4, r5, r6, lr}
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	4d0c      	ldr	r5, [pc, #48]	; (800a700 <__libc_init_array+0x38>)
 800a6ce:	4c0d      	ldr	r4, [pc, #52]	; (800a704 <__libc_init_array+0x3c>)
 800a6d0:	1b64      	subs	r4, r4, r5
 800a6d2:	10a4      	asrs	r4, r4, #2
 800a6d4:	42a6      	cmp	r6, r4
 800a6d6:	d109      	bne.n	800a6ec <__libc_init_array+0x24>
 800a6d8:	2600      	movs	r6, #0
 800a6da:	f000 f821 	bl	800a720 <_init>
 800a6de:	4d0a      	ldr	r5, [pc, #40]	; (800a708 <__libc_init_array+0x40>)
 800a6e0:	4c0a      	ldr	r4, [pc, #40]	; (800a70c <__libc_init_array+0x44>)
 800a6e2:	1b64      	subs	r4, r4, r5
 800a6e4:	10a4      	asrs	r4, r4, #2
 800a6e6:	42a6      	cmp	r6, r4
 800a6e8:	d105      	bne.n	800a6f6 <__libc_init_array+0x2e>
 800a6ea:	bd70      	pop	{r4, r5, r6, pc}
 800a6ec:	00b3      	lsls	r3, r6, #2
 800a6ee:	58eb      	ldr	r3, [r5, r3]
 800a6f0:	4798      	blx	r3
 800a6f2:	3601      	adds	r6, #1
 800a6f4:	e7ee      	b.n	800a6d4 <__libc_init_array+0xc>
 800a6f6:	00b3      	lsls	r3, r6, #2
 800a6f8:	58eb      	ldr	r3, [r5, r3]
 800a6fa:	4798      	blx	r3
 800a6fc:	3601      	adds	r6, #1
 800a6fe:	e7f2      	b.n	800a6e6 <__libc_init_array+0x1e>
 800a700:	0800a820 	.word	0x0800a820
 800a704:	0800a820 	.word	0x0800a820
 800a708:	0800a820 	.word	0x0800a820
 800a70c:	0800a824 	.word	0x0800a824

0800a710 <memset>:
 800a710:	0003      	movs	r3, r0
 800a712:	1882      	adds	r2, r0, r2
 800a714:	4293      	cmp	r3, r2
 800a716:	d100      	bne.n	800a71a <memset+0xa>
 800a718:	4770      	bx	lr
 800a71a:	7019      	strb	r1, [r3, #0]
 800a71c:	3301      	adds	r3, #1
 800a71e:	e7f9      	b.n	800a714 <memset+0x4>

0800a720 <_init>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	46c0      	nop			; (mov r8, r8)
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr

0800a72c <_fini>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	46c0      	nop			; (mov r8, r8)
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr
