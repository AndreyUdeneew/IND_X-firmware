
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a700  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a4  0800a8a4  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800a8a4  0800a8a4  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a8a4  0800a8a4  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8a4  0800a8a4  0001a8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800a8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003140  0800d9ec  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005600  0800d9ec  00025600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d43  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003ceab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  00043328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0a3  00000000  00000000  0005f71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae248  00000000  00000000  0007c7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012aa0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  0012aa60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a7a4 	.word	0x0800a7a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800a7a4 	.word	0x0800a7a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	2316      	movs	r3, #22
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	2314      	movs	r3, #20
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	2312      	movs	r3, #18
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd5f 	bl	8003010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f875 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b34      	ldr	r3, [pc, #208]	; (8000628 <main+0xf8>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b33      	ldr	r3, [pc, #204]	; (8000628 <main+0xf8>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b31      	ldr	r3, [pc, #196]	; (8000628 <main+0xf8>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2e      	ldr	r3, [pc, #184]	; (8000628 <main+0xf8>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b2d      	ldr	r3, [pc, #180]	; (8000628 <main+0xf8>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b2b      	ldr	r3, [pc, #172]	; (8000628 <main+0xf8>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b28      	ldr	r3, [pc, #160]	; (8000628 <main+0xf8>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b27      	ldr	r3, [pc, #156]	; (8000628 <main+0xf8>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b25      	ldr	r3, [pc, #148]	; (8000628 <main+0xf8>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbb7 	bl	8000d10 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fb87 	bl	8000cb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 faa5 	bl	8000af4 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8c9 	bl	8000740 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9a7 	bl	8000900 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb3d 	bl	8000c30 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f935 	bl	8000824 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8f3 	bl	80007a4 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f95b 	bl	8000878 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0xfc>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 fff1 	bl	80035ac <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fda6 	bl	800311c <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fc96 	bl	8001f00 <MEM_Reset>

	weoInit();
 80005d4:	f000 fe20 	bl	8001218 <weoInit>
	HAL_Delay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f002 fd9f 	bl	800311c <HAL_Delay>
	weoClear();
 80005de:	f000 fe87 	bl	80012f0 <weoClear>
	MEM_GetID();
 80005e2:	f001 ff0f 	bl	8002404 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <main+0x100>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <main+0x100>)
 80005ec:	4911      	ldr	r1, [pc, #68]	; (8000634 <main+0x104>)
 80005ee:	430a      	orrs	r2, r1
 80005f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <main+0x100>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff1d 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <main+0x100>)
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff27 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <main+0x100>)
 8000604:	6a1a      	ldr	r2, [r3, #32]
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <main+0x100>)
 8000608:	2108      	movs	r1, #8
 800060a:	430a      	orrs	r2, r1
 800060c:	621a      	str	r2, [r3, #32]
//	USART3->CR1 |= USART_CR1_UE;
//	weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <main+0x108>)
 8000610:	695a      	ldr	r2, [r3, #20]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <main+0x108>)
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	430a      	orrs	r2, r1
 8000618:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x10c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	0018      	movs	r0, r3
 8000620:	f001 ff52 	bl	80024c8 <cmdExecute>
 8000624:	e7f9      	b.n	800061a <main+0xea>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40021000 	.word	0x40021000
 800062c:	20003350 	.word	0x20003350
 8000630:	40004400 	.word	0x40004400
 8000634:	1000100d 	.word	0x1000100d
 8000638:	50000800 	.word	0x50000800
 800063c:	2000345a 	.word	0x2000345a

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b0a1      	sub	sp, #132	; 0x84
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	2448      	movs	r4, #72	; 0x48
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	2338      	movs	r3, #56	; 0x38
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f00a f89f 	bl	800a794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000656:	2338      	movs	r3, #56	; 0x38
 8000658:	18fb      	adds	r3, r7, r3
 800065a:	0018      	movs	r0, r3
 800065c:	2310      	movs	r3, #16
 800065e:	001a      	movs	r2, r3
 8000660:	2100      	movs	r1, #0
 8000662:	f00a f897 	bl	800a794 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	2334      	movs	r3, #52	; 0x34
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f00a f890 	bl	800a794 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	0018      	movs	r0, r3
 800067a:	f004 fdf9 	bl	8005270 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2202      	movs	r2, #2
 8000682:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068c:	0021      	movs	r1, r4
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2240      	movs	r2, #64	; 0x40
 8000698:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2202      	movs	r2, #2
 800069e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2202      	movs	r2, #2
 80006a4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2200      	movs	r2, #0
 80006aa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2208      	movs	r2, #8
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0292      	lsls	r2, r2, #10
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0492      	lsls	r2, r2, #18
 80006c0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	0592      	lsls	r2, r2, #22
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	0018      	movs	r0, r3
 80006ce:	f004 fe1b 	bl	8005308 <HAL_RCC_OscConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d6:	f002 f819 	bl	800270c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	2138      	movs	r1, #56	; 0x38
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2207      	movs	r2, #7
 80006e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2202      	movs	r2, #2
 80006e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2102      	movs	r1, #2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f005 f925 	bl	8005948 <HAL_RCC_ClockConfig>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f002 f803 	bl	800270c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4a0c      	ldr	r2, [pc, #48]	; (800073c <SystemClock_Config+0xfc>)
 800070a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	0018      	movs	r0, r3
 8000728:	f005 fab8 	bl	8005c9c <HAL_RCCEx_PeriphCLKConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000730:	f001 ffec 	bl	800270c <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b021      	add	sp, #132	; 0x84
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	00200822 	.word	0x00200822

08000740 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_COMP1_Init+0x5c>)
 8000746:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <MX_COMP1_Init+0x60>)
 8000748:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_COMP1_Init+0x5c>)
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_COMP1_Init+0x5c>)
 8000754:	2230      	movs	r2, #48	; 0x30
 8000756:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_COMP1_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_COMP1_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000764:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_COMP1_Init+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_COMP1_Init+0x5c>)
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	0392      	lsls	r2, r2, #14
 8000770:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <MX_COMP1_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_COMP1_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_COMP1_Init+0x5c>)
 8000780:	2212      	movs	r2, #18
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_COMP1_Init+0x5c>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fdae 	bl	80032e8 <HAL_COMP_Init>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000790:	f001 ffbc 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20003350 	.word	0x20003350
 80007a0:	40010200 	.word	0x40010200

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C1_Init+0x74>)
 80007bc:	2201      	movs	r2, #1
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_I2C1_Init+0x74>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f003 fc3f 	bl	8004064 <HAL_I2C_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ea:	f001 ff8f 	bl	800270c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_I2C1_Init+0x74>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f004 facc 	bl	8004d90 <HAL_I2CEx_ConfigAnalogFilter>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f001 ff86 	bl	800270c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_I2C1_Init+0x74>)
 8000802:	2100      	movs	r1, #0
 8000804:	0018      	movs	r0, r3
 8000806:	f004 fb0f 	bl	8004e28 <HAL_I2CEx_ConfigDigitalFilter>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f001 ff7d 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20003230 	.word	0x20003230
 800081c:	40005400 	.word	0x40005400
 8000820:	1094102c 	.word	0x1094102c

08000824 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2S1_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_I2S1_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2S1_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2S1_Init+0x4c>)
 800084c:	22fa      	movs	r2, #250	; 0xfa
 800084e:	0192      	lsls	r2, r2, #6
 8000850:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2S1_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <MX_I2S1_Init+0x4c>)
 800085a:	0018      	movs	r0, r3
 800085c:	f004 fb30 	bl	8004ec0 <HAL_I2S_Init>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000864:	f001 ff52 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	2000345c 	.word	0x2000345c
 8000874:	40013000 	.word	0x40013000

08000878 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800087c:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_SPI2_Init+0x80>)
 800087e:	2208      	movs	r2, #8
 8000880:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <MX_SPI2_Init+0x80>)
 8000884:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <MX_SPI2_Init+0x84>)
 8000886:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000888:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_SPI2_Init+0x80>)
 800088a:	2282      	movs	r2, #130	; 0x82
 800088c:	0052      	lsls	r2, r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_SPI2_Init+0x80>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_SPI2_Init+0x80>)
 8000898:	22e0      	movs	r2, #224	; 0xe0
 800089a:	00d2      	lsls	r2, r2, #3
 800089c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008aa:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008b4:	2208      	movs	r2, #8
 80008b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008d8:	2208      	movs	r2, #8
 80008da:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f005 fedc 	bl	800669c <HAL_SPI_Init>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e8:	f001 ff10 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <MX_SPI2_Init+0x80>)
 80008ee:	2208      	movs	r2, #8
 80008f0:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200031b0 	.word	0x200031b0
 80008fc:	40003800 	.word	0x40003800

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b09e      	sub	sp, #120	; 0x78
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	2368      	movs	r3, #104	; 0x68
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	0018      	movs	r0, r3
 800090c:	2310      	movs	r3, #16
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f009 ff3f 	bl	800a794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	235c      	movs	r3, #92	; 0x5c
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	0018      	movs	r0, r3
 800091c:	230c      	movs	r3, #12
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f009 ff37 	bl	800a794 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000926:	2350      	movs	r3, #80	; 0x50
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	0018      	movs	r0, r3
 800092c:	230c      	movs	r3, #12
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f009 ff2f 	bl	800a794 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	2334      	movs	r3, #52	; 0x34
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	0018      	movs	r0, r3
 800093c:	231c      	movs	r3, #28
 800093e:	001a      	movs	r2, r3
 8000940:	2100      	movs	r1, #0
 8000942:	f009 ff27 	bl	800a794 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000946:	003b      	movs	r3, r7
 8000948:	0018      	movs	r0, r3
 800094a:	2334      	movs	r3, #52	; 0x34
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f009 ff20 	bl	800a794 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000954:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000956:	4a65      	ldr	r2, [pc, #404]	; (8000aec <MX_TIM1_Init+0x1ec>)
 8000958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800095a:	4b63      	ldr	r3, [pc, #396]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b61      	ldr	r3, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000968:	4a61      	ldr	r2, [pc, #388]	; (8000af0 <MX_TIM1_Init+0x1f0>)
 800096a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b5e      	ldr	r3, [pc, #376]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000972:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000978:	4b5b      	ldr	r3, [pc, #364]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097e:	4b5a      	ldr	r3, [pc, #360]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000980:	0018      	movs	r0, r3
 8000982:	f007 fa7f 	bl	8007e84 <HAL_TIM_Base_Init>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800098a:	f001 febf 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098e:	2168      	movs	r1, #104	; 0x68
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0152      	lsls	r2, r2, #5
 8000996:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000998:	187a      	adds	r2, r7, r1
 800099a:	4b53      	ldr	r3, [pc, #332]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f007 fd08 	bl	80083b4 <HAL_TIM_ConfigClockSource>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a8:	f001 feb0 	bl	800270c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ac:	4b4e      	ldr	r3, [pc, #312]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f007 fac0 	bl	8007f34 <HAL_TIM_PWM_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b8:	f001 fea8 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	215c      	movs	r1, #92	; 0x5c
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009d0:	187a      	adds	r2, r7, r1
 80009d2:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f008 f9bc 	bl	8008d54 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009e0:	f001 fe94 	bl	800270c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009e4:	2150      	movs	r1, #80	; 0x50
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f8:	187a      	adds	r2, r7, r1
 80009fa:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f008 fabc 	bl	8008f7c <HAL_TIMEx_ConfigBreakInput>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a08:	f001 fe80 	bl	800270c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0c:	2134      	movs	r1, #52	; 0x34
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2260      	movs	r2, #96	; 0x60
 8000a12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2296      	movs	r2, #150	; 0x96
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	1879      	adds	r1, r7, r1
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	0018      	movs	r0, r3
 8000a42:	f007 fbc1 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a4a:	f001 fe5f 	bl	800270c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a4e:	2134      	movs	r1, #52	; 0x34
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2232      	movs	r2, #50	; 0x32
 8000a54:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a56:	1879      	adds	r1, r7, r1
 8000a58:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000a5a:	2210      	movs	r2, #16
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f007 fbb3 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 8000a62:	1e03      	subs	r3, r0, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a66:	f001 fe51 	bl	800270c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2280      	movs	r2, #128	; 0x80
 8000a76:	00d2      	lsls	r2, r2, #3
 8000a78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0152      	lsls	r2, r2, #5
 8000a8c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0192      	lsls	r2, r2, #6
 8000a94:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a96:	003b      	movs	r3, r7
 8000a98:	220a      	movs	r2, #10
 8000a9a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a9c:	003b      	movs	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa2:	003b      	movs	r3, r7
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2280      	movs	r2, #128	; 0x80
 8000aac:	0492      	lsls	r2, r2, #18
 8000aae:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000abc:	003b      	movs	r3, r7
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	01d2      	lsls	r2, r2, #7
 8000ac2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ac4:	003a      	movs	r2, r7
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f008 f9b0 	bl	8008e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000ad4:	f001 fe1a 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <MX_TIM1_Init+0x1e8>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 f85c 	bl	8002b98 <HAL_TIM_MspPostInit>

}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b01e      	add	sp, #120	; 0x78
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20003404 	.word	0x20003404
 8000aec:	40012c00 	.word	0x40012c00
 8000af0:	0000027f 	.word	0x0000027f

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b08f      	sub	sp, #60	; 0x3c
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000afa:	2418      	movs	r4, #24
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	2320      	movs	r3, #32
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f009 fe45 	bl	800a794 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2318      	movs	r3, #24
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f009 fe3e 	bl	800a794 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	029b      	lsls	r3, r3, #10
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fcdb 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fcee 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2202      	movs	r2, #2
 8000b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b34:	003b      	movs	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b3a:	003b      	movs	r3, r7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b40:	003b      	movs	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b46:	003b      	movs	r3, r7
 8000b48:	2201      	movs	r2, #1
 8000b4a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	003a      	movs	r2, r7
 8000b4e:	23a0      	movs	r3, #160	; 0xa0
 8000b50:	05db      	lsls	r3, r3, #23
 8000b52:	0011      	movs	r1, r2
 8000b54:	0018      	movs	r0, r3
 8000b56:	f009 fa9f 	bl	800a098 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2202      	movs	r2, #2
 8000b64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	003a      	movs	r2, r7
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	0011      	movs	r1, r2
 8000b86:	0018      	movs	r0, r3
 8000b88:	f009 fa86 	bl	800a098 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	201c      	movs	r0, #28
 8000b90:	f7ff fb5e 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b94:	201c      	movs	r0, #28
 8000b96:	f7ff fb41 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	22e1      	movs	r2, #225	; 0xe1
 8000ba4:	0212      	lsls	r2, r2, #8
 8000ba6:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	0152      	lsls	r2, r2, #5
 8000bae:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	0010      	movs	r0, r2
 8000bd8:	f009 fd2a 	bl	800a630 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bde:	2100      	movs	r1, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fbc1 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbce 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fba8 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fbda 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff fb92 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fbe9 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d0f9      	beq.n	8000c0a <MX_USART2_UART_Init+0x116>
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <MX_USART2_UART_Init+0x138>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fbf7 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d0f3      	beq.n	8000c0a <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b00f      	add	sp, #60	; 0x3c
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_USART3_Init+0x78>)
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <MX_USART3_Init+0x78>)
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	0309      	lsls	r1, r1, #12
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c44:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_USART3_Init+0x78>)
 8000c46:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c4a:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <MX_USART3_Init+0x80>)
 8000c4c:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	0052      	lsls	r2, r2, #1
 8000c7c:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f008 fa15 	bl	80090bc <HAL_USART_Init>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f001 fd39 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <MX_USART3_Init+0x7c>)
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <MX_USART3_Init+0x80>)
 8000c9e:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	40004800 	.word	0x40004800
 8000cac:	20003390 	.word	0x20003390
 8000cb0:	007b98a0 	.word	0x007b98a0

08000cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_DMA_Init+0x58>)
 8000cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_DMA_Init+0x58>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_DMA_Init+0x58>)
 8000cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2009      	movs	r0, #9
 8000cd8:	f002 fd66 	bl	80037a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cdc:	2009      	movs	r0, #9
 8000cde:	f002 fd78 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	200a      	movs	r0, #10
 8000ce8:	f002 fd5e 	bl	80037a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000cec:	200a      	movs	r0, #10
 8000cee:	f002 fd70 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	200b      	movs	r0, #11
 8000cf8:	f002 fd56 	bl	80037a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000cfc:	200b      	movs	r0, #11
 8000cfe:	f002 fd68 	bl	80037d2 <HAL_NVIC_EnableIRQ>

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	40021000 	.word	0x40021000

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	003b      	movs	r3, r7
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2318      	movs	r3, #24
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f009 fd38 	bl	800a794 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f7ff fbed 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d2a:	2004      	movs	r0, #4
 8000d2c:	f7ff fbea 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fbe7 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4aa0      	ldr	r2, [pc, #640]	; (8000fbc <MX_GPIO_Init+0x2ac>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f7ff fbb2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4a9d      	ldr	r2, [pc, #628]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	f7ff fbab 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	4a9a      	ldr	r2, [pc, #616]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000d58:	0019      	movs	r1, r3
 8000d5a:	0010      	movs	r0, r2
 8000d5c:	f7ff fba4 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d60:	23a0      	movs	r3, #160	; 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	0018      	movs	r0, r3
 8000d68:	f7ff fb9e 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d6c:	23a0      	movs	r3, #160	; 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0018      	movs	r0, r3
 8000d74:	f7ff fb98 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d78:	4b91      	ldr	r3, [pc, #580]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000d7a:	2140      	movs	r1, #64	; 0x40
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fb93 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000d82:	2380      	movs	r3, #128	; 0x80
 8000d84:	011a      	lsls	r2, r3, #4
 8000d86:	23a0      	movs	r3, #160	; 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fb97 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	015a      	lsls	r2, r3, #5
 8000d96:	23a0      	movs	r3, #160	; 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff fb8f 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2280      	movs	r2, #128	; 0x80
 8000da6:	0092      	lsls	r2, r2, #2
 8000da8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000daa:	003b      	movs	r3, r7
 8000dac:	2201      	movs	r2, #1
 8000dae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	003b      	movs	r3, r7
 8000db2:	2203      	movs	r2, #3
 8000db4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	4a7d      	ldr	r2, [pc, #500]	; (8000fbc <MX_GPIO_Init+0x2ac>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f009 f965 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	01d2      	lsls	r2, r2, #7
 8000dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2201      	movs	r2, #1
 8000dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ddc:	003b      	movs	r3, r7
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000dee:	003b      	movs	r3, r7
 8000df0:	4a73      	ldr	r2, [pc, #460]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f009 f94f 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0212      	lsls	r2, r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e02:	003b      	movs	r3, r7
 8000e04:	2201      	movs	r2, #1
 8000e06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e08:	003b      	movs	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0e:	003b      	movs	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e14:	003b      	movs	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	003b      	movs	r3, r7
 8000e1c:	4a68      	ldr	r2, [pc, #416]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000e1e:	0019      	movs	r1, r3
 8000e20:	0010      	movs	r0, r2
 8000e22:	f009 f939 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e26:	003b      	movs	r3, r7
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e32:	003b      	movs	r3, r7
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e38:	003a      	movs	r2, r7
 8000e3a:	23a0      	movs	r3, #160	; 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f009 f929 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e46:	003b      	movs	r3, r7
 8000e48:	2202      	movs	r2, #2
 8000e4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e4c:	003b      	movs	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e52:	003b      	movs	r3, r7
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e58:	003a      	movs	r2, r7
 8000e5a:	23a0      	movs	r3, #160	; 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f009 f919 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2210      	movs	r2, #16
 8000e6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e6c:	003b      	movs	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2201      	movs	r2, #1
 8000e76:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e78:	003a      	movs	r2, r7
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f009 f909 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2201      	movs	r2, #1
 8000e90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2203      	movs	r2, #3
 8000e96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	003a      	movs	r2, r7
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f009 f8f3 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2201      	movs	r2, #1
 8000ebc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	003a      	movs	r2, r7
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f009 f8dd 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2240      	movs	r2, #64	; 0x40
 8000ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	003b      	movs	r3, r7
 8000eec:	2203      	movs	r2, #3
 8000eee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef0:	003b      	movs	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef6:	003b      	movs	r3, r7
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000efc:	003b      	movs	r3, r7
 8000efe:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <MX_GPIO_Init+0x2b0>)
 8000f00:	0019      	movs	r1, r3
 8000f02:	0010      	movs	r0, r2
 8000f04:	f009 f8c8 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2201      	movs	r2, #1
 8000f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2203      	movs	r2, #3
 8000f1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f1c:	003b      	movs	r3, r7
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f22:	003b      	movs	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f28:	003a      	movs	r2, r7
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f009 f8b1 	bl	800a098 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	0152      	lsls	r2, r2, #5
 8000f3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f3e:	003b      	movs	r3, r7
 8000f40:	2201      	movs	r2, #1
 8000f42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	003b      	movs	r3, r7
 8000f46:	2203      	movs	r2, #3
 8000f48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f50:	003b      	movs	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f56:	003a      	movs	r2, r7
 8000f58:	23a0      	movs	r3, #160	; 0xa0
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f009 f89a 	bl	800a098 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000f64:	003b      	movs	r3, r7
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0192      	lsls	r2, r2, #6
 8000f6a:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f6c:	003b      	movs	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f72:	003b      	movs	r3, r7
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000f78:	003a      	movs	r2, r7
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f009 f889 	bl	800a098 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000f86:	003b      	movs	r3, r7
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	01d2      	lsls	r2, r2, #7
 8000f8c:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f8e:	003b      	movs	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f94:	003b      	movs	r3, r7
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	003a      	movs	r2, r7
 8000f9c:	23a0      	movs	r3, #160	; 0xa0
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	0011      	movs	r1, r2
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f009 f878 	bl	800a098 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	031b      	lsls	r3, r3, #12
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff fa6b 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b006      	add	sp, #24
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	50000800 	.word	0x50000800

08000fc4 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <USART2_RX_Callback+0x60>)
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f7ff fa4e 	bl	800046c <LL_USART_ReceiveData9>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	001a      	movs	r2, r3
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <USART2_RX_Callback+0x64>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <USART2_RX_Callback+0x60>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	05db      	lsls	r3, r3, #23
 8000fe0:	0ddb      	lsrs	r3, r3, #23
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <USART2_RX_Callback+0x64>)
 8000fe6:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000fe8:	4b10      	ldr	r3, [pc, #64]	; (800102c <USART2_RX_Callback+0x68>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <USART2_RX_Callback+0x64>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	2bff      	cmp	r3, #255	; 0xff
 8000ff4:	d90a      	bls.n	800100c <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <USART2_RX_Callback+0x64>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <USART2_RX_Callback+0x6c>)
 8000ffe:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <USART2_RX_Callback+0x70>)
 8001002:	2200      	movs	r2, #0
 8001004:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <USART2_RX_Callback+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <USART2_RX_Callback+0x74>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d104      	bne.n	800101e <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <USART2_RX_Callback+0x64>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f87f 	bl	800111c <cmdReceive>
  }
}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40004400 	.word	0x40004400
 8001028:	200035da 	.word	0x200035da
 800102c:	20003160 	.word	0x20003160
 8001030:	200055e0 	.word	0x200055e0
 8001034:	20003162 	.word	0x20003162
 8001038:	20003161 	.word	0x20003161

0800103c <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8001044:	23a0      	movs	r3, #160	; 0xa0
 8001046:	05db      	lsls	r3, r3, #23
 8001048:	695a      	ldr	r2, [r3, #20]
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	05db      	lsls	r3, r3, #23
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	0109      	lsls	r1, r1, #4
 8001052:	430a      	orrs	r2, r1
 8001054:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 8001056:	23a0      	movs	r3, #160	; 0xa0
 8001058:	05db      	lsls	r3, r3, #23
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	23a0      	movs	r3, #160	; 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	490e      	ldr	r1, [pc, #56]	; (800109c <HAL_SPI_RxHalfCpltCallback+0x60>)
 8001062:	400a      	ands	r2, r1
 8001064:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001066:	23a0      	movs	r3, #160	; 0xa0
 8001068:	05db      	lsls	r3, r3, #23
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	23a0      	movs	r3, #160	; 0xa0
 800106e:	05db      	lsls	r3, r3, #23
 8001070:	2140      	movs	r1, #64	; 0x40
 8001072:	438a      	bics	r2, r1
 8001074:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	05db      	lsls	r3, r3, #23
 800107a:	695a      	ldr	r2, [r3, #20]
 800107c:	23a0      	movs	r3, #160	; 0xa0
 800107e:	05db      	lsls	r3, r3, #23
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	430a      	orrs	r2, r1
 8001084:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_SPI_RxHalfCpltCallback+0x64>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	4906      	ldr	r1, [pc, #24]	; (80010a4 <HAL_SPI_RxHalfCpltCallback+0x68>)
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_SPI_RxHalfCpltCallback+0x6c>)
 800108e:	0018      	movs	r0, r3
 8001090:	f008 f922 	bl	80092d8 <HAL_USART_Transmit_DMA>

}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}
 800109c:	fffff7ff 	.word	0xfffff7ff
 80010a0:	200035d8 	.word	0x200035d8
 80010a4:	200035e0 	.word	0x200035e0
 80010a8:	20003390 	.word	0x20003390

080010ac <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <HAL_SPI_RxCpltCallback+0x20>)
 80010b6:	695a      	ldr	r2, [r3, #20]
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_SPI_RxCpltCallback+0x20>)
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0209      	lsls	r1, r1, #8
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]
}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	50000800 	.word	0x50000800

080010d0 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 80010d8:	23a0      	movs	r3, #160	; 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	23a0      	movs	r3, #160	; 0xa0
 80010e0:	05db      	lsls	r3, r3, #23
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	438a      	bics	r2, r1
 80010e6:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 80010e8:	23a0      	movs	r3, #160	; 0xa0
 80010ea:	05db      	lsls	r3, r3, #23
 80010ec:	695a      	ldr	r2, [r3, #20]
 80010ee:	23a0      	movs	r3, #160	; 0xa0
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	430a      	orrs	r2, r1
 80010f6:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_USART_TxCpltCallback+0x44>)
 80010fa:	695a      	ldr	r2, [r3, #20]
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_USART_TxCpltCallback+0x44>)
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	430a      	orrs	r2, r1
 8001102:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <HAL_USART_TxCpltCallback+0x48>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	50000800 	.word	0x50000800
 8001118:	2000345a 	.word	0x2000345a

0800111c <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	0002      	movs	r2, r0
 8001124:	1dbb      	adds	r3, r7, #6
 8001126:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	4b2b      	ldr	r3, [pc, #172]	; (80011e0 <cmdReceive+0xc4>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0fb      	beq.n	8001132 <cmdReceive+0x16>
	  ByteReceived=0;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <cmdReceive+0xc4>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <cmdReceive+0xc8>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	001a      	movs	r2, r3
 8001146:	1dbb      	adds	r3, r7, #6
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b2d9      	uxtb	r1, r3
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <cmdReceive+0xcc>)
 800114e:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <cmdReceive+0xc8>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <cmdReceive+0xc8>)
 800115a:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <cmdReceive+0xc8>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d033      	beq.n	80011cc <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <cmdReceive+0xc8>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <cmdReceive+0xcc>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	3301      	adds	r3, #1
 8001170:	429a      	cmp	r2, r3
 8001172:	dd2b      	ble.n	80011cc <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001174:	230f      	movs	r3, #15
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e00f      	b.n	800119e <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800117e:	210f      	movs	r1, #15
 8001180:	187b      	adds	r3, r7, r1
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <cmdReceive+0xcc>)
 8001186:	5cd2      	ldrb	r2, [r2, r3]
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <cmdReceive+0xd0>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <cmdReceive+0xd0>)
 8001192:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001194:	187b      	adds	r3, r7, r1
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	187b      	adds	r3, r7, r1
 800119a:	3201      	adds	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <cmdReceive+0xcc>)
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	210f      	movs	r1, #15
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dae7      	bge.n	800117e <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <cmdReceive+0xd0>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <cmdReceive+0xb0>
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <cmdReceive+0xcc>)
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	3302      	adds	r3, #2
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d103      	bne.n	80011cc <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <cmdReceive+0xcc>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 fa5a 	bl	8001680 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <cmdReceive+0xd4>)
 80011ce:	6a1a      	ldr	r2, [r3, #32]
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <cmdReceive+0xd4>)
 80011d2:	2108      	movs	r1, #8
 80011d4:	430a      	orrs	r2, r1
 80011d6:	621a      	str	r2, [r3, #32]
	}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20003160 	.word	0x20003160
 80011e4:	20003162 	.word	0x20003162
 80011e8:	200055e0 	.word	0x200055e0
 80011ec:	20003164 	.word	0x20003164
 80011f0:	40004400 	.word	0x40004400

080011f4 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 8001200:	1df9      	adds	r1, r7, #7
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <USART_AS_SPI_sendCMD+0x20>)
 8001204:	230a      	movs	r3, #10
 8001206:	2201      	movs	r2, #1
 8001208:	f007 ffa8 	bl	800915c <HAL_USART_Transmit>
		}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20003390 	.word	0x20003390

08001218 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <weoInit+0xd0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <weoInit+0xd0>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <weoInit+0xd0>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <weoInit+0xd0>)
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0309      	lsls	r1, r1, #12
 8001232:	430a      	orrs	r2, r1
 8001234:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <weoInit+0xd0>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b2b      	ldr	r3, [pc, #172]	; (80012e8 <weoInit+0xd0>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 8001242:	2001      	movs	r0, #1
 8001244:	f001 ff6a 	bl	800311c <HAL_Delay>
		HAL_Delay(1);
 8001248:	2001      	movs	r0, #1
 800124a:	f001 ff67 	bl	800311c <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <weoInit+0xd4>)
 8001250:	2100      	movs	r1, #0
 8001252:	0018      	movs	r0, r3
 8001254:	f006 fece 	bl	8007ff4 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001258:	2001      	movs	r0, #1
 800125a:	f001 ff5f 	bl	800311c <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800125e:	23a0      	movs	r3, #160	; 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	23a0      	movs	r3, #160	; 0xa0
 8001266:	05db      	lsls	r3, r3, #23
 8001268:	2140      	movs	r1, #64	; 0x40
 800126a:	438a      	bics	r2, r1
 800126c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800126e:	23a0      	movs	r3, #160	; 0xa0
 8001270:	05db      	lsls	r3, r3, #23
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	438a      	bics	r2, r1
 800127c:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800127e:	20af      	movs	r0, #175	; 0xaf
 8001280:	f7ff ffb8 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001284:	20a0      	movs	r0, #160	; 0xa0
 8001286:	f7ff ffb5 	bl	80011f4 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800128a:	2051      	movs	r0, #81	; 0x51
 800128c:	f7ff ffb2 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001290:	2081      	movs	r0, #129	; 0x81
 8001292:	f7ff ffaf 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001296:	20ff      	movs	r0, #255	; 0xff
 8001298:	f7ff ffac 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800129c:	20a1      	movs	r0, #161	; 0xa1
 800129e:	f7ff ffa9 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ffa6 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80012a8:	20a2      	movs	r0, #162	; 0xa2
 80012aa:	f7ff ffa3 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ffa0 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80012b4:	20a8      	movs	r0, #168	; 0xa8
 80012b6:	f7ff ff9d 	bl	80011f4 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80012ba:	207f      	movs	r0, #127	; 0x7f
 80012bc:	f7ff ff9a 	bl	80011f4 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	430a      	orrs	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	23a0      	movs	r3, #160	; 0xa0
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	430a      	orrs	r2, r1
 80012de:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	40004800 	.word	0x40004800
 80012ec:	20003404 	.word	0x20003404

080012f0 <weoClear>:
	void weoClear(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012f6:	23a0      	movs	r3, #160	; 0xa0
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	695a      	ldr	r2, [r3, #20]
 80012fc:	23a0      	movs	r3, #160	; 0xa0
 80012fe:	05db      	lsls	r3, r3, #23
 8001300:	2140      	movs	r1, #64	; 0x40
 8001302:	438a      	bics	r2, r1
 8001304:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	05db      	lsls	r3, r3, #23
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	23a0      	movs	r3, #160	; 0xa0
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	2180      	movs	r1, #128	; 0x80
 8001312:	438a      	bics	r2, r1
 8001314:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001316:	2075      	movs	r0, #117	; 0x75
 8001318:	f7ff ff6c 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff ff69 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001322:	207f      	movs	r0, #127	; 0x7f
 8001324:	f7ff ff66 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001328:	2015      	movs	r0, #21
 800132a:	f7ff ff63 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ff60 	bl	80011f4 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001334:	207f      	movs	r0, #127	; 0x7f
 8001336:	f7ff ff5d 	bl	80011f4 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 800133a:	23a0      	movs	r3, #160	; 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	23a0      	movs	r3, #160	; 0xa0
 8001342:	05db      	lsls	r3, r3, #23
 8001344:	2140      	movs	r1, #64	; 0x40
 8001346:	438a      	bics	r2, r1
 8001348:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	695a      	ldr	r2, [r3, #20]
 8001350:	23a0      	movs	r3, #160	; 0xa0
 8001352:	05db      	lsls	r3, r3, #23
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	430a      	orrs	r2, r1
 8001358:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	2200      	movs	r2, #0
 800135e:	801a      	strh	r2, [r3, #0]
 8001360:	e00d      	b.n	800137e <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <weoClear+0xc0>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	4013      	ands	r3, r2
 800136c:	d0fa      	beq.n	8001364 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <weoClear+0xc0>)
 8001370:	2200      	movs	r2, #0
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001374:	1dbb      	adds	r3, r7, #6
 8001376:	881a      	ldrh	r2, [r3, #0]
 8001378:	1dbb      	adds	r3, r7, #6
 800137a:	3201      	adds	r2, #1
 800137c:	801a      	strh	r2, [r3, #0]
 800137e:	1dbb      	adds	r3, r7, #6
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <weoClear+0xc4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d9ec      	bls.n	8001362 <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001388:	23a0      	movs	r3, #160	; 0xa0
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	438a      	bics	r2, r1
 8001396:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	23a0      	movs	r3, #160	; 0xa0
 80013a0:	05db      	lsls	r3, r3, #23
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	430a      	orrs	r2, r1
 80013a6:	615a      	str	r2, [r3, #20]
	}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40004800 	.word	0x40004800
 80013b4:	00002001 	.word	0x00002001

080013b8 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	0005      	movs	r5, r0
 80013c0:	000c      	movs	r4, r1
 80013c2:	0010      	movs	r0, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	1c2a      	adds	r2, r5, #0
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	1dbb      	adds	r3, r7, #6
 80013ce:	1c22      	adds	r2, r4, #0
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	1d7b      	adds	r3, r7, #5
 80013d4:	1c02      	adds	r2, r0, #0
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	1c0a      	adds	r2, r1, #0
 80013dc:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80013de:	240e      	movs	r4, #14
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da00      	bge.n	80013f2 <weoDrawRectangleFilled+0x3a>
 80013f0:	e0b7      	b.n	8001562 <weoDrawRectangleFilled+0x1aa>
 80013f2:	1dbb      	adds	r3, r7, #6
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da00      	bge.n	80013fe <weoDrawRectangleFilled+0x46>
 80013fc:	e0b1      	b.n	8001562 <weoDrawRectangleFilled+0x1aa>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80013fe:	1d7b      	adds	r3, r7, #5
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b25b      	sxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	da00      	bge.n	800140a <weoDrawRectangleFilled+0x52>
 8001408:	e0ab      	b.n	8001562 <weoDrawRectangleFilled+0x1aa>
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25b      	sxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	da00      	bge.n	8001416 <weoDrawRectangleFilled+0x5e>
 8001414:	e0a5      	b.n	8001562 <weoDrawRectangleFilled+0x1aa>
				return;
			}


			start_x_New=start_x;
 8001416:	250d      	movs	r5, #13
 8001418:	197b      	adds	r3, r7, r5
 800141a:	1dfa      	adds	r2, r7, #7
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001420:	260c      	movs	r6, #12
 8001422:	19bb      	adds	r3, r7, r6
 8001424:	1d3a      	adds	r2, r7, #4
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	217f      	movs	r1, #127	; 0x7f
 800142a:	1a8a      	subs	r2, r1, r2
 800142c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800142e:	230b      	movs	r3, #11
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	1d7a      	adds	r2, r7, #5
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001438:	220a      	movs	r2, #10
 800143a:	18bb      	adds	r3, r7, r2
 800143c:	1dba      	adds	r2, r7, #6
 800143e:	7812      	ldrb	r2, [r2, #0]
 8001440:	217f      	movs	r1, #127	; 0x7f
 8001442:	1a8a      	subs	r2, r1, r2
 8001444:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	23a0      	movs	r3, #160	; 0xa0
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	438a      	bics	r2, r1
 8001454:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	438a      	bics	r2, r1
 8001464:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001466:	2075      	movs	r0, #117	; 0x75
 8001468:	f7ff fec4 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 800146c:	197b      	adds	r3, r7, r5
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff febf 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001476:	230b      	movs	r3, #11
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff feb9 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001482:	2015      	movs	r0, #21
 8001484:	f7ff feb6 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001488:	19bb      	adds	r3, r7, r6
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff feaf 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001496:	220a      	movs	r2, #10
 8001498:	18bb      	adds	r3, r7, r2
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fea7 	bl	80011f4 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 80014a6:	23a0      	movs	r3, #160	; 0xa0
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	695a      	ldr	r2, [r3, #20]
 80014ac:	23a0      	movs	r3, #160	; 0xa0
 80014ae:	05db      	lsls	r3, r3, #23
 80014b0:	2180      	movs	r1, #128	; 0x80
 80014b2:	430a      	orrs	r2, r1
 80014b4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80014b6:	23a0      	movs	r3, #160	; 0xa0
 80014b8:	05db      	lsls	r3, r3, #23
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	23a0      	movs	r3, #160	; 0xa0
 80014be:	05db      	lsls	r3, r3, #23
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	430a      	orrs	r2, r1
 80014c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80014c6:	23a0      	movs	r3, #160	; 0xa0
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	2140      	movs	r1, #64	; 0x40
 80014d2:	438a      	bics	r2, r1
 80014d4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80014d6:	23a0      	movs	r3, #160	; 0xa0
 80014d8:	05db      	lsls	r3, r3, #23
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	430a      	orrs	r2, r1
 80014e4:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	2200      	movs	r2, #0
 80014ea:	801a      	strh	r2, [r3, #0]
 80014ec:	e012      	b.n	8001514 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <weoDrawRectangleFilled+0x1b4>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	4013      	ands	r3, r2
 80014f8:	d0fa      	beq.n	80014f0 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80014fa:	210e      	movs	r1, #14
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	18d3      	adds	r3, r2, r3
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <weoDrawRectangleFilled+0x1b4>)
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800150a:	187b      	adds	r3, r7, r1
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	187b      	adds	r3, r7, r1
 8001510:	3201      	adds	r2, #1
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	230e      	movs	r3, #14
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	881a      	ldrh	r2, [r3, #0]
 800151a:	230b      	movs	r3, #11
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	7819      	ldrb	r1, [r3, #0]
 8001520:	230d      	movs	r3, #13
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	1acb      	subs	r3, r1, r3
 8001528:	3301      	adds	r3, #1
 800152a:	210a      	movs	r1, #10
 800152c:	1879      	adds	r1, r7, r1
 800152e:	7809      	ldrb	r1, [r1, #0]
 8001530:	0849      	lsrs	r1, r1, #1
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	0008      	movs	r0, r1
 8001536:	210c      	movs	r1, #12
 8001538:	1879      	adds	r1, r7, r1
 800153a:	7809      	ldrb	r1, [r1, #0]
 800153c:	0849      	lsrs	r1, r1, #1
 800153e:	b2c9      	uxtb	r1, r1
 8001540:	1a41      	subs	r1, r0, r1
 8001542:	3101      	adds	r1, #1
 8001544:	434b      	muls	r3, r1
 8001546:	429a      	cmp	r2, r3
 8001548:	dbd1      	blt.n	80014ee <weoDrawRectangleFilled+0x136>
			}

			HAL_Delay(1);
 800154a:	2001      	movs	r0, #1
 800154c:	f001 fde6 	bl	800311c <HAL_Delay>
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8001550:	23a0      	movs	r3, #160	; 0xa0
 8001552:	05db      	lsls	r3, r3, #23
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	23a0      	movs	r3, #160	; 0xa0
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	2140      	movs	r1, #64	; 0x40
 800155c:	430a      	orrs	r2, r1
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	e000      	b.n	8001564 <weoDrawRectangleFilled+0x1ac>
				return;
 8001562:	46c0      	nop			; (mov r8, r8)
		}
 8001564:	46bd      	mov	sp, r7
 8001566:	b005      	add	sp, #20
 8001568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	40004800 	.word	0x40004800

08001570 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	0005      	movs	r5, r0
 8001578:	000c      	movs	r4, r1
 800157a:	0010      	movs	r0, r2
 800157c:	0019      	movs	r1, r3
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	1c2a      	adds	r2, r5, #0
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	1dbb      	adds	r3, r7, #6
 8001586:	1c22      	adds	r2, r4, #0
 8001588:	701a      	strb	r2, [r3, #0]
 800158a:	1d7b      	adds	r3, r7, #5
 800158c:	1c02      	adds	r2, r0, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	1c0a      	adds	r2, r1, #0
 8001594:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001596:	230e      	movs	r3, #14
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	2200      	movs	r2, #0
 800159c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db66      	blt.n	8001676 <weoDrawRectangleInit+0x106>
 80015a8:	1dbb      	adds	r3, r7, #6
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db61      	blt.n	8001676 <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80015b2:	1d7b      	adds	r3, r7, #5
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db5c      	blt.n	8001676 <weoDrawRectangleInit+0x106>
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db57      	blt.n	8001676 <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 80015c6:	240d      	movs	r4, #13
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80015d0:	250c      	movs	r5, #12
 80015d2:	197b      	adds	r3, r7, r5
 80015d4:	1d3a      	adds	r2, r7, #4
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	217f      	movs	r1, #127	; 0x7f
 80015da:	1a8a      	subs	r2, r1, r2
 80015dc:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80015de:	260b      	movs	r6, #11
 80015e0:	19bb      	adds	r3, r7, r6
 80015e2:	1d7a      	adds	r2, r7, #5
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80015e8:	230a      	movs	r3, #10
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	1dba      	adds	r2, r7, #6
 80015ee:	7812      	ldrb	r2, [r2, #0]
 80015f0:	217f      	movs	r1, #127	; 0x7f
 80015f2:	1a8a      	subs	r2, r1, r2
 80015f4:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015f6:	23a0      	movs	r3, #160	; 0xa0
 80015f8:	05db      	lsls	r3, r3, #23
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	23a0      	movs	r3, #160	; 0xa0
 80015fe:	05db      	lsls	r3, r3, #23
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	438a      	bics	r2, r1
 8001604:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001606:	23a0      	movs	r3, #160	; 0xa0
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	23a0      	movs	r3, #160	; 0xa0
 800160e:	05db      	lsls	r3, r3, #23
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	438a      	bics	r2, r1
 8001614:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001616:	2075      	movs	r0, #117	; 0x75
 8001618:	f7ff fdec 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 800161c:	193b      	adds	r3, r7, r4
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fde7 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001626:	19bb      	adds	r3, r7, r6
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff fde2 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001630:	2015      	movs	r0, #21
 8001632:	f7ff fddf 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001636:	197b      	adds	r3, r7, r5
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	085b      	lsrs	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff fdd8 	bl	80011f4 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001644:	230a      	movs	r3, #10
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	0018      	movs	r0, r3
 8001650:	f7ff fdd0 	bl	80011f4 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001654:	23a0      	movs	r3, #160	; 0xa0
 8001656:	05db      	lsls	r3, r3, #23
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	23a0      	movs	r3, #160	; 0xa0
 800165c:	05db      	lsls	r3, r3, #23
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	430a      	orrs	r2, r1
 8001662:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001664:	23a0      	movs	r3, #160	; 0xa0
 8001666:	05db      	lsls	r3, r3, #23
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	23a0      	movs	r3, #160	; 0xa0
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	430a      	orrs	r2, r1
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	e000      	b.n	8001678 <weoDrawRectangleInit+0x108>
				return;
 8001676:	46c0      	nop			; (mov r8, r8)
		}
 8001678:	46bd      	mov	sp, r7
 800167a:	b005      	add	sp, #20
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001680 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001688:	230f      	movs	r3, #15
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	22ff      	movs	r2, #255	; 0xff
 800168e:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001690:	230d      	movs	r3, #13
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8001698:	230a      	movs	r3, #10
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	2200      	movs	r2, #0
 800169e:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80016a0:	4bd1      	ldr	r3, [pc, #836]	; (80019e8 <answer2CPU+0x368>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b11      	cmp	r3, #17
 80016ac:	d007      	beq.n	80016be <answer2CPU+0x3e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d003      	beq.n	80016be <answer2CPU+0x3e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b14      	cmp	r3, #20
 80016bc:	d105      	bne.n	80016ca <answer2CPU+0x4a>
 80016be:	4bcb      	ldr	r3, [pc, #812]	; (80019ec <answer2CPU+0x36c>)
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	4bca      	ldr	r3, [pc, #808]	; (80019ec <answer2CPU+0x36c>)
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	438a      	bics	r2, r1
 80016c8:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	4252      	negs	r2, r2
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	4bc5      	ldr	r3, [pc, #788]	; (80019f0 <answer2CPU+0x370>)
 80016da:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d800      	bhi.n	80016e6 <answer2CPU+0x66>
 80016e4:	e150      	b.n	8001988 <answer2CPU+0x308>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b15      	cmp	r3, #21
 80016ec:	d900      	bls.n	80016f0 <answer2CPU+0x70>
 80016ee:	e14b      	b.n	8001988 <answer2CPU+0x308>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80016f0:	23a0      	movs	r3, #160	; 0xa0
 80016f2:	05db      	lsls	r3, r3, #23
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2201      	movs	r2, #1
 80016f8:	4013      	ands	r3, r2
 80016fa:	d106      	bne.n	800170a <answer2CPU+0x8a>
					keyboard &= 0b11111110;
 80016fc:	220f      	movs	r2, #15
 80016fe:	18bb      	adds	r3, r7, r2
 8001700:	18ba      	adds	r2, r7, r2
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	438a      	bics	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 800170a:	23a0      	movs	r3, #160	; 0xa0
 800170c:	05db      	lsls	r3, r3, #23
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2202      	movs	r2, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d106      	bne.n	8001724 <answer2CPU+0xa4>
					keyboard &= 0b11111101;
 8001716:	220f      	movs	r2, #15
 8001718:	18bb      	adds	r3, r7, r2
 800171a:	18ba      	adds	r2, r7, r2
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	2102      	movs	r1, #2
 8001720:	438a      	bics	r2, r1
 8001722:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001724:	23a0      	movs	r3, #160	; 0xa0
 8001726:	05db      	lsls	r3, r3, #23
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2210      	movs	r2, #16
 800172c:	4013      	ands	r3, r2
 800172e:	d106      	bne.n	800173e <answer2CPU+0xbe>
					keyboard &= 0b11111011;
 8001730:	220f      	movs	r2, #15
 8001732:	18bb      	adds	r3, r7, r2
 8001734:	18ba      	adds	r2, r7, r2
 8001736:	7812      	ldrb	r2, [r2, #0]
 8001738:	2104      	movs	r1, #4
 800173a:	438a      	bics	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 800173e:	23a0      	movs	r3, #160	; 0xa0
 8001740:	05db      	lsls	r3, r3, #23
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	019b      	lsls	r3, r3, #6
 8001748:	4013      	ands	r3, r2
 800174a:	d106      	bne.n	800175a <answer2CPU+0xda>
					keyboard &= 0b11110111;
 800174c:	220f      	movs	r2, #15
 800174e:	18bb      	adds	r3, r7, r2
 8001750:	18ba      	adds	r2, r7, r2
 8001752:	7812      	ldrb	r2, [r2, #0]
 8001754:	2108      	movs	r1, #8
 8001756:	438a      	bics	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800175a:	23a0      	movs	r3, #160	; 0xa0
 800175c:	05db      	lsls	r3, r3, #23
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	01db      	lsls	r3, r3, #7
 8001764:	4013      	ands	r3, r2
 8001766:	d106      	bne.n	8001776 <answer2CPU+0xf6>
					keyboard &= 0b11101111;
 8001768:	220f      	movs	r2, #15
 800176a:	18bb      	adds	r3, r7, r2
 800176c:	18ba      	adds	r2, r7, r2
 800176e:	7812      	ldrb	r2, [r2, #0]
 8001770:	2110      	movs	r1, #16
 8001772:	438a      	bics	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001776:	210f      	movs	r1, #15
 8001778:	187b      	adds	r3, r7, r1
 800177a:	187a      	adds	r2, r7, r1
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	43d2      	mvns	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001782:	2009      	movs	r0, #9
 8001784:	183b      	adds	r3, r7, r0
 8001786:	2204      	movs	r2, #4
 8001788:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800178a:	183b      	adds	r3, r7, r0
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b02      	subs	r3, #2
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <answer2CPU+0x370>)
 8001796:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001798:	187b      	adds	r3, r7, r1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b94      	ldr	r3, [pc, #592]	; (80019f0 <answer2CPU+0x370>)
 80017a0:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80017a2:	230e      	movs	r3, #14
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e011      	b.n	80017d0 <answer2CPU+0x150>
					myCS = myCS + ans[i];
 80017ac:	200e      	movs	r0, #14
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	4b8f      	ldr	r3, [pc, #572]	; (80019f0 <answer2CPU+0x370>)
 80017b4:	0052      	lsls	r2, r2, #1
 80017b6:	5ad3      	ldrh	r3, [r2, r3]
 80017b8:	b2d9      	uxtb	r1, r3
 80017ba:	220d      	movs	r2, #13
 80017bc:	18bb      	adds	r3, r7, r2
 80017be:	18ba      	adds	r2, r7, r2
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	188a      	adds	r2, r1, r2
 80017c4:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80017c6:	183b      	adds	r3, r7, r0
 80017c8:	781a      	ldrb	r2, [r3, #0]
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	3201      	adds	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	200e      	movs	r0, #14
 80017d2:	183b      	adds	r3, r7, r0
 80017d4:	781a      	ldrb	r2, [r3, #0]
 80017d6:	2309      	movs	r3, #9
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbe4      	blt.n	80017ac <answer2CPU+0x12c>
				}
				myCS = 0 - myCS;
 80017e2:	210d      	movs	r1, #13
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	187a      	adds	r2, r7, r1
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	4252      	negs	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b7e      	ldr	r3, [pc, #504]	; (80019f0 <answer2CPU+0x370>)
 80017f6:	80da      	strh	r2, [r3, #6]
				i=0;
 80017f8:	183b      	adds	r3, r7, r0
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <answer2CPU+0x374>)
 8001802:	69db      	ldr	r3, [r3, #28]
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	4013      	ands	r3, r2
 8001808:	d0fa      	beq.n	8001800 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 800180a:	4b79      	ldr	r3, [pc, #484]	; (80019f0 <answer2CPU+0x370>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	4313      	orrs	r3, r2
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <answer2CPU+0x374>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 800181a:	230e      	movs	r3, #14
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e013      	b.n	800184c <answer2CPU+0x1cc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <answer2CPU+0x374>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	4013      	ands	r3, r2
 800182e:	d0fa      	beq.n	8001826 <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 8001830:	210e      	movs	r1, #14
 8001832:	187b      	adds	r3, r7, r1
 8001834:	781a      	ldrb	r2, [r3, #0]
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <answer2CPU+0x370>)
 8001838:	0052      	lsls	r2, r2, #1
 800183a:	5ad3      	ldrh	r3, [r2, r3]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b6d      	ldr	r3, [pc, #436]	; (80019f4 <answer2CPU+0x374>)
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001842:	187b      	adds	r3, r7, r1
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	187b      	adds	r3, r7, r1
 8001848:	3201      	adds	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	230e      	movs	r3, #14
 800184e:	18fa      	adds	r2, r7, r3
 8001850:	2309      	movs	r3, #9
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	7812      	ldrb	r2, [r2, #0]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d3e3      	bcc.n	8001824 <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b11      	cmp	r3, #17
 8001862:	d109      	bne.n	8001878 <answer2CPU+0x1f8>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	789a      	ldrb	r2, [r3, #2]
 8001868:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <answer2CPU+0x378>)
 800186a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 800186c:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <answer2CPU+0x368>)
 800186e:	2211      	movs	r2, #17
 8001870:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <answer2CPU+0x37c>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b12      	cmp	r3, #18
 800187e:	d115      	bne.n	80018ac <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3302      	adds	r3, #2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	001a      	movs	r2, r3
 8001888:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <answer2CPU+0x380>)
 800188a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3303      	adds	r3, #3
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	001a      	movs	r2, r3
 8001894:	4b5b      	ldr	r3, [pc, #364]	; (8001a04 <answer2CPU+0x384>)
 8001896:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	791a      	ldrb	r2, [r3, #4]
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <answer2CPU+0x378>)
 800189e:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80018a0:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <answer2CPU+0x368>)
 80018a2:	2212      	movs	r2, #18
 80018a4:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018a6:	4b55      	ldr	r3, [pc, #340]	; (80019fc <answer2CPU+0x37c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b13      	cmp	r3, #19
 80018b2:	d134      	bne.n	800191e <answer2CPU+0x29e>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3302      	adds	r3, #2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	001a      	movs	r2, r3
 80018bc:	4b50      	ldr	r3, [pc, #320]	; (8001a00 <answer2CPU+0x380>)
 80018be:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3303      	adds	r3, #3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	001a      	movs	r2, r3
 80018c8:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <answer2CPU+0x384>)
 80018ca:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	3b03      	subs	r3, #3
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <answer2CPU+0x388>)
 80018d8:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80018da:	230e      	movs	r3, #14
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e00f      	b.n	8001904 <answer2CPU+0x284>
					dataASCII[i] = cmd[i+4];
 80018e4:	200e      	movs	r0, #14
 80018e6:	183b      	adds	r3, r7, r0
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3304      	adds	r3, #4
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	18d2      	adds	r2, r2, r3
 80018f0:	183b      	adds	r3, r7, r0
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	7811      	ldrb	r1, [r2, #0]
 80018f6:	4a45      	ldr	r2, [pc, #276]	; (8001a0c <answer2CPU+0x38c>)
 80018f8:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	183b      	adds	r3, r7, r0
 8001900:	3201      	adds	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <answer2CPU+0x388>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	220e      	movs	r2, #14
 800190a:	18ba      	adds	r2, r7, r2
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3e8      	bcc.n	80018e4 <answer2CPU+0x264>
				}
					cmd2Execute=0x13;
 8001912:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <answer2CPU+0x368>)
 8001914:	2213      	movs	r2, #19
 8001916:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001918:	4b38      	ldr	r3, [pc, #224]	; (80019fc <answer2CPU+0x37c>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b14      	cmp	r3, #20
 8001924:	d10c      	bne.n	8001940 <answer2CPU+0x2c0>
					numSound = cmd[3];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	78da      	ldrb	r2, [r3, #3]
 800192a:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <answer2CPU+0x390>)
 800192c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <answer2CPU+0x368>)
 8001930:	2214      	movs	r2, #20
 8001932:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	22ff      	movs	r2, #255	; 0xff
 8001938:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <answer2CPU+0x37c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b15      	cmp	r3, #21
 8001946:	d10d      	bne.n	8001964 <answer2CPU+0x2e4>
					volume = cmd[2];
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	789a      	ldrb	r2, [r3, #2]
 800194c:	4b31      	ldr	r3, [pc, #196]	; (8001a14 <answer2CPU+0x394>)
 800194e:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	78da      	ldrb	r2, [r3, #3]
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <answer2CPU+0x398>)
 8001956:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001958:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <answer2CPU+0x368>)
 800195a:	2215      	movs	r2, #21
 800195c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800195e:	4b27      	ldr	r3, [pc, #156]	; (80019fc <answer2CPU+0x37c>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b16      	cmp	r3, #22
 800196a:	d10d      	bne.n	8001988 <answer2CPU+0x308>
					volume = cmd[3];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	78da      	ldrb	r2, [r3, #3]
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <answer2CPU+0x394>)
 8001972:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	791a      	ldrb	r2, [r3, #4]
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <answer2CPU+0x398>)
 800197a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 800197c:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <answer2CPU+0x368>)
 800197e:	2216      	movs	r2, #22
 8001980:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <answer2CPU+0x37c>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d000      	beq.n	8001992 <answer2CPU+0x312>
 8001990:	e09c      	b.n	8001acc <answer2CPU+0x44c>
				myLength = 0x14; //20 bytes length answer
 8001992:	2109      	movs	r1, #9
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2214      	movs	r2, #20
 8001998:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b02      	subs	r3, #2
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <answer2CPU+0x370>)
 80019a6:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019a8:	230e      	movs	r3, #14
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
 80019b0:	e010      	b.n	80019d4 <answer2CPU+0x354>
					ans[i + 2] = PCB_type[i];
 80019b2:	200e      	movs	r0, #14
 80019b4:	183b      	adds	r3, r7, r0
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <answer2CPU+0x39c>)
 80019ba:	5cd1      	ldrb	r1, [r2, r3]
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	1c9a      	adds	r2, r3, #2
 80019c2:	b289      	uxth	r1, r1
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <answer2CPU+0x370>)
 80019c6:	0052      	lsls	r2, r2, #1
 80019c8:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	183b      	adds	r3, r7, r0
 80019d0:	3201      	adds	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	220e      	movs	r2, #14
 80019d6:	18bb      	adds	r3, r7, r2
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d9e9      	bls.n	80019b2 <answer2CPU+0x332>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80019de:	18bb      	adds	r3, r7, r2
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e02e      	b.n	8001a44 <answer2CPU+0x3c4>
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	2000345a 	.word	0x2000345a
 80019ec:	50000800 	.word	0x50000800
 80019f0:	2000349c 	.word	0x2000349c
 80019f4:	40004400 	.word	0x40004400
 80019f8:	20003459 	.word	0x20003459
 80019fc:	200034b0 	.word	0x200034b0
 8001a00:	200032f0 	.word	0x200032f0
 8001a04:	20003384 	.word	0x20003384
 8001a08:	20003499 	.word	0x20003499
 8001a0c:	200031a0 	.word	0x200031a0
 8001a10:	20003519 	.word	0x20003519
 8001a14:	200032ed 	.word	0x200032ed
 8001a18:	200033f0 	.word	0x200033f0
 8001a1c:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001a20:	200e      	movs	r0, #14
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	781a      	ldrb	r2, [r3, #0]
 8001a26:	4bdb      	ldr	r3, [pc, #876]	; (8001d94 <answer2CPU+0x714>)
 8001a28:	0052      	lsls	r2, r2, #1
 8001a2a:	5ad3      	ldrh	r3, [r2, r3]
 8001a2c:	b2d9      	uxtb	r1, r3
 8001a2e:	220d      	movs	r2, #13
 8001a30:	18bb      	adds	r3, r7, r2
 8001a32:	18ba      	adds	r2, r7, r2
 8001a34:	7812      	ldrb	r2, [r2, #0]
 8001a36:	188a      	adds	r2, r1, r2
 8001a38:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	183b      	adds	r3, r7, r0
 8001a40:	3201      	adds	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	230e      	movs	r3, #14
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	2009      	movs	r0, #9
 8001a4c:	183b      	adds	r3, r7, r0
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dbe4      	blt.n	8001a20 <answer2CPU+0x3a0>
				}
				myCS = 0 - myCS;
 8001a56:	210d      	movs	r1, #13
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	187a      	adds	r2, r7, r1
 8001a5c:	7812      	ldrb	r2, [r2, #0]
 8001a5e:	4252      	negs	r2, r2
 8001a60:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a62:	183b      	adds	r3, r7, r0
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	1e5a      	subs	r2, r3, #1
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	4bc9      	ldr	r3, [pc, #804]	; (8001d94 <answer2CPU+0x714>)
 8001a70:	0052      	lsls	r2, r2, #1
 8001a72:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	4bc8      	ldr	r3, [pc, #800]	; (8001d98 <answer2CPU+0x718>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2280      	movs	r2, #128	; 0x80
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0fa      	beq.n	8001a76 <answer2CPU+0x3f6>
				USART2->TDR = ans[0]|0x0100;
 8001a80:	4bc4      	ldr	r3, [pc, #784]	; (8001d94 <answer2CPU+0x714>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	2280      	movs	r2, #128	; 0x80
 8001a86:	0052      	lsls	r2, r2, #1
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4bc2      	ldr	r3, [pc, #776]	; (8001d98 <answer2CPU+0x718>)
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a90:	e014      	b.n	8001abc <answer2CPU+0x43c>
				  {
				    i++;
 8001a92:	210e      	movs	r1, #14
 8001a94:	187b      	adds	r3, r7, r1
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	3201      	adds	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	4bbd      	ldr	r3, [pc, #756]	; (8001d98 <answer2CPU+0x718>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d0fa      	beq.n	8001aa0 <answer2CPU+0x420>
				    USART2->TDR = (uint8_t)ans[i];
 8001aaa:	230e      	movs	r3, #14
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	4bb8      	ldr	r3, [pc, #736]	; (8001d94 <answer2CPU+0x714>)
 8001ab2:	0052      	lsls	r2, r2, #1
 8001ab4:	5ad3      	ldrh	r3, [r2, r3]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4bb7      	ldr	r3, [pc, #732]	; (8001d98 <answer2CPU+0x718>)
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001abc:	230e      	movs	r3, #14
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	781a      	ldrb	r2, [r3, #0]
 8001ac2:	4bb4      	ldr	r3, [pc, #720]	; (8001d94 <answer2CPU+0x714>)
 8001ac4:	0052      	lsls	r2, r2, #1
 8001ac6:	5ad3      	ldrh	r3, [r2, r3]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1e2      	bne.n	8001a92 <answer2CPU+0x412>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d000      	beq.n	8001ad6 <answer2CPU+0x456>
 8001ad4:	e07f      	b.n	8001bd6 <answer2CPU+0x556>
				myLength = 0x0B; //19 bytes length answer
 8001ad6:	2109      	movs	r1, #9
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	220b      	movs	r2, #11
 8001adc:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b02      	subs	r3, #2
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	4baa      	ldr	r3, [pc, #680]	; (8001d94 <answer2CPU+0x714>)
 8001aea:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001aec:	230e      	movs	r3, #14
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e010      	b.n	8001b18 <answer2CPU+0x498>
					ans[i + 2] = PCB_rev[i];
 8001af6:	200e      	movs	r0, #14
 8001af8:	183b      	adds	r3, r7, r0
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4aa7      	ldr	r2, [pc, #668]	; (8001d9c <answer2CPU+0x71c>)
 8001afe:	5cd1      	ldrb	r1, [r2, r3]
 8001b00:	183b      	adds	r3, r7, r0
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	1c9a      	adds	r2, r3, #2
 8001b06:	b289      	uxth	r1, r1
 8001b08:	4ba2      	ldr	r3, [pc, #648]	; (8001d94 <answer2CPU+0x714>)
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001b0e:	183b      	adds	r3, r7, r0
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	183b      	adds	r3, r7, r0
 8001b14:	3201      	adds	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
 8001b18:	220e      	movs	r2, #14
 8001b1a:	18bb      	adds	r3, r7, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d9e9      	bls.n	8001af6 <answer2CPU+0x476>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b22:	18bb      	adds	r3, r7, r2
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e011      	b.n	8001b4e <answer2CPU+0x4ce>
					myCS = myCS + ans[i];
 8001b2a:	200e      	movs	r0, #14
 8001b2c:	183b      	adds	r3, r7, r0
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <answer2CPU+0x714>)
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	5ad3      	ldrh	r3, [r2, r3]
 8001b36:	b2d9      	uxtb	r1, r3
 8001b38:	220d      	movs	r2, #13
 8001b3a:	18bb      	adds	r3, r7, r2
 8001b3c:	18ba      	adds	r2, r7, r2
 8001b3e:	7812      	ldrb	r2, [r2, #0]
 8001b40:	188a      	adds	r2, r1, r2
 8001b42:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b44:	183b      	adds	r3, r7, r0
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	3201      	adds	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	230e      	movs	r3, #14
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	2009      	movs	r0, #9
 8001b56:	183b      	adds	r3, r7, r0
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbe4      	blt.n	8001b2a <answer2CPU+0x4aa>
				}
				myCS = 0 - myCS;
 8001b60:	210d      	movs	r1, #13
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	187a      	adds	r2, r7, r1
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4252      	negs	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b6c:	183b      	adds	r3, r7, r0
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	187b      	adds	r3, r7, r1
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b299      	uxth	r1, r3
 8001b78:	4b86      	ldr	r3, [pc, #536]	; (8001d94 <answer2CPU+0x714>)
 8001b7a:	0052      	lsls	r2, r2, #1
 8001b7c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	4b85      	ldr	r3, [pc, #532]	; (8001d98 <answer2CPU+0x718>)
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	4013      	ands	r3, r2
 8001b88:	d0fa      	beq.n	8001b80 <answer2CPU+0x500>
				USART2->TDR = ans[0]|0x0100;
 8001b8a:	4b82      	ldr	r3, [pc, #520]	; (8001d94 <answer2CPU+0x714>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	0052      	lsls	r2, r2, #1
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b80      	ldr	r3, [pc, #512]	; (8001d98 <answer2CPU+0x718>)
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b9a:	e014      	b.n	8001bc6 <answer2CPU+0x546>
					  {
					    i++;
 8001b9c:	210e      	movs	r1, #14
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	3201      	adds	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <answer2CPU+0x718>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0fa      	beq.n	8001baa <answer2CPU+0x52a>
					    USART2->TDR = (uint8_t)ans[i];
 8001bb4:	230e      	movs	r3, #14
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	781a      	ldrb	r2, [r3, #0]
 8001bba:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <answer2CPU+0x714>)
 8001bbc:	0052      	lsls	r2, r2, #1
 8001bbe:	5ad3      	ldrh	r3, [r2, r3]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <answer2CPU+0x718>)
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001bc6:	230e      	movs	r3, #14
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781a      	ldrb	r2, [r3, #0]
 8001bcc:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <answer2CPU+0x714>)
 8001bce:	0052      	lsls	r2, r2, #1
 8001bd0:	5ad3      	ldrh	r3, [r2, r3]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1e2      	bne.n	8001b9c <answer2CPU+0x51c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d000      	beq.n	8001be0 <answer2CPU+0x560>
 8001bde:	e07f      	b.n	8001ce0 <answer2CPU+0x660>
				myLength = 0x13; //19 bytes length answer
 8001be0:	2109      	movs	r1, #9
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2213      	movs	r2, #19
 8001be6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b02      	subs	r3, #2
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <answer2CPU+0x714>)
 8001bf4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001bf6:	230e      	movs	r3, #14
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
 8001bfe:	e010      	b.n	8001c22 <answer2CPU+0x5a2>
					ans[i + 2] = EmitterSN[i];
 8001c00:	200e      	movs	r0, #14
 8001c02:	183b      	adds	r3, r7, r0
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <answer2CPU+0x720>)
 8001c08:	5cd1      	ldrb	r1, [r2, r3]
 8001c0a:	183b      	adds	r3, r7, r0
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	1c9a      	adds	r2, r3, #2
 8001c10:	b289      	uxth	r1, r1
 8001c12:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <answer2CPU+0x714>)
 8001c14:	0052      	lsls	r2, r2, #1
 8001c16:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001c18:	183b      	adds	r3, r7, r0
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	183b      	adds	r3, r7, r0
 8001c1e:	3201      	adds	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	220e      	movs	r2, #14
 8001c24:	18bb      	adds	r3, r7, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d9e9      	bls.n	8001c00 <answer2CPU+0x580>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c2c:	18bb      	adds	r3, r7, r2
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
 8001c32:	e011      	b.n	8001c58 <answer2CPU+0x5d8>
					myCS = myCS + ans[i];
 8001c34:	200e      	movs	r0, #14
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <answer2CPU+0x714>)
 8001c3c:	0052      	lsls	r2, r2, #1
 8001c3e:	5ad3      	ldrh	r3, [r2, r3]
 8001c40:	b2d9      	uxtb	r1, r3
 8001c42:	220d      	movs	r2, #13
 8001c44:	18bb      	adds	r3, r7, r2
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	188a      	adds	r2, r1, r2
 8001c4c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	3201      	adds	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	230e      	movs	r3, #14
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	2009      	movs	r0, #9
 8001c60:	183b      	adds	r3, r7, r0
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	429a      	cmp	r2, r3
 8001c68:	dbe4      	blt.n	8001c34 <answer2CPU+0x5b4>
				}
				myCS = 0 - myCS;
 8001c6a:	210d      	movs	r1, #13
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	187a      	adds	r2, r7, r1
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	4252      	negs	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	1e5a      	subs	r2, r3, #1
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b299      	uxth	r1, r3
 8001c82:	4b44      	ldr	r3, [pc, #272]	; (8001d94 <answer2CPU+0x714>)
 8001c84:	0052      	lsls	r2, r2, #1
 8001c86:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <answer2CPU+0x718>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	4013      	ands	r3, r2
 8001c92:	d0fa      	beq.n	8001c8a <answer2CPU+0x60a>
				USART2->TDR = ans[0]|0x0100;
 8001c94:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <answer2CPU+0x714>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	0052      	lsls	r2, r2, #1
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <answer2CPU+0x718>)
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ca4:	e014      	b.n	8001cd0 <answer2CPU+0x650>
				  {
				    i++;
 8001ca6:	210e      	movs	r1, #14
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	3201      	adds	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <answer2CPU+0x718>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0fa      	beq.n	8001cb4 <answer2CPU+0x634>
				    	USART2->TDR = (uint8_t)ans[i];
 8001cbe:	230e      	movs	r3, #14
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <answer2CPU+0x714>)
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	5ad3      	ldrh	r3, [r2, r3]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b32      	ldr	r3, [pc, #200]	; (8001d98 <answer2CPU+0x718>)
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cd0:	230e      	movs	r3, #14
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	4b2f      	ldr	r3, [pc, #188]	; (8001d94 <answer2CPU+0x714>)
 8001cd8:	0052      	lsls	r2, r2, #1
 8001cda:	5ad3      	ldrh	r3, [r2, r3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e2      	bne.n	8001ca6 <answer2CPU+0x626>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d000      	beq.n	8001cea <answer2CPU+0x66a>
 8001ce8:	e07b      	b.n	8001de2 <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001cea:	2109      	movs	r1, #9
 8001cec:	187b      	adds	r3, r7, r1
 8001cee:	2204      	movs	r2, #4
 8001cf0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	3b02      	subs	r3, #2
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <answer2CPU+0x714>)
 8001cfe:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <answer2CPU+0x724>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <answer2CPU+0x714>)
 8001d08:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001d0a:	230d      	movs	r3, #13
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <answer2CPU+0x714>)
 8001d14:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001d16:	230e      	movs	r3, #14
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	e011      	b.n	8001d44 <answer2CPU+0x6c4>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001d20:	200e      	movs	r0, #14
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <answer2CPU+0x714>)
 8001d28:	0052      	lsls	r2, r2, #1
 8001d2a:	5ad3      	ldrh	r3, [r2, r3]
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	220d      	movs	r2, #13
 8001d30:	18bb      	adds	r3, r7, r2
 8001d32:	18ba      	adds	r2, r7, r2
 8001d34:	7812      	ldrb	r2, [r2, #0]
 8001d36:	188a      	adds	r2, r1, r2
 8001d38:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001d3a:	183b      	adds	r3, r7, r0
 8001d3c:	781a      	ldrb	r2, [r3, #0]
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	3201      	adds	r2, #1
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	230e      	movs	r3, #14
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	2009      	movs	r0, #9
 8001d4c:	183b      	adds	r3, r7, r0
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbe4      	blt.n	8001d20 <answer2CPU+0x6a0>
				}
				myCS = 0 - myCS;
 8001d56:	210d      	movs	r1, #13
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	187a      	adds	r2, r7, r1
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	4252      	negs	r2, r2
 8001d60:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <answer2CPU+0x714>)
 8001d70:	0052      	lsls	r2, r2, #1
 8001d72:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <answer2CPU+0x718>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0fa      	beq.n	8001d76 <answer2CPU+0x6f6>
					USART2->TDR = ans[0]|0x0100;
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <answer2CPU+0x714>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	0052      	lsls	r2, r2, #1
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <answer2CPU+0x718>)
 8001d8e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d90:	e01f      	b.n	8001dd2 <answer2CPU+0x752>
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	2000349c 	.word	0x2000349c
 8001d98:	40004400 	.word	0x40004400
 8001d9c:	20003114 	.word	0x20003114
 8001da0:	20003120 	.word	0x20003120
 8001da4:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001da8:	210e      	movs	r1, #14
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	3201      	adds	r2, #1
 8001db2:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	4b4e      	ldr	r3, [pc, #312]	; (8001ef0 <answer2CPU+0x870>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0fa      	beq.n	8001db6 <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001dc0:	230e      	movs	r3, #14
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	4b4b      	ldr	r3, [pc, #300]	; (8001ef4 <answer2CPU+0x874>)
 8001dc8:	0052      	lsls	r2, r2, #1
 8001dca:	5ad3      	ldrh	r3, [r2, r3]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <answer2CPU+0x870>)
 8001dd0:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001dd2:	230e      	movs	r3, #14
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <answer2CPU+0x874>)
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	5ad3      	ldrh	r3, [r2, r3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e2      	bne.n	8001da8 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d000      	beq.n	8001dec <answer2CPU+0x76c>
 8001dea:	e076      	b.n	8001eda <answer2CPU+0x85a>
				myLength = 0x04; //4 bytes length answer
 8001dec:	2109      	movs	r1, #9
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2204      	movs	r2, #4
 8001df2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	3b02      	subs	r3, #2
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <answer2CPU+0x874>)
 8001e00:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3302      	adds	r3, #2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	001a      	movs	r2, r3
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <answer2CPU+0x878>)
 8001e0c:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001e0e:	4b3b      	ldr	r3, [pc, #236]	; (8001efc <answer2CPU+0x87c>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <answer2CPU+0x874>)
 8001e16:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001e18:	230d      	movs	r3, #13
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <answer2CPU+0x874>)
 8001e22:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001e24:	230e      	movs	r3, #14
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	e011      	b.n	8001e52 <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001e2e:	200e      	movs	r0, #14
 8001e30:	183b      	adds	r3, r7, r0
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <answer2CPU+0x874>)
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	5ad3      	ldrh	r3, [r2, r3]
 8001e3a:	b2d9      	uxtb	r1, r3
 8001e3c:	220d      	movs	r2, #13
 8001e3e:	18bb      	adds	r3, r7, r2
 8001e40:	18ba      	adds	r2, r7, r2
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	188a      	adds	r2, r1, r2
 8001e46:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001e48:	183b      	adds	r3, r7, r0
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	3201      	adds	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
 8001e52:	230e      	movs	r3, #14
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	2009      	movs	r0, #9
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbe4      	blt.n	8001e2e <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001e64:	210d      	movs	r1, #13
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	187a      	adds	r2, r7, r1
 8001e6a:	7812      	ldrb	r2, [r2, #0]
 8001e6c:	4252      	negs	r2, r2
 8001e6e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b299      	uxth	r1, r3
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <answer2CPU+0x874>)
 8001e7e:	0052      	lsls	r2, r2, #1
 8001e80:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <answer2CPU+0x870>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0fa      	beq.n	8001e84 <answer2CPU+0x804>
				USART2->TDR = ans[0]|0x0100;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <answer2CPU+0x874>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	2280      	movs	r2, #128	; 0x80
 8001e94:	0052      	lsls	r2, r2, #1
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <answer2CPU+0x870>)
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e9e:	e014      	b.n	8001eca <answer2CPU+0x84a>
				{
				  i++;
 8001ea0:	210e      	movs	r1, #14
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <answer2CPU+0x870>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d0fa      	beq.n	8001eae <answer2CPU+0x82e>
				  USART2->TDR = (uint8_t)ans[i];
 8001eb8:	230e      	movs	r3, #14
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781a      	ldrb	r2, [r3, #0]
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <answer2CPU+0x874>)
 8001ec0:	0052      	lsls	r2, r2, #1
 8001ec2:	5ad3      	ldrh	r3, [r2, r3]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <answer2CPU+0x870>)
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001eca:	230e      	movs	r3, #14
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <answer2CPU+0x874>)
 8001ed2:	0052      	lsls	r2, r2, #1
 8001ed4:	5ad3      	ldrh	r3, [r2, r3]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e2      	bne.n	8001ea0 <answer2CPU+0x820>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <answer2CPU+0x870>)
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <answer2CPU+0x870>)
 8001ee0:	2108      	movs	r1, #8
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	621a      	str	r2, [r3, #32]
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b004      	add	sp, #16
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40004400 	.word	0x40004400
 8001ef4:	2000349c 	.word	0x2000349c
 8001ef8:	200033f8 	.word	0x200033f8
 8001efc:	200032ee 	.word	0x200032ee

08001f00 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001f06:	2001      	movs	r0, #1
 8001f08:	f001 f908 	bl	800311c <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f12:	4928      	ldr	r1, [pc, #160]	; (8001fb4 <MEM_Reset+0xb4>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	2266      	movs	r2, #102	; 0x66
 8001f1c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f1e:	1df9      	adds	r1, r7, #7
 8001f20:	4825      	ldr	r0, [pc, #148]	; (8001fb8 <MEM_Reset+0xb8>)
 8001f22:	2305      	movs	r3, #5
 8001f24:	2201      	movs	r2, #1
 8001f26:	f004 fc71 	bl	800680c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f2a:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	0209      	lsls	r1, r1, #8
 8001f34:	430a      	orrs	r2, r1
 8001f36:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001f38:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f3a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f3c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001f3e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f40:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f42:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f46:	695a      	ldr	r2, [r3, #20]
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f4a:	491a      	ldr	r1, [pc, #104]	; (8001fb4 <MEM_Reset+0xb4>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001f50:	1dfb      	adds	r3, r7, #7
 8001f52:	2299      	movs	r2, #153	; 0x99
 8001f54:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001f56:	1df9      	adds	r1, r7, #7
 8001f58:	4817      	ldr	r0, [pc, #92]	; (8001fb8 <MEM_Reset+0xb8>)
 8001f5a:	2305      	movs	r3, #5
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f004 fc55 	bl	800680c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0209      	lsls	r1, r1, #8
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f70:	2001      	movs	r0, #1
 8001f72:	f001 f8d3 	bl	800311c <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	22b7      	movs	r2, #183	; 0xb7
 8001f7a:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f7e:	695a      	ldr	r2, [r3, #20]
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f82:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <MEM_Reset+0xb4>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f88:	1df9      	adds	r1, r7, #7
 8001f8a:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <MEM_Reset+0xb8>)
 8001f8c:	2305      	movs	r3, #5
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f004 fc3c 	bl	800680c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <MEM_Reset+0xb0>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0209      	lsls	r1, r1, #8
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	f001 f8ba 	bl	800311c <HAL_Delay>
	}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	50000800 	.word	0x50000800
 8001fb4:	ffff7fff 	.word	0xffff7fff
 8001fb8:	200031b0 	.word	0x200031b0

08001fbc <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	4c41      	ldr	r4, [pc, #260]	; (80020c4 <weoShowFullScreenDMA+0x108>)
 8001fc0:	44a5      	add	sp, r4
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	4b40      	ldr	r3, [pc, #256]	; (80020c8 <weoShowFullScreenDMA+0x10c>)
 8001fc8:	4940      	ldr	r1, [pc, #256]	; (80020cc <weoShowFullScreenDMA+0x110>)
 8001fca:	468c      	mov	ip, r1
 8001fcc:	44bc      	add	ip, r7
 8001fce:	4463      	add	r3, ip
 8001fd0:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8001fd2:	237f      	movs	r3, #127	; 0x7f
 8001fd4:	227f      	movs	r2, #127	; 0x7f
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fac9 	bl	8001570 <weoDrawRectangleInit>

		len=8192;
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <weoShowFullScreenDMA+0x114>)
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	0192      	lsls	r2, r2, #6
 8001fe4:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8001fe6:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <weoShowFullScreenDMA+0x114>)
 8001fe8:	881a      	ldrh	r2, [r3, #0]
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <weoShowFullScreenDMA+0x118>)
 8001fec:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001fee:	483a      	ldr	r0, [pc, #232]	; (80020d8 <weoShowFullScreenDMA+0x11c>)
 8001ff0:	183b      	adds	r3, r7, r0
 8001ff2:	2213      	movs	r2, #19
 8001ff4:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <weoShowFullScreenDMA+0x10c>)
 8001ff8:	4a34      	ldr	r2, [pc, #208]	; (80020cc <weoShowFullScreenDMA+0x110>)
 8001ffa:	4694      	mov	ip, r2
 8001ffc:	44bc      	add	ip, r7
 8001ffe:	4463      	add	r3, ip
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	035b      	lsls	r3, r3, #13
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <weoShowFullScreenDMA+0x120>)
 8002006:	187a      	adds	r2, r7, r1
 8002008:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b33      	ldr	r3, [pc, #204]	; (80020e0 <weoShowFullScreenDMA+0x124>)
 8002012:	4c2e      	ldr	r4, [pc, #184]	; (80020cc <weoShowFullScreenDMA+0x110>)
 8002014:	46a4      	mov	ip, r4
 8002016:	44bc      	add	ip, r7
 8002018:	4463      	add	r3, ip
 800201a:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	b2da      	uxtb	r2, r3
 8002024:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <weoShowFullScreenDMA+0x124>)
 8002026:	4c29      	ldr	r4, [pc, #164]	; (80020cc <weoShowFullScreenDMA+0x110>)
 8002028:	46a4      	mov	ip, r4
 800202a:	44bc      	add	ip, r7
 800202c:	4463      	add	r3, ip
 800202e:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002030:	187b      	adds	r3, r7, r1
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b29      	ldr	r3, [pc, #164]	; (80020e0 <weoShowFullScreenDMA+0x124>)
 800203a:	4c24      	ldr	r4, [pc, #144]	; (80020cc <weoShowFullScreenDMA+0x110>)
 800203c:	46a4      	mov	ip, r4
 800203e:	44bc      	add	ip, r7
 8002040:	4463      	add	r3, ip
 8002042:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e1b      	lsrs	r3, r3, #24
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <weoShowFullScreenDMA+0x124>)
 800204e:	491f      	ldr	r1, [pc, #124]	; (80020cc <weoShowFullScreenDMA+0x110>)
 8002050:	468c      	mov	ip, r1
 8002052:	44bc      	add	ip, r7
 8002054:	4463      	add	r3, ip
 8002056:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <weoShowFullScreenDMA+0x128>)
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <weoShowFullScreenDMA+0x128>)
 800205e:	4922      	ldr	r1, [pc, #136]	; (80020e8 <weoShowFullScreenDMA+0x12c>)
 8002060:	400a      	ands	r2, r1
 8002062:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002064:	1839      	adds	r1, r7, r0
 8002066:	4821      	ldr	r0, [pc, #132]	; (80020ec <weoShowFullScreenDMA+0x130>)
 8002068:	2332      	movs	r3, #50	; 0x32
 800206a:	2201      	movs	r2, #1
 800206c:	f004 fbce 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002070:	2408      	movs	r4, #8
 8002072:	193b      	adds	r3, r7, r4
 8002074:	1cd9      	adds	r1, r3, #3
 8002076:	481d      	ldr	r0, [pc, #116]	; (80020ec <weoShowFullScreenDMA+0x130>)
 8002078:	2332      	movs	r3, #50	; 0x32
 800207a:	2201      	movs	r2, #1
 800207c:	f004 fbc6 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002080:	193b      	adds	r3, r7, r4
 8002082:	1c99      	adds	r1, r3, #2
 8002084:	4819      	ldr	r0, [pc, #100]	; (80020ec <weoShowFullScreenDMA+0x130>)
 8002086:	2332      	movs	r3, #50	; 0x32
 8002088:	2201      	movs	r2, #1
 800208a:	f004 fbbf 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800208e:	193b      	adds	r3, r7, r4
 8002090:	1c59      	adds	r1, r3, #1
 8002092:	4816      	ldr	r0, [pc, #88]	; (80020ec <weoShowFullScreenDMA+0x130>)
 8002094:	2332      	movs	r3, #50	; 0x32
 8002096:	2201      	movs	r2, #1
 8002098:	f004 fbb8 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800209c:	1939      	adds	r1, r7, r4
 800209e:	4813      	ldr	r0, [pc, #76]	; (80020ec <weoShowFullScreenDMA+0x130>)
 80020a0:	2332      	movs	r3, #50	; 0x32
 80020a2:	2201      	movs	r2, #1
 80020a4:	f004 fbb2 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <weoShowFullScreenDMA+0x114>)
 80020aa:	881a      	ldrh	r2, [r3, #0]
 80020ac:	4910      	ldr	r1, [pc, #64]	; (80020f0 <weoShowFullScreenDMA+0x134>)
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <weoShowFullScreenDMA+0x130>)
 80020b0:	0018      	movs	r0, r3
 80020b2:	f005 f821 	bl	80070f8 <HAL_SPI_Receive_DMA>
	}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <weoShowFullScreenDMA+0x138>)
 80020be:	449d      	add	sp, r3
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	ffffdfe4 	.word	0xffffdfe4
 80020c8:	ffffdfef 	.word	0xffffdfef
 80020cc:	00002018 	.word	0x00002018
 80020d0:	200035d8 	.word	0x200035d8
 80020d4:	20003132 	.word	0x20003132
 80020d8:	00002013 	.word	0x00002013
 80020dc:	00002014 	.word	0x00002014
 80020e0:	ffffdff0 	.word	0xffffdff0
 80020e4:	50000800 	.word	0x50000800
 80020e8:	ffff7fff 	.word	0xffff7fff
 80020ec:	200031b0 	.word	0x200031b0
 80020f0:	200035e0 	.word	0x200035e0
 80020f4:	0000201c 	.word	0x0000201c

080020f8 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	4caf      	ldr	r4, [pc, #700]	; (80023b8 <weoShowSmallImage+0x2c0>)
 80020fc:	44a5      	add	sp, r4
 80020fe:	af02      	add	r7, sp, #8
 8002100:	0004      	movs	r4, r0
 8002102:	0008      	movs	r0, r1
 8002104:	0011      	movs	r1, r2
 8002106:	4bad      	ldr	r3, [pc, #692]	; (80023bc <weoShowSmallImage+0x2c4>)
 8002108:	4aad      	ldr	r2, [pc, #692]	; (80023c0 <weoShowSmallImage+0x2c8>)
 800210a:	4694      	mov	ip, r2
 800210c:	44bc      	add	ip, r7
 800210e:	4463      	add	r3, ip
 8002110:	1c22      	adds	r2, r4, #0
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	4bab      	ldr	r3, [pc, #684]	; (80023c4 <weoShowSmallImage+0x2cc>)
 8002116:	4aaa      	ldr	r2, [pc, #680]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002118:	4694      	mov	ip, r2
 800211a:	44bc      	add	ip, r7
 800211c:	4463      	add	r3, ip
 800211e:	1c02      	adds	r2, r0, #0
 8002120:	701a      	strb	r2, [r3, #0]
 8002122:	4ba9      	ldr	r3, [pc, #676]	; (80023c8 <weoShowSmallImage+0x2d0>)
 8002124:	4aa6      	ldr	r2, [pc, #664]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002126:	4694      	mov	ip, r2
 8002128:	44bc      	add	ip, r7
 800212a:	4463      	add	r3, ip
 800212c:	1c0a      	adds	r2, r1, #0
 800212e:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 8002130:	2300      	movs	r3, #0
 8002132:	49a6      	ldr	r1, [pc, #664]	; (80023cc <weoShowSmallImage+0x2d4>)
 8002134:	187a      	adds	r2, r7, r1
 8002136:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002138:	48a5      	ldr	r0, [pc, #660]	; (80023d0 <weoShowSmallImage+0x2d8>)
 800213a:	183b      	adds	r3, r7, r0
 800213c:	2213      	movs	r2, #19
 800213e:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 8002140:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <weoShowSmallImage+0x2c4>)
 8002142:	4a9f      	ldr	r2, [pc, #636]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002144:	4694      	mov	ip, r2
 8002146:	44bc      	add	ip, r7
 8002148:	4463      	add	r3, ip
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	331e      	adds	r3, #30
 800214e:	035b      	lsls	r3, r3, #13
 8002150:	187a      	adds	r2, r7, r1
 8002152:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b9e      	ldr	r3, [pc, #632]	; (80023d4 <weoShowSmallImage+0x2dc>)
 800215c:	4c98      	ldr	r4, [pc, #608]	; (80023c0 <weoShowSmallImage+0x2c8>)
 800215e:	46a4      	mov	ip, r4
 8002160:	44bc      	add	ip, r7
 8002162:	4463      	add	r3, ip
 8002164:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002166:	187b      	adds	r3, r7, r1
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b99      	ldr	r3, [pc, #612]	; (80023d4 <weoShowSmallImage+0x2dc>)
 8002170:	4c93      	ldr	r4, [pc, #588]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002172:	46a4      	mov	ip, r4
 8002174:	44bc      	add	ip, r7
 8002176:	4463      	add	r3, ip
 8002178:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 800217a:	187b      	adds	r3, r7, r1
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0c1b      	lsrs	r3, r3, #16
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b94      	ldr	r3, [pc, #592]	; (80023d4 <weoShowSmallImage+0x2dc>)
 8002184:	4c8e      	ldr	r4, [pc, #568]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002186:	46a4      	mov	ip, r4
 8002188:	44bc      	add	ip, r7
 800218a:	4463      	add	r3, ip
 800218c:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800218e:	187b      	adds	r3, r7, r1
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	0e1b      	lsrs	r3, r3, #24
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <weoShowSmallImage+0x2dc>)
 8002198:	4989      	ldr	r1, [pc, #548]	; (80023c0 <weoShowSmallImage+0x2c8>)
 800219a:	468c      	mov	ip, r1
 800219c:	44bc      	add	ip, r7
 800219e:	4463      	add	r3, ip
 80021a0:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 80021a2:	4b8d      	ldr	r3, [pc, #564]	; (80023d8 <weoShowSmallImage+0x2e0>)
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	4b8c      	ldr	r3, [pc, #560]	; (80023d8 <weoShowSmallImage+0x2e0>)
 80021a8:	498c      	ldr	r1, [pc, #560]	; (80023dc <weoShowSmallImage+0x2e4>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 80021ae:	1839      	adds	r1, r7, r0
 80021b0:	488b      	ldr	r0, [pc, #556]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80021b2:	2332      	movs	r3, #50	; 0x32
 80021b4:	2201      	movs	r2, #1
 80021b6:	f004 fb29 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 80021ba:	240c      	movs	r4, #12
 80021bc:	193b      	adds	r3, r7, r4
 80021be:	1cd9      	adds	r1, r3, #3
 80021c0:	4887      	ldr	r0, [pc, #540]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80021c2:	2332      	movs	r3, #50	; 0x32
 80021c4:	2201      	movs	r2, #1
 80021c6:	f004 fb21 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	1c99      	adds	r1, r3, #2
 80021ce:	4884      	ldr	r0, [pc, #528]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80021d0:	2332      	movs	r3, #50	; 0x32
 80021d2:	2201      	movs	r2, #1
 80021d4:	f004 fb1a 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	1c59      	adds	r1, r3, #1
 80021dc:	4880      	ldr	r0, [pc, #512]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80021de:	2332      	movs	r3, #50	; 0x32
 80021e0:	2201      	movs	r2, #1
 80021e2:	f004 fb13 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80021e6:	1939      	adds	r1, r7, r4
 80021e8:	487d      	ldr	r0, [pc, #500]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80021ea:	2332      	movs	r3, #50	; 0x32
 80021ec:	2201      	movs	r2, #1
 80021ee:	f004 fb0d 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80021f2:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <weoShowSmallImage+0x2ec>)
 80021f4:	2210      	movs	r2, #16
 80021f6:	18b9      	adds	r1, r7, r2
 80021f8:	4879      	ldr	r0, [pc, #484]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80021fa:	2202      	movs	r2, #2
 80021fc:	f004 fc5e 	bl	8006abc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 8002200:	4b75      	ldr	r3, [pc, #468]	; (80023d8 <weoShowSmallImage+0x2e0>)
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <weoShowSmallImage+0x2e0>)
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0209      	lsls	r1, r1, #8
 800220a:	430a      	orrs	r2, r1
 800220c:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <weoShowSmallImage+0x2f0>)
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	4a76      	ldr	r2, [pc, #472]	; (80023ec <weoShowSmallImage+0x2f4>)
 8002214:	496a      	ldr	r1, [pc, #424]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002216:	468c      	mov	ip, r1
 8002218:	44bc      	add	ip, r7
 800221a:	4462      	add	r2, ip
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 8002220:	4973      	ldr	r1, [pc, #460]	; (80023f0 <weoShowSmallImage+0x2f8>)
 8002222:	187b      	adds	r3, r7, r1
 8002224:	4a71      	ldr	r2, [pc, #452]	; (80023ec <weoShowSmallImage+0x2f4>)
 8002226:	4866      	ldr	r0, [pc, #408]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002228:	4684      	mov	ip, r0
 800222a:	44bc      	add	ip, r7
 800222c:	4462      	add	r2, ip
 800222e:	7852      	ldrb	r2, [r2, #1]
 8002230:	701a      	strb	r2, [r3, #0]

		if((height % 2)!=0){
 8002232:	187b      	adds	r3, r7, r1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2201      	movs	r2, #1
 8002238:	4013      	ands	r3, r2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d004      	beq.n	800224a <weoShowSmallImage+0x152>
			height+=1;
 8002240:	187b      	adds	r3, r7, r1
 8002242:	187a      	adds	r2, r7, r1
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	3201      	adds	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
		}
//		height=height/2;
		len=width*height/2;
 800224a:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <weoShowSmallImage+0x2f0>)
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <weoShowSmallImage+0x2f8>)
 8002252:	18ba      	adds	r2, r7, r2
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	4353      	muls	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	da00      	bge.n	800225e <weoShowSmallImage+0x166>
 800225c:	3301      	adds	r3, #1
 800225e:	105b      	asrs	r3, r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <weoShowSmallImage+0x2fc>)
 8002264:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <weoShowSmallImage+0x2d4>)
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3302      	adds	r3, #2
 800226e:	4962      	ldr	r1, [pc, #392]	; (80023f8 <weoShowSmallImage+0x300>)
 8002270:	187a      	adds	r2, r7, r1
 8002272:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b56      	ldr	r3, [pc, #344]	; (80023d4 <weoShowSmallImage+0x2dc>)
 800227c:	4850      	ldr	r0, [pc, #320]	; (80023c0 <weoShowSmallImage+0x2c8>)
 800227e:	4684      	mov	ip, r0
 8002280:	44bc      	add	ip, r7
 8002282:	4463      	add	r3, ip
 8002284:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8002286:	187b      	adds	r3, r7, r1
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <weoShowSmallImage+0x2dc>)
 8002290:	484b      	ldr	r0, [pc, #300]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002292:	4684      	mov	ip, r0
 8002294:	44bc      	add	ip, r7
 8002296:	4463      	add	r3, ip
 8002298:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 800229a:	187b      	adds	r3, r7, r1
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <weoShowSmallImage+0x2dc>)
 80022a4:	4846      	ldr	r0, [pc, #280]	; (80023c0 <weoShowSmallImage+0x2c8>)
 80022a6:	4684      	mov	ip, r0
 80022a8:	44bc      	add	ip, r7
 80022aa:	4463      	add	r3, ip
 80022ac:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e1b      	lsrs	r3, r3, #24
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <weoShowSmallImage+0x2dc>)
 80022b8:	4941      	ldr	r1, [pc, #260]	; (80023c0 <weoShowSmallImage+0x2c8>)
 80022ba:	468c      	mov	ip, r1
 80022bc:	44bc      	add	ip, r7
 80022be:	4463      	add	r3, ip
 80022c0:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <weoShowSmallImage+0x304>)
 80022c4:	6a1a      	ldr	r2, [r3, #32]
 80022c6:	4b4d      	ldr	r3, [pc, #308]	; (80023fc <weoShowSmallImage+0x304>)
 80022c8:	2108      	movs	r1, #8
 80022ca:	430a      	orrs	r2, r1
 80022cc:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 80022ce:	4840      	ldr	r0, [pc, #256]	; (80023d0 <weoShowSmallImage+0x2d8>)
 80022d0:	183b      	adds	r3, r7, r0
 80022d2:	2213      	movs	r2, #19
 80022d4:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <weoShowSmallImage+0x2e0>)
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <weoShowSmallImage+0x2e0>)
 80022dc:	493f      	ldr	r1, [pc, #252]	; (80023dc <weoShowSmallImage+0x2e4>)
 80022de:	400a      	ands	r2, r1
 80022e0:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 80022e2:	1839      	adds	r1, r7, r0
 80022e4:	483e      	ldr	r0, [pc, #248]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80022e6:	2332      	movs	r3, #50	; 0x32
 80022e8:	2201      	movs	r2, #1
 80022ea:	f004 fa8f 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80022ee:	240c      	movs	r4, #12
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	1cd9      	adds	r1, r3, #3
 80022f4:	483a      	ldr	r0, [pc, #232]	; (80023e0 <weoShowSmallImage+0x2e8>)
 80022f6:	2332      	movs	r3, #50	; 0x32
 80022f8:	2201      	movs	r2, #1
 80022fa:	f004 fa87 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80022fe:	193b      	adds	r3, r7, r4
 8002300:	1c99      	adds	r1, r3, #2
 8002302:	4837      	ldr	r0, [pc, #220]	; (80023e0 <weoShowSmallImage+0x2e8>)
 8002304:	2332      	movs	r3, #50	; 0x32
 8002306:	2201      	movs	r2, #1
 8002308:	f004 fa80 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 800230c:	193b      	adds	r3, r7, r4
 800230e:	1c59      	adds	r1, r3, #1
 8002310:	4833      	ldr	r0, [pc, #204]	; (80023e0 <weoShowSmallImage+0x2e8>)
 8002312:	2332      	movs	r3, #50	; 0x32
 8002314:	2201      	movs	r2, #1
 8002316:	f004 fa79 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 800231a:	1939      	adds	r1, r7, r4
 800231c:	4830      	ldr	r0, [pc, #192]	; (80023e0 <weoShowSmallImage+0x2e8>)
 800231e:	2332      	movs	r3, #50	; 0x32
 8002320:	2201      	movs	r2, #1
 8002322:	f004 fa73 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002326:	4b33      	ldr	r3, [pc, #204]	; (80023f4 <weoShowSmallImage+0x2fc>)
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <weoShowSmallImage+0x2ec>)
 800232c:	2514      	movs	r5, #20
 800232e:	1979      	adds	r1, r7, r5
 8002330:	482b      	ldr	r0, [pc, #172]	; (80023e0 <weoShowSmallImage+0x2e8>)
 8002332:	f004 fbc3 	bl	8006abc <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <weoShowSmallImage+0x2e0>)
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <weoShowSmallImage+0x2e0>)
 800233c:	2180      	movs	r1, #128	; 0x80
 800233e:	0209      	lsls	r1, r1, #8
 8002340:	430a      	orrs	r2, r1
 8002342:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-1, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <weoShowSmallImage+0x2cc>)
 8002346:	491e      	ldr	r1, [pc, #120]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002348:	187a      	adds	r2, r7, r1
 800234a:	18d2      	adds	r2, r2, r3
 800234c:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <weoShowSmallImage+0x2f0>)
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	18d3      	adds	r3, r2, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b2dc      	uxtb	r4, r3
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <weoShowSmallImage+0x2d0>)
 800235e:	187a      	adds	r2, r7, r1
 8002360:	18d2      	adds	r2, r2, r3
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <weoShowSmallImage+0x2f8>)
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	18d3      	adds	r3, r2, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <weoShowSmallImage+0x2d0>)
 8002374:	4912      	ldr	r1, [pc, #72]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002376:	468c      	mov	ip, r1
 8002378:	44bc      	add	ip, r7
 800237a:	4463      	add	r3, ip
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <weoShowSmallImage+0x2cc>)
 8002380:	480f      	ldr	r0, [pc, #60]	; (80023c0 <weoShowSmallImage+0x2c8>)
 8002382:	4684      	mov	ip, r0
 8002384:	44bc      	add	ip, r7
 8002386:	4463      	add	r3, ip
 8002388:	7818      	ldrb	r0, [r3, #0]
 800238a:	197b      	adds	r3, r7, r5
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	23ff      	movs	r3, #255	; 0xff
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	0013      	movs	r3, r2
 8002394:	0022      	movs	r2, r4
 8002396:	f7ff f80f 	bl	80013b8 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <weoShowSmallImage+0x2e0>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <weoShowSmallImage+0x2e0>)
 80023a0:	2140      	movs	r1, #64	; 0x40
 80023a2:	430a      	orrs	r2, r1
 80023a4:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <weoShowSmallImage+0x308>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
	}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <weoShowSmallImage+0x2c8>)
 80023b4:	449d      	add	sp, r3
 80023b6:	bdb0      	pop	{r4, r5, r7, pc}
 80023b8:	ffffdfd0 	.word	0xffffdfd0
 80023bc:	ffffdfdf 	.word	0xffffdfdf
 80023c0:	00002028 	.word	0x00002028
 80023c4:	ffffdfde 	.word	0xffffdfde
 80023c8:	ffffdfdd 	.word	0xffffdfdd
 80023cc:	00002020 	.word	0x00002020
 80023d0:	00002017 	.word	0x00002017
 80023d4:	ffffdfe4 	.word	0xffffdfe4
 80023d8:	50000800 	.word	0x50000800
 80023dc:	ffff7fff 	.word	0xffff7fff
 80023e0:	200031b0 	.word	0x200031b0
 80023e4:	00001388 	.word	0x00001388
 80023e8:	0000201f 	.word	0x0000201f
 80023ec:	ffffdfe8 	.word	0xffffdfe8
 80023f0:	00002027 	.word	0x00002027
 80023f4:	200035d8 	.word	0x200035d8
 80023f8:	00002018 	.word	0x00002018
 80023fc:	40004400 	.word	0x40004400
 8002400:	2000345a 	.word	0x2000345a

08002404 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	4a29      	ldr	r2, [pc, #164]	; (80024b4 <MEM_GetID+0xb0>)
 800240e:	7812      	ldrb	r2, [r2, #0]
 8002410:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	229e      	movs	r2, #158	; 0x9e
 8002416:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <MEM_GetID+0xb4>)
 800241a:	695a      	ldr	r2, [r3, #20]
 800241c:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <MEM_GetID+0xb4>)
 800241e:	4927      	ldr	r1, [pc, #156]	; (80024bc <MEM_GetID+0xb8>)
 8002420:	400a      	ands	r2, r1
 8002422:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002424:	1df9      	adds	r1, r7, #7
 8002426:	4826      	ldr	r0, [pc, #152]	; (80024c0 <MEM_GetID+0xbc>)
 8002428:	2332      	movs	r3, #50	; 0x32
 800242a:	2201      	movs	r2, #1
 800242c:	f004 f9ee 	bl	800680c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002430:	23fa      	movs	r3, #250	; 0xfa
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1d39      	adds	r1, r7, #4
 8002436:	4822      	ldr	r0, [pc, #136]	; (80024c0 <MEM_GetID+0xbc>)
 8002438:	2201      	movs	r2, #1
 800243a:	f004 fb3f 	bl	8006abc <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	001a      	movs	r2, r3
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <MEM_GetID+0xc0>)
 8002446:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <MEM_GetID+0xc0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	021a      	lsls	r2, r3, #8
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MEM_GetID+0xc0>)
 8002450:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002452:	23fa      	movs	r3, #250	; 0xfa
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	1d39      	adds	r1, r7, #4
 8002458:	4819      	ldr	r0, [pc, #100]	; (80024c0 <MEM_GetID+0xbc>)
 800245a:	2201      	movs	r2, #1
 800245c:	f004 fb2e 	bl	8006abc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	001a      	movs	r2, r3
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MEM_GetID+0xc0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	18d2      	adds	r2, r2, r3
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MEM_GetID+0xc0>)
 800246e:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MEM_GetID+0xc0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	021a      	lsls	r2, r3, #8
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MEM_GetID+0xc0>)
 8002478:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800247a:	23fa      	movs	r3, #250	; 0xfa
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	1d39      	adds	r1, r7, #4
 8002480:	480f      	ldr	r0, [pc, #60]	; (80024c0 <MEM_GetID+0xbc>)
 8002482:	2201      	movs	r2, #1
 8002484:	f004 fb1a 	bl	8006abc <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	001a      	movs	r2, r3
 800248e:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <MEM_GetID+0xc0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	18d2      	adds	r2, r2, r3
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <MEM_GetID+0xc0>)
 8002496:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MEM_GetID+0xb4>)
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MEM_GetID+0xb4>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0209      	lsls	r1, r1, #8
 80024a2:	430a      	orrs	r2, r1
 80024a4:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <MEM_GetID+0xc0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
	}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	0800a7bc 	.word	0x0800a7bc
 80024b8:	50000800 	.word	0x50000800
 80024bc:	ffff7fff 	.word	0xffff7fff
 80024c0:	200031b0 	.word	0x200031b0
 80024c4:	2000315c 	.word	0x2000315c

080024c8 <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	0002      	movs	r2, r0
 80024d0:	1dfb      	adds	r3, r7, #7
 80024d2:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <cmdExecute+0xe0>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d05e      	beq.n	800259a <cmdExecute+0xd2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80024dc:	4b33      	ldr	r3, [pc, #204]	; (80025ac <cmdExecute+0xe4>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d15c      	bne.n	800259e <cmdExecute+0xd6>
		USART2->ICR|=USART_ICR_ORECF;
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <cmdExecute+0xe8>)
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <cmdExecute+0xe8>)
 80024ea:	2108      	movs	r1, #8
 80024ec:	430a      	orrs	r2, r1
 80024ee:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b11      	cmp	r3, #17
 80024f6:	d107      	bne.n	8002508 <cmdExecute+0x40>
			bf4me=0x11;	//set BF flag 4 me
 80024f8:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <cmdExecute+0xe4>)
 80024fa:	2211      	movs	r2, #17
 80024fc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <cmdExecute+0xec>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff fd5a 	bl	8001fbc <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b12      	cmp	r3, #18
 800250e:	d10d      	bne.n	800252c <cmdExecute+0x64>
			bf4me=0x12;	//set BF flag 4 me
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <cmdExecute+0xe4>)
 8002512:	2212      	movs	r2, #18
 8002514:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <cmdExecute+0xec>)
 8002518:	7818      	ldrb	r0, [r3, #0]
 800251a:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <cmdExecute+0xf0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	b2d9      	uxtb	r1, r3
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <cmdExecute+0xf4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	001a      	movs	r2, r3
 8002528:	f7ff fde6 	bl	80020f8 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 800252c:	1dfb      	adds	r3, r7, #7
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b13      	cmp	r3, #19
 8002532:	d10d      	bne.n	8002550 <cmdExecute+0x88>
			bf4me=0x13;	//set BF flag 4 me
 8002534:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <cmdExecute+0xe4>)
 8002536:	2213      	movs	r2, #19
 8002538:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <cmdExecute+0xf0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b2d8      	uxtb	r0, r3
 8002540:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <cmdExecute+0xf4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b2d9      	uxtb	r1, r3
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <cmdExecute+0xf8>)
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <cmdExecute+0xfc>)
 800254c:	f000 f83c 	bl	80025c8 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002550:	1dfb      	adds	r3, r7, #7
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b14      	cmp	r3, #20
 8002556:	d102      	bne.n	800255e <cmdExecute+0x96>
			bf4me=0x14;	//set BF flag 4 me
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <cmdExecute+0xe4>)
 800255a:	2214      	movs	r2, #20
 800255c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b15      	cmp	r3, #21
 8002564:	d108      	bne.n	8002578 <cmdExecute+0xb0>
			if(cmd[3]==0x00){
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <cmdExecute+0xe0>)
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <cmdExecute+0xaa>
				weoClear();
 800256e:	f7fe febf 	bl	80012f0 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 8002572:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <cmdExecute+0xe4>)
 8002574:	2215      	movs	r2, #21
 8002576:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 8002578:	1dfb      	adds	r3, r7, #7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b16      	cmp	r3, #22
 800257e:	d102      	bne.n	8002586 <cmdExecute+0xbe>
			bf4me=0x16;	//set BF flag 4 me
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <cmdExecute+0xe4>)
 8002582:	2216      	movs	r2, #22
 8002584:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002586:	1dfb      	adds	r3, r7, #7
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <cmdExecute+0xe8>)
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <cmdExecute+0xe8>)
 8002592:	2108      	movs	r1, #8
 8002594:	430a      	orrs	r2, r1
 8002596:	621a      	str	r2, [r3, #32]
 8002598:	e002      	b.n	80025a0 <cmdExecute+0xd8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	e000      	b.n	80025a0 <cmdExecute+0xd8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800259e:	46c0      	nop			; (mov r8, r8)
	}
 80025a0:	0018      	movs	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	b002      	add	sp, #8
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200055e0 	.word	0x200055e0
 80025ac:	200034b0 	.word	0x200034b0
 80025b0:	40004400 	.word	0x40004400
 80025b4:	20003459 	.word	0x20003459
 80025b8:	200032f0 	.word	0x200032f0
 80025bc:	20003384 	.word	0x20003384
 80025c0:	20003499 	.word	0x20003499
 80025c4:	200031a0 	.word	0x200031a0

080025c8 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b092      	sub	sp, #72	; 0x48
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	0004      	movs	r4, r0
 80025d0:	0008      	movs	r0, r1
 80025d2:	0011      	movs	r1, r2
 80025d4:	603b      	str	r3, [r7, #0]
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	1c22      	adds	r2, r4, #0
 80025da:	701a      	strb	r2, [r3, #0]
 80025dc:	1dbb      	adds	r3, r7, #6
 80025de:	1c02      	adds	r2, r0, #0
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	1d7b      	adds	r3, r7, #5
 80025e4:	1c0a      	adds	r2, r1, #0
 80025e6:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80025e8:	233e      	movs	r3, #62	; 0x3e
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	1dfa      	adds	r2, r7, #7
 80025ee:	7812      	ldrb	r2, [r2, #0]
 80025f0:	701a      	strb	r2, [r3, #0]

			len=49;
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <printASCIIarray+0x130>)
 80025f4:	2231      	movs	r2, #49	; 0x31
 80025f6:	801a      	strh	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80025f8:	233c      	movs	r3, #60	; 0x3c
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
 8002600:	e04f      	b.n	80026a2 <printASCIIarray+0xda>
				for(j=0;j<49;j++){
 8002602:	233f      	movs	r3, #63	; 0x3f
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e01b      	b.n	8002644 <printASCIIarray+0x7c>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 800260c:	233c      	movs	r3, #60	; 0x3c
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	18d3      	adds	r3, r2, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	001a      	movs	r2, r3
 800261a:	253f      	movs	r5, #63	; 0x3f
 800261c:	197b      	adds	r3, r7, r5
 800261e:	7818      	ldrb	r0, [r3, #0]
 8002620:	197b      	adds	r3, r7, r5
 8002622:	7819      	ldrb	r1, [r3, #0]
 8002624:	4c35      	ldr	r4, [pc, #212]	; (80026fc <printASCIIarray+0x134>)
 8002626:	0013      	movs	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	00da      	lsls	r2, r3, #3
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	18a3      	adds	r3, r4, r2
 8002632:	5c1a      	ldrb	r2, [r3, r0]
 8002634:	2308      	movs	r3, #8
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 800263a:	197b      	adds	r3, r7, r5
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	197b      	adds	r3, r7, r5
 8002640:	3201      	adds	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	233f      	movs	r3, #63	; 0x3f
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b30      	cmp	r3, #48	; 0x30
 800264c:	d9de      	bls.n	800260c <printASCIIarray+0x44>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <printASCIIarray+0x138>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	203e      	movs	r0, #62	; 0x3e
 8002654:	183b      	adds	r3, r7, r0
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	b2dc      	uxtb	r4, r3
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <printASCIIarray+0x13c>)
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	1dbb      	adds	r3, r7, #6
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	18d3      	adds	r3, r2, r3
 8002666:	b2da      	uxtb	r2, r3
 8002668:	1dbb      	adds	r3, r7, #6
 800266a:	7819      	ldrb	r1, [r3, #0]
 800266c:	0005      	movs	r5, r0
 800266e:	183b      	adds	r3, r7, r0
 8002670:	7818      	ldrb	r0, [r3, #0]
 8002672:	2308      	movs	r3, #8
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	23ff      	movs	r3, #255	; 0xff
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	0013      	movs	r3, r2
 800267e:	0022      	movs	r2, r4
 8002680:	f7fe fe9a 	bl	80013b8 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <printASCIIarray+0x138>)
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	197b      	adds	r3, r7, r5
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	18d3      	adds	r3, r2, r3
 800268e:	b2da      	uxtb	r2, r3
 8002690:	197b      	adds	r3, r7, r5
 8002692:	3201      	adds	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002696:	213c      	movs	r1, #60	; 0x3c
 8002698:	187b      	adds	r3, r7, r1
 800269a:	881a      	ldrh	r2, [r3, #0]
 800269c:	187b      	adds	r3, r7, r1
 800269e:	3201      	adds	r2, #1
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	1d7b      	adds	r3, r7, #5
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	213c      	movs	r1, #60	; 0x3c
 80026aa:	187a      	adds	r2, r7, r1
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3a7      	bcc.n	8002602 <printASCIIarray+0x3a>
			}
			for(i=0;i<len;i++){
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2200      	movs	r2, #0
 80026b6:	801a      	strh	r2, [r3, #0]
 80026b8:	e00b      	b.n	80026d2 <printASCIIarray+0x10a>
			weoBuffer[i]=0x00;
 80026ba:	203c      	movs	r0, #60	; 0x3c
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	18ba      	adds	r2, r7, r2
 80026c4:	2100      	movs	r1, #0
 80026c6:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<len;i++){
 80026c8:	183b      	adds	r3, r7, r0
 80026ca:	881a      	ldrh	r2, [r3, #0]
 80026cc:	183b      	adds	r3, r7, r0
 80026ce:	3201      	adds	r2, #1
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <printASCIIarray+0x130>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	223c      	movs	r2, #60	; 0x3c
 80026d8:	18ba      	adds	r2, r7, r2
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3ec      	bcc.n	80026ba <printASCIIarray+0xf2>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <printASCIIarray+0x140>)
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <printASCIIarray+0x140>)
 80026e6:	2140      	movs	r1, #64	; 0x40
 80026e8:	430a      	orrs	r2, r1
 80026ea:	615a      	str	r2, [r3, #20]

		}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b010      	add	sp, #64	; 0x40
 80026f4:	bdb0      	pop	{r4, r5, r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	200035d8 	.word	0x200035d8
 80026fc:	20000000 	.word	0x20000000
 8002700:	20003130 	.word	0x20003130
 8002704:	20003131 	.word	0x20003131
 8002708:	50000800 	.word	0x50000800

0800270c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_MspInit+0x4c>)
 8002720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_MspInit+0x4c>)
 8002724:	2101      	movs	r1, #1
 8002726:	430a      	orrs	r2, r1
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
 800272a:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_MspInit+0x4c>)
 8002738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_MspInit+0x4c>)
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	430a      	orrs	r2, r1
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_MspInit+0x4c>)
 8002746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	055b      	lsls	r3, r3, #21
 800274c:	4013      	ands	r3, r2
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fd04 	bl	8003164 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b002      	add	sp, #8
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000

08002768 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	240c      	movs	r4, #12
 8002772:	193b      	adds	r3, r7, r4
 8002774:	0018      	movs	r0, r3
 8002776:	2314      	movs	r3, #20
 8002778:	001a      	movs	r2, r3
 800277a:	2100      	movs	r1, #0
 800277c:	f008 f80a 	bl	800a794 <memset>
  if(hcomp->Instance==COMP1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a10      	ldr	r2, [pc, #64]	; (80027c8 <HAL_COMP_MspInit+0x60>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d11a      	bne.n	80027c0 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_COMP_MspInit+0x64>)
 800278c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_COMP_MspInit+0x64>)
 8002790:	2102      	movs	r1, #2
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <HAL_COMP_MspInit+0x64>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2202      	movs	r2, #2
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027a2:	193b      	adds	r3, r7, r4
 80027a4:	2204      	movs	r2, #4
 80027a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a8:	193b      	adds	r3, r7, r4
 80027aa:	2203      	movs	r2, #3
 80027ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_COMP_MspInit+0x68>)
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f001 faee 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b009      	add	sp, #36	; 0x24
 80027c6:	bd90      	pop	{r4, r7, pc}
 80027c8:	40010200 	.word	0x40010200
 80027cc:	40021000 	.word	0x40021000
 80027d0:	50000400 	.word	0x50000400

080027d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b08b      	sub	sp, #44	; 0x2c
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	2414      	movs	r4, #20
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	0018      	movs	r0, r3
 80027e2:	2314      	movs	r3, #20
 80027e4:	001a      	movs	r2, r3
 80027e6:	2100      	movs	r1, #0
 80027e8:	f007 ffd4 	bl	800a794 <memset>
  if(hi2c->Instance==I2C1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a20      	ldr	r2, [pc, #128]	; (8002874 <HAL_I2C_MspInit+0xa0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d139      	bne.n	800286a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <HAL_I2C_MspInit+0xa4>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027fa:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_I2C_MspInit+0xa4>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
 8002802:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <HAL_I2C_MspInit+0xa4>)
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	2201      	movs	r2, #1
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800280e:	193b      	adds	r3, r7, r4
 8002810:	22c0      	movs	r2, #192	; 0xc0
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002816:	0021      	movs	r1, r4
 8002818:	187b      	adds	r3, r7, r1
 800281a:	2212      	movs	r2, #18
 800281c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800281e:	187b      	adds	r3, r7, r1
 8002820:	2201      	movs	r2, #1
 8002822:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2200      	movs	r2, #0
 8002828:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2206      	movs	r2, #6
 800282e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002830:	187a      	adds	r2, r7, r1
 8002832:	23a0      	movs	r3, #160	; 0xa0
 8002834:	05db      	lsls	r3, r3, #23
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f001 faaf 	bl	8003d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_I2C_MspInit+0xa4>)
 8002840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002842:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_I2C_MspInit+0xa4>)
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0389      	lsls	r1, r1, #14
 8002848:	430a      	orrs	r2, r1
 800284a:	63da      	str	r2, [r3, #60]	; 0x3c
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_I2C_MspInit+0xa4>)
 800284e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	039b      	lsls	r3, r3, #14
 8002854:	4013      	ands	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	2017      	movs	r0, #23
 8002860:	f000 ffa2 	bl	80037a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002864:	2017      	movs	r0, #23
 8002866:	f000 ffb4 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b00b      	add	sp, #44	; 0x2c
 8002870:	bd90      	pop	{r4, r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40005400 	.word	0x40005400
 8002878:	40021000 	.word	0x40021000

0800287c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	2414      	movs	r4, #20
 8002886:	193b      	adds	r3, r7, r4
 8002888:	0018      	movs	r0, r3
 800288a:	2314      	movs	r3, #20
 800288c:	001a      	movs	r2, r3
 800288e:	2100      	movs	r1, #0
 8002890:	f007 ff80 	bl	800a794 <memset>
  if(hi2s->Instance==SPI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a47      	ldr	r2, [pc, #284]	; (80029b8 <HAL_I2S_MspInit+0x13c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d000      	beq.n	80028a0 <HAL_I2S_MspInit+0x24>
 800289e:	e086      	b.n	80029ae <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a0:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a4:	4b45      	ldr	r3, [pc, #276]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0149      	lsls	r1, r1, #5
 80028aa:	430a      	orrs	r2, r1
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
 80028ae:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	015b      	lsls	r3, r3, #5
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028bc:	4b3f      	ldr	r3, [pc, #252]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c0:	4b3e      	ldr	r3, [pc, #248]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	430a      	orrs	r2, r1
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	2201      	movs	r2, #1
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028da:	2102      	movs	r1, #2
 80028dc:	430a      	orrs	r2, r1
 80028de:	635a      	str	r2, [r3, #52]	; 0x34
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_I2S_MspInit+0x140>)
 80028e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80028ec:	193b      	adds	r3, r7, r4
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	0212      	lsls	r2, r2, #8
 80028f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	193b      	adds	r3, r7, r4
 80028f6:	2202      	movs	r2, #2
 80028f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	193b      	adds	r3, r7, r4
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002906:	193b      	adds	r3, r7, r4
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	193a      	adds	r2, r7, r4
 800290e:	23a0      	movs	r3, #160	; 0xa0
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f001 fa41 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800291a:	0021      	movs	r1, r4
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2238      	movs	r2, #56	; 0x38
 8002920:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2202      	movs	r2, #2
 8002926:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002934:	187b      	adds	r3, r7, r1
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293a:	187b      	adds	r3, r7, r1
 800293c:	4a20      	ldr	r2, [pc, #128]	; (80029c0 <HAL_I2S_MspInit+0x144>)
 800293e:	0019      	movs	r1, r3
 8002940:	0010      	movs	r0, r2
 8002942:	f001 fa2b 	bl	8003d9c <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002948:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <HAL_I2S_MspInit+0x14c>)
 800294a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 800294e:	2211      	movs	r2, #17
 8002950:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002954:	2210      	movs	r2, #16
 8002956:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 800295a:	2200      	movs	r2, #0
 800295c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002960:	2280      	movs	r2, #128	; 0x80
 8002962:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	0052      	lsls	r2, r2, #1
 800296a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	00d2      	lsls	r2, r2, #3
 8002972:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002976:	2200      	movs	r2, #0
 8002978:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 800297c:	22c0      	movs	r2, #192	; 0xc0
 800297e:	0192      	lsls	r2, r2, #6
 8002980:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002982:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002984:	0018      	movs	r0, r3
 8002986:	f000 ff41 	bl	800380c <HAL_DMA_Init>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 800298e:	f7ff febd 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 8002996:	62da      	str	r2, [r3, #44]	; 0x2c
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <HAL_I2S_MspInit+0x148>)
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2019      	movs	r0, #25
 80029a4:	f000 ff00 	bl	80037a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80029a8:	2019      	movs	r0, #25
 80029aa:	f000 ff12 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b00b      	add	sp, #44	; 0x2c
 80029b4:	bd90      	pop	{r4, r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40013000 	.word	0x40013000
 80029bc:	40021000 	.word	0x40021000
 80029c0:	50000400 	.word	0x50000400
 80029c4:	2000357c 	.word	0x2000357c
 80029c8:	40020008 	.word	0x40020008

080029cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	2414      	movs	r4, #20
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	0018      	movs	r0, r3
 80029da:	2314      	movs	r3, #20
 80029dc:	001a      	movs	r2, r3
 80029de:	2100      	movs	r1, #0
 80029e0:	f007 fed8 	bl	800a794 <memset>
  if(hspi->Instance==SPI2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_SPI_MspInit+0x170>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d000      	beq.n	80029f0 <HAL_SPI_MspInit+0x24>
 80029ee:	e0a0      	b.n	8002b32 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029f0:	4b53      	ldr	r3, [pc, #332]	; (8002b40 <HAL_SPI_MspInit+0x174>)
 80029f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f4:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <HAL_SPI_MspInit+0x174>)
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	01c9      	lsls	r1, r1, #7
 80029fa:	430a      	orrs	r2, r1
 80029fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80029fe:	4b50      	ldr	r3, [pc, #320]	; (8002b40 <HAL_SPI_MspInit+0x174>)
 8002a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	01db      	lsls	r3, r3, #7
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <HAL_SPI_MspInit+0x174>)
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_SPI_MspInit+0x174>)
 8002a12:	2102      	movs	r1, #2
 8002a14:	430a      	orrs	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
 8002a18:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <HAL_SPI_MspInit+0x174>)
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a24:	193b      	adds	r3, r7, r4
 8002a26:	2240      	movs	r2, #64	; 0x40
 8002a28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	2204      	movs	r2, #4
 8002a40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	4a3f      	ldr	r2, [pc, #252]	; (8002b44 <HAL_SPI_MspInit+0x178>)
 8002a46:	0019      	movs	r1, r3
 8002a48:	0010      	movs	r0, r2
 8002a4a:	f001 f9a7 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002a4e:	0021      	movs	r1, r4
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	22c0      	movs	r2, #192	; 0xc0
 8002a54:	0052      	lsls	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	4a34      	ldr	r2, [pc, #208]	; (8002b44 <HAL_SPI_MspInit+0x178>)
 8002a74:	0019      	movs	r1, r3
 8002a76:	0010      	movs	r0, r2
 8002a78:	f001 f990 	bl	8003d9c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 8002a7c:	4b32      	ldr	r3, [pc, #200]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002a7e:	4a33      	ldr	r2, [pc, #204]	; (8002b4c <HAL_SPI_MspInit+0x180>)
 8002a80:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002a84:	2212      	movs	r2, #18
 8002a86:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	0192      	lsls	r2, r2, #6
 8002ab2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 fea8 	bl	800380c <HAL_DMA_Init>
 8002abc:	1e03      	subs	r3, r0, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002ac0:	f7ff fe24 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a20      	ldr	r2, [pc, #128]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <HAL_SPI_MspInit+0x17c>)
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_SPI_MspInit+0x188>)
 8002ad4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002ad8:	2213      	movs	r2, #19
 8002ada:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002ade:	2210      	movs	r2, #16
 8002ae0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 fe7f 	bl	800380c <HAL_DMA_Init>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002b12:	f7ff fdfb 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_SPI_MspInit+0x184>)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	201a      	movs	r0, #26
 8002b28:	f000 fe3e 	bl	80037a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002b2c:	201a      	movs	r0, #26
 8002b2e:	f000 fe50 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b00b      	add	sp, #44	; 0x2c
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	40003800 	.word	0x40003800
 8002b40:	40021000 	.word	0x40021000
 8002b44:	50000400 	.word	0x50000400
 8002b48:	20003290 	.word	0x20003290
 8002b4c:	4002001c 	.word	0x4002001c
 8002b50:	2000351c 	.word	0x2000351c
 8002b54:	40020030 	.word	0x40020030

08002b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_TIM_Base_MspInit+0x38>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10d      	bne.n	8002b86 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b6a:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_TIM_Base_MspInit+0x3c>)
 8002b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_TIM_Base_MspInit+0x3c>)
 8002b70:	2180      	movs	r1, #128	; 0x80
 8002b72:	0109      	lsls	r1, r1, #4
 8002b74:	430a      	orrs	r2, r1
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_TIM_Base_MspInit+0x3c>)
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	40012c00 	.word	0x40012c00
 8002b94:	40021000 	.word	0x40021000

08002b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	240c      	movs	r4, #12
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	2314      	movs	r3, #20
 8002ba8:	001a      	movs	r2, r3
 8002baa:	2100      	movs	r1, #0
 8002bac:	f007 fdf2 	bl	800a794 <memset>
  if(htim->Instance==TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <HAL_TIM_MspPostInit+0x74>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d123      	bne.n	8002c02 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_TIM_MspPostInit+0x78>)
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_TIM_MspPostInit+0x78>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_TIM_MspPostInit+0x78>)
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd2:	193b      	adds	r3, r7, r4
 8002bd4:	2280      	movs	r2, #128	; 0x80
 8002bd6:	0052      	lsls	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	0021      	movs	r1, r4
 8002bdc:	187b      	adds	r3, r7, r1
 8002bde:	2202      	movs	r2, #2
 8002be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2202      	movs	r2, #2
 8002be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2203      	movs	r2, #3
 8002bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	187a      	adds	r2, r7, r1
 8002bf6:	23a0      	movs	r3, #160	; 0xa0
 8002bf8:	05db      	lsls	r3, r3, #23
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f001 f8cd 	bl	8003d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b009      	add	sp, #36	; 0x24
 8002c08:	bd90      	pop	{r4, r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002c14:	b590      	push	{r4, r7, lr}
 8002c16:	b08b      	sub	sp, #44	; 0x2c
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1c:	2414      	movs	r4, #20
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	0018      	movs	r0, r3
 8002c22:	2314      	movs	r3, #20
 8002c24:	001a      	movs	r2, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	f007 fdb4 	bl	800a794 <memset>
  if(husart->Instance==USART3)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a45      	ldr	r2, [pc, #276]	; (8002d48 <HAL_USART_MspInit+0x134>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d000      	beq.n	8002c38 <HAL_USART_MspInit+0x24>
 8002c36:	e083      	b.n	8002d40 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c38:	4b44      	ldr	r3, [pc, #272]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3c:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	02c9      	lsls	r1, r1, #11
 8002c42:	430a      	orrs	r2, r1
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c46:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	02db      	lsls	r3, r3, #11
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b3d      	ldr	r3, [pc, #244]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c58:	4b3c      	ldr	r3, [pc, #240]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c70:	4b36      	ldr	r3, [pc, #216]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c72:	2102      	movs	r1, #2
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34
 8002c78:	4b34      	ldr	r3, [pc, #208]	; (8002d4c <HAL_USART_MspInit+0x138>)
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	2220      	movs	r2, #32
 8002c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2203      	movs	r2, #3
 8002c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	193a      	adds	r2, r7, r4
 8002ca4:	23a0      	movs	r3, #160	; 0xa0
 8002ca6:	05db      	lsls	r3, r3, #23
 8002ca8:	0011      	movs	r1, r2
 8002caa:	0018      	movs	r0, r3
 8002cac:	f001 f876 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	187b      	adds	r3, r7, r1
 8002cb4:	2203      	movs	r2, #3
 8002cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2202      	movs	r2, #2
 8002cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	187b      	adds	r3, r7, r1
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002cca:	187b      	adds	r3, r7, r1
 8002ccc:	2204      	movs	r2, #4
 8002cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_USART_MspInit+0x13c>)
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	0010      	movs	r0, r2
 8002cd8:	f001 f860 	bl	8003d9c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002cde:	4a1e      	ldr	r2, [pc, #120]	; (8002d58 <HAL_USART_MspInit+0x144>)
 8002ce0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002ce4:	2237      	movs	r2, #55	; 0x37
 8002ce6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002cea:	2210      	movs	r2, #16
 8002cec:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cee:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	0192      	lsls	r2, r2, #6
 8002d12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002d16:	0018      	movs	r0, r3
 8002d18:	f000 fd78 	bl	800380c <HAL_DMA_Init>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002d20:	f7ff fcf4 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002d28:	651a      	str	r2, [r3, #80]	; 0x50
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_USART_MspInit+0x140>)
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	201d      	movs	r0, #29
 8002d36:	f000 fd37 	bl	80037a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002d3a:	201d      	movs	r0, #29
 8002d3c:	f000 fd49 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b00b      	add	sp, #44	; 0x2c
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	40004800 	.word	0x40004800
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	50000400 	.word	0x50000400
 8002d54:	200032f4 	.word	0x200032f4
 8002d58:	40020044 	.word	0x40020044

08002d5c <LL_USART_IsActiveFlag_FE>:
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d101      	bne.n	8002d74 <LL_USART_IsActiveFlag_FE+0x18>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <LL_USART_IsActiveFlag_FE+0x1a>
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <LL_USART_IsActiveFlag_NE>:
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d101      	bne.n	8002d96 <LL_USART_IsActiveFlag_NE+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_USART_IsActiveFlag_NE+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b002      	add	sp, #8
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <LL_USART_IsActiveFlag_ORE>:
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2208      	movs	r2, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d101      	bne.n	8002db8 <LL_USART_IsActiveFlag_ORE+0x18>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <LL_USART_IsActiveFlag_ORE+0x1a>
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	d101      	bne.n	8002dda <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2220      	movs	r2, #32
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d101      	bne.n	8002dfc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	0018      	movs	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b002      	add	sp, #8
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <HardFault_Handler+0x4>

08002e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e2e:	f000 f959 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e32:	46c0      	nop			; (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <DMA1_Channel1_IRQHandler+0x14>)
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 fe5e 	bl	8003b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	2000357c 	.word	0x2000357c

08002e50 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002e56:	0018      	movs	r0, r3
 8002e58:	f000 fe52 	bl	8003b00 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 fe4e 	bl	8003b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e64:	46c0      	nop			; (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20003290 	.word	0x20003290
 8002e70:	2000351c 	.word	0x2000351c

08002e74 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 fe40 	bl	8003b00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002e80:	46c0      	nop			; (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	200032f4 	.word	0x200032f4

08002e8c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <I2C1_IRQHandler+0x2c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699a      	ldr	r2, [r3, #24]
 8002e96:	23e0      	movs	r3, #224	; 0xe0
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <I2C1_IRQHandler+0x2c>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f001 f98f 	bl	80041c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002ea6:	e003      	b.n	8002eb0 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <I2C1_IRQHandler+0x2c>)
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 f970 	bl	8004190 <HAL_I2C_EV_IRQHandler>
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	20003230 	.word	0x20003230

08002ebc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <SPI1_IRQHandler+0x14>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f002 f8f2 	bl	80050ac <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	2000345c 	.word	0x2000345c

08002ed4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <SPI2_IRQHandler+0x14>)
 8002eda:	0018      	movs	r0, r3
 8002edc:	f004 fbfc 	bl	80076d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	200031b0 	.word	0x200031b0

08002eec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002ef2:	6a1a      	ldr	r2, [r3, #32]
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002ef6:	2108      	movs	r1, #8
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002efc:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f02:	2102      	movs	r1, #2
 8002f04:	430a      	orrs	r2, r1
 8002f06:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002f08:	4b1f      	ldr	r3, [pc, #124]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f0e:	2104      	movs	r1, #4
 8002f10:	430a      	orrs	r2, r1
 8002f12:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff ff53 	bl	8002dc2 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d009      	beq.n	8002f34 <USART2_IRQHandler+0x48>
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7ff ff5e 	bl	8002de4 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d003      	beq.n	8002f34 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002f2c:	f7fe f84a 	bl	8000fc4 <USART2_RX_Callback>
	  {
 8002f30:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f32:	e025      	b.n	8002f80 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f3a:	2108      	movs	r1, #8
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff ff2c 	bl	8002da0 <LL_USART_IsActiveFlag_ORE>
 8002f48:	1e03      	subs	r3, r0, #0
 8002f4a:	d008      	beq.n	8002f5e <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002f4c:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f52:	2108      	movs	r1, #8
 8002f54:	430a      	orrs	r2, r1
 8002f56:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f5c:	e010      	b.n	8002f80 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f60:	0018      	movs	r0, r3
 8002f62:	f7ff fefb 	bl	8002d5c <LL_USART_IsActiveFlag_FE>
 8002f66:	1e03      	subs	r3, r0, #0
 8002f68:	d002      	beq.n	8002f70 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f6e:	e007      	b.n	8002f80 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f72:	0018      	movs	r0, r3
 8002f74:	f7ff ff03 	bl	8002d7e <LL_USART_IsActiveFlag_NE>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <USART2_IRQHandler+0x9c>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40004400 	.word	0x40004400

08002f8c <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002f92:	0018      	movs	r0, r3
 8002f94:	f006 fa3c 	bl	8009410 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	20003390 	.word	0x20003390

08002fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <SystemInit+0x14>)
 8002faa:	2280      	movs	r2, #128	; 0x80
 8002fac:	0512      	lsls	r2, r2, #20
 8002fae:	609a      	str	r2, [r3, #8]
#endif
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fc0:	f7ff fff0 	bl	8002fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fc4:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fc6:	490d      	ldr	r1, [pc, #52]	; (8002ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <LoopForever+0xe>)
  movs r3, #0
 8002fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <LoopForever+0x16>)
  movs r3, #0
 8002fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fea:	f007 fbaf 	bl	800a74c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002fee:	f7fd fa9f 	bl	8000530 <main>

08002ff2 <LoopForever>:

LoopForever:
  b LoopForever
 8002ff2:	e7fe      	b.n	8002ff2 <LoopForever>
  ldr   r0, =_estack
 8002ff4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ffc:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8003000:	0800a8ac 	.word	0x0800a8ac
  ldr r2, =_sbss
 8003004:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8003008:	20005600 	.word	0x20005600

0800300c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800300c:	e7fe      	b.n	800300c <ADC1_COMP_IRQHandler>
	...

08003010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003016:	1dfb      	adds	r3, r7, #7
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <HAL_Init+0x3c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_Init+0x3c>)
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	0049      	lsls	r1, r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800302a:	2000      	movs	r0, #0
 800302c:	f000 f810 	bl	8003050 <HAL_InitTick>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d003      	beq.n	800303c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e001      	b.n	8003040 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800303c:	f7ff fb6c 	bl	8002718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003040:	1dfb      	adds	r3, r7, #7
 8003042:	781b      	ldrb	r3, [r3, #0]
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40022000 	.word	0x40022000

08003050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003058:	230f      	movs	r3, #15
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_InitTick+0x88>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d02b      	beq.n	80030c0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <HAL_InitTick+0x8c>)
 800306a:	681c      	ldr	r4, [r3, #0]
 800306c:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <HAL_InitTick+0x88>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0019      	movs	r1, r3
 8003072:	23fa      	movs	r3, #250	; 0xfa
 8003074:	0098      	lsls	r0, r3, #2
 8003076:	f7fd f845 	bl	8000104 <__udivsi3>
 800307a:	0003      	movs	r3, r0
 800307c:	0019      	movs	r1, r3
 800307e:	0020      	movs	r0, r4
 8003080:	f7fd f840 	bl	8000104 <__udivsi3>
 8003084:	0003      	movs	r3, r0
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fbb3 	bl	80037f2 <HAL_SYSTICK_Config>
 800308c:	1e03      	subs	r3, r0, #0
 800308e:	d112      	bne.n	80030b6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d80a      	bhi.n	80030ac <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	2301      	movs	r3, #1
 800309a:	425b      	negs	r3, r3
 800309c:	2200      	movs	r2, #0
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fb82 	bl	80037a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030a4:	4b0e      	ldr	r3, [pc, #56]	; (80030e0 <HAL_InitTick+0x90>)
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e00d      	b.n	80030c8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80030ac:	230f      	movs	r3, #15
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
 80030b4:	e008      	b.n	80030c8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030b6:	230f      	movs	r3, #15
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e003      	b.n	80030c8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030c0:	230f      	movs	r3, #15
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b005      	add	sp, #20
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	2000313c 	.word	0x2000313c
 80030dc:	20003134 	.word	0x20003134
 80030e0:	20003138 	.word	0x20003138

080030e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_IncTick+0x1c>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	001a      	movs	r2, r3
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_IncTick+0x20>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	18d2      	adds	r2, r2, r3
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_IncTick+0x20>)
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	2000313c 	.word	0x2000313c
 8003104:	200055fc 	.word	0x200055fc

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b02      	ldr	r3, [pc, #8]	; (8003118 <HAL_GetTick+0x10>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	200055fc 	.word	0x200055fc

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff fff0 	bl	8003108 <HAL_GetTick>
 8003128:	0003      	movs	r3, r0
 800312a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	3301      	adds	r3, #1
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	001a      	movs	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	189b      	adds	r3, r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	f7ff ffe0 	bl	8003108 <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b004      	add	sp, #16
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	2000313c 	.word	0x2000313c

08003164 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a06      	ldr	r2, [pc, #24]	; (800318c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003172:	4013      	ands	r3, r2
 8003174:	0019      	movs	r1, r3
 8003176:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	430a      	orrs	r2, r1
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b002      	add	sp, #8
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	40010000 	.word	0x40010000
 800318c:	fffff9ff 	.word	0xfffff9ff

08003190 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003198:	4a05      	ldr	r2, [pc, #20]	; (80031b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	58d2      	ldr	r2, [r2, r3]
 800319e:	4904      	ldr	r1, [pc, #16]	; (80031b0 <LL_EXTI_EnableIT_0_31+0x20>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	2280      	movs	r2, #128	; 0x80
 80031a6:	508b      	str	r3, [r1, r2]
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b002      	add	sp, #8
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021800 	.word	0x40021800

080031b4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80031bc:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	58d3      	ldr	r3, [r2, r3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	43d2      	mvns	r2, r2
 80031c6:	4904      	ldr	r1, [pc, #16]	; (80031d8 <LL_EXTI_DisableIT_0_31+0x24>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	508b      	str	r3, [r1, r2]
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b002      	add	sp, #8
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	40021800 	.word	0x40021800

080031dc <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80031e6:	2384      	movs	r3, #132	; 0x84
 80031e8:	58d2      	ldr	r2, [r2, r3]
 80031ea:	4904      	ldr	r1, [pc, #16]	; (80031fc <LL_EXTI_EnableEvent_0_31+0x20>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	2284      	movs	r2, #132	; 0x84
 80031f2:	508b      	str	r3, [r1, r2]

}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021800 	.word	0x40021800

08003200 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003208:	4a06      	ldr	r2, [pc, #24]	; (8003224 <LL_EXTI_DisableEvent_0_31+0x24>)
 800320a:	2384      	movs	r3, #132	; 0x84
 800320c:	58d3      	ldr	r3, [r2, r3]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	43d2      	mvns	r2, r2
 8003212:	4904      	ldr	r1, [pc, #16]	; (8003224 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003214:	4013      	ands	r3, r2
 8003216:	2284      	movs	r2, #132	; 0x84
 8003218:	508b      	str	r3, [r1, r2]
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	40021800 	.word	0x40021800

08003228 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003232:	6819      	ldr	r1, [r3, #0]
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]

}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021800 	.word	0x40021800

08003248 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	43d9      	mvns	r1, r3
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]

}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	46bd      	mov	sp, r7
 8003262:	b002      	add	sp, #8
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40021800 	.word	0x40021800

0800326c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021800 	.word	0x40021800

0800328c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	43d9      	mvns	r1, r3
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800329e:	400a      	ands	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b002      	add	sp, #8
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	40021800 	.word	0x40021800

080032b0 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b002      	add	sp, #8
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	40021800 	.word	0x40021800

080032cc <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	60da      	str	r2, [r3, #12]
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40021800 	.word	0x40021800

080032e8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80032f4:	211f      	movs	r1, #31
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e13d      	b.n	8003586 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0fdb      	lsrs	r3, r3, #31
 8003312:	07da      	lsls	r2, r3, #31
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	429a      	cmp	r2, r3
 800331a:	d104      	bne.n	8003326 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 800331c:	231f      	movs	r3, #31
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e12f      	b.n	8003586 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2229      	movs	r2, #41	; 0x29
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10a      	bne.n	8003348 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2228      	movs	r2, #40	; 0x28
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	0018      	movs	r0, r3
 8003344:	f7ff fa10 	bl	8002768 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2230      	movs	r2, #48	; 0x30
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a85      	ldr	r2, [pc, #532]	; (8003594 <HAL_COMP_Init+0x2ac>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	429a      	cmp	r2, r3
 8003398:	d10d      	bne.n	80033b6 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800339a:	4b7f      	ldr	r3, [pc, #508]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033a0:	497e      	ldr	r1, [pc, #504]	; (800359c <HAL_COMP_Init+0x2b4>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033a6:	4b7c      	ldr	r3, [pc, #496]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4b7b      	ldr	r3, [pc, #492]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	0109      	lsls	r1, r1, #4
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	e01f      	b.n	80033f6 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	23c0      	movs	r3, #192	; 0xc0
 80033bc:	015b      	lsls	r3, r3, #5
 80033be:	429a      	cmp	r2, r3
 80033c0:	d10d      	bne.n	80033de <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033c2:	4b75      	ldr	r3, [pc, #468]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b74      	ldr	r3, [pc, #464]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033c8:	2180      	movs	r1, #128	; 0x80
 80033ca:	0109      	lsls	r1, r1, #4
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033d0:	4b71      	ldr	r3, [pc, #452]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	4b70      	ldr	r3, [pc, #448]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033d6:	4971      	ldr	r1, [pc, #452]	; (800359c <HAL_COMP_Init+0x2b4>)
 80033d8:	400a      	ands	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	e00b      	b.n	80033f6 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80033de:	4b6e      	ldr	r3, [pc, #440]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033e4:	496d      	ldr	r1, [pc, #436]	; (800359c <HAL_COMP_Init+0x2b4>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80033ea:	4b6b      	ldr	r3, [pc, #428]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4b6a      	ldr	r3, [pc, #424]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80033f0:	496a      	ldr	r1, [pc, #424]	; (800359c <HAL_COMP_Init+0x2b4>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	22a0      	movs	r2, #160	; 0xa0
 80033fc:	01d2      	lsls	r2, r2, #7
 80033fe:	4293      	cmp	r3, r2
 8003400:	d017      	beq.n	8003432 <HAL_COMP_Init+0x14a>
 8003402:	22a0      	movs	r2, #160	; 0xa0
 8003404:	01d2      	lsls	r2, r2, #7
 8003406:	4293      	cmp	r3, r2
 8003408:	d830      	bhi.n	800346c <HAL_COMP_Init+0x184>
 800340a:	2b01      	cmp	r3, #1
 800340c:	d01f      	beq.n	800344e <HAL_COMP_Init+0x166>
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	01d2      	lsls	r2, r2, #7
 8003412:	4293      	cmp	r3, r2
 8003414:	d12a      	bne.n	800346c <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003416:	4b60      	ldr	r3, [pc, #384]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b5f      	ldr	r3, [pc, #380]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	01c9      	lsls	r1, r1, #7
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003424:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	4b5b      	ldr	r3, [pc, #364]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800342a:	495d      	ldr	r1, [pc, #372]	; (80035a0 <HAL_COMP_Init+0x2b8>)
 800342c:	400a      	ands	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
        break;
 8003430:	e029      	b.n	8003486 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003432:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4b58      	ldr	r3, [pc, #352]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003438:	4959      	ldr	r1, [pc, #356]	; (80035a0 <HAL_COMP_Init+0x2b8>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800343e:	4b56      	ldr	r3, [pc, #344]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b55      	ldr	r3, [pc, #340]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	01c9      	lsls	r1, r1, #7
 8003448:	430a      	orrs	r2, r1
 800344a:	605a      	str	r2, [r3, #4]
        break;
 800344c:	e01b      	b.n	8003486 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800344e:	4b52      	ldr	r3, [pc, #328]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b51      	ldr	r3, [pc, #324]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003454:	2180      	movs	r1, #128	; 0x80
 8003456:	01c9      	lsls	r1, r1, #7
 8003458:	430a      	orrs	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800345c:	4b4e      	ldr	r3, [pc, #312]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	01c9      	lsls	r1, r1, #7
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
        break;
 800346a:	e00c      	b.n	8003486 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800346c:	4b4a      	ldr	r3, [pc, #296]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b49      	ldr	r3, [pc, #292]	; (8003598 <HAL_COMP_Init+0x2b0>)
 8003472:	494b      	ldr	r1, [pc, #300]	; (80035a0 <HAL_COMP_Init+0x2b8>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003478:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	4b46      	ldr	r3, [pc, #280]	; (8003598 <HAL_COMP_Init+0x2b0>)
 800347e:	4948      	ldr	r1, [pc, #288]	; (80035a0 <HAL_COMP_Init+0x2b8>)
 8003480:	400a      	ands	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
        break;
 8003484:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2230      	movs	r2, #48	; 0x30
 800348e:	4013      	ands	r3, r2
 8003490:	d016      	beq.n	80034c0 <HAL_COMP_Init+0x1d8>
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d113      	bne.n	80034c0 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <HAL_COMP_Init+0x2bc>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4942      	ldr	r1, [pc, #264]	; (80035a8 <HAL_COMP_Init+0x2c0>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fc fe30 	bl	8000104 <__udivsi3>
 80034a4:	0003      	movs	r3, r0
 80034a6:	001a      	movs	r2, r3
 80034a8:	0013      	movs	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034b2:	e002      	b.n	80034ba <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f9      	bne.n	80034b4 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_COMP_Init+0x2b0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d102      	bne.n	80034d0 <HAL_COMP_Init+0x1e8>
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	029b      	lsls	r3, r3, #10
 80034ce:	e001      	b.n	80034d4 <HAL_COMP_Init+0x1ec>
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	02db      	lsls	r3, r3, #11
 80034d4:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	2203      	movs	r2, #3
 80034dc:	4013      	ands	r3, r2
 80034de:	d040      	beq.n	8003562 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	2210      	movs	r2, #16
 80034e6:	4013      	ands	r3, r2
 80034e8:	d004      	beq.n	80034f4 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	0018      	movs	r0, r3
 80034ee:	f7ff fe9b 	bl	8003228 <LL_EXTI_EnableRisingTrig_0_31>
 80034f2:	e003      	b.n	80034fc <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7ff fea6 	bl	8003248 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2220      	movs	r2, #32
 8003502:	4013      	ands	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	0018      	movs	r0, r3
 800350a:	f7ff feaf 	bl	800326c <LL_EXTI_EnableFallingTrig_0_31>
 800350e:	e003      	b.n	8003518 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	0018      	movs	r0, r3
 8003514:	f7ff feba 	bl	800328c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff fed6 	bl	80032cc <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	0018      	movs	r0, r3
 8003524:	f7ff fec4 	bl	80032b0 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2202      	movs	r2, #2
 800352e:	4013      	ands	r3, r2
 8003530:	d004      	beq.n	800353c <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fe51 	bl	80031dc <LL_EXTI_EnableEvent_0_31>
 800353a:	e003      	b.n	8003544 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff fe5e 	bl	8003200 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	2201      	movs	r2, #1
 800354a:	4013      	ands	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	0018      	movs	r0, r3
 8003552:	f7ff fe1d 	bl	8003190 <LL_EXTI_EnableIT_0_31>
 8003556:	e00c      	b.n	8003572 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	0018      	movs	r0, r3
 800355c:	f7ff fe2a 	bl	80031b4 <LL_EXTI_DisableIT_0_31>
 8003560:	e007      	b.n	8003572 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff fe4b 	bl	8003200 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff fe21 	bl	80031b4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2229      	movs	r2, #41	; 0x29
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2229      	movs	r2, #41	; 0x29
 8003582:	2101      	movs	r1, #1
 8003584:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003586:	231f      	movs	r3, #31
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	781b      	ldrb	r3, [r3, #0]
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b008      	add	sp, #32
 8003592:	bd80      	pop	{r7, pc}
 8003594:	fe00740f 	.word	0xfe00740f
 8003598:	40010200 	.word	0x40010200
 800359c:	fffff7ff 	.word	0xfffff7ff
 80035a0:	ffffbfff 	.word	0xffffbfff
 80035a4:	20003134 	.word	0x20003134
 80035a8:	00030d40 	.word	0x00030d40

080035ac <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035b8:	210f      	movs	r1, #15
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e034      	b.n	8003638 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0fdb      	lsrs	r3, r3, #31
 80035d6:	07da      	lsls	r2, r3, #31
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	061b      	lsls	r3, r3, #24
 80035dc:	429a      	cmp	r2, r3
 80035de:	d104      	bne.n	80035ea <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 80035e0:	230f      	movs	r3, #15
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e026      	b.n	8003638 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2229      	movs	r2, #41	; 0x29
 80035ee:	5c9b      	ldrb	r3, [r3, r2]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d11c      	bne.n	8003630 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2229      	movs	r2, #41	; 0x29
 800360a:	2102      	movs	r1, #2
 800360c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_COMP_Start+0x9c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	490e      	ldr	r1, [pc, #56]	; (800364c <HAL_COMP_Start+0xa0>)
 8003614:	0018      	movs	r0, r3
 8003616:	f7fc fd75 	bl	8000104 <__udivsi3>
 800361a:	0003      	movs	r3, r0
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003620:	e002      	b.n	8003628 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3b01      	subs	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f9      	bne.n	8003622 <HAL_COMP_Start+0x76>
 800362e:	e003      	b.n	8003638 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003630:	230f      	movs	r3, #15
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	781b      	ldrb	r3, [r3, #0]
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	b004      	add	sp, #16
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	20003134 	.word	0x20003134
 800364c:	00030d40 	.word	0x00030d40

08003650 <__NVIC_EnableIRQ>:
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	0002      	movs	r2, r0
 8003658:	1dfb      	adds	r3, r7, #7
 800365a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b7f      	cmp	r3, #127	; 0x7f
 8003662:	d809      	bhi.n	8003678 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003664:	1dfb      	adds	r3, r7, #7
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	001a      	movs	r2, r3
 800366a:	231f      	movs	r3, #31
 800366c:	401a      	ands	r2, r3
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <__NVIC_EnableIRQ+0x30>)
 8003670:	2101      	movs	r1, #1
 8003672:	4091      	lsls	r1, r2
 8003674:	000a      	movs	r2, r1
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	0002      	movs	r2, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	1dfb      	adds	r3, r7, #7
 8003690:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b7f      	cmp	r3, #127	; 0x7f
 8003698:	d828      	bhi.n	80036ec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800369a:	4a2f      	ldr	r2, [pc, #188]	; (8003758 <__NVIC_SetPriority+0xd4>)
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	33c0      	adds	r3, #192	; 0xc0
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	589b      	ldr	r3, [r3, r2]
 80036aa:	1dfa      	adds	r2, r7, #7
 80036ac:	7812      	ldrb	r2, [r2, #0]
 80036ae:	0011      	movs	r1, r2
 80036b0:	2203      	movs	r2, #3
 80036b2:	400a      	ands	r2, r1
 80036b4:	00d2      	lsls	r2, r2, #3
 80036b6:	21ff      	movs	r1, #255	; 0xff
 80036b8:	4091      	lsls	r1, r2
 80036ba:	000a      	movs	r2, r1
 80036bc:	43d2      	mvns	r2, r2
 80036be:	401a      	ands	r2, r3
 80036c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	22ff      	movs	r2, #255	; 0xff
 80036c8:	401a      	ands	r2, r3
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	0018      	movs	r0, r3
 80036d0:	2303      	movs	r3, #3
 80036d2:	4003      	ands	r3, r0
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036d8:	481f      	ldr	r0, [pc, #124]	; (8003758 <__NVIC_SetPriority+0xd4>)
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	b25b      	sxtb	r3, r3
 80036e0:	089b      	lsrs	r3, r3, #2
 80036e2:	430a      	orrs	r2, r1
 80036e4:	33c0      	adds	r3, #192	; 0xc0
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	501a      	str	r2, [r3, r0]
}
 80036ea:	e031      	b.n	8003750 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <__NVIC_SetPriority+0xd8>)
 80036ee:	1dfb      	adds	r3, r7, #7
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	0019      	movs	r1, r3
 80036f4:	230f      	movs	r3, #15
 80036f6:	400b      	ands	r3, r1
 80036f8:	3b08      	subs	r3, #8
 80036fa:	089b      	lsrs	r3, r3, #2
 80036fc:	3306      	adds	r3, #6
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	18d3      	adds	r3, r2, r3
 8003702:	3304      	adds	r3, #4
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	1dfa      	adds	r2, r7, #7
 8003708:	7812      	ldrb	r2, [r2, #0]
 800370a:	0011      	movs	r1, r2
 800370c:	2203      	movs	r2, #3
 800370e:	400a      	ands	r2, r1
 8003710:	00d2      	lsls	r2, r2, #3
 8003712:	21ff      	movs	r1, #255	; 0xff
 8003714:	4091      	lsls	r1, r2
 8003716:	000a      	movs	r2, r1
 8003718:	43d2      	mvns	r2, r2
 800371a:	401a      	ands	r2, r3
 800371c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	22ff      	movs	r2, #255	; 0xff
 8003724:	401a      	ands	r2, r3
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	0018      	movs	r0, r3
 800372c:	2303      	movs	r3, #3
 800372e:	4003      	ands	r3, r0
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003734:	4809      	ldr	r0, [pc, #36]	; (800375c <__NVIC_SetPriority+0xd8>)
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	001c      	movs	r4, r3
 800373c:	230f      	movs	r3, #15
 800373e:	4023      	ands	r3, r4
 8003740:	3b08      	subs	r3, #8
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	430a      	orrs	r2, r1
 8003746:	3306      	adds	r3, #6
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	18c3      	adds	r3, r0, r3
 800374c:	3304      	adds	r3, #4
 800374e:	601a      	str	r2, [r3, #0]
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b003      	add	sp, #12
 8003756:	bd90      	pop	{r4, r7, pc}
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	1e5a      	subs	r2, r3, #1
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	045b      	lsls	r3, r3, #17
 8003770:	429a      	cmp	r2, r3
 8003772:	d301      	bcc.n	8003778 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003774:	2301      	movs	r3, #1
 8003776:	e010      	b.n	800379a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <SysTick_Config+0x44>)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	3a01      	subs	r2, #1
 800377e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003780:	2301      	movs	r3, #1
 8003782:	425b      	negs	r3, r3
 8003784:	2103      	movs	r1, #3
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff ff7c 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <SysTick_Config+0x44>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <SysTick_Config+0x44>)
 8003794:	2207      	movs	r2, #7
 8003796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003798:	2300      	movs	r3, #0
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b002      	add	sp, #8
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	210f      	movs	r1, #15
 80037b4:	187b      	adds	r3, r7, r1
 80037b6:	1c02      	adds	r2, r0, #0
 80037b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b25b      	sxtb	r3, r3
 80037c2:	0011      	movs	r1, r2
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff ff5d 	bl	8003684 <__NVIC_SetPriority>
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	0002      	movs	r2, r0
 80037da:	1dfb      	adds	r3, r7, #7
 80037dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b25b      	sxtb	r3, r3
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7ff ff33 	bl	8003650 <__NVIC_EnableIRQ>
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b002      	add	sp, #8
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff ffaf 	bl	8003760 <SysTick_Config>
 8003802:	0003      	movs	r3, r0
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e077      	b.n	800390e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <HAL_DMA_Init+0x10c>)
 8003824:	4694      	mov	ip, r2
 8003826:	4463      	add	r3, ip
 8003828:	2114      	movs	r1, #20
 800382a:	0018      	movs	r0, r3
 800382c:	f7fc fc6a 	bl	8000104 <__udivsi3>
 8003830:	0003      	movs	r3, r0
 8003832:	009a      	lsls	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2225      	movs	r2, #37	; 0x25
 800383c:	2102      	movs	r1, #2
 800383e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4934      	ldr	r1, [pc, #208]	; (800391c <HAL_DMA_Init+0x110>)
 800384c:	400a      	ands	r2, r1
 800384e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	431a      	orrs	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0018      	movs	r0, r3
 800388a:	f000 fa37 	bl	8003cfc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	01db      	lsls	r3, r3, #7
 8003896:	429a      	cmp	r2, r3
 8003898:	d102      	bne.n	80038a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	213f      	movs	r1, #63	; 0x3f
 80038aa:	400a      	ands	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80038b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d011      	beq.n	80038e4 <HAL_DMA_Init+0xd8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d80d      	bhi.n	80038e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 fa42 	bl	8003d54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e008      	b.n	80038f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2225      	movs	r2, #37	; 0x25
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b002      	add	sp, #8
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	bffdfff8 	.word	0xbffdfff8
 800391c:	ffff800f 	.word	0xffff800f

08003920 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2317      	movs	r3, #23
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2224      	movs	r2, #36	; 0x24
 800393a:	5c9b      	ldrb	r3, [r3, r2]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_DMA_Start_IT+0x24>
 8003940:	2302      	movs	r3, #2
 8003942:	e06f      	b.n	8003a24 <HAL_DMA_Start_IT+0x104>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2224      	movs	r2, #36	; 0x24
 8003948:	2101      	movs	r1, #1
 800394a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2225      	movs	r2, #37	; 0x25
 8003950:	5c9b      	ldrb	r3, [r3, r2]
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	d157      	bne.n	8003a08 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2225      	movs	r2, #37	; 0x25
 800395c:	2102      	movs	r1, #2
 800395e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	438a      	bics	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f97d 	bl	8003c7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	210e      	movs	r1, #14
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e00f      	b.n	80039bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2104      	movs	r1, #4
 80039a8:	438a      	bics	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	210a      	movs	r1, #10
 80039b8:	430a      	orrs	r2, r1
 80039ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	025b      	lsls	r3, r3, #9
 80039c6:	4013      	ands	r3, r2
 80039c8:	d008      	beq.n	80039dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	0049      	lsls	r1, r1, #1
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	2180      	movs	r1, #128	; 0x80
 80039f0:	0049      	lsls	r1, r1, #1
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2101      	movs	r1, #1
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e00a      	b.n	8003a1e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2280      	movs	r2, #128	; 0x80
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2224      	movs	r2, #36	; 0x24
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003a16:	2317      	movs	r3, #23
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003a1e:	2317      	movs	r3, #23
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	781b      	ldrb	r3, [r3, #0]
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b006      	add	sp, #24
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	210f      	movs	r1, #15
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2225      	movs	r2, #37	; 0x25
 8003a40:	5c9b      	ldrb	r3, [r3, r2]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d006      	beq.n	8003a56 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2204      	movs	r2, #4
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e049      	b.n	8003aea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	210e      	movs	r1, #14
 8003a62:	438a      	bics	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2101      	movs	r1, #1
 8003a72:	438a      	bics	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	491d      	ldr	r1, [pc, #116]	; (8003af8 <HAL_DMA_Abort_IT+0xcc>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_DMA_Abort_IT+0xd0>)
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	221c      	movs	r2, #28
 8003a90:	4013      	ands	r3, r2
 8003a92:	2201      	movs	r2, #1
 8003a94:	409a      	lsls	r2, r3
 8003a96:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_DMA_Abort_IT+0xd0>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	490f      	ldr	r1, [pc, #60]	; (8003af8 <HAL_DMA_Abort_IT+0xcc>)
 8003aba:	400a      	ands	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ac6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2225      	movs	r2, #37	; 0x25
 8003acc:	2101      	movs	r1, #1
 8003ace:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	; 0x24
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	4798      	blx	r3
    }
  }
  return status;
 8003aea:	230f      	movs	r3, #15
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	781b      	ldrb	r3, [r3, #0]
}
 8003af0:	0018      	movs	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b004      	add	sp, #16
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	fffffeff 	.word	0xfffffeff
 8003afc:	40020000 	.word	0x40020000

08003b00 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003b08:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	221c      	movs	r2, #28
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2204      	movs	r2, #4
 8003b20:	409a      	lsls	r2, r3
 8003b22:	0013      	movs	r3, r2
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4013      	ands	r3, r2
 8003b28:	d027      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x7a>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d023      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d107      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2104      	movs	r1, #4
 8003b4a:	438a      	bics	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003b4e:	4b44      	ldr	r3, [pc, #272]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003b50:	6859      	ldr	r1, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	221c      	movs	r2, #28
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	4b40      	ldr	r3, [pc, #256]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d100      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x6e>
 8003b6c:	e073      	b.n	8003c56 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	0010      	movs	r0, r2
 8003b76:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003b78:	e06d      	b.n	8003c56 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	221c      	movs	r2, #28
 8003b80:	4013      	ands	r3, r2
 8003b82:	2202      	movs	r2, #2
 8003b84:	409a      	lsls	r2, r3
 8003b86:	0013      	movs	r3, r2
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d02e      	beq.n	8003bec <HAL_DMA_IRQHandler+0xec>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2202      	movs	r2, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	d02a      	beq.n	8003bec <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d10b      	bne.n	8003bba <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	210a      	movs	r1, #10
 8003bae:	438a      	bics	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2225      	movs	r2, #37	; 0x25
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003bbc:	6859      	ldr	r1, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	221c      	movs	r2, #28
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d03a      	beq.n	8003c56 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	0010      	movs	r0, r2
 8003be8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003bea:	e034      	b.n	8003c56 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	221c      	movs	r2, #28
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d02b      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x158>
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2208      	movs	r2, #8
 8003c04:	4013      	ands	r3, r2
 8003c06:	d027      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	210e      	movs	r1, #14
 8003c14:	438a      	bics	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	221c      	movs	r2, #28
 8003c22:	4013      	ands	r3, r2
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_DMA_IRQHandler+0x160>)
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2225      	movs	r2, #37	; 0x25
 8003c38:	2101      	movs	r1, #1
 8003c3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	2100      	movs	r1, #0
 8003c42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	0010      	movs	r0, r2
 8003c54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46c0      	nop			; (mov r8, r8)
}
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	b004      	add	sp, #16
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40020000 	.word	0x40020000

08003c64 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2225      	movs	r2, #37	; 0x25
 8003c70:	5c9b      	ldrb	r3, [r3, r2]
 8003c72:	b2db      	uxtb	r3, r3
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b002      	add	sp, #8
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c92:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003ca6:	4b14      	ldr	r3, [pc, #80]	; (8003cf8 <DMA_SetConfig+0x7c>)
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	221c      	movs	r2, #28
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	409a      	lsls	r2, r3
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <DMA_SetConfig+0x7c>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d108      	bne.n	8003cde <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cdc:	e007      	b.n	8003cee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b004      	add	sp, #16
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	40020000 	.word	0x40020000

08003cfc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	4a10      	ldr	r2, [pc, #64]	; (8003d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	4463      	add	r3, ip
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	001a      	movs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	001a      	movs	r2, r3
 8003d1e:	23ff      	movs	r3, #255	; 0xff
 8003d20:	4013      	ands	r3, r2
 8003d22:	3b08      	subs	r3, #8
 8003d24:	2114      	movs	r1, #20
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7fc f9ec 	bl	8000104 <__udivsi3>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003d34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	221f      	movs	r2, #31
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b004      	add	sp, #16
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	10008200 	.word	0x10008200
 8003d50:	40020880 	.word	0x40020880

08003d54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	223f      	movs	r2, #63	; 0x3f
 8003d62:	4013      	ands	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d6a:	4694      	mov	ip, r2
 8003d6c:	4463      	add	r3, ip
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	001a      	movs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a07      	ldr	r2, [pc, #28]	; (8003d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	4013      	ands	r3, r2
 8003d84:	2201      	movs	r2, #1
 8003d86:	409a      	lsls	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b004      	add	sp, #16
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	1000823f 	.word	0x1000823f
 8003d98:	40020940 	.word	0x40020940

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003daa:	e147      	b.n	800403c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2101      	movs	r1, #1
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4091      	lsls	r1, r2
 8003db6:	000a      	movs	r2, r1
 8003db8:	4013      	ands	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d100      	bne.n	8003dc4 <HAL_GPIO_Init+0x28>
 8003dc2:	e138      	b.n	8004036 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d00b      	beq.n	8003de4 <HAL_GPIO_Init+0x48>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d007      	beq.n	8003de4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dd8:	2b11      	cmp	r3, #17
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b12      	cmp	r3, #18
 8003de2:	d130      	bne.n	8003e46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	409a      	lsls	r2, r3
 8003df2:	0013      	movs	r3, r2
 8003df4:	43da      	mvns	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	409a      	lsls	r2, r3
 8003e06:	0013      	movs	r3, r2
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	0013      	movs	r3, r2
 8003e22:	43da      	mvns	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	2201      	movs	r2, #1
 8003e32:	401a      	ands	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	409a      	lsls	r2, r3
 8003e38:	0013      	movs	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	409a      	lsls	r2, r3
 8003e54:	0013      	movs	r3, r2
 8003e56:	43da      	mvns	r2, r3
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	0013      	movs	r3, r2
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0xea>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b12      	cmp	r3, #18
 8003e84:	d123      	bne.n	8003ece <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	0092      	lsls	r2, r2, #2
 8003e90:	58d3      	ldr	r3, [r2, r3]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2207      	movs	r2, #7
 8003e98:	4013      	ands	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	0013      	movs	r3, r2
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2107      	movs	r1, #7
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	0013      	movs	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	08da      	lsrs	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3208      	adds	r2, #8
 8003ec8:	0092      	lsls	r2, r2, #2
 8003eca:	6939      	ldr	r1, [r7, #16]
 8003ecc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0013      	movs	r3, r2
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2203      	movs	r2, #3
 8003eec:	401a      	ands	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	0013      	movs	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	055b      	lsls	r3, r3, #21
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d100      	bne.n	8003f10 <HAL_GPIO_Init+0x174>
 8003f0e:	e092      	b.n	8004036 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003f10:	4a50      	ldr	r2, [pc, #320]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3318      	adds	r3, #24
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	589b      	ldr	r3, [r3, r2]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2203      	movs	r2, #3
 8003f22:	4013      	ands	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	220f      	movs	r2, #15
 8003f28:	409a      	lsls	r2, r3
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	43da      	mvns	r2, r3
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	23a0      	movs	r3, #160	; 0xa0
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d013      	beq.n	8003f66 <HAL_GPIO_Init+0x1ca>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a45      	ldr	r2, [pc, #276]	; (8004058 <HAL_GPIO_Init+0x2bc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00d      	beq.n	8003f62 <HAL_GPIO_Init+0x1c6>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a44      	ldr	r2, [pc, #272]	; (800405c <HAL_GPIO_Init+0x2c0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <HAL_GPIO_Init+0x1c2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a43      	ldr	r2, [pc, #268]	; (8004060 <HAL_GPIO_Init+0x2c4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d101      	bne.n	8003f5a <HAL_GPIO_Init+0x1be>
 8003f56:	2303      	movs	r3, #3
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x1cc>
 8003f5a:	2305      	movs	r3, #5
 8003f5c:	e004      	b.n	8003f68 <HAL_GPIO_Init+0x1cc>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e002      	b.n	8003f68 <HAL_GPIO_Init+0x1cc>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_GPIO_Init+0x1cc>
 8003f66:	2300      	movs	r3, #0
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	00d2      	lsls	r2, r2, #3
 8003f70:	4093      	lsls	r3, r2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003f78:	4936      	ldr	r1, [pc, #216]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3318      	adds	r3, #24
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003f86:	4a33      	ldr	r2, [pc, #204]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	58d3      	ldr	r3, [r2, r3]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	2380      	movs	r3, #128	; 0x80
 8003f9e:	025b      	lsls	r3, r3, #9
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fac:	4929      	ldr	r1, [pc, #164]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003fae:	2280      	movs	r2, #128	; 0x80
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003fb4:	4a27      	ldr	r2, [pc, #156]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003fb6:	2384      	movs	r3, #132	; 0x84
 8003fb8:	58d3      	ldr	r3, [r2, r3]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	2380      	movs	r3, #128	; 0x80
 8003fcc:	029b      	lsls	r3, r3, #10
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fda:	491e      	ldr	r1, [pc, #120]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003fdc:	2284      	movs	r2, #132	; 0x84
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43da      	mvns	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	035b      	lsls	r3, r3, #13
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004006:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	43da      	mvns	r2, r3
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	039b      	lsls	r3, r3, #14
 8004024:	4013      	ands	r3, r2
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_GPIO_Init+0x2b8>)
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	3301      	adds	r3, #1
 800403a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	40da      	lsrs	r2, r3
 8004044:	1e13      	subs	r3, r2, #0
 8004046:	d000      	beq.n	800404a <HAL_GPIO_Init+0x2ae>
 8004048:	e6b0      	b.n	8003dac <HAL_GPIO_Init+0x10>
  }
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b006      	add	sp, #24
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021800 	.word	0x40021800
 8004058:	50000400 	.word	0x50000400
 800405c:	50000800 	.word	0x50000800
 8004060:	50000c00 	.word	0x50000c00

08004064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e082      	b.n	800417c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2241      	movs	r2, #65	; 0x41
 800407a:	5c9b      	ldrb	r3, [r3, r2]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2240      	movs	r2, #64	; 0x40
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f7fe fba1 	bl	80027d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2241      	movs	r2, #65	; 0x41
 8004096:	2124      	movs	r1, #36	; 0x24
 8004098:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	438a      	bics	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4934      	ldr	r1, [pc, #208]	; (8004184 <HAL_I2C_Init+0x120>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4931      	ldr	r1, [pc, #196]	; (8004188 <HAL_I2C_Init+0x124>)
 80040c4:	400a      	ands	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d108      	bne.n	80040e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	0209      	lsls	r1, r1, #8
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	e007      	b.n	80040f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2184      	movs	r1, #132	; 0x84
 80040ec:	0209      	lsls	r1, r1, #8
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d104      	bne.n	8004104 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	0112      	lsls	r2, r2, #4
 8004102:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	491f      	ldr	r1, [pc, #124]	; (800418c <HAL_I2C_Init+0x128>)
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	491a      	ldr	r1, [pc, #104]	; (8004188 <HAL_I2C_Init+0x124>)
 8004120:	400a      	ands	r2, r1
 8004122:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	431a      	orrs	r2, r3
 800412e:	0011      	movs	r1, r2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	021a      	lsls	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69d9      	ldr	r1, [r3, #28]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1a      	ldr	r2, [r3, #32]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2241      	movs	r2, #65	; 0x41
 8004168:	2120      	movs	r1, #32
 800416a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2242      	movs	r2, #66	; 0x42
 8004176:	2100      	movs	r1, #0
 8004178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	0018      	movs	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}
 8004184:	f0ffffff 	.word	0xf0ffffff
 8004188:	ffff7fff 	.word	0xffff7fff
 800418c:	02008000 	.word	0x02008000

08004190 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4798      	blx	r3
  }
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	001a      	movs	r2, r3
 80041e2:	2301      	movs	r3, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	d010      	beq.n	800420a <HAL_I2C_ER_IRQHandler+0x46>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	09db      	lsrs	r3, r3, #7
 80041ec:	001a      	movs	r2, r3
 80041ee:	2301      	movs	r3, #1
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00a      	beq.n	800420a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f8:	2201      	movs	r2, #1
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2280      	movs	r2, #128	; 0x80
 8004206:	0052      	lsls	r2, r2, #1
 8004208:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	0a9b      	lsrs	r3, r3, #10
 800420e:	001a      	movs	r2, r3
 8004210:	2301      	movs	r3, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d010      	beq.n	8004238 <HAL_I2C_ER_IRQHandler+0x74>
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	09db      	lsrs	r3, r3, #7
 800421a:	001a      	movs	r2, r3
 800421c:	2301      	movs	r3, #1
 800421e:	4013      	ands	r3, r2
 8004220:	d00a      	beq.n	8004238 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	2208      	movs	r2, #8
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	00d2      	lsls	r2, r2, #3
 8004236:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	0a5b      	lsrs	r3, r3, #9
 800423c:	001a      	movs	r2, r3
 800423e:	2301      	movs	r3, #1
 8004240:	4013      	ands	r3, r2
 8004242:	d010      	beq.n	8004266 <HAL_I2C_ER_IRQHandler+0xa2>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	09db      	lsrs	r3, r3, #7
 8004248:	001a      	movs	r2, r3
 800424a:	2301      	movs	r3, #1
 800424c:	4013      	ands	r3, r2
 800424e:	d00a      	beq.n	8004266 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	2202      	movs	r2, #2
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2280      	movs	r2, #128	; 0x80
 8004262:	0092      	lsls	r2, r2, #2
 8004264:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	220b      	movs	r2, #11
 8004270:	4013      	ands	r3, r2
 8004272:	d005      	beq.n	8004280 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f000 fbd8 	bl	8004a30 <I2C_ITError>
  }
}
 8004280:	46c0      	nop			; (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b006      	add	sp, #24
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b002      	add	sp, #8
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b002      	add	sp, #8
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	0008      	movs	r0, r1
 80042b2:	0011      	movs	r1, r2
 80042b4:	1cfb      	adds	r3, r7, #3
 80042b6:	1c02      	adds	r2, r0, #0
 80042b8:	701a      	strb	r2, [r3, #0]
 80042ba:	003b      	movs	r3, r7
 80042bc:	1c0a      	adds	r2, r1, #0
 80042be:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b002      	add	sp, #8
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042f0:	46c0      	nop			; (mov r8, r8)
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b002      	add	sp, #8
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2240      	movs	r2, #64	; 0x40
 8004312:	5c9b      	ldrb	r3, [r3, r2]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <I2C_Slave_ISR_IT+0x24>
 8004318:	2302      	movs	r3, #2
 800431a:	e0fa      	b.n	8004512 <I2C_Slave_ISR_IT+0x21a>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	2101      	movs	r1, #1
 8004322:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	001a      	movs	r2, r3
 800432a:	2301      	movs	r3, #1
 800432c:	4013      	ands	r3, r2
 800432e:	d00b      	beq.n	8004348 <I2C_Slave_ISR_IT+0x50>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	001a      	movs	r2, r3
 8004336:	2301      	movs	r3, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d005      	beq.n	8004348 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	0011      	movs	r1, r2
 8004342:	0018      	movs	r0, r3
 8004344:	f000 f9f6 	bl	8004734 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	001a      	movs	r2, r3
 800434e:	2301      	movs	r3, #1
 8004350:	4013      	ands	r3, r2
 8004352:	d054      	beq.n	80043fe <I2C_Slave_ISR_IT+0x106>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	001a      	movs	r2, r3
 800435a:	2301      	movs	r3, #1
 800435c:	4013      	ands	r3, r2
 800435e:	d04e      	beq.n	80043fe <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d12d      	bne.n	80043c6 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2241      	movs	r2, #65	; 0x41
 800436e:	5c9b      	ldrb	r3, [r3, r2]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b28      	cmp	r3, #40	; 0x28
 8004374:	d10b      	bne.n	800438e <I2C_Slave_ISR_IT+0x96>
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	049b      	lsls	r3, r3, #18
 800437c:	429a      	cmp	r2, r3
 800437e:	d106      	bne.n	800438e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0011      	movs	r1, r2
 8004386:	0018      	movs	r0, r3
 8004388:	f000 faf8 	bl	800497c <I2C_ITListenCplt>
 800438c:	e036      	b.n	80043fc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2241      	movs	r2, #65	; 0x41
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b29      	cmp	r3, #41	; 0x29
 8004398:	d110      	bne.n	80043bc <I2C_Slave_ISR_IT+0xc4>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4a5f      	ldr	r2, [pc, #380]	; (800451c <I2C_Slave_ISR_IT+0x224>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00c      	beq.n	80043bc <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2210      	movs	r2, #16
 80043a8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 fc4a 	bl	8004c46 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f957 	bl	8004668 <I2C_ITSlaveSeqCplt>
 80043ba:	e01f      	b.n	80043fc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2210      	movs	r2, #16
 80043c2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80043c4:	e09d      	b.n	8004502 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2210      	movs	r2, #16
 80043cc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	2204      	movs	r2, #4
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <I2C_Slave_ISR_IT+0xf4>
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	045b      	lsls	r3, r3, #17
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d000      	beq.n	80043ec <I2C_Slave_ISR_IT+0xf4>
 80043ea:	e08a      	b.n	8004502 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f000 fb1b 	bl	8004a30 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043fa:	e082      	b.n	8004502 <I2C_Slave_ISR_IT+0x20a>
 80043fc:	e081      	b.n	8004502 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	001a      	movs	r2, r3
 8004404:	2301      	movs	r3, #1
 8004406:	4013      	ands	r3, r2
 8004408:	d031      	beq.n	800446e <I2C_Slave_ISR_IT+0x176>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	001a      	movs	r2, r3
 8004410:	2301      	movs	r3, #1
 8004412:	4013      	ands	r3, r2
 8004414:	d02b      	beq.n	800446e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d018      	beq.n	8004452 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d154      	bne.n	8004506 <I2C_Slave_ISR_IT+0x20e>
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <I2C_Slave_ISR_IT+0x224>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d050      	beq.n	8004506 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	0018      	movs	r0, r3
 8004468:	f000 f8fe 	bl	8004668 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800446c:	e04b      	b.n	8004506 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	001a      	movs	r2, r3
 8004474:	2301      	movs	r3, #1
 8004476:	4013      	ands	r3, r2
 8004478:	d00c      	beq.n	8004494 <I2C_Slave_ISR_IT+0x19c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	08db      	lsrs	r3, r3, #3
 800447e:	001a      	movs	r2, r3
 8004480:	2301      	movs	r3, #1
 8004482:	4013      	ands	r3, r2
 8004484:	d006      	beq.n	8004494 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	0011      	movs	r1, r2
 800448c:	0018      	movs	r0, r3
 800448e:	f000 f847 	bl	8004520 <I2C_ITAddrCplt>
 8004492:	e039      	b.n	8004508 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	085b      	lsrs	r3, r3, #1
 8004498:	001a      	movs	r2, r3
 800449a:	2301      	movs	r3, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d033      	beq.n	8004508 <I2C_Slave_ISR_IT+0x210>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	001a      	movs	r2, r3
 80044a6:	2301      	movs	r3, #1
 80044a8:	4013      	ands	r3, r2
 80044aa:	d02d      	beq.n	8004508 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	781a      	ldrb	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80044e6:	e00f      	b.n	8004508 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	045b      	lsls	r3, r3, #17
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d002      	beq.n	80044f8 <I2C_Slave_ISR_IT+0x200>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f000 f8b4 	bl	8004668 <I2C_ITSlaveSeqCplt>
 8004500:	e002      	b.n	8004508 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	e000      	b.n	8004508 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004506:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2240      	movs	r2, #64	; 0x40
 800450c:	2100      	movs	r1, #0
 800450e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	0018      	movs	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	b006      	add	sp, #24
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	ffff0000 	.word	0xffff0000

08004520 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004520:	b5b0      	push	{r4, r5, r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2241      	movs	r2, #65	; 0x41
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	001a      	movs	r2, r3
 8004534:	2328      	movs	r3, #40	; 0x28
 8004536:	4013      	ands	r3, r2
 8004538:	2b28      	cmp	r3, #40	; 0x28
 800453a:	d000      	beq.n	800453e <I2C_ITAddrCplt+0x1e>
 800453c:	e088      	b.n	8004650 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	b2da      	uxtb	r2, r3
 8004548:	250f      	movs	r5, #15
 800454a:	197b      	adds	r3, r7, r5
 800454c:	2101      	movs	r1, #1
 800454e:	400a      	ands	r2, r1
 8004550:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	b29a      	uxth	r2, r3
 800455c:	200c      	movs	r0, #12
 800455e:	183b      	adds	r3, r7, r0
 8004560:	21fe      	movs	r1, #254	; 0xfe
 8004562:	400a      	ands	r2, r1
 8004564:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	b29a      	uxth	r2, r3
 800456e:	240a      	movs	r4, #10
 8004570:	193b      	adds	r3, r7, r4
 8004572:	0592      	lsls	r2, r2, #22
 8004574:	0d92      	lsrs	r2, r2, #22
 8004576:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	b29a      	uxth	r2, r3
 8004580:	2308      	movs	r3, #8
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	21fe      	movs	r1, #254	; 0xfe
 8004586:	400a      	ands	r2, r1
 8004588:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d148      	bne.n	8004624 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8004592:	0021      	movs	r1, r4
 8004594:	187b      	adds	r3, r7, r1
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	09db      	lsrs	r3, r3, #7
 800459a:	b29a      	uxth	r2, r3
 800459c:	183b      	adds	r3, r7, r0
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	4053      	eors	r3, r2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	001a      	movs	r2, r3
 80045a6:	2306      	movs	r3, #6
 80045a8:	4013      	ands	r3, r2
 80045aa:	d120      	bne.n	80045ee <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80045ac:	183b      	adds	r3, r7, r0
 80045ae:	187a      	adds	r2, r7, r1
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d14c      	bne.n	8004660 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2208      	movs	r2, #8
 80045d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	; 0x40
 80045d8:	2100      	movs	r1, #0
 80045da:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045dc:	183b      	adds	r3, r7, r0
 80045de:	881a      	ldrh	r2, [r3, #0]
 80045e0:	197b      	adds	r3, r7, r5
 80045e2:	7819      	ldrb	r1, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	0018      	movs	r0, r3
 80045e8:	f7ff fe5e 	bl	80042a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045ec:	e038      	b.n	8004660 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80045ee:	240c      	movs	r4, #12
 80045f0:	193b      	adds	r3, r7, r4
 80045f2:	2208      	movs	r2, #8
 80045f4:	18ba      	adds	r2, r7, r2
 80045f6:	8812      	ldrh	r2, [r2, #0]
 80045f8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	021a      	lsls	r2, r3, #8
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f000 fb60 	bl	8004cc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	2100      	movs	r1, #0
 800460e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004610:	193b      	adds	r3, r7, r4
 8004612:	881a      	ldrh	r2, [r3, #0]
 8004614:	230f      	movs	r3, #15
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	7819      	ldrb	r1, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff fe43 	bl	80042a8 <HAL_I2C_AddrCallback>
}
 8004622:	e01d      	b.n	8004660 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004624:	2380      	movs	r3, #128	; 0x80
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f000 fb4b 	bl	8004cc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2240      	movs	r2, #64	; 0x40
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800463a:	230c      	movs	r3, #12
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	230f      	movs	r3, #15
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	7819      	ldrb	r1, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	0018      	movs	r0, r3
 800464a:	f7ff fe2d 	bl	80042a8 <HAL_I2C_AddrCallback>
}
 800464e:	e007      	b.n	8004660 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2208      	movs	r2, #8
 8004656:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2240      	movs	r2, #64	; 0x40
 800465c:	2100      	movs	r1, #0
 800465e:	5499      	strb	r1, [r3, r2]
}
 8004660:	46c0      	nop			; (mov r8, r8)
 8004662:	46bd      	mov	sp, r7
 8004664:	b004      	add	sp, #16
 8004666:	bdb0      	pop	{r4, r5, r7, pc}

08004668 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2242      	movs	r2, #66	; 0x42
 800467c:	2100      	movs	r1, #0
 800467e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	0b9b      	lsrs	r3, r3, #14
 8004684:	001a      	movs	r2, r3
 8004686:	2301      	movs	r3, #1
 8004688:	4013      	ands	r3, r2
 800468a:	d008      	beq.n	800469e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4925      	ldr	r1, [pc, #148]	; (800472c <I2C_ITSlaveSeqCplt+0xc4>)
 8004698:	400a      	ands	r2, r1
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e00d      	b.n	80046ba <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	0bdb      	lsrs	r3, r3, #15
 80046a2:	001a      	movs	r2, r3
 80046a4:	2301      	movs	r3, #1
 80046a6:	4013      	ands	r3, r2
 80046a8:	d007      	beq.n	80046ba <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	491e      	ldr	r1, [pc, #120]	; (8004730 <I2C_ITSlaveSeqCplt+0xc8>)
 80046b6:	400a      	ands	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2241      	movs	r2, #65	; 0x41
 80046be:	5c9b      	ldrb	r3, [r3, r2]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b29      	cmp	r3, #41	; 0x29
 80046c4:	d114      	bne.n	80046f0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2241      	movs	r2, #65	; 0x41
 80046ca:	2128      	movs	r1, #40	; 0x28
 80046cc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2221      	movs	r2, #33	; 0x21
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2101      	movs	r1, #1
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 faf5 	bl	8004cc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2240      	movs	r2, #64	; 0x40
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff fdcd 	bl	8004288 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046ee:	e019      	b.n	8004724 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2241      	movs	r2, #65	; 0x41
 80046f4:	5c9b      	ldrb	r3, [r3, r2]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b2a      	cmp	r3, #42	; 0x2a
 80046fa:	d113      	bne.n	8004724 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2241      	movs	r2, #65	; 0x41
 8004700:	2128      	movs	r1, #40	; 0x28
 8004702:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2222      	movs	r2, #34	; 0x22
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2102      	movs	r1, #2
 800470e:	0018      	movs	r0, r3
 8004710:	f000 fada 	bl	8004cc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2240      	movs	r2, #64	; 0x40
 8004718:	2100      	movs	r1, #0
 800471a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f7ff fdba 	bl	8004298 <HAL_I2C_SlaveRxCpltCallback>
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}
 800472c:	ffffbfff 	.word	0xffffbfff
 8004730:	ffff7fff 	.word	0xffff7fff

08004734 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800474a:	200f      	movs	r0, #15
 800474c:	183b      	adds	r3, r7, r0
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	2141      	movs	r1, #65	; 0x41
 8004752:	5c52      	ldrb	r2, [r2, r1]
 8004754:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2220      	movs	r2, #32
 800475c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800475e:	183b      	adds	r3, r7, r0
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b21      	cmp	r3, #33	; 0x21
 8004764:	d003      	beq.n	800476e <I2C_ITSlaveCplt+0x3a>
 8004766:	183b      	adds	r3, r7, r0
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b29      	cmp	r3, #41	; 0x29
 800476c:	d109      	bne.n	8004782 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800476e:	4a7d      	ldr	r2, [pc, #500]	; (8004964 <I2C_ITSlaveCplt+0x230>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0011      	movs	r1, r2
 8004774:	0018      	movs	r0, r3
 8004776:	f000 faa7 	bl	8004cc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2221      	movs	r2, #33	; 0x21
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
 8004780:	e011      	b.n	80047a6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004782:	220f      	movs	r2, #15
 8004784:	18bb      	adds	r3, r7, r2
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b22      	cmp	r3, #34	; 0x22
 800478a:	d003      	beq.n	8004794 <I2C_ITSlaveCplt+0x60>
 800478c:	18bb      	adds	r3, r7, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b2a      	cmp	r3, #42	; 0x2a
 8004792:	d108      	bne.n	80047a6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004794:	4a74      	ldr	r2, [pc, #464]	; (8004968 <I2C_ITSlaveCplt+0x234>)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0011      	movs	r1, r2
 800479a:	0018      	movs	r0, r3
 800479c:	f000 fa94 	bl	8004cc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2222      	movs	r2, #34	; 0x22
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	0209      	lsls	r1, r1, #8
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	496a      	ldr	r1, [pc, #424]	; (800496c <I2C_ITSlaveCplt+0x238>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fa3b 	bl	8004c46 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	0b9b      	lsrs	r3, r3, #14
 80047d4:	001a      	movs	r2, r3
 80047d6:	2301      	movs	r3, #1
 80047d8:	4013      	ands	r3, r2
 80047da:	d013      	beq.n	8004804 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4962      	ldr	r1, [pc, #392]	; (8004970 <I2C_ITSlaveCplt+0x23c>)
 80047e8:	400a      	ands	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d020      	beq.n	8004836 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004802:	e018      	b.n	8004836 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	0bdb      	lsrs	r3, r3, #15
 8004808:	001a      	movs	r2, r3
 800480a:	2301      	movs	r3, #1
 800480c:	4013      	ands	r3, r2
 800480e:	d012      	beq.n	8004836 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4956      	ldr	r1, [pc, #344]	; (8004974 <I2C_ITSlaveCplt+0x240>)
 800481c:	400a      	ands	r2, r1
 800481e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	001a      	movs	r2, r3
 800483c:	2301      	movs	r3, #1
 800483e:	4013      	ands	r3, r2
 8004840:	d020      	beq.n	8004884 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2204      	movs	r2, #4
 8004846:	4393      	bics	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00c      	beq.n	8004884 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	2204      	movs	r2, #4
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2242      	movs	r2, #66	; 0x42
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d013      	beq.n	80048d8 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	0011      	movs	r1, r2
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 f8b9 	bl	8004a30 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2241      	movs	r2, #65	; 0x41
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b28      	cmp	r3, #40	; 0x28
 80048c8:	d147      	bne.n	800495a <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0011      	movs	r1, r2
 80048d0:	0018      	movs	r0, r3
 80048d2:	f000 f853 	bl	800497c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048d6:	e040      	b.n	800495a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	4a26      	ldr	r2, [pc, #152]	; (8004978 <I2C_ITSlaveCplt+0x244>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d016      	beq.n	8004910 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7ff febf 	bl	8004668 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a22      	ldr	r2, [pc, #136]	; (8004978 <I2C_ITSlaveCplt+0x244>)
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2241      	movs	r2, #65	; 0x41
 80048f4:	2120      	movs	r1, #32
 80048f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2240      	movs	r2, #64	; 0x40
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	0018      	movs	r0, r3
 800490a:	f7ff fcdd 	bl	80042c8 <HAL_I2C_ListenCpltCallback>
}
 800490e:	e024      	b.n	800495a <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2241      	movs	r2, #65	; 0x41
 8004914:	5c9b      	ldrb	r3, [r3, r2]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b22      	cmp	r3, #34	; 0x22
 800491a:	d10f      	bne.n	800493c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2241      	movs	r2, #65	; 0x41
 8004920:	2120      	movs	r1, #32
 8004922:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2240      	movs	r2, #64	; 0x40
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff fcaf 	bl	8004298 <HAL_I2C_SlaveRxCpltCallback>
}
 800493a:	e00e      	b.n	800495a <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2241      	movs	r2, #65	; 0x41
 8004940:	2120      	movs	r1, #32
 8004942:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2240      	movs	r2, #64	; 0x40
 800494e:	2100      	movs	r1, #0
 8004950:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff fc97 	bl	8004288 <HAL_I2C_SlaveTxCpltCallback>
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b006      	add	sp, #24
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	00008001 	.word	0x00008001
 8004968:	00008002 	.word	0x00008002
 800496c:	fe00e800 	.word	0xfe00e800
 8004970:	ffffbfff 	.word	0xffffbfff
 8004974:	ffff7fff 	.word	0xffff7fff
 8004978:	ffff0000 	.word	0xffff0000

0800497c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <I2C_ITListenCplt+0xac>)
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2241      	movs	r2, #65	; 0x41
 8004996:	2120      	movs	r1, #32
 8004998:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2242      	movs	r2, #66	; 0x42
 800499e:	2100      	movs	r1, #0
 80049a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	089b      	lsrs	r3, r3, #2
 80049ac:	001a      	movs	r2, r3
 80049ae:	2301      	movs	r3, #1
 80049b0:	4013      	ands	r3, r2
 80049b2:	d022      	beq.n	80049fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d012      	beq.n	80049fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	2204      	movs	r2, #4
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049fa:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <I2C_ITListenCplt+0xb0>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	0011      	movs	r1, r2
 8004a00:	0018      	movs	r0, r3
 8004a02:	f000 f961 	bl	8004cc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2210      	movs	r2, #16
 8004a0c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2240      	movs	r2, #64	; 0x40
 8004a12:	2100      	movs	r1, #0
 8004a14:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7ff fc55 	bl	80042c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	ffff0000 	.word	0xffff0000
 8004a2c:	00008003 	.word	0x00008003

08004a30 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a3a:	200f      	movs	r0, #15
 8004a3c:	183b      	adds	r3, r7, r0
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	2141      	movs	r1, #65	; 0x41
 8004a42:	5c52      	ldrb	r2, [r2, r1]
 8004a44:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2242      	movs	r2, #66	; 0x42
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a62      	ldr	r2, [pc, #392]	; (8004bdc <I2C_ITError+0x1ac>)
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a66:	183b      	adds	r3, r7, r0
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b28      	cmp	r3, #40	; 0x28
 8004a6c:	d007      	beq.n	8004a7e <I2C_ITError+0x4e>
 8004a6e:	183b      	adds	r3, r7, r0
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b29      	cmp	r3, #41	; 0x29
 8004a74:	d003      	beq.n	8004a7e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a76:	183b      	adds	r3, r7, r0
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7c:	d10c      	bne.n	8004a98 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2103      	movs	r1, #3
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 f920 	bl	8004cc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2241      	movs	r2, #65	; 0x41
 8004a8c:	2128      	movs	r1, #40	; 0x28
 8004a8e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a53      	ldr	r2, [pc, #332]	; (8004be0 <I2C_ITError+0x1b0>)
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
 8004a96:	e012      	b.n	8004abe <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <I2C_ITError+0x1b4>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0011      	movs	r1, r2
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 f912 	bl	8004cc8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2241      	movs	r2, #65	; 0x41
 8004aa8:	5c9b      	ldrb	r3, [r3, r2]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b60      	cmp	r3, #96	; 0x60
 8004aae:	d003      	beq.n	8004ab8 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2241      	movs	r2, #65	; 0x41
 8004ab4:	2120      	movs	r1, #32
 8004ab6:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d03b      	beq.n	8004b44 <I2C_ITError+0x114>
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b11      	cmp	r3, #17
 8004ad0:	d002      	beq.n	8004ad8 <I2C_ITError+0xa8>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b21      	cmp	r3, #33	; 0x21
 8004ad6:	d135      	bne.n	8004b44 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	01db      	lsls	r3, r3, #7
 8004ae2:	401a      	ands	r2, r3
 8004ae4:	2380      	movs	r3, #128	; 0x80
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d107      	bne.n	8004afc <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	493c      	ldr	r1, [pc, #240]	; (8004be8 <I2C_ITError+0x1b8>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff f8af 	bl	8003c64 <HAL_DMA_GetState>
 8004b06:	0003      	movs	r3, r0
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d016      	beq.n	8004b3a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	4a36      	ldr	r2, [pc, #216]	; (8004bec <I2C_ITError+0x1bc>)
 8004b12:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	2100      	movs	r1, #0
 8004b1a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fe ff83 	bl	8003a2c <HAL_DMA_Abort_IT>
 8004b26:	1e03      	subs	r3, r0, #0
 8004b28:	d051      	beq.n	8004bce <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b34:	0018      	movs	r0, r3
 8004b36:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b38:	e049      	b.n	8004bce <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f000 f859 	bl	8004bf4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b42:	e044      	b.n	8004bce <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d03b      	beq.n	8004bc4 <I2C_ITError+0x194>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b12      	cmp	r3, #18
 8004b50:	d002      	beq.n	8004b58 <I2C_ITError+0x128>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b22      	cmp	r3, #34	; 0x22
 8004b56:	d135      	bne.n	8004bc4 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	401a      	ands	r2, r3
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d107      	bne.n	8004b7c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	491e      	ldr	r1, [pc, #120]	; (8004bf0 <I2C_ITError+0x1c0>)
 8004b78:	400a      	ands	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7ff f86f 	bl	8003c64 <HAL_DMA_GetState>
 8004b86:	0003      	movs	r3, r0
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d016      	beq.n	8004bba <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	4a16      	ldr	r2, [pc, #88]	; (8004bec <I2C_ITError+0x1bc>)
 8004b92:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2240      	movs	r2, #64	; 0x40
 8004b98:	2100      	movs	r1, #0
 8004b9a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	f7fe ff43 	bl	8003a2c <HAL_DMA_Abort_IT>
 8004ba6:	1e03      	subs	r3, r0, #0
 8004ba8:	d013      	beq.n	8004bd2 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bb8:	e00b      	b.n	8004bd2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	f000 f819 	bl	8004bf4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bc2:	e006      	b.n	8004bd2 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 f814 	bl	8004bf4 <I2C_TreatErrorCallback>
  }
}
 8004bcc:	e002      	b.n	8004bd4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	e000      	b.n	8004bd4 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bd2:	46c0      	nop			; (mov r8, r8)
}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b004      	add	sp, #16
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	ffff0000 	.word	0xffff0000
 8004be0:	080042f9 	.word	0x080042f9
 8004be4:	00008003 	.word	0x00008003
 8004be8:	ffffbfff 	.word	0xffffbfff
 8004bec:	08004c8b 	.word	0x08004c8b
 8004bf0:	ffff7fff 	.word	0xffff7fff

08004bf4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2241      	movs	r2, #65	; 0x41
 8004c00:	5c9b      	ldrb	r3, [r3, r2]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b60      	cmp	r3, #96	; 0x60
 8004c06:	d10f      	bne.n	8004c28 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2241      	movs	r2, #65	; 0x41
 8004c0c:	2120      	movs	r1, #32
 8004c0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f7ff fb61 	bl	80042e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c26:	e00a      	b.n	8004c3e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2240      	movs	r2, #64	; 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff fb4d 	bl	80042d8 <HAL_I2C_ErrorCallback>
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b002      	add	sp, #8
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d103      	bne.n	8004c64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2200      	movs	r2, #0
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d007      	beq.n	8004c82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699a      	ldr	r2, [r3, #24]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	619a      	str	r2, [r3, #24]
  }
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	46bd      	mov	sp, r7
 8004c86:	b002      	add	sp, #8
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f7ff ff9a 	bl	8004bf4 <I2C_TreatErrorCallback>
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b004      	add	sp, #16
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	000a      	movs	r2, r1
 8004cd2:	1cbb      	adds	r3, r7, #2
 8004cd4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004cda:	1cbb      	adds	r3, r7, #2
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d010      	beq.n	8004d06 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2242      	movs	r2, #66	; 0x42
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2241      	movs	r2, #65	; 0x41
 8004cf0:	5c9b      	ldrb	r3, [r3, r2]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	2328      	movs	r3, #40	; 0x28
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b28      	cmp	r3, #40	; 0x28
 8004cfc:	d003      	beq.n	8004d06 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	22b0      	movs	r2, #176	; 0xb0
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d06:	1cbb      	adds	r3, r7, #2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d010      	beq.n	8004d32 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2244      	movs	r2, #68	; 0x44
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2241      	movs	r2, #65	; 0x41
 8004d1c:	5c9b      	ldrb	r3, [r3, r2]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	001a      	movs	r2, r3
 8004d22:	2328      	movs	r3, #40	; 0x28
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b28      	cmp	r3, #40	; 0x28
 8004d28:	d003      	beq.n	8004d32 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	22b0      	movs	r2, #176	; 0xb0
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d32:	1cbb      	adds	r3, r7, #2
 8004d34:	2200      	movs	r2, #0
 8004d36:	5e9b      	ldrsh	r3, [r3, r2]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	da03      	bge.n	8004d44 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	22b8      	movs	r2, #184	; 0xb8
 8004d40:	4313      	orrs	r3, r2
 8004d42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d44:	1cbb      	adds	r3, r7, #2
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d103      	bne.n	8004d54 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2290      	movs	r2, #144	; 0x90
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d54:	1cbb      	adds	r3, r7, #2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d103      	bne.n	8004d64 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004d64:	1cbb      	adds	r3, r7, #2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d103      	bne.n	8004d74 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2240      	movs	r2, #64	; 0x40
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	43d9      	mvns	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	400a      	ands	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]
}
 8004d86:	46c0      	nop			; (mov r8, r8)
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	b004      	add	sp, #16
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2241      	movs	r2, #65	; 0x41
 8004d9e:	5c9b      	ldrb	r3, [r3, r2]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b20      	cmp	r3, #32
 8004da4:	d138      	bne.n	8004e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2240      	movs	r2, #64	; 0x40
 8004daa:	5c9b      	ldrb	r3, [r3, r2]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e032      	b.n	8004e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2240      	movs	r2, #64	; 0x40
 8004db8:	2101      	movs	r1, #1
 8004dba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2241      	movs	r2, #65	; 0x41
 8004dc0:	2124      	movs	r1, #36	; 0x24
 8004dc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2101      	movs	r1, #1
 8004dd0:	438a      	bics	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4911      	ldr	r1, [pc, #68]	; (8004e24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2101      	movs	r1, #1
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2241      	movs	r2, #65	; 0x41
 8004e08:	2120      	movs	r1, #32
 8004e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2240      	movs	r2, #64	; 0x40
 8004e10:	2100      	movs	r1, #0
 8004e12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e000      	b.n	8004e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e18:	2302      	movs	r3, #2
  }
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b002      	add	sp, #8
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	ffffefff 	.word	0xffffefff

08004e28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2241      	movs	r2, #65	; 0x41
 8004e36:	5c9b      	ldrb	r3, [r3, r2]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b20      	cmp	r3, #32
 8004e3c:	d139      	bne.n	8004eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2240      	movs	r2, #64	; 0x40
 8004e42:	5c9b      	ldrb	r3, [r3, r2]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e033      	b.n	8004eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	2101      	movs	r1, #1
 8004e52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2241      	movs	r2, #65	; 0x41
 8004e58:	2124      	movs	r1, #36	; 0x24
 8004e5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2101      	movs	r1, #1
 8004e68:	438a      	bics	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2101      	movs	r1, #1
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2241      	movs	r2, #65	; 0x41
 8004ea2:	2120      	movs	r1, #32
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2240      	movs	r2, #64	; 0x40
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b004      	add	sp, #16
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	fffff0ff 	.word	0xfffff0ff

08004ec0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0e5      	b.n	800509e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2235      	movs	r2, #53	; 0x35
 8004ed6:	5c9b      	ldrb	r3, [r3, r2]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d107      	bne.n	8004eee <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2234      	movs	r2, #52	; 0x34
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f7fd fcc7 	bl	800287c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2235      	movs	r2, #53	; 0x35
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4969      	ldr	r1, [pc, #420]	; (80050a8 <HAL_I2S_Init+0x1e8>)
 8004f02:	400a      	ands	r2, r1
 8004f04:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d100      	bne.n	8004f18 <HAL_I2S_Init+0x58>
 8004f16:	e076      	b.n	8005006 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004f20:	2310      	movs	r3, #16
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e001      	b.n	8004f2a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004f26:	2320      	movs	r3, #32
 8004f28:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d802      	bhi.n	8004f38 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f001 f865 	bl	800600c <HAL_RCCEx_GetPeriphCLKFreq>
 8004f42:	0003      	movs	r3, r0
 8004f44:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d131      	bne.n	8004fb6 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7fb f8cf 	bl	8000104 <__udivsi3>
 8004f66:	0003      	movs	r3, r0
 8004f68:	001a      	movs	r2, r3
 8004f6a:	0013      	movs	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	189b      	adds	r3, r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	001a      	movs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	0019      	movs	r1, r3
 8004f7a:	0010      	movs	r0, r2
 8004f7c:	f7fb f8c2 	bl	8000104 <__udivsi3>
 8004f80:	0003      	movs	r3, r0
 8004f82:	3305      	adds	r3, #5
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	e02a      	b.n	8004fde <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	0019      	movs	r1, r3
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7fb f8b8 	bl	8000104 <__udivsi3>
 8004f94:	0003      	movs	r3, r0
 8004f96:	001a      	movs	r2, r3
 8004f98:	0013      	movs	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	189b      	adds	r3, r3, r2
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	001a      	movs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	0010      	movs	r0, r2
 8004faa:	f7fb f8ab 	bl	8000104 <__udivsi3>
 8004fae:	0003      	movs	r3, r0
 8004fb0:	3305      	adds	r3, #5
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	e013      	b.n	8004fde <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004fb6:	6979      	ldr	r1, [r7, #20]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7fb f8a3 	bl	8000104 <__udivsi3>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	0013      	movs	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	001a      	movs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	0010      	movs	r0, r2
 8004fd4:	f7fb f896 	bl	8000104 <__udivsi3>
 8004fd8:	0003      	movs	r3, r0
 8004fda:	3305      	adds	r3, #5
 8004fdc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	210a      	movs	r1, #10
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7fb f88e 	bl	8000104 <__udivsi3>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	085b      	lsrs	r3, r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	61bb      	str	r3, [r7, #24]
 8005004:	e003      	b.n	800500e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005006:	2302      	movs	r3, #2
 8005008:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d902      	bls.n	800501a <HAL_I2S_Init+0x15a>
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2bff      	cmp	r3, #255	; 0xff
 8005018:	d907      	bls.n	800502a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	2210      	movs	r2, #16
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e039      	b.n	800509e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	431a      	orrs	r2, r3
 8005032:	0011      	movs	r1, r2
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	430a      	orrs	r2, r1
 800503c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_I2S_Init+0x1e8>)
 8005046:	401a      	ands	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	4319      	orrs	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4319      	orrs	r1, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	430b      	orrs	r3, r1
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	0109      	lsls	r1, r1, #4
 8005068:	430a      	orrs	r2, r1
 800506a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b30      	cmp	r3, #48	; 0x30
 8005072:	d003      	beq.n	800507c <HAL_I2S_Init+0x1bc>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2bb0      	cmp	r3, #176	; 0xb0
 800507a:	d108      	bne.n	800508e <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69da      	ldr	r2, [r3, #28]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	0149      	lsls	r1, r1, #5
 800508a:	430a      	orrs	r2, r1
 800508c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2235      	movs	r2, #53	; 0x35
 8005098:	2101      	movs	r1, #1
 800509a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b008      	add	sp, #32
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	fffff040 	.word	0xfffff040

080050ac <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	001a      	movs	r2, r3
 80050ca:	2301      	movs	r3, #1
 80050cc:	4013      	ands	r3, r2
 80050ce:	d10e      	bne.n	80050ee <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2201      	movs	r2, #1
 80050d4:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 80050d6:	d00a      	beq.n	80050ee <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	099b      	lsrs	r3, r3, #6
 80050dc:	001a      	movs	r2, r3
 80050de:	2301      	movs	r3, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 f892 	bl	8005210 <I2S_Receive_IT>
    return;
 80050ec:	e046      	b.n	800517c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	001a      	movs	r2, r3
 80050f4:	2301      	movs	r3, #1
 80050f6:	4013      	ands	r3, r2
 80050f8:	d00a      	beq.n	8005110 <HAL_I2S_IRQHandler+0x64>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	001a      	movs	r2, r3
 8005100:	2301      	movs	r3, #1
 8005102:	4013      	ands	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f000 f852 	bl	80051b2 <I2S_Transmit_IT>
    return;
 800510e:	e035      	b.n	800517c <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	001a      	movs	r2, r3
 8005116:	2301      	movs	r3, #1
 8005118:	4013      	ands	r3, r2
 800511a:	d02f      	beq.n	800517c <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	099b      	lsrs	r3, r3, #6
 8005120:	001a      	movs	r2, r3
 8005122:	2301      	movs	r3, #1
 8005124:	4013      	ands	r3, r2
 8005126:	d00d      	beq.n	8005144 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2160      	movs	r1, #96	; 0x60
 8005134:	438a      	bics	r2, r1
 8005136:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	2202      	movs	r2, #2
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	08db      	lsrs	r3, r3, #3
 8005148:	001a      	movs	r2, r3
 800514a:	2301      	movs	r3, #1
 800514c:	4013      	ands	r3, r2
 800514e:	d00d      	beq.n	800516c <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	21a0      	movs	r1, #160	; 0xa0
 800515c:	438a      	bics	r2, r1
 800515e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	2204      	movs	r2, #4
 8005166:	431a      	orrs	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2235      	movs	r2, #53	; 0x35
 8005170:	2101      	movs	r1, #1
 8005172:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	0018      	movs	r0, r3
 8005178:	f000 f813 	bl	80051a2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800517c:	46bd      	mov	sp, r7
 800517e:	b004      	add	sp, #16
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	46bd      	mov	sp, r7
 800518e:	b002      	add	sp, #8
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	46bd      	mov	sp, r7
 800519e:	b002      	add	sp, #8
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b002      	add	sp, #8
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	21a0      	movs	r1, #160	; 0xa0
 80051f4:	438a      	bics	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2235      	movs	r2, #53	; 0x35
 80051fc:	2101      	movs	r1, #1
 80051fe:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff ffbd 	bl	8005182 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005208:	46c0      	nop			; (mov r8, r8)
 800520a:	46bd      	mov	sp, r7
 800520c:	b002      	add	sp, #8
 800520e:	bd80      	pop	{r7, pc}

08005210 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	b292      	uxth	r2, r2
 8005224:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10f      	bne.n	8005268 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2160      	movs	r1, #96	; 0x60
 8005254:	438a      	bics	r2, r1
 8005256:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2235      	movs	r2, #53	; 0x35
 800525c:	2101      	movs	r1, #1
 800525e:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	0018      	movs	r0, r3
 8005264:	f7ff ff95 	bl	8005192 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	b002      	add	sp, #8
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005278:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800527e:	4013      	ands	r3, r2
 8005280:	0019      	movs	r1, r3
 8005282:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	430a      	orrs	r2, r1
 8005288:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	429a      	cmp	r2, r3
 8005292:	d11f      	bne.n	80052d4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8005294:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	0013      	movs	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	189b      	adds	r3, r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4912      	ldr	r1, [pc, #72]	; (80052ec <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7fa ff2e 	bl	8000104 <__udivsi3>
 80052a8:	0003      	movs	r3, r0
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052ae:	e008      	b.n	80052c2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	e001      	b.n	80052c2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e009      	b.n	80052d6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052c4:	695a      	ldr	r2, [r3, #20]
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	401a      	ands	r2, r3
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d0ed      	beq.n	80052b0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	0018      	movs	r0, r3
 80052d8:	46bd      	mov	sp, r7
 80052da:	b004      	add	sp, #16
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	40007000 	.word	0x40007000
 80052e4:	fffff9ff 	.word	0xfffff9ff
 80052e8:	20003134 	.word	0x20003134
 80052ec:	000f4240 	.word	0x000f4240

080052f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80052f4:	4b03      	ldr	r3, [pc, #12]	; (8005304 <LL_RCC_GetAPB1Prescaler+0x14>)
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	23e0      	movs	r3, #224	; 0xe0
 80052fa:	01db      	lsls	r3, r3, #7
 80052fc:	4013      	ands	r3, r2
}
 80052fe:	0018      	movs	r0, r3
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000

08005308 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e304      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2201      	movs	r2, #1
 8005320:	4013      	ands	r3, r2
 8005322:	d100      	bne.n	8005326 <HAL_RCC_OscConfig+0x1e>
 8005324:	e07c      	b.n	8005420 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005326:	4bc3      	ldr	r3, [pc, #780]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2238      	movs	r2, #56	; 0x38
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005330:	4bc0      	ldr	r3, [pc, #768]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	2203      	movs	r2, #3
 8005336:	4013      	ands	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b10      	cmp	r3, #16
 800533e:	d102      	bne.n	8005346 <HAL_RCC_OscConfig+0x3e>
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	2b03      	cmp	r3, #3
 8005344:	d002      	beq.n	800534c <HAL_RCC_OscConfig+0x44>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d10b      	bne.n	8005364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534c:	4bb9      	ldr	r3, [pc, #740]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	2380      	movs	r3, #128	; 0x80
 8005352:	029b      	lsls	r3, r3, #10
 8005354:	4013      	ands	r3, r2
 8005356:	d062      	beq.n	800541e <HAL_RCC_OscConfig+0x116>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d15e      	bne.n	800541e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e2df      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	429a      	cmp	r2, r3
 800536e:	d107      	bne.n	8005380 <HAL_RCC_OscConfig+0x78>
 8005370:	4bb0      	ldr	r3, [pc, #704]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4baf      	ldr	r3, [pc, #700]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005376:	2180      	movs	r1, #128	; 0x80
 8005378:	0249      	lsls	r1, r1, #9
 800537a:	430a      	orrs	r2, r1
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e020      	b.n	80053c2 <HAL_RCC_OscConfig+0xba>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	23a0      	movs	r3, #160	; 0xa0
 8005386:	02db      	lsls	r3, r3, #11
 8005388:	429a      	cmp	r2, r3
 800538a:	d10e      	bne.n	80053aa <HAL_RCC_OscConfig+0xa2>
 800538c:	4ba9      	ldr	r3, [pc, #676]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4ba8      	ldr	r3, [pc, #672]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005392:	2180      	movs	r1, #128	; 0x80
 8005394:	02c9      	lsls	r1, r1, #11
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	4ba6      	ldr	r3, [pc, #664]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4ba5      	ldr	r3, [pc, #660]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	0249      	lsls	r1, r1, #9
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	e00b      	b.n	80053c2 <HAL_RCC_OscConfig+0xba>
 80053aa:	4ba2      	ldr	r3, [pc, #648]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4ba1      	ldr	r3, [pc, #644]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80053b0:	49a1      	ldr	r1, [pc, #644]	; (8005638 <HAL_RCC_OscConfig+0x330>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	4b9f      	ldr	r3, [pc, #636]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	4b9e      	ldr	r3, [pc, #632]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80053bc:	499f      	ldr	r1, [pc, #636]	; (800563c <HAL_RCC_OscConfig+0x334>)
 80053be:	400a      	ands	r2, r1
 80053c0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fd fe9d 	bl	8003108 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d4:	f7fd fe98 	bl	8003108 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	; 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e29e      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e6:	4b93      	ldr	r3, [pc, #588]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	2380      	movs	r3, #128	; 0x80
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	4013      	ands	r3, r2
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0xcc>
 80053f2:	e015      	b.n	8005420 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fd fe88 	bl	8003108 <HAL_GetTick>
 80053f8:	0003      	movs	r3, r0
 80053fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053fe:	f7fd fe83 	bl	8003108 <HAL_GetTick>
 8005402:	0002      	movs	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b64      	cmp	r3, #100	; 0x64
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e289      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005410:	4b88      	ldr	r3, [pc, #544]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	4013      	ands	r3, r2
 800541a:	d1f0      	bne.n	80053fe <HAL_RCC_OscConfig+0xf6>
 800541c:	e000      	b.n	8005420 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2202      	movs	r2, #2
 8005426:	4013      	ands	r3, r2
 8005428:	d100      	bne.n	800542c <HAL_RCC_OscConfig+0x124>
 800542a:	e099      	b.n	8005560 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800542c:	4b81      	ldr	r3, [pc, #516]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2238      	movs	r2, #56	; 0x38
 8005432:	4013      	ands	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005436:	4b7f      	ldr	r3, [pc, #508]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2203      	movs	r2, #3
 800543c:	4013      	ands	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b10      	cmp	r3, #16
 8005444:	d102      	bne.n	800544c <HAL_RCC_OscConfig+0x144>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d002      	beq.n	8005452 <HAL_RCC_OscConfig+0x14a>
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d135      	bne.n	80054be <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005452:	4b78      	ldr	r3, [pc, #480]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4013      	ands	r3, r2
 800545c:	d005      	beq.n	800546a <HAL_RCC_OscConfig+0x162>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e25c      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800546a:	4b72      	ldr	r3, [pc, #456]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4a74      	ldr	r2, [pc, #464]	; (8005640 <HAL_RCC_OscConfig+0x338>)
 8005470:	4013      	ands	r3, r2
 8005472:	0019      	movs	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	021a      	lsls	r2, r3, #8
 800547a:	4b6e      	ldr	r3, [pc, #440]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800547c:	430a      	orrs	r2, r1
 800547e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d112      	bne.n	80054ac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005486:	4b6b      	ldr	r3, [pc, #428]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a6e      	ldr	r2, [pc, #440]	; (8005644 <HAL_RCC_OscConfig+0x33c>)
 800548c:	4013      	ands	r3, r2
 800548e:	0019      	movs	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691a      	ldr	r2, [r3, #16]
 8005494:	4b67      	ldr	r3, [pc, #412]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005496:	430a      	orrs	r2, r1
 8005498:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800549a:	4b66      	ldr	r3, [pc, #408]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	0adb      	lsrs	r3, r3, #11
 80054a0:	2207      	movs	r2, #7
 80054a2:	4013      	ands	r3, r2
 80054a4:	4a68      	ldr	r2, [pc, #416]	; (8005648 <HAL_RCC_OscConfig+0x340>)
 80054a6:	40da      	lsrs	r2, r3
 80054a8:	4b68      	ldr	r3, [pc, #416]	; (800564c <HAL_RCC_OscConfig+0x344>)
 80054aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80054ac:	4b68      	ldr	r3, [pc, #416]	; (8005650 <HAL_RCC_OscConfig+0x348>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7fd fdcd 	bl	8003050 <HAL_InitTick>
 80054b6:	1e03      	subs	r3, r0, #0
 80054b8:	d051      	beq.n	800555e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e232      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d030      	beq.n	8005528 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80054c6:	4b5b      	ldr	r3, [pc, #364]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5e      	ldr	r2, [pc, #376]	; (8005644 <HAL_RCC_OscConfig+0x33c>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	0019      	movs	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	4b57      	ldr	r3, [pc, #348]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80054da:	4b56      	ldr	r3, [pc, #344]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b55      	ldr	r3, [pc, #340]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	0049      	lsls	r1, r1, #1
 80054e4:	430a      	orrs	r2, r1
 80054e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fd fe0e 	bl	8003108 <HAL_GetTick>
 80054ec:	0003      	movs	r3, r0
 80054ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f2:	f7fd fe09 	bl	8003108 <HAL_GetTick>
 80054f6:	0002      	movs	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e20f      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005504:	4b4b      	ldr	r3, [pc, #300]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	00db      	lsls	r3, r3, #3
 800550c:	4013      	ands	r3, r2
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005510:	4b48      	ldr	r3, [pc, #288]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4a4a      	ldr	r2, [pc, #296]	; (8005640 <HAL_RCC_OscConfig+0x338>)
 8005516:	4013      	ands	r3, r2
 8005518:	0019      	movs	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	021a      	lsls	r2, r3, #8
 8005520:	4b44      	ldr	r3, [pc, #272]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005522:	430a      	orrs	r2, r1
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	e01b      	b.n	8005560 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b41      	ldr	r3, [pc, #260]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800552e:	4949      	ldr	r1, [pc, #292]	; (8005654 <HAL_RCC_OscConfig+0x34c>)
 8005530:	400a      	ands	r2, r1
 8005532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fd fde8 	bl	8003108 <HAL_GetTick>
 8005538:	0003      	movs	r3, r0
 800553a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553e:	f7fd fde3 	bl	8003108 <HAL_GetTick>
 8005542:	0002      	movs	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e1e9      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005550:	4b38      	ldr	r3, [pc, #224]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	4013      	ands	r3, r2
 800555a:	d1f0      	bne.n	800553e <HAL_RCC_OscConfig+0x236>
 800555c:	e000      	b.n	8005560 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800555e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2208      	movs	r2, #8
 8005566:	4013      	ands	r3, r2
 8005568:	d047      	beq.n	80055fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800556a:	4b32      	ldr	r3, [pc, #200]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2238      	movs	r2, #56	; 0x38
 8005570:	4013      	ands	r3, r2
 8005572:	2b18      	cmp	r3, #24
 8005574:	d10a      	bne.n	800558c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005576:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557a:	2202      	movs	r2, #2
 800557c:	4013      	ands	r3, r2
 800557e:	d03c      	beq.n	80055fa <HAL_RCC_OscConfig+0x2f2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d138      	bne.n	80055fa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e1cb      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005594:	4b27      	ldr	r3, [pc, #156]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005598:	4b26      	ldr	r3, [pc, #152]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800559a:	2101      	movs	r1, #1
 800559c:	430a      	orrs	r2, r1
 800559e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a0:	f7fd fdb2 	bl	8003108 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fd fdad 	bl	8003108 <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1b3      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055bc:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80055be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d0f1      	beq.n	80055aa <HAL_RCC_OscConfig+0x2a2>
 80055c6:	e018      	b.n	80055fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80055ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80055ce:	2101      	movs	r1, #1
 80055d0:	438a      	bics	r2, r1
 80055d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fd fd98 	bl	8003108 <HAL_GetTick>
 80055d8:	0003      	movs	r3, r0
 80055da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055de:	f7fd fd93 	bl	8003108 <HAL_GetTick>
 80055e2:	0002      	movs	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e199      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055f0:	4b10      	ldr	r3, [pc, #64]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d1f1      	bne.n	80055de <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2204      	movs	r2, #4
 8005600:	4013      	ands	r3, r2
 8005602:	d100      	bne.n	8005606 <HAL_RCC_OscConfig+0x2fe>
 8005604:	e0c6      	b.n	8005794 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005606:	231f      	movs	r3, #31
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2238      	movs	r2, #56	; 0x38
 8005614:	4013      	ands	r3, r2
 8005616:	2b20      	cmp	r3, #32
 8005618:	d11e      	bne.n	8005658 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <HAL_RCC_OscConfig+0x32c>)
 800561c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561e:	2202      	movs	r2, #2
 8005620:	4013      	ands	r3, r2
 8005622:	d100      	bne.n	8005626 <HAL_RCC_OscConfig+0x31e>
 8005624:	e0b6      	b.n	8005794 <HAL_RCC_OscConfig+0x48c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d000      	beq.n	8005630 <HAL_RCC_OscConfig+0x328>
 800562e:	e0b1      	b.n	8005794 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e177      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
 8005634:	40021000 	.word	0x40021000
 8005638:	fffeffff 	.word	0xfffeffff
 800563c:	fffbffff 	.word	0xfffbffff
 8005640:	ffff80ff 	.word	0xffff80ff
 8005644:	ffffc7ff 	.word	0xffffc7ff
 8005648:	00f42400 	.word	0x00f42400
 800564c:	20003134 	.word	0x20003134
 8005650:	20003138 	.word	0x20003138
 8005654:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005658:	4bb4      	ldr	r3, [pc, #720]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800565a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	055b      	lsls	r3, r3, #21
 8005660:	4013      	ands	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x360>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_RCC_OscConfig+0x362>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d011      	beq.n	8005692 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	4baf      	ldr	r3, [pc, #700]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005672:	4bae      	ldr	r3, [pc, #696]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	0549      	lsls	r1, r1, #21
 8005678:	430a      	orrs	r2, r1
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c
 800567c:	4bab      	ldr	r3, [pc, #684]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800567e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	055b      	lsls	r3, r3, #21
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800568a:	231f      	movs	r3, #31
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005692:	4ba7      	ldr	r3, [pc, #668]	; (8005930 <HAL_RCC_OscConfig+0x628>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	2380      	movs	r3, #128	; 0x80
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4013      	ands	r3, r2
 800569c:	d11a      	bne.n	80056d4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800569e:	4ba4      	ldr	r3, [pc, #656]	; (8005930 <HAL_RCC_OscConfig+0x628>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4ba3      	ldr	r3, [pc, #652]	; (8005930 <HAL_RCC_OscConfig+0x628>)
 80056a4:	2180      	movs	r1, #128	; 0x80
 80056a6:	0049      	lsls	r1, r1, #1
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80056ac:	f7fd fd2c 	bl	8003108 <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b6:	f7fd fd27 	bl	8003108 <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e12d      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c8:	4b99      	ldr	r3, [pc, #612]	; (8005930 <HAL_RCC_OscConfig+0x628>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	2380      	movs	r3, #128	; 0x80
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	4013      	ands	r3, r2
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d106      	bne.n	80056ea <HAL_RCC_OscConfig+0x3e2>
 80056dc:	4b93      	ldr	r3, [pc, #588]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80056de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056e0:	4b92      	ldr	r3, [pc, #584]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80056e2:	2101      	movs	r1, #1
 80056e4:	430a      	orrs	r2, r1
 80056e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80056e8:	e01c      	b.n	8005724 <HAL_RCC_OscConfig+0x41c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d10c      	bne.n	800570c <HAL_RCC_OscConfig+0x404>
 80056f2:	4b8e      	ldr	r3, [pc, #568]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80056f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056f6:	4b8d      	ldr	r3, [pc, #564]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80056f8:	2104      	movs	r1, #4
 80056fa:	430a      	orrs	r2, r1
 80056fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80056fe:	4b8b      	ldr	r3, [pc, #556]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005702:	4b8a      	ldr	r3, [pc, #552]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005704:	2101      	movs	r1, #1
 8005706:	430a      	orrs	r2, r1
 8005708:	65da      	str	r2, [r3, #92]	; 0x5c
 800570a:	e00b      	b.n	8005724 <HAL_RCC_OscConfig+0x41c>
 800570c:	4b87      	ldr	r3, [pc, #540]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800570e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005710:	4b86      	ldr	r3, [pc, #536]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005712:	2101      	movs	r1, #1
 8005714:	438a      	bics	r2, r1
 8005716:	65da      	str	r2, [r3, #92]	; 0x5c
 8005718:	4b84      	ldr	r3, [pc, #528]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800571a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800571c:	4b83      	ldr	r3, [pc, #524]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800571e:	2104      	movs	r1, #4
 8005720:	438a      	bics	r2, r1
 8005722:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d014      	beq.n	8005756 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fd fcec 	bl	8003108 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005734:	e009      	b.n	800574a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fd fce7 	bl	8003108 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	4a7c      	ldr	r2, [pc, #496]	; (8005934 <HAL_RCC_OscConfig+0x62c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e0ec      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800574a:	4b78      	ldr	r3, [pc, #480]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800574c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574e:	2202      	movs	r2, #2
 8005750:	4013      	ands	r3, r2
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x42e>
 8005754:	e013      	b.n	800577e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fd fcd7 	bl	8003108 <HAL_GetTick>
 800575a:	0003      	movs	r3, r0
 800575c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800575e:	e009      	b.n	8005774 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005760:	f7fd fcd2 	bl	8003108 <HAL_GetTick>
 8005764:	0002      	movs	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	4a72      	ldr	r2, [pc, #456]	; (8005934 <HAL_RCC_OscConfig+0x62c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e0d7      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005774:	4b6d      	ldr	r3, [pc, #436]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005778:	2202      	movs	r2, #2
 800577a:	4013      	ands	r3, r2
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800577e:	231f      	movs	r3, #31
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d105      	bne.n	8005794 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005788:	4b68      	ldr	r3, [pc, #416]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800578a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800578c:	4b67      	ldr	r3, [pc, #412]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800578e:	496a      	ldr	r1, [pc, #424]	; (8005938 <HAL_RCC_OscConfig+0x630>)
 8005790:	400a      	ands	r2, r1
 8005792:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d100      	bne.n	800579e <HAL_RCC_OscConfig+0x496>
 800579c:	e0c1      	b.n	8005922 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800579e:	4b63      	ldr	r3, [pc, #396]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2238      	movs	r2, #56	; 0x38
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d100      	bne.n	80057ac <HAL_RCC_OscConfig+0x4a4>
 80057aa:	e081      	b.n	80058b0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d156      	bne.n	8005862 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b4:	4b5d      	ldr	r3, [pc, #372]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	4b5c      	ldr	r3, [pc, #368]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80057ba:	4960      	ldr	r1, [pc, #384]	; (800593c <HAL_RCC_OscConfig+0x634>)
 80057bc:	400a      	ands	r2, r1
 80057be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c0:	f7fd fca2 	bl	8003108 <HAL_GetTick>
 80057c4:	0003      	movs	r3, r0
 80057c6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ca:	f7fd fc9d 	bl	8003108 <HAL_GetTick>
 80057ce:	0002      	movs	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e0a3      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	049b      	lsls	r3, r3, #18
 80057e4:	4013      	ands	r3, r2
 80057e6:	d1f0      	bne.n	80057ca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	4a54      	ldr	r2, [pc, #336]	; (8005940 <HAL_RCC_OscConfig+0x638>)
 80057ee:	4013      	ands	r3, r2
 80057f0:	0019      	movs	r1, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1a      	ldr	r2, [r3, #32]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	431a      	orrs	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005814:	431a      	orrs	r2, r3
 8005816:	4b45      	ldr	r3, [pc, #276]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005818:	430a      	orrs	r2, r1
 800581a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800581c:	4b43      	ldr	r3, [pc, #268]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b42      	ldr	r3, [pc, #264]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005822:	2180      	movs	r1, #128	; 0x80
 8005824:	0449      	lsls	r1, r1, #17
 8005826:	430a      	orrs	r2, r1
 8005828:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800582a:	4b40      	ldr	r3, [pc, #256]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	4b3f      	ldr	r3, [pc, #252]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005830:	2180      	movs	r1, #128	; 0x80
 8005832:	0549      	lsls	r1, r1, #21
 8005834:	430a      	orrs	r2, r1
 8005836:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fd fc66 	bl	8003108 <HAL_GetTick>
 800583c:	0003      	movs	r3, r0
 800583e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005840:	e008      	b.n	8005854 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005842:	f7fd fc61 	bl	8003108 <HAL_GetTick>
 8005846:	0002      	movs	r2, r0
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e067      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005854:	4b35      	ldr	r3, [pc, #212]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	049b      	lsls	r3, r3, #18
 800585c:	4013      	ands	r3, r2
 800585e:	d0f0      	beq.n	8005842 <HAL_RCC_OscConfig+0x53a>
 8005860:	e05f      	b.n	8005922 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	4b31      	ldr	r3, [pc, #196]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005868:	4934      	ldr	r1, [pc, #208]	; (800593c <HAL_RCC_OscConfig+0x634>)
 800586a:	400a      	ands	r2, r1
 800586c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005874:	2103      	movs	r1, #3
 8005876:	438a      	bics	r2, r1
 8005878:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800587a:	4b2c      	ldr	r3, [pc, #176]	; (800592c <HAL_RCC_OscConfig+0x624>)
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCC_OscConfig+0x624>)
 8005880:	4930      	ldr	r1, [pc, #192]	; (8005944 <HAL_RCC_OscConfig+0x63c>)
 8005882:	400a      	ands	r2, r1
 8005884:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fd fc3f 	bl	8003108 <HAL_GetTick>
 800588a:	0003      	movs	r3, r0
 800588c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005890:	f7fd fc3a 	bl	8003108 <HAL_GetTick>
 8005894:	0002      	movs	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e040      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a2:	4b22      	ldr	r3, [pc, #136]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	049b      	lsls	r3, r3, #18
 80058aa:	4013      	ands	r3, r2
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x588>
 80058ae:	e038      	b.n	8005922 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e033      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <HAL_RCC_OscConfig+0x624>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2203      	movs	r2, #3
 80058c6:	401a      	ands	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d126      	bne.n	800591e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2270      	movs	r2, #112	; 0x70
 80058d4:	401a      	ands	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	429a      	cmp	r2, r3
 80058dc:	d11f      	bne.n	800591e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	23fe      	movs	r3, #254	; 0xfe
 80058e2:	01db      	lsls	r3, r3, #7
 80058e4:	401a      	ands	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d116      	bne.n	800591e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	23f8      	movs	r3, #248	; 0xf8
 80058f4:	039b      	lsls	r3, r3, #14
 80058f6:	401a      	ands	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d10e      	bne.n	800591e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	23e0      	movs	r3, #224	; 0xe0
 8005904:	051b      	lsls	r3, r3, #20
 8005906:	401a      	ands	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d106      	bne.n	800591e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	0f5b      	lsrs	r3, r3, #29
 8005914:	075a      	lsls	r2, r3, #29
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800591a:	429a      	cmp	r2, r3
 800591c:	d001      	beq.n	8005922 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b008      	add	sp, #32
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021000 	.word	0x40021000
 8005930:	40007000 	.word	0x40007000
 8005934:	00001388 	.word	0x00001388
 8005938:	efffffff 	.word	0xefffffff
 800593c:	feffffff 	.word	0xfeffffff
 8005940:	11c1808c 	.word	0x11c1808c
 8005944:	eefeffff 	.word	0xeefeffff

08005948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0e9      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800595c:	4b76      	ldr	r3, [pc, #472]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2207      	movs	r2, #7
 8005962:	4013      	ands	r3, r2
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d91e      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b73      	ldr	r3, [pc, #460]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2207      	movs	r2, #7
 8005970:	4393      	bics	r3, r2
 8005972:	0019      	movs	r1, r3
 8005974:	4b70      	ldr	r3, [pc, #448]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800597c:	f7fd fbc4 	bl	8003108 <HAL_GetTick>
 8005980:	0003      	movs	r3, r0
 8005982:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005984:	e009      	b.n	800599a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005986:	f7fd fbbf 	bl	8003108 <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	4a6a      	ldr	r2, [pc, #424]	; (8005b3c <HAL_RCC_ClockConfig+0x1f4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e0ca      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800599a:	4b67      	ldr	r3, [pc, #412]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2207      	movs	r2, #7
 80059a0:	4013      	ands	r3, r2
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d1ee      	bne.n	8005986 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2202      	movs	r2, #2
 80059ae:	4013      	ands	r3, r2
 80059b0:	d015      	beq.n	80059de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2204      	movs	r2, #4
 80059b8:	4013      	ands	r3, r2
 80059ba:	d006      	beq.n	80059ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059bc:	4b60      	ldr	r3, [pc, #384]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	4b5f      	ldr	r3, [pc, #380]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 80059c2:	21e0      	movs	r1, #224	; 0xe0
 80059c4:	01c9      	lsls	r1, r1, #7
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059ca:	4b5d      	ldr	r3, [pc, #372]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	4a5d      	ldr	r2, [pc, #372]	; (8005b44 <HAL_RCC_ClockConfig+0x1fc>)
 80059d0:	4013      	ands	r3, r2
 80059d2:	0019      	movs	r1, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	4b59      	ldr	r3, [pc, #356]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 80059da:	430a      	orrs	r2, r1
 80059dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2201      	movs	r2, #1
 80059e4:	4013      	ands	r3, r2
 80059e6:	d057      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d107      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f0:	4b53      	ldr	r3, [pc, #332]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	029b      	lsls	r3, r3, #10
 80059f8:	4013      	ands	r3, r2
 80059fa:	d12b      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e097      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d107      	bne.n	8005a18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a08:	4b4d      	ldr	r3, [pc, #308]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	2380      	movs	r3, #128	; 0x80
 8005a0e:	049b      	lsls	r3, r3, #18
 8005a10:	4013      	ands	r3, r2
 8005a12:	d11f      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e08b      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a20:	4b47      	ldr	r3, [pc, #284]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d113      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e07f      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d106      	bne.n	8005a46 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a38:	4b41      	ldr	r3, [pc, #260]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d108      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e074      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a46:	4b3e      	ldr	r3, [pc, #248]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e06d      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a54:	4b3a      	ldr	r3, [pc, #232]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2207      	movs	r2, #7
 8005a5a:	4393      	bics	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a68:	f7fd fb4e 	bl	8003108 <HAL_GetTick>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a70:	e009      	b.n	8005a86 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a72:	f7fd fb49 	bl	8003108 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	4a2f      	ldr	r2, [pc, #188]	; (8005b3c <HAL_RCC_ClockConfig+0x1f4>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e054      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2238      	movs	r2, #56	; 0x38
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d1ec      	bne.n	8005a72 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2207      	movs	r2, #7
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d21e      	bcs.n	8005ae4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2207      	movs	r2, #7
 8005aac:	4393      	bics	r3, r2
 8005aae:	0019      	movs	r1, r3
 8005ab0:	4b21      	ldr	r3, [pc, #132]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ab8:	f7fd fb26 	bl	8003108 <HAL_GetTick>
 8005abc:	0003      	movs	r3, r0
 8005abe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ac0:	e009      	b.n	8005ad6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac2:	f7fd fb21 	bl	8003108 <HAL_GetTick>
 8005ac6:	0002      	movs	r2, r0
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <HAL_RCC_ClockConfig+0x1f4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e02c      	b.n	8005b30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005ad6:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2207      	movs	r2, #7
 8005adc:	4013      	ands	r3, r2
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	4013      	ands	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <HAL_RCC_ClockConfig+0x200>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	0019      	movs	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005afe:	430a      	orrs	r2, r1
 8005b00:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005b02:	f000 f829 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8005b06:	0001      	movs	r1, r0
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <HAL_RCC_ClockConfig+0x1f8>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	0a1b      	lsrs	r3, r3, #8
 8005b0e:	220f      	movs	r2, #15
 8005b10:	401a      	ands	r2, r3
 8005b12:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <HAL_RCC_ClockConfig+0x204>)
 8005b14:	0092      	lsls	r2, r2, #2
 8005b16:	58d3      	ldr	r3, [r2, r3]
 8005b18:	221f      	movs	r2, #31
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	000a      	movs	r2, r1
 8005b1e:	40da      	lsrs	r2, r3
 8005b20:	4b0b      	ldr	r3, [pc, #44]	; (8005b50 <HAL_RCC_ClockConfig+0x208>)
 8005b22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_ClockConfig+0x20c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fd fa91 	bl	8003050 <HAL_InitTick>
 8005b2e:	0003      	movs	r3, r0
}
 8005b30:	0018      	movs	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	b004      	add	sp, #16
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40022000 	.word	0x40022000
 8005b3c:	00001388 	.word	0x00001388
 8005b40:	40021000 	.word	0x40021000
 8005b44:	fffff0ff 	.word	0xfffff0ff
 8005b48:	ffff8fff 	.word	0xffff8fff
 8005b4c:	0800a7c0 	.word	0x0800a7c0
 8005b50:	20003134 	.word	0x20003134
 8005b54:	20003138 	.word	0x20003138

08005b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b5e:	4b3c      	ldr	r3, [pc, #240]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2238      	movs	r2, #56	; 0x38
 8005b64:	4013      	ands	r3, r2
 8005b66:	d10f      	bne.n	8005b88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005b68:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	0adb      	lsrs	r3, r3, #11
 8005b6e:	2207      	movs	r2, #7
 8005b70:	4013      	ands	r3, r2
 8005b72:	2201      	movs	r2, #1
 8005b74:	409a      	lsls	r2, r3
 8005b76:	0013      	movs	r3, r2
 8005b78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	4835      	ldr	r0, [pc, #212]	; (8005c54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b7e:	f7fa fac1 	bl	8000104 <__udivsi3>
 8005b82:	0003      	movs	r3, r0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e05d      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b88:	4b31      	ldr	r3, [pc, #196]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	2238      	movs	r2, #56	; 0x38
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d102      	bne.n	8005b9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b94:	4b30      	ldr	r3, [pc, #192]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	e054      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b9a:	4b2d      	ldr	r3, [pc, #180]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2238      	movs	r2, #56	; 0x38
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d138      	bne.n	8005c18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ba6:	4b2a      	ldr	r3, [pc, #168]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2203      	movs	r2, #3
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bb0:	4b27      	ldr	r3, [pc, #156]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	4013      	ands	r3, r2
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d10d      	bne.n	8005be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	4824      	ldr	r0, [pc, #144]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x100>)
 8005bc8:	f7fa fa9c 	bl	8000104 <__udivsi3>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	0019      	movs	r1, r3
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	227f      	movs	r2, #127	; 0x7f
 8005bd8:	4013      	ands	r3, r2
 8005bda:	434b      	muls	r3, r1
 8005bdc:	617b      	str	r3, [r7, #20]
        break;
 8005bde:	e00d      	b.n	8005bfc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	481c      	ldr	r0, [pc, #112]	; (8005c54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005be4:	f7fa fa8e 	bl	8000104 <__udivsi3>
 8005be8:	0003      	movs	r3, r0
 8005bea:	0019      	movs	r1, r3
 8005bec:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	0a1b      	lsrs	r3, r3, #8
 8005bf2:	227f      	movs	r2, #127	; 0x7f
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	434b      	muls	r3, r1
 8005bf8:	617b      	str	r3, [r7, #20]
        break;
 8005bfa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005bfc:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	0f5b      	lsrs	r3, r3, #29
 8005c02:	2207      	movs	r2, #7
 8005c04:	4013      	ands	r3, r2
 8005c06:	3301      	adds	r3, #1
 8005c08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f7fa fa79 	bl	8000104 <__udivsi3>
 8005c12:	0003      	movs	r3, r0
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e015      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2238      	movs	r2, #56	; 0x38
 8005c1e:	4013      	ands	r3, r2
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d103      	bne.n	8005c2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005c24:	2380      	movs	r3, #128	; 0x80
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005c2c:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2238      	movs	r2, #56	; 0x38
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b18      	cmp	r3, #24
 8005c36:	d103      	bne.n	8005c40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005c38:	23fa      	movs	r3, #250	; 0xfa
 8005c3a:	01db      	lsls	r3, r3, #7
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	e001      	b.n	8005c44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c44:	693b      	ldr	r3, [r7, #16]
}
 8005c46:	0018      	movs	r0, r3
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b006      	add	sp, #24
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	40021000 	.word	0x40021000
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b02      	ldr	r3, [pc, #8]	; (8005c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	0018      	movs	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	20003134 	.word	0x20003134

08005c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c70:	b5b0      	push	{r4, r5, r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005c74:	f7ff fff2 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c78:	0004      	movs	r4, r0
 8005c7a:	f7ff fb39 	bl	80052f0 <LL_RCC_GetAPB1Prescaler>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	0b1a      	lsrs	r2, r3, #12
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c84:	0092      	lsls	r2, r2, #2
 8005c86:	58d3      	ldr	r3, [r2, r3]
 8005c88:	221f      	movs	r2, #31
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	40dc      	lsrs	r4, r3
 8005c8e:	0023      	movs	r3, r4
}
 8005c90:	0018      	movs	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bdb0      	pop	{r4, r5, r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	0800a800 	.word	0x0800a800

08005c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005ca4:	2313      	movs	r3, #19
 8005ca6:	18fb      	adds	r3, r7, r3
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cac:	2312      	movs	r3, #18
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	029b      	lsls	r3, r3, #10
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005cc0:	e0a3      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc2:	2011      	movs	r0, #17
 8005cc4:	183b      	adds	r3, r7, r0
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cca:	4bc3      	ldr	r3, [pc, #780]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	055b      	lsls	r3, r3, #21
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d110      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd6:	4bc0      	ldr	r3, [pc, #768]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cda:	4bbf      	ldr	r3, [pc, #764]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cdc:	2180      	movs	r1, #128	; 0x80
 8005cde:	0549      	lsls	r1, r1, #21
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ce4:	4bbc      	ldr	r3, [pc, #752]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	055b      	lsls	r3, r3, #21
 8005cec:	4013      	ands	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	183b      	adds	r3, r7, r0
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf8:	4bb8      	ldr	r3, [pc, #736]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4bb7      	ldr	r3, [pc, #732]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005cfe:	2180      	movs	r1, #128	; 0x80
 8005d00:	0049      	lsls	r1, r1, #1
 8005d02:	430a      	orrs	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d06:	f7fd f9ff 	bl	8003108 <HAL_GetTick>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d10:	f7fd f9fa 	bl	8003108 <HAL_GetTick>
 8005d14:	0002      	movs	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d904      	bls.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005d1e:	2313      	movs	r3, #19
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	2203      	movs	r2, #3
 8005d24:	701a      	strb	r2, [r3, #0]
        break;
 8005d26:	e005      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d28:	4bac      	ldr	r3, [pc, #688]	; (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4013      	ands	r3, r2
 8005d32:	d0ed      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005d34:	2313      	movs	r3, #19
 8005d36:	18fb      	adds	r3, r7, r3
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d154      	bne.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d3e:	4ba6      	ldr	r3, [pc, #664]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d42:	23c0      	movs	r3, #192	; 0xc0
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4013      	ands	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d019      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d014      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d5a:	4b9f      	ldr	r3, [pc, #636]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	4aa0      	ldr	r2, [pc, #640]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d64:	4b9c      	ldr	r3, [pc, #624]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d68:	4b9b      	ldr	r3, [pc, #620]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d6a:	2180      	movs	r1, #128	; 0x80
 8005d6c:	0249      	lsls	r1, r1, #9
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d72:	4b99      	ldr	r3, [pc, #612]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d76:	4b98      	ldr	r3, [pc, #608]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d78:	499a      	ldr	r1, [pc, #616]	; (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005d7a:	400a      	ands	r2, r1
 8005d7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d7e:	4b96      	ldr	r3, [pc, #600]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	2201      	movs	r2, #1
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d016      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8c:	f7fd f9bc 	bl	8003108 <HAL_GetTick>
 8005d90:	0003      	movs	r3, r0
 8005d92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d94:	e00c      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d96:	f7fd f9b7 	bl	8003108 <HAL_GetTick>
 8005d9a:	0002      	movs	r2, r0
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	4a91      	ldr	r2, [pc, #580]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d904      	bls.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005da6:	2313      	movs	r3, #19
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	2203      	movs	r2, #3
 8005dac:	701a      	strb	r2, [r3, #0]
            break;
 8005dae:	e004      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db0:	4b89      	ldr	r3, [pc, #548]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	2202      	movs	r2, #2
 8005db6:	4013      	ands	r3, r2
 8005db8:	d0ed      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005dba:	2313      	movs	r3, #19
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc4:	4b84      	ldr	r3, [pc, #528]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	4a85      	ldr	r2, [pc, #532]	; (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	0019      	movs	r1, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dd2:	4b81      	ldr	r3, [pc, #516]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005dd8:	e00c      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dda:	2312      	movs	r3, #18
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	2213      	movs	r2, #19
 8005de0:	18ba      	adds	r2, r7, r2
 8005de2:	7812      	ldrb	r2, [r2, #0]
 8005de4:	701a      	strb	r2, [r3, #0]
 8005de6:	e005      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de8:	2312      	movs	r3, #18
 8005dea:	18fb      	adds	r3, r7, r3
 8005dec:	2213      	movs	r2, #19
 8005dee:	18ba      	adds	r2, r7, r2
 8005df0:	7812      	ldrb	r2, [r2, #0]
 8005df2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005df4:	2311      	movs	r3, #17
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d105      	bne.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dfe:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e02:	4b75      	ldr	r3, [pc, #468]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e04:	4979      	ldr	r1, [pc, #484]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005e06:	400a      	ands	r2, r1
 8005e08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	4013      	ands	r3, r2
 8005e12:	d009      	beq.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e14:	4b70      	ldr	r3, [pc, #448]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	0019      	movs	r1, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	4b6d      	ldr	r3, [pc, #436]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e24:	430a      	orrs	r2, r1
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d009      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e32:	4b69      	ldr	r3, [pc, #420]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e36:	220c      	movs	r2, #12
 8005e38:	4393      	bics	r3, r2
 8005e3a:	0019      	movs	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	4b65      	ldr	r3, [pc, #404]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e42:	430a      	orrs	r2, r1
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e50:	4b61      	ldr	r3, [pc, #388]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	4a66      	ldr	r2, [pc, #408]	; (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	0019      	movs	r1, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	4b5e      	ldr	r3, [pc, #376]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e60:	430a      	orrs	r2, r1
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e70:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e74:	4a5f      	ldr	r2, [pc, #380]	; (8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	0019      	movs	r1, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	4b56      	ldr	r3, [pc, #344]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e80:	430a      	orrs	r2, r1
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	2380      	movs	r3, #128	; 0x80
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e90:	4b51      	ldr	r3, [pc, #324]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e94:	4a58      	ldr	r2, [pc, #352]	; (8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	0019      	movs	r1, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	4b4e      	ldr	r3, [pc, #312]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	4013      	ands	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb2:	4a52      	ldr	r2, [pc, #328]	; (8005ffc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	0019      	movs	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	4b46      	ldr	r3, [pc, #280]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	2380      	movs	r3, #128	; 0x80
 8005ec8:	01db      	lsls	r3, r3, #7
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d015      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ece:	4b42      	ldr	r3, [pc, #264]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	0899      	lsrs	r1, r3, #2
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1a      	ldr	r2, [r3, #32]
 8005eda:	4b3f      	ldr	r3, [pc, #252]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005edc:	430a      	orrs	r2, r1
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d106      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005eec:	4b3a      	ldr	r3, [pc, #232]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	4b39      	ldr	r3, [pc, #228]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ef2:	2180      	movs	r1, #128	; 0x80
 8005ef4:	0249      	lsls	r1, r1, #9
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	031b      	lsls	r3, r3, #12
 8005f02:	4013      	ands	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005f06:	4b34      	ldr	r3, [pc, #208]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	2240      	movs	r2, #64	; 0x40
 8005f0c:	4393      	bics	r3, r2
 8005f0e:	0019      	movs	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f14:	4b30      	ldr	r3, [pc, #192]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f16:	430a      	orrs	r2, r1
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	039b      	lsls	r3, r3, #14
 8005f22:	4013      	ands	r3, r2
 8005f24:	d016      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005f26:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f2a:	4a35      	ldr	r2, [pc, #212]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	0019      	movs	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f34:	4b28      	ldr	r3, [pc, #160]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f36:	430a      	orrs	r2, r1
 8005f38:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	03db      	lsls	r3, r3, #15
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d106      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f46:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f4c:	2180      	movs	r1, #128	; 0x80
 8005f4e:	0449      	lsls	r1, r1, #17
 8005f50:	430a      	orrs	r2, r1
 8005f52:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	03db      	lsls	r3, r3, #15
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d016      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005f60:	4b1d      	ldr	r3, [pc, #116]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f64:	4a27      	ldr	r2, [pc, #156]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f70:	430a      	orrs	r2, r1
 8005f72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	045b      	lsls	r3, r3, #17
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f80:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	4b14      	ldr	r3, [pc, #80]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	0449      	lsls	r1, r1, #17
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	4013      	ands	r3, r2
 8005f98:	d016      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	4a1a      	ldr	r2, [pc, #104]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005faa:	430a      	orrs	r2, r1
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	2380      	movs	r3, #128	; 0x80
 8005fb4:	01db      	lsls	r3, r3, #7
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d106      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005fba:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	0249      	lsls	r1, r1, #9
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005fc8:	2312      	movs	r3, #18
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	781b      	ldrb	r3, [r3, #0]
}
 8005fce:	0018      	movs	r0, r3
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b006      	add	sp, #24
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40007000 	.word	0x40007000
 8005fe0:	fffffcff 	.word	0xfffffcff
 8005fe4:	fffeffff 	.word	0xfffeffff
 8005fe8:	00001388 	.word	0x00001388
 8005fec:	efffffff 	.word	0xefffffff
 8005ff0:	fffff3ff 	.word	0xfffff3ff
 8005ff4:	fff3ffff 	.word	0xfff3ffff
 8005ff8:	ffcfffff 	.word	0xffcfffff
 8005ffc:	ffffcfff 	.word	0xffffcfff
 8006000:	ffbfffff 	.word	0xffbfffff
 8006004:	feffffff 	.word	0xfeffffff
 8006008:	ffff3fff 	.word	0xffff3fff

0800600c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	029b      	lsls	r3, r3, #10
 800601e:	429a      	cmp	r2, r3
 8006020:	d136      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006022:	4bcd      	ldr	r3, [pc, #820]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006026:	23c0      	movs	r3, #192	; 0xc0
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4013      	ands	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800602e:	4bca      	ldr	r3, [pc, #808]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006032:	2202      	movs	r2, #2
 8006034:	4013      	ands	r3, r2
 8006036:	2b02      	cmp	r3, #2
 8006038:	d108      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	429a      	cmp	r2, r3
 8006042:	d103      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8006044:	2380      	movs	r3, #128	; 0x80
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	e31c      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800604c:	4bc2      	ldr	r3, [pc, #776]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800604e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006050:	2202      	movs	r2, #2
 8006052:	4013      	ands	r3, r2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d108      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	2380      	movs	r3, #128	; 0x80
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	429a      	cmp	r2, r3
 8006060:	d103      	bne.n	800606a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8006062:	23fa      	movs	r3, #250	; 0xfa
 8006064:	01db      	lsls	r3, r3, #7
 8006066:	617b      	str	r3, [r7, #20]
 8006068:	e30d      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800606a:	4bbb      	ldr	r3, [pc, #748]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	401a      	ands	r2, r3
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	429a      	cmp	r2, r3
 800607a:	d000      	beq.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 800607c:	e303      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	23c0      	movs	r3, #192	; 0xc0
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	429a      	cmp	r2, r3
 8006086:	d000      	beq.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8006088:	e2fd      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 800608a:	4bb4      	ldr	r3, [pc, #720]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e2fa      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8006090:	4bb1      	ldr	r3, [pc, #708]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2203      	movs	r2, #3
 8006096:	4013      	ands	r3, r2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d102      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 800609c:	4bb0      	ldr	r3, [pc, #704]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	e00a      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 80060a2:	4bad      	ldr	r3, [pc, #692]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2203      	movs	r2, #3
 80060a8:	4013      	ands	r3, r2
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d102      	bne.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 80060ae:	4bad      	ldr	r3, [pc, #692]	; (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80060b8:	4ba7      	ldr	r3, [pc, #668]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	091b      	lsrs	r3, r3, #4
 80060be:	2207      	movs	r2, #7
 80060c0:	4013      	ands	r3, r2
 80060c2:	3301      	adds	r3, #1
 80060c4:	0019      	movs	r1, r3
 80060c6:	6938      	ldr	r0, [r7, #16]
 80060c8:	f7fa f81c 	bl	8000104 <__udivsi3>
 80060cc:	0003      	movs	r3, r0
 80060ce:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	03db      	lsls	r3, r3, #15
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d100      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 80060da:	e28e      	b.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	03db      	lsls	r3, r3, #15
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d900      	bls.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80060e6:	e2b7      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	2380      	movs	r3, #128	; 0x80
 80060ec:	039b      	lsls	r3, r3, #14
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d100      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80060f2:	e253      	b.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	039b      	lsls	r3, r3, #14
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d900      	bls.n	8006100 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80060fe:	e2ab      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	2380      	movs	r3, #128	; 0x80
 8006104:	031b      	lsls	r3, r3, #12
 8006106:	429a      	cmp	r2, r3
 8006108:	d100      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800610a:	e0b2      	b.n	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	2380      	movs	r3, #128	; 0x80
 8006110:	031b      	lsls	r3, r3, #12
 8006112:	429a      	cmp	r2, r3
 8006114:	d900      	bls.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006116:	e29f      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	01db      	lsls	r3, r3, #7
 800611e:	429a      	cmp	r2, r3
 8006120:	d100      	bne.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8006122:	e103      	b.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	01db      	lsls	r3, r3, #7
 800612a:	429a      	cmp	r2, r3
 800612c:	d900      	bls.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800612e:	e293      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	2380      	movs	r3, #128	; 0x80
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	429a      	cmp	r2, r3
 8006138:	d100      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800613a:	e165      	b.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	429a      	cmp	r2, r3
 8006144:	d900      	bls.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006146:	e287      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	429a      	cmp	r2, r3
 8006150:	d100      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8006152:	e1e3      	b.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	429a      	cmp	r2, r3
 800615c:	d900      	bls.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800615e:	e27b      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	429a      	cmp	r2, r3
 8006168:	d100      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800616a:	e197      	b.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	429a      	cmp	r2, r3
 8006174:	d900      	bls.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8006176:	e26f      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b20      	cmp	r3, #32
 800617c:	d100      	bne.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800617e:	e118      	b.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b20      	cmp	r3, #32
 8006184:	d900      	bls.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8006186:	e267      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b10      	cmp	r3, #16
 800618c:	d100      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800618e:	e093      	b.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b10      	cmp	r3, #16
 8006194:	d900      	bls.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006196:	e25f      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d003      	beq.n	80061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d033      	beq.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80061a4:	e258      	b.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061a6:	4b6c      	ldr	r3, [pc, #432]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	2203      	movs	r2, #3
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d104      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80061b6:	f7ff fd5b 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 80061ba:	0003      	movs	r3, r0
 80061bc:	617b      	str	r3, [r7, #20]
        break;
 80061be:	e24d      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d104      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 80061c6:	f7ff fcc7 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 80061ca:	0003      	movs	r3, r0
 80061cc:	617b      	str	r3, [r7, #20]
        break;
 80061ce:	e245      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061d0:	4b61      	ldr	r3, [pc, #388]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	2380      	movs	r3, #128	; 0x80
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	401a      	ands	r2, r3
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	00db      	lsls	r3, r3, #3
 80061de:	429a      	cmp	r2, r3
 80061e0:	d105      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d102      	bne.n	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 80061e8:	4b5d      	ldr	r3, [pc, #372]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061ea:	617b      	str	r3, [r7, #20]
        break;
 80061ec:	e236      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061ee:	4b5a      	ldr	r3, [pc, #360]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f2:	2202      	movs	r2, #2
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d000      	beq.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 80061fa:	e22f      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d000      	beq.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8006202:	e22b      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	617b      	str	r3, [r7, #20]
        break;
 800620a:	e227      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800620c:	4b52      	ldr	r3, [pc, #328]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800620e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006210:	220c      	movs	r2, #12
 8006212:	4013      	ands	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800621c:	f7ff fd28 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8006220:	0003      	movs	r3, r0
 8006222:	617b      	str	r3, [r7, #20]
        break;
 8006224:	e21c      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d104      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 800622c:	f7ff fc94 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8006230:	0003      	movs	r3, r0
 8006232:	617b      	str	r3, [r7, #20]
        break;
 8006234:	e214      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006236:	4b48      	ldr	r3, [pc, #288]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	401a      	ands	r2, r3
 8006240:	2380      	movs	r3, #128	; 0x80
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	429a      	cmp	r2, r3
 8006246:	d105      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d102      	bne.n	8006254 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800624e:	4b44      	ldr	r3, [pc, #272]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006250:	617b      	str	r3, [r7, #20]
        break;
 8006252:	e205      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006254:	4b40      	ldr	r3, [pc, #256]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006258:	2202      	movs	r2, #2
 800625a:	4013      	ands	r3, r2
 800625c:	2b02      	cmp	r3, #2
 800625e:	d000      	beq.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006260:	e1fe      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d000      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8006268:	e1fa      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	617b      	str	r3, [r7, #20]
        break;
 8006270:	e1f6      	b.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006272:	4b39      	ldr	r3, [pc, #228]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006276:	2240      	movs	r2, #64	; 0x40
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 800627c:	4b36      	ldr	r3, [pc, #216]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	2380      	movs	r3, #128	; 0x80
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	401a      	ands	r2, r3
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	429a      	cmp	r2, r3
 800628c:	d105      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8006294:	4b34      	ldr	r3, [pc, #208]	; (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8006296:	617b      	str	r3, [r7, #20]
        break;
 8006298:	e1e4      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800629a:	4b2f      	ldr	r3, [pc, #188]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800629c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629e:	2202      	movs	r2, #2
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d000      	beq.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80062a6:	e1dd      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d000      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80062ae:	e1d9      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	617b      	str	r3, [r7, #20]
        break;
 80062b6:	e1d5      	b.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80062b8:	4b27      	ldr	r3, [pc, #156]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062bc:	23c0      	movs	r3, #192	; 0xc0
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	4013      	ands	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80062ca:	f7ff fcd1 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 80062ce:	0003      	movs	r3, r0
 80062d0:	617b      	str	r3, [r7, #20]
        break;
 80062d2:	e1c9      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	00db      	lsls	r3, r3, #3
 80062da:	429a      	cmp	r2, r3
 80062dc:	d104      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80062de:	f7ff fc3b 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 80062e2:	0003      	movs	r3, r0
 80062e4:	617b      	str	r3, [r7, #20]
        break;
 80062e6:	e1bf      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80062e8:	4b1b      	ldr	r3, [pc, #108]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	401a      	ands	r2, r3
 80062f2:	2380      	movs	r3, #128	; 0x80
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d107      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	429a      	cmp	r2, r3
 8006302:	d102      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006304:	4b16      	ldr	r3, [pc, #88]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006306:	617b      	str	r3, [r7, #20]
        break;
 8006308:	e1ae      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	2202      	movs	r2, #2
 8006310:	4013      	ands	r3, r2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d000      	beq.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006316:	e1a7      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	23c0      	movs	r3, #192	; 0xc0
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	429a      	cmp	r2, r3
 8006320:	d000      	beq.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006322:	e1a1      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	617b      	str	r3, [r7, #20]
        break;
 800632a:	e19d      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800632e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006330:	0f9b      	lsrs	r3, r3, #30
 8006332:	079b      	lsls	r3, r3, #30
 8006334:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d104      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 800633c:	f7ff fc0c 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8006340:	0003      	movs	r3, r0
 8006342:	617b      	str	r3, [r7, #20]
        break;
 8006344:	e192      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	2380      	movs	r3, #128	; 0x80
 800634a:	061b      	lsls	r3, r3, #24
 800634c:	429a      	cmp	r2, r3
 800634e:	d10d      	bne.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8006350:	4b03      	ldr	r3, [pc, #12]	; (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006352:	617b      	str	r3, [r7, #20]
        break;
 8006354:	e18a      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	40021000 	.word	0x40021000
 800635c:	0003d090 	.word	0x0003d090
 8006360:	00f42400 	.word	0x00f42400
 8006364:	007a1200 	.word	0x007a1200
 8006368:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	2380      	movs	r3, #128	; 0x80
 8006370:	05db      	lsls	r3, r3, #23
 8006372:	429a      	cmp	r2, r3
 8006374:	d000      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8006376:	e179      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8006378:	4bc5      	ldr	r3, [pc, #788]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	025b      	lsls	r3, r3, #9
 8006380:	4013      	ands	r3, r2
 8006382:	d100      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006384:	e172      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006386:	4bc2      	ldr	r3, [pc, #776]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	0a1b      	lsrs	r3, r3, #8
 800638c:	227f      	movs	r2, #127	; 0x7f
 800638e:	4013      	ands	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	435a      	muls	r2, r3
 8006398:	4bbd      	ldr	r3, [pc, #756]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	0c5b      	lsrs	r3, r3, #17
 800639e:	211f      	movs	r1, #31
 80063a0:	400b      	ands	r3, r1
 80063a2:	3301      	adds	r3, #1
 80063a4:	0019      	movs	r1, r3
 80063a6:	0010      	movs	r0, r2
 80063a8:	f7f9 feac 	bl	8000104 <__udivsi3>
 80063ac:	0003      	movs	r3, r0
 80063ae:	617b      	str	r3, [r7, #20]
        break;
 80063b0:	e15c      	b.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80063b2:	4bb7      	ldr	r3, [pc, #732]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063b6:	23c0      	movs	r3, #192	; 0xc0
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	4013      	ands	r3, r2
 80063bc:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063c4:	f7ff fc54 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 80063c8:	0003      	movs	r3, r0
 80063ca:	617b      	str	r3, [r7, #20]
        break;
 80063cc:	e150      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	015b      	lsls	r3, r3, #5
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d104      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 80063d8:	f7ff fbbe 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 80063dc:	0003      	movs	r3, r0
 80063de:	617b      	str	r3, [r7, #20]
        break;
 80063e0:	e146      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80063e2:	4bab      	ldr	r3, [pc, #684]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	2380      	movs	r3, #128	; 0x80
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	401a      	ands	r2, r3
 80063ec:	2380      	movs	r3, #128	; 0x80
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d000      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80063f4:	e13c      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	019b      	lsls	r3, r3, #6
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d000      	beq.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006400:	e136      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8006402:	4ba4      	ldr	r3, [pc, #656]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006404:	617b      	str	r3, [r7, #20]
        break;
 8006406:	e133      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006408:	4ba1      	ldr	r3, [pc, #644]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800640a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640c:	23c0      	movs	r3, #192	; 0xc0
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	4013      	ands	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	01db      	lsls	r3, r3, #7
 800641a:	429a      	cmp	r2, r3
 800641c:	d11c      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800641e:	4b9c      	ldr	r3, [pc, #624]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	2380      	movs	r3, #128	; 0x80
 8006424:	025b      	lsls	r3, r3, #9
 8006426:	4013      	ands	r3, r2
 8006428:	d100      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800642a:	e123      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800642c:	4b98      	ldr	r3, [pc, #608]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	227f      	movs	r2, #127	; 0x7f
 8006434:	4013      	ands	r3, r2
 8006436:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	435a      	muls	r2, r3
 800643e:	4b94      	ldr	r3, [pc, #592]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	0c5b      	lsrs	r3, r3, #17
 8006444:	211f      	movs	r1, #31
 8006446:	400b      	ands	r3, r1
 8006448:	3301      	adds	r3, #1
 800644a:	0019      	movs	r1, r3
 800644c:	0010      	movs	r0, r2
 800644e:	f7f9 fe59 	bl	8000104 <__udivsi3>
 8006452:	0003      	movs	r3, r0
 8006454:	617b      	str	r3, [r7, #20]
        break;
 8006456:	e10d      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 800645e:	f7ff fb7b 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8006462:	0003      	movs	r3, r0
 8006464:	617b      	str	r3, [r7, #20]
        break;
 8006466:	e105      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8006468:	4b89      	ldr	r3, [pc, #548]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	401a      	ands	r2, r3
 8006472:	2380      	movs	r3, #128	; 0x80
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	429a      	cmp	r2, r3
 8006478:	d107      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	429a      	cmp	r2, r3
 8006482:	d102      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8006484:	4b83      	ldr	r3, [pc, #524]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006486:	617b      	str	r3, [r7, #20]
        break;
 8006488:	e0f4      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	23c0      	movs	r3, #192	; 0xc0
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	429a      	cmp	r2, r3
 8006492:	d000      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006494:	e0ee      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8006496:	4b80      	ldr	r3, [pc, #512]	; (8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8006498:	617b      	str	r3, [r7, #20]
        break;
 800649a:	e0eb      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800649c:	4b7c      	ldr	r3, [pc, #496]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800649e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064a0:	23c0      	movs	r3, #192	; 0xc0
 80064a2:	031b      	lsls	r3, r3, #12
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80064ae:	f7ff fbdf 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 80064b2:	0003      	movs	r3, r0
 80064b4:	617b      	str	r3, [r7, #20]
        break;
 80064b6:	e0df      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80064b8:	4b75      	ldr	r3, [pc, #468]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064bc:	2202      	movs	r2, #2
 80064be:	4013      	ands	r3, r2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d108      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	2380      	movs	r3, #128	; 0x80
 80064c8:	02db      	lsls	r3, r3, #11
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d103      	bne.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 80064ce:	23fa      	movs	r3, #250	; 0xfa
 80064d0:	01db      	lsls	r3, r3, #7
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e021      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80064d6:	4b6e      	ldr	r3, [pc, #440]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	401a      	ands	r2, r3
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d107      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	031b      	lsls	r3, r3, #12
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d102      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 80064f2:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e010      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80064f8:	4b65      	ldr	r3, [pc, #404]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064fc:	2202      	movs	r2, #2
 80064fe:	4013      	ands	r3, r2
 8006500:	2b02      	cmp	r3, #2
 8006502:	d000      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006504:	e0b8      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	23c0      	movs	r3, #192	; 0xc0
 800650a:	031b      	lsls	r3, r3, #12
 800650c:	429a      	cmp	r2, r3
 800650e:	d000      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006510:	e0b2      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	617b      	str	r3, [r7, #20]
        break;
 8006518:	e0ae      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800651a:	e0ad      	b.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800651c:	4b5c      	ldr	r3, [pc, #368]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800651e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006520:	23c0      	movs	r3, #192	; 0xc0
 8006522:	039b      	lsls	r3, r3, #14
 8006524:	4013      	ands	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800652e:	f7ff fb9f 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8006532:	0003      	movs	r3, r0
 8006534:	617b      	str	r3, [r7, #20]
        break;
 8006536:	e0a1      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006538:	4b55      	ldr	r3, [pc, #340]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800653a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800653c:	2202      	movs	r2, #2
 800653e:	4013      	ands	r3, r2
 8006540:	2b02      	cmp	r3, #2
 8006542:	d108      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	035b      	lsls	r3, r3, #13
 800654a:	429a      	cmp	r2, r3
 800654c:	d103      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800654e:	23fa      	movs	r3, #250	; 0xfa
 8006550:	01db      	lsls	r3, r3, #7
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	e021      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006556:	4b4e      	ldr	r3, [pc, #312]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	2380      	movs	r3, #128	; 0x80
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	401a      	ands	r2, r3
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	429a      	cmp	r2, r3
 8006566:	d107      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	039b      	lsls	r3, r3, #14
 800656e:	429a      	cmp	r2, r3
 8006570:	d102      	bne.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 8006572:	4b48      	ldr	r3, [pc, #288]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e010      	b.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006578:	4b45      	ldr	r3, [pc, #276]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800657a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800657c:	2202      	movs	r2, #2
 800657e:	4013      	ands	r3, r2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d000      	beq.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006584:	e07a      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	23c0      	movs	r3, #192	; 0xc0
 800658a:	039b      	lsls	r3, r3, #14
 800658c:	429a      	cmp	r2, r3
 800658e:	d000      	beq.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 8006590:	e074      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 8006592:	2380      	movs	r3, #128	; 0x80
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	617b      	str	r3, [r7, #20]
        break;
 8006598:	e070      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800659a:	e06f      	b.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 800659c:	4b3c      	ldr	r3, [pc, #240]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800659e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065a0:	2380      	movs	r3, #128	; 0x80
 80065a2:	03db      	lsls	r3, r3, #15
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	2380      	movs	r3, #128	; 0x80
 80065ac:	03db      	lsls	r3, r3, #15
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d11b      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80065b2:	4b37      	ldr	r3, [pc, #220]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	045b      	lsls	r3, r3, #17
 80065ba:	4013      	ands	r3, r2
 80065bc:	d060      	beq.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065be:	4b34      	ldr	r3, [pc, #208]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	227f      	movs	r2, #127	; 0x7f
 80065c6:	4013      	ands	r3, r2
 80065c8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	435a      	muls	r2, r3
 80065d0:	4b2f      	ldr	r3, [pc, #188]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	0e5b      	lsrs	r3, r3, #25
 80065d6:	2107      	movs	r1, #7
 80065d8:	400b      	ands	r3, r1
 80065da:	3301      	adds	r3, #1
 80065dc:	0019      	movs	r1, r3
 80065de:	0010      	movs	r0, r2
 80065e0:	f7f9 fd90 	bl	8000104 <__udivsi3>
 80065e4:	0003      	movs	r3, r0
 80065e6:	617b      	str	r3, [r7, #20]
        break;
 80065e8:	e04a      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d147      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7ff fb3e 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 80065f4:	0003      	movs	r3, r0
 80065f6:	617b      	str	r3, [r7, #20]
        break;
 80065f8:	e042      	b.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 80065fa:	4b25      	ldr	r3, [pc, #148]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80065fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	045b      	lsls	r3, r3, #17
 8006602:	4013      	ands	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	2380      	movs	r3, #128	; 0x80
 800660a:	045b      	lsls	r3, r3, #17
 800660c:	429a      	cmp	r2, r3
 800660e:	d11b      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006610:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	045b      	lsls	r3, r3, #17
 8006618:	4013      	ands	r3, r2
 800661a:	d033      	beq.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800661c:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	227f      	movs	r2, #127	; 0x7f
 8006624:	4013      	ands	r3, r2
 8006626:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	435a      	muls	r2, r3
 800662e:	4b18      	ldr	r3, [pc, #96]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	0e5b      	lsrs	r3, r3, #25
 8006634:	2107      	movs	r1, #7
 8006636:	400b      	ands	r3, r1
 8006638:	3301      	adds	r3, #1
 800663a:	0019      	movs	r1, r3
 800663c:	0010      	movs	r0, r2
 800663e:	f7f9 fd61 	bl	8000104 <__udivsi3>
 8006642:	0003      	movs	r3, r0
 8006644:	617b      	str	r3, [r7, #20]
        break;
 8006646:	e01d      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d11a      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800664e:	f7ff fb0f 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8006652:	0003      	movs	r3, r0
 8006654:	617b      	str	r3, [r7, #20]
        break;
 8006656:	e015      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006658:	46c0      	nop			; (mov r8, r8)
 800665a:	e014      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800665c:	46c0      	nop			; (mov r8, r8)
 800665e:	e012      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	e010      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006664:	46c0      	nop			; (mov r8, r8)
 8006666:	e00e      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006668:	46c0      	nop			; (mov r8, r8)
 800666a:	e00c      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800666c:	46c0      	nop			; (mov r8, r8)
 800666e:	e00a      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	e008      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006674:	46c0      	nop			; (mov r8, r8)
 8006676:	e006      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	e004      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800667c:	46c0      	nop			; (mov r8, r8)
 800667e:	e002      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006680:	46c0      	nop			; (mov r8, r8)
 8006682:	e000      	b.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006684:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 8006686:	697b      	ldr	r3, [r7, #20]
}
 8006688:	0018      	movs	r0, r3
 800668a:	46bd      	mov	sp, r7
 800668c:	b006      	add	sp, #24
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000
 8006694:	00f42400 	.word	0x00f42400
 8006698:	0000bb80 	.word	0x0000bb80

0800669c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e0a8      	b.n	8006800 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	2382      	movs	r3, #130	; 0x82
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	429a      	cmp	r2, r3
 80066c0:	d009      	beq.n	80066d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	61da      	str	r2, [r3, #28]
 80066c8:	e005      	b.n	80066d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	225d      	movs	r2, #93	; 0x5d
 80066e0:	5c9b      	ldrb	r3, [r3, r2]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	225c      	movs	r2, #92	; 0x5c
 80066ec:	2100      	movs	r1, #0
 80066ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7fc f96a 	bl	80029cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	225d      	movs	r2, #93	; 0x5d
 80066fc:	2102      	movs	r1, #2
 80066fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2140      	movs	r1, #64	; 0x40
 800670c:	438a      	bics	r2, r1
 800670e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	23e0      	movs	r3, #224	; 0xe0
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	429a      	cmp	r2, r3
 800671a:	d902      	bls.n	8006722 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e002      	b.n	8006728 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006722:	2380      	movs	r3, #128	; 0x80
 8006724:	015b      	lsls	r3, r3, #5
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	23f0      	movs	r3, #240	; 0xf0
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	429a      	cmp	r2, r3
 8006732:	d008      	beq.n	8006746 <HAL_SPI_Init+0xaa>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68da      	ldr	r2, [r3, #12]
 8006738:	23e0      	movs	r3, #224	; 0xe0
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	429a      	cmp	r2, r3
 800673e:	d002      	beq.n	8006746 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	2382      	movs	r3, #130	; 0x82
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	401a      	ands	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6899      	ldr	r1, [r3, #8]
 8006754:	2384      	movs	r3, #132	; 0x84
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	400b      	ands	r3, r1
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2102      	movs	r1, #2
 8006762:	400b      	ands	r3, r1
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2101      	movs	r1, #1
 800676c:	400b      	ands	r3, r1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6999      	ldr	r1, [r3, #24]
 8006774:	2380      	movs	r3, #128	; 0x80
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	400b      	ands	r3, r1
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	2138      	movs	r1, #56	; 0x38
 8006782:	400b      	ands	r3, r1
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	2180      	movs	r1, #128	; 0x80
 800678c:	400b      	ands	r3, r1
 800678e:	431a      	orrs	r2, r3
 8006790:	0011      	movs	r1, r2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	019b      	lsls	r3, r3, #6
 800679a:	401a      	ands	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	2204      	movs	r2, #4
 80067ac:	401a      	ands	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2110      	movs	r1, #16
 80067b4:	400b      	ands	r3, r1
 80067b6:	431a      	orrs	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067bc:	2108      	movs	r1, #8
 80067be:	400b      	ands	r3, r1
 80067c0:	431a      	orrs	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68d9      	ldr	r1, [r3, #12]
 80067c6:	23f0      	movs	r3, #240	; 0xf0
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	400b      	ands	r3, r1
 80067cc:	431a      	orrs	r2, r3
 80067ce:	0011      	movs	r1, r2
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	2380      	movs	r3, #128	; 0x80
 80067d4:	015b      	lsls	r3, r3, #5
 80067d6:	401a      	ands	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	69da      	ldr	r2, [r3, #28]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4907      	ldr	r1, [pc, #28]	; (8006808 <HAL_SPI_Init+0x16c>)
 80067ec:	400a      	ands	r2, r1
 80067ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	225d      	movs	r2, #93	; 0x5d
 80067fa:	2101      	movs	r1, #1
 80067fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	0018      	movs	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	b004      	add	sp, #16
 8006806:	bd80      	pop	{r7, pc}
 8006808:	fffff7ff 	.word	0xfffff7ff

0800680c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	1dbb      	adds	r3, r7, #6
 800681a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800681c:	231f      	movs	r3, #31
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	225c      	movs	r2, #92	; 0x5c
 8006828:	5c9b      	ldrb	r3, [r3, r2]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_SPI_Transmit+0x26>
 800682e:	2302      	movs	r3, #2
 8006830:	e140      	b.n	8006ab4 <HAL_SPI_Transmit+0x2a8>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	225c      	movs	r2, #92	; 0x5c
 8006836:	2101      	movs	r1, #1
 8006838:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683a:	f7fc fc65 	bl	8003108 <HAL_GetTick>
 800683e:	0003      	movs	r3, r0
 8006840:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006842:	2316      	movs	r3, #22
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	1dba      	adds	r2, r7, #6
 8006848:	8812      	ldrh	r2, [r2, #0]
 800684a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	225d      	movs	r2, #93	; 0x5d
 8006850:	5c9b      	ldrb	r3, [r3, r2]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d004      	beq.n	8006862 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006858:	231f      	movs	r3, #31
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	2202      	movs	r2, #2
 800685e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006860:	e11d      	b.n	8006a9e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_SPI_Transmit+0x64>
 8006868:	1dbb      	adds	r3, r7, #6
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006870:	231f      	movs	r3, #31
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
    goto error;
 8006878:	e111      	b.n	8006a9e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	225d      	movs	r2, #93	; 0x5d
 800687e:	2103      	movs	r1, #3
 8006880:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1dba      	adds	r2, r7, #6
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	1dba      	adds	r2, r7, #6
 800689a:	8812      	ldrh	r2, [r2, #0]
 800689c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2244      	movs	r2, #68	; 0x44
 80068a8:	2100      	movs	r1, #0
 80068aa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2246      	movs	r2, #70	; 0x46
 80068b0:	2100      	movs	r1, #0
 80068b2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	2380      	movs	r3, #128	; 0x80
 80068c6:	021b      	lsls	r3, r3, #8
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d110      	bne.n	80068ee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2140      	movs	r1, #64	; 0x40
 80068d8:	438a      	bics	r2, r1
 80068da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2180      	movs	r1, #128	; 0x80
 80068e8:	01c9      	lsls	r1, r1, #7
 80068ea:	430a      	orrs	r2, r1
 80068ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2240      	movs	r2, #64	; 0x40
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b40      	cmp	r3, #64	; 0x40
 80068fa:	d007      	beq.n	800690c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2140      	movs	r1, #64	; 0x40
 8006908:	430a      	orrs	r2, r1
 800690a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	23e0      	movs	r3, #224	; 0xe0
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	429a      	cmp	r2, r3
 8006916:	d94e      	bls.n	80069b6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <HAL_SPI_Transmit+0x11e>
 8006920:	2316      	movs	r3, #22
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d13f      	bne.n	80069aa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	881a      	ldrh	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	1c9a      	adds	r2, r3, #2
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800694e:	e02c      	b.n	80069aa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	2202      	movs	r2, #2
 8006958:	4013      	ands	r3, r2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d112      	bne.n	8006984 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	1c9a      	adds	r2, r3, #2
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006982:	e012      	b.n	80069aa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006984:	f7fc fbc0 	bl	8003108 <HAL_GetTick>
 8006988:	0002      	movs	r2, r0
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d802      	bhi.n	800699a <HAL_SPI_Transmit+0x18e>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	d102      	bne.n	80069a0 <HAL_SPI_Transmit+0x194>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d104      	bne.n	80069aa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80069a0:	231f      	movs	r3, #31
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	2203      	movs	r2, #3
 80069a6:	701a      	strb	r2, [r3, #0]
          goto error;
 80069a8:	e079      	b.n	8006a9e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1cd      	bne.n	8006950 <HAL_SPI_Transmit+0x144>
 80069b4:	e04f      	b.n	8006a56 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d004      	beq.n	80069c8 <HAL_SPI_Transmit+0x1bc>
 80069be:	2316      	movs	r3, #22
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d141      	bne.n	8006a4c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	330c      	adds	r3, #12
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80069ee:	e02d      	b.n	8006a4c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2202      	movs	r2, #2
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d113      	bne.n	8006a26 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	330c      	adds	r3, #12
 8006a08:	7812      	ldrb	r2, [r2, #0]
 8006a0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a24:	e012      	b.n	8006a4c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a26:	f7fc fb6f 	bl	8003108 <HAL_GetTick>
 8006a2a:	0002      	movs	r2, r0
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d802      	bhi.n	8006a3c <HAL_SPI_Transmit+0x230>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	d102      	bne.n	8006a42 <HAL_SPI_Transmit+0x236>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d104      	bne.n	8006a4c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006a42:	231f      	movs	r3, #31
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2203      	movs	r2, #3
 8006a48:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a4a:	e028      	b.n	8006a9e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1cc      	bne.n	80069f0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f001 f9cb 	bl	8007df8 <SPI_EndRxTxTransaction>
 8006a62:	1e03      	subs	r3, r0, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10a      	bne.n	8006a8a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a74:	2300      	movs	r3, #0
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	613b      	str	r3, [r7, #16]
 8006a88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d004      	beq.n	8006a9c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006a92:	231f      	movs	r3, #31
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2201      	movs	r2, #1
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	e000      	b.n	8006a9e <HAL_SPI_Transmit+0x292>
  }

error:
 8006a9c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	225d      	movs	r2, #93	; 0x5d
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	225c      	movs	r2, #92	; 0x5c
 8006aaa:	2100      	movs	r1, #0
 8006aac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006aae:	231f      	movs	r3, #31
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	781b      	ldrb	r3, [r3, #0]
}
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b008      	add	sp, #32
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b089      	sub	sp, #36	; 0x24
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	1dbb      	adds	r3, r7, #6
 8006aca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006acc:	2317      	movs	r3, #23
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	2382      	movs	r3, #130	; 0x82
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d113      	bne.n	8006b08 <HAL_SPI_Receive+0x4c>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10f      	bne.n	8006b08 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	225d      	movs	r2, #93	; 0x5d
 8006aec:	2104      	movs	r1, #4
 8006aee:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006af0:	1dbb      	adds	r3, r7, #6
 8006af2:	881c      	ldrh	r4, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	0023      	movs	r3, r4
 8006b00:	f000 f928 	bl	8006d54 <HAL_SPI_TransmitReceive>
 8006b04:	0003      	movs	r3, r0
 8006b06:	e11c      	b.n	8006d42 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	225c      	movs	r2, #92	; 0x5c
 8006b0c:	5c9b      	ldrb	r3, [r3, r2]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_SPI_Receive+0x5a>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e115      	b.n	8006d42 <HAL_SPI_Receive+0x286>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	225c      	movs	r2, #92	; 0x5c
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b1e:	f7fc faf3 	bl	8003108 <HAL_GetTick>
 8006b22:	0003      	movs	r3, r0
 8006b24:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	225d      	movs	r2, #93	; 0x5d
 8006b2a:	5c9b      	ldrb	r3, [r3, r2]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d004      	beq.n	8006b3c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006b32:	2317      	movs	r3, #23
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	2202      	movs	r2, #2
 8006b38:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b3a:	e0f7      	b.n	8006d2c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_SPI_Receive+0x8e>
 8006b42:	1dbb      	adds	r3, r7, #6
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006b4a:	2317      	movs	r3, #23
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	2201      	movs	r2, #1
 8006b50:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b52:	e0eb      	b.n	8006d2c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	225d      	movs	r2, #93	; 0x5d
 8006b58:	2104      	movs	r1, #4
 8006b5a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1dba      	adds	r2, r7, #6
 8006b6c:	2144      	movs	r1, #68	; 0x44
 8006b6e:	8812      	ldrh	r2, [r2, #0]
 8006b70:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1dba      	adds	r2, r7, #6
 8006b76:	2146      	movs	r1, #70	; 0x46
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	23e0      	movs	r3, #224	; 0xe0
 8006ba0:	00db      	lsls	r3, r3, #3
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d908      	bls.n	8006bb8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4966      	ldr	r1, [pc, #408]	; (8006d4c <HAL_SPI_Receive+0x290>)
 8006bb2:	400a      	ands	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e008      	b.n	8006bca <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2180      	movs	r1, #128	; 0x80
 8006bc4:	0149      	lsls	r1, r1, #5
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	2380      	movs	r3, #128	; 0x80
 8006bd0:	021b      	lsls	r3, r3, #8
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2140      	movs	r1, #64	; 0x40
 8006be2:	438a      	bics	r2, r1
 8006be4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4957      	ldr	r1, [pc, #348]	; (8006d50 <HAL_SPI_Receive+0x294>)
 8006bf2:	400a      	ands	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d007      	beq.n	8006c14 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2140      	movs	r1, #64	; 0x40
 8006c10:	430a      	orrs	r2, r1
 8006c12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	23e0      	movs	r3, #224	; 0xe0
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d900      	bls.n	8006c22 <HAL_SPI_Receive+0x166>
 8006c20:	e069      	b.n	8006cf6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c22:	e031      	b.n	8006c88 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d117      	bne.n	8006c62 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	001a      	movs	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	7812      	ldrb	r2, [r2, #0]
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2246      	movs	r2, #70	; 0x46
 8006c52:	5a9b      	ldrh	r3, [r3, r2]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b299      	uxth	r1, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2246      	movs	r2, #70	; 0x46
 8006c5e:	5299      	strh	r1, [r3, r2]
 8006c60:	e012      	b.n	8006c88 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c62:	f7fc fa51 	bl	8003108 <HAL_GetTick>
 8006c66:	0002      	movs	r2, r0
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d802      	bhi.n	8006c78 <HAL_SPI_Receive+0x1bc>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	d102      	bne.n	8006c7e <HAL_SPI_Receive+0x1c2>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d104      	bne.n	8006c88 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006c7e:	2317      	movs	r3, #23
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	2203      	movs	r2, #3
 8006c84:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c86:	e051      	b.n	8006d2c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2246      	movs	r2, #70	; 0x46
 8006c8c:	5a9b      	ldrh	r3, [r3, r2]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1c7      	bne.n	8006c24 <HAL_SPI_Receive+0x168>
 8006c94:	e035      	b.n	8006d02 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d115      	bne.n	8006cd0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cae:	b292      	uxth	r2, r2
 8006cb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	1c9a      	adds	r2, r3, #2
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2246      	movs	r2, #70	; 0x46
 8006cc0:	5a9b      	ldrh	r3, [r3, r2]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b299      	uxth	r1, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2246      	movs	r2, #70	; 0x46
 8006ccc:	5299      	strh	r1, [r3, r2]
 8006cce:	e012      	b.n	8006cf6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cd0:	f7fc fa1a 	bl	8003108 <HAL_GetTick>
 8006cd4:	0002      	movs	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d802      	bhi.n	8006ce6 <HAL_SPI_Receive+0x22a>
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	d102      	bne.n	8006cec <HAL_SPI_Receive+0x230>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d104      	bne.n	8006cf6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006cec:	2317      	movs	r3, #23
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	701a      	strb	r2, [r3, #0]
          goto error;
 8006cf4:	e01a      	b.n	8006d2c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2246      	movs	r2, #70	; 0x46
 8006cfa:	5a9b      	ldrh	r3, [r3, r2]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1c9      	bne.n	8006c96 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f001 f817 	bl	8007d3c <SPI_EndRxTransaction>
 8006d0e:	1e03      	subs	r3, r0, #0
 8006d10:	d002      	beq.n	8006d18 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2220      	movs	r2, #32
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006d20:	2317      	movs	r3, #23
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	2201      	movs	r2, #1
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e000      	b.n	8006d2c <HAL_SPI_Receive+0x270>
  }

error :
 8006d2a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	225d      	movs	r2, #93	; 0x5d
 8006d30:	2101      	movs	r1, #1
 8006d32:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	225c      	movs	r2, #92	; 0x5c
 8006d38:	2100      	movs	r1, #0
 8006d3a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006d3c:	2317      	movs	r3, #23
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	781b      	ldrb	r3, [r3, #0]
}
 8006d42:	0018      	movs	r0, r3
 8006d44:	46bd      	mov	sp, r7
 8006d46:	b007      	add	sp, #28
 8006d48:	bd90      	pop	{r4, r7, pc}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	ffffefff 	.word	0xffffefff
 8006d50:	ffffbfff 	.word	0xffffbfff

08006d54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	; 0x28
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	001a      	movs	r2, r3
 8006d62:	1cbb      	adds	r3, r7, #2
 8006d64:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d66:	2301      	movs	r3, #1
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d6a:	2323      	movs	r3, #35	; 0x23
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	225c      	movs	r2, #92	; 0x5c
 8006d76:	5c9b      	ldrb	r3, [r3, r2]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x2c>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e1b5      	b.n	80070ec <HAL_SPI_TransmitReceive+0x398>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	225c      	movs	r2, #92	; 0x5c
 8006d84:	2101      	movs	r1, #1
 8006d86:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d88:	f7fc f9be 	bl	8003108 <HAL_GetTick>
 8006d8c:	0003      	movs	r3, r0
 8006d8e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d90:	201b      	movs	r0, #27
 8006d92:	183b      	adds	r3, r7, r0
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	215d      	movs	r1, #93	; 0x5d
 8006d98:	5c52      	ldrb	r2, [r2, r1]
 8006d9a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006da2:	2312      	movs	r3, #18
 8006da4:	18fb      	adds	r3, r7, r3
 8006da6:	1cba      	adds	r2, r7, #2
 8006da8:	8812      	ldrh	r2, [r2, #0]
 8006daa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dac:	183b      	adds	r3, r7, r0
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d011      	beq.n	8006dd8 <HAL_SPI_TransmitReceive+0x84>
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	2382      	movs	r3, #130	; 0x82
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d107      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x7a>
 8006dc6:	183b      	adds	r3, r7, r0
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	d004      	beq.n	8006dd8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006dce:	2323      	movs	r3, #35	; 0x23
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	701a      	strb	r2, [r3, #0]
    goto error;
 8006dd6:	e17e      	b.n	80070d6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x98>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x98>
 8006de4:	1cbb      	adds	r3, r7, #2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d104      	bne.n	8006df6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006dec:	2323      	movs	r3, #35	; 0x23
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	2201      	movs	r2, #1
 8006df2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006df4:	e16f      	b.n	80070d6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	225d      	movs	r2, #93	; 0x5d
 8006dfa:	5c9b      	ldrb	r3, [r3, r2]
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d003      	beq.n	8006e0a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	225d      	movs	r2, #93	; 0x5d
 8006e06:	2105      	movs	r1, #5
 8006e08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	1cba      	adds	r2, r7, #2
 8006e1a:	2146      	movs	r1, #70	; 0x46
 8006e1c:	8812      	ldrh	r2, [r2, #0]
 8006e1e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1cba      	adds	r2, r7, #2
 8006e24:	2144      	movs	r1, #68	; 0x44
 8006e26:	8812      	ldrh	r2, [r2, #0]
 8006e28:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	1cba      	adds	r2, r7, #2
 8006e34:	8812      	ldrh	r2, [r2, #0]
 8006e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	1cba      	adds	r2, r7, #2
 8006e3c:	8812      	ldrh	r2, [r2, #0]
 8006e3e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	23e0      	movs	r3, #224	; 0xe0
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d908      	bls.n	8006e6a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	49a4      	ldr	r1, [pc, #656]	; (80070f4 <HAL_SPI_TransmitReceive+0x3a0>)
 8006e64:	400a      	ands	r2, r1
 8006e66:	605a      	str	r2, [r3, #4]
 8006e68:	e008      	b.n	8006e7c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2180      	movs	r1, #128	; 0x80
 8006e76:	0149      	lsls	r1, r1, #5
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2240      	movs	r2, #64	; 0x40
 8006e84:	4013      	ands	r3, r2
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d007      	beq.n	8006e9a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2140      	movs	r1, #64	; 0x40
 8006e96:	430a      	orrs	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	23e0      	movs	r3, #224	; 0xe0
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d800      	bhi.n	8006ea8 <HAL_SPI_TransmitReceive+0x154>
 8006ea6:	e07f      	b.n	8006fa8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x168>
 8006eb0:	2312      	movs	r3, #18
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d000      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x168>
 8006eba:	e069      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	881a      	ldrh	r2, [r3, #0]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee0:	e056      	b.n	8006f90 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d11b      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x1d4>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <HAL_SPI_TransmitReceive+0x1d4>
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d113      	bne.n	8006f28 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	881a      	ldrh	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	1c9a      	adds	r2, r3, #2
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d11c      	bne.n	8006f70 <HAL_SPI_TransmitReceive+0x21c>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2246      	movs	r2, #70	; 0x46
 8006f3a:	5a9b      	ldrh	r3, [r3, r2]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d016      	beq.n	8006f70 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	b292      	uxth	r2, r2
 8006f4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	1c9a      	adds	r2, r3, #2
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2246      	movs	r2, #70	; 0x46
 8006f5e:	5a9b      	ldrh	r3, [r3, r2]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b299      	uxth	r1, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2246      	movs	r2, #70	; 0x46
 8006f6a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f70:	f7fc f8ca 	bl	8003108 <HAL_GetTick>
 8006f74:	0002      	movs	r2, r0
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d807      	bhi.n	8006f90 <HAL_SPI_TransmitReceive+0x23c>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	3301      	adds	r3, #1
 8006f84:	d004      	beq.n	8006f90 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006f86:	2323      	movs	r3, #35	; 0x23
 8006f88:	18fb      	adds	r3, r7, r3
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	701a      	strb	r2, [r3, #0]
        goto error;
 8006f8e:	e0a2      	b.n	80070d6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1a3      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x18e>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2246      	movs	r2, #70	; 0x46
 8006f9e:	5a9b      	ldrh	r3, [r3, r2]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d19d      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x18e>
 8006fa6:	e085      	b.n	80070b4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x268>
 8006fb0:	2312      	movs	r3, #18
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d000      	beq.n	8006fbc <HAL_SPI_TransmitReceive+0x268>
 8006fba:	e070      	b.n	800709e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	330c      	adds	r3, #12
 8006fc6:	7812      	ldrb	r2, [r2, #0]
 8006fc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe2:	e05c      	b.n	800709e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2202      	movs	r2, #2
 8006fec:	4013      	ands	r3, r2
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d11c      	bne.n	800702c <HAL_SPI_TransmitReceive+0x2d8>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d017      	beq.n	800702c <HAL_SPI_TransmitReceive+0x2d8>
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d114      	bne.n	800702c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	330c      	adds	r3, #12
 800700c:	7812      	ldrb	r2, [r2, #0]
 800700e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	2201      	movs	r2, #1
 8007034:	4013      	ands	r3, r2
 8007036:	2b01      	cmp	r3, #1
 8007038:	d11e      	bne.n	8007078 <HAL_SPI_TransmitReceive+0x324>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2246      	movs	r2, #70	; 0x46
 800703e:	5a9b      	ldrh	r3, [r3, r2]
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d018      	beq.n	8007078 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	001a      	movs	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	7812      	ldrb	r2, [r2, #0]
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2246      	movs	r2, #70	; 0x46
 8007066:	5a9b      	ldrh	r3, [r3, r2]
 8007068:	b29b      	uxth	r3, r3
 800706a:	3b01      	subs	r3, #1
 800706c:	b299      	uxth	r1, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2246      	movs	r2, #70	; 0x46
 8007072:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007074:	2301      	movs	r3, #1
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007078:	f7fc f846 	bl	8003108 <HAL_GetTick>
 800707c:	0002      	movs	r2, r0
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007084:	429a      	cmp	r2, r3
 8007086:	d802      	bhi.n	800708e <HAL_SPI_TransmitReceive+0x33a>
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	3301      	adds	r3, #1
 800708c:	d102      	bne.n	8007094 <HAL_SPI_TransmitReceive+0x340>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007094:	2323      	movs	r3, #35	; 0x23
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	2203      	movs	r2, #3
 800709a:	701a      	strb	r2, [r3, #0]
        goto error;
 800709c:	e01b      	b.n	80070d6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d19d      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x290>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2246      	movs	r2, #70	; 0x46
 80070ac:	5a9b      	ldrh	r3, [r3, r2]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d197      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	0018      	movs	r0, r3
 80070bc:	f000 fe9c 	bl	8007df8 <SPI_EndRxTxTransaction>
 80070c0:	1e03      	subs	r3, r0, #0
 80070c2:	d007      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80070c4:	2323      	movs	r3, #35	; 0x23
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	2201      	movs	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	661a      	str	r2, [r3, #96]	; 0x60
 80070d2:	e000      	b.n	80070d6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80070d4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	225d      	movs	r2, #93	; 0x5d
 80070da:	2101      	movs	r1, #1
 80070dc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	225c      	movs	r2, #92	; 0x5c
 80070e2:	2100      	movs	r1, #0
 80070e4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80070e6:	2323      	movs	r3, #35	; 0x23
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	781b      	ldrb	r3, [r3, #0]
}
 80070ec:	0018      	movs	r0, r3
 80070ee:	46bd      	mov	sp, r7
 80070f0:	b00a      	add	sp, #40	; 0x28
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	ffffefff 	.word	0xffffefff

080070f8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80070f8:	b590      	push	{r4, r7, lr}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	1dbb      	adds	r3, r7, #6
 8007104:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007106:	2317      	movs	r3, #23
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d112      	bne.n	800713c <HAL_SPI_Receive_DMA+0x44>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	2382      	movs	r3, #130	; 0x82
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	429a      	cmp	r2, r3
 8007120:	d10c      	bne.n	800713c <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	225d      	movs	r2, #93	; 0x5d
 8007126:	2104      	movs	r1, #4
 8007128:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800712a:	1dbb      	adds	r3, r7, #6
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f91e 	bl	8007374 <HAL_SPI_TransmitReceive_DMA>
 8007138:	0003      	movs	r3, r0
 800713a:	e10b      	b.n	8007354 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	225c      	movs	r2, #92	; 0x5c
 8007140:	5c9b      	ldrb	r3, [r3, r2]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d101      	bne.n	800714a <HAL_SPI_Receive_DMA+0x52>
 8007146:	2302      	movs	r3, #2
 8007148:	e104      	b.n	8007354 <HAL_SPI_Receive_DMA+0x25c>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	225c      	movs	r2, #92	; 0x5c
 800714e:	2101      	movs	r1, #1
 8007150:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	225d      	movs	r2, #93	; 0x5d
 8007156:	5c9b      	ldrb	r3, [r3, r2]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	d004      	beq.n	8007168 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800715e:	2317      	movs	r3, #23
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	2202      	movs	r2, #2
 8007164:	701a      	strb	r2, [r3, #0]
    goto error;
 8007166:	e0ee      	b.n	8007346 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_SPI_Receive_DMA+0x7e>
 800716e:	1dbb      	adds	r3, r7, #6
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 8007176:	2317      	movs	r3, #23
 8007178:	18fb      	adds	r3, r7, r3
 800717a:	2201      	movs	r2, #1
 800717c:	701a      	strb	r2, [r3, #0]
    goto error;
 800717e:	e0e2      	b.n	8007346 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	225d      	movs	r2, #93	; 0x5d
 8007184:	2104      	movs	r1, #4
 8007186:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	1dba      	adds	r2, r7, #6
 8007198:	2144      	movs	r1, #68	; 0x44
 800719a:	8812      	ldrh	r2, [r2, #0]
 800719c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1dba      	adds	r2, r7, #6
 80071a2:	2146      	movs	r1, #70	; 0x46
 80071a4:	8812      	ldrh	r2, [r2, #0]
 80071a6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	2380      	movs	r3, #128	; 0x80
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d10f      	bne.n	80071ec <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2140      	movs	r1, #64	; 0x40
 80071d8:	438a      	bics	r2, r1
 80071da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	495d      	ldr	r1, [pc, #372]	; (800735c <HAL_SPI_Receive_DMA+0x264>)
 80071e8:	400a      	ands	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	495a      	ldr	r1, [pc, #360]	; (8007360 <HAL_SPI_Receive_DMA+0x268>)
 80071f8:	400a      	ands	r2, r1
 80071fa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	23e0      	movs	r3, #224	; 0xe0
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	429a      	cmp	r2, r3
 8007206:	d908      	bls.n	800721a <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4954      	ldr	r1, [pc, #336]	; (8007364 <HAL_SPI_Receive_DMA+0x26c>)
 8007214:	400a      	ands	r2, r1
 8007216:	605a      	str	r2, [r3, #4]
 8007218:	e045      	b.n	80072a6 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2180      	movs	r1, #128	; 0x80
 8007226:	0149      	lsls	r1, r1, #5
 8007228:	430a      	orrs	r2, r1
 800722a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	699a      	ldr	r2, [r3, #24]
 8007232:	2380      	movs	r3, #128	; 0x80
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	429a      	cmp	r2, r3
 8007238:	d135      	bne.n	80072a6 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	685a      	ldr	r2, [r3, #4]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4947      	ldr	r1, [pc, #284]	; (8007364 <HAL_SPI_Receive_DMA+0x26c>)
 8007246:	400a      	ands	r2, r1
 8007248:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2246      	movs	r2, #70	; 0x46
 800724e:	5a9b      	ldrh	r3, [r3, r2]
 8007250:	b29b      	uxth	r3, r3
 8007252:	001a      	movs	r2, r3
 8007254:	2301      	movs	r3, #1
 8007256:	4013      	ands	r3, r2
 8007258:	d111      	bne.n	800727e <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	493e      	ldr	r1, [pc, #248]	; (8007360 <HAL_SPI_Receive_DMA+0x268>)
 8007266:	400a      	ands	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2246      	movs	r2, #70	; 0x46
 800726e:	5a9b      	ldrh	r3, [r3, r2]
 8007270:	b29b      	uxth	r3, r3
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b299      	uxth	r1, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2246      	movs	r2, #70	; 0x46
 800727a:	5299      	strh	r1, [r3, r2]
 800727c:	e013      	b.n	80072a6 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2180      	movs	r1, #128	; 0x80
 800728a:	0189      	lsls	r1, r1, #6
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2246      	movs	r2, #70	; 0x46
 8007294:	5a9b      	ldrh	r3, [r3, r2]
 8007296:	b29b      	uxth	r3, r3
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	b29b      	uxth	r3, r3
 800729c:	3301      	adds	r3, #1
 800729e:	b299      	uxth	r1, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2246      	movs	r2, #70	; 0x46
 80072a4:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	4a2f      	ldr	r2, [pc, #188]	; (8007368 <HAL_SPI_Receive_DMA+0x270>)
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b2:	4a2e      	ldr	r2, [pc, #184]	; (800736c <HAL_SPI_Receive_DMA+0x274>)
 80072b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	4a2d      	ldr	r2, [pc, #180]	; (8007370 <HAL_SPI_Receive_DMA+0x278>)
 80072bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c2:	2200      	movs	r2, #0
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	0019      	movs	r1, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2246      	movs	r2, #70	; 0x46
 80072dc:	5a9b      	ldrh	r3, [r3, r2]
 80072de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80072e0:	0022      	movs	r2, r4
 80072e2:	f7fc fb1d 	bl	8003920 <HAL_DMA_Start_IT>
 80072e6:	1e03      	subs	r3, r0, #0
 80072e8:	d00e      	beq.n	8007308 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ee:	2210      	movs	r2, #16
 80072f0:	431a      	orrs	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80072f6:	2317      	movs	r3, #23
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	225d      	movs	r2, #93	; 0x5d
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]
    goto error;
 8007306:	e01e      	b.n	8007346 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2240      	movs	r2, #64	; 0x40
 8007310:	4013      	ands	r3, r2
 8007312:	2b40      	cmp	r3, #64	; 0x40
 8007314:	d007      	beq.n	8007326 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	430a      	orrs	r2, r1
 8007324:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2120      	movs	r1, #32
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2101      	movs	r1, #1
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	225c      	movs	r2, #92	; 0x5c
 800734a:	2100      	movs	r1, #0
 800734c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800734e:	2317      	movs	r3, #23
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	781b      	ldrb	r3, [r3, #0]
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b007      	add	sp, #28
 800735a:	bd90      	pop	{r4, r7, pc}
 800735c:	ffffbfff 	.word	0xffffbfff
 8007360:	ffffdfff 	.word	0xffffdfff
 8007364:	ffffefff 	.word	0xffffefff
 8007368:	08007a4b 	.word	0x08007a4b
 800736c:	08007905 	.word	0x08007905
 8007370:	08007a87 	.word	0x08007a87

08007374 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	001a      	movs	r2, r3
 8007382:	1cbb      	adds	r3, r7, #2
 8007384:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007386:	2317      	movs	r3, #23
 8007388:	18fb      	adds	r3, r7, r3
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	225c      	movs	r2, #92	; 0x5c
 8007392:	5c9b      	ldrb	r3, [r3, r2]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d101      	bne.n	800739c <HAL_SPI_TransmitReceive_DMA+0x28>
 8007398:	2302      	movs	r3, #2
 800739a:	e186      	b.n	80076aa <HAL_SPI_TransmitReceive_DMA+0x336>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	225c      	movs	r2, #92	; 0x5c
 80073a0:	2101      	movs	r1, #1
 80073a2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073a4:	2016      	movs	r0, #22
 80073a6:	183b      	adds	r3, r7, r0
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	215d      	movs	r1, #93	; 0x5d
 80073ac:	5c52      	ldrb	r2, [r2, r1]
 80073ae:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80073b6:	0001      	movs	r1, r0
 80073b8:	187b      	adds	r3, r7, r1
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d011      	beq.n	80073e4 <HAL_SPI_TransmitReceive_DMA+0x70>
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	2382      	movs	r3, #130	; 0x82
 80073c4:	005b      	lsls	r3, r3, #1
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d107      	bne.n	80073da <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d103      	bne.n	80073da <HAL_SPI_TransmitReceive_DMA+0x66>
 80073d2:	187b      	adds	r3, r7, r1
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d004      	beq.n	80073e4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80073da:	2317      	movs	r3, #23
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	2202      	movs	r2, #2
 80073e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80073e2:	e15b      	b.n	800769c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d006      	beq.n	80073f8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_SPI_TransmitReceive_DMA+0x84>
 80073f0:	1cbb      	adds	r3, r7, #2
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80073f8:	2317      	movs	r3, #23
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
    goto error;
 8007400:	e14c      	b.n	800769c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	225d      	movs	r2, #93	; 0x5d
 8007406:	5c9b      	ldrb	r3, [r3, r2]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b04      	cmp	r3, #4
 800740c:	d003      	beq.n	8007416 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	225d      	movs	r2, #93	; 0x5d
 8007412:	2105      	movs	r1, #5
 8007414:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	1cba      	adds	r2, r7, #2
 8007426:	8812      	ldrh	r2, [r2, #0]
 8007428:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	1cba      	adds	r2, r7, #2
 800742e:	8812      	ldrh	r2, [r2, #0]
 8007430:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	1cba      	adds	r2, r7, #2
 800743c:	2144      	movs	r1, #68	; 0x44
 800743e:	8812      	ldrh	r2, [r2, #0]
 8007440:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1cba      	adds	r2, r7, #2
 8007446:	2146      	movs	r1, #70	; 0x46
 8007448:	8812      	ldrh	r2, [r2, #0]
 800744a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4994      	ldr	r1, [pc, #592]	; (80076b4 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8007464:	400a      	ands	r2, r1
 8007466:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	23e0      	movs	r3, #224	; 0xe0
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	429a      	cmp	r2, r3
 8007472:	d908      	bls.n	8007486 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	498e      	ldr	r1, [pc, #568]	; (80076b8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007480:	400a      	ands	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
 8007484:	e074      	b.n	8007570 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2180      	movs	r1, #128	; 0x80
 8007492:	0149      	lsls	r1, r1, #5
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749c:	699a      	ldr	r2, [r3, #24]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d127      	bne.n	80074f6 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80074aa:	001a      	movs	r2, r3
 80074ac:	2301      	movs	r3, #1
 80074ae:	4013      	ands	r3, r2
 80074b0:	d10f      	bne.n	80074d2 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685a      	ldr	r2, [r3, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	497f      	ldr	r1, [pc, #508]	; (80076bc <HAL_SPI_TransmitReceive_DMA+0x348>)
 80074be:	400a      	ands	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	085b      	lsrs	r3, r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074d0:	e011      	b.n	80074f6 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2180      	movs	r1, #128	; 0x80
 80074de:	01c9      	lsls	r1, r1, #7
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	085b      	lsrs	r3, r3, #1
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3301      	adds	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	699a      	ldr	r2, [r3, #24]
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	429a      	cmp	r2, r3
 8007502:	d135      	bne.n	8007570 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	496a      	ldr	r1, [pc, #424]	; (80076b8 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007510:	400a      	ands	r2, r1
 8007512:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2246      	movs	r2, #70	; 0x46
 8007518:	5a9b      	ldrh	r3, [r3, r2]
 800751a:	b29b      	uxth	r3, r3
 800751c:	001a      	movs	r2, r3
 800751e:	2301      	movs	r3, #1
 8007520:	4013      	ands	r3, r2
 8007522:	d111      	bne.n	8007548 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4964      	ldr	r1, [pc, #400]	; (80076c0 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8007530:	400a      	ands	r2, r1
 8007532:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2246      	movs	r2, #70	; 0x46
 8007538:	5a9b      	ldrh	r3, [r3, r2]
 800753a:	b29b      	uxth	r3, r3
 800753c:	085b      	lsrs	r3, r3, #1
 800753e:	b299      	uxth	r1, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2246      	movs	r2, #70	; 0x46
 8007544:	5299      	strh	r1, [r3, r2]
 8007546:	e013      	b.n	8007570 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2180      	movs	r1, #128	; 0x80
 8007554:	0189      	lsls	r1, r1, #6
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2246      	movs	r2, #70	; 0x46
 800755e:	5a9b      	ldrh	r3, [r3, r2]
 8007560:	b29b      	uxth	r3, r3
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	b29b      	uxth	r3, r3
 8007566:	3301      	adds	r3, #1
 8007568:	b299      	uxth	r1, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2246      	movs	r2, #70	; 0x46
 800756e:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	225d      	movs	r2, #93	; 0x5d
 8007574:	5c9b      	ldrb	r3, [r3, r2]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b04      	cmp	r3, #4
 800757a:	d108      	bne.n	800758e <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007580:	4a50      	ldr	r2, [pc, #320]	; (80076c4 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007588:	4a4f      	ldr	r2, [pc, #316]	; (80076c8 <HAL_SPI_TransmitReceive_DMA+0x354>)
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c
 800758c:	e007      	b.n	800759e <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007592:	4a4e      	ldr	r2, [pc, #312]	; (80076cc <HAL_SPI_TransmitReceive_DMA+0x358>)
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759a:	4a4d      	ldr	r2, [pc, #308]	; (80076d0 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800759c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a2:	4a4c      	ldr	r2, [pc, #304]	; (80076d4 <HAL_SPI_TransmitReceive_DMA+0x360>)
 80075a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075aa:	2200      	movs	r2, #0
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	0019      	movs	r1, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2246      	movs	r2, #70	; 0x46
 80075c4:	5a9b      	ldrh	r3, [r3, r2]
 80075c6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80075c8:	0022      	movs	r2, r4
 80075ca:	f7fc f9a9 	bl	8003920 <HAL_DMA_Start_IT>
 80075ce:	1e03      	subs	r3, r0, #0
 80075d0:	d00e      	beq.n	80075f0 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d6:	2210      	movs	r2, #16
 80075d8:	431a      	orrs	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80075de:	2317      	movs	r3, #23
 80075e0:	18fb      	adds	r3, r7, r3
 80075e2:	2201      	movs	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	225d      	movs	r2, #93	; 0x5d
 80075ea:	2101      	movs	r1, #1
 80075ec:	5499      	strb	r1, [r3, r2]
    goto error;
 80075ee:	e055      	b.n	800769c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2101      	movs	r1, #1
 80075fc:	430a      	orrs	r2, r1
 80075fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760c:	2200      	movs	r2, #0
 800760e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007614:	2200      	movs	r2, #0
 8007616:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761c:	2200      	movs	r2, #0
 800761e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	0019      	movs	r1, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	330c      	adds	r3, #12
 8007630:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007636:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007638:	f7fc f972 	bl	8003920 <HAL_DMA_Start_IT>
 800763c:	1e03      	subs	r3, r0, #0
 800763e:	d00e      	beq.n	800765e <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007644:	2210      	movs	r2, #16
 8007646:	431a      	orrs	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800764c:	2317      	movs	r3, #23
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	2201      	movs	r2, #1
 8007652:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	225d      	movs	r2, #93	; 0x5d
 8007658:	2101      	movs	r1, #1
 800765a:	5499      	strb	r1, [r3, r2]
    goto error;
 800765c:	e01e      	b.n	800769c <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2240      	movs	r2, #64	; 0x40
 8007666:	4013      	ands	r3, r2
 8007668:	2b40      	cmp	r3, #64	; 0x40
 800766a:	d007      	beq.n	800767c <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2140      	movs	r1, #64	; 0x40
 8007678:	430a      	orrs	r2, r1
 800767a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2120      	movs	r1, #32
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2102      	movs	r1, #2
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	225c      	movs	r2, #92	; 0x5c
 80076a0:	2100      	movs	r1, #0
 80076a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80076a4:	2317      	movs	r3, #23
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	781b      	ldrb	r3, [r3, #0]
}
 80076aa:	0018      	movs	r0, r3
 80076ac:	46bd      	mov	sp, r7
 80076ae:	b007      	add	sp, #28
 80076b0:	bd90      	pop	{r4, r7, pc}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	ffff9fff 	.word	0xffff9fff
 80076b8:	ffffefff 	.word	0xffffefff
 80076bc:	ffffbfff 	.word	0xffffbfff
 80076c0:	ffffdfff 	.word	0xffffdfff
 80076c4:	08007a4b 	.word	0x08007a4b
 80076c8:	08007905 	.word	0x08007905
 80076cc:	08007a69 	.word	0x08007a69
 80076d0:	080079b5 	.word	0x080079b5
 80076d4:	08007a87 	.word	0x08007a87

080076d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	099b      	lsrs	r3, r3, #6
 80076f4:	001a      	movs	r2, r3
 80076f6:	2301      	movs	r3, #1
 80076f8:	4013      	ands	r3, r2
 80076fa:	d10f      	bne.n	800771c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2201      	movs	r2, #1
 8007700:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007702:	d00b      	beq.n	800771c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	001a      	movs	r2, r3
 800770a:	2301      	movs	r3, #1
 800770c:	4013      	ands	r3, r2
 800770e:	d005      	beq.n	800771c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	0010      	movs	r0, r2
 8007718:	4798      	blx	r3
    return;
 800771a:	e0d5      	b.n	80078c8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	085b      	lsrs	r3, r3, #1
 8007720:	001a      	movs	r2, r3
 8007722:	2301      	movs	r3, #1
 8007724:	4013      	ands	r3, r2
 8007726:	d00b      	beq.n	8007740 <HAL_SPI_IRQHandler+0x68>
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	09db      	lsrs	r3, r3, #7
 800772c:	001a      	movs	r2, r3
 800772e:	2301      	movs	r3, #1
 8007730:	4013      	ands	r3, r2
 8007732:	d005      	beq.n	8007740 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	0010      	movs	r0, r2
 800773c:	4798      	blx	r3
    return;
 800773e:	e0c3      	b.n	80078c8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	001a      	movs	r2, r3
 8007746:	2301      	movs	r3, #1
 8007748:	4013      	ands	r3, r2
 800774a:	d10c      	bne.n	8007766 <HAL_SPI_IRQHandler+0x8e>
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	099b      	lsrs	r3, r3, #6
 8007750:	001a      	movs	r2, r3
 8007752:	2301      	movs	r3, #1
 8007754:	4013      	ands	r3, r2
 8007756:	d106      	bne.n	8007766 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	0a1b      	lsrs	r3, r3, #8
 800775c:	001a      	movs	r2, r3
 800775e:	2301      	movs	r3, #1
 8007760:	4013      	ands	r3, r2
 8007762:	d100      	bne.n	8007766 <HAL_SPI_IRQHandler+0x8e>
 8007764:	e0b0      	b.n	80078c8 <HAL_SPI_IRQHandler+0x1f0>
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	001a      	movs	r2, r3
 800776c:	2301      	movs	r3, #1
 800776e:	4013      	ands	r3, r2
 8007770:	d100      	bne.n	8007774 <HAL_SPI_IRQHandler+0x9c>
 8007772:	e0a9      	b.n	80078c8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	099b      	lsrs	r3, r3, #6
 8007778:	001a      	movs	r2, r3
 800777a:	2301      	movs	r3, #1
 800777c:	4013      	ands	r3, r2
 800777e:	d023      	beq.n	80077c8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	225d      	movs	r2, #93	; 0x5d
 8007784:	5c9b      	ldrb	r3, [r3, r2]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	2b03      	cmp	r3, #3
 800778a:	d011      	beq.n	80077b0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007790:	2204      	movs	r2, #4
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	e00b      	b.n	80077c8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
        return;
 80077c6:	e07f      	b.n	80078c8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	001a      	movs	r2, r3
 80077ce:	2301      	movs	r3, #1
 80077d0:	4013      	ands	r3, r2
 80077d2:	d014      	beq.n	80077fe <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d8:	2201      	movs	r2, #1
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2140      	movs	r1, #64	; 0x40
 80077f8:	438a      	bics	r2, r1
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	0a1b      	lsrs	r3, r3, #8
 8007802:	001a      	movs	r2, r3
 8007804:	2301      	movs	r3, #1
 8007806:	4013      	ands	r3, r2
 8007808:	d00c      	beq.n	8007824 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780e:	2208      	movs	r2, #8
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007816:	2300      	movs	r3, #0
 8007818:	60bb      	str	r3, [r7, #8]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007828:	2b00      	cmp	r3, #0
 800782a:	d04c      	beq.n	80078c6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	21e0      	movs	r1, #224	; 0xe0
 8007838:	438a      	bics	r2, r1
 800783a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	225d      	movs	r2, #93	; 0x5d
 8007840:	2101      	movs	r1, #1
 8007842:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2202      	movs	r2, #2
 8007848:	4013      	ands	r3, r2
 800784a:	d103      	bne.n	8007854 <HAL_SPI_IRQHandler+0x17c>
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2201      	movs	r2, #1
 8007850:	4013      	ands	r3, r2
 8007852:	d032      	beq.n	80078ba <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2103      	movs	r1, #3
 8007860:	438a      	bics	r2, r1
 8007862:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007870:	4a17      	ldr	r2, [pc, #92]	; (80078d0 <HAL_SPI_IRQHandler+0x1f8>)
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007878:	0018      	movs	r0, r3
 800787a:	f7fc f8d7 	bl	8003a2c <HAL_DMA_Abort_IT>
 800787e:	1e03      	subs	r3, r0, #0
 8007880:	d005      	beq.n	800788e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007886:	2240      	movs	r2, #64	; 0x40
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007892:	2b00      	cmp	r3, #0
 8007894:	d016      	beq.n	80078c4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789a:	4a0d      	ldr	r2, [pc, #52]	; (80078d0 <HAL_SPI_IRQHandler+0x1f8>)
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	0018      	movs	r0, r3
 80078a4:	f7fc f8c2 	bl	8003a2c <HAL_DMA_Abort_IT>
 80078a8:	1e03      	subs	r3, r0, #0
 80078aa:	d00b      	beq.n	80078c4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078b0:	2240      	movs	r2, #64	; 0x40
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80078b8:	e004      	b.n	80078c4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	0018      	movs	r0, r3
 80078be:	f000 f819 	bl	80078f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80078c2:	e000      	b.n	80078c6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80078c4:	46c0      	nop			; (mov r8, r8)
    return;
 80078c6:	46c0      	nop			; (mov r8, r8)
  }
}
 80078c8:	46bd      	mov	sp, r7
 80078ca:	b008      	add	sp, #32
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	46c0      	nop			; (mov r8, r8)
 80078d0:	08007ac9 	.word	0x08007ac9

080078d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80078dc:	46c0      	nop			; (mov r8, r8)
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b002      	add	sp, #8
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078fc:	46c0      	nop			; (mov r8, r8)
 80078fe:	46bd      	mov	sp, r7
 8007900:	b002      	add	sp, #8
 8007902:	bd80      	pop	{r7, pc}

08007904 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007912:	f7fb fbf9 	bl	8003108 <HAL_GetTick>
 8007916:	0003      	movs	r3, r0
 8007918:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2220      	movs	r2, #32
 8007922:	4013      	ands	r3, r2
 8007924:	2b20      	cmp	r3, #32
 8007926:	d03e      	beq.n	80079a6 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2120      	movs	r1, #32
 8007934:	438a      	bics	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10e      	bne.n	800795e <SPI_DMAReceiveCplt+0x5a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	2382      	movs	r3, #130	; 0x82
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	429a      	cmp	r2, r3
 800794a:	d108      	bne.n	800795e <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2103      	movs	r1, #3
 8007958:	438a      	bics	r2, r1
 800795a:	605a      	str	r2, [r3, #4]
 800795c:	e007      	b.n	800796e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2101      	movs	r1, #1
 800796a:	438a      	bics	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2164      	movs	r1, #100	; 0x64
 8007974:	0018      	movs	r0, r3
 8007976:	f000 f9e1 	bl	8007d3c <SPI_EndRxTransaction>
 800797a:	1e03      	subs	r3, r0, #0
 800797c:	d002      	beq.n	8007984 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2246      	movs	r2, #70	; 0x46
 8007988:	2100      	movs	r1, #0
 800798a:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	225d      	movs	r2, #93	; 0x5d
 8007990:	2101      	movs	r1, #1
 8007992:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007998:	2b00      	cmp	r3, #0
 800799a:	d004      	beq.n	80079a6 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	0018      	movs	r0, r3
 80079a0:	f7ff ffa8 	bl	80078f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079a4:	e003      	b.n	80079ae <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7f9 fb7f 	bl	80010ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b004      	add	sp, #16
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079c2:	f7fb fba1 	bl	8003108 <HAL_GetTick>
 80079c6:	0003      	movs	r3, r0
 80079c8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2220      	movs	r2, #32
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d031      	beq.n	8007a3c <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2120      	movs	r1, #32
 80079e4:	438a      	bics	r2, r1
 80079e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2164      	movs	r1, #100	; 0x64
 80079ee:	0018      	movs	r0, r3
 80079f0:	f000 fa02 	bl	8007df8 <SPI_EndRxTxTransaction>
 80079f4:	1e03      	subs	r3, r0, #0
 80079f6:	d005      	beq.n	8007a04 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fc:	2220      	movs	r2, #32
 80079fe:	431a      	orrs	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2103      	movs	r1, #3
 8007a10:	438a      	bics	r2, r1
 8007a12:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2246      	movs	r2, #70	; 0x46
 8007a1e:	2100      	movs	r1, #0
 8007a20:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	225d      	movs	r2, #93	; 0x5d
 8007a26:	2101      	movs	r1, #1
 8007a28:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d004      	beq.n	8007a3c <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	0018      	movs	r0, r3
 8007a36:	f7ff ff5d 	bl	80078f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a3a:	e003      	b.n	8007a44 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7ff ff48 	bl	80078d4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b004      	add	sp, #16
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0018      	movs	r0, r3
 8007a5c:	f7f9 faee 	bl	800103c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a60:	46c0      	nop			; (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b004      	add	sp, #16
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7ff ff33 	bl	80078e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	46bd      	mov	sp, r7
 8007a82:	b004      	add	sp, #16
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a86:	b580      	push	{r7, lr}
 8007a88:	b084      	sub	sp, #16
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2103      	movs	r1, #3
 8007aa0:	438a      	bics	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	225d      	movs	r2, #93	; 0x5d
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	0018      	movs	r0, r3
 8007abc:	f7ff ff1a 	bl	80078f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b004      	add	sp, #16
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2246      	movs	r2, #70	; 0x46
 8007ada:	2100      	movs	r1, #0
 8007adc:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f7ff ff04 	bl	80078f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007aec:	46c0      	nop			; (mov r8, r8)
 8007aee:	46bd      	mov	sp, r7
 8007af0:	b004      	add	sp, #16
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	1dfb      	adds	r3, r7, #7
 8007b02:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b04:	f7fb fb00 	bl	8003108 <HAL_GetTick>
 8007b08:	0002      	movs	r2, r0
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	1a9b      	subs	r3, r3, r2
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	18d3      	adds	r3, r2, r3
 8007b12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b14:	f7fb faf8 	bl	8003108 <HAL_GetTick>
 8007b18:	0003      	movs	r3, r0
 8007b1a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b1c:	4b3a      	ldr	r3, [pc, #232]	; (8007c08 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	015b      	lsls	r3, r3, #5
 8007b22:	0d1b      	lsrs	r3, r3, #20
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	4353      	muls	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b2a:	e058      	b.n	8007bde <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	d055      	beq.n	8007bde <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b32:	f7fb fae9 	bl	8003108 <HAL_GetTick>
 8007b36:	0002      	movs	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	69fa      	ldr	r2, [r7, #28]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d902      	bls.n	8007b48 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d142      	bne.n	8007bce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	21e0      	movs	r1, #224	; 0xe0
 8007b54:	438a      	bics	r2, r1
 8007b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	2382      	movs	r3, #130	; 0x82
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d113      	bne.n	8007b8c <SPI_WaitFlagStateUntilTimeout+0x98>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	2380      	movs	r3, #128	; 0x80
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d005      	beq.n	8007b7c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	689a      	ldr	r2, [r3, #8]
 8007b74:	2380      	movs	r3, #128	; 0x80
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d107      	bne.n	8007b8c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2140      	movs	r1, #64	; 0x40
 8007b88:	438a      	bics	r2, r1
 8007b8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b90:	2380      	movs	r3, #128	; 0x80
 8007b92:	019b      	lsls	r3, r3, #6
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d110      	bne.n	8007bba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	491a      	ldr	r1, [pc, #104]	; (8007c0c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007ba4:	400a      	ands	r2, r1
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2180      	movs	r1, #128	; 0x80
 8007bb4:	0189      	lsls	r1, r1, #6
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	225d      	movs	r2, #93	; 0x5d
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	225c      	movs	r2, #92	; 0x5c
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e017      	b.n	8007bfe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d101      	bne.n	8007bd8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	4013      	ands	r3, r2
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	425a      	negs	r2, r3
 8007bee:	4153      	adcs	r3, r2
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	001a      	movs	r2, r3
 8007bf4:	1dfb      	adds	r3, r7, #7
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d197      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b008      	add	sp, #32
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	20003134 	.word	0x20003134
 8007c0c:	ffffdfff 	.word	0xffffdfff

08007c10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b088      	sub	sp, #32
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007c1e:	f7fb fa73 	bl	8003108 <HAL_GetTick>
 8007c22:	0002      	movs	r2, r0
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	18d3      	adds	r3, r2, r3
 8007c2c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c2e:	f7fb fa6b 	bl	8003108 <HAL_GetTick>
 8007c32:	0003      	movs	r3, r0
 8007c34:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007c36:	4b3f      	ldr	r3, [pc, #252]	; (8007d34 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	0013      	movs	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	189b      	adds	r3, r3, r2
 8007c40:	00da      	lsls	r2, r3, #3
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	0d1b      	lsrs	r3, r3, #20
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	4353      	muls	r3, r2
 8007c4a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007c4c:	e064      	b.n	8007d18 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	23c0      	movs	r3, #192	; 0xc0
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d106      	bne.n	8007c66 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	d055      	beq.n	8007d18 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c6c:	f7fb fa4c 	bl	8003108 <HAL_GetTick>
 8007c70:	0002      	movs	r2, r0
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d902      	bls.n	8007c82 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d142      	bne.n	8007d08 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	21e0      	movs	r1, #224	; 0xe0
 8007c8e:	438a      	bics	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	2382      	movs	r3, #130	; 0x82
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d113      	bne.n	8007cc6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	689a      	ldr	r2, [r3, #8]
 8007ca2:	2380      	movs	r3, #128	; 0x80
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d005      	beq.n	8007cb6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	2380      	movs	r3, #128	; 0x80
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d107      	bne.n	8007cc6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2140      	movs	r1, #64	; 0x40
 8007cc2:	438a      	bics	r2, r1
 8007cc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cca:	2380      	movs	r3, #128	; 0x80
 8007ccc:	019b      	lsls	r3, r3, #6
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d110      	bne.n	8007cf4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4916      	ldr	r1, [pc, #88]	; (8007d38 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007cde:	400a      	ands	r2, r1
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2180      	movs	r1, #128	; 0x80
 8007cee:	0189      	lsls	r1, r1, #6
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	225d      	movs	r2, #93	; 0x5d
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	225c      	movs	r2, #92	; 0x5c
 8007d00:	2100      	movs	r1, #0
 8007d02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e010      	b.n	8007d2a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	4013      	ands	r3, r2
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d192      	bne.n	8007c4e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	b008      	add	sp, #32
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	46c0      	nop			; (mov r8, r8)
 8007d34:	20003134 	.word	0x20003134
 8007d38:	ffffdfff 	.word	0xffffdfff

08007d3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	685a      	ldr	r2, [r3, #4]
 8007d4c:	2382      	movs	r3, #130	; 0x82
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d113      	bne.n	8007d7c <SPI_EndRxTransaction+0x40>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689a      	ldr	r2, [r3, #8]
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d005      	beq.n	8007d6c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689a      	ldr	r2, [r3, #8]
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d107      	bne.n	8007d7c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2140      	movs	r1, #64	; 0x40
 8007d78:	438a      	bics	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	0013      	movs	r3, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	2180      	movs	r1, #128	; 0x80
 8007d8a:	f7ff feb3 	bl	8007af4 <SPI_WaitFlagStateUntilTimeout>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d007      	beq.n	8007da2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d96:	2220      	movs	r2, #32
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e026      	b.n	8007df0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	2382      	movs	r3, #130	; 0x82
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d11f      	bne.n	8007dee <SPI_EndRxTransaction+0xb2>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	689a      	ldr	r2, [r3, #8]
 8007db2:	2380      	movs	r3, #128	; 0x80
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d005      	beq.n	8007dc6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	2380      	movs	r3, #128	; 0x80
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d113      	bne.n	8007dee <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	23c0      	movs	r3, #192	; 0xc0
 8007dca:	00d9      	lsls	r1, r3, #3
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	0013      	movs	r3, r2
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f7ff ff1b 	bl	8007c10 <SPI_WaitFifoStateUntilTimeout>
 8007dda:	1e03      	subs	r3, r0, #0
 8007ddc:	d007      	beq.n	8007dee <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de2:	2220      	movs	r2, #32
 8007de4:	431a      	orrs	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e000      	b.n	8007df0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	0018      	movs	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b004      	add	sp, #16
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	23c0      	movs	r3, #192	; 0xc0
 8007e08:	0159      	lsls	r1, r3, #5
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	0013      	movs	r3, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	f7ff fefc 	bl	8007c10 <SPI_WaitFifoStateUntilTimeout>
 8007e18:	1e03      	subs	r3, r0, #0
 8007e1a:	d007      	beq.n	8007e2c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e20:	2220      	movs	r2, #32
 8007e22:	431a      	orrs	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e027      	b.n	8007e7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	0013      	movs	r3, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	2180      	movs	r1, #128	; 0x80
 8007e3a:	f7ff fe5b 	bl	8007af4 <SPI_WaitFlagStateUntilTimeout>
 8007e3e:	1e03      	subs	r3, r0, #0
 8007e40:	d007      	beq.n	8007e52 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e46:	2220      	movs	r2, #32
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e014      	b.n	8007e7c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	23c0      	movs	r3, #192	; 0xc0
 8007e56:	00d9      	lsls	r1, r3, #3
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	0013      	movs	r3, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	f7ff fed5 	bl	8007c10 <SPI_WaitFifoStateUntilTimeout>
 8007e66:	1e03      	subs	r3, r0, #0
 8007e68:	d007      	beq.n	8007e7a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6e:	2220      	movs	r2, #32
 8007e70:	431a      	orrs	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e000      	b.n	8007e7c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b004      	add	sp, #16
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e04a      	b.n	8007f2c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	223d      	movs	r2, #61	; 0x3d
 8007e9a:	5c9b      	ldrb	r3, [r3, r2]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	223c      	movs	r2, #60	; 0x3c
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	0018      	movs	r0, r3
 8007eae:	f7fa fe53 	bl	8002b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	223d      	movs	r2, #61	; 0x3d
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	0019      	movs	r1, r3
 8007ec4:	0010      	movs	r0, r2
 8007ec6:	f000 fb41 	bl	800854c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2248      	movs	r2, #72	; 0x48
 8007ece:	2101      	movs	r1, #1
 8007ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	223e      	movs	r2, #62	; 0x3e
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	5499      	strb	r1, [r3, r2]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	223f      	movs	r2, #63	; 0x3f
 8007ede:	2101      	movs	r1, #1
 8007ee0:	5499      	strb	r1, [r3, r2]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	5499      	strb	r1, [r3, r2]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2241      	movs	r2, #65	; 0x41
 8007eee:	2101      	movs	r1, #1
 8007ef0:	5499      	strb	r1, [r3, r2]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2242      	movs	r2, #66	; 0x42
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	5499      	strb	r1, [r3, r2]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2243      	movs	r2, #67	; 0x43
 8007efe:	2101      	movs	r1, #1
 8007f00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2244      	movs	r2, #68	; 0x44
 8007f06:	2101      	movs	r1, #1
 8007f08:	5499      	strb	r1, [r3, r2]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2245      	movs	r2, #69	; 0x45
 8007f0e:	2101      	movs	r1, #1
 8007f10:	5499      	strb	r1, [r3, r2]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2246      	movs	r2, #70	; 0x46
 8007f16:	2101      	movs	r1, #1
 8007f18:	5499      	strb	r1, [r3, r2]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2247      	movs	r2, #71	; 0x47
 8007f1e:	2101      	movs	r1, #1
 8007f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	223d      	movs	r2, #61	; 0x3d
 8007f26:	2101      	movs	r1, #1
 8007f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b002      	add	sp, #8
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e04a      	b.n	8007fdc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	223d      	movs	r2, #61	; 0x3d
 8007f4a:	5c9b      	ldrb	r3, [r3, r2]
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d107      	bne.n	8007f62 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	223c      	movs	r2, #60	; 0x3c
 8007f56:	2100      	movs	r1, #0
 8007f58:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 f841 	bl	8007fe4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	223d      	movs	r2, #61	; 0x3d
 8007f66:	2102      	movs	r1, #2
 8007f68:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3304      	adds	r3, #4
 8007f72:	0019      	movs	r1, r3
 8007f74:	0010      	movs	r0, r2
 8007f76:	f000 fae9 	bl	800854c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2248      	movs	r2, #72	; 0x48
 8007f7e:	2101      	movs	r1, #1
 8007f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	223e      	movs	r2, #62	; 0x3e
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	223f      	movs	r2, #63	; 0x3f
 8007f8e:	2101      	movs	r1, #1
 8007f90:	5499      	strb	r1, [r3, r2]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2240      	movs	r2, #64	; 0x40
 8007f96:	2101      	movs	r1, #1
 8007f98:	5499      	strb	r1, [r3, r2]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2241      	movs	r2, #65	; 0x41
 8007f9e:	2101      	movs	r1, #1
 8007fa0:	5499      	strb	r1, [r3, r2]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2242      	movs	r2, #66	; 0x42
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	5499      	strb	r1, [r3, r2]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2243      	movs	r2, #67	; 0x43
 8007fae:	2101      	movs	r1, #1
 8007fb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2244      	movs	r2, #68	; 0x44
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	5499      	strb	r1, [r3, r2]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2245      	movs	r2, #69	; 0x45
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	5499      	strb	r1, [r3, r2]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2246      	movs	r2, #70	; 0x46
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	5499      	strb	r1, [r3, r2]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2247      	movs	r2, #71	; 0x47
 8007fce:	2101      	movs	r1, #1
 8007fd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	223d      	movs	r2, #61	; 0x3d
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	0018      	movs	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fec:	46c0      	nop			; (mov r8, r8)
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b002      	add	sp, #8
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d108      	bne.n	8008016 <HAL_TIM_PWM_Start+0x22>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	223e      	movs	r2, #62	; 0x3e
 8008008:	5c9b      	ldrb	r3, [r3, r2]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	3b01      	subs	r3, #1
 800800e:	1e5a      	subs	r2, r3, #1
 8008010:	4193      	sbcs	r3, r2
 8008012:	b2db      	uxtb	r3, r3
 8008014:	e037      	b.n	8008086 <HAL_TIM_PWM_Start+0x92>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b04      	cmp	r3, #4
 800801a:	d108      	bne.n	800802e <HAL_TIM_PWM_Start+0x3a>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	223f      	movs	r2, #63	; 0x3f
 8008020:	5c9b      	ldrb	r3, [r3, r2]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	1e5a      	subs	r2, r3, #1
 8008028:	4193      	sbcs	r3, r2
 800802a:	b2db      	uxtb	r3, r3
 800802c:	e02b      	b.n	8008086 <HAL_TIM_PWM_Start+0x92>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d108      	bne.n	8008046 <HAL_TIM_PWM_Start+0x52>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	5c9b      	ldrb	r3, [r3, r2]
 800803a:	b2db      	uxtb	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	4193      	sbcs	r3, r2
 8008042:	b2db      	uxtb	r3, r3
 8008044:	e01f      	b.n	8008086 <HAL_TIM_PWM_Start+0x92>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b0c      	cmp	r3, #12
 800804a:	d108      	bne.n	800805e <HAL_TIM_PWM_Start+0x6a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2241      	movs	r2, #65	; 0x41
 8008050:	5c9b      	ldrb	r3, [r3, r2]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	1e5a      	subs	r2, r3, #1
 8008058:	4193      	sbcs	r3, r2
 800805a:	b2db      	uxtb	r3, r3
 800805c:	e013      	b.n	8008086 <HAL_TIM_PWM_Start+0x92>
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b10      	cmp	r3, #16
 8008062:	d108      	bne.n	8008076 <HAL_TIM_PWM_Start+0x82>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2242      	movs	r2, #66	; 0x42
 8008068:	5c9b      	ldrb	r3, [r3, r2]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	1e5a      	subs	r2, r3, #1
 8008070:	4193      	sbcs	r3, r2
 8008072:	b2db      	uxtb	r3, r3
 8008074:	e007      	b.n	8008086 <HAL_TIM_PWM_Start+0x92>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2243      	movs	r2, #67	; 0x43
 800807a:	5c9b      	ldrb	r3, [r3, r2]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	1e5a      	subs	r2, r3, #1
 8008082:	4193      	sbcs	r3, r2
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e08b      	b.n	80081a6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d104      	bne.n	800809e <HAL_TIM_PWM_Start+0xaa>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	223e      	movs	r2, #62	; 0x3e
 8008098:	2102      	movs	r1, #2
 800809a:	5499      	strb	r1, [r3, r2]
 800809c:	e023      	b.n	80080e6 <HAL_TIM_PWM_Start+0xf2>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d104      	bne.n	80080ae <HAL_TIM_PWM_Start+0xba>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	223f      	movs	r2, #63	; 0x3f
 80080a8:	2102      	movs	r1, #2
 80080aa:	5499      	strb	r1, [r3, r2]
 80080ac:	e01b      	b.n	80080e6 <HAL_TIM_PWM_Start+0xf2>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d104      	bne.n	80080be <HAL_TIM_PWM_Start+0xca>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2240      	movs	r2, #64	; 0x40
 80080b8:	2102      	movs	r1, #2
 80080ba:	5499      	strb	r1, [r3, r2]
 80080bc:	e013      	b.n	80080e6 <HAL_TIM_PWM_Start+0xf2>
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b0c      	cmp	r3, #12
 80080c2:	d104      	bne.n	80080ce <HAL_TIM_PWM_Start+0xda>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2241      	movs	r2, #65	; 0x41
 80080c8:	2102      	movs	r1, #2
 80080ca:	5499      	strb	r1, [r3, r2]
 80080cc:	e00b      	b.n	80080e6 <HAL_TIM_PWM_Start+0xf2>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b10      	cmp	r3, #16
 80080d2:	d104      	bne.n	80080de <HAL_TIM_PWM_Start+0xea>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2242      	movs	r2, #66	; 0x42
 80080d8:	2102      	movs	r1, #2
 80080da:	5499      	strb	r1, [r3, r2]
 80080dc:	e003      	b.n	80080e6 <HAL_TIM_PWM_Start+0xf2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2243      	movs	r2, #67	; 0x43
 80080e2:	2102      	movs	r1, #2
 80080e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	2201      	movs	r2, #1
 80080ee:	0018      	movs	r0, r3
 80080f0:	f000 fe0c 	bl	8008d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a2d      	ldr	r2, [pc, #180]	; (80081b0 <HAL_TIM_PWM_Start+0x1bc>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00e      	beq.n	800811c <HAL_TIM_PWM_Start+0x128>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2c      	ldr	r2, [pc, #176]	; (80081b4 <HAL_TIM_PWM_Start+0x1c0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d009      	beq.n	800811c <HAL_TIM_PWM_Start+0x128>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <HAL_TIM_PWM_Start+0x1c4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d004      	beq.n	800811c <HAL_TIM_PWM_Start+0x128>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a29      	ldr	r2, [pc, #164]	; (80081bc <HAL_TIM_PWM_Start+0x1c8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d101      	bne.n	8008120 <HAL_TIM_PWM_Start+0x12c>
 800811c:	2301      	movs	r3, #1
 800811e:	e000      	b.n	8008122 <HAL_TIM_PWM_Start+0x12e>
 8008120:	2300      	movs	r3, #0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2180      	movs	r1, #128	; 0x80
 8008132:	0209      	lsls	r1, r1, #8
 8008134:	430a      	orrs	r2, r1
 8008136:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1c      	ldr	r2, [pc, #112]	; (80081b0 <HAL_TIM_PWM_Start+0x1bc>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d00f      	beq.n	8008162 <HAL_TIM_PWM_Start+0x16e>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	2380      	movs	r3, #128	; 0x80
 8008148:	05db      	lsls	r3, r3, #23
 800814a:	429a      	cmp	r2, r3
 800814c:	d009      	beq.n	8008162 <HAL_TIM_PWM_Start+0x16e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <HAL_TIM_PWM_Start+0x1cc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d004      	beq.n	8008162 <HAL_TIM_PWM_Start+0x16e>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIM_PWM_Start+0x1c0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d116      	bne.n	8008190 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <HAL_TIM_PWM_Start+0x1d0>)
 800816a:	4013      	ands	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b06      	cmp	r3, #6
 8008172:	d016      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x1ae>
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	2380      	movs	r3, #128	; 0x80
 8008178:	025b      	lsls	r3, r3, #9
 800817a:	429a      	cmp	r2, r3
 800817c:	d011      	beq.n	80081a2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2101      	movs	r1, #1
 800818a:	430a      	orrs	r2, r1
 800818c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818e:	e008      	b.n	80081a2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2101      	movs	r1, #1
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	e000      	b.n	80081a4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	0018      	movs	r0, r3
 80081a8:	46bd      	mov	sp, r7
 80081aa:	b004      	add	sp, #16
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800
 80081c0:	40000400 	.word	0x40000400
 80081c4:	00010007 	.word	0x00010007

080081c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	223c      	movs	r2, #60	; 0x3c
 80081d8:	5c9b      	ldrb	r3, [r3, r2]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081de:	2302      	movs	r3, #2
 80081e0:	e0df      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	223c      	movs	r2, #60	; 0x3c
 80081e6:	2101      	movs	r1, #1
 80081e8:	5499      	strb	r1, [r3, r2]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b14      	cmp	r3, #20
 80081ee:	d900      	bls.n	80081f2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80081f0:	e0d1      	b.n	8008396 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	009a      	lsls	r2, r3, #2
 80081f6:	4b6d      	ldr	r3, [pc, #436]	; (80083ac <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80081f8:	18d3      	adds	r3, r2, r3
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0011      	movs	r1, r2
 8008206:	0018      	movs	r0, r3
 8008208:	f000 fa20 	bl	800864c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2108      	movs	r1, #8
 8008218:	430a      	orrs	r2, r1
 800821a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699a      	ldr	r2, [r3, #24]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2104      	movs	r1, #4
 8008228:	438a      	bics	r2, r1
 800822a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6999      	ldr	r1, [r3, #24]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	691a      	ldr	r2, [r3, #16]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	619a      	str	r2, [r3, #24]
      break;
 800823e:	e0ab      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	0011      	movs	r1, r2
 8008248:	0018      	movs	r0, r3
 800824a:	f000 fa89 	bl	8008760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699a      	ldr	r2, [r3, #24]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2180      	movs	r1, #128	; 0x80
 800825a:	0109      	lsls	r1, r1, #4
 800825c:	430a      	orrs	r2, r1
 800825e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	699a      	ldr	r2, [r3, #24]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4951      	ldr	r1, [pc, #324]	; (80083b0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800826c:	400a      	ands	r2, r1
 800826e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6999      	ldr	r1, [r3, #24]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	021a      	lsls	r2, r3, #8
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	619a      	str	r2, [r3, #24]
      break;
 8008284:	e088      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	0011      	movs	r1, r2
 800828e:	0018      	movs	r0, r3
 8008290:	f000 faea 	bl	8008868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2108      	movs	r1, #8
 80082a0:	430a      	orrs	r2, r1
 80082a2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69da      	ldr	r2, [r3, #28]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2104      	movs	r1, #4
 80082b0:	438a      	bics	r2, r1
 80082b2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69d9      	ldr	r1, [r3, #28]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	691a      	ldr	r2, [r3, #16]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	61da      	str	r2, [r3, #28]
      break;
 80082c6:	e067      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	0011      	movs	r1, r2
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 fb51 	bl	8008978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69da      	ldr	r2, [r3, #28]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2180      	movs	r1, #128	; 0x80
 80082e2:	0109      	lsls	r1, r1, #4
 80082e4:	430a      	orrs	r2, r1
 80082e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69da      	ldr	r2, [r3, #28]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	492f      	ldr	r1, [pc, #188]	; (80083b0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082f4:	400a      	ands	r2, r1
 80082f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69d9      	ldr	r1, [r3, #28]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	021a      	lsls	r2, r3, #8
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	61da      	str	r2, [r3, #28]
      break;
 800830c:	e044      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	0011      	movs	r1, r2
 8008316:	0018      	movs	r0, r3
 8008318:	f000 fb98 	bl	8008a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2108      	movs	r1, #8
 8008328:	430a      	orrs	r2, r1
 800832a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2104      	movs	r1, #4
 8008338:	438a      	bics	r2, r1
 800833a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800834e:	e023      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f000 fbd7 	bl	8008b0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	0109      	lsls	r1, r1, #4
 800836c:	430a      	orrs	r2, r1
 800836e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	490d      	ldr	r1, [pc, #52]	; (80083b0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800837c:	400a      	ands	r2, r1
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	021a      	lsls	r2, r3, #8
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008394:	e000      	b.n	8008398 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8008396:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	223c      	movs	r2, #60	; 0x3c
 800839c:	2100      	movs	r1, #0
 800839e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	0018      	movs	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b004      	add	sp, #16
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			; (mov r8, r8)
 80083ac:	0800a820 	.word	0x0800a820
 80083b0:	fffffbff 	.word	0xfffffbff

080083b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	223c      	movs	r2, #60	; 0x3c
 80083c2:	5c9b      	ldrb	r3, [r3, r2]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_TIM_ConfigClockSource+0x18>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e0b7      	b.n	800853c <HAL_TIM_ConfigClockSource+0x188>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	223c      	movs	r2, #60	; 0x3c
 80083d0:	2101      	movs	r1, #1
 80083d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	223d      	movs	r2, #61	; 0x3d
 80083d8:	2102      	movs	r1, #2
 80083da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4a57      	ldr	r2, [pc, #348]	; (8008544 <HAL_TIM_ConfigClockSource+0x190>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4a56      	ldr	r2, [pc, #344]	; (8008548 <HAL_TIM_ConfigClockSource+0x194>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2280      	movs	r2, #128	; 0x80
 8008402:	0192      	lsls	r2, r2, #6
 8008404:	4293      	cmp	r3, r2
 8008406:	d040      	beq.n	800848a <HAL_TIM_ConfigClockSource+0xd6>
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	0192      	lsls	r2, r2, #6
 800840c:	4293      	cmp	r3, r2
 800840e:	d900      	bls.n	8008412 <HAL_TIM_ConfigClockSource+0x5e>
 8008410:	e088      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 8008412:	2280      	movs	r2, #128	; 0x80
 8008414:	0152      	lsls	r2, r2, #5
 8008416:	4293      	cmp	r3, r2
 8008418:	d100      	bne.n	800841c <HAL_TIM_ConfigClockSource+0x68>
 800841a:	e085      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>
 800841c:	2280      	movs	r2, #128	; 0x80
 800841e:	0152      	lsls	r2, r2, #5
 8008420:	4293      	cmp	r3, r2
 8008422:	d900      	bls.n	8008426 <HAL_TIM_ConfigClockSource+0x72>
 8008424:	e07e      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 8008426:	2b70      	cmp	r3, #112	; 0x70
 8008428:	d018      	beq.n	800845c <HAL_TIM_ConfigClockSource+0xa8>
 800842a:	d900      	bls.n	800842e <HAL_TIM_ConfigClockSource+0x7a>
 800842c:	e07a      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 800842e:	2b60      	cmp	r3, #96	; 0x60
 8008430:	d04f      	beq.n	80084d2 <HAL_TIM_ConfigClockSource+0x11e>
 8008432:	d900      	bls.n	8008436 <HAL_TIM_ConfigClockSource+0x82>
 8008434:	e076      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 8008436:	2b50      	cmp	r3, #80	; 0x50
 8008438:	d03b      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0xfe>
 800843a:	d900      	bls.n	800843e <HAL_TIM_ConfigClockSource+0x8a>
 800843c:	e072      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d057      	beq.n	80084f2 <HAL_TIM_ConfigClockSource+0x13e>
 8008442:	d900      	bls.n	8008446 <HAL_TIM_ConfigClockSource+0x92>
 8008444:	e06e      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 8008446:	2b30      	cmp	r3, #48	; 0x30
 8008448:	d063      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0x15e>
 800844a:	d86b      	bhi.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 800844c:	2b20      	cmp	r3, #32
 800844e:	d060      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0x15e>
 8008450:	d868      	bhi.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d05d      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0x15e>
 8008456:	2b10      	cmp	r3, #16
 8008458:	d05b      	beq.n	8008512 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800845a:	e063      	b.n	8008524 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6899      	ldr	r1, [r3, #8]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f000 fc2e 	bl	8008ccc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2277      	movs	r2, #119	; 0x77
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	609a      	str	r2, [r3, #8]
      break;
 8008488:	e04f      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6899      	ldr	r1, [r3, #8]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	f000 fc17 	bl	8008ccc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2180      	movs	r1, #128	; 0x80
 80084aa:	01c9      	lsls	r1, r1, #7
 80084ac:	430a      	orrs	r2, r1
 80084ae:	609a      	str	r2, [r3, #8]
      break;
 80084b0:	e03b      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6818      	ldr	r0, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6859      	ldr	r1, [r3, #4]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	001a      	movs	r2, r3
 80084c0:	f000 fb88 	bl	8008bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2150      	movs	r1, #80	; 0x50
 80084ca:	0018      	movs	r0, r3
 80084cc:	f000 fbe2 	bl	8008c94 <TIM_ITRx_SetConfig>
      break;
 80084d0:	e02b      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6818      	ldr	r0, [r3, #0]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	6859      	ldr	r1, [r3, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	001a      	movs	r2, r3
 80084e0:	f000 fba6 	bl	8008c30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2160      	movs	r1, #96	; 0x60
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 fbd2 	bl	8008c94 <TIM_ITRx_SetConfig>
      break;
 80084f0:	e01b      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6818      	ldr	r0, [r3, #0]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	6859      	ldr	r1, [r3, #4]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	001a      	movs	r2, r3
 8008500:	f000 fb68 	bl	8008bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2140      	movs	r1, #64	; 0x40
 800850a:	0018      	movs	r0, r3
 800850c:	f000 fbc2 	bl	8008c94 <TIM_ITRx_SetConfig>
      break;
 8008510:	e00b      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	0019      	movs	r1, r3
 800851c:	0010      	movs	r0, r2
 800851e:	f000 fbb9 	bl	8008c94 <TIM_ITRx_SetConfig>
        break;
 8008522:	e002      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008524:	46c0      	nop			; (mov r8, r8)
 8008526:	e000      	b.n	800852a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008528:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	223d      	movs	r2, #61	; 0x3d
 800852e:	2101      	movs	r1, #1
 8008530:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	223c      	movs	r2, #60	; 0x3c
 8008536:	2100      	movs	r1, #0
 8008538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	0018      	movs	r0, r3
 800853e:	46bd      	mov	sp, r7
 8008540:	b004      	add	sp, #16
 8008542:	bd80      	pop	{r7, pc}
 8008544:	ffceff88 	.word	0xffceff88
 8008548:	ffff00ff 	.word	0xffff00ff

0800854c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a34      	ldr	r2, [pc, #208]	; (8008630 <TIM_Base_SetConfig+0xe4>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d008      	beq.n	8008576 <TIM_Base_SetConfig+0x2a>
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	2380      	movs	r3, #128	; 0x80
 8008568:	05db      	lsls	r3, r3, #23
 800856a:	429a      	cmp	r2, r3
 800856c:	d003      	beq.n	8008576 <TIM_Base_SetConfig+0x2a>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a30      	ldr	r2, [pc, #192]	; (8008634 <TIM_Base_SetConfig+0xe8>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d108      	bne.n	8008588 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2270      	movs	r2, #112	; 0x70
 800857a:	4393      	bics	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a29      	ldr	r2, [pc, #164]	; (8008630 <TIM_Base_SetConfig+0xe4>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d018      	beq.n	80085c2 <TIM_Base_SetConfig+0x76>
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	2380      	movs	r3, #128	; 0x80
 8008594:	05db      	lsls	r3, r3, #23
 8008596:	429a      	cmp	r2, r3
 8008598:	d013      	beq.n	80085c2 <TIM_Base_SetConfig+0x76>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a25      	ldr	r2, [pc, #148]	; (8008634 <TIM_Base_SetConfig+0xe8>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00f      	beq.n	80085c2 <TIM_Base_SetConfig+0x76>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a24      	ldr	r2, [pc, #144]	; (8008638 <TIM_Base_SetConfig+0xec>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d00b      	beq.n	80085c2 <TIM_Base_SetConfig+0x76>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a23      	ldr	r2, [pc, #140]	; (800863c <TIM_Base_SetConfig+0xf0>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d007      	beq.n	80085c2 <TIM_Base_SetConfig+0x76>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a22      	ldr	r2, [pc, #136]	; (8008640 <TIM_Base_SetConfig+0xf4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d003      	beq.n	80085c2 <TIM_Base_SetConfig+0x76>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a21      	ldr	r2, [pc, #132]	; (8008644 <TIM_Base_SetConfig+0xf8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d108      	bne.n	80085d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4a20      	ldr	r2, [pc, #128]	; (8008648 <TIM_Base_SetConfig+0xfc>)
 80085c6:	4013      	ands	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2280      	movs	r2, #128	; 0x80
 80085d8:	4393      	bics	r3, r2
 80085da:	001a      	movs	r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <TIM_Base_SetConfig+0xe4>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <TIM_Base_SetConfig+0xce>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a0d      	ldr	r2, [pc, #52]	; (800863c <TIM_Base_SetConfig+0xf0>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <TIM_Base_SetConfig+0xce>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a0c      	ldr	r2, [pc, #48]	; (8008640 <TIM_Base_SetConfig+0xf4>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_Base_SetConfig+0xce>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a0b      	ldr	r2, [pc, #44]	; (8008644 <TIM_Base_SetConfig+0xf8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d103      	bne.n	8008622 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	691a      	ldr	r2, [r3, #16]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	615a      	str	r2, [r3, #20]
}
 8008628:	46c0      	nop			; (mov r8, r8)
 800862a:	46bd      	mov	sp, r7
 800862c:	b004      	add	sp, #16
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40012c00 	.word	0x40012c00
 8008634:	40000400 	.word	0x40000400
 8008638:	40002000 	.word	0x40002000
 800863c:	40014000 	.word	0x40014000
 8008640:	40014400 	.word	0x40014400
 8008644:	40014800 	.word	0x40014800
 8008648:	fffffcff 	.word	0xfffffcff

0800864c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	2201      	movs	r2, #1
 800865c:	4393      	bics	r3, r2
 800865e:	001a      	movs	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a32      	ldr	r2, [pc, #200]	; (8008744 <TIM_OC1_SetConfig+0xf8>)
 800867a:	4013      	ands	r3, r2
 800867c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2203      	movs	r2, #3
 8008682:	4393      	bics	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2202      	movs	r2, #2
 8008694:	4393      	bics	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a28      	ldr	r2, [pc, #160]	; (8008748 <TIM_OC1_SetConfig+0xfc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00b      	beq.n	80086c2 <TIM_OC1_SetConfig+0x76>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a27      	ldr	r2, [pc, #156]	; (800874c <TIM_OC1_SetConfig+0x100>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d007      	beq.n	80086c2 <TIM_OC1_SetConfig+0x76>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a26      	ldr	r2, [pc, #152]	; (8008750 <TIM_OC1_SetConfig+0x104>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d003      	beq.n	80086c2 <TIM_OC1_SetConfig+0x76>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a25      	ldr	r2, [pc, #148]	; (8008754 <TIM_OC1_SetConfig+0x108>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d10c      	bne.n	80086dc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2208      	movs	r2, #8
 80086c6:	4393      	bics	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2204      	movs	r2, #4
 80086d8:	4393      	bics	r3, r2
 80086da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a1a      	ldr	r2, [pc, #104]	; (8008748 <TIM_OC1_SetConfig+0xfc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00b      	beq.n	80086fc <TIM_OC1_SetConfig+0xb0>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a19      	ldr	r2, [pc, #100]	; (800874c <TIM_OC1_SetConfig+0x100>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d007      	beq.n	80086fc <TIM_OC1_SetConfig+0xb0>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a18      	ldr	r2, [pc, #96]	; (8008750 <TIM_OC1_SetConfig+0x104>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d003      	beq.n	80086fc <TIM_OC1_SetConfig+0xb0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a17      	ldr	r2, [pc, #92]	; (8008754 <TIM_OC1_SetConfig+0x108>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d111      	bne.n	8008720 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	4a16      	ldr	r2, [pc, #88]	; (8008758 <TIM_OC1_SetConfig+0x10c>)
 8008700:	4013      	ands	r3, r2
 8008702:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4a15      	ldr	r2, [pc, #84]	; (800875c <TIM_OC1_SetConfig+0x110>)
 8008708:	4013      	ands	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	695b      	ldr	r3, [r3, #20]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	697a      	ldr	r2, [r7, #20]
 8008738:	621a      	str	r2, [r3, #32]
}
 800873a:	46c0      	nop			; (mov r8, r8)
 800873c:	46bd      	mov	sp, r7
 800873e:	b006      	add	sp, #24
 8008740:	bd80      	pop	{r7, pc}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	fffeff8f 	.word	0xfffeff8f
 8008748:	40012c00 	.word	0x40012c00
 800874c:	40014000 	.word	0x40014000
 8008750:	40014400 	.word	0x40014400
 8008754:	40014800 	.word	0x40014800
 8008758:	fffffeff 	.word	0xfffffeff
 800875c:	fffffdff 	.word	0xfffffdff

08008760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	2210      	movs	r2, #16
 8008770:	4393      	bics	r3, r2
 8008772:	001a      	movs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a1b      	ldr	r3, [r3, #32]
 800877c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	699b      	ldr	r3, [r3, #24]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4a2e      	ldr	r2, [pc, #184]	; (8008848 <TIM_OC2_SetConfig+0xe8>)
 800878e:	4013      	ands	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4a2d      	ldr	r2, [pc, #180]	; (800884c <TIM_OC2_SetConfig+0xec>)
 8008796:	4013      	ands	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2220      	movs	r2, #32
 80087aa:	4393      	bics	r3, r2
 80087ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	011b      	lsls	r3, r3, #4
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a24      	ldr	r2, [pc, #144]	; (8008850 <TIM_OC2_SetConfig+0xf0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d10d      	bne.n	80087de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2280      	movs	r2, #128	; 0x80
 80087c6:	4393      	bics	r3, r2
 80087c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	011b      	lsls	r3, r3, #4
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2240      	movs	r2, #64	; 0x40
 80087da:	4393      	bics	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <TIM_OC2_SetConfig+0xf0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d00b      	beq.n	80087fe <TIM_OC2_SetConfig+0x9e>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <TIM_OC2_SetConfig+0xf4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d007      	beq.n	80087fe <TIM_OC2_SetConfig+0x9e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a19      	ldr	r2, [pc, #100]	; (8008858 <TIM_OC2_SetConfig+0xf8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d003      	beq.n	80087fe <TIM_OC2_SetConfig+0x9e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a18      	ldr	r2, [pc, #96]	; (800885c <TIM_OC2_SetConfig+0xfc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d113      	bne.n	8008826 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	4a17      	ldr	r2, [pc, #92]	; (8008860 <TIM_OC2_SetConfig+0x100>)
 8008802:	4013      	ands	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	4a16      	ldr	r2, [pc, #88]	; (8008864 <TIM_OC2_SetConfig+0x104>)
 800880a:	4013      	ands	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	693a      	ldr	r2, [r7, #16]
 8008816:	4313      	orrs	r3, r2
 8008818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	621a      	str	r2, [r3, #32]
}
 8008840:	46c0      	nop			; (mov r8, r8)
 8008842:	46bd      	mov	sp, r7
 8008844:	b006      	add	sp, #24
 8008846:	bd80      	pop	{r7, pc}
 8008848:	feff8fff 	.word	0xfeff8fff
 800884c:	fffffcff 	.word	0xfffffcff
 8008850:	40012c00 	.word	0x40012c00
 8008854:	40014000 	.word	0x40014000
 8008858:	40014400 	.word	0x40014400
 800885c:	40014800 	.word	0x40014800
 8008860:	fffffbff 	.word	0xfffffbff
 8008864:	fffff7ff 	.word	0xfffff7ff

08008868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	4a35      	ldr	r2, [pc, #212]	; (800894c <TIM_OC3_SetConfig+0xe4>)
 8008878:	401a      	ands	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a2f      	ldr	r2, [pc, #188]	; (8008950 <TIM_OC3_SetConfig+0xe8>)
 8008894:	4013      	ands	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2203      	movs	r2, #3
 800889c:	4393      	bics	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	4a29      	ldr	r2, [pc, #164]	; (8008954 <TIM_OC3_SetConfig+0xec>)
 80088ae:	4013      	ands	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	021b      	lsls	r3, r3, #8
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a25      	ldr	r2, [pc, #148]	; (8008958 <TIM_OC3_SetConfig+0xf0>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d10d      	bne.n	80088e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	4a24      	ldr	r2, [pc, #144]	; (800895c <TIM_OC3_SetConfig+0xf4>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	021b      	lsls	r3, r3, #8
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	4a20      	ldr	r2, [pc, #128]	; (8008960 <TIM_OC3_SetConfig+0xf8>)
 80088de:	4013      	ands	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a1c      	ldr	r2, [pc, #112]	; (8008958 <TIM_OC3_SetConfig+0xf0>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d00b      	beq.n	8008902 <TIM_OC3_SetConfig+0x9a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a1d      	ldr	r2, [pc, #116]	; (8008964 <TIM_OC3_SetConfig+0xfc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d007      	beq.n	8008902 <TIM_OC3_SetConfig+0x9a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a1c      	ldr	r2, [pc, #112]	; (8008968 <TIM_OC3_SetConfig+0x100>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d003      	beq.n	8008902 <TIM_OC3_SetConfig+0x9a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a1b      	ldr	r2, [pc, #108]	; (800896c <TIM_OC3_SetConfig+0x104>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d113      	bne.n	800892a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <TIM_OC3_SetConfig+0x108>)
 8008906:	4013      	ands	r3, r2
 8008908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4a19      	ldr	r2, [pc, #100]	; (8008974 <TIM_OC3_SetConfig+0x10c>)
 800890e:	4013      	ands	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	4313      	orrs	r3, r2
 800891c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	693a      	ldr	r2, [r7, #16]
 8008926:	4313      	orrs	r3, r2
 8008928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	697a      	ldr	r2, [r7, #20]
 8008942:	621a      	str	r2, [r3, #32]
}
 8008944:	46c0      	nop			; (mov r8, r8)
 8008946:	46bd      	mov	sp, r7
 8008948:	b006      	add	sp, #24
 800894a:	bd80      	pop	{r7, pc}
 800894c:	fffffeff 	.word	0xfffffeff
 8008950:	fffeff8f 	.word	0xfffeff8f
 8008954:	fffffdff 	.word	0xfffffdff
 8008958:	40012c00 	.word	0x40012c00
 800895c:	fffff7ff 	.word	0xfffff7ff
 8008960:	fffffbff 	.word	0xfffffbff
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400
 800896c:	40014800 	.word	0x40014800
 8008970:	ffffefff 	.word	0xffffefff
 8008974:	ffffdfff 	.word	0xffffdfff

08008978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	4a28      	ldr	r2, [pc, #160]	; (8008a28 <TIM_OC4_SetConfig+0xb0>)
 8008988:	401a      	ands	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4a22      	ldr	r2, [pc, #136]	; (8008a2c <TIM_OC4_SetConfig+0xb4>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	4a21      	ldr	r2, [pc, #132]	; (8008a30 <TIM_OC4_SetConfig+0xb8>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <TIM_OC4_SetConfig+0xbc>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	031b      	lsls	r3, r3, #12
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a19      	ldr	r2, [pc, #100]	; (8008a38 <TIM_OC4_SetConfig+0xc0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d00b      	beq.n	80089f0 <TIM_OC4_SetConfig+0x78>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a18      	ldr	r2, [pc, #96]	; (8008a3c <TIM_OC4_SetConfig+0xc4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d007      	beq.n	80089f0 <TIM_OC4_SetConfig+0x78>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a17      	ldr	r2, [pc, #92]	; (8008a40 <TIM_OC4_SetConfig+0xc8>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d003      	beq.n	80089f0 <TIM_OC4_SetConfig+0x78>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4a16      	ldr	r2, [pc, #88]	; (8008a44 <TIM_OC4_SetConfig+0xcc>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d109      	bne.n	8008a04 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	4a15      	ldr	r2, [pc, #84]	; (8008a48 <TIM_OC4_SetConfig+0xd0>)
 80089f4:	4013      	ands	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	019b      	lsls	r3, r3, #6
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	621a      	str	r2, [r3, #32]
}
 8008a1e:	46c0      	nop			; (mov r8, r8)
 8008a20:	46bd      	mov	sp, r7
 8008a22:	b006      	add	sp, #24
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	ffffefff 	.word	0xffffefff
 8008a2c:	feff8fff 	.word	0xfeff8fff
 8008a30:	fffffcff 	.word	0xfffffcff
 8008a34:	ffffdfff 	.word	0xffffdfff
 8008a38:	40012c00 	.word	0x40012c00
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40014400 	.word	0x40014400
 8008a44:	40014800 	.word	0x40014800
 8008a48:	ffffbfff 	.word	0xffffbfff

08008a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	4a25      	ldr	r2, [pc, #148]	; (8008af0 <TIM_OC5_SetConfig+0xa4>)
 8008a5c:	401a      	ands	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <TIM_OC5_SetConfig+0xa8>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <TIM_OC5_SetConfig+0xac>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	041b      	lsls	r3, r3, #16
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a17      	ldr	r2, [pc, #92]	; (8008afc <TIM_OC5_SetConfig+0xb0>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d00b      	beq.n	8008aba <TIM_OC5_SetConfig+0x6e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <TIM_OC5_SetConfig+0xb4>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d007      	beq.n	8008aba <TIM_OC5_SetConfig+0x6e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a15      	ldr	r2, [pc, #84]	; (8008b04 <TIM_OC5_SetConfig+0xb8>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <TIM_OC5_SetConfig+0x6e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <TIM_OC5_SetConfig+0xbc>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d109      	bne.n	8008ace <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	4a0c      	ldr	r2, [pc, #48]	; (8008af0 <TIM_OC5_SetConfig+0xa4>)
 8008abe:	4013      	ands	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	621a      	str	r2, [r3, #32]
}
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	46bd      	mov	sp, r7
 8008aec:	b006      	add	sp, #24
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	fffeffff 	.word	0xfffeffff
 8008af4:	fffeff8f 	.word	0xfffeff8f
 8008af8:	fffdffff 	.word	0xfffdffff
 8008afc:	40012c00 	.word	0x40012c00
 8008b00:	40014000 	.word	0x40014000
 8008b04:	40014400 	.word	0x40014400
 8008b08:	40014800 	.word	0x40014800

08008b0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	4a26      	ldr	r2, [pc, #152]	; (8008bb4 <TIM_OC6_SetConfig+0xa8>)
 8008b1c:	401a      	ands	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <TIM_OC6_SetConfig+0xac>)
 8008b38:	4013      	ands	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	4a1c      	ldr	r2, [pc, #112]	; (8008bbc <TIM_OC6_SetConfig+0xb0>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	051b      	lsls	r3, r3, #20
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a18      	ldr	r2, [pc, #96]	; (8008bc0 <TIM_OC6_SetConfig+0xb4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d00b      	beq.n	8008b7c <TIM_OC6_SetConfig+0x70>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a17      	ldr	r2, [pc, #92]	; (8008bc4 <TIM_OC6_SetConfig+0xb8>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d007      	beq.n	8008b7c <TIM_OC6_SetConfig+0x70>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a16      	ldr	r2, [pc, #88]	; (8008bc8 <TIM_OC6_SetConfig+0xbc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d003      	beq.n	8008b7c <TIM_OC6_SetConfig+0x70>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a15      	ldr	r2, [pc, #84]	; (8008bcc <TIM_OC6_SetConfig+0xc0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d109      	bne.n	8008b90 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	4a14      	ldr	r2, [pc, #80]	; (8008bd0 <TIM_OC6_SetConfig+0xc4>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	695b      	ldr	r3, [r3, #20]
 8008b88:	029b      	lsls	r3, r3, #10
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	621a      	str	r2, [r3, #32]
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	46bd      	mov	sp, r7
 8008bae:	b006      	add	sp, #24
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	46c0      	nop			; (mov r8, r8)
 8008bb4:	ffefffff 	.word	0xffefffff
 8008bb8:	feff8fff 	.word	0xfeff8fff
 8008bbc:	ffdfffff 	.word	0xffdfffff
 8008bc0:	40012c00 	.word	0x40012c00
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800
 8008bd0:	fffbffff 	.word	0xfffbffff

08008bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	2201      	movs	r2, #1
 8008bec:	4393      	bics	r3, r2
 8008bee:	001a      	movs	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	22f0      	movs	r2, #240	; 0xf0
 8008bfe:	4393      	bics	r3, r2
 8008c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	220a      	movs	r2, #10
 8008c10:	4393      	bics	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	621a      	str	r2, [r3, #32]
}
 8008c28:	46c0      	nop			; (mov r8, r8)
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	b006      	add	sp, #24
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	2210      	movs	r2, #16
 8008c42:	4393      	bics	r3, r2
 8008c44:	001a      	movs	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	4a0d      	ldr	r2, [pc, #52]	; (8008c90 <TIM_TI2_ConfigInputStage+0x60>)
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	031b      	lsls	r3, r3, #12
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	22a0      	movs	r2, #160	; 0xa0
 8008c6c:	4393      	bics	r3, r2
 8008c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	621a      	str	r2, [r3, #32]
}
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	b006      	add	sp, #24
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	46c0      	nop			; (mov r8, r8)
 8008c90:	ffff0fff 	.word	0xffff0fff

08008c94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4a08      	ldr	r2, [pc, #32]	; (8008cc8 <TIM_ITRx_SetConfig+0x34>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	2207      	movs	r2, #7
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	609a      	str	r2, [r3, #8]
}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b004      	add	sp, #16
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	46c0      	nop			; (mov r8, r8)
 8008cc8:	ffcfff8f 	.word	0xffcfff8f

08008ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <TIM_ETR_SetConfig+0x3c>)
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	021a      	lsls	r2, r3, #8
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	609a      	str	r2, [r3, #8]
}
 8008d00:	46c0      	nop			; (mov r8, r8)
 8008d02:	46bd      	mov	sp, r7
 8008d04:	b006      	add	sp, #24
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	ffff00ff 	.word	0xffff00ff

08008d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b086      	sub	sp, #24
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	221f      	movs	r2, #31
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	2201      	movs	r2, #1
 8008d20:	409a      	lsls	r2, r3
 8008d22:	0013      	movs	r3, r2
 8008d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	43d2      	mvns	r2, r2
 8008d2e:	401a      	ands	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6a1a      	ldr	r2, [r3, #32]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	211f      	movs	r1, #31
 8008d3c:	400b      	ands	r3, r1
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4099      	lsls	r1, r3
 8008d42:	000b      	movs	r3, r1
 8008d44:	431a      	orrs	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	621a      	str	r2, [r3, #32]
}
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b006      	add	sp, #24
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	223c      	movs	r2, #60	; 0x3c
 8008d62:	5c9b      	ldrb	r3, [r3, r2]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e055      	b.n	8008e18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	223c      	movs	r2, #60	; 0x3c
 8008d70:	2101      	movs	r1, #1
 8008d72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	223d      	movs	r2, #61	; 0x3d
 8008d78:	2102      	movs	r1, #2
 8008d7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a23      	ldr	r2, [pc, #140]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d108      	bne.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4a22      	ldr	r2, [pc, #136]	; (8008e24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2270      	movs	r2, #112	; 0x70
 8008dac:	4393      	bics	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00f      	beq.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	2380      	movs	r3, #128	; 0x80
 8008dd2:	05db      	lsls	r3, r3, #23
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d009      	beq.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a12      	ldr	r2, [pc, #72]	; (8008e28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d10c      	bne.n	8008e06 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2280      	movs	r2, #128	; 0x80
 8008df0:	4393      	bics	r3, r2
 8008df2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68ba      	ldr	r2, [r7, #8]
 8008e04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	223d      	movs	r2, #61	; 0x3d
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	223c      	movs	r2, #60	; 0x3c
 8008e12:	2100      	movs	r1, #0
 8008e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b004      	add	sp, #16
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	ff0fffff 	.word	0xff0fffff
 8008e28:	40000400 	.word	0x40000400
 8008e2c:	40014000 	.word	0x40014000

08008e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	223c      	movs	r2, #60	; 0x3c
 8008e42:	5c9b      	ldrb	r3, [r3, r2]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d101      	bne.n	8008e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e48:	2302      	movs	r3, #2
 8008e4a:	e079      	b.n	8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	223c      	movs	r2, #60	; 0x3c
 8008e50:	2101      	movs	r1, #1
 8008e52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	22ff      	movs	r2, #255	; 0xff
 8008e58:	4393      	bics	r3, r2
 8008e5a:	001a      	movs	r2, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4a38      	ldr	r2, [pc, #224]	; (8008f48 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008e68:	401a      	ands	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	4a35      	ldr	r2, [pc, #212]	; (8008f4c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008e76:	401a      	ands	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a33      	ldr	r2, [pc, #204]	; (8008f50 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008e84:	401a      	ands	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4a30      	ldr	r2, [pc, #192]	; (8008f54 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008e92:	401a      	ands	r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	4a2e      	ldr	r2, [pc, #184]	; (8008f58 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008ea0:	401a      	ands	r2, r3
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4a2b      	ldr	r2, [pc, #172]	; (8008f5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008eae:	401a      	ands	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a29      	ldr	r2, [pc, #164]	; (8008f60 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008ebc:	401a      	ands	r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	041b      	lsls	r3, r3, #16
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a25      	ldr	r2, [pc, #148]	; (8008f64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d106      	bne.n	8008ee0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4a24      	ldr	r2, [pc, #144]	; (8008f68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a1f      	ldr	r2, [pc, #124]	; (8008f64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d121      	bne.n	8008f2e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	4a1f      	ldr	r2, [pc, #124]	; (8008f6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008eee:	401a      	ands	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	051b      	lsls	r3, r3, #20
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4a1c      	ldr	r2, [pc, #112]	; (8008f70 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008efe:	401a      	ands	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4a1a      	ldr	r2, [pc, #104]	; (8008f74 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008f0c:	401a      	ands	r2, r3
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a12      	ldr	r2, [pc, #72]	; (8008f64 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d106      	bne.n	8008f2e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008f24:	401a      	ands	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	223c      	movs	r2, #60	; 0x3c
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b004      	add	sp, #16
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	fffffcff 	.word	0xfffffcff
 8008f4c:	fffffbff 	.word	0xfffffbff
 8008f50:	fffff7ff 	.word	0xfffff7ff
 8008f54:	ffffefff 	.word	0xffffefff
 8008f58:	ffffdfff 	.word	0xffffdfff
 8008f5c:	ffffbfff 	.word	0xffffbfff
 8008f60:	fff0ffff 	.word	0xfff0ffff
 8008f64:	40012c00 	.word	0x40012c00
 8008f68:	efffffff 	.word	0xefffffff
 8008f6c:	ff0fffff 	.word	0xff0fffff
 8008f70:	feffffff 	.word	0xfeffffff
 8008f74:	fdffffff 	.word	0xfdffffff
 8008f78:	dfffffff 	.word	0xdfffffff

08008f7c <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	223c      	movs	r2, #60	; 0x3c
 8008f8c:	5c9b      	ldrb	r3, [r3, r2]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e08e      	b.n	80090b4 <HAL_TIMEx_ConfigBreakInput+0x138>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	223c      	movs	r2, #60	; 0x3c
 8008f9a:	2101      	movs	r1, #1
 8008f9c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d019      	beq.n	8008fda <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008fa6:	d822      	bhi.n	8008fee <HAL_TIMEx_ConfigBreakInput+0x72>
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d002      	beq.n	8008fb2 <HAL_TIMEx_ConfigBreakInput+0x36>
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d00a      	beq.n	8008fc6 <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008fb0:	e01d      	b.n	8008fee <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008fba:	2380      	movs	r3, #128	; 0x80
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008fc0:	2309      	movs	r3, #9
 8008fc2:	61bb      	str	r3, [r7, #24]
      break;
 8008fc4:	e01c      	b.n	8009000 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008fc6:	2302      	movs	r3, #2
 8008fc8:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008fd4:	230a      	movs	r3, #10
 8008fd6:	61bb      	str	r3, [r7, #24]
      break;
 8008fd8:	e012      	b.n	8009000 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008fda:	2304      	movs	r3, #4
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008fe2:	2380      	movs	r3, #128	; 0x80
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008fe8:	230b      	movs	r3, #11
 8008fea:	61bb      	str	r3, [r7, #24]
      break;
 8008fec:	e008      	b.n	8009000 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61bb      	str	r3, [r7, #24]
      break;
 8008ffe:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d003      	beq.n	800900e <HAL_TIMEx_ConfigBreakInput+0x92>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b02      	cmp	r3, #2
 800900a:	d027      	beq.n	800905c <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 800900c:	e04d      	b.n	80090aa <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009014:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	43da      	mvns	r2, r3
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4013      	ands	r3, r2
 800901e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	409a      	lsls	r2, r3
 8009028:	0013      	movs	r3, r2
 800902a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800902c:	4013      	ands	r3, r2
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	4313      	orrs	r3, r2
 8009032:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	43da      	mvns	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	4013      	ands	r3, r2
 800903c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	409a      	lsls	r2, r3
 8009046:	0013      	movs	r3, r2
 8009048:	6a3a      	ldr	r2, [r7, #32]
 800904a:	4013      	ands	r3, r2
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4313      	orrs	r3, r2
 8009050:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800905a:	e026      	b.n	80090aa <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009062:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009066:	43da      	mvns	r2, r3
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	4013      	ands	r3, r2
 800906c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	409a      	lsls	r2, r3
 8009076:	0013      	movs	r3, r2
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	4013      	ands	r3, r2
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	4313      	orrs	r3, r2
 8009080:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009082:	6a3b      	ldr	r3, [r7, #32]
 8009084:	43da      	mvns	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	4013      	ands	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	69bb      	ldr	r3, [r7, #24]
 8009092:	409a      	lsls	r2, r3
 8009094:	0013      	movs	r3, r2
 8009096:	6a3a      	ldr	r2, [r7, #32]
 8009098:	4013      	ands	r3, r2
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4313      	orrs	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80090a8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	223c      	movs	r2, #60	; 0x3c
 80090ae:	2100      	movs	r1, #0
 80090b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	0018      	movs	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	b00a      	add	sp, #40	; 0x28
 80090ba:	bd80      	pop	{r7, pc}

080090bc <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e03f      	b.n	800914e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2259      	movs	r2, #89	; 0x59
 80090d2:	5c9b      	ldrb	r3, [r3, r2]
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d107      	bne.n	80090ea <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2258      	movs	r2, #88	; 0x58
 80090de:	2100      	movs	r1, #0
 80090e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7f9 fd95 	bl	8002c14 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2259      	movs	r2, #89	; 0x59
 80090ee:	2102      	movs	r1, #2
 80090f0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2101      	movs	r1, #1
 80090fe:	438a      	bics	r2, r1
 8009100:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	0018      	movs	r0, r3
 8009106:	f000 fbdb 	bl	80098c0 <USART_SetConfig>
 800910a:	0003      	movs	r3, r0
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	e01c      	b.n	800914e <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	490e      	ldr	r1, [pc, #56]	; (8009158 <HAL_USART_Init+0x9c>)
 8009120:	400a      	ands	r2, r1
 8009122:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	212a      	movs	r1, #42	; 0x2a
 8009130:	438a      	bics	r2, r1
 8009132:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2101      	movs	r1, #1
 8009140:	430a      	orrs	r2, r1
 8009142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	0018      	movs	r0, r3
 8009148:	f000 fe56 	bl	8009df8 <USART_CheckIdleState>
 800914c:	0003      	movs	r3, r0
}
 800914e:	0018      	movs	r0, r3
 8009150:	46bd      	mov	sp, r7
 8009152:	b002      	add	sp, #8
 8009154:	bd80      	pop	{r7, pc}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	ffffbfff 	.word	0xffffbfff

0800915c <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af02      	add	r7, sp, #8
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	1dbb      	adds	r3, r7, #6
 800916a:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2259      	movs	r2, #89	; 0x59
 8009170:	5c9b      	ldrb	r3, [r3, r2]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b01      	cmp	r3, #1
 8009176:	d000      	beq.n	800917a <HAL_USART_Transmit+0x1e>
 8009178:	e0a9      	b.n	80092ce <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_USART_Transmit+0x2c>
 8009180:	1dbb      	adds	r3, r7, #6
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0a1      	b.n	80092d0 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	2380      	movs	r3, #128	; 0x80
 8009192:	015b      	lsls	r3, r3, #5
 8009194:	429a      	cmp	r2, r3
 8009196:	d109      	bne.n	80091ac <HAL_USART_Transmit+0x50>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d105      	bne.n	80091ac <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2201      	movs	r2, #1
 80091a4:	4013      	ands	r3, r2
 80091a6:	d001      	beq.n	80091ac <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e091      	b.n	80092d0 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2258      	movs	r2, #88	; 0x58
 80091b0:	5c9b      	ldrb	r3, [r3, r2]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d101      	bne.n	80091ba <HAL_USART_Transmit+0x5e>
 80091b6:	2302      	movs	r3, #2
 80091b8:	e08a      	b.n	80092d0 <HAL_USART_Transmit+0x174>
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2258      	movs	r2, #88	; 0x58
 80091be:	2101      	movs	r1, #1
 80091c0:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2259      	movs	r2, #89	; 0x59
 80091cc:	2112      	movs	r1, #18
 80091ce:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091d0:	f7f9 ff9a 	bl	8003108 <HAL_GetTick>
 80091d4:	0003      	movs	r3, r0
 80091d6:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1dba      	adds	r2, r7, #6
 80091dc:	8812      	ldrh	r2, [r2, #0]
 80091de:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1dba      	adds	r2, r7, #6
 80091e4:	8812      	ldrh	r2, [r2, #0]
 80091e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	2380      	movs	r3, #128	; 0x80
 80091ee:	015b      	lsls	r3, r3, #5
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d108      	bne.n	8009206 <HAL_USART_Transmit+0xaa>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	691b      	ldr	r3, [r3, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 80091fc:	2300      	movs	r3, #0
 80091fe:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	61bb      	str	r3, [r7, #24]
 8009204:	e003      	b.n	800920e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800920a:	2300      	movs	r3, #0
 800920c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800920e:	e02a      	b.n	8009266 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	0013      	movs	r3, r2
 800921a:	2200      	movs	r2, #0
 800921c:	2180      	movs	r1, #128	; 0x80
 800921e:	f000 fb19 	bl	8009854 <USART_WaitOnFlagUntilTimeout>
 8009222:	1e03      	subs	r3, r0, #0
 8009224:	d001      	beq.n	800922a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e052      	b.n	80092d0 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8009230:	69bb      	ldr	r3, [r7, #24]
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	001a      	movs	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	05d2      	lsls	r2, r2, #23
 800923c:	0dd2      	lsrs	r2, r2, #23
 800923e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	3302      	adds	r3, #2
 8009244:	61bb      	str	r3, [r7, #24]
 8009246:	e007      	b.n	8009258 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	3301      	adds	r3, #1
 8009256:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800925c:	b29b      	uxth	r3, r3
 800925e:	3b01      	subs	r3, #1
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1cf      	bne.n	8009210 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	0013      	movs	r3, r2
 800927a:	2200      	movs	r2, #0
 800927c:	2140      	movs	r1, #64	; 0x40
 800927e:	f000 fae9 	bl	8009854 <USART_WaitOnFlagUntilTimeout>
 8009282:	1e03      	subs	r3, r0, #0
 8009284:	d001      	beq.n	800928a <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e022      	b.n	80092d0 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2240      	movs	r2, #64	; 0x40
 8009290:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2208      	movs	r2, #8
 8009298:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	699a      	ldr	r2, [r3, #24]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2108      	movs	r1, #8
 80092a6:	430a      	orrs	r2, r1
 80092a8:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699a      	ldr	r2, [r3, #24]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2110      	movs	r1, #16
 80092b6:	430a      	orrs	r2, r1
 80092b8:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2259      	movs	r2, #89	; 0x59
 80092be:	2101      	movs	r1, #1
 80092c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2258      	movs	r2, #88	; 0x58
 80092c6:	2100      	movs	r1, #0
 80092c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e000      	b.n	80092d0 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 80092ce:	2302      	movs	r3, #2
  }
}
 80092d0:	0018      	movs	r0, r3
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b008      	add	sp, #32
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 80092d8:	b590      	push	{r4, r7, lr}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	1dbb      	adds	r3, r7, #6
 80092e4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092e6:	2317      	movs	r3, #23
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2259      	movs	r2, #89	; 0x59
 80092f2:	5c9b      	ldrb	r3, [r3, r2]
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d000      	beq.n	80092fc <HAL_USART_Transmit_DMA+0x24>
 80092fa:	e07d      	b.n	80093f8 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_USART_Transmit_DMA+0x32>
 8009302:	1dbb      	adds	r3, r7, #6
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e075      	b.n	80093fa <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	689a      	ldr	r2, [r3, #8]
 8009312:	2380      	movs	r3, #128	; 0x80
 8009314:	015b      	lsls	r3, r3, #5
 8009316:	429a      	cmp	r2, r3
 8009318:	d10a      	bne.n	8009330 <HAL_USART_Transmit_DMA+0x58>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	001a      	movs	r2, r3
 8009326:	2301      	movs	r3, #1
 8009328:	4013      	ands	r3, r2
 800932a:	d001      	beq.n	8009330 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e064      	b.n	80093fa <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2258      	movs	r2, #88	; 0x58
 8009334:	5c9b      	ldrb	r3, [r3, r2]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <HAL_USART_Transmit_DMA+0x66>
 800933a:	2302      	movs	r3, #2
 800933c:	e05d      	b.n	80093fa <HAL_USART_Transmit_DMA+0x122>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2258      	movs	r2, #88	; 0x58
 8009342:	2101      	movs	r1, #1
 8009344:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	1dba      	adds	r2, r7, #6
 8009350:	8812      	ldrh	r2, [r2, #0]
 8009352:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	1dba      	adds	r2, r7, #6
 8009358:	8812      	ldrh	r2, [r2, #0]
 800935a:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	2200      	movs	r2, #0
 8009360:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2259      	movs	r2, #89	; 0x59
 8009366:	2112      	movs	r1, #18
 8009368:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800936e:	2b00      	cmp	r3, #0
 8009370:	d01e      	beq.n	80093b0 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009376:	4a23      	ldr	r2, [pc, #140]	; (8009404 <HAL_USART_Transmit_DMA+0x12c>)
 8009378:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937e:	4a22      	ldr	r2, [pc, #136]	; (8009408 <HAL_USART_Transmit_DMA+0x130>)
 8009380:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009386:	4a21      	ldr	r2, [pc, #132]	; (800940c <HAL_USART_Transmit_DMA+0x134>)
 8009388:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 800938a:	2308      	movs	r3, #8
 800938c:	18fb      	adds	r3, r7, r3
 800938e:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6819      	ldr	r1, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3328      	adds	r3, #40	; 0x28
 800939e:	001a      	movs	r2, r3
 80093a0:	1dbb      	adds	r3, r7, #6
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	2417      	movs	r4, #23
 80093a6:	193c      	adds	r4, r7, r4
 80093a8:	f7fa faba 	bl	8003920 <HAL_DMA_Start_IT>
 80093ac:	0003      	movs	r3, r0
 80093ae:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80093b0:	2317      	movs	r3, #23
 80093b2:	18fb      	adds	r3, r7, r3
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d111      	bne.n	80093de <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2240      	movs	r2, #64	; 0x40
 80093c0:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2258      	movs	r2, #88	; 0x58
 80093c6:	2100      	movs	r1, #0
 80093c8:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689a      	ldr	r2, [r3, #8]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2180      	movs	r1, #128	; 0x80
 80093d6:	430a      	orrs	r2, r1
 80093d8:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	e00d      	b.n	80093fa <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2210      	movs	r2, #16
 80093e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2258      	movs	r2, #88	; 0x58
 80093e8:	2100      	movs	r1, #0
 80093ea:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2259      	movs	r2, #89	; 0x59
 80093f0:	2101      	movs	r1, #1
 80093f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e000      	b.n	80093fa <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 80093f8:	2302      	movs	r3, #2
  }
}
 80093fa:	0018      	movs	r0, r3
 80093fc:	46bd      	mov	sp, r7
 80093fe:	b007      	add	sp, #28
 8009400:	bd90      	pop	{r4, r7, pc}
 8009402:	46c0      	nop			; (mov r8, r8)
 8009404:	0800975d 	.word	0x0800975d
 8009408:	080097c7 	.word	0x080097c7
 800940c:	080097e5 	.word	0x080097e5

08009410 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b088      	sub	sp, #32
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	69db      	ldr	r3, [r3, #28]
 800941e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	4aab      	ldr	r2, [pc, #684]	; (80096e0 <HAL_USART_IRQHandler+0x2d0>)
 8009434:	4013      	ands	r3, r2
 8009436:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d117      	bne.n	800946e <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	2220      	movs	r2, #32
 8009442:	4013      	ands	r3, r2
 8009444:	d013      	beq.n	800946e <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	2220      	movs	r2, #32
 800944a:	4013      	ands	r3, r2
 800944c:	d104      	bne.n	8009458 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	2380      	movs	r3, #128	; 0x80
 8009452:	055b      	lsls	r3, r3, #21
 8009454:	4013      	ands	r3, r2
 8009456:	d00a      	beq.n	800946e <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800945c:	2b00      	cmp	r3, #0
 800945e:	d100      	bne.n	8009462 <HAL_USART_IRQHandler+0x52>
 8009460:	e135      	b.n	80096ce <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	0010      	movs	r0, r2
 800946a:	4798      	blx	r3
      }
      return;
 800946c:	e12f      	b.n	80096ce <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d100      	bne.n	8009476 <HAL_USART_IRQHandler+0x66>
 8009474:	e0eb      	b.n	800964e <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	4a9a      	ldr	r2, [pc, #616]	; (80096e4 <HAL_USART_IRQHandler+0x2d4>)
 800947a:	4013      	ands	r3, r2
 800947c:	d105      	bne.n	800948a <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	2390      	movs	r3, #144	; 0x90
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	4013      	ands	r3, r2
 8009486:	d100      	bne.n	800948a <HAL_USART_IRQHandler+0x7a>
 8009488:	e0e1      	b.n	800964e <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	2201      	movs	r2, #1
 800948e:	4013      	ands	r3, r2
 8009490:	d00e      	beq.n	80094b0 <HAL_USART_IRQHandler+0xa0>
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	2380      	movs	r3, #128	; 0x80
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	4013      	ands	r3, r2
 800949a:	d009      	beq.n	80094b0 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2201      	movs	r2, #1
 80094a2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a8:	2201      	movs	r2, #1
 80094aa:	431a      	orrs	r2, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	2202      	movs	r2, #2
 80094b4:	4013      	ands	r3, r2
 80094b6:	d00d      	beq.n	80094d4 <HAL_USART_IRQHandler+0xc4>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2201      	movs	r2, #1
 80094bc:	4013      	ands	r3, r2
 80094be:	d009      	beq.n	80094d4 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2202      	movs	r2, #2
 80094c6:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094cc:	2204      	movs	r2, #4
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2204      	movs	r2, #4
 80094d8:	4013      	ands	r3, r2
 80094da:	d00d      	beq.n	80094f8 <HAL_USART_IRQHandler+0xe8>
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	2201      	movs	r2, #1
 80094e0:	4013      	ands	r3, r2
 80094e2:	d009      	beq.n	80094f8 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2204      	movs	r2, #4
 80094ea:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f0:	2202      	movs	r2, #2
 80094f2:	431a      	orrs	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2208      	movs	r2, #8
 80094fc:	4013      	ands	r3, r2
 80094fe:	d011      	beq.n	8009524 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	2220      	movs	r2, #32
 8009504:	4013      	ands	r3, r2
 8009506:	d103      	bne.n	8009510 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4a76      	ldr	r2, [pc, #472]	; (80096e4 <HAL_USART_IRQHandler+0x2d4>)
 800950c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800950e:	d009      	beq.n	8009524 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2208      	movs	r2, #8
 8009516:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800951c:	2208      	movs	r2, #8
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	2380      	movs	r3, #128	; 0x80
 8009528:	019b      	lsls	r3, r3, #6
 800952a:	4013      	ands	r3, r2
 800952c:	d01a      	beq.n	8009564 <HAL_USART_IRQHandler+0x154>
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2201      	movs	r2, #1
 8009532:	4013      	ands	r3, r2
 8009534:	d016      	beq.n	8009564 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2259      	movs	r2, #89	; 0x59
 800953a:	5c9b      	ldrb	r3, [r3, r2]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b22      	cmp	r3, #34	; 0x22
 8009540:	d105      	bne.n	800954e <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2280      	movs	r2, #128	; 0x80
 8009548:	0192      	lsls	r2, r2, #6
 800954a:	621a      	str	r2, [r3, #32]
        return;
 800954c:	e0c4      	b.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2280      	movs	r2, #128	; 0x80
 8009554:	0192      	lsls	r2, r2, #6
 8009556:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955c:	2220      	movs	r2, #32
 800955e:	431a      	orrs	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d100      	bne.n	800956e <HAL_USART_IRQHandler+0x15e>
 800956c:	e0b1      	b.n	80096d2 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	2220      	movs	r2, #32
 8009572:	4013      	ands	r3, r2
 8009574:	d011      	beq.n	800959a <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2220      	movs	r2, #32
 800957a:	4013      	ands	r3, r2
 800957c:	d104      	bne.n	8009588 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	2380      	movs	r3, #128	; 0x80
 8009582:	055b      	lsls	r3, r3, #21
 8009584:	4013      	ands	r3, r2
 8009586:	d008      	beq.n	800959a <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	0010      	movs	r0, r2
 8009598:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800959e:	2208      	movs	r2, #8
 80095a0:	4013      	ands	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	2240      	movs	r2, #64	; 0x40
 80095ac:	4013      	ands	r3, r2
 80095ae:	2b40      	cmp	r3, #64	; 0x40
 80095b0:	d002      	beq.n	80095b8 <HAL_USART_IRQHandler+0x1a8>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d040      	beq.n	800963a <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	0018      	movs	r0, r3
 80095bc:	f000 f8ae 	bl	800971c <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	2240      	movs	r2, #64	; 0x40
 80095c8:	4013      	ands	r3, r2
 80095ca:	2b40      	cmp	r3, #64	; 0x40
 80095cc:	d130      	bne.n	8009630 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2140      	movs	r1, #64	; 0x40
 80095da:	438a      	bics	r2, r1
 80095dc:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d008      	beq.n	80095f8 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ea:	2200      	movs	r2, #0
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f2:	0018      	movs	r0, r3
 80095f4:	f7fa fa1a 	bl	8003a2c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d012      	beq.n	8009626 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009604:	4a38      	ldr	r2, [pc, #224]	; (80096e8 <HAL_USART_IRQHandler+0x2d8>)
 8009606:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960c:	0018      	movs	r0, r3
 800960e:	f7fa fa0d 	bl	8003a2c <HAL_DMA_Abort_IT>
 8009612:	1e03      	subs	r3, r0, #0
 8009614:	d019      	beq.n	800964a <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009620:	0018      	movs	r0, r3
 8009622:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009624:	e011      	b.n	800964a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0018      	movs	r0, r3
 800962a:	f000 f86f 	bl	800970c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800962e:	e00c      	b.n	800964a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	0018      	movs	r0, r3
 8009634:	f000 f86a 	bl	800970c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009638:	e007      	b.n	800964a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0018      	movs	r0, r3
 800963e:	f000 f865 	bl	800970c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8009648:	e043      	b.n	80096d2 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800964a:	46c0      	nop			; (mov r8, r8)
    return;
 800964c:	e041      	b.n	80096d2 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	2280      	movs	r2, #128	; 0x80
 8009652:	4013      	ands	r3, r2
 8009654:	d012      	beq.n	800967c <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	2280      	movs	r2, #128	; 0x80
 800965a:	4013      	ands	r3, r2
 800965c:	d104      	bne.n	8009668 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	2380      	movs	r3, #128	; 0x80
 8009662:	041b      	lsls	r3, r3, #16
 8009664:	4013      	ands	r3, r2
 8009666:	d009      	beq.n	800967c <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	2b00      	cmp	r3, #0
 800966e:	d032      	beq.n	80096d6 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	0010      	movs	r0, r2
 8009678:	4798      	blx	r3
    }
    return;
 800967a:	e02c      	b.n	80096d6 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2240      	movs	r2, #64	; 0x40
 8009680:	4013      	ands	r3, r2
 8009682:	d008      	beq.n	8009696 <HAL_USART_IRQHandler+0x286>
 8009684:	69bb      	ldr	r3, [r7, #24]
 8009686:	2240      	movs	r2, #64	; 0x40
 8009688:	4013      	ands	r3, r2
 800968a:	d004      	beq.n	8009696 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	0018      	movs	r0, r3
 8009690:	f000 fbf6 	bl	8009e80 <USART_EndTransmit_IT>
    return;
 8009694:	e020      	b.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	2380      	movs	r3, #128	; 0x80
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	4013      	ands	r3, r2
 800969e:	d009      	beq.n	80096b4 <HAL_USART_IRQHandler+0x2a4>
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	2380      	movs	r3, #128	; 0x80
 80096a4:	05db      	lsls	r3, r3, #23
 80096a6:	4013      	ands	r3, r2
 80096a8:	d004      	beq.n	80096b4 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	0018      	movs	r0, r3
 80096ae:	f000 fc32 	bl	8009f16 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80096b2:	e011      	b.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80096b4:	69fa      	ldr	r2, [r7, #28]
 80096b6:	2380      	movs	r3, #128	; 0x80
 80096b8:	045b      	lsls	r3, r3, #17
 80096ba:	4013      	ands	r3, r2
 80096bc:	d00c      	beq.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	da09      	bge.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	0018      	movs	r0, r3
 80096c8:	f000 fc1d 	bl	8009f06 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80096cc:	e004      	b.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
      return;
 80096ce:	46c0      	nop			; (mov r8, r8)
 80096d0:	e002      	b.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
    return;
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	e000      	b.n	80096d8 <HAL_USART_IRQHandler+0x2c8>
    return;
 80096d6:	46c0      	nop			; (mov r8, r8)
  }
}
 80096d8:	46bd      	mov	sp, r7
 80096da:	b008      	add	sp, #32
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	0000200f 	.word	0x0000200f
 80096e4:	10000001 	.word	0x10000001
 80096e8:	0800982b 	.word	0x0800982b

080096ec <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80096f4:	46c0      	nop			; (mov r8, r8)
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b002      	add	sp, #8
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8009704:	46c0      	nop			; (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b002      	add	sp, #8
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8009714:	46c0      	nop			; (mov r8, r8)
 8009716:	46bd      	mov	sp, r7
 8009718:	b002      	add	sp, #8
 800971a:	bd80      	pop	{r7, pc}

0800971c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4909      	ldr	r1, [pc, #36]	; (8009754 <USART_EndTransfer+0x38>)
 8009730:	400a      	ands	r2, r1
 8009732:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689a      	ldr	r2, [r3, #8]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4906      	ldr	r1, [pc, #24]	; (8009758 <USART_EndTransfer+0x3c>)
 8009740:	400a      	ands	r2, r1
 8009742:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2259      	movs	r2, #89	; 0x59
 8009748:	2101      	movs	r1, #1
 800974a:	5499      	strb	r1, [r3, r2]
}
 800974c:	46c0      	nop			; (mov r8, r8)
 800974e:	46bd      	mov	sp, r7
 8009750:	b002      	add	sp, #8
 8009752:	bd80      	pop	{r7, pc}
 8009754:	fffffe1f 	.word	0xfffffe1f
 8009758:	ef7ffffe 	.word	0xef7ffffe

0800975c <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009768:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2220      	movs	r2, #32
 8009772:	4013      	ands	r3, r2
 8009774:	d119      	bne.n	80097aa <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2259      	movs	r2, #89	; 0x59
 8009780:	5c9b      	ldrb	r3, [r3, r2]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b12      	cmp	r3, #18
 8009786:	d11a      	bne.n	80097be <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2180      	movs	r1, #128	; 0x80
 8009794:	438a      	bics	r2, r1
 8009796:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2140      	movs	r1, #64	; 0x40
 80097a4:	430a      	orrs	r2, r1
 80097a6:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 80097a8:	e009      	b.n	80097be <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2259      	movs	r2, #89	; 0x59
 80097ae:	5c9b      	ldrb	r3, [r3, r2]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b12      	cmp	r3, #18
 80097b4:	d103      	bne.n	80097be <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	0018      	movs	r0, r3
 80097ba:	f7f7 fc89 	bl	80010d0 <HAL_USART_TxCpltCallback>
}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b004      	add	sp, #16
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f7ff ff88 	bl	80096ec <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 80097dc:	46c0      	nop			; (mov r8, r8)
 80097de:	46bd      	mov	sp, r7
 80097e0:	b004      	add	sp, #16
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f0:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	0018      	movs	r0, r3
 8009802:	f7ff ff8b 	bl	800971c <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800980a:	2210      	movs	r2, #16
 800980c:	431a      	orrs	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2259      	movs	r2, #89	; 0x59
 8009816:	2101      	movs	r1, #1
 8009818:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	0018      	movs	r0, r3
 800981e:	f7ff ff75 	bl	800970c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009822:	46c0      	nop			; (mov r8, r8)
 8009824:	46bd      	mov	sp, r7
 8009826:	b004      	add	sp, #16
 8009828:	bd80      	pop	{r7, pc}

0800982a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009836:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	0018      	movs	r0, r3
 8009848:	f7ff ff60 	bl	800970c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800984c:	46c0      	nop			; (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	b004      	add	sp, #16
 8009852:	bd80      	pop	{r7, pc}

08009854 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	1dfb      	adds	r3, r7, #7
 8009862:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009864:	e017      	b.n	8009896 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	3301      	adds	r3, #1
 800986a:	d014      	beq.n	8009896 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800986c:	f7f9 fc4c 	bl	8003108 <HAL_GetTick>
 8009870:	0002      	movs	r2, r0
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	429a      	cmp	r2, r3
 800987a:	d302      	bcc.n	8009882 <USART_WaitOnFlagUntilTimeout+0x2e>
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d109      	bne.n	8009896 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2259      	movs	r2, #89	; 0x59
 8009886:	2101      	movs	r1, #1
 8009888:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2258      	movs	r2, #88	; 0x58
 800988e:	2100      	movs	r1, #0
 8009890:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e00f      	b.n	80098b6 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	4013      	ands	r3, r2
 80098a0:	68ba      	ldr	r2, [r7, #8]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	425a      	negs	r2, r3
 80098a6:	4153      	adcs	r3, r2
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	001a      	movs	r2, r3
 80098ac:	1dfb      	adds	r3, r7, #7
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d0d8      	beq.n	8009866 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	0018      	movs	r0, r3
 80098b8:	46bd      	mov	sp, r7
 80098ba:	b004      	add	sp, #16
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b088      	sub	sp, #32
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80098c8:	231e      	movs	r3, #30
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	2280      	movs	r2, #128	; 0x80
 80098e6:	0212      	lsls	r2, r2, #8
 80098e8:	4313      	orrs	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4ab1      	ldr	r2, [pc, #708]	; (8009bb8 <USART_SetConfig+0x2f8>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	0019      	movs	r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	430a      	orrs	r2, r1
 8009900:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009902:	2380      	movs	r3, #128	; 0x80
 8009904:	011b      	lsls	r3, r3, #4
 8009906:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	699a      	ldr	r2, [r3, #24]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	4313      	orrs	r3, r2
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	4313      	orrs	r3, r2
 8009920:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	4aa2      	ldr	r2, [pc, #648]	; (8009bbc <USART_SetConfig+0x2fc>)
 8009934:	4013      	ands	r3, r2
 8009936:	0019      	movs	r1, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	430a      	orrs	r2, r1
 8009940:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009948:	220f      	movs	r2, #15
 800994a:	4393      	bics	r3, r2
 800994c:	0019      	movs	r1, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a98      	ldr	r2, [pc, #608]	; (8009bc0 <USART_SetConfig+0x300>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d127      	bne.n	80099b4 <USART_SetConfig+0xf4>
 8009964:	4b97      	ldr	r3, [pc, #604]	; (8009bc4 <USART_SetConfig+0x304>)
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	2203      	movs	r2, #3
 800996a:	4013      	ands	r3, r2
 800996c:	2b03      	cmp	r3, #3
 800996e:	d017      	beq.n	80099a0 <USART_SetConfig+0xe0>
 8009970:	d81b      	bhi.n	80099aa <USART_SetConfig+0xea>
 8009972:	2b02      	cmp	r3, #2
 8009974:	d00a      	beq.n	800998c <USART_SetConfig+0xcc>
 8009976:	d818      	bhi.n	80099aa <USART_SetConfig+0xea>
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <USART_SetConfig+0xc2>
 800997c:	2b01      	cmp	r3, #1
 800997e:	d00a      	beq.n	8009996 <USART_SetConfig+0xd6>
 8009980:	e013      	b.n	80099aa <USART_SetConfig+0xea>
 8009982:	231f      	movs	r3, #31
 8009984:	18fb      	adds	r3, r7, r3
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	e058      	b.n	8009a3e <USART_SetConfig+0x17e>
 800998c:	231f      	movs	r3, #31
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	2202      	movs	r2, #2
 8009992:	701a      	strb	r2, [r3, #0]
 8009994:	e053      	b.n	8009a3e <USART_SetConfig+0x17e>
 8009996:	231f      	movs	r3, #31
 8009998:	18fb      	adds	r3, r7, r3
 800999a:	2204      	movs	r2, #4
 800999c:	701a      	strb	r2, [r3, #0]
 800999e:	e04e      	b.n	8009a3e <USART_SetConfig+0x17e>
 80099a0:	231f      	movs	r3, #31
 80099a2:	18fb      	adds	r3, r7, r3
 80099a4:	2208      	movs	r2, #8
 80099a6:	701a      	strb	r2, [r3, #0]
 80099a8:	e049      	b.n	8009a3e <USART_SetConfig+0x17e>
 80099aa:	231f      	movs	r3, #31
 80099ac:	18fb      	adds	r3, r7, r3
 80099ae:	2210      	movs	r2, #16
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e044      	b.n	8009a3e <USART_SetConfig+0x17e>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a83      	ldr	r2, [pc, #524]	; (8009bc8 <USART_SetConfig+0x308>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d127      	bne.n	8009a0e <USART_SetConfig+0x14e>
 80099be:	4b81      	ldr	r3, [pc, #516]	; (8009bc4 <USART_SetConfig+0x304>)
 80099c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c2:	220c      	movs	r2, #12
 80099c4:	4013      	ands	r3, r2
 80099c6:	2b0c      	cmp	r3, #12
 80099c8:	d017      	beq.n	80099fa <USART_SetConfig+0x13a>
 80099ca:	d81b      	bhi.n	8009a04 <USART_SetConfig+0x144>
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d00a      	beq.n	80099e6 <USART_SetConfig+0x126>
 80099d0:	d818      	bhi.n	8009a04 <USART_SetConfig+0x144>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <USART_SetConfig+0x11c>
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d00a      	beq.n	80099f0 <USART_SetConfig+0x130>
 80099da:	e013      	b.n	8009a04 <USART_SetConfig+0x144>
 80099dc:	231f      	movs	r3, #31
 80099de:	18fb      	adds	r3, r7, r3
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]
 80099e4:	e02b      	b.n	8009a3e <USART_SetConfig+0x17e>
 80099e6:	231f      	movs	r3, #31
 80099e8:	18fb      	adds	r3, r7, r3
 80099ea:	2202      	movs	r2, #2
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	e026      	b.n	8009a3e <USART_SetConfig+0x17e>
 80099f0:	231f      	movs	r3, #31
 80099f2:	18fb      	adds	r3, r7, r3
 80099f4:	2204      	movs	r2, #4
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e021      	b.n	8009a3e <USART_SetConfig+0x17e>
 80099fa:	231f      	movs	r3, #31
 80099fc:	18fb      	adds	r3, r7, r3
 80099fe:	2208      	movs	r2, #8
 8009a00:	701a      	strb	r2, [r3, #0]
 8009a02:	e01c      	b.n	8009a3e <USART_SetConfig+0x17e>
 8009a04:	231f      	movs	r3, #31
 8009a06:	18fb      	adds	r3, r7, r3
 8009a08:	2210      	movs	r2, #16
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	e017      	b.n	8009a3e <USART_SetConfig+0x17e>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a6e      	ldr	r2, [pc, #440]	; (8009bcc <USART_SetConfig+0x30c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d104      	bne.n	8009a22 <USART_SetConfig+0x162>
 8009a18:	231f      	movs	r3, #31
 8009a1a:	18fb      	adds	r3, r7, r3
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	e00d      	b.n	8009a3e <USART_SetConfig+0x17e>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a6a      	ldr	r2, [pc, #424]	; (8009bd0 <USART_SetConfig+0x310>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d104      	bne.n	8009a36 <USART_SetConfig+0x176>
 8009a2c:	231f      	movs	r3, #31
 8009a2e:	18fb      	adds	r3, r7, r3
 8009a30:	2200      	movs	r2, #0
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	e003      	b.n	8009a3e <USART_SetConfig+0x17e>
 8009a36:	231f      	movs	r3, #31
 8009a38:	18fb      	adds	r3, r7, r3
 8009a3a:	2210      	movs	r2, #16
 8009a3c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8009a3e:	231f      	movs	r3, #31
 8009a40:	18fb      	adds	r3, r7, r3
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d100      	bne.n	8009a4a <USART_SetConfig+0x18a>
 8009a48:	e139      	b.n	8009cbe <USART_SetConfig+0x3fe>
 8009a4a:	dd00      	ble.n	8009a4e <USART_SetConfig+0x18e>
 8009a4c:	e195      	b.n	8009d7a <USART_SetConfig+0x4ba>
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d100      	bne.n	8009a54 <USART_SetConfig+0x194>
 8009a52:	e0d3      	b.n	8009bfc <USART_SetConfig+0x33c>
 8009a54:	dd00      	ble.n	8009a58 <USART_SetConfig+0x198>
 8009a56:	e190      	b.n	8009d7a <USART_SetConfig+0x4ba>
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <USART_SetConfig+0x1a4>
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d100      	bne.n	8009a62 <USART_SetConfig+0x1a2>
 8009a60:	e061      	b.n	8009b26 <USART_SetConfig+0x266>
 8009a62:	e18a      	b.n	8009d7a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a64:	f7fc f904 	bl	8005c70 <HAL_RCC_GetPCLK1Freq>
 8009a68:	0003      	movs	r3, r0
 8009a6a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d044      	beq.n	8009afe <USART_SetConfig+0x23e>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d03e      	beq.n	8009afa <USART_SetConfig+0x23a>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d038      	beq.n	8009af6 <USART_SetConfig+0x236>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d032      	beq.n	8009af2 <USART_SetConfig+0x232>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d02c      	beq.n	8009aee <USART_SetConfig+0x22e>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	d026      	beq.n	8009aea <USART_SetConfig+0x22a>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2b06      	cmp	r3, #6
 8009aa2:	d020      	beq.n	8009ae6 <USART_SetConfig+0x226>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b07      	cmp	r3, #7
 8009aaa:	d01a      	beq.n	8009ae2 <USART_SetConfig+0x222>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	2b08      	cmp	r3, #8
 8009ab2:	d014      	beq.n	8009ade <USART_SetConfig+0x21e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	2b09      	cmp	r3, #9
 8009aba:	d00e      	beq.n	8009ada <USART_SetConfig+0x21a>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	2b0a      	cmp	r3, #10
 8009ac2:	d008      	beq.n	8009ad6 <USART_SetConfig+0x216>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b0b      	cmp	r3, #11
 8009aca:	d102      	bne.n	8009ad2 <USART_SetConfig+0x212>
 8009acc:	2380      	movs	r3, #128	; 0x80
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	e016      	b.n	8009b00 <USART_SetConfig+0x240>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e014      	b.n	8009b00 <USART_SetConfig+0x240>
 8009ad6:	2380      	movs	r3, #128	; 0x80
 8009ad8:	e012      	b.n	8009b00 <USART_SetConfig+0x240>
 8009ada:	2340      	movs	r3, #64	; 0x40
 8009adc:	e010      	b.n	8009b00 <USART_SetConfig+0x240>
 8009ade:	2320      	movs	r3, #32
 8009ae0:	e00e      	b.n	8009b00 <USART_SetConfig+0x240>
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	e00c      	b.n	8009b00 <USART_SetConfig+0x240>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	e00a      	b.n	8009b00 <USART_SetConfig+0x240>
 8009aea:	230a      	movs	r3, #10
 8009aec:	e008      	b.n	8009b00 <USART_SetConfig+0x240>
 8009aee:	2308      	movs	r3, #8
 8009af0:	e006      	b.n	8009b00 <USART_SetConfig+0x240>
 8009af2:	2306      	movs	r3, #6
 8009af4:	e004      	b.n	8009b00 <USART_SetConfig+0x240>
 8009af6:	2304      	movs	r3, #4
 8009af8:	e002      	b.n	8009b00 <USART_SetConfig+0x240>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e000      	b.n	8009b00 <USART_SetConfig+0x240>
 8009afe:	2301      	movs	r3, #1
 8009b00:	0019      	movs	r1, r3
 8009b02:	6938      	ldr	r0, [r7, #16]
 8009b04:	f7f6 fafe 	bl	8000104 <__udivsi3>
 8009b08:	0003      	movs	r3, r0
 8009b0a:	005a      	lsls	r2, r3, #1
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	085b      	lsrs	r3, r3, #1
 8009b12:	18d2      	adds	r2, r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	0019      	movs	r1, r3
 8009b1a:	0010      	movs	r0, r2
 8009b1c:	f7f6 faf2 	bl	8000104 <__udivsi3>
 8009b20:	0003      	movs	r3, r0
 8009b22:	61bb      	str	r3, [r7, #24]
      break;
 8009b24:	e12e      	b.n	8009d84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d052      	beq.n	8009bd4 <USART_SetConfig+0x314>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d03e      	beq.n	8009bb4 <USART_SetConfig+0x2f4>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d038      	beq.n	8009bb0 <USART_SetConfig+0x2f0>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d032      	beq.n	8009bac <USART_SetConfig+0x2ec>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	2b04      	cmp	r3, #4
 8009b4c:	d02c      	beq.n	8009ba8 <USART_SetConfig+0x2e8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	2b05      	cmp	r3, #5
 8009b54:	d026      	beq.n	8009ba4 <USART_SetConfig+0x2e4>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	2b06      	cmp	r3, #6
 8009b5c:	d020      	beq.n	8009ba0 <USART_SetConfig+0x2e0>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	2b07      	cmp	r3, #7
 8009b64:	d01a      	beq.n	8009b9c <USART_SetConfig+0x2dc>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	2b08      	cmp	r3, #8
 8009b6c:	d014      	beq.n	8009b98 <USART_SetConfig+0x2d8>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	2b09      	cmp	r3, #9
 8009b74:	d00e      	beq.n	8009b94 <USART_SetConfig+0x2d4>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2b0a      	cmp	r3, #10
 8009b7c:	d008      	beq.n	8009b90 <USART_SetConfig+0x2d0>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2b0b      	cmp	r3, #11
 8009b84:	d102      	bne.n	8009b8c <USART_SetConfig+0x2cc>
 8009b86:	2380      	movs	r3, #128	; 0x80
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	e024      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e022      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009b90:	2380      	movs	r3, #128	; 0x80
 8009b92:	e020      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009b94:	2340      	movs	r3, #64	; 0x40
 8009b96:	e01e      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009b98:	2320      	movs	r3, #32
 8009b9a:	e01c      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009b9c:	2310      	movs	r3, #16
 8009b9e:	e01a      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	e018      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009ba4:	230a      	movs	r3, #10
 8009ba6:	e016      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009ba8:	2308      	movs	r3, #8
 8009baa:	e014      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009bac:	2306      	movs	r3, #6
 8009bae:	e012      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	e010      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e00e      	b.n	8009bd6 <USART_SetConfig+0x316>
 8009bb8:	cfff69f3 	.word	0xcfff69f3
 8009bbc:	ffffc0f6 	.word	0xffffc0f6
 8009bc0:	40013800 	.word	0x40013800
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	40004400 	.word	0x40004400
 8009bcc:	40004800 	.word	0x40004800
 8009bd0:	40004c00 	.word	0x40004c00
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	0019      	movs	r1, r3
 8009bd8:	4886      	ldr	r0, [pc, #536]	; (8009df4 <USART_SetConfig+0x534>)
 8009bda:	f7f6 fa93 	bl	8000104 <__udivsi3>
 8009bde:	0003      	movs	r3, r0
 8009be0:	005a      	lsls	r2, r3, #1
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	085b      	lsrs	r3, r3, #1
 8009be8:	18d2      	adds	r2, r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	0019      	movs	r1, r3
 8009bf0:	0010      	movs	r0, r2
 8009bf2:	f7f6 fa87 	bl	8000104 <__udivsi3>
 8009bf6:	0003      	movs	r3, r0
 8009bf8:	61bb      	str	r3, [r7, #24]
      break;
 8009bfa:	e0c3      	b.n	8009d84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009bfc:	f7fb ffac 	bl	8005b58 <HAL_RCC_GetSysClockFreq>
 8009c00:	0003      	movs	r3, r0
 8009c02:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d044      	beq.n	8009c96 <USART_SetConfig+0x3d6>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d03e      	beq.n	8009c92 <USART_SetConfig+0x3d2>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d038      	beq.n	8009c8e <USART_SetConfig+0x3ce>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c20:	2b03      	cmp	r3, #3
 8009c22:	d032      	beq.n	8009c8a <USART_SetConfig+0x3ca>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c28:	2b04      	cmp	r3, #4
 8009c2a:	d02c      	beq.n	8009c86 <USART_SetConfig+0x3c6>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	2b05      	cmp	r3, #5
 8009c32:	d026      	beq.n	8009c82 <USART_SetConfig+0x3c2>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c38:	2b06      	cmp	r3, #6
 8009c3a:	d020      	beq.n	8009c7e <USART_SetConfig+0x3be>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	2b07      	cmp	r3, #7
 8009c42:	d01a      	beq.n	8009c7a <USART_SetConfig+0x3ba>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d014      	beq.n	8009c76 <USART_SetConfig+0x3b6>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c50:	2b09      	cmp	r3, #9
 8009c52:	d00e      	beq.n	8009c72 <USART_SetConfig+0x3b2>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	2b0a      	cmp	r3, #10
 8009c5a:	d008      	beq.n	8009c6e <USART_SetConfig+0x3ae>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	2b0b      	cmp	r3, #11
 8009c62:	d102      	bne.n	8009c6a <USART_SetConfig+0x3aa>
 8009c64:	2380      	movs	r3, #128	; 0x80
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	e016      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e014      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c6e:	2380      	movs	r3, #128	; 0x80
 8009c70:	e012      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	e010      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c76:	2320      	movs	r3, #32
 8009c78:	e00e      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c7a:	2310      	movs	r3, #16
 8009c7c:	e00c      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c7e:	230c      	movs	r3, #12
 8009c80:	e00a      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c82:	230a      	movs	r3, #10
 8009c84:	e008      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c86:	2308      	movs	r3, #8
 8009c88:	e006      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c8a:	2306      	movs	r3, #6
 8009c8c:	e004      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c8e:	2304      	movs	r3, #4
 8009c90:	e002      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e000      	b.n	8009c98 <USART_SetConfig+0x3d8>
 8009c96:	2301      	movs	r3, #1
 8009c98:	0019      	movs	r1, r3
 8009c9a:	6938      	ldr	r0, [r7, #16]
 8009c9c:	f7f6 fa32 	bl	8000104 <__udivsi3>
 8009ca0:	0003      	movs	r3, r0
 8009ca2:	005a      	lsls	r2, r3, #1
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	18d2      	adds	r2, r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	0019      	movs	r1, r3
 8009cb2:	0010      	movs	r0, r2
 8009cb4:	f7f6 fa26 	bl	8000104 <__udivsi3>
 8009cb8:	0003      	movs	r3, r0
 8009cba:	61bb      	str	r3, [r7, #24]
      break;
 8009cbc:	e062      	b.n	8009d84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d044      	beq.n	8009d50 <USART_SetConfig+0x490>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d03e      	beq.n	8009d4c <USART_SetConfig+0x48c>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d038      	beq.n	8009d48 <USART_SetConfig+0x488>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d032      	beq.n	8009d44 <USART_SetConfig+0x484>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d02c      	beq.n	8009d40 <USART_SetConfig+0x480>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	d026      	beq.n	8009d3c <USART_SetConfig+0x47c>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	2b06      	cmp	r3, #6
 8009cf4:	d020      	beq.n	8009d38 <USART_SetConfig+0x478>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	2b07      	cmp	r3, #7
 8009cfc:	d01a      	beq.n	8009d34 <USART_SetConfig+0x474>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d014      	beq.n	8009d30 <USART_SetConfig+0x470>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0a:	2b09      	cmp	r3, #9
 8009d0c:	d00e      	beq.n	8009d2c <USART_SetConfig+0x46c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d12:	2b0a      	cmp	r3, #10
 8009d14:	d008      	beq.n	8009d28 <USART_SetConfig+0x468>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d1a:	2b0b      	cmp	r3, #11
 8009d1c:	d102      	bne.n	8009d24 <USART_SetConfig+0x464>
 8009d1e:	2380      	movs	r3, #128	; 0x80
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	e016      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e014      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d28:	2380      	movs	r3, #128	; 0x80
 8009d2a:	e012      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	e010      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d30:	2320      	movs	r3, #32
 8009d32:	e00e      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d34:	2310      	movs	r3, #16
 8009d36:	e00c      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	e00a      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d3c:	230a      	movs	r3, #10
 8009d3e:	e008      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d40:	2308      	movs	r3, #8
 8009d42:	e006      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d44:	2306      	movs	r3, #6
 8009d46:	e004      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d48:	2304      	movs	r3, #4
 8009d4a:	e002      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e000      	b.n	8009d52 <USART_SetConfig+0x492>
 8009d50:	2301      	movs	r3, #1
 8009d52:	0019      	movs	r1, r3
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	0218      	lsls	r0, r3, #8
 8009d58:	f7f6 f9d4 	bl	8000104 <__udivsi3>
 8009d5c:	0003      	movs	r3, r0
 8009d5e:	005a      	lsls	r2, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	085b      	lsrs	r3, r3, #1
 8009d66:	18d2      	adds	r2, r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	0019      	movs	r1, r3
 8009d6e:	0010      	movs	r0, r2
 8009d70:	f7f6 f9c8 	bl	8000104 <__udivsi3>
 8009d74:	0003      	movs	r3, r0
 8009d76:	61bb      	str	r3, [r7, #24]
      break;
 8009d78:	e004      	b.n	8009d84 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009d7a:	231e      	movs	r3, #30
 8009d7c:	18fb      	adds	r3, r7, r3
 8009d7e:	2201      	movs	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
      break;
 8009d82:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	2b0f      	cmp	r3, #15
 8009d88:	d91c      	bls.n	8009dc4 <USART_SetConfig+0x504>
 8009d8a:	69ba      	ldr	r2, [r7, #24]
 8009d8c:	2380      	movs	r3, #128	; 0x80
 8009d8e:	025b      	lsls	r3, r3, #9
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d217      	bcs.n	8009dc4 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	200e      	movs	r0, #14
 8009d9a:	183b      	adds	r3, r7, r0
 8009d9c:	210f      	movs	r1, #15
 8009d9e:	438a      	bics	r2, r1
 8009da0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2207      	movs	r2, #7
 8009daa:	4013      	ands	r3, r2
 8009dac:	b299      	uxth	r1, r3
 8009dae:	183b      	adds	r3, r7, r0
 8009db0:	183a      	adds	r2, r7, r0
 8009db2:	8812      	ldrh	r2, [r2, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	183a      	adds	r2, r7, r0
 8009dbe:	8812      	ldrh	r2, [r2, #0]
 8009dc0:	60da      	str	r2, [r3, #12]
 8009dc2:	e003      	b.n	8009dcc <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009dc4:	231e      	movs	r3, #30
 8009dc6:	18fb      	adds	r3, r7, r3
 8009dc8:	2201      	movs	r2, #1
 8009dca:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009de4:	231e      	movs	r3, #30
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	781b      	ldrb	r3, [r3, #0]
}
 8009dea:	0018      	movs	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b008      	add	sp, #32
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	00f42400 	.word	0x00f42400

08009df8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b086      	sub	sp, #24
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e06:	f7f9 f97f 	bl	8003108 <HAL_GetTick>
 8009e0a:	0003      	movs	r3, r0
 8009e0c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2208      	movs	r2, #8
 8009e16:	4013      	ands	r3, r2
 8009e18:	2b08      	cmp	r3, #8
 8009e1a:	d10e      	bne.n	8009e3a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	2380      	movs	r3, #128	; 0x80
 8009e20:	0399      	lsls	r1, r3, #14
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	23fa      	movs	r3, #250	; 0xfa
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	0013      	movs	r3, r2
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f7ff fd11 	bl	8009854 <USART_WaitOnFlagUntilTimeout>
 8009e32:	1e03      	subs	r3, r0, #0
 8009e34:	d001      	beq.n	8009e3a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e01e      	b.n	8009e78 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2204      	movs	r2, #4
 8009e42:	4013      	ands	r3, r2
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d10e      	bne.n	8009e66 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	2380      	movs	r3, #128	; 0x80
 8009e4c:	03d9      	lsls	r1, r3, #15
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	23fa      	movs	r3, #250	; 0xfa
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	0013      	movs	r3, r2
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f7ff fcfb 	bl	8009854 <USART_WaitOnFlagUntilTimeout>
 8009e5e:	1e03      	subs	r3, r0, #0
 8009e60:	d001      	beq.n	8009e66 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e008      	b.n	8009e78 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2259      	movs	r2, #89	; 0x59
 8009e6a:	2101      	movs	r1, #1
 8009e6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2258      	movs	r2, #88	; 0x58
 8009e72:	2100      	movs	r1, #0
 8009e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	0018      	movs	r0, r3
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	b004      	add	sp, #16
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2140      	movs	r1, #64	; 0x40
 8009e94:	438a      	bics	r2, r1
 8009e96:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	689a      	ldr	r2, [r3, #8]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	438a      	bics	r2, r1
 8009ea6:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2259      	movs	r2, #89	; 0x59
 8009eb2:	5c9b      	ldrb	r3, [r3, r2]
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b12      	cmp	r3, #18
 8009eb8:	d114      	bne.n	8009ee4 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2208      	movs	r2, #8
 8009ec0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2108      	movs	r1, #8
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2259      	movs	r2, #89	; 0x59
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	0018      	movs	r0, r3
 8009ede:	f7f7 f8f7 	bl	80010d0 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009ee2:	e00c      	b.n	8009efe <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d107      	bne.n	8009efe <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2259      	movs	r2, #89	; 0x59
 8009ef2:	2101      	movs	r1, #1
 8009ef4:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	0018      	movs	r0, r3
 8009efa:	f7ff fbff 	bl	80096fc <HAL_USART_TxRxCpltCallback>
}
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	46bd      	mov	sp, r7
 8009f02:	b002      	add	sp, #8
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	46bd      	mov	sp, r7
 8009f12:	b002      	add	sp, #8
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b082      	sub	sp, #8
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	46bd      	mov	sp, r7
 8009f22:	b002      	add	sp, #8
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <LL_GPIO_SetPinMode>:
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	60f8      	str	r0, [r7, #12]
 8009f2e:	60b9      	str	r1, [r7, #8]
 8009f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6819      	ldr	r1, [r3, #0]
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	435b      	muls	r3, r3
 8009f3a:	001a      	movs	r2, r3
 8009f3c:	0013      	movs	r3, r2
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	189b      	adds	r3, r3, r2
 8009f42:	43db      	mvns	r3, r3
 8009f44:	400b      	ands	r3, r1
 8009f46:	001a      	movs	r2, r3
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	435b      	muls	r3, r3
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	434b      	muls	r3, r1
 8009f50:	431a      	orrs	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	601a      	str	r2, [r3, #0]
}
 8009f56:	46c0      	nop			; (mov r8, r8)
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	b004      	add	sp, #16
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <LL_GPIO_SetPinOutputType>:
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	43d2      	mvns	r2, r2
 8009f72:	401a      	ands	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	434b      	muls	r3, r1
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	605a      	str	r2, [r3, #4]
}
 8009f80:	46c0      	nop			; (mov r8, r8)
 8009f82:	46bd      	mov	sp, r7
 8009f84:	b004      	add	sp, #16
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <LL_GPIO_SetPinSpeed>:
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6899      	ldr	r1, [r3, #8]
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	435b      	muls	r3, r3
 8009f9c:	001a      	movs	r2, r3
 8009f9e:	0013      	movs	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	43db      	mvns	r3, r3
 8009fa6:	400b      	ands	r3, r1
 8009fa8:	001a      	movs	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	435b      	muls	r3, r3
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	434b      	muls	r3, r1
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	609a      	str	r2, [r3, #8]
}
 8009fb8:	46c0      	nop			; (mov r8, r8)
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	b004      	add	sp, #16
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <LL_GPIO_SetPinPull>:
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	68d9      	ldr	r1, [r3, #12]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	435b      	muls	r3, r3
 8009fd4:	001a      	movs	r2, r3
 8009fd6:	0013      	movs	r3, r2
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	189b      	adds	r3, r3, r2
 8009fdc:	43db      	mvns	r3, r3
 8009fde:	400b      	ands	r3, r1
 8009fe0:	001a      	movs	r2, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	435b      	muls	r3, r3
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	434b      	muls	r3, r1
 8009fea:	431a      	orrs	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	60da      	str	r2, [r3, #12]
}
 8009ff0:	46c0      	nop			; (mov r8, r8)
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	b004      	add	sp, #16
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <LL_GPIO_SetAFPin_0_7>:
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a19      	ldr	r1, [r3, #32]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	435b      	muls	r3, r3
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	4353      	muls	r3, r2
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	435a      	muls	r2, r3
 800a014:	0013      	movs	r3, r2
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	1a9b      	subs	r3, r3, r2
 800a01a:	43db      	mvns	r3, r3
 800a01c:	400b      	ands	r3, r1
 800a01e:	001a      	movs	r2, r3
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	435b      	muls	r3, r3
 800a024:	68b9      	ldr	r1, [r7, #8]
 800a026:	434b      	muls	r3, r1
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	434b      	muls	r3, r1
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	434b      	muls	r3, r1
 800a030:	431a      	orrs	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	621a      	str	r2, [r3, #32]
}
 800a036:	46c0      	nop			; (mov r8, r8)
 800a038:	46bd      	mov	sp, r7
 800a03a:	b004      	add	sp, #16
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <LL_GPIO_SetAFPin_8_15>:
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	60f8      	str	r0, [r7, #12]
 800a046:	60b9      	str	r1, [r7, #8]
 800a048:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	0a1b      	lsrs	r3, r3, #8
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	0a12      	lsrs	r2, r2, #8
 800a056:	4353      	muls	r3, r2
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	0a12      	lsrs	r2, r2, #8
 800a05c:	4353      	muls	r3, r2
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	0a12      	lsrs	r2, r2, #8
 800a062:	435a      	muls	r2, r3
 800a064:	0013      	movs	r3, r2
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	1a9b      	subs	r3, r3, r2
 800a06a:	43db      	mvns	r3, r3
 800a06c:	400b      	ands	r3, r1
 800a06e:	001a      	movs	r2, r3
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	0a09      	lsrs	r1, r1, #8
 800a078:	434b      	muls	r3, r1
 800a07a:	68b9      	ldr	r1, [r7, #8]
 800a07c:	0a09      	lsrs	r1, r1, #8
 800a07e:	434b      	muls	r3, r1
 800a080:	68b9      	ldr	r1, [r7, #8]
 800a082:	0a09      	lsrs	r1, r1, #8
 800a084:	434b      	muls	r3, r1
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	434b      	muls	r3, r1
 800a08a:	431a      	orrs	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a090:	46c0      	nop			; (mov r8, r8)
 800a092:	46bd      	mov	sp, r7
 800a094:	b004      	add	sp, #16
 800a096:	bd80      	pop	{r7, pc}

0800a098 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a0a6:	e047      	b.n	800a138 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4091      	lsls	r1, r2
 800a0b2:	000a      	movs	r2, r1
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d039      	beq.n	800a132 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d003      	beq.n	800a0ce <LL_GPIO_Init+0x36>
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d10d      	bne.n	800a0ea <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	68b9      	ldr	r1, [r7, #8]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	0018      	movs	r0, r3
 800a0d8:	f7ff ff56 	bl	8009f88 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	68da      	ldr	r2, [r3, #12]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f7ff ff3a 	bl	8009f5e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	691a      	ldr	r2, [r3, #16]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f7ff ff64 	bl	8009fc0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d111      	bne.n	800a124 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2bff      	cmp	r3, #255	; 0xff
 800a104:	d807      	bhi.n	800a116 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	695a      	ldr	r2, [r3, #20]
 800a10a:	68b9      	ldr	r1, [r7, #8]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	0018      	movs	r0, r3
 800a110:	f7ff ff72 	bl	8009ff8 <LL_GPIO_SetAFPin_0_7>
 800a114:	e006      	b.n	800a124 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	695a      	ldr	r2, [r3, #20]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	0018      	movs	r0, r3
 800a120:	f7ff ff8d 	bl	800a03e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	68b9      	ldr	r1, [r7, #8]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	0018      	movs	r0, r3
 800a12e:	f7ff fefa 	bl	8009f26 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3301      	adds	r3, #1
 800a136:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	40da      	lsrs	r2, r3
 800a140:	1e13      	subs	r3, r2, #0
 800a142:	d1b1      	bne.n	800a0a8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a144:	2300      	movs	r3, #0
}
 800a146:	0018      	movs	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	b004      	add	sp, #16
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <LL_RCC_HSI_IsReady>:
{
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a154:	4b07      	ldr	r3, [pc, #28]	; (800a174 <LL_RCC_HSI_IsReady+0x24>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	2380      	movs	r3, #128	; 0x80
 800a15a:	00db      	lsls	r3, r3, #3
 800a15c:	401a      	ands	r2, r3
 800a15e:	2380      	movs	r3, #128	; 0x80
 800a160:	00db      	lsls	r3, r3, #3
 800a162:	429a      	cmp	r2, r3
 800a164:	d101      	bne.n	800a16a <LL_RCC_HSI_IsReady+0x1a>
 800a166:	2301      	movs	r3, #1
 800a168:	e000      	b.n	800a16c <LL_RCC_HSI_IsReady+0x1c>
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	0018      	movs	r0, r3
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	46c0      	nop			; (mov r8, r8)
 800a174:	40021000 	.word	0x40021000

0800a178 <LL_RCC_LSE_IsReady>:
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a17c:	4b05      	ldr	r3, [pc, #20]	; (800a194 <LL_RCC_LSE_IsReady+0x1c>)
 800a17e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a180:	2202      	movs	r2, #2
 800a182:	4013      	ands	r3, r2
 800a184:	2b02      	cmp	r3, #2
 800a186:	d101      	bne.n	800a18c <LL_RCC_LSE_IsReady+0x14>
 800a188:	2301      	movs	r3, #1
 800a18a:	e000      	b.n	800a18e <LL_RCC_LSE_IsReady+0x16>
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	0018      	movs	r0, r3
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	40021000 	.word	0x40021000

0800a198 <LL_RCC_GetSysClkSource>:
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a19c:	4b03      	ldr	r3, [pc, #12]	; (800a1ac <LL_RCC_GetSysClkSource+0x14>)
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	2238      	movs	r2, #56	; 0x38
 800a1a2:	4013      	ands	r3, r2
}
 800a1a4:	0018      	movs	r0, r3
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	46c0      	nop			; (mov r8, r8)
 800a1ac:	40021000 	.word	0x40021000

0800a1b0 <LL_RCC_GetAHBPrescaler>:
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a1b4:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <LL_RCC_GetAHBPrescaler+0x14>)
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	23f0      	movs	r3, #240	; 0xf0
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	4013      	ands	r3, r2
}
 800a1be:	0018      	movs	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40021000 	.word	0x40021000

0800a1c8 <LL_RCC_GetAPB1Prescaler>:
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a1cc:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <LL_RCC_GetAPB1Prescaler+0x14>)
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	23e0      	movs	r3, #224	; 0xe0
 800a1d2:	01db      	lsls	r3, r3, #7
 800a1d4:	4013      	ands	r3, r2
}
 800a1d6:	0018      	movs	r0, r3
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	40021000 	.word	0x40021000

0800a1e0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <LL_RCC_GetUSARTClockSource+0x20>)
 800a1ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	401a      	ands	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	041b      	lsls	r3, r3, #16
 800a1f4:	4313      	orrs	r3, r2
}
 800a1f6:	0018      	movs	r0, r3
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	b002      	add	sp, #8
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	40021000 	.word	0x40021000

0800a204 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a208:	4b03      	ldr	r3, [pc, #12]	; (800a218 <LL_RCC_PLL_GetN+0x14>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	0a1b      	lsrs	r3, r3, #8
 800a20e:	227f      	movs	r2, #127	; 0x7f
 800a210:	4013      	ands	r3, r2
}
 800a212:	0018      	movs	r0, r3
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	40021000 	.word	0x40021000

0800a21c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <LL_RCC_PLL_GetR+0x14>)
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	0f5b      	lsrs	r3, r3, #29
 800a226:	075b      	lsls	r3, r3, #29
}
 800a228:	0018      	movs	r0, r3
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			; (mov r8, r8)
 800a230:	40021000 	.word	0x40021000

0800a234 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a238:	4b03      	ldr	r3, [pc, #12]	; (800a248 <LL_RCC_PLL_GetMainSource+0x14>)
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	2203      	movs	r2, #3
 800a23e:	4013      	ands	r3, r2
}
 800a240:	0018      	movs	r0, r3
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	46c0      	nop			; (mov r8, r8)
 800a248:	40021000 	.word	0x40021000

0800a24c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a250:	4b03      	ldr	r3, [pc, #12]	; (800a260 <LL_RCC_PLL_GetDivider+0x14>)
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	2270      	movs	r2, #112	; 0x70
 800a256:	4013      	ands	r3, r2
}
 800a258:	0018      	movs	r0, r3
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	46c0      	nop			; (mov r8, r8)
 800a260:	40021000 	.word	0x40021000

0800a264 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a26c:	f000 f8a8 	bl	800a3c0 <RCC_GetSystemClockFreq>
 800a270:	0002      	movs	r2, r0
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	0018      	movs	r0, r3
 800a27c:	f000 f8ce 	bl	800a41c <RCC_GetHCLKClockFreq>
 800a280:	0002      	movs	r2, r0
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	0018      	movs	r0, r3
 800a28c:	f000 f8de 	bl	800a44c <RCC_GetPCLK1ClockFreq>
 800a290:	0002      	movs	r2, r0
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	609a      	str	r2, [r3, #8]
}
 800a296:	46c0      	nop			; (mov r8, r8)
 800a298:	46bd      	mov	sp, r7
 800a29a:	b002      	add	sp, #8
 800a29c:	bd80      	pop	{r7, pc}
	...

0800a2a0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b03      	cmp	r3, #3
 800a2b0:	d134      	bne.n	800a31c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	0018      	movs	r0, r3
 800a2b6:	f7ff ff93 	bl	800a1e0 <LL_RCC_GetUSARTClockSource>
 800a2ba:	0003      	movs	r3, r0
 800a2bc:	4a39      	ldr	r2, [pc, #228]	; (800a3a4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d016      	beq.n	800a2f0 <LL_RCC_GetUSARTClockFreq+0x50>
 800a2c2:	4a38      	ldr	r2, [pc, #224]	; (800a3a4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d81c      	bhi.n	800a302 <LL_RCC_GetUSARTClockFreq+0x62>
 800a2c8:	4a37      	ldr	r2, [pc, #220]	; (800a3a8 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <LL_RCC_GetUSARTClockFreq+0x36>
 800a2ce:	4a37      	ldr	r2, [pc, #220]	; (800a3ac <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d005      	beq.n	800a2e0 <LL_RCC_GetUSARTClockFreq+0x40>
 800a2d4:	e015      	b.n	800a302 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a2d6:	f000 f873 	bl	800a3c0 <RCC_GetSystemClockFreq>
 800a2da:	0003      	movs	r3, r0
 800a2dc:	60fb      	str	r3, [r7, #12]
        break;
 800a2de:	e05c      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a2e0:	f7ff ff36 	bl	800a150 <LL_RCC_HSI_IsReady>
 800a2e4:	0003      	movs	r3, r0
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d150      	bne.n	800a38c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a2ea:	4b31      	ldr	r3, [pc, #196]	; (800a3b0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a2ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2ee:	e04d      	b.n	800a38c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a2f0:	f7ff ff42 	bl	800a178 <LL_RCC_LSE_IsReady>
 800a2f4:	0003      	movs	r3, r0
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d14a      	bne.n	800a390 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a2fa:	2380      	movs	r3, #128	; 0x80
 800a2fc:	021b      	lsls	r3, r3, #8
 800a2fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a300:	e046      	b.n	800a390 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a302:	f000 f85d 	bl	800a3c0 <RCC_GetSystemClockFreq>
 800a306:	0003      	movs	r3, r0
 800a308:	0018      	movs	r0, r3
 800a30a:	f000 f887 	bl	800a41c <RCC_GetHCLKClockFreq>
 800a30e:	0003      	movs	r3, r0
 800a310:	0018      	movs	r0, r3
 800a312:	f000 f89b 	bl	800a44c <RCC_GetPCLK1ClockFreq>
 800a316:	0003      	movs	r3, r0
 800a318:	60fb      	str	r3, [r7, #12]
        break;
 800a31a:	e03e      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b0c      	cmp	r3, #12
 800a320:	d13b      	bne.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	0018      	movs	r0, r3
 800a326:	f7ff ff5b 	bl	800a1e0 <LL_RCC_GetUSARTClockSource>
 800a32a:	0003      	movs	r3, r0
 800a32c:	4a21      	ldr	r2, [pc, #132]	; (800a3b4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d016      	beq.n	800a360 <LL_RCC_GetUSARTClockFreq+0xc0>
 800a332:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d81c      	bhi.n	800a372 <LL_RCC_GetUSARTClockFreq+0xd2>
 800a338:	4a1f      	ldr	r2, [pc, #124]	; (800a3b8 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d003      	beq.n	800a346 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a33e:	4a1f      	ldr	r2, [pc, #124]	; (800a3bc <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d005      	beq.n	800a350 <LL_RCC_GetUSARTClockFreq+0xb0>
 800a344:	e015      	b.n	800a372 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a346:	f000 f83b 	bl	800a3c0 <RCC_GetSystemClockFreq>
 800a34a:	0003      	movs	r3, r0
 800a34c:	60fb      	str	r3, [r7, #12]
        break;
 800a34e:	e024      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a350:	f7ff fefe 	bl	800a150 <LL_RCC_HSI_IsReady>
 800a354:	0003      	movs	r3, r0
 800a356:	2b01      	cmp	r3, #1
 800a358:	d11c      	bne.n	800a394 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a35a:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a35c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a35e:	e019      	b.n	800a394 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a360:	f7ff ff0a 	bl	800a178 <LL_RCC_LSE_IsReady>
 800a364:	0003      	movs	r3, r0
 800a366:	2b01      	cmp	r3, #1
 800a368:	d116      	bne.n	800a398 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a36a:	2380      	movs	r3, #128	; 0x80
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a370:	e012      	b.n	800a398 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a372:	f000 f825 	bl	800a3c0 <RCC_GetSystemClockFreq>
 800a376:	0003      	movs	r3, r0
 800a378:	0018      	movs	r0, r3
 800a37a:	f000 f84f 	bl	800a41c <RCC_GetHCLKClockFreq>
 800a37e:	0003      	movs	r3, r0
 800a380:	0018      	movs	r0, r3
 800a382:	f000 f863 	bl	800a44c <RCC_GetPCLK1ClockFreq>
 800a386:	0003      	movs	r3, r0
 800a388:	60fb      	str	r3, [r7, #12]
        break;
 800a38a:	e006      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a38c:	46c0      	nop			; (mov r8, r8)
 800a38e:	e004      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a390:	46c0      	nop			; (mov r8, r8)
 800a392:	e002      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a394:	46c0      	nop			; (mov r8, r8)
 800a396:	e000      	b.n	800a39a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a398:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a39a:	68fb      	ldr	r3, [r7, #12]
}
 800a39c:	0018      	movs	r0, r3
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	b004      	add	sp, #16
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	00030003 	.word	0x00030003
 800a3a8:	00030001 	.word	0x00030001
 800a3ac:	00030002 	.word	0x00030002
 800a3b0:	00f42400 	.word	0x00f42400
 800a3b4:	000c000c 	.word	0x000c000c
 800a3b8:	000c0004 	.word	0x000c0004
 800a3bc:	000c0008 	.word	0x000c0008

0800a3c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a3c6:	f7ff fee7 	bl	800a198 <LL_RCC_GetSysClkSource>
 800a3ca:	0003      	movs	r3, r0
 800a3cc:	2b08      	cmp	r3, #8
 800a3ce:	d002      	beq.n	800a3d6 <RCC_GetSystemClockFreq+0x16>
 800a3d0:	2b10      	cmp	r3, #16
 800a3d2:	d003      	beq.n	800a3dc <RCC_GetSystemClockFreq+0x1c>
 800a3d4:	e007      	b.n	800a3e6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a3d6:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <RCC_GetSystemClockFreq+0x50>)
 800a3d8:	607b      	str	r3, [r7, #4]
      break;
 800a3da:	e014      	b.n	800a406 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a3dc:	f000 f84c 	bl	800a478 <RCC_PLL_GetFreqDomain_SYS>
 800a3e0:	0003      	movs	r3, r0
 800a3e2:	607b      	str	r3, [r7, #4]
      break;
 800a3e4:	e00f      	b.n	800a406 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a3e6:	4b0b      	ldr	r3, [pc, #44]	; (800a414 <RCC_GetSystemClockFreq+0x54>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	0adb      	lsrs	r3, r3, #11
 800a3ec:	2207      	movs	r2, #7
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	409a      	lsls	r2, r3
 800a3f4:	0013      	movs	r3, r2
 800a3f6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	4807      	ldr	r0, [pc, #28]	; (800a418 <RCC_GetSystemClockFreq+0x58>)
 800a3fc:	f7f5 fe82 	bl	8000104 <__udivsi3>
 800a400:	0003      	movs	r3, r0
 800a402:	607b      	str	r3, [r7, #4]
      break;
 800a404:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a406:	687b      	ldr	r3, [r7, #4]
}
 800a408:	0018      	movs	r0, r3
 800a40a:	46bd      	mov	sp, r7
 800a40c:	b002      	add	sp, #8
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	007a1200 	.word	0x007a1200
 800a414:	40021000 	.word	0x40021000
 800a418:	00f42400 	.word	0x00f42400

0800a41c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a424:	f7ff fec4 	bl	800a1b0 <LL_RCC_GetAHBPrescaler>
 800a428:	0003      	movs	r3, r0
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	220f      	movs	r2, #15
 800a42e:	401a      	ands	r2, r3
 800a430:	4b05      	ldr	r3, [pc, #20]	; (800a448 <RCC_GetHCLKClockFreq+0x2c>)
 800a432:	0092      	lsls	r2, r2, #2
 800a434:	58d3      	ldr	r3, [r2, r3]
 800a436:	221f      	movs	r2, #31
 800a438:	4013      	ands	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	40da      	lsrs	r2, r3
 800a43e:	0013      	movs	r3, r2
}
 800a440:	0018      	movs	r0, r3
 800a442:	46bd      	mov	sp, r7
 800a444:	b002      	add	sp, #8
 800a446:	bd80      	pop	{r7, pc}
 800a448:	0800a7c0 	.word	0x0800a7c0

0800a44c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a454:	f7ff feb8 	bl	800a1c8 <LL_RCC_GetAPB1Prescaler>
 800a458:	0003      	movs	r3, r0
 800a45a:	0b1a      	lsrs	r2, r3, #12
 800a45c:	4b05      	ldr	r3, [pc, #20]	; (800a474 <RCC_GetPCLK1ClockFreq+0x28>)
 800a45e:	0092      	lsls	r2, r2, #2
 800a460:	58d3      	ldr	r3, [r2, r3]
 800a462:	221f      	movs	r2, #31
 800a464:	4013      	ands	r3, r2
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	40da      	lsrs	r2, r3
 800a46a:	0013      	movs	r3, r2
}
 800a46c:	0018      	movs	r0, r3
 800a46e:	46bd      	mov	sp, r7
 800a470:	b002      	add	sp, #8
 800a472:	bd80      	pop	{r7, pc}
 800a474:	0800a800 	.word	0x0800a800

0800a478 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a47e:	f7ff fed9 	bl	800a234 <LL_RCC_PLL_GetMainSource>
 800a482:	0003      	movs	r3, r0
 800a484:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d003      	beq.n	800a494 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d003      	beq.n	800a49a <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a492:	e005      	b.n	800a4a0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a494:	4b13      	ldr	r3, [pc, #76]	; (800a4e4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a496:	607b      	str	r3, [r7, #4]
      break;
 800a498:	e005      	b.n	800a4a6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a49a:	4b13      	ldr	r3, [pc, #76]	; (800a4e8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a49c:	607b      	str	r3, [r7, #4]
      break;
 800a49e:	e002      	b.n	800a4a6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a4a0:	4b10      	ldr	r3, [pc, #64]	; (800a4e4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a4a2:	607b      	str	r3, [r7, #4]
      break;
 800a4a4:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a4a6:	f7ff fead 	bl	800a204 <LL_RCC_PLL_GetN>
 800a4aa:	0002      	movs	r2, r0
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4353      	muls	r3, r2
 800a4b0:	001c      	movs	r4, r3
 800a4b2:	f7ff fecb 	bl	800a24c <LL_RCC_PLL_GetDivider>
 800a4b6:	0003      	movs	r3, r0
 800a4b8:	091b      	lsrs	r3, r3, #4
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	0019      	movs	r1, r3
 800a4be:	0020      	movs	r0, r4
 800a4c0:	f7f5 fe20 	bl	8000104 <__udivsi3>
 800a4c4:	0003      	movs	r3, r0
 800a4c6:	001c      	movs	r4, r3
 800a4c8:	f7ff fea8 	bl	800a21c <LL_RCC_PLL_GetR>
 800a4cc:	0003      	movs	r3, r0
 800a4ce:	0f5b      	lsrs	r3, r3, #29
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	0019      	movs	r1, r3
 800a4d4:	0020      	movs	r0, r4
 800a4d6:	f7f5 fe15 	bl	8000104 <__udivsi3>
 800a4da:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a4dc:	0018      	movs	r0, r3
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	b003      	add	sp, #12
 800a4e2:	bd90      	pop	{r4, r7, pc}
 800a4e4:	00f42400 	.word	0x00f42400
 800a4e8:	007a1200 	.word	0x007a1200

0800a4ec <LL_USART_IsEnabled>:
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d101      	bne.n	800a504 <LL_USART_IsEnabled+0x18>
 800a500:	2301      	movs	r3, #1
 800a502:	e000      	b.n	800a506 <LL_USART_IsEnabled+0x1a>
 800a504:	2300      	movs	r3, #0
}
 800a506:	0018      	movs	r0, r3
 800a508:	46bd      	mov	sp, r7
 800a50a:	b002      	add	sp, #8
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <LL_USART_SetPrescaler>:
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b082      	sub	sp, #8
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	220f      	movs	r2, #15
 800a51e:	4393      	bics	r3, r2
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	b292      	uxth	r2, r2
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a52a:	46c0      	nop			; (mov r8, r8)
 800a52c:	46bd      	mov	sp, r7
 800a52e:	b002      	add	sp, #8
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <LL_USART_SetStopBitsLength>:
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4a05      	ldr	r2, [pc, #20]	; (800a558 <LL_USART_SetStopBitsLength+0x24>)
 800a544:	401a      	ands	r2, r3
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	431a      	orrs	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	605a      	str	r2, [r3, #4]
}
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	46bd      	mov	sp, r7
 800a552:	b002      	add	sp, #8
 800a554:	bd80      	pop	{r7, pc}
 800a556:	46c0      	nop			; (mov r8, r8)
 800a558:	ffffcfff 	.word	0xffffcfff

0800a55c <LL_USART_SetHWFlowCtrl>:
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	4a05      	ldr	r2, [pc, #20]	; (800a580 <LL_USART_SetHWFlowCtrl+0x24>)
 800a56c:	401a      	ands	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	609a      	str	r2, [r3, #8]
}
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	46bd      	mov	sp, r7
 800a57a:	b002      	add	sp, #8
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	46c0      	nop			; (mov r8, r8)
 800a580:	fffffcff 	.word	0xfffffcff

0800a584 <LL_USART_SetBaudRate>:
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
 800a590:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b0b      	cmp	r3, #11
 800a596:	d843      	bhi.n	800a620 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	2380      	movs	r3, #128	; 0x80
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d126      	bne.n	800a5f0 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	001a      	movs	r2, r3
 800a5a8:	4b1f      	ldr	r3, [pc, #124]	; (800a628 <LL_USART_SetBaudRate+0xa4>)
 800a5aa:	0092      	lsls	r2, r2, #2
 800a5ac:	58d3      	ldr	r3, [r2, r3]
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f7f5 fda7 	bl	8000104 <__udivsi3>
 800a5b6:	0003      	movs	r3, r0
 800a5b8:	005a      	lsls	r2, r3, #1
 800a5ba:	6a3b      	ldr	r3, [r7, #32]
 800a5bc:	085b      	lsrs	r3, r3, #1
 800a5be:	18d3      	adds	r3, r2, r3
 800a5c0:	6a39      	ldr	r1, [r7, #32]
 800a5c2:	0018      	movs	r0, r3
 800a5c4:	f7f5 fd9e 	bl	8000104 <__udivsi3>
 800a5c8:	0003      	movs	r3, r0
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	4a16      	ldr	r2, [pc, #88]	; (800a62c <LL_USART_SetBaudRate+0xa8>)
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	085b      	lsrs	r3, r3, #1
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	001a      	movs	r2, r3
 800a5de:	2307      	movs	r3, #7
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	60da      	str	r2, [r3, #12]
}
 800a5ee:	e017      	b.n	800a620 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	001a      	movs	r2, r3
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <LL_USART_SetBaudRate+0xa4>)
 800a5f8:	0092      	lsls	r2, r2, #2
 800a5fa:	58d3      	ldr	r3, [r2, r3]
 800a5fc:	0019      	movs	r1, r3
 800a5fe:	68b8      	ldr	r0, [r7, #8]
 800a600:	f7f5 fd80 	bl	8000104 <__udivsi3>
 800a604:	0003      	movs	r3, r0
 800a606:	001a      	movs	r2, r3
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	18d3      	adds	r3, r2, r3
 800a60e:	6a39      	ldr	r1, [r7, #32]
 800a610:	0018      	movs	r0, r3
 800a612:	f7f5 fd77 	bl	8000104 <__udivsi3>
 800a616:	0003      	movs	r3, r0
 800a618:	b29b      	uxth	r3, r3
 800a61a:	001a      	movs	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	60da      	str	r2, [r3, #12]
}
 800a620:	46c0      	nop			; (mov r8, r8)
 800a622:	46bd      	mov	sp, r7
 800a624:	b006      	add	sp, #24
 800a626:	bd80      	pop	{r7, pc}
 800a628:	0800a874 	.word	0x0800a874
 800a62c:	0000fff0 	.word	0x0000fff0

0800a630 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a630:	b590      	push	{r4, r7, lr}
 800a632:	b08b      	sub	sp, #44	; 0x2c
 800a634:	af02      	add	r7, sp, #8
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a63a:	231f      	movs	r3, #31
 800a63c:	18fb      	adds	r3, r7, r3
 800a63e:	2201      	movs	r2, #1
 800a640:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a642:	2300      	movs	r3, #0
 800a644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	0018      	movs	r0, r3
 800a64a:	f7ff ff4f 	bl	800a4ec <LL_USART_IsEnabled>
 800a64e:	1e03      	subs	r3, r0, #0
 800a650:	d16a      	bne.n	800a728 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a38      	ldr	r2, [pc, #224]	; (800a738 <LL_USART_Init+0x108>)
 800a658:	401a      	ands	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	6899      	ldr	r1, [r3, #8]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	4319      	orrs	r1, r3
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	695b      	ldr	r3, [r3, #20]
 800a668:	4319      	orrs	r1, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	430b      	orrs	r3, r1
 800a670:	431a      	orrs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	0011      	movs	r1, r2
 800a67e:	0018      	movs	r0, r3
 800a680:	f7ff ff58 	bl	800a534 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	699a      	ldr	r2, [r3, #24]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	0011      	movs	r1, r2
 800a68c:	0018      	movs	r0, r3
 800a68e:	f7ff ff65 	bl	800a55c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a29      	ldr	r2, [pc, #164]	; (800a73c <LL_USART_Init+0x10c>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d105      	bne.n	800a6a6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a69a:	2003      	movs	r0, #3
 800a69c:	f7ff fe00 	bl	800a2a0 <LL_RCC_GetUSARTClockFreq>
 800a6a0:	0003      	movs	r3, r0
 800a6a2:	61bb      	str	r3, [r7, #24]
 800a6a4:	e022      	b.n	800a6ec <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4a25      	ldr	r2, [pc, #148]	; (800a740 <LL_USART_Init+0x110>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d105      	bne.n	800a6ba <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a6ae:	200c      	movs	r0, #12
 800a6b0:	f7ff fdf6 	bl	800a2a0 <LL_RCC_GetUSARTClockFreq>
 800a6b4:	0003      	movs	r3, r0
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	e018      	b.n	800a6ec <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a21      	ldr	r2, [pc, #132]	; (800a744 <LL_USART_Init+0x114>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d108      	bne.n	800a6d4 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a6c2:	240c      	movs	r4, #12
 800a6c4:	193b      	adds	r3, r7, r4
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	f7ff fdcc 	bl	800a264 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a6cc:	193b      	adds	r3, r7, r4
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	e00b      	b.n	800a6ec <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a1c      	ldr	r2, [pc, #112]	; (800a748 <LL_USART_Init+0x118>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d107      	bne.n	800a6ec <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a6dc:	240c      	movs	r4, #12
 800a6de:	193b      	adds	r3, r7, r4
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f7ff fdbf 	bl	800a264 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a6e6:	193b      	adds	r3, r7, r4
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d013      	beq.n	800a71a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00f      	beq.n	800a71a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a6fa:	231f      	movs	r3, #31
 800a6fc:	18fb      	adds	r3, r7, r3
 800a6fe:	2200      	movs	r2, #0
 800a700:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	69dc      	ldr	r4, [r3, #28]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	0023      	movs	r3, r4
 800a716:	f7ff ff35 	bl	800a584 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	0011      	movs	r1, r2
 800a722:	0018      	movs	r0, r3
 800a724:	f7ff fef3 	bl	800a50e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a728:	231f      	movs	r3, #31
 800a72a:	18fb      	adds	r3, r7, r3
 800a72c:	781b      	ldrb	r3, [r3, #0]
}
 800a72e:	0018      	movs	r0, r3
 800a730:	46bd      	mov	sp, r7
 800a732:	b009      	add	sp, #36	; 0x24
 800a734:	bd90      	pop	{r4, r7, pc}
 800a736:	46c0      	nop			; (mov r8, r8)
 800a738:	efff69f3 	.word	0xefff69f3
 800a73c:	40013800 	.word	0x40013800
 800a740:	40004400 	.word	0x40004400
 800a744:	40004800 	.word	0x40004800
 800a748:	40004c00 	.word	0x40004c00

0800a74c <__libc_init_array>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	2600      	movs	r6, #0
 800a750:	4d0c      	ldr	r5, [pc, #48]	; (800a784 <__libc_init_array+0x38>)
 800a752:	4c0d      	ldr	r4, [pc, #52]	; (800a788 <__libc_init_array+0x3c>)
 800a754:	1b64      	subs	r4, r4, r5
 800a756:	10a4      	asrs	r4, r4, #2
 800a758:	42a6      	cmp	r6, r4
 800a75a:	d109      	bne.n	800a770 <__libc_init_array+0x24>
 800a75c:	2600      	movs	r6, #0
 800a75e:	f000 f821 	bl	800a7a4 <_init>
 800a762:	4d0a      	ldr	r5, [pc, #40]	; (800a78c <__libc_init_array+0x40>)
 800a764:	4c0a      	ldr	r4, [pc, #40]	; (800a790 <__libc_init_array+0x44>)
 800a766:	1b64      	subs	r4, r4, r5
 800a768:	10a4      	asrs	r4, r4, #2
 800a76a:	42a6      	cmp	r6, r4
 800a76c:	d105      	bne.n	800a77a <__libc_init_array+0x2e>
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	00b3      	lsls	r3, r6, #2
 800a772:	58eb      	ldr	r3, [r5, r3]
 800a774:	4798      	blx	r3
 800a776:	3601      	adds	r6, #1
 800a778:	e7ee      	b.n	800a758 <__libc_init_array+0xc>
 800a77a:	00b3      	lsls	r3, r6, #2
 800a77c:	58eb      	ldr	r3, [r5, r3]
 800a77e:	4798      	blx	r3
 800a780:	3601      	adds	r6, #1
 800a782:	e7f2      	b.n	800a76a <__libc_init_array+0x1e>
 800a784:	0800a8a4 	.word	0x0800a8a4
 800a788:	0800a8a4 	.word	0x0800a8a4
 800a78c:	0800a8a4 	.word	0x0800a8a4
 800a790:	0800a8a8 	.word	0x0800a8a8

0800a794 <memset>:
 800a794:	0003      	movs	r3, r0
 800a796:	1882      	adds	r2, r0, r2
 800a798:	4293      	cmp	r3, r2
 800a79a:	d100      	bne.n	800a79e <memset+0xa>
 800a79c:	4770      	bx	lr
 800a79e:	7019      	strb	r1, [r3, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	e7f9      	b.n	800a798 <memset+0x4>

0800a7a4 <_init>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	46c0      	nop			; (mov r8, r8)
 800a7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	469e      	mov	lr, r3
 800a7ae:	4770      	bx	lr

0800a7b0 <_fini>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr
