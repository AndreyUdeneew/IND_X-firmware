
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c908  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bae8  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184ac  080184ac  00030040  2**0
                  CONTENTS
  4 .ARM          00000000  080184ac  080184ac  00030040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080184ac  080184ac  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080184ac  080184ac  000284ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184b0  080184b0  000284b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080184b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000040  080184f4  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001304  080184f4  00031304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193a3  00000000  00000000  00030068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b0  00000000  00000000  0004940b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0004c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017c0  00000000  00000000  0004e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c89a  00000000  00000000  0004fab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c99c  00000000  00000000  0006c352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afb39  00000000  00000000  00088cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c74  00000000  00000000  00138878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c9ac 	.word	0x0800c9ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	0800c9ac 	.word	0x0800c9ac

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b086      	sub	sp, #24
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000372:	f3ef 8310 	mrs	r3, PRIMASK
 8000376:	60bb      	str	r3, [r7, #8]
  return(result);
 8000378:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	2301      	movs	r3, #1
 800037e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f383 8810 	msr	PRIMASK, r3
}
 8000386:	46c0      	nop			; (mov r8, r8)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689b      	ldr	r3, [r3, #8]
 800038c:	00db      	lsls	r3, r3, #3
 800038e:	08da      	lsrs	r2, r3, #3
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	075b      	lsls	r3, r3, #29
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	697b      	ldr	r3, [r7, #20]
 800039c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	f383 8810 	msr	PRIMASK, r3
}
 80003a4:	46c0      	nop			; (mov r8, r8)
}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b006      	add	sp, #24
 80003ac:	bd80      	pop	{r7, pc}
	...

080003b0 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b086      	sub	sp, #24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80003ba:	f3ef 8310 	mrs	r3, PRIMASK
 80003be:	60bb      	str	r3, [r7, #8]
  return(result);
 80003c0:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	2301      	movs	r3, #1
 80003c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f383 8810 	msr	PRIMASK, r3
}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <LL_USART_SetRXFIFOThreshold+0x48>)
 80003d6:	401a      	ands	r2, r3
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	065b      	lsls	r3, r3, #25
 80003dc:	431a      	orrs	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	f383 8810 	msr	PRIMASK, r3
}
 80003ec:	46c0      	nop			; (mov r8, r8)
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b006      	add	sp, #24
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	f1ffffff 	.word	0xf1ffffff

080003fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a07      	ldr	r2, [pc, #28]	; (8000428 <LL_USART_ConfigAsyncMode+0x2c>)
 800040a:	401a      	ands	r2, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	689b      	ldr	r3, [r3, #8]
 8000414:	222a      	movs	r2, #42	; 0x2a
 8000416:	4393      	bics	r3, r2
 8000418:	001a      	movs	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	609a      	str	r2, [r3, #8]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffb7ff 	.word	0xffffb7ff

0800042c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	039b      	lsls	r3, r3, #14
 800043c:	401a      	ands	r2, r3
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	039b      	lsls	r3, r3, #14
 8000442:	429a      	cmp	r2, r3
 8000444:	d101      	bne.n	800044a <LL_USART_IsActiveFlag_TEACK+0x1e>
 8000446:	2301      	movs	r3, #1
 8000448:	e000      	b.n	800044c <LL_USART_IsActiveFlag_TEACK+0x20>
 800044a:	2300      	movs	r3, #0
}
 800044c:	0018      	movs	r0, r3
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}

08000454 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	69da      	ldr	r2, [r3, #28]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	03db      	lsls	r3, r3, #15
 8000464:	401a      	ands	r2, r3
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	03db      	lsls	r3, r3, #15
 800046a:	429a      	cmp	r2, r3
 800046c:	d101      	bne.n	8000472 <LL_USART_IsActiveFlag_REACK+0x1e>
 800046e:	2301      	movs	r3, #1
 8000470:	e000      	b.n	8000474 <LL_USART_IsActiveFlag_REACK+0x20>
 8000472:	2300      	movs	r3, #0
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b002      	add	sp, #8
 800047a:	bd80      	pop	{r7, pc}

0800047c <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000484:	f3ef 8310 	mrs	r3, PRIMASK
 8000488:	60bb      	str	r3, [r7, #8]
  return(result);
 800048a:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	2301      	movs	r3, #1
 8000490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	f383 8810 	msr	PRIMASK, r3
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2220      	movs	r2, #32
 80004a0:	431a      	orrs	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004aa:	693b      	ldr	r3, [r7, #16]
 80004ac:	f383 8810 	msr	PRIMASK, r3
}
 80004b0:	46c0      	nop			; (mov r8, r8)
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b086      	sub	sp, #24
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80004c2:	f3ef 8310 	mrs	r3, PRIMASK
 80004c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80004c8:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	2301      	movs	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f383 8810 	msr	PRIMASK, r3
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2201      	movs	r2, #1
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f383 8810 	msr	PRIMASK, r3
}
 80004ee:	46c0      	nop			; (mov r8, r8)
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b006      	add	sp, #24
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000504:	b29b      	uxth	r3, r3
 8000506:	05db      	lsls	r3, r3, #23
 8000508:	0ddb      	lsrs	r3, r3, #23
 800050a:	b29b      	uxth	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 800051e:	6819      	ldr	r1, [r3, #0]
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40010000 	.word	0x40010000

08000534 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	619a      	str	r2, [r3, #24]
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	683a      	ldr	r2, [r7, #0]
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800055c:	46c0      	nop			; (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}

08000564 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800056e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	430a      	orrs	r2, r1
 8000576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <LL_APB1_GRP1_EnableClock+0x28>)
 800057a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4013      	ands	r3, r2
 8000580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b004      	add	sp, #16
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000

08000590 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <LL_IOP_GRP1_EnableClock+0x28>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b089      	sub	sp, #36	; 0x24
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 80005c2:	231c      	movs	r3, #28
 80005c4:	18fb      	adds	r3, r7, r3
 80005c6:	2200      	movs	r2, #0
 80005c8:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 80005ca:	231a      	movs	r3, #26
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 80005d2:	2318      	movs	r3, #24
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	2200      	movs	r2, #0
 80005d8:	801a      	strh	r2, [r3, #0]
	uint16_t beep1 = 0x0000;
 80005da:	2316      	movs	r3, #22
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
	uint16_t beep2 = 0xFFFF;
 80005e2:	2314      	movs	r3, #20
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	4252      	negs	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f004 fecc 	bl	8005388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f898 	bl	8000724 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b45      	ldr	r3, [pc, #276]	; (800070c <main+0x150>)
 80005f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <main+0x150>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	430a      	orrs	r2, r1
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000600:	4b42      	ldr	r3, [pc, #264]	; (800070c <main+0x150>)
 8000602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000604:	2201      	movs	r2, #1
 8000606:	4013      	ands	r3, r2
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <main+0x150>)
 800060e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000610:	4b3e      	ldr	r3, [pc, #248]	; (800070c <main+0x150>)
 8000612:	2102      	movs	r1, #2
 8000614:	430a      	orrs	r2, r1
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
 8000618:	4b3c      	ldr	r3, [pc, #240]	; (800070c <main+0x150>)
 800061a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800061c:	2202      	movs	r2, #2
 800061e:	4013      	ands	r3, r2
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000624:	4b39      	ldr	r3, [pc, #228]	; (800070c <main+0x150>)
 8000626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000628:	4b38      	ldr	r3, [pc, #224]	; (800070c <main+0x150>)
 800062a:	2104      	movs	r1, #4
 800062c:	430a      	orrs	r2, r1
 800062e:	635a      	str	r2, [r3, #52]	; 0x34
 8000630:	4b36      	ldr	r3, [pc, #216]	; (800070c <main+0x150>)
 8000632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000634:	2204      	movs	r2, #4
 8000636:	4013      	ands	r3, r2
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fbda 	bl	8000df4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 fbaa 	bl	8000d98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 fac8 	bl	8000bd8 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000648:	f000 f8ec 	bl	8000824 <MX_COMP1_Init>
  MX_TIM1_Init();
 800064c:	f000 f9ca 	bl	80009e4 <MX_TIM1_Init>
  MX_USART3_Init();
 8000650:	f000 fb60 	bl	8000d14 <MX_USART3_Init>
  MX_I2S1_Init();
 8000654:	f000 f958 	bl	8000908 <MX_I2S1_Init>
  MX_I2C1_Init();
 8000658:	f000 f916 	bl	8000888 <MX_I2C1_Init>
  MX_SPI2_Init();
 800065c:	f000 f97e 	bl	800095c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <main+0x154>)
 8000662:	0018      	movs	r0, r3
 8000664:	f005 f95e 	bl	8005924 <HAL_COMP_Start>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f004 ff13 	bl	8005494 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 800066e:	f001 fd37 	bl	80020e0 <MEM_Reset>

	weoInit();
 8000672:	f000 fe27 	bl	80012c4 <weoInit>
	HAL_Delay(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f004 ff0c 	bl	8005494 <HAL_Delay>
	weoClear();
 800067c:	f000 febe 	bl	80013fc <weoClear>
	MEM_GetID();
 8000680:	f002 fa62 	bl	8002b48 <MEM_GetID>
	soundSetup();
 8000684:	f001 f844 	bl	8001710 <soundSetup>
	LIS3DHsetup();
 8000688:	f004 fa34 	bl	8004af4 <LIS3DHsetup>
//	I2C_SOUND_ChangePage(0x01);
//	WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
//	WriteReg_I2C_SOUND(0x2E, 0x24);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
//    squeak_triple(signal);
//    squeak_long();
  USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <main+0x158>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0x158>)
 8000692:	4921      	ldr	r1, [pc, #132]	; (8000718 <main+0x15c>)
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
	LL_USART_EnableIT_RXNE(USART2);
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x158>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff feee 	bl	800047c <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80006a0:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <main+0x158>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff ff09 	bl	80004ba <LL_USART_EnableIT_ERROR>
	USART2->ICR|=USART_ICR_ORECF;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <main+0x158>)
 80006aa:	6a1a      	ldr	r2, [r3, #32]
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <main+0x158>)
 80006ae:	2108      	movs	r1, #8
 80006b0:	430a      	orrs	r2, r1
 80006b2:	621a      	str	r2, [r3, #32]
//				decY=0x01;
//				if(y % 2 !=0){
//					decY=0x02;
//				}
//	weoDrawRectangleFilled(x,y,(x+localWidth-1),(y+localHeight-decY),0xFF,aim);
	setVolume(16*4, 0, 0);	//  void setVolume(drvGain(48-129),digGain(16-112),spkAttn(0-116, 255));
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	2040      	movs	r0, #64	; 0x40
 80006ba:	f002 f9f1 	bl	8002aa0 <setVolume>
	for(uint8_t k = 0; k < 1; k++)
 80006be:	231f      	movs	r3, #31
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
 80006c6:	e00f      	b.n	80006e8 <main+0x12c>
	{
		soundPlay(k);
 80006c8:	241f      	movs	r4, #31
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 ff7c 	bl	80025cc <soundPlay>
		HAL_Delay(1000);
 80006d4:	23fa      	movs	r3, #250	; 0xfa
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	0018      	movs	r0, r3
 80006da:	f004 fedb 	bl	8005494 <HAL_Delay>
	for(uint8_t k = 0; k < 1; k++)
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	781a      	ldrb	r2, [r3, #0]
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	3201      	adds	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
 80006e8:	231f      	movs	r3, #31
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0ea      	beq.n	80006c8 <main+0x10c>
	}
//    GPIOB->PUPDR &= ~0x3F000;
	GPIOC->ODR |= 1 << 6;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <main+0x160>)
 80006f4:	695a      	ldr	r2, [r3, #20]
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <main+0x160>)
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	430a      	orrs	r2, r1
 80006fc:	615a      	str	r2, [r3, #20]
//	weoShowFullScreen(4);
	while (1) {
//		weoShowSmallImage(0x02,0x70,0x00);
//		LIS3DHreadData();
		cmdExecute(cmd2Execute);
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <main+0x164>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	0018      	movs	r0, r3
 8000704:	f002 fa82 	bl	8002c0c <cmdExecute>
 8000708:	e7f9      	b.n	80006fe <main+0x142>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	40021000 	.word	0x40021000
 8000710:	2000005c 	.word	0x2000005c
 8000714:	40004400 	.word	0x40004400
 8000718:	1000100d 	.word	0x1000100d
 800071c:	50000800 	.word	0x50000800
 8000720:	200002ea 	.word	0x200002ea

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b590      	push	{r4, r7, lr}
 8000726:	b0a1      	sub	sp, #132	; 0x84
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	2448      	movs	r4, #72	; 0x48
 800072c:	193b      	adds	r3, r7, r4
 800072e:	0018      	movs	r0, r3
 8000730:	2338      	movs	r3, #56	; 0x38
 8000732:	001a      	movs	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f00c f931 	bl	800c99c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073a:	2338      	movs	r3, #56	; 0x38
 800073c:	18fb      	adds	r3, r7, r3
 800073e:	0018      	movs	r0, r3
 8000740:	2310      	movs	r3, #16
 8000742:	001a      	movs	r2, r3
 8000744:	2100      	movs	r1, #0
 8000746:	f00c f929 	bl	800c99c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	0018      	movs	r0, r3
 800074e:	2334      	movs	r3, #52	; 0x34
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f00c f922 	bl	800c99c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	0018      	movs	r0, r3
 800075e:	f007 fb3b 	bl	8007dd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000770:	0021      	movs	r1, r4
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2240      	movs	r2, #64	; 0x40
 800077c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2202      	movs	r2, #2
 8000782:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2202      	movs	r2, #2
 8000788:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2208      	movs	r2, #8
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0292      	lsls	r2, r2, #10
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0492      	lsls	r2, r2, #18
 80007a4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	0592      	lsls	r2, r2, #22
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f007 fb5d 	bl	8007e70 <HAL_RCC_OscConfig>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ba:	f004 f9cd 	bl	8004b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	2138      	movs	r1, #56	; 0x38
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2207      	movs	r2, #7
 80007c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2202      	movs	r2, #2
 80007ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2102      	movs	r1, #2
 80007dc:	0018      	movs	r0, r3
 80007de:	f007 fe61 	bl	80084a4 <HAL_RCC_ClockConfig>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f004 f9b7 	bl	8004b58 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <SystemClock_Config+0xfc>)
 80007ee:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	0018      	movs	r0, r3
 800080c:	f007 fff4 	bl	80087f8 <HAL_RCCEx_PeriphCLKConfig>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000814:	f004 f9a0 	bl	8004b58 <Error_Handler>
  }
}
 8000818:	46c0      	nop			; (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b021      	add	sp, #132	; 0x84
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	00200822 	.word	0x00200822

08000824 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000828:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_COMP1_Init+0x5c>)
 800082a:	4a16      	ldr	r2, [pc, #88]	; (8000884 <MX_COMP1_Init+0x60>)
 800082c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_COMP1_Init+0x5c>)
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_COMP1_Init+0x5c>)
 8000838:	2230      	movs	r2, #48	; 0x30
 800083a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_COMP1_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_COMP1_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_COMP1_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_COMP1_Init+0x5c>)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0392      	lsls	r2, r2, #14
 8000854:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_COMP1_Init+0x5c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_COMP1_Init+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000862:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_COMP1_Init+0x5c>)
 8000864:	2212      	movs	r2, #18
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <MX_COMP1_Init+0x5c>)
 800086a:	0018      	movs	r0, r3
 800086c:	f004 fef8 	bl	8005660 <HAL_COMP_Init>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000874:	f004 f970 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	2000005c 	.word	0x2000005c
 8000884:	40010200 	.word	0x40010200

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f005 fd89 	bl	80063dc <HAL_I2C_Init>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f004 f943 	bl	8004b58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_I2C1_Init+0x74>)
 80008d4:	2100      	movs	r1, #0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f006 ff12 	bl	8007700 <HAL_I2CEx_ConfigAnalogFilter>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f004 f93a 	bl	8004b58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_I2C1_Init+0x74>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f006 ff55 	bl	8007798 <HAL_I2CEx_ConfigDigitalFilter>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f004 f931 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	40005400 	.word	0x40005400
 8000904:	1094102c 	.word	0x1094102c

08000908 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2S1_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_I2S1_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_I2S1_Init+0x4c>)
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2S1_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2S1_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_I2S1_Init+0x4c>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2S1_Init+0x4c>)
 8000930:	22fa      	movs	r2, #250	; 0xfa
 8000932:	0192      	lsls	r2, r2, #6
 8000934:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2S1_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <MX_I2S1_Init+0x4c>)
 800093e:	0018      	movs	r0, r3
 8000940:	f006 ff76 	bl	8007830 <HAL_I2S_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000948:	f004 f906 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	200000e0 	.word	0x200000e0
 8000958:	40013000 	.word	0x40013000

0800095c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_SPI2_Init+0x80>)
 8000962:	2208      	movs	r2, #8
 8000964:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_SPI2_Init+0x80>)
 8000968:	4a1d      	ldr	r2, [pc, #116]	; (80009e0 <MX_SPI2_Init+0x84>)
 800096a:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_SPI2_Init+0x80>)
 800096e:	2282      	movs	r2, #130	; 0x82
 8000970:	0052      	lsls	r2, r2, #1
 8000972:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_SPI2_Init+0x80>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_SPI2_Init+0x80>)
 800097c:	22e0      	movs	r2, #224	; 0xe0
 800097e:	00d2      	lsls	r2, r2, #3
 8000980:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_SPI2_Init+0x80>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_SPI2_Init+0x80>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800098e:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_SPI2_Init+0x80>)
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_SPI2_Init+0x80>)
 8000998:	2210      	movs	r2, #16
 800099a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_SPI2_Init+0x80>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_SPI2_Init+0x80>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_SPI2_Init+0x80>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_SPI2_Init+0x80>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_SPI2_Init+0x80>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_SPI2_Init+0x80>)
 80009bc:	2208      	movs	r2, #8
 80009be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_SPI2_Init+0x80>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f008 fc18 	bl	80091f8 <HAL_SPI_Init>
 80009c8:	1e03      	subs	r3, r0, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80009cc:	f004 f8c4 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <MX_SPI2_Init+0x80>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000178 	.word	0x20000178
 80009e0:	40003800 	.word	0x40003800

080009e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b09e      	sub	sp, #120	; 0x78
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	2368      	movs	r3, #104	; 0x68
 80009ec:	18fb      	adds	r3, r7, r3
 80009ee:	0018      	movs	r0, r3
 80009f0:	2310      	movs	r3, #16
 80009f2:	001a      	movs	r2, r3
 80009f4:	2100      	movs	r1, #0
 80009f6:	f00b ffd1 	bl	800c99c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	235c      	movs	r3, #92	; 0x5c
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	0018      	movs	r0, r3
 8000a00:	230c      	movs	r3, #12
 8000a02:	001a      	movs	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	f00b ffc9 	bl	800c99c <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000a0a:	2350      	movs	r3, #80	; 0x50
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	0018      	movs	r0, r3
 8000a10:	230c      	movs	r3, #12
 8000a12:	001a      	movs	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f00b ffc1 	bl	800c99c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a1a:	2334      	movs	r3, #52	; 0x34
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	231c      	movs	r3, #28
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f00b ffb9 	bl	800c99c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2334      	movs	r3, #52	; 0x34
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f00b ffb2 	bl	800c99c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a38:	4b64      	ldr	r3, [pc, #400]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a3a:	4a65      	ldr	r2, [pc, #404]	; (8000bd0 <MX_TIM1_Init+0x1ec>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a3e:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b61      	ldr	r3, [pc, #388]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000a4a:	4b60      	ldr	r3, [pc, #384]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a4c:	4a61      	ldr	r2, [pc, #388]	; (8000bd4 <MX_TIM1_Init+0x1f0>)
 8000a4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b5e      	ldr	r3, [pc, #376]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a56:	4b5d      	ldr	r3, [pc, #372]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a5c:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a62:	4b5a      	ldr	r3, [pc, #360]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a64:	0018      	movs	r0, r3
 8000a66:	f009 fbe5 	bl	800a234 <HAL_TIM_Base_Init>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000a6e:	f004 f873 	bl	8004b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a72:	2168      	movs	r1, #104	; 0x68
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0152      	lsls	r2, r2, #5
 8000a7a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a7c:	187a      	adds	r2, r7, r1
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f009 fe78 	bl	800a778 <HAL_TIM_ConfigClockSource>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a8c:	f004 f864 	bl	8004b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a90:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f009 fc26 	bl	800a2e4 <HAL_TIM_PWM_Init>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000a9c:	f004 f85c 	bl	8004b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	215c      	movs	r1, #92	; 0x5c
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab4:	187a      	adds	r2, r7, r1
 8000ab6:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f00a fb36 	bl	800b12c <HAL_TIMEx_MasterConfigSynchronization>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000ac4:	f004 f848 	bl	8004b58 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000ac8:	2150      	movs	r1, #80	; 0x50
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2202      	movs	r2, #2
 8000ace:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8000adc:	187a      	adds	r2, r7, r1
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f00a fc36 	bl	800b354 <HAL_TIMEx_ConfigBreakInput>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000aec:	f004 f834 	bl	8004b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af0:	2134      	movs	r1, #52	; 0x34
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2260      	movs	r2, #96	; 0x60
 8000af6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	22c8      	movs	r2, #200	; 0xc8
 8000afc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b1c:	1879      	adds	r1, r7, r1
 8000b1e:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f009 fd28 	bl	800a578 <HAL_TIM_PWM_ConfigChannel>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000b2c:	f004 f814 	bl	8004b58 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000b30:	2134      	movs	r1, #52	; 0x34
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2232      	movs	r2, #50	; 0x32
 8000b36:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000b38:	1879      	adds	r1, r7, r1
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f009 fd1a 	bl	800a578 <HAL_TIM_PWM_ConfigChannel>
 8000b44:	1e03      	subs	r3, r0, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000b48:	f004 f806 	bl	8004b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000b4c:	003b      	movs	r3, r7
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	0152      	lsls	r2, r2, #5
 8000b6e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	0192      	lsls	r2, r2, #6
 8000b76:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b84:	003b      	movs	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	0492      	lsls	r2, r2, #18
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	01d2      	lsls	r2, r2, #7
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba6:	003a      	movs	r2, r7
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f00a fb2b 	bl	800b208 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x1d6>
  {
    Error_Handler();
 8000bb6:	f003 ffcf 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <MX_TIM1_Init+0x1e8>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f004 f9f9 	bl	8004fb4 <HAL_TIM_MspPostInit>

}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b01e      	add	sp, #120	; 0x78
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	200001dc 	.word	0x200001dc
 8000bd0:	40012c00 	.word	0x40012c00
 8000bd4:	0000027f 	.word	0x0000027f

08000bd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08f      	sub	sp, #60	; 0x3c
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000bde:	2418      	movs	r4, #24
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	0018      	movs	r0, r3
 8000be4:	2320      	movs	r3, #32
 8000be6:	001a      	movs	r2, r3
 8000be8:	2100      	movs	r1, #0
 8000bea:	f00b fed7 	bl	800c99c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	003b      	movs	r3, r7
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	2318      	movs	r3, #24
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	f00b fed0 	bl	800c99c <memset>




  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000bfc:	2380      	movs	r3, #128	; 0x80
 8000bfe:	029b      	lsls	r3, r3, #10
 8000c00:	0018      	movs	r0, r3
 8000c02:	f7ff fcaf 	bl	8000564 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fcc2 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2204      	movs	r2, #4
 8000c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2202      	movs	r2, #2
 8000c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	003a      	movs	r2, r7
 8000c32:	23a0      	movs	r3, #160	; 0xa0
 8000c34:	05db      	lsls	r3, r3, #23
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f00b fb2d 	bl	800c298 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c3e:	003b      	movs	r3, r7
 8000c40:	2208      	movs	r2, #8
 8000c42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c44:	003b      	movs	r3, r7
 8000c46:	2202      	movs	r2, #2
 8000c48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c56:	003b      	movs	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	2201      	movs	r2, #1
 8000c60:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	003a      	movs	r2, r7
 8000c64:	23a0      	movs	r3, #160	; 0xa0
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f00b fb14 	bl	800c298 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000c70:	2100      	movs	r1, #0
 8000c72:	201c      	movs	r0, #28
 8000c74:	f7ff faec 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000c78:	201c      	movs	r0, #28
 8000c7a:	f7ff facf 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	22e1      	movs	r2, #225	; 0xe1
 8000c88:	0212      	lsls	r2, r2, #8
 8000c8a:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	2280      	movs	r2, #128	; 0x80
 8000c90:	0152      	lsls	r2, r2, #5
 8000c92:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000c94:	0021      	movs	r1, r4
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2200      	movs	r2, #0
 8000c9a:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	4a16      	ldr	r2, [pc, #88]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0010      	movs	r0, r2
 8000cbc:	f00b fdbc 	bl	800c838 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f7ff fb4f 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000ccc:	2100      	movs	r1, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff fb6e 	bl	80003b0 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fb36 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fb8c 	bl	80003fc <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f7ff fb20 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fb9b 	bl	800042c <LL_USART_IsActiveFlag_TEACK>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d0f9      	beq.n	8000cee <MX_USART2_UART_Init+0x116>
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <MX_USART2_UART_Init+0x138>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff fba9 	bl	8000454 <LL_USART_IsActiveFlag_REACK>
 8000d02:	1e03      	subs	r3, r0, #0
 8000d04:	d0f3      	beq.n	8000cee <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b00f      	add	sp, #60	; 0x3c
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40004400 	.word	0x40004400

08000d14 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_USART3_Init+0x78>)
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_USART3_Init+0x78>)
 8000d1e:	2180      	movs	r1, #128	; 0x80
 8000d20:	0309      	lsls	r1, r1, #12
 8000d22:	430a      	orrs	r2, r1
 8000d24:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d28:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <MX_USART3_Init+0x78>)
 8000d2a:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8000000;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d2e:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <MX_USART3_Init+0x80>)
 8000d30:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000d38:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d46:	2208      	movs	r2, #8
 8000d48:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	00d2      	lsls	r2, r2, #3
 8000d50:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0052      	lsls	r2, r2, #1
 8000d60:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f00a fb9b 	bl	800b4ac <HAL_USART_Init>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000d7a:	f003 feed 	bl	8004b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8000000;
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <MX_USART3_Init+0x7c>)
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <MX_USART3_Init+0x80>)
 8000d82:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40004800 	.word	0x40004800
 8000d90:	20000228 	.word	0x20000228
 8000d94:	007a1200 	.word	0x007a1200

08000d98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_DMA_Init+0x58>)
 8000da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_DMA_Init+0x58>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	639a      	str	r2, [r3, #56]	; 0x38
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_DMA_Init+0x58>)
 8000dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2100      	movs	r1, #0
 8000dba:	2009      	movs	r0, #9
 8000dbc:	f004 feb0 	bl	8005b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000dc0:	2009      	movs	r0, #9
 8000dc2:	f004 fec2 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f004 fea8 	bl	8005b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f004 feba 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	200b      	movs	r0, #11
 8000ddc:	f004 fea0 	bl	8005b20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000de0:	200b      	movs	r0, #11
 8000de2:	f004 feb2 	bl	8005b4a <HAL_NVIC_EnableIRQ>

}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	40021000 	.word	0x40021000

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	2318      	movs	r3, #24
 8000e00:	001a      	movs	r2, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	f00b fdca 	bl	800c99c <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fbc1 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000e0e:	2004      	movs	r0, #4
 8000e10:	f7ff fbbe 	bl	8000590 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fbbb 	bl	8000590 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	4aa0      	ldr	r2, [pc, #640]	; (80010a0 <MX_GPIO_Init+0x2ac>)
 8000e20:	0019      	movs	r1, r3
 8000e22:	0010      	movs	r0, r2
 8000e24:	f7ff fb86 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	01db      	lsls	r3, r3, #7
 8000e2c:	4a9c      	ldr	r2, [pc, #624]	; (80010a0 <MX_GPIO_Init+0x2ac>)
 8000e2e:	0019      	movs	r1, r3
 8000e30:	0010      	movs	r0, r2
 8000e32:	f7ff fb7f 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4a9a      	ldr	r2, [pc, #616]	; (80010a4 <MX_GPIO_Init+0x2b0>)
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	0010      	movs	r0, r2
 8000e40:	f7ff fb78 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff fb72 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000e50:	23a0      	movs	r3, #160	; 0xa0
 8000e52:	05db      	lsls	r3, r3, #23
 8000e54:	2180      	movs	r1, #128	; 0x80
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fb6c 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000e5c:	4b90      	ldr	r3, [pc, #576]	; (80010a0 <MX_GPIO_Init+0x2ac>)
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fb67 	bl	8000534 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	011a      	lsls	r2, r3, #4
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff fb6b 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	015a      	lsls	r2, r3, #5
 8000e7a:	23a0      	movs	r3, #160	; 0xa0
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fb63 	bl	800054c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	0212      	lsls	r2, r2, #8
 8000e8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2203      	movs	r2, #3
 8000e98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	4a7d      	ldr	r2, [pc, #500]	; (80010a0 <MX_GPIO_Init+0x2ac>)
 8000eaa:	0019      	movs	r1, r3
 8000eac:	0010      	movs	r0, r2
 8000eae:	f00b f9f3 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2280      	movs	r2, #128	; 0x80
 8000eb6:	01d2      	lsls	r2, r2, #7
 8000eb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <MX_GPIO_Init+0x2ac>)
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	0010      	movs	r0, r2
 8000eda:	f00b f9dd 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2201      	movs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eec:	003b      	movs	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ef8:	003b      	movs	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000efe:	003b      	movs	r3, r7
 8000f00:	4a68      	ldr	r2, [pc, #416]	; (80010a4 <MX_GPIO_Init+0x2b0>)
 8000f02:	0019      	movs	r1, r3
 8000f04:	0010      	movs	r0, r2
 8000f06:	f00b f9c7 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f10:	003b      	movs	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f16:	003b      	movs	r3, r7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	003a      	movs	r2, r7
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	05db      	lsls	r3, r3, #23
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f00b f9b7 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f30:	003b      	movs	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	003a      	movs	r2, r7
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	05db      	lsls	r3, r3, #23
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f00b f9a7 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2210      	movs	r2, #16
 8000f4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000f50:	003b      	movs	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000f56:	003b      	movs	r3, r7
 8000f58:	2201      	movs	r2, #1
 8000f5a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	003a      	movs	r2, r7
 8000f5e:	23a0      	movs	r3, #160	; 0xa0
 8000f60:	05db      	lsls	r3, r3, #23
 8000f62:	0011      	movs	r1, r2
 8000f64:	0018      	movs	r0, r3
 8000f66:	f00b f997 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f70:	003b      	movs	r3, r7
 8000f72:	2201      	movs	r2, #1
 8000f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f76:	003b      	movs	r3, r7
 8000f78:	2203      	movs	r2, #3
 8000f7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f7c:	003b      	movs	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f82:	003b      	movs	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000f88:	003a      	movs	r2, r7
 8000f8a:	23a0      	movs	r3, #160	; 0xa0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	0011      	movs	r1, r2
 8000f90:	0018      	movs	r0, r3
 8000f92:	f00b f981 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000f96:	003b      	movs	r3, r7
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f9c:	003b      	movs	r3, r7
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa8:	003b      	movs	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fae:	003b      	movs	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	003a      	movs	r2, r7
 8000fb6:	23a0      	movs	r3, #160	; 0xa0
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	0011      	movs	r1, r2
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f00b f96b 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000fc2:	003b      	movs	r3, r7
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fc8:	003b      	movs	r3, r7
 8000fca:	2201      	movs	r2, #1
 8000fcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	4a2f      	ldr	r2, [pc, #188]	; (80010a0 <MX_GPIO_Init+0x2ac>)
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	0010      	movs	r0, r2
 8000fe8:	f00b f956 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ff4:	003b      	movs	r3, r7
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	003b      	movs	r3, r7
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001000:	003b      	movs	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001006:	003b      	movs	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 800100c:	003a      	movs	r2, r7
 800100e:	23a0      	movs	r3, #160	; 0xa0
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	0011      	movs	r1, r2
 8001014:	0018      	movs	r0, r3
 8001016:	f00b f93f 	bl	800c298 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 800101a:	003b      	movs	r3, r7
 800101c:	2280      	movs	r2, #128	; 0x80
 800101e:	0152      	lsls	r2, r2, #5
 8001020:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001022:	003b      	movs	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	003b      	movs	r3, r7
 800102a:	2203      	movs	r2, #3
 800102c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800102e:	003b      	movs	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001034:	003b      	movs	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 800103a:	003a      	movs	r2, r7
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f00b f928 	bl	800c298 <LL_GPIO_Init>

  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8001048:	003b      	movs	r3, r7
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	0192      	lsls	r2, r2, #6
 800104e:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001056:	003b      	movs	r3, r7
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800105c:	003a      	movs	r2, r7
 800105e:	23a0      	movs	r3, #160	; 0xa0
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f00b f917 	bl	800c298 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 800106a:	003b      	movs	r3, r7
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	01d2      	lsls	r2, r2, #7
 8001070:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001072:	003b      	movs	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001078:	003b      	movs	r3, r7
 800107a:	2201      	movs	r2, #1
 800107c:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 800107e:	003a      	movs	r2, r7
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	05db      	lsls	r3, r3, #23
 8001084:	0011      	movs	r1, r2
 8001086:	0018      	movs	r0, r3
 8001088:	f00b f906 	bl	800c298 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff fa3f 	bl	8000514 <LL_SYSCFG_EnableFastModePlus>

}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b006      	add	sp, #24
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	50000800 	.word	0x50000800
 80010a4:	50000400 	.word	0x50000400

080010a8 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 80010ac:	4b14      	ldr	r3, [pc, #80]	; (8001100 <USART2_RX_Callback+0x58>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff fa22 	bl	80004f8 <LL_USART_ReceiveData9>
 80010b4:	0003      	movs	r3, r0
 80010b6:	001a      	movs	r2, r3
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <USART2_RX_Callback+0x5c>)
 80010ba:	801a      	strh	r2, [r3, #0]
//	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
  ByteReceived=1;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <USART2_RX_Callback+0x60>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
  if(dt1 & 0x100){
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <USART2_RX_Callback+0x5c>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	001a      	movs	r2, r3
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4013      	ands	r3, r2
 80010ce:	d00a      	beq.n	80010e6 <USART2_RX_Callback+0x3e>
	  cmd[0]=dt1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <USART2_RX_Callback+0x5c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <USART2_RX_Callback+0x64>)
 80010d8:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <USART2_RX_Callback+0x68>)
 80010dc:	2200      	movs	r2, #0
 80010de:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <USART2_RX_Callback+0x6c>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <USART2_RX_Callback+0x6c>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d104      	bne.n	80010f8 <USART2_RX_Callback+0x50>
	  cmdReceive(dt1);
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <USART2_RX_Callback+0x5c>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 f84a 	bl	800118c <cmdReceive>
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40004400 	.word	0x40004400
 8001104:	200002e6 	.word	0x200002e6
 8001108:	200002e4 	.word	0x200002e4
 800110c:	200002b4 	.word	0x200002b4
 8001110:	200002e8 	.word	0x200002e8
 8001114:	200002e5 	.word	0x200002e5

08001118 <HAL_USART_TxCpltCallback>:
//return;
//	}
}
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001120:	23a0      	movs	r3, #160	; 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	05db      	lsls	r3, r3, #23
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	438a      	bics	r2, r1
 800112e:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 8001130:	23a0      	movs	r3, #160	; 0xa0
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	695a      	ldr	r2, [r3, #20]
 8001136:	23a0      	movs	r3, #160	; 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	430a      	orrs	r2, r1
 800113e:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_USART_TxCpltCallback+0x44>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
//	while(BFEN==0){};
	GPIOC->ODR |= 1 << 6;	//set BF
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_USART_TxCpltCallback+0x48>)
 8001148:	695a      	ldr	r2, [r3, #20]
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_USART_TxCpltCallback+0x48>)
 800114c:	2140      	movs	r1, #64	; 0x40
 800114e:	430a      	orrs	r2, r1
 8001150:	615a      	str	r2, [r3, #20]
}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b002      	add	sp, #8
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	200002ea 	.word	0x200002ea
 8001160:	50000800 	.word	0x50000800

08001164 <HAL_I2S_TxHalfCpltCallback>:
	//	cmd2Execute=0;
//	GPIOC->ODR |= 1 << 6;	//set BF
}
//======================================================================================================================
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	sound_half_transfer_callback();
 800116c:	f001 fc5e 	bl	8002a2c <sound_half_transfer_callback>
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b002      	add	sp, #8
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_I2S_TxCpltCallback>:
//======================================================================================================================
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s1)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	sound_full_transfer_callback();
 8001180:	f001 fc5e 	bl	8002a40 <sound_full_transfer_callback>
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b002      	add	sp, #8
 800118a:	bd80      	pop	{r7, pc}

0800118c <cmdReceive>:
//=======================================================================================================================
	void cmdReceive (uint16_t dt1)
	{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	0002      	movs	r2, r0
 8001194:	1dbb      	adds	r3, r7, #6
 8001196:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8001198:	230f      	movs	r3, #15
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 80011a0:	46c0      	nop			; (mov r8, r8)
 80011a2:	4b39      	ldr	r3, [pc, #228]	; (8001288 <cmdReceive+0xfc>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0fb      	beq.n	80011a2 <cmdReceive+0x16>
	  ByteReceived=0;
 80011aa:	4b37      	ldr	r3, [pc, #220]	; (8001288 <cmdReceive+0xfc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <cmdReceive+0x100>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	001a      	movs	r2, r3
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b2d9      	uxtb	r1, r3
 80011bc:	4b34      	ldr	r3, [pc, #208]	; (8001290 <cmdReceive+0x104>)
 80011be:	5499      	strb	r1, [r3, r2]
//	  if(dt1==0x110){
//		  BFEN=0;
//	  }
	  ind++;
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <cmdReceive+0x100>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	4b30      	ldr	r3, [pc, #192]	; (800128c <cmdReceive+0x100>)
 80011ca:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <cmdReceive+0x100>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d04f      	beq.n	8001274 <cmdReceive+0xe8>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <cmdReceive+0x100>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	001a      	movs	r2, r3
 80011da:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <cmdReceive+0x104>)
 80011dc:	785b      	ldrb	r3, [r3, #1]
 80011de:	3301      	adds	r3, #1
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dd47      	ble.n	8001274 <cmdReceive+0xe8>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e00f      	b.n	800120e <cmdReceive+0x82>
				 inputCS+=cmd[i];
 80011ee:	210f      	movs	r1, #15
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <cmdReceive+0x104>)
 80011f6:	5cd2      	ldrb	r2, [r2, r3]
 80011f8:	4b26      	ldr	r3, [pc, #152]	; (8001294 <cmdReceive+0x108>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	18d3      	adds	r3, r2, r3
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	4b24      	ldr	r3, [pc, #144]	; (8001294 <cmdReceive+0x108>)
 8001202:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001204:	187b      	adds	r3, r7, r1
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	187b      	adds	r3, r7, r1
 800120a:	3201      	adds	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <cmdReceive+0x104>)
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	210f      	movs	r1, #15
 8001216:	187b      	adds	r3, r7, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	dae7      	bge.n	80011ee <cmdReceive+0x62>
			 }
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <cmdReceive+0x108>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d022      	beq.n	800126c <cmdReceive+0xe0>
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <cmdReceive+0x100>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	001a      	movs	r2, r3
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <cmdReceive+0x104>)
 800122e:	785b      	ldrb	r3, [r3, #1]
 8001230:	3302      	adds	r3, #2
 8001232:	429a      	cmp	r2, r3
 8001234:	d11a      	bne.n	800126c <cmdReceive+0xe0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
//				 firstByteReceived=0;
				 firstByteReceived=0;
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <cmdReceive+0x10c>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
				 				 for (i=0;i<cmd[1]+2;i++){
 800123c:	187b      	adds	r3, r7, r1
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e00a      	b.n	800125a <cmdReceive+0xce>
				 					 cmd[i]=0;
 8001244:	200f      	movs	r0, #15
 8001246:	183b      	adds	r3, r7, r0
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <cmdReceive+0x104>)
 800124c:	2100      	movs	r1, #0
 800124e:	54d1      	strb	r1, [r2, r3]
				 				 for (i=0;i<cmd[1]+2;i++){
 8001250:	183b      	adds	r3, r7, r0
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	183b      	adds	r3, r7, r0
 8001256:	3201      	adds	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <cmdReceive+0x104>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	230f      	movs	r3, #15
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	daec      	bge.n	8001244 <cmdReceive+0xb8>
			 if(!(inputCS==0x00)&&(ind==cmd[1]+2)){
 800126a:	e003      	b.n	8001274 <cmdReceive+0xe8>
				 				 }
			 }
			 else{
				 answer2CPU(cmd);
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <cmdReceive+0x104>)
 800126e:	0018      	movs	r0, r3
 8001270:	f000 fad8 	bl	8001824 <answer2CPU>
//				 GPIOC->ODR |= 1 << 6;	//set BF
//			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <cmdReceive+0x110>)
 8001276:	6a1a      	ldr	r2, [r3, #32]
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <cmdReceive+0x110>)
 800127a:	2108      	movs	r1, #8
 800127c:	430a      	orrs	r2, r1
 800127e:	621a      	str	r2, [r3, #32]
	}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	b004      	add	sp, #16
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002e4 	.word	0x200002e4
 800128c:	200002e8 	.word	0x200002e8
 8001290:	200002b4 	.word	0x200002b4
 8001294:	200002ec 	.word	0x200002ec
 8001298:	200002e5 	.word	0x200002e5
 800129c:	40004400 	.word	0x40004400

080012a0 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	0002      	movs	r2, r0
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*)&byte, 1, 10);
 80012ac:	1df9      	adds	r1, r7, #7
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <USART_AS_SPI_sendCMD+0x20>)
 80012b0:	230a      	movs	r3, #10
 80012b2:	2201      	movs	r2, #1
 80012b4:	f00a f94a 	bl	800b54c <HAL_USART_Transmit>
		}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000228 	.word	0x20000228

080012c4 <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
	}
	void weoInit(void) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80012c8:	4b4a      	ldr	r3, [pc, #296]	; (80013f4 <weoInit+0x130>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <weoInit+0x130>)
 80012ce:	2101      	movs	r1, #1
 80012d0:	438a      	bics	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <weoInit+0x130>)
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <weoInit+0x130>)
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	0309      	lsls	r1, r1, #12
 80012de:	430a      	orrs	r2, r1
 80012e0:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <weoInit+0x130>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <weoInit+0x130>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f004 f8d0 	bl	8005494 <HAL_Delay>
		HAL_Delay(1);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f004 f8cd 	bl	8005494 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012fa:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <weoInit+0x134>)
 80012fc:	2100      	movs	r1, #0
 80012fe:	0018      	movs	r0, r3
 8001300:	f009 f850 	bl	800a3a4 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001304:	2001      	movs	r0, #1
 8001306:	f004 f8c5 	bl	8005494 <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	23a0      	movs	r3, #160	; 0xa0
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	2140      	movs	r1, #64	; 0x40
 8001316:	438a      	bics	r2, r1
 8001318:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800131a:	23a0      	movs	r3, #160	; 0xa0
 800131c:	05db      	lsls	r3, r3, #23
 800131e:	695a      	ldr	r2, [r3, #20]
 8001320:	23a0      	movs	r3, #160	; 0xa0
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	438a      	bics	r2, r1
 8001328:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800132a:	20af      	movs	r0, #175	; 0xaf
 800132c:	f7ff ffb8 	bl	80012a0 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0xB6);	//Set Second precharge Period
//		USART_AS_SPI_sendCMD(0x0F);	// 0x00 - 0x0F availible default = 0x04 = 0b0100
//		USART_AS_SPI_sendCMD(0xBC);	//Set Vp
//		USART_AS_SPI_sendCMD(0x08);	// 0x05 - default

		USART_AS_SPI_sendCMD(0xB8);
 8001330:	20b8      	movs	r0, #184	; 0xb8
 8001332:	f7ff ffb5 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ffb2 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffaf 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(1);
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff ffac 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(2);
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff ffa9 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(4);
 800134e:	2004      	movs	r0, #4
 8001350:	f7ff ffa6 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(7);
 8001354:	2007      	movs	r0, #7
 8001356:	f7ff ffa3 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(11);
 800135a:	200b      	movs	r0, #11
 800135c:	f7ff ffa0 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(14);
 8001360:	200e      	movs	r0, #14
 8001362:	f7ff ff9d 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(18);
 8001366:	2012      	movs	r0, #18
 8001368:	f7ff ff9a 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(23);
 800136c:	2017      	movs	r0, #23
 800136e:	f7ff ff97 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(27);
 8001372:	201b      	movs	r0, #27
 8001374:	f7ff ff94 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(33);
 8001378:	2021      	movs	r0, #33	; 0x21
 800137a:	f7ff ff91 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(40);
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f7ff ff8e 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(49);
 8001384:	2031      	movs	r0, #49	; 0x31
 8001386:	f7ff ff8b 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(63);
 800138a:	203f      	movs	r0, #63	; 0x3f
 800138c:	f7ff ff88 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001390:	20a0      	movs	r0, #160	; 0xa0
 8001392:	f7ff ff85 	bl	80012a0 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001396:	2051      	movs	r0, #81	; 0x51
 8001398:	f7ff ff82 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800139c:	2081      	movs	r0, #129	; 0x81
 800139e:	f7ff ff7f 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 80013a2:	20ff      	movs	r0, #255	; 0xff
 80013a4:	f7ff ff7c 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 80013a8:	20a1      	movs	r0, #161	; 0xa1
 80013aa:	f7ff ff79 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff ff76 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 80013b4:	20a2      	movs	r0, #162	; 0xa2
 80013b6:	f7ff ff73 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff ff70 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 80013c0:	20a8      	movs	r0, #168	; 0xa8
 80013c2:	f7ff ff6d 	bl	80012a0 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 80013c6:	207f      	movs	r0, #127	; 0x7f
 80013c8:	f7ff ff6a 	bl	80012a0 <USART_AS_SPI_sendCMD>


//		USART_AS_SPI_sendCMD(0xFF);
//		USART_AS_SPI_sendCMD(0xFF);
		GPIOA->ODR |= 1 << 7;	//set dc
 80013cc:	23a0      	movs	r3, #160	; 0xa0
 80013ce:	05db      	lsls	r3, r3, #23
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	430a      	orrs	r2, r1
 80013da:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 80013dc:	23a0      	movs	r3, #160	; 0xa0
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	23a0      	movs	r3, #160	; 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	2140      	movs	r1, #64	; 0x40
 80013e8:	430a      	orrs	r2, r1
 80013ea:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80013ec:	46c0      	nop			; (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40004800 	.word	0x40004800
 80013f8:	200001dc 	.word	0x200001dc

080013fc <weoClear>:
	void weoClear(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
		uint16_t i;

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001402:	23a0      	movs	r3, #160	; 0xa0
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	23a0      	movs	r3, #160	; 0xa0
 800140a:	05db      	lsls	r3, r3, #23
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	438a      	bics	r2, r1
 8001410:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001412:	23a0      	movs	r3, #160	; 0xa0
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	23a0      	movs	r3, #160	; 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	438a      	bics	r2, r1
 8001420:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001422:	2075      	movs	r0, #117	; 0x75
 8001424:	f7ff ff3c 	bl	80012a0 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff ff39 	bl	80012a0 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 800142e:	207f      	movs	r0, #127	; 0x7f
 8001430:	f7ff ff36 	bl	80012a0 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 8001434:	2015      	movs	r0, #21
 8001436:	f7ff ff33 	bl	80012a0 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff ff30 	bl	80012a0 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 8001440:	207f      	movs	r0, #127	; 0x7f
 8001442:	f7ff ff2d 	bl	80012a0 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001446:	23a0      	movs	r3, #160	; 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	23a0      	movs	r3, #160	; 0xa0
 800144e:	05db      	lsls	r3, r3, #23
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	438a      	bics	r2, r1
 8001454:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001456:	23a0      	movs	r3, #160	; 0xa0
 8001458:	05db      	lsls	r3, r3, #23
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	430a      	orrs	r2, r1
 8001464:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001466:	1dbb      	adds	r3, r7, #6
 8001468:	2200      	movs	r2, #0
 800146a:	801a      	strh	r2, [r3, #0]
 800146c:	e00d      	b.n	800148a <weoClear+0x8e>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <weoClear+0xc0>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	4013      	ands	r3, r2
 8001478:	d0fa      	beq.n	8001470 <weoClear+0x74>
						USART3->TDR = (uint8_t) 0x00;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <weoClear+0xc0>)
 800147c:	2200      	movs	r2, #0
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8193;i++) {	//fullScreen + small reserve
 8001480:	1dbb      	adds	r3, r7, #6
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	1dbb      	adds	r3, r7, #6
 8001486:	3201      	adds	r2, #1
 8001488:	801a      	strh	r2, [r3, #0]
 800148a:	1dbb      	adds	r3, r7, #6
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <weoClear+0xc4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d9ec      	bls.n	800146e <weoClear+0x72>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	23a0      	movs	r3, #160	; 0xa0
 800149c:	05db      	lsls	r3, r3, #23
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	438a      	bics	r2, r1
 80014a2:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 80014a4:	23a0      	movs	r3, #160	; 0xa0
 80014a6:	05db      	lsls	r3, r3, #23
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	2140      	movs	r1, #64	; 0x40
 80014b0:	430a      	orrs	r2, r1
 80014b2:	615a      	str	r2, [r3, #20]
	}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40004800 	.word	0x40004800
 80014c0:	00002001 	.word	0x00002001

080014c4 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char contrast,
				uint8_t MEM_Buffer[]) {
 80014c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	0005      	movs	r5, r0
 80014cc:	000c      	movs	r4, r1
 80014ce:	0010      	movs	r0, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	1c2a      	adds	r2, r5, #0
 80014d6:	701a      	strb	r2, [r3, #0]
 80014d8:	1dbb      	adds	r3, r7, #6
 80014da:	1c22      	adds	r2, r4, #0
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	1d7b      	adds	r3, r7, #5
 80014e0:	1c02      	adds	r2, r0, #0
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	1c0a      	adds	r2, r1, #0
 80014e8:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 80014ea:	240e      	movs	r4, #14
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	2200      	movs	r2, #0
 80014f0:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	da00      	bge.n	80014fe <weoDrawRectangleFilled+0x3a>
 80014fc:	e0c2      	b.n	8001684 <weoDrawRectangleFilled+0x1c0>
 80014fe:	1dbb      	adds	r3, r7, #6
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <weoDrawRectangleFilled+0x46>
 8001508:	e0bc      	b.n	8001684 <weoDrawRectangleFilled+0x1c0>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 800150a:	1d7b      	adds	r3, r7, #5
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	da00      	bge.n	8001516 <weoDrawRectangleFilled+0x52>
 8001514:	e0b6      	b.n	8001684 <weoDrawRectangleFilled+0x1c0>
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25b      	sxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	da00      	bge.n	8001522 <weoDrawRectangleFilled+0x5e>
 8001520:	e0b0      	b.n	8001684 <weoDrawRectangleFilled+0x1c0>
				return;
			}

			start_x_New=start_x;
 8001522:	250d      	movs	r5, #13
 8001524:	197b      	adds	r3, r7, r5
 8001526:	1dfa      	adds	r2, r7, #7
 8001528:	7812      	ldrb	r2, [r2, #0]
 800152a:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 800152c:	260c      	movs	r6, #12
 800152e:	19bb      	adds	r3, r7, r6
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	217f      	movs	r1, #127	; 0x7f
 8001536:	1a8a      	subs	r2, r1, r2
 8001538:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800153a:	230b      	movs	r3, #11
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	1d7a      	adds	r2, r7, #5
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001544:	220a      	movs	r2, #10
 8001546:	18bb      	adds	r3, r7, r2
 8001548:	1dba      	adds	r2, r7, #6
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	217f      	movs	r1, #127	; 0x7f
 800154e:	1a8a      	subs	r2, r1, r2
 8001550:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001552:	23a0      	movs	r3, #160	; 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	23a0      	movs	r3, #160	; 0xa0
 800155a:	05db      	lsls	r3, r3, #23
 800155c:	2140      	movs	r1, #64	; 0x40
 800155e:	438a      	bics	r2, r1
 8001560:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001562:	23a0      	movs	r3, #160	; 0xa0
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	438a      	bics	r2, r1
 8001570:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001572:	2075      	movs	r0, #117	; 0x75
 8001574:	f7ff fe94 	bl	80012a0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001578:	197b      	adds	r3, r7, r5
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff fe8f 	bl	80012a0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001582:	230b      	movs	r3, #11
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fe89 	bl	80012a0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800158e:	2015      	movs	r0, #21
 8001590:	f7ff fe86 	bl	80012a0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001594:	19bb      	adds	r3, r7, r6
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	085b      	lsrs	r3, r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff fe7f 	bl	80012a0 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 80015a2:	220a      	movs	r2, #10
 80015a4:	18bb      	adds	r3, r7, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff fe77 	bl	80012a0 <USART_AS_SPI_sendCMD>
//					USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//					USART_AS_SPI_sendCMD(contrast);
			GPIOA->ODR |= 1 << 7;	//set dc
 80015b2:	23a0      	movs	r3, #160	; 0xa0
 80015b4:	05db      	lsls	r3, r3, #23
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	23a0      	movs	r3, #160	; 0xa0
 80015ba:	05db      	lsls	r3, r3, #23
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	430a      	orrs	r2, r1
 80015c0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80015c2:	23a0      	movs	r3, #160	; 0xa0
 80015c4:	05db      	lsls	r3, r3, #23
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	23a0      	movs	r3, #160	; 0xa0
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	2140      	movs	r1, #64	; 0x40
 80015ce:	430a      	orrs	r2, r1
 80015d0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015d2:	23a0      	movs	r3, #160	; 0xa0
 80015d4:	05db      	lsls	r3, r3, #23
 80015d6:	695a      	ldr	r2, [r3, #20]
 80015d8:	23a0      	movs	r3, #160	; 0xa0
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	2140      	movs	r1, #64	; 0x40
 80015de:	438a      	bics	r2, r1
 80015e0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80015e2:	23a0      	movs	r3, #160	; 0xa0
 80015e4:	05db      	lsls	r3, r3, #23
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	23a0      	movs	r3, #160	; 0xa0
 80015ea:	05db      	lsls	r3, r3, #23
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	2200      	movs	r2, #0
 80015f6:	801a      	strh	r2, [r3, #0]
 80015f8:	e012      	b.n	8001620 <weoDrawRectangleFilled+0x15c>
//			for (i = 0; i < len;i++) {
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	4b23      	ldr	r3, [pc, #140]	; (800168c <weoDrawRectangleFilled+0x1c8>)
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2280      	movs	r2, #128	; 0x80
 8001602:	4013      	ands	r3, r2
 8001604:	d0fa      	beq.n	80015fc <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 8001606:	210e      	movs	r1, #14
 8001608:	187b      	adds	r3, r7, r1
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160e:	18d3      	adds	r3, r2, r3
 8001610:	781a      	ldrb	r2, [r3, #0]
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <weoDrawRectangleFilled+0x1c8>)
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New - start_x_New + 1) * (end_y_New/2 - start_y_New /2 + 1)+1);i++) {
 8001616:	187b      	adds	r3, r7, r1
 8001618:	881a      	ldrh	r2, [r3, #0]
 800161a:	187b      	adds	r3, r7, r1
 800161c:	3201      	adds	r2, #1
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	230b      	movs	r3, #11
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	781a      	ldrb	r2, [r3, #0]
 8001626:	230d      	movs	r3, #13
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	3301      	adds	r3, #1
 8001630:	220a      	movs	r2, #10
 8001632:	18ba      	adds	r2, r7, r2
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	0852      	lsrs	r2, r2, #1
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	0011      	movs	r1, r2
 800163c:	220c      	movs	r2, #12
 800163e:	18ba      	adds	r2, r7, r2
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0852      	lsrs	r2, r2, #1
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	1a8a      	subs	r2, r1, r2
 8001648:	3201      	adds	r2, #1
 800164a:	435a      	muls	r2, r3
 800164c:	230e      	movs	r3, #14
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	dad1      	bge.n	80015fa <weoDrawRectangleFilled+0x136>
			}
			while(!(USART3->ISR & USART_ISR_TXE)){};
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <weoDrawRectangleFilled+0x1c8>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	4013      	ands	r3, r2
 8001660:	d0fa      	beq.n	8001658 <weoDrawRectangleFilled+0x194>
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001662:	23a0      	movs	r3, #160	; 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	438a      	bics	r2, r1
 8001670:	615a      	str	r2, [r3, #20]
//			USART_AS_SPI_sendCMD(0xBB);	// command for NOP
//			USART_AS_SPI_sendCMD(0x81);	//Contrast Level
//			USART_AS_SPI_sendCMD(0xFF);
//			HAL_Delay(1);
//			GPIOA->ODR &= ~(1 << 7);	//reset dc
			GPIOA->ODR |= 1 << 6;	//set cs
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	2140      	movs	r1, #64	; 0x40
 800167e:	430a      	orrs	r2, r1
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	e000      	b.n	8001686 <weoDrawRectangleFilled+0x1c2>
				return;
 8001684:	46c0      	nop			; (mov r8, r8)
		}
 8001686:	46bd      	mov	sp, r7
 8001688:	b005      	add	sp, #20
 800168a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168c:	40004800 	.word	0x40004800

08001690 <I2C_SOUND_ChangePage>:
//		LL_GPIO_ResetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
//		LL_GPIO_SetOutputPin(GPIOC, DISP_RES_Pin);
		HAL_Delay(1);
	}
	void I2C_SOUND_ChangePage(uint8_t pageNum) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af02      	add	r7, sp, #8
 8001696:	0002      	movs	r2, r0
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { 0x00, pageNum };
 800169c:	210c      	movs	r1, #12
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	1dfa      	adds	r2, r7, #7
 80016a8:	7812      	ldrb	r2, [r2, #0]
 80016aa:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);
 80016ac:	187a      	adds	r2, r7, r1
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <I2C_SOUND_ChangePage+0x38>)
 80016b0:	23fa      	movs	r3, #250	; 0xfa
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2302      	movs	r3, #2
 80016b8:	2130      	movs	r1, #48	; 0x30
 80016ba:	f004 ff25 	bl	8006508 <HAL_I2C_Master_Transmit>
	}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b004      	add	sp, #16
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	2000008c 	.word	0x2000008c

080016cc <WriteReg_I2C_SOUND>:
	void WriteReg_I2C_SOUND(uint8_t reg, uint8_t data) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	0002      	movs	r2, r0
 80016d4:	1dfb      	adds	r3, r7, #7
 80016d6:	701a      	strb	r2, [r3, #0]
 80016d8:	1dbb      	adds	r3, r7, #6
 80016da:	1c0a      	adds	r2, r1, #0
 80016dc:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 80016de:	210c      	movs	r1, #12
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	1dfa      	adds	r2, r7, #7
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	1dba      	adds	r2, r7, #6
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x30, buf, 2, 1000);	//(uint8_t*)&
 80016f0:	187a      	adds	r2, r7, r1
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <WriteReg_I2C_SOUND+0x40>)
 80016f4:	23fa      	movs	r3, #250	; 0xfa
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2302      	movs	r3, #2
 80016fc:	2130      	movs	r1, #48	; 0x30
 80016fe:	f004 ff03 	bl	8006508 <HAL_I2C_Master_Transmit>
	}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	2000008c 	.word	0x2000008c

08001710 <soundSetup>:
	void soundSetup(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
		I2C_SOUND_ChangePage(0x00);
 8001714:	2000      	movs	r0, #0
 8001716:	f7ff ffbb 	bl	8001690 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x01);	//Assert Software reset (P0, R1, D0=1)
 800171a:	2101      	movs	r1, #1
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff ffd5 	bl	80016cc <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 8001722:	2001      	movs	r0, #1
 8001724:	f7ff ffb4 	bl	8001690 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x02, 0x00);	//LDO output programmed as 1.8V and Level shifters powered up. (P1, R2, D5-D4=00, D3=0)
 8001728:	2100      	movs	r1, #0
 800172a:	2002      	movs	r0, #2
 800172c:	f7ff ffce 	bl	80016cc <WriteReg_I2C_SOUND>
		HAL_Delay(15);
 8001730:	200f      	movs	r0, #15
 8001732:	f003 feaf 	bl	8005494 <HAL_Delay>
		I2C_SOUND_ChangePage(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff ffaa 	bl	8001690 <I2C_SOUND_ChangePage>
	WriteReg_I2C_SOUND(0x04,0x03);//PLL_clkin = MCLK, codec_clkin = PLL_CLK, MCLK should be 11.2896MHz
 800173c:	2103      	movs	r1, #3
 800173e:	2004      	movs	r0, #4
 8001740:	f7ff ffc4 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x05,0x91);//Power up PLL, set P=1, R=1
 8001744:	2191      	movs	r1, #145	; 0x91
 8001746:	2005      	movs	r0, #5
 8001748:	f7ff ffc0 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x06,0x04);//Set J = 4
 800174c:	2104      	movs	r1, #4
 800174e:	2006      	movs	r0, #6
 8001750:	f7ff ffbc 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x07,0x00);//SET D=0000
 8001754:	2100      	movs	r1, #0
 8001756:	2007      	movs	r0, #7
 8001758:	f7ff ffb8 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x08,0x00);//SET D=0000
 800175c:	2100      	movs	r1, #0
 800175e:	2008      	movs	r0, #8
 8001760:	f7ff ffb4 	bl	80016cc <WriteReg_I2C_SOUND>
	HAL_Delay(15);
 8001764:	200f      	movs	r0, #15
 8001766:	f003 fe95 	bl	8005494 <HAL_Delay>
	WriteReg_I2C_SOUND(0x0B,0x84);//DAC NDAC Powered up, set NDAC = 4
 800176a:	2184      	movs	r1, #132	; 0x84
 800176c:	200b      	movs	r0, #11
 800176e:	f7ff ffad 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0C,0x82);//DAC MDAC Powered up, set MDAC = 2
 8001772:	2182      	movs	r1, #130	; 0x82
 8001774:	200c      	movs	r0, #12
 8001776:	f7ff ffa9 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0D,0x00);//DAC OSR(9:0)-> DOSR=128
 800177a:	2100      	movs	r1, #0
 800177c:	200d      	movs	r0, #13
 800177e:	f7ff ffa5 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x0E,0x80);//DAC OSR(9:0)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	200e      	movs	r0, #14
 8001786:	f7ff ffa1 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x1B, 0x00);	//Codec Interface control Word length = 16bits, BCLK&WCLK inputs, I2S mode. (P0, R27, D7-D6=00, D5-D4=00, D3-D2=00)
 800178a:	2100      	movs	r1, #0
 800178c:	201b      	movs	r0, #27
 800178e:	f7ff ff9d 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x1C,0x00);//Data slot offset
 8001792:	2100      	movs	r1, #0
 8001794:	201c      	movs	r0, #28
 8001796:	f7ff ff99 	bl	80016cc <WriteReg_I2C_SOUND>
	WriteReg_I2C_SOUND(0x3c,0x02);//Dac Instruction programming PRB #2 for Mono routing. Type interpolation (x8) and 3 programmable	Biquads. (P0, R60, D4-D0=0010)
 800179a:	2102      	movs	r1, #2
 800179c:	203c      	movs	r0, #60	; 0x3c
 800179e:	f7ff ff95 	bl	80016cc <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x01);
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7ff ff74 	bl	8001690 <I2C_SOUND_ChangePage>
		WriteReg_I2C_SOUND(0x01, 0x10);	//Master Reference Powered on (P1, R1, D4=1)
 80017a8:	2110      	movs	r1, #16
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff ff8e 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x0A, 0x00);	//Output common mode for DAC set to 0.9V (default) (P1, R10)
 80017b0:	2100      	movs	r1, #0
 80017b2:	200a      	movs	r0, #10
 80017b4:	f7ff ff8a 	bl	80016cc <WriteReg_I2C_SOUND>
		////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x0C, 0x00);	// No analog routing to headphone//0x0c,0x15 by SB
 80017b8:	2100      	movs	r1, #0
 80017ba:	200c      	movs	r0, #12
 80017bc:	f7ff ff86 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x16, 0x00);	// Headphone volume=0//0x16,0x75 by SB
 80017c0:	2100      	movs	r1, #0
 80017c2:	2016      	movs	r0, #22
 80017c4:	f7ff ff82 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x18, 0x00);	//No need to enable Mixer M and Mixer P, AINL Voulme, 0dB Gain 0x18,0x75 by SB
 80017c8:	2100      	movs	r1, #0
 80017ca:	2018      	movs	r0, #24
 80017cc:	f7ff ff7e 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x19, 0x00);	//No need to enable Mixer M and Mixer P, AINR Voulme, 0dB Gain 0x19,0x75 by SB
 80017d0:	2100      	movs	r1, #0
 80017d2:	2019      	movs	r0, #25
 80017d4:	f7ff ff7a 	bl	80016cc <WriteReg_I2C_SOUND>
		//////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x09, 0x00);	//AINL,AINR are powered down
 80017d8:	2100      	movs	r1, #0
 80017da:	2009      	movs	r0, #9
 80017dc:	f7ff ff76 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 80017e0:	2100      	movs	r1, #0
 80017e2:	2010      	movs	r0, #16
 80017e4:	f7ff ff72 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2E, 0x00);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000)
 80017e8:	2100      	movs	r1, #0
 80017ea:	202e      	movs	r0, #46	; 0x2e
 80017ec:	f7ff ff6e 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x30, 0x10);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001)
 80017f0:	2110      	movs	r1, #16
 80017f2:	2030      	movs	r0, #48	; 0x30
 80017f4:	f7ff ff6a 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x2D, 0x02);	//SPK powered up (P1, R45, D1=1)
 80017f8:	2102      	movs	r1, #2
 80017fa:	202d      	movs	r0, #45	; 0x2d
 80017fc:	f7ff ff66 	bl	80016cc <WriteReg_I2C_SOUND>
		I2C_SOUND_ChangePage(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff ff45 	bl	8001690 <I2C_SOUND_ChangePage>
		//////////////////////////////////////////////////////////////////////////
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
 8001806:	2190      	movs	r1, #144	; 0x90
 8001808:	203f      	movs	r0, #63	; 0x3f
 800180a:	f7ff ff5f 	bl	80016cc <WriteReg_I2C_SOUND>
		// 1<<7|1<<4|2 by SB
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 800180e:	2100      	movs	r1, #0
 8001810:	2041      	movs	r0, #65	; 0x41
 8001812:	f7ff ff5b 	bl	80016cc <WriteReg_I2C_SOUND>
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1) 1<<4 by SB
 8001816:	2104      	movs	r1, #4
 8001818:	2040      	movs	r0, #64	; 0x40
 800181a:	f7ff ff57 	bl	80016cc <WriteReg_I2C_SOUND>
	}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <answer2CPU>:
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 800182c:	230f      	movs	r3, #15
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001834:	230d      	movs	r3, #13
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		isReceiverDisabled=1;
 800183c:	4bd2      	ldr	r3, [pc, #840]	; (8001b88 <answer2CPU+0x364>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]

		cmd2Execute=0;
 8001842:	4bd2      	ldr	r3, [pc, #840]	; (8001b8c <answer2CPU+0x368>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
		cmd[0]&=~0x100;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	781a      	ldrb	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x13)||(cmd[0] == 0x15)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b11      	cmp	r3, #17
 8001856:	d00b      	beq.n	8001870 <answer2CPU+0x4c>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b12      	cmp	r3, #18
 800185e:	d007      	beq.n	8001870 <answer2CPU+0x4c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b13      	cmp	r3, #19
 8001866:	d003      	beq.n	8001870 <answer2CPU+0x4c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b15      	cmp	r3, #21
 800186e:	d105      	bne.n	800187c <answer2CPU+0x58>
 8001870:	4bc7      	ldr	r3, [pc, #796]	; (8001b90 <answer2CPU+0x36c>)
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4bc6      	ldr	r3, [pc, #792]	; (8001b90 <answer2CPU+0x36c>)
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	438a      	bics	r2, r1
 800187a:	615a      	str	r2, [r3, #20]
		if (cmd[0] == 0x11) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b11      	cmp	r3, #17
 8001882:	d105      	bne.n	8001890 <answer2CPU+0x6c>
//			GPIOC->ODR &= ~(1 << 6);
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8001884:	4bc2      	ldr	r3, [pc, #776]	; (8001b90 <answer2CPU+0x36c>)
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	4bc1      	ldr	r3, [pc, #772]	; (8001b90 <answer2CPU+0x36c>)
 800188a:	2140      	movs	r1, #64	; 0x40
 800188c:	438a      	bics	r2, r1
 800188e:	615a      	str	r2, [r3, #20]
		}//reset BF
		ans[0] = cmd[0]|0x80;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	4252      	negs	r2, r2
 8001898:	4313      	orrs	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	b29a      	uxth	r2, r3
 800189e:	4bbd      	ldr	r3, [pc, #756]	; (8001b94 <answer2CPU+0x370>)
 80018a0:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d800      	bhi.n	80018ac <answer2CPU+0x88>
 80018aa:	e157      	b.n	8001b5c <answer2CPU+0x338>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b15      	cmp	r3, #21
 80018b2:	d900      	bls.n	80018b6 <answer2CPU+0x92>
 80018b4:	e152      	b.n	8001b5c <answer2CPU+0x338>
//		if (cmd[0] != 0x10) {
//			GPIOC->ODR &= ~(1 << 6);
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80018b6:	23a0      	movs	r3, #160	; 0xa0
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2210      	movs	r2, #16
 80018be:	4013      	ands	r3, r2
 80018c0:	d106      	bne.n	80018d0 <answer2CPU+0xac>
					keyboard &= 0b11111110;
 80018c2:	220f      	movs	r2, #15
 80018c4:	18bb      	adds	r3, r7, r2
 80018c6:	18ba      	adds	r2, r7, r2
 80018c8:	7812      	ldrb	r2, [r2, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80018d0:	23a0      	movs	r3, #160	; 0xa0
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d106      	bne.n	80018ea <answer2CPU+0xc6>
					keyboard &= 0b11111101;
 80018dc:	220f      	movs	r2, #15
 80018de:	18bb      	adds	r3, r7, r2
 80018e0:	18ba      	adds	r2, r7, r2
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	2102      	movs	r1, #2
 80018e6:	438a      	bics	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80018ea:	23a0      	movs	r3, #160	; 0xa0
 80018ec:	05db      	lsls	r3, r3, #23
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	d106      	bne.n	8001904 <answer2CPU+0xe0>
					keyboard &= 0b11111011;
 80018f6:	220f      	movs	r2, #15
 80018f8:	18bb      	adds	r3, r7, r2
 80018fa:	18ba      	adds	r2, r7, r2
 80018fc:	7812      	ldrb	r2, [r2, #0]
 80018fe:	2104      	movs	r1, #4
 8001900:	438a      	bics	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 8001904:	23a0      	movs	r3, #160	; 0xa0
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	4013      	ands	r3, r2
 8001910:	d106      	bne.n	8001920 <answer2CPU+0xfc>
					keyboard &= 0b11110111;
 8001912:	220f      	movs	r2, #15
 8001914:	18bb      	adds	r3, r7, r2
 8001916:	18ba      	adds	r2, r7, r2
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	2108      	movs	r1, #8
 800191c:	438a      	bics	r2, r1
 800191e:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001920:	23a0      	movs	r3, #160	; 0xa0
 8001922:	05db      	lsls	r3, r3, #23
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4013      	ands	r3, r2
 800192c:	d106      	bne.n	800193c <answer2CPU+0x118>
					keyboard &= 0b11101111;
 800192e:	220f      	movs	r2, #15
 8001930:	18bb      	adds	r3, r7, r2
 8001932:	18ba      	adds	r2, r7, r2
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	2110      	movs	r1, #16
 8001938:	438a      	bics	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 800193c:	210f      	movs	r1, #15
 800193e:	187b      	adds	r3, r7, r1
 8001940:	187a      	adds	r2, r7, r1
 8001942:	7812      	ldrb	r2, [r2, #0]
 8001944:	43d2      	mvns	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001948:	200c      	movs	r0, #12
 800194a:	183b      	adds	r3, r7, r0
 800194c:	2204      	movs	r2, #4
 800194e:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001950:	183b      	adds	r3, r7, r0
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	3b02      	subs	r3, #2
 8001958:	b29a      	uxth	r2, r3
 800195a:	4b8e      	ldr	r3, [pc, #568]	; (8001b94 <answer2CPU+0x370>)
 800195c:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 800195e:	187b      	adds	r3, r7, r1
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b8b      	ldr	r3, [pc, #556]	; (8001b94 <answer2CPU+0x370>)
 8001966:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001968:	230e      	movs	r3, #14
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e011      	b.n	8001996 <answer2CPU+0x172>
					myCS = myCS + ans[i];
 8001972:	200e      	movs	r0, #14
 8001974:	183b      	adds	r3, r7, r0
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	4b86      	ldr	r3, [pc, #536]	; (8001b94 <answer2CPU+0x370>)
 800197a:	0052      	lsls	r2, r2, #1
 800197c:	5ad3      	ldrh	r3, [r2, r3]
 800197e:	b2d9      	uxtb	r1, r3
 8001980:	220d      	movs	r2, #13
 8001982:	18bb      	adds	r3, r7, r2
 8001984:	18ba      	adds	r2, r7, r2
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	188a      	adds	r2, r1, r2
 800198a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 800198c:	183b      	adds	r3, r7, r0
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	183b      	adds	r3, r7, r0
 8001992:	3201      	adds	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	200e      	movs	r0, #14
 8001998:	183b      	adds	r3, r7, r0
 800199a:	781a      	ldrb	r2, [r3, #0]
 800199c:	230c      	movs	r3, #12
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbe4      	blt.n	8001972 <answer2CPU+0x14e>
				}
				myCS = 0 - myCS;
 80019a8:	210d      	movs	r1, #13
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	187a      	adds	r2, r7, r1
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	4252      	negs	r2, r2
 80019b2:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <answer2CPU+0x370>)
 80019bc:	80da      	strh	r2, [r3, #6]
				i=0;
 80019be:	183b      	adds	r3, r7, r0
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================

				while(!(USART2->ISR & USART_ISR_TXE)){};
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	4b74      	ldr	r3, [pc, #464]	; (8001b98 <answer2CPU+0x374>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	4013      	ands	r3, r2
 80019ce:	d0fa      	beq.n	80019c6 <answer2CPU+0x1a2>
				USART2->TDR = ans[0]|0x0100;
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <answer2CPU+0x370>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0052      	lsls	r2, r2, #1
 80019d8:	4313      	orrs	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	4b6e      	ldr	r3, [pc, #440]	; (8001b98 <answer2CPU+0x374>)
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80019e0:	230e      	movs	r3, #14
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e013      	b.n	8001a12 <answer2CPU+0x1ee>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	4b6a      	ldr	r3, [pc, #424]	; (8001b98 <answer2CPU+0x374>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	4013      	ands	r3, r2
 80019f4:	d0fa      	beq.n	80019ec <answer2CPU+0x1c8>
				    USART2->TDR = (uint8_t)ans[i];
 80019f6:	210e      	movs	r1, #14
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <answer2CPU+0x370>)
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	5ad3      	ldrh	r3, [r2, r3]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b64      	ldr	r3, [pc, #400]	; (8001b98 <answer2CPU+0x374>)
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	3201      	adds	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
 8001a12:	230e      	movs	r3, #14
 8001a14:	18fa      	adds	r2, r7, r3
 8001a16:	230c      	movs	r3, #12
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	7812      	ldrb	r2, [r2, #0]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e3      	bcc.n	80019ea <answer2CPU+0x1c6>
				  }
//				HAL_Delay(1);
				USART2->CR1 |= USART_CR1_RE;
 8001a22:	4b5d      	ldr	r3, [pc, #372]	; (8001b98 <answer2CPU+0x374>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <answer2CPU+0x374>)
 8001a28:	2104      	movs	r1, #4
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
				isReceiverDisabled=0;
 8001a2e:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <answer2CPU+0x364>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
//				BFEN=1;
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b11      	cmp	r3, #17
 8001a3a:	d109      	bne.n	8001a50 <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	789a      	ldrb	r2, [r3, #2]
 8001a40:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <answer2CPU+0x378>)
 8001a42:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 8001a44:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <answer2CPU+0x368>)
 8001a46:	2211      	movs	r2, #17
 8001a48:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a4a:	4b55      	ldr	r3, [pc, #340]	; (8001ba0 <answer2CPU+0x37c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d115      	bne.n	8001a84 <answer2CPU+0x260>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	001a      	movs	r2, r3
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <answer2CPU+0x380>)
 8001a62:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3303      	adds	r3, #3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	4b4e      	ldr	r3, [pc, #312]	; (8001ba8 <answer2CPU+0x384>)
 8001a6e:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	791a      	ldrb	r2, [r3, #4]
 8001a74:	4b49      	ldr	r3, [pc, #292]	; (8001b9c <answer2CPU+0x378>)
 8001a76:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001a78:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <answer2CPU+0x368>)
 8001a7a:	2212      	movs	r2, #18
 8001a7c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001a7e:	4b48      	ldr	r3, [pc, #288]	; (8001ba0 <answer2CPU+0x37c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b13      	cmp	r3, #19
 8001a8a:	d140      	bne.n	8001b0e <answer2CPU+0x2ea>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	001a      	movs	r2, r3
 8001a94:	4b43      	ldr	r3, [pc, #268]	; (8001ba4 <answer2CPU+0x380>)
 8001a96:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	001a      	movs	r2, r3
 8001aa0:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <answer2CPU+0x384>)
 8001aa2:	601a      	str	r2, [r3, #0]
					fontInfo= cmd[4];
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	791a      	ldrb	r2, [r3, #4]
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <answer2CPU+0x388>)
 8001aaa:	701a      	strb	r2, [r3, #0]
					color=fontInfo|0xF0;
 8001aac:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <answer2CPU+0x388>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	4252      	negs	r2, r2
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <answer2CPU+0x38c>)
 8001aba:	701a      	strb	r2, [r3, #0]
					strLen = cmd[1] - 0x04;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <answer2CPU+0x390>)
 8001ac8:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 8001aca:	230e      	movs	r3, #14
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e00f      	b.n	8001af4 <answer2CPU+0x2d0>
					dataASCII[i] = cmd[i+5];
 8001ad4:	200e      	movs	r0, #14
 8001ad6:	183b      	adds	r3, r7, r0
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	3305      	adds	r3, #5
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	18d2      	adds	r2, r2, r3
 8001ae0:	183b      	adds	r3, r7, r0
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	7811      	ldrb	r1, [r2, #0]
 8001ae6:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <answer2CPU+0x394>)
 8001ae8:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	183b      	adds	r3, r7, r0
 8001af0:	3201      	adds	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <answer2CPU+0x390>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	220e      	movs	r2, #14
 8001afa:	18ba      	adds	r2, r7, r2
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3e8      	bcc.n	8001ad4 <answer2CPU+0x2b0>
				}
					cmd2Execute=0x13;
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <answer2CPU+0x368>)
 8001b04:	2213      	movs	r2, #19
 8001b06:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <answer2CPU+0x37c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b14      	cmp	r3, #20
 8001b14:	d109      	bne.n	8001b2a <answer2CPU+0x306>
					numSound = cmd[2];
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	789a      	ldrb	r2, [r3, #2]
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <answer2CPU+0x398>)
 8001b1c:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <answer2CPU+0x368>)
 8001b20:	2214      	movs	r2, #20
 8001b22:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <answer2CPU+0x37c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b15      	cmp	r3, #21
 8001b30:	d10d      	bne.n	8001b4e <answer2CPU+0x32a>
					volume = cmd[2];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	789a      	ldrb	r2, [r3, #2]
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <answer2CPU+0x39c>)
 8001b38:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	78da      	ldrb	r2, [r3, #3]
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <answer2CPU+0x3a0>)
 8001b40:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <answer2CPU+0x368>)
 8001b44:	2215      	movs	r2, #21
 8001b46:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <answer2CPU+0x37c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b16      	cmp	r3, #22
 8001b54:	d102      	bne.n	8001b5c <answer2CPU+0x338>
//					volume = cmd[3];
//					contrast = cmd[4];
//					cmd2Execute=0x16;
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <answer2CPU+0x37c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d000      	beq.n	8001b66 <answer2CPU+0x342>
 8001b64:	e0a0      	b.n	8001ca8 <answer2CPU+0x484>
				myLength = 0x14; //20 bytes length answer
 8001b66:	210c      	movs	r1, #12
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	2214      	movs	r2, #20
 8001b6c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001b6e:	187b      	adds	r3, r7, r1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b02      	subs	r3, #2
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <answer2CPU+0x370>)
 8001b7a:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001b7c:	230e      	movs	r3, #14
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
 8001b84:	e031      	b.n	8001bea <answer2CPU+0x3c6>
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000288 	.word	0x20000288
 8001b8c:	200002ea 	.word	0x200002ea
 8001b90:	50000800 	.word	0x50000800
 8001b94:	200002d0 	.word	0x200002d0
 8001b98:	40004400 	.word	0x40004400
 8001b9c:	20000289 	.word	0x20000289
 8001ba0:	200002eb 	.word	0x200002eb
 8001ba4:	20000290 	.word	0x20000290
 8001ba8:	20000294 	.word	0x20000294
 8001bac:	200002f1 	.word	0x200002f1
 8001bb0:	200002f2 	.word	0x200002f2
 8001bb4:	2000028e 	.word	0x2000028e
 8001bb8:	2000029c 	.word	0x2000029c
 8001bbc:	2000028a 	.word	0x2000028a
 8001bc0:	2000028b 	.word	0x2000028b
 8001bc4:	2000028c 	.word	0x2000028c
					ans[i + 2] = PCB_type[i];
 8001bc8:	200e      	movs	r0, #14
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4acb      	ldr	r2, [pc, #812]	; (8001efc <answer2CPU+0x6d8>)
 8001bd0:	5cd1      	ldrb	r1, [r2, r3]
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	1c9a      	adds	r2, r3, #2
 8001bd8:	b289      	uxth	r1, r1
 8001bda:	4bc9      	ldr	r3, [pc, #804]	; (8001f00 <answer2CPU+0x6dc>)
 8001bdc:	0052      	lsls	r2, r2, #1
 8001bde:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001be0:	183b      	adds	r3, r7, r0
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	183b      	adds	r3, r7, r0
 8001be6:	3201      	adds	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	220e      	movs	r2, #14
 8001bec:	18bb      	adds	r3, r7, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d9e9      	bls.n	8001bc8 <answer2CPU+0x3a4>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001bf4:	18bb      	adds	r3, r7, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e011      	b.n	8001c20 <answer2CPU+0x3fc>
					myCS = myCS + ans[i];
 8001bfc:	200e      	movs	r0, #14
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4bbf      	ldr	r3, [pc, #764]	; (8001f00 <answer2CPU+0x6dc>)
 8001c04:	0052      	lsls	r2, r2, #1
 8001c06:	5ad3      	ldrh	r3, [r2, r3]
 8001c08:	b2d9      	uxtb	r1, r3
 8001c0a:	220d      	movs	r2, #13
 8001c0c:	18bb      	adds	r3, r7, r2
 8001c0e:	18ba      	adds	r2, r7, r2
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	188a      	adds	r2, r1, r2
 8001c14:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001c16:	183b      	adds	r3, r7, r0
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	183b      	adds	r3, r7, r0
 8001c1c:	3201      	adds	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	230e      	movs	r3, #14
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	200c      	movs	r0, #12
 8001c28:	183b      	adds	r3, r7, r0
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	dbe4      	blt.n	8001bfc <answer2CPU+0x3d8>
				}
				myCS = 0 - myCS;
 8001c32:	210d      	movs	r1, #13
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	187a      	adds	r2, r7, r1
 8001c38:	7812      	ldrb	r2, [r2, #0]
 8001c3a:	4252      	negs	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	187b      	adds	r3, r7, r1
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b299      	uxth	r1, r3
 8001c4a:	4bad      	ldr	r3, [pc, #692]	; (8001f00 <answer2CPU+0x6dc>)
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	4bac      	ldr	r3, [pc, #688]	; (8001f04 <answer2CPU+0x6e0>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d0fa      	beq.n	8001c52 <answer2CPU+0x42e>
				USART2->TDR = ans[0]|0x0100;
 8001c5c:	4ba8      	ldr	r3, [pc, #672]	; (8001f00 <answer2CPU+0x6dc>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	0052      	lsls	r2, r2, #1
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	4ba6      	ldr	r3, [pc, #664]	; (8001f04 <answer2CPU+0x6e0>)
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c6c:	e014      	b.n	8001c98 <answer2CPU+0x474>
				  {
				    i++;
 8001c6e:	210e      	movs	r1, #14
 8001c70:	187b      	adds	r3, r7, r1
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	3201      	adds	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	4ba1      	ldr	r3, [pc, #644]	; (8001f04 <answer2CPU+0x6e0>)
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	4013      	ands	r3, r2
 8001c84:	d0fa      	beq.n	8001c7c <answer2CPU+0x458>
				    USART2->TDR = (uint8_t)ans[i];
 8001c86:	230e      	movs	r3, #14
 8001c88:	18fb      	adds	r3, r7, r3
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	4b9c      	ldr	r3, [pc, #624]	; (8001f00 <answer2CPU+0x6dc>)
 8001c8e:	0052      	lsls	r2, r2, #1
 8001c90:	5ad3      	ldrh	r3, [r2, r3]
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b9b      	ldr	r3, [pc, #620]	; (8001f04 <answer2CPU+0x6e0>)
 8001c96:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001c98:	230e      	movs	r3, #14
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	4b98      	ldr	r3, [pc, #608]	; (8001f00 <answer2CPU+0x6dc>)
 8001ca0:	0052      	lsls	r2, r2, #1
 8001ca2:	5ad3      	ldrh	r3, [r2, r3]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e2      	bne.n	8001c6e <answer2CPU+0x44a>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d000      	beq.n	8001cb2 <answer2CPU+0x48e>
 8001cb0:	e07f      	b.n	8001db2 <answer2CPU+0x58e>
				myLength = 0x0B; //19 bytes length answer
 8001cb2:	210c      	movs	r1, #12
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	220b      	movs	r2, #11
 8001cb8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b02      	subs	r3, #2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	4b8e      	ldr	r3, [pc, #568]	; (8001f00 <answer2CPU+0x6dc>)
 8001cc6:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001cc8:	230e      	movs	r3, #14
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e010      	b.n	8001cf4 <answer2CPU+0x4d0>
					ans[i + 2] = PCB_rev[i];
 8001cd2:	200e      	movs	r0, #14
 8001cd4:	183b      	adds	r3, r7, r0
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4a8b      	ldr	r2, [pc, #556]	; (8001f08 <answer2CPU+0x6e4>)
 8001cda:	5cd1      	ldrb	r1, [r2, r3]
 8001cdc:	183b      	adds	r3, r7, r0
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	1c9a      	adds	r2, r3, #2
 8001ce2:	b289      	uxth	r1, r1
 8001ce4:	4b86      	ldr	r3, [pc, #536]	; (8001f00 <answer2CPU+0x6dc>)
 8001ce6:	0052      	lsls	r2, r2, #1
 8001ce8:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	183b      	adds	r3, r7, r0
 8001cf0:	3201      	adds	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	220e      	movs	r2, #14
 8001cf6:	18bb      	adds	r3, r7, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d9e9      	bls.n	8001cd2 <answer2CPU+0x4ae>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001cfe:	18bb      	adds	r3, r7, r2
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e011      	b.n	8001d2a <answer2CPU+0x506>
					myCS = myCS + ans[i];
 8001d06:	200e      	movs	r0, #14
 8001d08:	183b      	adds	r3, r7, r0
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <answer2CPU+0x6dc>)
 8001d0e:	0052      	lsls	r2, r2, #1
 8001d10:	5ad3      	ldrh	r3, [r2, r3]
 8001d12:	b2d9      	uxtb	r1, r3
 8001d14:	220d      	movs	r2, #13
 8001d16:	18bb      	adds	r3, r7, r2
 8001d18:	18ba      	adds	r2, r7, r2
 8001d1a:	7812      	ldrb	r2, [r2, #0]
 8001d1c:	188a      	adds	r2, r1, r2
 8001d1e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	183b      	adds	r3, r7, r0
 8001d26:	3201      	adds	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	230e      	movs	r3, #14
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	200c      	movs	r0, #12
 8001d32:	183b      	adds	r3, r7, r0
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbe4      	blt.n	8001d06 <answer2CPU+0x4e2>
				}
				myCS = 0 - myCS;
 8001d3c:	210d      	movs	r1, #13
 8001d3e:	187b      	adds	r3, r7, r1
 8001d40:	187a      	adds	r2, r7, r1
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	4252      	negs	r2, r2
 8001d46:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b299      	uxth	r1, r3
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <answer2CPU+0x6dc>)
 8001d56:	0052      	lsls	r2, r2, #1
 8001d58:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <answer2CPU+0x6e0>)
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	4013      	ands	r3, r2
 8001d64:	d0fa      	beq.n	8001d5c <answer2CPU+0x538>
				USART2->TDR = ans[0]|0x0100;
 8001d66:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <answer2CPU+0x6dc>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	0052      	lsls	r2, r2, #1
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b64      	ldr	r3, [pc, #400]	; (8001f04 <answer2CPU+0x6e0>)
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001d76:	e014      	b.n	8001da2 <answer2CPU+0x57e>
					  {
					    i++;
 8001d78:	210e      	movs	r1, #14
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	3201      	adds	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <answer2CPU+0x6e0>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0fa      	beq.n	8001d86 <answer2CPU+0x562>
					    USART2->TDR = (uint8_t)ans[i];
 8001d90:	230e      	movs	r3, #14
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	4b5a      	ldr	r3, [pc, #360]	; (8001f00 <answer2CPU+0x6dc>)
 8001d98:	0052      	lsls	r2, r2, #1
 8001d9a:	5ad3      	ldrh	r3, [r2, r3]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <answer2CPU+0x6e0>)
 8001da0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001da2:	230e      	movs	r3, #14
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	4b55      	ldr	r3, [pc, #340]	; (8001f00 <answer2CPU+0x6dc>)
 8001daa:	0052      	lsls	r2, r2, #1
 8001dac:	5ad3      	ldrh	r3, [r2, r3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e2      	bne.n	8001d78 <answer2CPU+0x554>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d000      	beq.n	8001dbc <answer2CPU+0x598>
 8001dba:	e07f      	b.n	8001ebc <answer2CPU+0x698>
				myLength = 0x13; //19 bytes length answer
 8001dbc:	210c      	movs	r1, #12
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2213      	movs	r2, #19
 8001dc2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b02      	subs	r3, #2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <answer2CPU+0x6dc>)
 8001dd0:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001dd2:	230e      	movs	r3, #14
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	e010      	b.n	8001dfe <answer2CPU+0x5da>
					ans[i + 2] = EmitterSN[i];
 8001ddc:	200e      	movs	r0, #14
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4a4a      	ldr	r2, [pc, #296]	; (8001f0c <answer2CPU+0x6e8>)
 8001de4:	5cd1      	ldrb	r1, [r2, r3]
 8001de6:	183b      	adds	r3, r7, r0
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	1c9a      	adds	r2, r3, #2
 8001dec:	b289      	uxth	r1, r1
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <answer2CPU+0x6dc>)
 8001df0:	0052      	lsls	r2, r2, #1
 8001df2:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001df4:	183b      	adds	r3, r7, r0
 8001df6:	781a      	ldrb	r2, [r3, #0]
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	3201      	adds	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	220e      	movs	r2, #14
 8001e00:	18bb      	adds	r3, r7, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d9e9      	bls.n	8001ddc <answer2CPU+0x5b8>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e08:	18bb      	adds	r3, r7, r2
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e011      	b.n	8001e34 <answer2CPU+0x610>
					myCS = myCS + ans[i];
 8001e10:	200e      	movs	r0, #14
 8001e12:	183b      	adds	r3, r7, r0
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <answer2CPU+0x6dc>)
 8001e18:	0052      	lsls	r2, r2, #1
 8001e1a:	5ad3      	ldrh	r3, [r2, r3]
 8001e1c:	b2d9      	uxtb	r1, r3
 8001e1e:	220d      	movs	r2, #13
 8001e20:	18bb      	adds	r3, r7, r2
 8001e22:	18ba      	adds	r2, r7, r2
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	188a      	adds	r2, r1, r2
 8001e28:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001e2a:	183b      	adds	r3, r7, r0
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	183b      	adds	r3, r7, r0
 8001e30:	3201      	adds	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
 8001e34:	230e      	movs	r3, #14
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	200c      	movs	r0, #12
 8001e3c:	183b      	adds	r3, r7, r0
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dbe4      	blt.n	8001e10 <answer2CPU+0x5ec>
				}
				myCS = 0 - myCS;
 8001e46:	210d      	movs	r1, #13
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	187a      	adds	r2, r7, r1
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	4252      	negs	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e52:	183b      	adds	r3, r7, r0
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	1e5a      	subs	r2, r3, #1
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b299      	uxth	r1, r3
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <answer2CPU+0x6dc>)
 8001e60:	0052      	lsls	r2, r2, #1
 8001e62:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <answer2CPU+0x6e0>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0fa      	beq.n	8001e66 <answer2CPU+0x642>
				USART2->TDR = ans[0]|0x0100;
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <answer2CPU+0x6dc>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	2280      	movs	r2, #128	; 0x80
 8001e76:	0052      	lsls	r2, r2, #1
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <answer2CPU+0x6e0>)
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e80:	e014      	b.n	8001eac <answer2CPU+0x688>
				  {
				    i++;
 8001e82:	210e      	movs	r1, #14
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <answer2CPU+0x6e0>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	4013      	ands	r3, r2
 8001e98:	d0fa      	beq.n	8001e90 <answer2CPU+0x66c>
				    	USART2->TDR = (uint8_t)ans[i];
 8001e9a:	230e      	movs	r3, #14
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <answer2CPU+0x6dc>)
 8001ea2:	0052      	lsls	r2, r2, #1
 8001ea4:	5ad3      	ldrh	r3, [r2, r3]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <answer2CPU+0x6e0>)
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001eac:	230e      	movs	r3, #14
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <answer2CPU+0x6dc>)
 8001eb4:	0052      	lsls	r2, r2, #1
 8001eb6:	5ad3      	ldrh	r3, [r2, r3]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e2      	bne.n	8001e82 <answer2CPU+0x65e>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d000      	beq.n	8001ec6 <answer2CPU+0x6a2>
 8001ec4:	e07c      	b.n	8001fc0 <answer2CPU+0x79c>
				myLength = 0x04; //4 bytes length answer
 8001ec6:	210c      	movs	r1, #12
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2204      	movs	r2, #4
 8001ecc:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3b02      	subs	r3, #2
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <answer2CPU+0x6dc>)
 8001eda:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <answer2CPU+0x6ec>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <answer2CPU+0x6dc>)
 8001ee4:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001ee6:	230d      	movs	r3, #13
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <answer2CPU+0x6dc>)
 8001ef0:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001ef2:	230e      	movs	r3, #14
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
 8001efa:	e01d      	b.n	8001f38 <answer2CPU+0x714>
 8001efc:	20000000 	.word	0x20000000
 8001f00:	200002d0 	.word	0x200002d0
 8001f04:	40004400 	.word	0x40004400
 8001f08:	20000014 	.word	0x20000014
 8001f0c:	20000020 	.word	0x20000020
 8001f10:	2000001c 	.word	0x2000001c
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001f14:	200e      	movs	r0, #14
 8001f16:	183b      	adds	r3, r7, r0
 8001f18:	781a      	ldrb	r2, [r3, #0]
 8001f1a:	4b6d      	ldr	r3, [pc, #436]	; (80020d0 <answer2CPU+0x8ac>)
 8001f1c:	0052      	lsls	r2, r2, #1
 8001f1e:	5ad3      	ldrh	r3, [r2, r3]
 8001f20:	b2d9      	uxtb	r1, r3
 8001f22:	220d      	movs	r2, #13
 8001f24:	18bb      	adds	r3, r7, r2
 8001f26:	18ba      	adds	r2, r7, r2
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	188a      	adds	r2, r1, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001f2e:	183b      	adds	r3, r7, r0
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	183b      	adds	r3, r7, r0
 8001f34:	3201      	adds	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	230e      	movs	r3, #14
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	200c      	movs	r0, #12
 8001f40:	183b      	adds	r3, r7, r0
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dbe4      	blt.n	8001f14 <answer2CPU+0x6f0>
				}
				myCS = 0 - myCS;
 8001f4a:	210d      	movs	r1, #13
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	187a      	adds	r2, r7, r1
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	4252      	negs	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001f56:	183b      	adds	r3, r7, r0
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	1e5a      	subs	r2, r3, #1
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b299      	uxth	r1, r3
 8001f62:	4b5b      	ldr	r3, [pc, #364]	; (80020d0 <answer2CPU+0x8ac>)
 8001f64:	0052      	lsls	r2, r2, #1
 8001f66:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <answer2CPU+0x8b0>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	4013      	ands	r3, r2
 8001f72:	d0fa      	beq.n	8001f6a <answer2CPU+0x746>
					USART2->TDR = ans[0]|0x0100;
 8001f74:	4b56      	ldr	r3, [pc, #344]	; (80020d0 <answer2CPU+0x8ac>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	2280      	movs	r2, #128	; 0x80
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <answer2CPU+0x8b0>)
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001f84:	e014      	b.n	8001fb0 <answer2CPU+0x78c>
						{
						  i++;
 8001f86:	210e      	movs	r1, #14
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	3201      	adds	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	4b4f      	ldr	r3, [pc, #316]	; (80020d4 <answer2CPU+0x8b0>)
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0fa      	beq.n	8001f94 <answer2CPU+0x770>
						     USART2->TDR = (uint8_t)ans[i];
 8001f9e:	230e      	movs	r3, #14
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <answer2CPU+0x8ac>)
 8001fa6:	0052      	lsls	r2, r2, #1
 8001fa8:	5ad3      	ldrh	r3, [r2, r3]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <answer2CPU+0x8b0>)
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001fb0:	230e      	movs	r3, #14
 8001fb2:	18fb      	adds	r3, r7, r3
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <answer2CPU+0x8ac>)
 8001fb8:	0052      	lsls	r2, r2, #1
 8001fba:	5ad3      	ldrh	r3, [r2, r3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e2      	bne.n	8001f86 <answer2CPU+0x762>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d000      	beq.n	8001fca <answer2CPU+0x7a6>
 8001fc8:	e076      	b.n	80020b8 <answer2CPU+0x894>
				myLength = 0x04; //4 bytes length answer
 8001fca:	210c      	movs	r1, #12
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	2204      	movs	r2, #4
 8001fd0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b02      	subs	r3, #2
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <answer2CPU+0x8ac>)
 8001fde:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	001a      	movs	r2, r3
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <answer2CPU+0x8b4>)
 8001fea:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001fec:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <answer2CPU+0x8b8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4b37      	ldr	r3, [pc, #220]	; (80020d0 <answer2CPU+0x8ac>)
 8001ff4:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001ff6:	230d      	movs	r3, #13
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <answer2CPU+0x8ac>)
 8002000:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8002002:	230e      	movs	r3, #14
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e011      	b.n	8002030 <answer2CPU+0x80c>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 800200c:	200e      	movs	r0, #14
 800200e:	183b      	adds	r3, r7, r0
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <answer2CPU+0x8ac>)
 8002014:	0052      	lsls	r2, r2, #1
 8002016:	5ad3      	ldrh	r3, [r2, r3]
 8002018:	b2d9      	uxtb	r1, r3
 800201a:	220d      	movs	r2, #13
 800201c:	18bb      	adds	r3, r7, r2
 800201e:	18ba      	adds	r2, r7, r2
 8002020:	7812      	ldrb	r2, [r2, #0]
 8002022:	188a      	adds	r2, r1, r2
 8002024:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8002026:	183b      	adds	r3, r7, r0
 8002028:	781a      	ldrb	r2, [r3, #0]
 800202a:	183b      	adds	r3, r7, r0
 800202c:	3201      	adds	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	230e      	movs	r3, #14
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	200c      	movs	r0, #12
 8002038:	183b      	adds	r3, r7, r0
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3b01      	subs	r3, #1
 800203e:	429a      	cmp	r2, r3
 8002040:	dbe4      	blt.n	800200c <answer2CPU+0x7e8>
				}
				myCS = 0 - myCS;
 8002042:	210d      	movs	r1, #13
 8002044:	187b      	adds	r3, r7, r1
 8002046:	187a      	adds	r2, r7, r1
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	4252      	negs	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800204e:	183b      	adds	r3, r7, r0
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	1e5a      	subs	r2, r3, #1
 8002054:	187b      	adds	r3, r7, r1
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b299      	uxth	r1, r3
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <answer2CPU+0x8ac>)
 800205c:	0052      	lsls	r2, r2, #1
 800205e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <answer2CPU+0x8b0>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	4013      	ands	r3, r2
 800206a:	d0fa      	beq.n	8002062 <answer2CPU+0x83e>
				USART2->TDR = ans[0]|0x0100;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <answer2CPU+0x8ac>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	0052      	lsls	r2, r2, #1
 8002074:	4313      	orrs	r3, r2
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <answer2CPU+0x8b0>)
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 800207c:	e014      	b.n	80020a8 <answer2CPU+0x884>
				{
				  i++;
 800207e:	210e      	movs	r1, #14
 8002080:	187b      	adds	r3, r7, r1
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	187b      	adds	r3, r7, r1
 8002086:	3201      	adds	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <answer2CPU+0x8b0>)
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	4013      	ands	r3, r2
 8002094:	d0fa      	beq.n	800208c <answer2CPU+0x868>
				  USART2->TDR = (uint8_t)ans[i];
 8002096:	230e      	movs	r3, #14
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <answer2CPU+0x8ac>)
 800209e:	0052      	lsls	r2, r2, #1
 80020a0:	5ad3      	ldrh	r3, [r2, r3]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <answer2CPU+0x8b0>)
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 80020a8:	230e      	movs	r3, #14
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <answer2CPU+0x8ac>)
 80020b0:	0052      	lsls	r2, r2, #1
 80020b2:	5ad3      	ldrh	r3, [r2, r3]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e2      	bne.n	800207e <answer2CPU+0x85a>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <answer2CPU+0x8b0>)
 80020ba:	6a1a      	ldr	r2, [r3, #32]
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <answer2CPU+0x8b0>)
 80020be:	2108      	movs	r1, #8
 80020c0:	430a      	orrs	r2, r1
 80020c2:	621a      	str	r2, [r3, #32]
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b004      	add	sp, #16
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	200002d0 	.word	0x200002d0
 80020d4:	40004400 	.word	0x40004400
 80020d8:	20000298 	.word	0x20000298
 80020dc:	2000028d 	.word	0x2000028d

080020e0 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 80020e6:	2001      	movs	r0, #1
 80020e8:	f003 f9d4 	bl	8005494 <HAL_Delay>
		GPIOB->ODR &= ~(1 << 9); //reset cs
 80020ec:	4b28      	ldr	r3, [pc, #160]	; (8002190 <MEM_Reset+0xb0>)
 80020ee:	695a      	ldr	r2, [r3, #20]
 80020f0:	4b27      	ldr	r3, [pc, #156]	; (8002190 <MEM_Reset+0xb0>)
 80020f2:	4928      	ldr	r1, [pc, #160]	; (8002194 <MEM_Reset+0xb4>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	2266      	movs	r2, #102	; 0x66
 80020fc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 80020fe:	1df9      	adds	r1, r7, #7
 8002100:	4825      	ldr	r0, [pc, #148]	; (8002198 <MEM_Reset+0xb8>)
 8002102:	2305      	movs	r3, #5
 8002104:	2201      	movs	r2, #1
 8002106:	f007 f92f 	bl	8009368 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <MEM_Reset+0xb0>)
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	4b20      	ldr	r3, [pc, #128]	; (8002190 <MEM_Reset+0xb0>)
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	0089      	lsls	r1, r1, #2
 8002114:	430a      	orrs	r2, r1
 8002116:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8002118:	46c0      	nop			; (mov r8, r8)
		__NOP();
 800211a:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 800211c:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 800211e:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8002120:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8002122:	46c0      	nop			; (mov r8, r8)
		GPIOB->ODR &= ~(1 << 9);			//reset cs
 8002124:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <MEM_Reset+0xb0>)
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <MEM_Reset+0xb0>)
 800212a:	491a      	ldr	r1, [pc, #104]	; (8002194 <MEM_Reset+0xb4>)
 800212c:	400a      	ands	r2, r1
 800212e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8002130:	1dfb      	adds	r3, r7, #7
 8002132:	2299      	movs	r2, #153	; 0x99
 8002134:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8002136:	1df9      	adds	r1, r7, #7
 8002138:	4817      	ldr	r0, [pc, #92]	; (8002198 <MEM_Reset+0xb8>)
 800213a:	2305      	movs	r3, #5
 800213c:	2201      	movs	r2, #1
 800213e:	f007 f913 	bl	8009368 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <MEM_Reset+0xb0>)
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <MEM_Reset+0xb0>)
 8002148:	2180      	movs	r1, #128	; 0x80
 800214a:	0089      	lsls	r1, r1, #2
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002150:	2001      	movs	r0, #1
 8002152:	f003 f99f 	bl	8005494 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8002156:	1dfb      	adds	r3, r7, #7
 8002158:	22b7      	movs	r2, #183	; 0xb7
 800215a:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 << 9); //reset cs
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <MEM_Reset+0xb0>)
 800215e:	695a      	ldr	r2, [r3, #20]
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <MEM_Reset+0xb0>)
 8002162:	490c      	ldr	r1, [pc, #48]	; (8002194 <MEM_Reset+0xb4>)
 8002164:	400a      	ands	r2, r1
 8002166:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8002168:	1df9      	adds	r1, r7, #7
 800216a:	480b      	ldr	r0, [pc, #44]	; (8002198 <MEM_Reset+0xb8>)
 800216c:	2305      	movs	r3, #5
 800216e:	2201      	movs	r2, #1
 8002170:	f007 f8fa 	bl	8009368 <HAL_SPI_Transmit>
		GPIOB->ODR |= 1 << 9; // set cs
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <MEM_Reset+0xb0>)
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	4b05      	ldr	r3, [pc, #20]	; (8002190 <MEM_Reset+0xb0>)
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	0089      	lsls	r1, r1, #2
 800217e:	430a      	orrs	r2, r1
 8002180:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8002182:	2001      	movs	r0, #1
 8002184:	f003 f986 	bl	8005494 <HAL_Delay>
	}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}
 8002190:	50000400 	.word	0x50000400
 8002194:	fffffdff 	.word	0xfffffdff
 8002198:	20000178 	.word	0x20000178

0800219c <weoShowFullScreen>:
//==================================================================================================================================
	uint8_t weoShowFullScreen(uint8_t picNum) {
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	4c42      	ldr	r4, [pc, #264]	; (80022a8 <weoShowFullScreen+0x10c>)
 80021a0:	44a5      	add	sp, r4
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	0002      	movs	r2, r0
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <weoShowFullScreen+0x110>)
 80021a8:	4941      	ldr	r1, [pc, #260]	; (80022b0 <weoShowFullScreen+0x114>)
 80021aa:	185b      	adds	r3, r3, r1
 80021ac:	19db      	adds	r3, r3, r7
 80021ae:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 80021b0:	4c40      	ldr	r4, [pc, #256]	; (80022b4 <weoShowFullScreen+0x118>)
 80021b2:	193b      	adds	r3, r7, r4
 80021b4:	2213      	movs	r2, #19
 80021b6:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 80021b8:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <weoShowFullScreen+0x110>)
 80021ba:	185b      	adds	r3, r3, r1
 80021bc:	19db      	adds	r3, r3, r7
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	035b      	lsls	r3, r3, #13
 80021c2:	483d      	ldr	r0, [pc, #244]	; (80022b8 <weoShowFullScreen+0x11c>)
 80021c4:	183a      	adds	r2, r7, r0
 80021c6:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 80021c8:	183b      	adds	r3, r7, r0
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <weoShowFullScreen+0x120>)
 80021d0:	185b      	adds	r3, r3, r1
 80021d2:	19db      	adds	r3, r3, r7
 80021d4:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 80021d6:	183b      	adds	r3, r7, r0
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <weoShowFullScreen+0x120>)
 80021e0:	185b      	adds	r3, r3, r1
 80021e2:	19db      	adds	r3, r3, r7
 80021e4:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <weoShowFullScreen+0x120>)
 80021f0:	185b      	adds	r3, r3, r1
 80021f2:	19db      	adds	r3, r3, r7
 80021f4:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 80021f6:	183b      	adds	r3, r7, r0
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0e1b      	lsrs	r3, r3, #24
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <weoShowFullScreen+0x120>)
 8002200:	185b      	adds	r3, r3, r1
 8002202:	19db      	adds	r3, r3, r7
 8002204:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002206:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <weoShowFullScreen+0x124>)
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <weoShowFullScreen+0x124>)
 800220c:	492d      	ldr	r1, [pc, #180]	; (80022c4 <weoShowFullScreen+0x128>)
 800220e:	400a      	ands	r2, r1
 8002210:	615a      	str	r2, [r3, #20]
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002212:	1939      	adds	r1, r7, r4
 8002214:	482c      	ldr	r0, [pc, #176]	; (80022c8 <weoShowFullScreen+0x12c>)
 8002216:	2332      	movs	r3, #50	; 0x32
 8002218:	2201      	movs	r2, #1
 800221a:	f007 f8a5 	bl	8009368 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800221e:	2408      	movs	r4, #8
 8002220:	193b      	adds	r3, r7, r4
 8002222:	1cd9      	adds	r1, r3, #3
 8002224:	4828      	ldr	r0, [pc, #160]	; (80022c8 <weoShowFullScreen+0x12c>)
 8002226:	2332      	movs	r3, #50	; 0x32
 8002228:	2201      	movs	r2, #1
 800222a:	f007 f89d 	bl	8009368 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800222e:	193b      	adds	r3, r7, r4
 8002230:	1c99      	adds	r1, r3, #2
 8002232:	4825      	ldr	r0, [pc, #148]	; (80022c8 <weoShowFullScreen+0x12c>)
 8002234:	2332      	movs	r3, #50	; 0x32
 8002236:	2201      	movs	r2, #1
 8002238:	f007 f896 	bl	8009368 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800223c:	193b      	adds	r3, r7, r4
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	4821      	ldr	r0, [pc, #132]	; (80022c8 <weoShowFullScreen+0x12c>)
 8002242:	2332      	movs	r3, #50	; 0x32
 8002244:	2201      	movs	r2, #1
 8002246:	f007 f88f 	bl	8009368 <HAL_SPI_Transmit>
			HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800224a:	1939      	adds	r1, r7, r4
 800224c:	481e      	ldr	r0, [pc, #120]	; (80022c8 <weoShowFullScreen+0x12c>)
 800224e:	2332      	movs	r3, #50	; 0x32
 8002250:	2201      	movs	r2, #1
 8002252:	f007 f889 	bl	8009368 <HAL_SPI_Transmit>
			HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8002256:	4c1d      	ldr	r4, [pc, #116]	; (80022cc <weoShowFullScreen+0x130>)
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	019a      	lsls	r2, r3, #6
 800225c:	2510      	movs	r5, #16
 800225e:	1979      	adds	r1, r7, r5
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <weoShowFullScreen+0x12c>)
 8002262:	0023      	movs	r3, r4
 8002264:	f007 f9d8 	bl	8009618 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <weoShowFullScreen+0x124>)
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <weoShowFullScreen+0x124>)
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	0089      	lsls	r1, r1, #2
 8002272:	430a      	orrs	r2, r1
 8002274:	615a      	str	r2, [r3, #20]

		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8002276:	197b      	adds	r3, r7, r5
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	23ff      	movs	r3, #255	; 0xff
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	237f      	movs	r3, #127	; 0x7f
 8002280:	227f      	movs	r2, #127	; 0x7f
 8002282:	2100      	movs	r1, #0
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff f91d 	bl	80014c4 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <weoShowFullScreen+0x134>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <weoShowFullScreen+0x138>)
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <weoShowFullScreen+0x138>)
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	430a      	orrs	r2, r1
 800229a:	615a      	str	r2, [r3, #20]
	}
 800229c:	46c0      	nop			; (mov r8, r8)
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <weoShowFullScreen+0x114>)
 80022a4:	449d      	add	sp, r3
 80022a6:	bdb0      	pop	{r4, r5, r7, pc}
 80022a8:	ffffdfe0 	.word	0xffffdfe0
 80022ac:	ffffdfef 	.word	0xffffdfef
 80022b0:	00002018 	.word	0x00002018
 80022b4:	00002013 	.word	0x00002013
 80022b8:	00002014 	.word	0x00002014
 80022bc:	ffffdff0 	.word	0xffffdff0
 80022c0:	50000400 	.word	0x50000400
 80022c4:	fffffdff 	.word	0xfffffdff
 80022c8:	20000178 	.word	0x20000178
 80022cc:	00001388 	.word	0x00001388
 80022d0:	200002ea 	.word	0x200002ea
 80022d4:	50000800 	.word	0x50000800

080022d8 <weoShowSmallImage>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	4ca7      	ldr	r4, [pc, #668]	; (8002578 <weoShowSmallImage+0x2a0>)
 80022dc:	44a5      	add	sp, r4
 80022de:	af02      	add	r7, sp, #8
 80022e0:	0004      	movs	r4, r0
 80022e2:	0008      	movs	r0, r1
 80022e4:	0011      	movs	r1, r2
 80022e6:	4ba5      	ldr	r3, [pc, #660]	; (800257c <weoShowSmallImage+0x2a4>)
 80022e8:	4da5      	ldr	r5, [pc, #660]	; (8002580 <weoShowSmallImage+0x2a8>)
 80022ea:	195b      	adds	r3, r3, r5
 80022ec:	19db      	adds	r3, r3, r7
 80022ee:	1c22      	adds	r2, r4, #0
 80022f0:	701a      	strb	r2, [r3, #0]
 80022f2:	4ba4      	ldr	r3, [pc, #656]	; (8002584 <weoShowSmallImage+0x2ac>)
 80022f4:	002c      	movs	r4, r5
 80022f6:	191b      	adds	r3, r3, r4
 80022f8:	19db      	adds	r3, r3, r7
 80022fa:	1c02      	adds	r2, r0, #0
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	4ba2      	ldr	r3, [pc, #648]	; (8002588 <weoShowSmallImage+0x2b0>)
 8002300:	0020      	movs	r0, r4
 8002302:	181b      	adds	r3, r3, r0
 8002304:	19db      	adds	r3, r3, r7
 8002306:	1c0a      	adds	r2, r1, #0
 8002308:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i;
		uint32_t addr,addrData;
		addr=0x00000000;
 800230a:	2300      	movs	r3, #0
 800230c:	4c9f      	ldr	r4, [pc, #636]	; (800258c <weoShowSmallImage+0x2b4>)
 800230e:	193a      	adds	r2, r7, r4
 8002310:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8002312:	4d9f      	ldr	r5, [pc, #636]	; (8002590 <weoShowSmallImage+0x2b8>)
 8002314:	197b      	adds	r3, r7, r5
 8002316:	2213      	movs	r2, #19
 8002318:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x200000;// the right path is to multiply picNum * image repeat period!
 800231a:	4b98      	ldr	r3, [pc, #608]	; (800257c <weoShowSmallImage+0x2a4>)
 800231c:	0001      	movs	r1, r0
 800231e:	185b      	adds	r3, r3, r1
 8002320:	19db      	adds	r3, r3, r7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	33ff      	adds	r3, #255	; 0xff
 8002328:	035b      	lsls	r3, r3, #13
 800232a:	0020      	movs	r0, r4
 800232c:	183a      	adds	r2, r7, r0
 800232e:	6013      	str	r3, [r2, #0]
//		addr=(picNum*0x2000);

		addrArray[0]=addr & 0xFF;
 8002330:	183b      	adds	r3, r7, r0
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b97      	ldr	r3, [pc, #604]	; (8002594 <weoShowSmallImage+0x2bc>)
 8002338:	000c      	movs	r4, r1
 800233a:	191b      	adds	r3, r3, r4
 800233c:	19db      	adds	r3, r3, r7
 800233e:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002340:	0001      	movs	r1, r0
 8002342:	187b      	adds	r3, r7, r1
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b92      	ldr	r3, [pc, #584]	; (8002594 <weoShowSmallImage+0x2bc>)
 800234c:	191b      	adds	r3, r3, r4
 800234e:	19db      	adds	r3, r3, r7
 8002350:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0c1b      	lsrs	r3, r3, #16
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b8e      	ldr	r3, [pc, #568]	; (8002594 <weoShowSmallImage+0x2bc>)
 800235c:	191b      	adds	r3, r3, r4
 800235e:	19db      	adds	r3, r3, r7
 8002360:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002362:	187b      	adds	r3, r7, r1
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e1b      	lsrs	r3, r3, #24
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b8a      	ldr	r3, [pc, #552]	; (8002594 <weoShowSmallImage+0x2bc>)
 800236c:	191b      	adds	r3, r3, r4
 800236e:	19db      	adds	r3, r3, r7
 8002370:	70da      	strb	r2, [r3, #3]

		GPIOB->ODR &= ~(1 << 9); //reset cs
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <weoShowSmallImage+0x2c0>)
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <weoShowSmallImage+0x2c0>)
 8002378:	4988      	ldr	r1, [pc, #544]	; (800259c <weoShowSmallImage+0x2c4>)
 800237a:	400a      	ands	r2, r1
 800237c:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800237e:	1979      	adds	r1, r7, r5
 8002380:	4887      	ldr	r0, [pc, #540]	; (80025a0 <weoShowSmallImage+0x2c8>)
 8002382:	2332      	movs	r3, #50	; 0x32
 8002384:	2201      	movs	r2, #1
 8002386:	f006 ffef 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 800238a:	2508      	movs	r5, #8
 800238c:	197b      	adds	r3, r7, r5
 800238e:	1cd9      	adds	r1, r3, #3
 8002390:	4883      	ldr	r0, [pc, #524]	; (80025a0 <weoShowSmallImage+0x2c8>)
 8002392:	2332      	movs	r3, #50	; 0x32
 8002394:	2201      	movs	r2, #1
 8002396:	f006 ffe7 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 800239a:	197b      	adds	r3, r7, r5
 800239c:	1c99      	adds	r1, r3, #2
 800239e:	4880      	ldr	r0, [pc, #512]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80023a0:	2332      	movs	r3, #50	; 0x32
 80023a2:	2201      	movs	r2, #1
 80023a4:	f006 ffe0 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 80023a8:	197b      	adds	r3, r7, r5
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	487c      	ldr	r0, [pc, #496]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80023ae:	2332      	movs	r3, #50	; 0x32
 80023b0:	2201      	movs	r2, #1
 80023b2:	f006 ffd9 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80023b6:	1979      	adds	r1, r7, r5
 80023b8:	4879      	ldr	r0, [pc, #484]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80023ba:	2332      	movs	r3, #50	; 0x32
 80023bc:	2201      	movs	r2, #1
 80023be:	f006 ffd3 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80023c2:	4b78      	ldr	r3, [pc, #480]	; (80025a4 <weoShowSmallImage+0x2cc>)
 80023c4:	220c      	movs	r2, #12
 80023c6:	18b9      	adds	r1, r7, r2
 80023c8:	4875      	ldr	r0, [pc, #468]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80023ca:	2202      	movs	r2, #2
 80023cc:	f007 f924 	bl	8009618 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9; // set cs
 80023d0:	4b71      	ldr	r3, [pc, #452]	; (8002598 <weoShowSmallImage+0x2c0>)
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	4b70      	ldr	r3, [pc, #448]	; (8002598 <weoShowSmallImage+0x2c0>)
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	0089      	lsls	r1, r1, #2
 80023da:	430a      	orrs	r2, r1
 80023dc:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80023de:	4972      	ldr	r1, [pc, #456]	; (80025a8 <weoShowSmallImage+0x2d0>)
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	4a72      	ldr	r2, [pc, #456]	; (80025ac <weoShowSmallImage+0x2d4>)
 80023e4:	1912      	adds	r2, r2, r4
 80023e6:	19d2      	adds	r2, r2, r7
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80023ec:	4870      	ldr	r0, [pc, #448]	; (80025b0 <weoShowSmallImage+0x2d8>)
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <weoShowSmallImage+0x2d4>)
 80023f2:	1912      	adds	r2, r2, r4
 80023f4:	19d2      	adds	r2, r2, r7
 80023f6:	7852      	ldrb	r2, [r2, #1]
 80023f8:	701a      	strb	r2, [r3, #0]

		len=width*height/2+2;
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	183a      	adds	r2, r7, r0
 8002400:	7812      	ldrb	r2, [r2, #0]
 8002402:	4353      	muls	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	da00      	bge.n	800240a <weoShowSmallImage+0x132>
 8002408:	3301      	adds	r3, #1
 800240a:	105b      	asrs	r3, r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	3302      	adds	r3, #2
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <weoShowSmallImage+0x2dc>)
 8002414:	801a      	strh	r2, [r3, #0]

		addrData=addr+0x02;
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <weoShowSmallImage+0x2b4>)
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3302      	adds	r3, #2
 800241e:	4966      	ldr	r1, [pc, #408]	; (80025b8 <weoShowSmallImage+0x2e0>)
 8002420:	187a      	adds	r2, r7, r1
 8002422:	6013      	str	r3, [r2, #0]
		addrArray[0]=addrData & 0xFF;
 8002424:	187b      	adds	r3, r7, r1
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b5a      	ldr	r3, [pc, #360]	; (8002594 <weoShowSmallImage+0x2bc>)
 800242c:	4c54      	ldr	r4, [pc, #336]	; (8002580 <weoShowSmallImage+0x2a8>)
 800242e:	191b      	adds	r3, r3, r4
 8002430:	19db      	adds	r3, r3, r7
 8002432:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addrData >> 8) & 0xFF;
 8002434:	187b      	adds	r3, r7, r1
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b55      	ldr	r3, [pc, #340]	; (8002594 <weoShowSmallImage+0x2bc>)
 800243e:	191b      	adds	r3, r3, r4
 8002440:	19db      	adds	r3, r3, r7
 8002442:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addrData >> 16) & 0xFF;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b51      	ldr	r3, [pc, #324]	; (8002594 <weoShowSmallImage+0x2bc>)
 800244e:	191b      	adds	r3, r3, r4
 8002450:	19db      	adds	r3, r3, r7
 8002452:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addrData >> 24) & 0xFF;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e1b      	lsrs	r3, r3, #24
 800245a:	b2da      	uxtb	r2, r3
 800245c:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <weoShowSmallImage+0x2bc>)
 800245e:	191b      	adds	r3, r3, r4
 8002460:	19db      	adds	r3, r3, r7
 8002462:	70da      	strb	r2, [r3, #3]

		USART2->ICR|=USART_ICR_ORECF;
 8002464:	4b55      	ldr	r3, [pc, #340]	; (80025bc <weoShowSmallImage+0x2e4>)
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	4b54      	ldr	r3, [pc, #336]	; (80025bc <weoShowSmallImage+0x2e4>)
 800246a:	2108      	movs	r1, #8
 800246c:	430a      	orrs	r2, r1
 800246e:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 8002470:	4847      	ldr	r0, [pc, #284]	; (8002590 <weoShowSmallImage+0x2b8>)
 8002472:	183b      	adds	r3, r7, r0
 8002474:	2213      	movs	r2, #19
 8002476:	701a      	strb	r2, [r3, #0]

		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002478:	4b47      	ldr	r3, [pc, #284]	; (8002598 <weoShowSmallImage+0x2c0>)
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	4b46      	ldr	r3, [pc, #280]	; (8002598 <weoShowSmallImage+0x2c0>)
 800247e:	4947      	ldr	r1, [pc, #284]	; (800259c <weoShowSmallImage+0x2c4>)
 8002480:	400a      	ands	r2, r1
 8002482:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002484:	1839      	adds	r1, r7, r0
 8002486:	4846      	ldr	r0, [pc, #280]	; (80025a0 <weoShowSmallImage+0x2c8>)
 8002488:	2332      	movs	r3, #50	; 0x32
 800248a:	2201      	movs	r2, #1
 800248c:	f006 ff6c 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 8002490:	2508      	movs	r5, #8
 8002492:	197b      	adds	r3, r7, r5
 8002494:	1cd9      	adds	r1, r3, #3
 8002496:	4842      	ldr	r0, [pc, #264]	; (80025a0 <weoShowSmallImage+0x2c8>)
 8002498:	2332      	movs	r3, #50	; 0x32
 800249a:	2201      	movs	r2, #1
 800249c:	f006 ff64 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80024a0:	197b      	adds	r3, r7, r5
 80024a2:	1c99      	adds	r1, r3, #2
 80024a4:	483e      	ldr	r0, [pc, #248]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80024a6:	2332      	movs	r3, #50	; 0x32
 80024a8:	2201      	movs	r2, #1
 80024aa:	f006 ff5d 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80024ae:	197b      	adds	r3, r7, r5
 80024b0:	1c59      	adds	r1, r3, #1
 80024b2:	483b      	ldr	r0, [pc, #236]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80024b4:	2332      	movs	r3, #50	; 0x32
 80024b6:	2201      	movs	r2, #1
 80024b8:	f006 ff56 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80024bc:	1979      	adds	r1, r7, r5
 80024be:	4838      	ldr	r0, [pc, #224]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80024c0:	2332      	movs	r3, #50	; 0x32
 80024c2:	2201      	movs	r2, #1
 80024c4:	f006 ff50 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <weoShowSmallImage+0x2dc>)
 80024ca:	881a      	ldrh	r2, [r3, #0]
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <weoShowSmallImage+0x2cc>)
 80024ce:	2110      	movs	r1, #16
 80024d0:	1879      	adds	r1, r7, r1
 80024d2:	4833      	ldr	r0, [pc, #204]	; (80025a0 <weoShowSmallImage+0x2c8>)
 80024d4:	f007 f8a0 	bl	8009618 <HAL_SPI_Receive>
		GPIOB->ODR |= 1 << 9;	// set cs
 80024d8:	4b2f      	ldr	r3, [pc, #188]	; (8002598 <weoShowSmallImage+0x2c0>)
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <weoShowSmallImage+0x2c0>)
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	0089      	lsls	r1, r1, #2
 80024e2:	430a      	orrs	r2, r1
 80024e4:	615a      	str	r2, [r3, #20]

		decY=0x01;
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <weoShowSmallImage+0x2e8>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
		if(imY % 2 !=0){
 80024ec:	4b26      	ldr	r3, [pc, #152]	; (8002588 <weoShowSmallImage+0x2b0>)
 80024ee:	191b      	adds	r3, r3, r4
 80024f0:	19db      	adds	r3, r3, r7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2201      	movs	r2, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <weoShowSmallImage+0x22c>
			decY=0x02;
 80024fe:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <weoShowSmallImage+0x2e8>)
 8002500:	2202      	movs	r2, #2
 8002502:	701a      	strb	r2, [r3, #0]
		}
		weoDrawRectangleFilled(imX, imY, imX+width-1, imY+height-decY, 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002504:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <weoShowSmallImage+0x2ac>)
 8002506:	491e      	ldr	r1, [pc, #120]	; (8002580 <weoShowSmallImage+0x2a8>)
 8002508:	185b      	adds	r3, r3, r1
 800250a:	19da      	adds	r2, r3, r7
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <weoShowSmallImage+0x2d0>)
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	18d3      	adds	r3, r2, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3b01      	subs	r3, #1
 800251a:	b2dc      	uxtb	r4, r3
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <weoShowSmallImage+0x2b0>)
 800251e:	185b      	adds	r3, r3, r1
 8002520:	19da      	adds	r2, r3, r7
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <weoShowSmallImage+0x2d8>)
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	18d3      	adds	r3, r2, r3
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <weoShowSmallImage+0x2e8>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <weoShowSmallImage+0x2b0>)
 8002538:	0008      	movs	r0, r1
 800253a:	185b      	adds	r3, r3, r1
 800253c:	19db      	adds	r3, r3, r7
 800253e:	7819      	ldrb	r1, [r3, #0]
 8002540:	4b10      	ldr	r3, [pc, #64]	; (8002584 <weoShowSmallImage+0x2ac>)
 8002542:	181b      	adds	r3, r3, r0
 8002544:	19db      	adds	r3, r3, r7
 8002546:	7818      	ldrb	r0, [r3, #0]
 8002548:	2310      	movs	r3, #16
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	23ff      	movs	r3, #255	; 0xff
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	0013      	movs	r3, r2
 8002554:	0022      	movs	r2, r4
 8002556:	f7fe ffb5 	bl	80014c4 <weoDrawRectangleFilled>
		cmd2Execute=0;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <weoShowSmallImage+0x2ec>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
//		while(BFEN==0){};
		GPIOC->ODR |= 1 << 6;	//set BF
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <weoShowSmallImage+0x2f0>)
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <weoShowSmallImage+0x2f0>)
 8002566:	2140      	movs	r1, #64	; 0x40
 8002568:	430a      	orrs	r2, r1
 800256a:	615a      	str	r2, [r3, #20]
	}
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	0018      	movs	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	4b03      	ldr	r3, [pc, #12]	; (8002580 <weoShowSmallImage+0x2a8>)
 8002574:	449d      	add	sp, r3
 8002576:	bdb0      	pop	{r4, r5, r7, pc}
 8002578:	ffffdfd8 	.word	0xffffdfd8
 800257c:	ffffdfe7 	.word	0xffffdfe7
 8002580:	00002020 	.word	0x00002020
 8002584:	ffffdfe6 	.word	0xffffdfe6
 8002588:	ffffdfe5 	.word	0xffffdfe5
 800258c:	0000201c 	.word	0x0000201c
 8002590:	00002013 	.word	0x00002013
 8002594:	ffffdfe8 	.word	0xffffdfe8
 8002598:	50000400 	.word	0x50000400
 800259c:	fffffdff 	.word	0xfffffdff
 80025a0:	20000178 	.word	0x20000178
 80025a4:	00001388 	.word	0x00001388
 80025a8:	0000201b 	.word	0x0000201b
 80025ac:	ffffdfec 	.word	0xffffdfec
 80025b0:	0000201a 	.word	0x0000201a
 80025b4:	200002ee 	.word	0x200002ee
 80025b8:	00002014 	.word	0x00002014
 80025bc:	40004400 	.word	0x40004400
 80025c0:	200002f0 	.word	0x200002f0
 80025c4:	200002ea 	.word	0x200002ea
 80025c8:	50000800 	.word	0x50000800

080025cc <soundPlay>:
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
	}
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		uint8_t soundPlay(uint8_t soundNum) {
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b08d      	sub	sp, #52	; 0x34
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	0002      	movs	r2, r0
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	701a      	strb	r2, [r3, #0]
			uint8_t memCMD = 0x13; //read command with 4-byte address
 80025d8:	232b      	movs	r3, #43	; 0x2b
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2213      	movs	r2, #19
 80025de:	701a      	strb	r2, [r3, #0]
			uint8_t soundInfo[9],addrINFO[4],addr[4],length[4];
			volatile uint32_t addrSound, address;
			uint32_t i;
			GPIOC->ODR |= 1 << 6;	//set BF //just 4 test
 80025e0:	4b97      	ldr	r3, [pc, #604]	; (8002840 <soundPlay+0x274>)
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	4b96      	ldr	r3, [pc, #600]	; (8002840 <soundPlay+0x274>)
 80025e6:	2140      	movs	r1, #64	; 0x40
 80025e8:	430a      	orrs	r2, r1
 80025ea:	615a      	str	r2, [r3, #20]
//			setVolume(0x10, 0x30, 10);	// it was setVolume(0x10, 0x30, 0x00);
//			soundNum = 0;
			address = 4194304 + (soundNum * 9);
 80025ec:	1dfb      	adds	r3, r7, #7
 80025ee:	781a      	ldrb	r2, [r3, #0]
 80025f0:	0013      	movs	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	189b      	adds	r3, r3, r2
 80025f6:	2280      	movs	r2, #128	; 0x80
 80025f8:	03d2      	lsls	r2, r2, #15
 80025fa:	4694      	mov	ip, r2
 80025fc:	4463      	add	r3, ip
 80025fe:	60fb      	str	r3, [r7, #12]
//			address = 0 + (soundNum * 9);

			curBuf = 0;
 8002600:	4b90      	ldr	r3, [pc, #576]	; (8002844 <soundPlay+0x278>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
			uint32_t lenOfsound = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
			isSoundOver = 0;
 800260a:	4b8f      	ldr	r3, [pc, #572]	; (8002848 <soundPlay+0x27c>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
			addrSound = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]

			if(isSoundOver == 1)
 8002614:	4b8c      	ldr	r3, [pc, #560]	; (8002848 <soundPlay+0x27c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d109      	bne.n	8002630 <soundPlay+0x64>
			{
				GPIOC->ODR |= 1 << 6;	//set BF
 800261c:	4b88      	ldr	r3, [pc, #544]	; (8002840 <soundPlay+0x274>)
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	4b87      	ldr	r3, [pc, #540]	; (8002840 <soundPlay+0x274>)
 8002622:	2140      	movs	r1, #64	; 0x40
 8002624:	430a      	orrs	r2, r1
 8002626:	615a      	str	r2, [r3, #20]
				curBuf = 0;
 8002628:	4b86      	ldr	r3, [pc, #536]	; (8002844 <soundPlay+0x278>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
				return;
 800262e:	e1e3      	b.n	80029f8 <soundPlay+0x42c>
			}

			if (curBuf == 0){
 8002630:	4b84      	ldr	r3, [pc, #528]	; (8002844 <soundPlay+0x278>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d000      	beq.n	800263a <soundPlay+0x6e>
 8002638:	e0af      	b.n	800279a <soundPlay+0x1ce>



				addrINFO[0] = address & 0xFF;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	241c      	movs	r4, #28
 8002640:	193b      	adds	r3, r7, r4
 8002642:	701a      	strb	r2, [r3, #0]
				addrINFO[1] = (address >> 8) & 0xFF;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b2da      	uxtb	r2, r3
 800264a:	193b      	adds	r3, r7, r4
 800264c:	705a      	strb	r2, [r3, #1]
				addrINFO[2] = (address >> 16) & 0xFF;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b2da      	uxtb	r2, r3
 8002654:	193b      	adds	r3, r7, r4
 8002656:	709a      	strb	r2, [r3, #2]
				addrINFO[3] = (address >> 24) & 0xFF;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	0e1b      	lsrs	r3, r3, #24
 800265c:	b2da      	uxtb	r2, r3
 800265e:	193b      	adds	r3, r7, r4
 8002660:	70da      	strb	r2, [r3, #3]

				GPIOB->ODR &= ~(1 << 9); //reset cs
 8002662:	4b7a      	ldr	r3, [pc, #488]	; (800284c <soundPlay+0x280>)
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <soundPlay+0x280>)
 8002668:	4979      	ldr	r1, [pc, #484]	; (8002850 <soundPlay+0x284>)
 800266a:	400a      	ands	r2, r1
 800266c:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 800266e:	232b      	movs	r3, #43	; 0x2b
 8002670:	18f9      	adds	r1, r7, r3
 8002672:	4878      	ldr	r0, [pc, #480]	; (8002854 <soundPlay+0x288>)
 8002674:	2332      	movs	r3, #50	; 0x32
 8002676:	2201      	movs	r2, #1
 8002678:	f006 fe76 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[3], 1, 50); //send address
 800267c:	193b      	adds	r3, r7, r4
 800267e:	1cd9      	adds	r1, r3, #3
 8002680:	4874      	ldr	r0, [pc, #464]	; (8002854 <soundPlay+0x288>)
 8002682:	2332      	movs	r3, #50	; 0x32
 8002684:	2201      	movs	r2, #1
 8002686:	f006 fe6f 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[2], 1, 50); //send address
 800268a:	193b      	adds	r3, r7, r4
 800268c:	1c99      	adds	r1, r3, #2
 800268e:	4871      	ldr	r0, [pc, #452]	; (8002854 <soundPlay+0x288>)
 8002690:	2332      	movs	r3, #50	; 0x32
 8002692:	2201      	movs	r2, #1
 8002694:	f006 fe68 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[1], 1, 50); //send address
 8002698:	193b      	adds	r3, r7, r4
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	486d      	ldr	r0, [pc, #436]	; (8002854 <soundPlay+0x288>)
 800269e:	2332      	movs	r3, #50	; 0x32
 80026a0:	2201      	movs	r2, #1
 80026a2:	f006 fe61 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addrINFO[0], 1, 50); //send address
 80026a6:	1939      	adds	r1, r7, r4
 80026a8:	486a      	ldr	r0, [pc, #424]	; (8002854 <soundPlay+0x288>)
 80026aa:	2332      	movs	r3, #50	; 0x32
 80026ac:	2201      	movs	r2, #1
 80026ae:	f006 fe5b 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*) & soundInfo, 9, 5000);//9 bytes of soundInfo
 80026b2:	4b69      	ldr	r3, [pc, #420]	; (8002858 <soundPlay+0x28c>)
 80026b4:	2420      	movs	r4, #32
 80026b6:	1939      	adds	r1, r7, r4
 80026b8:	4866      	ldr	r0, [pc, #408]	; (8002854 <soundPlay+0x288>)
 80026ba:	2209      	movs	r2, #9
 80026bc:	f006 ffac 	bl	8009618 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9; // set cs
 80026c0:	4b62      	ldr	r3, [pc, #392]	; (800284c <soundPlay+0x280>)
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	4b61      	ldr	r3, [pc, #388]	; (800284c <soundPlay+0x280>)
 80026c6:	2180      	movs	r1, #128	; 0x80
 80026c8:	0089      	lsls	r1, r1, #2
 80026ca:	430a      	orrs	r2, r1
 80026cc:	615a      	str	r2, [r3, #20]

				addr[0] = soundInfo[4];
 80026ce:	0021      	movs	r1, r4
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	791a      	ldrb	r2, [r3, #4]
 80026d4:	2018      	movs	r0, #24
 80026d6:	183b      	adds	r3, r7, r0
 80026d8:	701a      	strb	r2, [r3, #0]
				addr[1] = soundInfo[3];
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	78da      	ldrb	r2, [r3, #3]
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	705a      	strb	r2, [r3, #1]
				addr[2] = soundInfo[2];
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	789a      	ldrb	r2, [r3, #2]
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	709a      	strb	r2, [r3, #2]
				addr[3] = soundInfo[1];
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	785a      	ldrb	r2, [r3, #1]
 80026ee:	183b      	adds	r3, r7, r0
 80026f0:	70da      	strb	r2, [r3, #3]

//				address = 0;
	//			address = 0x29f170;

				address |= addr[3];
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	78db      	ldrb	r3, [r3, #3]
 80026f6:	001a      	movs	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	60fb      	str	r3, [r7, #12]
				address |= addr[2];
 8002704:	183b      	adds	r3, r7, r0
 8002706:	789b      	ldrb	r3, [r3, #2]
 8002708:	001a      	movs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	60fb      	str	r3, [r7, #12]
				address |= addr[1];
 8002716:	183b      	adds	r3, r7, r0
 8002718:	785b      	ldrb	r3, [r3, #1]
 800271a:	001a      	movs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
				address <<= 8;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	60fb      	str	r3, [r7, #12]
				address |= addr[0];
 8002728:	183b      	adds	r3, r7, r0
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
	//									address <<= 8;
	//									address |= addr[1];
	//									address <<= 8;
	//									address |= addr[0];

				length[0] = soundInfo[8];	//Commented 4 test
 8002734:	187b      	adds	r3, r7, r1
 8002736:	7a1a      	ldrb	r2, [r3, #8]
 8002738:	2014      	movs	r0, #20
 800273a:	183b      	adds	r3, r7, r0
 800273c:	701a      	strb	r2, [r3, #0]
				length[1] = soundInfo[7];	//Commented 4 test
 800273e:	187b      	adds	r3, r7, r1
 8002740:	79da      	ldrb	r2, [r3, #7]
 8002742:	183b      	adds	r3, r7, r0
 8002744:	705a      	strb	r2, [r3, #1]
				length[2] = soundInfo[6];	//Commented 4 test
 8002746:	187b      	adds	r3, r7, r1
 8002748:	799a      	ldrb	r2, [r3, #6]
 800274a:	183b      	adds	r3, r7, r0
 800274c:	709a      	strb	r2, [r3, #2]
				length[3] = soundInfo[5];	//Commented 4 test
 800274e:	187b      	adds	r3, r7, r1
 8002750:	795a      	ldrb	r2, [r3, #5]
 8002752:	0001      	movs	r1, r0
 8002754:	187b      	adds	r3, r7, r1
 8002756:	70da      	strb	r2, [r3, #3]

				lenOfsound |= length[3];
 8002758:	187b      	adds	r3, r7, r1
 800275a:	78db      	ldrb	r3, [r3, #3]
 800275c:	001a      	movs	r2, r3
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	4313      	orrs	r3, r2
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[2];
 800276a:	187b      	adds	r3, r7, r1
 800276c:	789b      	ldrb	r3, [r3, #2]
 800276e:	001a      	movs	r2, r3
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	4313      	orrs	r3, r2
 8002774:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[1];
 800277c:	187b      	adds	r3, r7, r1
 800277e:	785b      	ldrb	r3, [r3, #1]
 8002780:	001a      	movs	r2, r3
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	4313      	orrs	r3, r2
 8002786:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound <<= 8;
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	021b      	lsls	r3, r3, #8
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
				lenOfsound |= length[0];
 800278e:	187b      	adds	r3, r7, r1
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	001a      	movs	r2, r3
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	4313      	orrs	r3, r2
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

	//			lenOfsound = 0xe7a4;	//len1
	////			lenOfsound = 1374248;	//len0
				bufCount = lenOfsound / bufLen;
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <soundPlay+0x290>)
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	0019      	movs	r1, r3
 80027a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a2:	f7fd fcaf 	bl	8000104 <__udivsi3>
 80027a6:	0003      	movs	r3, r0
 80027a8:	001a      	movs	r2, r3
 80027aa:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <soundPlay+0x294>)
 80027ac:	601a      	str	r2, [r3, #0]
	//////////////////////////////////////////////////////////////////////////////////////// IF before is correct, after is correct //////////
				GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80027ae:	4b27      	ldr	r3, [pc, #156]	; (800284c <soundPlay+0x280>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <soundPlay+0x280>)
 80027b4:	4926      	ldr	r1, [pc, #152]	; (8002850 <soundPlay+0x284>)
 80027b6:	400a      	ands	r2, r1
 80027b8:	615a      	str	r2, [r3, #20]
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80027ba:	232b      	movs	r3, #43	; 0x2b
 80027bc:	18f9      	adds	r1, r7, r3
 80027be:	4825      	ldr	r0, [pc, #148]	; (8002854 <soundPlay+0x288>)
 80027c0:	2332      	movs	r3, #50	; 0x32
 80027c2:	2201      	movs	r2, #1
 80027c4:	f006 fdd0 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80027c8:	2418      	movs	r4, #24
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	1cd9      	adds	r1, r3, #3
 80027ce:	4821      	ldr	r0, [pc, #132]	; (8002854 <soundPlay+0x288>)
 80027d0:	2332      	movs	r3, #50	; 0x32
 80027d2:	2201      	movs	r2, #1
 80027d4:	f006 fdc8 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	1c99      	adds	r1, r3, #2
 80027dc:	481d      	ldr	r0, [pc, #116]	; (8002854 <soundPlay+0x288>)
 80027de:	2332      	movs	r3, #50	; 0x32
 80027e0:	2201      	movs	r2, #1
 80027e2:	f006 fdc1 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	481a      	ldr	r0, [pc, #104]	; (8002854 <soundPlay+0x288>)
 80027ec:	2332      	movs	r3, #50	; 0x32
 80027ee:	2201      	movs	r2, #1
 80027f0:	f006 fdba 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80027f4:	1939      	adds	r1, r7, r4
 80027f6:	4817      	ldr	r0, [pc, #92]	; (8002854 <soundPlay+0x288>)
 80027f8:	2332      	movs	r3, #50	; 0x32
 80027fa:	2201      	movs	r2, #1
 80027fc:	f006 fdb4 	bl	8009368 <HAL_SPI_Transmit>
				HAL_SPI_Receive(&hspi2, (uint8_t*)  & soundBuf[0], bufLen, 5000);
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <soundPlay+0x290>)
 8002802:	881a      	ldrh	r2, [r3, #0]
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <soundPlay+0x28c>)
 8002806:	4917      	ldr	r1, [pc, #92]	; (8002864 <soundPlay+0x298>)
 8002808:	4812      	ldr	r0, [pc, #72]	; (8002854 <soundPlay+0x288>)
 800280a:	f006 ff05 	bl	8009618 <HAL_SPI_Receive>
				GPIOB->ODR |= 1 << 9;	//set FLASH CS
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <soundPlay+0x280>)
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <soundPlay+0x280>)
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	0089      	lsls	r1, r1, #2
 8002818:	430a      	orrs	r2, r1
 800281a:	615a      	str	r2, [r3, #20]



	//			addrSound = 9;	// 4 test only!
				addrSound = address;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	613b      	str	r3, [r7, #16]

				speakerPowerUp();
 8002820:	f000 f986 	bl	8002b30 <speakerPowerUp>

				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 8002824:	4b0d      	ldr	r3, [pc, #52]	; (800285c <soundPlay+0x290>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	490d      	ldr	r1, [pc, #52]	; (8002864 <soundPlay+0x298>)
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <soundPlay+0x29c>)
 8002830:	0018      	movs	r0, r3
 8002832:	f005 f8f3 	bl	8007a1c <HAL_I2S_Transmit_DMA>
				half_of_buf = 1;
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <soundPlay+0x2a0>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
	//==================================================1st time play buffer =========================================================
	//			GPIOC->ODR |= 1 << 6;	//set BF
	//			GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
				while(curBuf <= bufCount)
 800283c:	e0d4      	b.n	80029e8 <soundPlay+0x41c>
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	50000800 	.word	0x50000800
 8002844:	200002f4 	.word	0x200002f4
 8002848:	200012fd 	.word	0x200012fd
 800284c:	50000400 	.word	0x50000400
 8002850:	fffffdff 	.word	0xfffffdff
 8002854:	20000178 	.word	0x20000178
 8002858:	00001388 	.word	0x00001388
 800285c:	20000030 	.word	0x20000030
 8002860:	200002f8 	.word	0x200002f8
 8002864:	200002fc 	.word	0x200002fc
 8002868:	200000e0 	.word	0x200000e0
 800286c:	200012fc 	.word	0x200012fc
				{
	//							GPIOC->ODR |= 1 << 6;	//set BF
	//							GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
					if(half_of_buf == 2)
 8002870:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <soundPlay+0x434>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d15c      	bne.n	8002932 <soundPlay+0x366>
					{
						GPIOC->ODR |= 1 << 6;	//set BF
 8002878:	4b62      	ldr	r3, [pc, #392]	; (8002a04 <soundPlay+0x438>)
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <soundPlay+0x438>)
 800287e:	2140      	movs	r1, #64	; 0x40
 8002880:	430a      	orrs	r2, r1
 8002882:	615a      	str	r2, [r3, #20]
	//					GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 8002884:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <soundPlay+0x43c>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	001a      	movs	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	2418      	movs	r4, #24
 800289a:	193b      	adds	r3, r7, r4
 800289c:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	0e1b      	lsrs	r3, r3, #24
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	193b      	adds	r3, r7, r4
 80028ba:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <soundPlay+0x440>)
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	4b52      	ldr	r3, [pc, #328]	; (8002a0c <soundPlay+0x440>)
 80028c2:	4953      	ldr	r1, [pc, #332]	; (8002a10 <soundPlay+0x444>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 80028c8:	232b      	movs	r3, #43	; 0x2b
 80028ca:	18f9      	adds	r1, r7, r3
 80028cc:	4851      	ldr	r0, [pc, #324]	; (8002a14 <soundPlay+0x448>)
 80028ce:	2332      	movs	r3, #50	; 0x32
 80028d0:	2201      	movs	r2, #1
 80028d2:	f006 fd49 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	1cd9      	adds	r1, r3, #3
 80028da:	484e      	ldr	r0, [pc, #312]	; (8002a14 <soundPlay+0x448>)
 80028dc:	2332      	movs	r3, #50	; 0x32
 80028de:	2201      	movs	r2, #1
 80028e0:	f006 fd42 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 80028e4:	193b      	adds	r3, r7, r4
 80028e6:	1c99      	adds	r1, r3, #2
 80028e8:	484a      	ldr	r0, [pc, #296]	; (8002a14 <soundPlay+0x448>)
 80028ea:	2332      	movs	r3, #50	; 0x32
 80028ec:	2201      	movs	r2, #1
 80028ee:	f006 fd3b 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	1c59      	adds	r1, r3, #1
 80028f6:	4847      	ldr	r0, [pc, #284]	; (8002a14 <soundPlay+0x448>)
 80028f8:	2332      	movs	r3, #50	; 0x32
 80028fa:	2201      	movs	r2, #1
 80028fc:	f006 fd34 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 8002900:	1939      	adds	r1, r7, r4
 8002902:	4844      	ldr	r0, [pc, #272]	; (8002a14 <soundPlay+0x448>)
 8002904:	2332      	movs	r3, #50	; 0x32
 8002906:	2201      	movs	r2, #1
 8002908:	f006 fd2e 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[0], (bufLen >> 1), 5000);
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <soundPlay+0x43c>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	085b      	lsrs	r3, r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <soundPlay+0x44c>)
 8002916:	4941      	ldr	r1, [pc, #260]	; (8002a1c <soundPlay+0x450>)
 8002918:	483e      	ldr	r0, [pc, #248]	; (8002a14 <soundPlay+0x448>)
 800291a:	f006 fe7d 	bl	8009618 <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 800291e:	4b3b      	ldr	r3, [pc, #236]	; (8002a0c <soundPlay+0x440>)
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <soundPlay+0x440>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0089      	lsls	r1, r1, #2
 8002928:	430a      	orrs	r2, r1
 800292a:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 800292c:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <soundPlay+0x434>)
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
					}
					if(half_of_buf == 0)
 8002932:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <soundPlay+0x434>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d156      	bne.n	80029e8 <soundPlay+0x41c>
					{
	//					GPIOC->ODR |= 1 << 6;	//set BF
//						GPIOC->ODR &= ~(1 << 6);	//set BF сюда приходит
						addrSound = (addrSound + (bufLen >> 1));
 800293a:	4b33      	ldr	r3, [pc, #204]	; (8002a08 <soundPlay+0x43c>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	001a      	movs	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	18d3      	adds	r3, r2, r3
 8002948:	613b      	str	r3, [r7, #16]

						addr[0] = addrSound & 0xFF;
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	2418      	movs	r4, #24
 8002950:	193b      	adds	r3, r7, r4
 8002952:	701a      	strb	r2, [r3, #0]
						addr[1] = (addrSound >> 8) & 0xFF;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	b2da      	uxtb	r2, r3
 800295a:	193b      	adds	r3, r7, r4
 800295c:	705a      	strb	r2, [r3, #1]
						addr[2] = (addrSound >> 16) & 0xFF;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	0c1b      	lsrs	r3, r3, #16
 8002962:	b2da      	uxtb	r2, r3
 8002964:	193b      	adds	r3, r7, r4
 8002966:	709a      	strb	r2, [r3, #2]
						addr[3] = (addrSound >> 24) & 0xFF;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	0e1b      	lsrs	r3, r3, #24
 800296c:	b2da      	uxtb	r2, r3
 800296e:	193b      	adds	r3, r7, r4
 8002970:	70da      	strb	r2, [r3, #3]

						GPIOB->ODR &= ~(1 << 9); //reset FLASH CS
 8002972:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <soundPlay+0x440>)
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <soundPlay+0x440>)
 8002978:	4925      	ldr	r1, [pc, #148]	; (8002a10 <soundPlay+0x444>)
 800297a:	400a      	ands	r2, r1
 800297c:	615a      	str	r2, [r3, #20]
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & memCMD, 1, 50); //read command with 4-byte address
 800297e:	232b      	movs	r3, #43	; 0x2b
 8002980:	18f9      	adds	r1, r7, r3
 8002982:	4824      	ldr	r0, [pc, #144]	; (8002a14 <soundPlay+0x448>)
 8002984:	2332      	movs	r3, #50	; 0x32
 8002986:	2201      	movs	r2, #1
 8002988:	f006 fcee 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[3], 1, 50); //send address
 800298c:	193b      	adds	r3, r7, r4
 800298e:	1cd9      	adds	r1, r3, #3
 8002990:	4820      	ldr	r0, [pc, #128]	; (8002a14 <soundPlay+0x448>)
 8002992:	2332      	movs	r3, #50	; 0x32
 8002994:	2201      	movs	r2, #1
 8002996:	f006 fce7 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[2], 1, 50); //send address
 800299a:	193b      	adds	r3, r7, r4
 800299c:	1c99      	adds	r1, r3, #2
 800299e:	481d      	ldr	r0, [pc, #116]	; (8002a14 <soundPlay+0x448>)
 80029a0:	2332      	movs	r3, #50	; 0x32
 80029a2:	2201      	movs	r2, #1
 80029a4:	f006 fce0 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[1], 1, 50); //send address
 80029a8:	193b      	adds	r3, r7, r4
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	4819      	ldr	r0, [pc, #100]	; (8002a14 <soundPlay+0x448>)
 80029ae:	2332      	movs	r3, #50	; 0x32
 80029b0:	2201      	movs	r2, #1
 80029b2:	f006 fcd9 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Transmit(&hspi2, (uint8_t*) & addr[0], 1, 50); //send address
 80029b6:	1939      	adds	r1, r7, r4
 80029b8:	4816      	ldr	r0, [pc, #88]	; (8002a14 <soundPlay+0x448>)
 80029ba:	2332      	movs	r3, #50	; 0x32
 80029bc:	2201      	movs	r2, #1
 80029be:	f006 fcd3 	bl	8009368 <HAL_SPI_Transmit>
						HAL_SPI_Receive(&hspi2, (uint8_t*)&soundBuf[2048], (bufLen >> 1), 5000);
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <soundPlay+0x43c>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b13      	ldr	r3, [pc, #76]	; (8002a18 <soundPlay+0x44c>)
 80029cc:	4914      	ldr	r1, [pc, #80]	; (8002a20 <soundPlay+0x454>)
 80029ce:	4811      	ldr	r0, [pc, #68]	; (8002a14 <soundPlay+0x448>)
 80029d0:	f006 fe22 	bl	8009618 <HAL_SPI_Receive>
						GPIOB->ODR |= 1 << 9;	//set FLASH CS
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <soundPlay+0x440>)
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <soundPlay+0x440>)
 80029da:	2180      	movs	r1, #128	; 0x80
 80029dc:	0089      	lsls	r1, r1, #2
 80029de:	430a      	orrs	r2, r1
 80029e0:	615a      	str	r2, [r3, #20]
						half_of_buf = 1;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <soundPlay+0x434>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
				while(curBuf <= bufCount)
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <soundPlay+0x458>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <soundPlay+0x45c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d800      	bhi.n	80029f6 <soundPlay+0x42a>
 80029f4:	e73c      	b.n	8002870 <soundPlay+0x2a4>
					}
				}
				return;
 80029f6:	46c0      	nop			; (mov r8, r8)
			}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b00d      	add	sp, #52	; 0x34
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	200012fc 	.word	0x200012fc
 8002a04:	50000800 	.word	0x50000800
 8002a08:	20000030 	.word	0x20000030
 8002a0c:	50000400 	.word	0x50000400
 8002a10:	fffffdff 	.word	0xfffffdff
 8002a14:	20000178 	.word	0x20000178
 8002a18:	00001388 	.word	0x00001388
 8002a1c:	200002fc 	.word	0x200002fc
 8002a20:	20000afc 	.word	0x20000afc
 8002a24:	200002f4 	.word	0x200002f4
 8002a28:	200002f8 	.word	0x200002f8

08002a2c <sound_half_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_half_transfer_callback()
		{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
			half_of_buf = 2;
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <sound_half_transfer_callback+0x10>)
 8002a32:	2202      	movs	r2, #2
 8002a34:	701a      	strb	r2, [r3, #0]
		}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200012fc 	.word	0x200012fc

08002a40 <sound_full_transfer_callback>:
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		void sound_full_transfer_callback()
		{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
			curBuf += 1;
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <sound_full_transfer_callback+0x44>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <sound_full_transfer_callback+0x44>)
 8002a4c:	601a      	str	r2, [r3, #0]
			if(curBuf <= bufCount)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <sound_full_transfer_callback+0x44>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <sound_full_transfer_callback+0x48>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d80c      	bhi.n	8002a74 <sound_full_transfer_callback+0x34>
			{
				HAL_I2S_Transmit_DMA(&hi2s1, (uint16_t*) & soundBuf[0], (bufLen >> 1));
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <sound_full_transfer_callback+0x4c>)
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	490b      	ldr	r1, [pc, #44]	; (8002a90 <sound_full_transfer_callback+0x50>)
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <sound_full_transfer_callback+0x54>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f004 ffd8 	bl	8007a1c <HAL_I2S_Transmit_DMA>
				half_of_buf = 0;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <sound_full_transfer_callback+0x58>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
			else
			{
				isSoundOver = 1;
				speakerMute();
			}
		}
 8002a72:	e004      	b.n	8002a7e <sound_full_transfer_callback+0x3e>
				isSoundOver = 1;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <sound_full_transfer_callback+0x5c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
				speakerMute();
 8002a7a:	f000 f84d 	bl	8002b18 <speakerMute>
		}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200002f4 	.word	0x200002f4
 8002a88:	200002f8 	.word	0x200002f8
 8002a8c:	20000030 	.word	0x20000030
 8002a90:	200002fc 	.word	0x200002fc
 8002a94:	200000e0 	.word	0x200000e0
 8002a98:	200012fc 	.word	0x200012fc
 8002a9c:	200012fd 	.word	0x200012fd

08002aa0 <setVolume>:
		//=============================================================================================
			void setVolume(uint8_t AMP, uint8_t DAC_Gain, uint8_t spkAttn)
			{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0004      	movs	r4, r0
 8002aa8:	0008      	movs	r0, r1
 8002aaa:	0011      	movs	r1, r2
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	1c22      	adds	r2, r4, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	1dbb      	adds	r3, r7, #6
 8002ab4:	1c02      	adds	r2, r0, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	1d7b      	adds	r3, r7, #5
 8002aba:	1c0a      	adds	r2, r1, #0
 8002abc:	701a      	strb	r2, [r3, #0]
				volume = 117 - (volume * 7);
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <setVolume+0x74>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	1c1a      	adds	r2, r3, #0
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3375      	adds	r3, #117	; 0x75
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <setVolume+0x74>)
 8002ad0:	701a      	strb	r2, [r3, #0]
				I2C_SOUND_ChangePage(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fe fddc 	bl	8001690 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x41, DAC_Gain);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000) cnDacValueOn by SB
 8002ad8:	1dbb      	adds	r3, r7, #6
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	2041      	movs	r0, #65	; 0x41
 8002ae0:	f7fe fdf4 	bl	80016cc <WriteReg_I2C_SOUND>
					I2C_SOUND_ChangePage(0x01);
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f7fe fdd3 	bl	8001690 <I2C_SOUND_ChangePage>
					WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
 8002aea:	2100      	movs	r1, #0
 8002aec:	2010      	movs	r0, #16
 8002aee:	f7fe fded 	bl	80016cc <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x2E, spkAttn);	//SPK attn. Gain =0dB (P1, R46, 0d - 116 d, 255d)
 8002af2:	1d7b      	adds	r3, r7, #5
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	0019      	movs	r1, r3
 8002af8:	202e      	movs	r0, #46	; 0x2e
 8002afa:	f7fe fde7 	bl	80016cc <WriteReg_I2C_SOUND>
					WriteReg_I2C_SOUND(0x30, AMP);	//SPK driver Gain=6.0dB (P1, R48, 16d - 80d)
 8002afe:	1dfb      	adds	r3, r7, #7
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	0019      	movs	r1, r3
 8002b04:	2030      	movs	r0, #48	; 0x30
 8002b06:	f7fe fde1 	bl	80016cc <WriteReg_I2C_SOUND>
//					WriteReg_I2C_SOUND(0x30, volume);	//SPK driver Gain=6.0dB (P1, R48, D6-D4=001
			}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b003      	add	sp, #12
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	2000028b 	.word	0x2000028b

08002b18 <speakerMute>:
			//=============================================================================================
			void speakerMute(void)
			{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7fe fdb7 	bl	8001690 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 0);
 8002b22:	2100      	movs	r1, #0
 8002b24:	202d      	movs	r0, #45	; 0x2d
 8002b26:	f7fe fdd1 	bl	80016cc <WriteReg_I2C_SOUND>
			}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <speakerPowerUp>:
			//=============================================================================================
			void speakerPowerUp(void)
			{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
				I2C_SOUND_ChangePage(0x01);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7fe fdab 	bl	8001690 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2D, 2);
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	202d      	movs	r0, #45	; 0x2d
 8002b3e:	f7fe fdc5 	bl	80016cc <WriteReg_I2C_SOUND>
			}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOB->ODR |= 1 << 9;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	4a29      	ldr	r2, [pc, #164]	; (8002bf8 <MEM_GetID+0xb0>)
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002b56:	1dfb      	adds	r3, r7, #7
 8002b58:	229e      	movs	r2, #158	; 0x9e
 8002b5a:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~(1 <<9);	//reset cs
 8002b5c:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <MEM_GetID+0xb4>)
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	4b26      	ldr	r3, [pc, #152]	; (8002bfc <MEM_GetID+0xb4>)
 8002b62:	4927      	ldr	r1, [pc, #156]	; (8002c00 <MEM_GetID+0xb8>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002b68:	1df9      	adds	r1, r7, #7
 8002b6a:	4826      	ldr	r0, [pc, #152]	; (8002c04 <MEM_GetID+0xbc>)
 8002b6c:	2332      	movs	r3, #50	; 0x32
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f006 fbfa 	bl	8009368 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b74:	23fa      	movs	r3, #250	; 0xfa
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	1d39      	adds	r1, r7, #4
 8002b7a:	4822      	ldr	r0, [pc, #136]	; (8002c04 <MEM_GetID+0xbc>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f006 fd4b 	bl	8009618 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	001a      	movs	r2, r3
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MEM_GetID+0xc0>)
 8002b8a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002b8c:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MEM_GetID+0xc0>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <MEM_GetID+0xc0>)
 8002b94:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002b96:	23fa      	movs	r3, #250	; 0xfa
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	1d39      	adds	r1, r7, #4
 8002b9c:	4819      	ldr	r0, [pc, #100]	; (8002c04 <MEM_GetID+0xbc>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f006 fd3a 	bl	8009618 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	001a      	movs	r2, r3
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MEM_GetID+0xc0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	18d2      	adds	r2, r2, r3
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MEM_GetID+0xc0>)
 8002bb2:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 8002bb4:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MEM_GetID+0xc0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <MEM_GetID+0xc0>)
 8002bbc:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002bbe:	23fa      	movs	r3, #250	; 0xfa
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	1d39      	adds	r1, r7, #4
 8002bc4:	480f      	ldr	r0, [pc, #60]	; (8002c04 <MEM_GetID+0xbc>)
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f006 fd26 	bl	8009618 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <MEM_GetID+0xc0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	18d2      	adds	r2, r2, r3
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <MEM_GetID+0xc0>)
 8002bda:	601a      	str	r2, [r3, #0]
		GPIOB->ODR |= 1 << 9;                    			// set cs
 8002bdc:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <MEM_GetID+0xb4>)
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MEM_GetID+0xb4>)
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	0089      	lsls	r1, r1, #2
 8002be6:	430a      	orrs	r2, r1
 8002be8:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <MEM_GetID+0xc0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
	}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	0800c9c4 	.word	0x0800c9c4
 8002bfc:	50000400 	.word	0x50000400
 8002c00:	fffffdff 	.word	0xfffffdff
 8002c04:	20000178 	.word	0x20000178
 8002c08:	200002b0 	.word	0x200002b0

08002c0c <cmdExecute>:
	uint16_t Scount(void){
		LIS3DHreadData();

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	0002      	movs	r2, r0
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002c18:	4b6c      	ldr	r3, [pc, #432]	; (8002dcc <cmdExecute+0x1c0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d100      	bne.n	8002c22 <cmdExecute+0x16>
 8002c20:	e0ca      	b.n	8002db8 <cmdExecute+0x1ac>
		if(soundReady==0){return;}
 8002c22:	4b6b      	ldr	r3, [pc, #428]	; (8002dd0 <cmdExecute+0x1c4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d100      	bne.n	8002c2c <cmdExecute+0x20>
 8002c2a:	e0c7      	b.n	8002dbc <cmdExecute+0x1b0>
//		if(cmd[0]==00){return;}
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002c2c:	4b69      	ldr	r3, [pc, #420]	; (8002dd4 <cmdExecute+0x1c8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d000      	beq.n	8002c36 <cmdExecute+0x2a>
 8002c34:	e0c4      	b.n	8002dc0 <cmdExecute+0x1b4>
		USART2->ICR|=USART_ICR_ORECF;
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <cmdExecute+0x1cc>)
 8002c38:	6a1a      	ldr	r2, [r3, #32]
 8002c3a:	4b67      	ldr	r3, [pc, #412]	; (8002dd8 <cmdExecute+0x1cc>)
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b11      	cmp	r3, #17
 8002c48:	d113      	bne.n	8002c72 <cmdExecute+0x66>
			GPIOC->ODR &=~ GPIO_ODR_OD6;
 8002c4a:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <cmdExecute+0x1d0>)
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <cmdExecute+0x1d0>)
 8002c50:	2140      	movs	r1, #64	; 0x40
 8002c52:	438a      	bics	r2, r1
 8002c54:	615a      	str	r2, [r3, #20]
			bf4me=0x11;	//set BF flag 4 me
 8002c56:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <cmdExecute+0x1c8>)
 8002c58:	2211      	movs	r2, #17
 8002c5a:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
			weoShowFullScreen(picNum);
 8002c5c:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <cmdExecute+0x1d4>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff fa9b 	bl	800219c <weoShowFullScreen>
//			weoShowFullScreenDMA(picNum);
			USART2->ICR|=USART_ICR_ORECF;
 8002c66:	4b5c      	ldr	r3, [pc, #368]	; (8002dd8 <cmdExecute+0x1cc>)
 8002c68:	6a1a      	ldr	r2, [r3, #32]
 8002c6a:	4b5b      	ldr	r3, [pc, #364]	; (8002dd8 <cmdExecute+0x1cc>)
 8002c6c:	2108      	movs	r1, #8
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	621a      	str	r2, [r3, #32]
				}
		if(cmd2Execute==0x12){
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b12      	cmp	r3, #18
 8002c78:	d10d      	bne.n	8002c96 <cmdExecute+0x8a>
			bf4me=0x12;	//set BF flag 4 me
 8002c7a:	4b56      	ldr	r3, [pc, #344]	; (8002dd4 <cmdExecute+0x1c8>)
 8002c7c:	2212      	movs	r2, #18
 8002c7e:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002c80:	4b57      	ldr	r3, [pc, #348]	; (8002de0 <cmdExecute+0x1d4>)
 8002c82:	7818      	ldrb	r0, [r3, #0]
 8002c84:	4b57      	ldr	r3, [pc, #348]	; (8002de4 <cmdExecute+0x1d8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b2d9      	uxtb	r1, r3
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <cmdExecute+0x1dc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	001a      	movs	r2, r3
 8002c92:	f7ff fb21 	bl	80022d8 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b13      	cmp	r3, #19
 8002c9c:	d111      	bne.n	8002cc2 <cmdExecute+0xb6>
			bf4me=0x13;	//set BF flag 4 me
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <cmdExecute+0x1c8>)
 8002ca0:	2213      	movs	r2, #19
 8002ca2:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY,strLen,fontInfo,dataASCII);
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	; (8002de4 <cmdExecute+0x1d8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b2d8      	uxtb	r0, r3
 8002caa:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <cmdExecute+0x1dc>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	b2d9      	uxtb	r1, r3
 8002cb0:	4b4e      	ldr	r3, [pc, #312]	; (8002dec <cmdExecute+0x1e0>)
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	4b4e      	ldr	r3, [pc, #312]	; (8002df0 <cmdExecute+0x1e4>)
 8002cb6:	781c      	ldrb	r4, [r3, #0]
 8002cb8:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <cmdExecute+0x1e8>)
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	0023      	movs	r3, r4
 8002cbe:	f000 f8a1 	bl	8002e04 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 8002cc2:	1dfb      	adds	r3, r7, #7
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b14      	cmp	r3, #20
 8002cc8:	d10d      	bne.n	8002ce6 <cmdExecute+0xda>
//			if(soundReady!=1){return;}
			bf4me=0x14;	//set BF flag 4 me
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <cmdExecute+0x1c8>)
 8002ccc:	2214      	movs	r2, #20
 8002cce:	701a      	strb	r2, [r3, #0]
			soundPlay(numSound);
 8002cd0:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <cmdExecute+0x1ec>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f7ff fc79 	bl	80025cc <soundPlay>
			GPIOC->ODR |= 1 << 6;	//set BF
 8002cda:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <cmdExecute+0x1d0>)
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <cmdExecute+0x1d0>)
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	615a      	str	r2, [r3, #20]

		}
		if(cmd2Execute==0x15){
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b15      	cmp	r3, #21
 8002cec:	d153      	bne.n	8002d96 <cmdExecute+0x18a>
			bf4me=0x15;	//set BF flag 4 me
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <cmdExecute+0x1c8>)
 8002cf0:	2215      	movs	r2, #21
 8002cf2:	701a      	strb	r2, [r3, #0]
			I2C_SOUND_ChangePage(0x01);
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f7fe fccb 	bl	8001690 <I2C_SOUND_ChangePage>
//			WriteReg_I2C_SOUND(0x10, 0x00);	//Headphone is muted// 1<<6 by SB
			if(volume==0x00){
 8002cfa:	4b40      	ldr	r3, [pc, #256]	; (8002dfc <cmdExecute+0x1f0>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <cmdExecute+0x104>
				I2C_SOUND_ChangePage(0x01);
 8002d02:	2001      	movs	r0, #1
 8002d04:	f7fe fcc4 	bl	8001690 <I2C_SOUND_ChangePage>
				WriteReg_I2C_SOUND(0x2E,0xFF);// mute
 8002d08:	21ff      	movs	r1, #255	; 0xff
 8002d0a:	202e      	movs	r0, #46	; 0x2e
 8002d0c:	f7fe fcde 	bl	80016cc <WriteReg_I2C_SOUND>
			}
			I2C_SOUND_ChangePage(0x01);
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7fe fcbd 	bl	8001690 <I2C_SOUND_ChangePage>
			WriteReg_I2C_SOUND(0x2E, volume);	//SPK attn. Gain =0dB (P1, R46, D6-D0=000000) FF- speaker muted, 0x00 - 0x74 - available
 8002d16:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <cmdExecute+0x1f0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	202e      	movs	r0, #46	; 0x2e
 8002d1e:	f7fe fcd5 	bl	80016cc <WriteReg_I2C_SOUND>

			if(contrast==0x00){
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <cmdExecute+0x1f4>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <cmdExecute+0x124>
				weoClear();
 8002d2a:	f7fe fb67 	bl	80013fc <weoClear>
 8002d2e:	e029      	b.n	8002d84 <cmdExecute+0x178>
			}
			else{
				GPIOA->ODR &= ~(1 << 6);	//reset cs
 8002d30:	23a0      	movs	r3, #160	; 0xa0
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	23a0      	movs	r3, #160	; 0xa0
 8002d38:	05db      	lsls	r3, r3, #23
 8002d3a:	2140      	movs	r1, #64	; 0x40
 8002d3c:	438a      	bics	r2, r1
 8002d3e:	615a      	str	r2, [r3, #20]
				GPIOA->ODR &= ~(1 << 7);	// reset dc
 8002d40:	23a0      	movs	r3, #160	; 0xa0
 8002d42:	05db      	lsls	r3, r3, #23
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	23a0      	movs	r3, #160	; 0xa0
 8002d48:	05db      	lsls	r3, r3, #23
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	615a      	str	r2, [r3, #20]
				USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8002d50:	2081      	movs	r0, #129	; 0x81
 8002d52:	f7fe faa5 	bl	80012a0 <USART_AS_SPI_sendCMD>
				USART_AS_SPI_sendCMD(contrast*0x10);
 8002d56:	4b2a      	ldr	r3, [pc, #168]	; (8002e00 <cmdExecute+0x1f4>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7fe fa9e 	bl	80012a0 <USART_AS_SPI_sendCMD>
				GPIOA->ODR |= 1 << 7;	//set dc
 8002d64:	23a0      	movs	r3, #160	; 0xa0
 8002d66:	05db      	lsls	r3, r3, #23
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	23a0      	movs	r3, #160	; 0xa0
 8002d6c:	05db      	lsls	r3, r3, #23
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	430a      	orrs	r2, r1
 8002d72:	615a      	str	r2, [r3, #20]
				GPIOA->ODR |= 1 << 6;	//set cs
 8002d74:	23a0      	movs	r3, #160	; 0xa0
 8002d76:	05db      	lsls	r3, r3, #23
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	23a0      	movs	r3, #160	; 0xa0
 8002d7c:	05db      	lsls	r3, r3, #23
 8002d7e:	2140      	movs	r1, #64	; 0x40
 8002d80:	430a      	orrs	r2, r1
 8002d82:	615a      	str	r2, [r3, #20]
			}
//			bf4me=0x15;	//set BF flag 4 me
			cmd2Execute=0;
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <cmdExecute+0x1d0>)
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <cmdExecute+0x1d0>)
 8002d90:	2140      	movs	r1, #64	; 0x40
 8002d92:	430a      	orrs	r2, r1
 8002d94:	615a      	str	r2, [r3, #20]
		}
		if(cmd2Execute==0x16){
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b16      	cmp	r3, #22
 8002d9c:	d102      	bne.n	8002da4 <cmdExecute+0x198>
			bf4me=0x16;	//set BF flag 4 me
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <cmdExecute+0x1c8>)
 8002da0:	2216      	movs	r2, #22
 8002da2:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 8002da4:	1dfb      	adds	r3, r7, #7
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <cmdExecute+0x1cc>)
 8002dac:	6a1a      	ldr	r2, [r3, #32]
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <cmdExecute+0x1cc>)
 8002db0:	2108      	movs	r1, #8
 8002db2:	430a      	orrs	r2, r1
 8002db4:	621a      	str	r2, [r3, #32]
 8002db6:	e004      	b.n	8002dc2 <cmdExecute+0x1b6>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	e002      	b.n	8002dc2 <cmdExecute+0x1b6>
		if(soundReady==0){return;}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	e000      	b.n	8002dc2 <cmdExecute+0x1b6>
		if (bf4me!=0x00){return;}	// protection against false BF resets
 8002dc0:	46c0      	nop			; (mov r8, r8)
	}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b003      	add	sp, #12
 8002dc8:	bd90      	pop	{r4, r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	200002b4 	.word	0x200002b4
 8002dd0:	20000032 	.word	0x20000032
 8002dd4:	200002eb 	.word	0x200002eb
 8002dd8:	40004400 	.word	0x40004400
 8002ddc:	50000800 	.word	0x50000800
 8002de0:	20000289 	.word	0x20000289
 8002de4:	20000290 	.word	0x20000290
 8002de8:	20000294 	.word	0x20000294
 8002dec:	2000028e 	.word	0x2000028e
 8002df0:	200002f1 	.word	0x200002f1
 8002df4:	2000029c 	.word	0x2000029c
 8002df8:	2000028a 	.word	0x2000028a
 8002dfc:	2000028b 	.word	0x2000028b
 8002e00:	2000028c 	.word	0x2000028c

08002e04 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t fontInfo,uint8_t dataASCII[]){
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	46ce      	mov	lr, r9
 8002e08:	4647      	mov	r7, r8
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b0e5      	sub	sp, #404	; 0x194
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	0016      	movs	r6, r2
 8002e12:	469c      	mov	ip, r3
 8002e14:	2320      	movs	r3, #32
 8002e16:	33ff      	adds	r3, #255	; 0xff
 8002e18:	2208      	movs	r2, #8
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	19da      	adds	r2, r3, r7
 8002e1e:	1c03      	adds	r3, r0, #0
 8002e20:	7013      	strb	r3, [r2, #0]
 8002e22:	238f      	movs	r3, #143	; 0x8f
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2208      	movs	r2, #8
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	19da      	adds	r2, r3, r7
 8002e2c:	1c0b      	adds	r3, r1, #0
 8002e2e:	7013      	strb	r3, [r2, #0]
 8002e30:	221e      	movs	r2, #30
 8002e32:	32ff      	adds	r2, #255	; 0xff
 8002e34:	2308      	movs	r3, #8
 8002e36:	18d3      	adds	r3, r2, r3
 8002e38:	19da      	adds	r2, r3, r7
 8002e3a:	1c33      	adds	r3, r6, #0
 8002e3c:	7013      	strb	r3, [r2, #0]
 8002e3e:	268e      	movs	r6, #142	; 0x8e
 8002e40:	0076      	lsls	r6, r6, #1
 8002e42:	2308      	movs	r3, #8
 8002e44:	18f3      	adds	r3, r6, r3
 8002e46:	19da      	adds	r2, r3, r7
 8002e48:	4663      	mov	r3, ip
 8002e4a:	7013      	strb	r3, [r2, #0]
			uint8_t X_increment,ASCII_height,X_width,ASCII_X,decY,fontCur,contrast,contrastH,contrastL;
//			uint8_t weoBuffer1[49],weoBuffer2[49],weoBuffer[49];
			uint16_t i,j,k, symLen;
			ASCII_X=imX;
 8002e4c:	235f      	movs	r3, #95	; 0x5f
 8002e4e:	218c      	movs	r1, #140	; 0x8c
 8002e50:	0049      	lsls	r1, r1, #1
 8002e52:	185a      	adds	r2, r3, r1
 8002e54:	2308      	movs	r3, #8
 8002e56:	469c      	mov	ip, r3
 8002e58:	44bc      	add	ip, r7
 8002e5a:	4462      	add	r2, ip
 8002e5c:	2020      	movs	r0, #32
 8002e5e:	30ff      	adds	r0, #255	; 0xff
 8002e60:	2308      	movs	r3, #8
 8002e62:	18c3      	adds	r3, r0, r3
 8002e64:	19db      	adds	r3, r3, r7
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	7013      	strb	r3, [r2, #0]

			contrastL = (fontInfo & 0xF0)>>4;
 8002e6a:	205e      	movs	r0, #94	; 0x5e
 8002e6c:	1842      	adds	r2, r0, r1
 8002e6e:	2308      	movs	r3, #8
 8002e70:	469c      	mov	ip, r3
 8002e72:	44bc      	add	ip, r7
 8002e74:	4462      	add	r2, ip
 8002e76:	2308      	movs	r3, #8
 8002e78:	18f3      	adds	r3, r6, r3
 8002e7a:	19db      	adds	r3, r3, r7
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	7013      	strb	r3, [r2, #0]
			contrastH = (contrastL)<<4;
 8002e82:	265d      	movs	r6, #93	; 0x5d
 8002e84:	1872      	adds	r2, r6, r1
 8002e86:	2308      	movs	r3, #8
 8002e88:	469c      	mov	ip, r3
 8002e8a:	44bc      	add	ip, r7
 8002e8c:	4462      	add	r2, ip
 8002e8e:	1843      	adds	r3, r0, r1
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	2308      	movs	r3, #8
 8002e94:	469c      	mov	ip, r3
 8002e96:	44bc      	add	ip, r7
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4463      	add	r3, ip
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	7013      	strb	r3, [r2, #0]
			contrast = contrastH|contrastL;
 8002ea2:	235c      	movs	r3, #92	; 0x5c
 8002ea4:	000a      	movs	r2, r1
 8002ea6:	1859      	adds	r1, r3, r1
 8002ea8:	2308      	movs	r3, #8
 8002eaa:	469c      	mov	ip, r3
 8002eac:	44bc      	add	ip, r7
 8002eae:	4461      	add	r1, ip
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	18f2      	adds	r2, r6, r3
 8002eb4:	2608      	movs	r6, #8
 8002eb6:	46b4      	mov	ip, r6
 8002eb8:	44bc      	add	ip, r7
 8002eba:	4462      	add	r2, ip
 8002ebc:	001e      	movs	r6, r3
 8002ebe:	18c0      	adds	r0, r0, r3
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	18c3      	adds	r3, r0, r3
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	700b      	strb	r3, [r1, #0]
//			contrast = (fontInfo & 0xF0)>>4;
//			contrast=0x33;

			decY=0x01;
 8002ece:	2160      	movs	r1, #96	; 0x60
 8002ed0:	0030      	movs	r0, r6
 8002ed2:	180a      	adds	r2, r1, r0
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	469c      	mov	ip, r3
 8002ed8:	44bc      	add	ip, r7
 8002eda:	4462      	add	r2, ip
 8002edc:	2301      	movs	r3, #1
 8002ede:	7013      	strb	r3, [r2, #0]
			if(imY % 2 !=0){
 8002ee0:	238f      	movs	r3, #143	; 0x8f
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	2208      	movs	r2, #8
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	19db      	adds	r3, r3, r7
 8002eea:	781a      	ldrb	r2, [r3, #0]
 8002eec:	2301      	movs	r3, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <printASCIIarray+0xfe>
				decY=0x02;
 8002ef6:	180b      	adds	r3, r1, r0
 8002ef8:	2208      	movs	r2, #8
 8002efa:	18ba      	adds	r2, r7, r2
 8002efc:	189a      	adds	r2, r3, r2
 8002efe:	2302      	movs	r3, #2
 8002f00:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x00)==0){
				fontCur=0;
 8002f02:	2161      	movs	r1, #97	; 0x61
 8002f04:	208c      	movs	r0, #140	; 0x8c
 8002f06:	0040      	lsls	r0, r0, #1
 8002f08:	180b      	adds	r3, r1, r0
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	18ba      	adds	r2, r7, r2
 8002f0e:	189a      	adds	r2, r3, r2
 8002f10:	2300      	movs	r3, #0
 8002f12:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x01)==1){
 8002f14:	238e      	movs	r3, #142	; 0x8e
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2208      	movs	r2, #8
 8002f1a:	189b      	adds	r3, r3, r2
 8002f1c:	19db      	adds	r3, r3, r7
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	2301      	movs	r3, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	d005      	beq.n	8002f32 <printASCIIarray+0x12e>
				fontCur=1;
 8002f26:	180b      	adds	r3, r1, r0
 8002f28:	2208      	movs	r2, #8
 8002f2a:	18ba      	adds	r2, r7, r2
 8002f2c:	189a      	adds	r2, r3, r2
 8002f2e:	2301      	movs	r3, #1
 8002f30:	7013      	strb	r3, [r2, #0]
			}
			if((fontInfo & 0x02)==2){
 8002f32:	238e      	movs	r3, #142	; 0x8e
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	2208      	movs	r2, #8
 8002f38:	189b      	adds	r3, r3, r2
 8002f3a:	19db      	adds	r3, r3, r7
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	2302      	movs	r3, #2
 8002f40:	4013      	ands	r3, r2
 8002f42:	d008      	beq.n	8002f56 <printASCIIarray+0x152>
				fontCur=2;
 8002f44:	2361      	movs	r3, #97	; 0x61
 8002f46:	228c      	movs	r2, #140	; 0x8c
 8002f48:	0052      	lsls	r2, r2, #1
 8002f4a:	189b      	adds	r3, r3, r2
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	18ba      	adds	r2, r7, r2
 8002f50:	189a      	adds	r2, r3, r2
 8002f52:	2302      	movs	r3, #2
 8002f54:	7013      	strb	r3, [r2, #0]
			}
//			fontCur=2;
			if(fontCur==0){
 8002f56:	2361      	movs	r3, #97	; 0x61
 8002f58:	268c      	movs	r6, #140	; 0x8c
 8002f5a:	0076      	lsls	r6, r6, #1
 8002f5c:	199b      	adds	r3, r3, r6
 8002f5e:	2208      	movs	r2, #8
 8002f60:	4694      	mov	ip, r2
 8002f62:	44bc      	add	ip, r7
 8002f64:	4463      	add	r3, ip
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d000      	beq.n	8002f6e <printASCIIarray+0x16a>
 8002f6c:	e2a7      	b.n	80034be <printASCIIarray+0x6ba>
 8002f6e:	466b      	mov	r3, sp
 8002f70:	4698      	mov	r8, r3
				symLen=49;
 8002f72:	215a      	movs	r1, #90	; 0x5a
 8002f74:	198b      	adds	r3, r1, r6
 8002f76:	2208      	movs	r2, #8
 8002f78:	18ba      	adds	r2, r7, r2
 8002f7a:	189a      	adds	r2, r3, r2
 8002f7c:	2331      	movs	r3, #49	; 0x31
 8002f7e:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8002f80:	198b      	adds	r3, r1, r6
 8002f82:	2208      	movs	r2, #8
 8002f84:	4694      	mov	ip, r2
 8002f86:	44bc      	add	ip, r7
 8002f88:	4463      	add	r3, ip
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	21b6      	movs	r1, #182	; 0xb6
 8002f92:	0049      	lsls	r1, r1, #1
 8002f94:	2008      	movs	r0, #8
 8002f96:	1809      	adds	r1, r1, r0
 8002f98:	19c9      	adds	r1, r1, r7
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	2188      	movs	r1, #136	; 0x88
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	18cb      	adds	r3, r1, r3
 8002fa2:	19db      	adds	r3, r3, r7
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	208c      	movs	r0, #140	; 0x8c
 8002faa:	2608      	movs	r6, #8
 8002fac:	1980      	adds	r0, r0, r6
 8002fae:	19c0      	adds	r0, r0, r7
 8002fb0:	6003      	str	r3, [r0, #0]
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	18cb      	adds	r3, r1, r3
 8002fb6:	19db      	adds	r3, r3, r7
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0f5b      	lsrs	r3, r3, #29
 8002fc0:	000e      	movs	r6, r1
 8002fc2:	00f5      	lsls	r5, r6, #3
 8002fc4:	431d      	orrs	r5, r3
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	00dc      	lsls	r4, r3, #3
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	2308      	movs	r3, #8
 8002fce:	18cb      	adds	r3, r1, r3
 8002fd0:	19db      	adds	r3, r3, r7
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2084      	movs	r0, #132	; 0x84
 8002fd8:	2408      	movs	r4, #8
 8002fda:	1900      	adds	r0, r0, r4
 8002fdc:	19c0      	adds	r0, r0, r7
 8002fde:	6003      	str	r3, [r0, #0]
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	18cb      	adds	r3, r1, r3
 8002fe4:	19db      	adds	r3, r3, r7
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	0003      	movs	r3, r0
 8002fec:	0f5b      	lsrs	r3, r3, #29
 8002fee:	000d      	movs	r5, r1
 8002ff0:	00ed      	lsls	r5, r5, #3
 8002ff2:	248a      	movs	r4, #138	; 0x8a
 8002ff4:	0064      	lsls	r4, r4, #1
 8002ff6:	2608      	movs	r6, #8
 8002ff8:	19a6      	adds	r6, r4, r6
 8002ffa:	19f6      	adds	r6, r6, r7
 8002ffc:	6035      	str	r5, [r6, #0]
 8002ffe:	2508      	movs	r5, #8
 8003000:	1965      	adds	r5, r4, r5
 8003002:	19ed      	adds	r5, r5, r7
 8003004:	682d      	ldr	r5, [r5, #0]
 8003006:	431d      	orrs	r5, r3
 8003008:	2308      	movs	r3, #8
 800300a:	18e3      	adds	r3, r4, r3
 800300c:	19db      	adds	r3, r3, r7
 800300e:	601d      	str	r5, [r3, #0]
 8003010:	0003      	movs	r3, r0
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	2188      	movs	r1, #136	; 0x88
 8003016:	0049      	lsls	r1, r1, #1
 8003018:	2008      	movs	r0, #8
 800301a:	1809      	adds	r1, r1, r0
 800301c:	19c9      	adds	r1, r1, r7
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	0013      	movs	r3, r2
 8003022:	3307      	adds	r3, #7
 8003024:	08db      	lsrs	r3, r3, #3
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	466a      	mov	r2, sp
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	469d      	mov	sp, r3
 800302e:	ab02      	add	r3, sp, #8
 8003030:	3300      	adds	r3, #0
 8003032:	22b4      	movs	r2, #180	; 0xb4
 8003034:	0052      	lsls	r2, r2, #1
 8003036:	2108      	movs	r1, #8
 8003038:	1852      	adds	r2, r2, r1
 800303a:	19d2      	adds	r2, r2, r7
 800303c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 800303e:	245a      	movs	r4, #90	; 0x5a
 8003040:	2390      	movs	r3, #144	; 0x90
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	601c      	str	r4, [r3, #0]
 8003048:	268c      	movs	r6, #140	; 0x8c
 800304a:	0076      	lsls	r6, r6, #1
 800304c:	19a3      	adds	r3, r4, r6
 800304e:	2208      	movs	r2, #8
 8003050:	4694      	mov	ip, r2
 8003052:	44bc      	add	ip, r7
 8003054:	4463      	add	r3, ip
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	0013      	movs	r3, r2
 800305a:	3b01      	subs	r3, #1
 800305c:	21b2      	movs	r1, #178	; 0xb2
 800305e:	0049      	lsls	r1, r1, #1
 8003060:	2008      	movs	r0, #8
 8003062:	1809      	adds	r1, r1, r0
 8003064:	19c9      	adds	r1, r1, r7
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	2300      	movs	r3, #0
 8003070:	2184      	movs	r1, #132	; 0x84
 8003072:	1879      	adds	r1, r7, r1
 8003074:	600b      	str	r3, [r1, #0]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	6859      	ldr	r1, [r3, #4]
 800307e:	0003      	movs	r3, r0
 8003080:	0f5b      	lsrs	r3, r3, #29
 8003082:	469c      	mov	ip, r3
 8003084:	000d      	movs	r5, r1
 8003086:	00ed      	lsls	r5, r5, #3
 8003088:	2486      	movs	r4, #134	; 0x86
 800308a:	0064      	lsls	r4, r4, #1
 800308c:	2308      	movs	r3, #8
 800308e:	18e4      	adds	r4, r4, r3
 8003090:	19e4      	adds	r4, r4, r7
 8003092:	6025      	str	r5, [r4, #0]
 8003094:	2586      	movs	r5, #134	; 0x86
 8003096:	006d      	lsls	r5, r5, #1
 8003098:	2308      	movs	r3, #8
 800309a:	18eb      	adds	r3, r5, r3
 800309c:	19dc      	adds	r4, r3, r7
 800309e:	6825      	ldr	r5, [r4, #0]
 80030a0:	4663      	mov	r3, ip
 80030a2:	431d      	orrs	r5, r3
 80030a4:	2386      	movs	r3, #134	; 0x86
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2408      	movs	r4, #8
 80030aa:	191b      	adds	r3, r3, r4
 80030ac:	19db      	adds	r3, r3, r7
 80030ae:	601d      	str	r5, [r3, #0]
 80030b0:	0003      	movs	r3, r0
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	2184      	movs	r1, #132	; 0x84
 80030b6:	0049      	lsls	r1, r1, #1
 80030b8:	2008      	movs	r0, #8
 80030ba:	1809      	adds	r1, r1, r0
 80030bc:	19c9      	adds	r1, r1, r7
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	67ba      	str	r2, [r7, #120]	; 0x78
 80030c2:	2300      	movs	r3, #0
 80030c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80030c6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80030c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ca:	0003      	movs	r3, r0
 80030cc:	0f5b      	lsrs	r3, r3, #29
 80030ce:	000d      	movs	r5, r1
 80030d0:	00ed      	lsls	r5, r5, #3
 80030d2:	2486      	movs	r4, #134	; 0x86
 80030d4:	0064      	lsls	r4, r4, #1
 80030d6:	193c      	adds	r4, r7, r4
 80030d8:	6025      	str	r5, [r4, #0]
 80030da:	2486      	movs	r4, #134	; 0x86
 80030dc:	0064      	lsls	r4, r4, #1
 80030de:	193c      	adds	r4, r7, r4
 80030e0:	6825      	ldr	r5, [r4, #0]
 80030e2:	431d      	orrs	r5, r3
 80030e4:	2386      	movs	r3, #134	; 0x86
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	601d      	str	r5, [r3, #0]
 80030ec:	0003      	movs	r3, r0
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	2184      	movs	r1, #132	; 0x84
 80030f2:	0049      	lsls	r1, r1, #1
 80030f4:	1879      	adds	r1, r7, r1
 80030f6:	600b      	str	r3, [r1, #0]
 80030f8:	0013      	movs	r3, r2
 80030fa:	3307      	adds	r3, #7
 80030fc:	08db      	lsrs	r3, r3, #3
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	466a      	mov	r2, sp
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	469d      	mov	sp, r3
 8003106:	ab02      	add	r3, sp, #8
 8003108:	3300      	adds	r3, #0
 800310a:	22b0      	movs	r2, #176	; 0xb0
 800310c:	0052      	lsls	r2, r2, #1
 800310e:	2108      	movs	r1, #8
 8003110:	1852      	adds	r2, r2, r1
 8003112:	19d2      	adds	r2, r2, r7
 8003114:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003116:	2390      	movs	r3, #144	; 0x90
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	0035      	movs	r5, r6
 8003120:	1963      	adds	r3, r4, r5
 8003122:	2208      	movs	r2, #8
 8003124:	4694      	mov	ip, r2
 8003126:	44bc      	add	ip, r7
 8003128:	4463      	add	r3, ip
 800312a:	881a      	ldrh	r2, [r3, #0]
 800312c:	0013      	movs	r3, r2
 800312e:	3b01      	subs	r3, #1
 8003130:	21ae      	movs	r1, #174	; 0xae
 8003132:	0049      	lsls	r1, r1, #1
 8003134:	2008      	movs	r0, #8
 8003136:	1809      	adds	r1, r1, r0
 8003138:	19c9      	adds	r1, r1, r7
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	673a      	str	r2, [r7, #112]	; 0x70
 800313e:	2300      	movs	r3, #0
 8003140:	677b      	str	r3, [r7, #116]	; 0x74
 8003142:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003144:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003146:	0003      	movs	r3, r0
 8003148:	0f5b      	lsrs	r3, r3, #29
 800314a:	000c      	movs	r4, r1
 800314c:	00e4      	lsls	r4, r4, #3
 800314e:	26fc      	movs	r6, #252	; 0xfc
 8003150:	2508      	movs	r5, #8
 8003152:	1975      	adds	r5, r6, r5
 8003154:	19ed      	adds	r5, r5, r7
 8003156:	602c      	str	r4, [r5, #0]
 8003158:	2408      	movs	r4, #8
 800315a:	1934      	adds	r4, r6, r4
 800315c:	19e4      	adds	r4, r4, r7
 800315e:	6824      	ldr	r4, [r4, #0]
 8003160:	431c      	orrs	r4, r3
 8003162:	2308      	movs	r3, #8
 8003164:	18f3      	adds	r3, r6, r3
 8003166:	19db      	adds	r3, r3, r7
 8003168:	601c      	str	r4, [r3, #0]
 800316a:	0003      	movs	r3, r0
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	21f8      	movs	r1, #248	; 0xf8
 8003170:	2008      	movs	r0, #8
 8003172:	1809      	adds	r1, r1, r0
 8003174:	19c9      	adds	r1, r1, r7
 8003176:	600b      	str	r3, [r1, #0]
 8003178:	66ba      	str	r2, [r7, #104]	; 0x68
 800317a:	2300      	movs	r3, #0
 800317c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800317e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8003180:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003182:	0003      	movs	r3, r0
 8003184:	0f5b      	lsrs	r3, r3, #29
 8003186:	000c      	movs	r4, r1
 8003188:	00e4      	lsls	r4, r4, #3
 800318a:	26f4      	movs	r6, #244	; 0xf4
 800318c:	2508      	movs	r5, #8
 800318e:	1975      	adds	r5, r6, r5
 8003190:	19ed      	adds	r5, r5, r7
 8003192:	602c      	str	r4, [r5, #0]
 8003194:	2408      	movs	r4, #8
 8003196:	1934      	adds	r4, r6, r4
 8003198:	19e4      	adds	r4, r4, r7
 800319a:	6824      	ldr	r4, [r4, #0]
 800319c:	431c      	orrs	r4, r3
 800319e:	2308      	movs	r3, #8
 80031a0:	18f3      	adds	r3, r6, r3
 80031a2:	19db      	adds	r3, r3, r7
 80031a4:	601c      	str	r4, [r3, #0]
 80031a6:	0003      	movs	r3, r0
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	21f0      	movs	r1, #240	; 0xf0
 80031ac:	2008      	movs	r0, #8
 80031ae:	1809      	adds	r1, r1, r0
 80031b0:	19c9      	adds	r1, r1, r7
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	0013      	movs	r3, r2
 80031b6:	3307      	adds	r3, #7
 80031b8:	08db      	lsrs	r3, r3, #3
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	466a      	mov	r2, sp
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	469d      	mov	sp, r3
 80031c2:	ab02      	add	r3, sp, #8
 80031c4:	3300      	adds	r3, #0
 80031c6:	22ac      	movs	r2, #172	; 0xac
 80031c8:	0052      	lsls	r2, r2, #1
 80031ca:	2108      	movs	r1, #8
 80031cc:	1852      	adds	r2, r2, r1
 80031ce:	19d2      	adds	r2, r2, r7
 80031d0:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 80031d2:	233f      	movs	r3, #63	; 0x3f
 80031d4:	258c      	movs	r5, #140	; 0x8c
 80031d6:	006d      	lsls	r5, r5, #1
 80031d8:	195b      	adds	r3, r3, r5
 80031da:	2208      	movs	r2, #8
 80031dc:	18ba      	adds	r2, r7, r2
 80031de:	189a      	adds	r2, r3, r2
 80031e0:	2307      	movs	r3, #7
 80031e2:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x0E;
 80031e4:	233e      	movs	r3, #62	; 0x3e
 80031e6:	195b      	adds	r3, r3, r5
 80031e8:	2208      	movs	r2, #8
 80031ea:	18ba      	adds	r2, r7, r2
 80031ec:	189a      	adds	r2, r3, r2
 80031ee:	230e      	movs	r3, #14
 80031f0:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 80031f2:	2362      	movs	r3, #98	; 0x62
 80031f4:	195b      	adds	r3, r3, r5
 80031f6:	2208      	movs	r2, #8
 80031f8:	18ba      	adds	r2, r7, r2
 80031fa:	189a      	adds	r2, r3, r2
 80031fc:	2300      	movs	r3, #0
 80031fe:	8013      	strh	r3, [r2, #0]
 8003200:	e110      	b.n	8003424 <printASCIIarray+0x620>
					for(j=0;j<symLen;j++){
 8003202:	2364      	movs	r3, #100	; 0x64
 8003204:	228c      	movs	r2, #140	; 0x8c
 8003206:	0052      	lsls	r2, r2, #1
 8003208:	189b      	adds	r3, r3, r2
 800320a:	2208      	movs	r2, #8
 800320c:	18ba      	adds	r2, r7, r2
 800320e:	189a      	adds	r2, r3, r2
 8003210:	2300      	movs	r3, #0
 8003212:	8013      	strh	r3, [r2, #0]
 8003214:	e042      	b.n	800329c <printASCIIarray+0x498>
						weoBuffer[j]=F1[dataASCII[i]][j];
 8003216:	2362      	movs	r3, #98	; 0x62
 8003218:	218c      	movs	r1, #140	; 0x8c
 800321a:	0049      	lsls	r1, r1, #1
 800321c:	185b      	adds	r3, r3, r1
 800321e:	2208      	movs	r2, #8
 8003220:	4694      	mov	ip, r2
 8003222:	44bc      	add	ip, r7
 8003224:	4463      	add	r3, ip
 8003226:	881a      	ldrh	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	185b      	adds	r3, r3, r1
 800322c:	2008      	movs	r0, #8
 800322e:	4684      	mov	ip, r0
 8003230:	2008      	movs	r0, #8
 8003232:	4681      	mov	r9, r0
 8003234:	44b9      	add	r9, r7
 8003236:	44cc      	add	ip, r9
 8003238:	4463      	add	r3, ip
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	189b      	adds	r3, r3, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	001d      	movs	r5, r3
 8003242:	2264      	movs	r2, #100	; 0x64
 8003244:	1853      	adds	r3, r2, r1
 8003246:	2008      	movs	r0, #8
 8003248:	4684      	mov	ip, r0
 800324a:	44bc      	add	ip, r7
 800324c:	4463      	add	r3, ip
 800324e:	8818      	ldrh	r0, [r3, #0]
 8003250:	0016      	movs	r6, r2
 8003252:	1853      	adds	r3, r2, r1
 8003254:	2208      	movs	r2, #8
 8003256:	4694      	mov	ip, r2
 8003258:	44bc      	add	ip, r7
 800325a:	4463      	add	r3, ip
 800325c:	881c      	ldrh	r4, [r3, #0]
 800325e:	497e      	ldr	r1, [pc, #504]	; (8003458 <printASCIIarray+0x654>)
 8003260:	002a      	movs	r2, r5
 8003262:	00d2      	lsls	r2, r2, #3
 8003264:	1b52      	subs	r2, r2, r5
 8003266:	00d3      	lsls	r3, r2, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	18cb      	adds	r3, r1, r3
 800326c:	5c1b      	ldrb	r3, [r3, r0]
 800326e:	22b4      	movs	r2, #180	; 0xb4
 8003270:	0052      	lsls	r2, r2, #1
 8003272:	2108      	movs	r1, #8
 8003274:	1852      	adds	r2, r2, r1
 8003276:	19d2      	adds	r2, r2, r7
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 800327c:	0032      	movs	r2, r6
 800327e:	218c      	movs	r1, #140	; 0x8c
 8003280:	0049      	lsls	r1, r1, #1
 8003282:	1853      	adds	r3, r2, r1
 8003284:	2008      	movs	r0, #8
 8003286:	4684      	mov	ip, r0
 8003288:	44bc      	add	ip, r7
 800328a:	4463      	add	r3, ip
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	1852      	adds	r2, r2, r1
 8003290:	2108      	movs	r1, #8
 8003292:	468c      	mov	ip, r1
 8003294:	44bc      	add	ip, r7
 8003296:	4462      	add	r2, ip
 8003298:	3301      	adds	r3, #1
 800329a:	8013      	strh	r3, [r2, #0]
 800329c:	2364      	movs	r3, #100	; 0x64
 800329e:	218c      	movs	r1, #140	; 0x8c
 80032a0:	0049      	lsls	r1, r1, #1
 80032a2:	185b      	adds	r3, r3, r1
 80032a4:	2208      	movs	r2, #8
 80032a6:	18ba      	adds	r2, r7, r2
 80032a8:	189a      	adds	r2, r3, r2
 80032aa:	235a      	movs	r3, #90	; 0x5a
 80032ac:	185b      	adds	r3, r3, r1
 80032ae:	2008      	movs	r0, #8
 80032b0:	4684      	mov	ip, r0
 80032b2:	44bc      	add	ip, r7
 80032b4:	4463      	add	r3, ip
 80032b6:	8812      	ldrh	r2, [r2, #0]
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d3ab      	bcc.n	8003216 <printASCIIarray+0x412>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 80032be:	2366      	movs	r3, #102	; 0x66
 80032c0:	185b      	adds	r3, r3, r1
 80032c2:	2208      	movs	r2, #8
 80032c4:	18ba      	adds	r2, r7, r2
 80032c6:	189a      	adds	r2, r3, r2
 80032c8:	2300      	movs	r3, #0
 80032ca:	8013      	strh	r3, [r2, #0]
 80032cc:	e030      	b.n	8003330 <printASCIIarray+0x52c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 80032ce:	2066      	movs	r0, #102	; 0x66
 80032d0:	248c      	movs	r4, #140	; 0x8c
 80032d2:	0064      	lsls	r4, r4, #1
 80032d4:	1903      	adds	r3, r0, r4
 80032d6:	2208      	movs	r2, #8
 80032d8:	4694      	mov	ip, r2
 80032da:	44bc      	add	ip, r7
 80032dc:	4463      	add	r3, ip
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	25b4      	movs	r5, #180	; 0xb4
 80032e2:	006d      	lsls	r5, r5, #1
 80032e4:	2308      	movs	r3, #8
 80032e6:	18eb      	adds	r3, r5, r3
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	5c9a      	ldrb	r2, [r3, r2]
 80032ee:	1903      	adds	r3, r0, r4
 80032f0:	2108      	movs	r1, #8
 80032f2:	468c      	mov	ip, r1
 80032f4:	44bc      	add	ip, r7
 80032f6:	4463      	add	r3, ip
 80032f8:	8819      	ldrh	r1, [r3, #0]
 80032fa:	235c      	movs	r3, #92	; 0x5c
 80032fc:	191b      	adds	r3, r3, r4
 80032fe:	2608      	movs	r6, #8
 8003300:	46b4      	mov	ip, r6
 8003302:	44bc      	add	ip, r7
 8003304:	4463      	add	r3, ip
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	4013      	ands	r3, r2
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2208      	movs	r2, #8
 800330e:	18aa      	adds	r2, r5, r2
 8003310:	19d2      	adds	r2, r2, r7
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8003316:	1903      	adds	r3, r0, r4
 8003318:	2208      	movs	r2, #8
 800331a:	4694      	mov	ip, r2
 800331c:	44bc      	add	ip, r7
 800331e:	4463      	add	r3, ip
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	1902      	adds	r2, r0, r4
 8003324:	2108      	movs	r1, #8
 8003326:	468c      	mov	ip, r1
 8003328:	44bc      	add	ip, r7
 800332a:	4462      	add	r2, ip
 800332c:	3301      	adds	r3, #1
 800332e:	8013      	strh	r3, [r2, #0]
 8003330:	2366      	movs	r3, #102	; 0x66
 8003332:	258c      	movs	r5, #140	; 0x8c
 8003334:	006d      	lsls	r5, r5, #1
 8003336:	195b      	adds	r3, r3, r5
 8003338:	2208      	movs	r2, #8
 800333a:	18ba      	adds	r2, r7, r2
 800333c:	189a      	adds	r2, r3, r2
 800333e:	235a      	movs	r3, #90	; 0x5a
 8003340:	195b      	adds	r3, r3, r5
 8003342:	2108      	movs	r1, #8
 8003344:	468c      	mov	ip, r1
 8003346:	44bc      	add	ip, r7
 8003348:	4463      	add	r3, ip
 800334a:	8812      	ldrh	r2, [r2, #0]
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d3bd      	bcc.n	80032ce <printASCIIarray+0x4ca>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8003352:	205f      	movs	r0, #95	; 0x5f
 8003354:	1943      	adds	r3, r0, r5
 8003356:	2208      	movs	r2, #8
 8003358:	18ba      	adds	r2, r7, r2
 800335a:	189a      	adds	r2, r3, r2
 800335c:	233f      	movs	r3, #63	; 0x3f
 800335e:	001e      	movs	r6, r3
 8003360:	195b      	adds	r3, r3, r5
 8003362:	2108      	movs	r1, #8
 8003364:	468c      	mov	ip, r1
 8003366:	44bc      	add	ip, r7
 8003368:	4463      	add	r3, ip
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	18d3      	adds	r3, r2, r3
 8003370:	b2db      	uxtb	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b2dc      	uxtb	r4, r3
 8003376:	218f      	movs	r1, #143	; 0x8f
 8003378:	0049      	lsls	r1, r1, #1
 800337a:	2308      	movs	r3, #8
 800337c:	18cb      	adds	r3, r1, r3
 800337e:	19da      	adds	r2, r3, r7
 8003380:	213e      	movs	r1, #62	; 0x3e
 8003382:	194b      	adds	r3, r1, r5
 8003384:	2108      	movs	r1, #8
 8003386:	468c      	mov	ip, r1
 8003388:	44bc      	add	ip, r7
 800338a:	4463      	add	r3, ip
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	18d3      	adds	r3, r2, r3
 8003392:	b2da      	uxtb	r2, r3
 8003394:	2160      	movs	r1, #96	; 0x60
 8003396:	194b      	adds	r3, r1, r5
 8003398:	2108      	movs	r1, #8
 800339a:	468c      	mov	ip, r1
 800339c:	44bc      	add	ip, r7
 800339e:	4463      	add	r3, ip
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	4699      	mov	r9, r3
 80033a8:	218f      	movs	r1, #143	; 0x8f
 80033aa:	0049      	lsls	r1, r1, #1
 80033ac:	2308      	movs	r3, #8
 80033ae:	18cb      	adds	r3, r1, r3
 80033b0:	19db      	adds	r3, r3, r7
 80033b2:	7819      	ldrb	r1, [r3, #0]
 80033b4:	0005      	movs	r5, r0
 80033b6:	238c      	movs	r3, #140	; 0x8c
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	18c3      	adds	r3, r0, r3
 80033bc:	2208      	movs	r2, #8
 80033be:	4694      	mov	ip, r2
 80033c0:	44bc      	add	ip, r7
 80033c2:	4463      	add	r3, ip
 80033c4:	7818      	ldrb	r0, [r3, #0]
 80033c6:	23b4      	movs	r3, #180	; 0xb4
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2208      	movs	r2, #8
 80033cc:	189b      	adds	r3, r3, r2
 80033ce:	19db      	adds	r3, r3, r7
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	23ff      	movs	r3, #255	; 0xff
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	464b      	mov	r3, r9
 80033da:	0022      	movs	r2, r4
 80033dc:	f7fe f872 	bl	80014c4 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80033e0:	208c      	movs	r0, #140	; 0x8c
 80033e2:	0040      	lsls	r0, r0, #1
 80033e4:	182b      	adds	r3, r5, r0
 80033e6:	2208      	movs	r2, #8
 80033e8:	18ba      	adds	r2, r7, r2
 80033ea:	1899      	adds	r1, r3, r2
 80033ec:	182b      	adds	r3, r5, r0
 80033ee:	2208      	movs	r2, #8
 80033f0:	18ba      	adds	r2, r7, r2
 80033f2:	189a      	adds	r2, r3, r2
 80033f4:	0033      	movs	r3, r6
 80033f6:	181b      	adds	r3, r3, r0
 80033f8:	2408      	movs	r4, #8
 80033fa:	46a4      	mov	ip, r4
 80033fc:	44bc      	add	ip, r7
 80033fe:	4463      	add	r3, ip
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	18d3      	adds	r3, r2, r3
 8003406:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 8003408:	2262      	movs	r2, #98	; 0x62
 800340a:	1813      	adds	r3, r2, r0
 800340c:	2108      	movs	r1, #8
 800340e:	468c      	mov	ip, r1
 8003410:	44bc      	add	ip, r7
 8003412:	4463      	add	r3, ip
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	1812      	adds	r2, r2, r0
 8003418:	2108      	movs	r1, #8
 800341a:	468c      	mov	ip, r1
 800341c:	44bc      	add	ip, r7
 800341e:	4462      	add	r2, ip
 8003420:	3301      	adds	r3, #1
 8003422:	8013      	strh	r3, [r2, #0]
 8003424:	231e      	movs	r3, #30
 8003426:	33ff      	adds	r3, #255	; 0xff
 8003428:	2208      	movs	r2, #8
 800342a:	189b      	adds	r3, r3, r2
 800342c:	19db      	adds	r3, r3, r7
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	b29a      	uxth	r2, r3
 8003432:	2162      	movs	r1, #98	; 0x62
 8003434:	208c      	movs	r0, #140	; 0x8c
 8003436:	0040      	lsls	r0, r0, #1
 8003438:	180b      	adds	r3, r1, r0
 800343a:	2408      	movs	r4, #8
 800343c:	46a4      	mov	ip, r4
 800343e:	44bc      	add	ip, r7
 8003440:	4463      	add	r3, ip
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	4293      	cmp	r3, r2
 8003446:	d200      	bcs.n	800344a <printASCIIarray+0x646>
 8003448:	e6db      	b.n	8003202 <printASCIIarray+0x3fe>
				}
				for(i=0;i<symLen;i++){
 800344a:	180b      	adds	r3, r1, r0
 800344c:	2208      	movs	r2, #8
 800344e:	18ba      	adds	r2, r7, r2
 8003450:	189a      	adds	r2, r3, r2
 8003452:	2300      	movs	r3, #0
 8003454:	8013      	strh	r3, [r2, #0]
 8003456:	e020      	b.n	800349a <printASCIIarray+0x696>
 8003458:	0800c9c8 	.word	0x0800c9c8
									weoBuffer[j]=0x00;
 800345c:	2364      	movs	r3, #100	; 0x64
 800345e:	208c      	movs	r0, #140	; 0x8c
 8003460:	0040      	lsls	r0, r0, #1
 8003462:	181b      	adds	r3, r3, r0
 8003464:	2208      	movs	r2, #8
 8003466:	4694      	mov	ip, r2
 8003468:	44bc      	add	ip, r7
 800346a:	4463      	add	r3, ip
 800346c:	8819      	ldrh	r1, [r3, #0]
 800346e:	23b4      	movs	r3, #180	; 0xb4
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2208      	movs	r2, #8
 8003474:	189b      	adds	r3, r3, r2
 8003476:	19db      	adds	r3, r3, r7
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 800347e:	2262      	movs	r2, #98	; 0x62
 8003480:	1813      	adds	r3, r2, r0
 8003482:	2108      	movs	r1, #8
 8003484:	468c      	mov	ip, r1
 8003486:	44bc      	add	ip, r7
 8003488:	4463      	add	r3, ip
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	1812      	adds	r2, r2, r0
 800348e:	2108      	movs	r1, #8
 8003490:	468c      	mov	ip, r1
 8003492:	44bc      	add	ip, r7
 8003494:	4462      	add	r2, ip
 8003496:	3301      	adds	r3, #1
 8003498:	8013      	strh	r3, [r2, #0]
 800349a:	2362      	movs	r3, #98	; 0x62
 800349c:	218c      	movs	r1, #140	; 0x8c
 800349e:	0049      	lsls	r1, r1, #1
 80034a0:	185b      	adds	r3, r3, r1
 80034a2:	2208      	movs	r2, #8
 80034a4:	18ba      	adds	r2, r7, r2
 80034a6:	189a      	adds	r2, r3, r2
 80034a8:	235a      	movs	r3, #90	; 0x5a
 80034aa:	185b      	adds	r3, r3, r1
 80034ac:	2108      	movs	r1, #8
 80034ae:	468c      	mov	ip, r1
 80034b0:	44bc      	add	ip, r7
 80034b2:	4463      	add	r3, ip
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d3cf      	bcc.n	800345c <printASCIIarray+0x658>
 80034bc:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==1){
 80034be:	2361      	movs	r3, #97	; 0x61
 80034c0:	228c      	movs	r2, #140	; 0x8c
 80034c2:	0052      	lsls	r2, r2, #1
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	2108      	movs	r1, #8
 80034c8:	468c      	mov	ip, r1
 80034ca:	44bc      	add	ip, r7
 80034cc:	4463      	add	r3, ip
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d000      	beq.n	80034d6 <printASCIIarray+0x6d2>
 80034d4:	e29d      	b.n	8003a12 <printASCIIarray+0xc0e>
 80034d6:	466b      	mov	r3, sp
 80034d8:	4698      	mov	r8, r3
				symLen=99;
 80034da:	245a      	movs	r4, #90	; 0x5a
 80034dc:	0015      	movs	r5, r2
 80034de:	18a3      	adds	r3, r4, r2
 80034e0:	2208      	movs	r2, #8
 80034e2:	18ba      	adds	r2, r7, r2
 80034e4:	189a      	adds	r2, r3, r2
 80034e6:	2363      	movs	r3, #99	; 0x63
 80034e8:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 80034ea:	2390      	movs	r3, #144	; 0x90
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	601c      	str	r4, [r3, #0]
 80034f2:	1963      	adds	r3, r4, r5
 80034f4:	2208      	movs	r2, #8
 80034f6:	4694      	mov	ip, r2
 80034f8:	44bc      	add	ip, r7
 80034fa:	4463      	add	r3, ip
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	0013      	movs	r3, r2
 8003500:	3b01      	subs	r3, #1
 8003502:	21a8      	movs	r1, #168	; 0xa8
 8003504:	0049      	lsls	r1, r1, #1
 8003506:	2008      	movs	r0, #8
 8003508:	1809      	adds	r1, r1, r0
 800350a:	19c9      	adds	r1, r1, r7
 800350c:	600b      	str	r3, [r1, #0]
 800350e:	663a      	str	r2, [r7, #96]	; 0x60
 8003510:	2300      	movs	r3, #0
 8003512:	667b      	str	r3, [r7, #100]	; 0x64
 8003514:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003516:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003518:	0003      	movs	r3, r0
 800351a:	0f5b      	lsrs	r3, r3, #29
 800351c:	000d      	movs	r5, r1
 800351e:	00ed      	lsls	r5, r5, #3
 8003520:	26ec      	movs	r6, #236	; 0xec
 8003522:	2408      	movs	r4, #8
 8003524:	1934      	adds	r4, r6, r4
 8003526:	19e4      	adds	r4, r4, r7
 8003528:	6025      	str	r5, [r4, #0]
 800352a:	2408      	movs	r4, #8
 800352c:	1934      	adds	r4, r6, r4
 800352e:	19e4      	adds	r4, r4, r7
 8003530:	6825      	ldr	r5, [r4, #0]
 8003532:	431d      	orrs	r5, r3
 8003534:	2308      	movs	r3, #8
 8003536:	18f3      	adds	r3, r6, r3
 8003538:	19db      	adds	r3, r3, r7
 800353a:	601d      	str	r5, [r3, #0]
 800353c:	0003      	movs	r3, r0
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	21e8      	movs	r1, #232	; 0xe8
 8003542:	2008      	movs	r0, #8
 8003544:	1809      	adds	r1, r1, r0
 8003546:	19c9      	adds	r1, r1, r7
 8003548:	600b      	str	r3, [r1, #0]
 800354a:	65ba      	str	r2, [r7, #88]	; 0x58
 800354c:	2300      	movs	r3, #0
 800354e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003550:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003552:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003554:	0003      	movs	r3, r0
 8003556:	0f5b      	lsrs	r3, r3, #29
 8003558:	000d      	movs	r5, r1
 800355a:	00ed      	lsls	r5, r5, #3
 800355c:	26e4      	movs	r6, #228	; 0xe4
 800355e:	2408      	movs	r4, #8
 8003560:	1934      	adds	r4, r6, r4
 8003562:	19e4      	adds	r4, r4, r7
 8003564:	6025      	str	r5, [r4, #0]
 8003566:	2408      	movs	r4, #8
 8003568:	1934      	adds	r4, r6, r4
 800356a:	19e5      	adds	r5, r4, r7
 800356c:	682d      	ldr	r5, [r5, #0]
 800356e:	431d      	orrs	r5, r3
 8003570:	2308      	movs	r3, #8
 8003572:	18f3      	adds	r3, r6, r3
 8003574:	19db      	adds	r3, r3, r7
 8003576:	601d      	str	r5, [r3, #0]
 8003578:	0003      	movs	r3, r0
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	21e0      	movs	r1, #224	; 0xe0
 800357e:	2008      	movs	r0, #8
 8003580:	1809      	adds	r1, r1, r0
 8003582:	19c9      	adds	r1, r1, r7
 8003584:	600b      	str	r3, [r1, #0]
 8003586:	0013      	movs	r3, r2
 8003588:	3307      	adds	r3, #7
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	466a      	mov	r2, sp
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	469d      	mov	sp, r3
 8003594:	ab02      	add	r3, sp, #8
 8003596:	3300      	adds	r3, #0
 8003598:	21a6      	movs	r1, #166	; 0xa6
 800359a:	0049      	lsls	r1, r1, #1
 800359c:	2208      	movs	r2, #8
 800359e:	188a      	adds	r2, r1, r2
 80035a0:	19d1      	adds	r1, r2, r7
 80035a2:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer1[symLen];
 80035a4:	2390      	movs	r3, #144	; 0x90
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681c      	ldr	r4, [r3, #0]
 80035ac:	2390      	movs	r3, #144	; 0x90
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	601c      	str	r4, [r3, #0]
 80035b4:	258c      	movs	r5, #140	; 0x8c
 80035b6:	006d      	lsls	r5, r5, #1
 80035b8:	1963      	adds	r3, r4, r5
 80035ba:	2208      	movs	r2, #8
 80035bc:	4694      	mov	ip, r2
 80035be:	44bc      	add	ip, r7
 80035c0:	4463      	add	r3, ip
 80035c2:	881a      	ldrh	r2, [r3, #0]
 80035c4:	0013      	movs	r3, r2
 80035c6:	3b01      	subs	r3, #1
 80035c8:	21a4      	movs	r1, #164	; 0xa4
 80035ca:	0049      	lsls	r1, r1, #1
 80035cc:	2008      	movs	r0, #8
 80035ce:	1809      	adds	r1, r1, r0
 80035d0:	19c9      	adds	r1, r1, r7
 80035d2:	600b      	str	r3, [r1, #0]
 80035d4:	653a      	str	r2, [r7, #80]	; 0x50
 80035d6:	2300      	movs	r3, #0
 80035d8:	657b      	str	r3, [r7, #84]	; 0x54
 80035da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035de:	0003      	movs	r3, r0
 80035e0:	0f5b      	lsrs	r3, r3, #29
 80035e2:	000d      	movs	r5, r1
 80035e4:	00ed      	lsls	r5, r5, #3
 80035e6:	26dc      	movs	r6, #220	; 0xdc
 80035e8:	2408      	movs	r4, #8
 80035ea:	1934      	adds	r4, r6, r4
 80035ec:	19e4      	adds	r4, r4, r7
 80035ee:	6025      	str	r5, [r4, #0]
 80035f0:	2408      	movs	r4, #8
 80035f2:	1934      	adds	r4, r6, r4
 80035f4:	19e4      	adds	r4, r4, r7
 80035f6:	6825      	ldr	r5, [r4, #0]
 80035f8:	431d      	orrs	r5, r3
 80035fa:	2308      	movs	r3, #8
 80035fc:	18f3      	adds	r3, r6, r3
 80035fe:	19db      	adds	r3, r3, r7
 8003600:	601d      	str	r5, [r3, #0]
 8003602:	0003      	movs	r3, r0
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	21d8      	movs	r1, #216	; 0xd8
 8003608:	2008      	movs	r0, #8
 800360a:	1809      	adds	r1, r1, r0
 800360c:	19c9      	adds	r1, r1, r7
 800360e:	600b      	str	r3, [r1, #0]
 8003610:	64ba      	str	r2, [r7, #72]	; 0x48
 8003612:	2300      	movs	r3, #0
 8003614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003616:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003618:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800361a:	0003      	movs	r3, r0
 800361c:	0f5b      	lsrs	r3, r3, #29
 800361e:	000d      	movs	r5, r1
 8003620:	00ed      	lsls	r5, r5, #3
 8003622:	26d4      	movs	r6, #212	; 0xd4
 8003624:	2408      	movs	r4, #8
 8003626:	1934      	adds	r4, r6, r4
 8003628:	19e4      	adds	r4, r4, r7
 800362a:	6025      	str	r5, [r4, #0]
 800362c:	2408      	movs	r4, #8
 800362e:	1934      	adds	r4, r6, r4
 8003630:	19e5      	adds	r5, r4, r7
 8003632:	682d      	ldr	r5, [r5, #0]
 8003634:	431d      	orrs	r5, r3
 8003636:	2308      	movs	r3, #8
 8003638:	18f3      	adds	r3, r6, r3
 800363a:	19db      	adds	r3, r3, r7
 800363c:	601d      	str	r5, [r3, #0]
 800363e:	0003      	movs	r3, r0
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	21d0      	movs	r1, #208	; 0xd0
 8003644:	2008      	movs	r0, #8
 8003646:	1809      	adds	r1, r1, r0
 8003648:	19c9      	adds	r1, r1, r7
 800364a:	600b      	str	r3, [r1, #0]
 800364c:	0013      	movs	r3, r2
 800364e:	3307      	adds	r3, #7
 8003650:	08db      	lsrs	r3, r3, #3
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	466a      	mov	r2, sp
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	469d      	mov	sp, r3
 800365a:	ab02      	add	r3, sp, #8
 800365c:	3300      	adds	r3, #0
 800365e:	21a2      	movs	r1, #162	; 0xa2
 8003660:	0049      	lsls	r1, r1, #1
 8003662:	2208      	movs	r2, #8
 8003664:	188a      	adds	r2, r1, r2
 8003666:	19d1      	adds	r1, r2, r7
 8003668:	600b      	str	r3, [r1, #0]
				uint8_t weoBuffer2[symLen];
 800366a:	2390      	movs	r3, #144	; 0x90
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	681c      	ldr	r4, [r3, #0]
 8003672:	258c      	movs	r5, #140	; 0x8c
 8003674:	006d      	lsls	r5, r5, #1
 8003676:	1963      	adds	r3, r4, r5
 8003678:	2208      	movs	r2, #8
 800367a:	4694      	mov	ip, r2
 800367c:	44bc      	add	ip, r7
 800367e:	4463      	add	r3, ip
 8003680:	881a      	ldrh	r2, [r3, #0]
 8003682:	0013      	movs	r3, r2
 8003684:	3b01      	subs	r3, #1
 8003686:	21a0      	movs	r1, #160	; 0xa0
 8003688:	0049      	lsls	r1, r1, #1
 800368a:	2008      	movs	r0, #8
 800368c:	1809      	adds	r1, r1, r0
 800368e:	19c9      	adds	r1, r1, r7
 8003690:	600b      	str	r3, [r1, #0]
 8003692:	643a      	str	r2, [r7, #64]	; 0x40
 8003694:	2300      	movs	r3, #0
 8003696:	647b      	str	r3, [r7, #68]	; 0x44
 8003698:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800369a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800369c:	0003      	movs	r3, r0
 800369e:	0f5b      	lsrs	r3, r3, #29
 80036a0:	000c      	movs	r4, r1
 80036a2:	00e4      	lsls	r4, r4, #3
 80036a4:	26cc      	movs	r6, #204	; 0xcc
 80036a6:	2508      	movs	r5, #8
 80036a8:	1975      	adds	r5, r6, r5
 80036aa:	19ed      	adds	r5, r5, r7
 80036ac:	602c      	str	r4, [r5, #0]
 80036ae:	2408      	movs	r4, #8
 80036b0:	1934      	adds	r4, r6, r4
 80036b2:	19e4      	adds	r4, r4, r7
 80036b4:	6824      	ldr	r4, [r4, #0]
 80036b6:	431c      	orrs	r4, r3
 80036b8:	2308      	movs	r3, #8
 80036ba:	18f3      	adds	r3, r6, r3
 80036bc:	19db      	adds	r3, r3, r7
 80036be:	601c      	str	r4, [r3, #0]
 80036c0:	0003      	movs	r3, r0
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	21c8      	movs	r1, #200	; 0xc8
 80036c6:	2008      	movs	r0, #8
 80036c8:	1809      	adds	r1, r1, r0
 80036ca:	19c9      	adds	r1, r1, r7
 80036cc:	600b      	str	r3, [r1, #0]
 80036ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80036d0:	2300      	movs	r3, #0
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d8:	0003      	movs	r3, r0
 80036da:	0f5b      	lsrs	r3, r3, #29
 80036dc:	469c      	mov	ip, r3
 80036de:	000c      	movs	r4, r1
 80036e0:	00e4      	lsls	r4, r4, #3
 80036e2:	26c4      	movs	r6, #196	; 0xc4
 80036e4:	0035      	movs	r5, r6
 80036e6:	2308      	movs	r3, #8
 80036e8:	18f6      	adds	r6, r6, r3
 80036ea:	19f6      	adds	r6, r6, r7
 80036ec:	6034      	str	r4, [r6, #0]
 80036ee:	002c      	movs	r4, r5
 80036f0:	0025      	movs	r5, r4
 80036f2:	2308      	movs	r3, #8
 80036f4:	18e3      	adds	r3, r4, r3
 80036f6:	19de      	adds	r6, r3, r7
 80036f8:	6834      	ldr	r4, [r6, #0]
 80036fa:	4663      	mov	r3, ip
 80036fc:	431c      	orrs	r4, r3
 80036fe:	002b      	movs	r3, r5
 8003700:	2508      	movs	r5, #8
 8003702:	195b      	adds	r3, r3, r5
 8003704:	19db      	adds	r3, r3, r7
 8003706:	601c      	str	r4, [r3, #0]
 8003708:	0003      	movs	r3, r0
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	21c0      	movs	r1, #192	; 0xc0
 800370e:	2008      	movs	r0, #8
 8003710:	1809      	adds	r1, r1, r0
 8003712:	19c9      	adds	r1, r1, r7
 8003714:	600b      	str	r3, [r1, #0]
 8003716:	0013      	movs	r3, r2
 8003718:	3307      	adds	r3, #7
 800371a:	08db      	lsrs	r3, r3, #3
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	466a      	mov	r2, sp
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	469d      	mov	sp, r3
 8003724:	ab02      	add	r3, sp, #8
 8003726:	3300      	adds	r3, #0
 8003728:	229e      	movs	r2, #158	; 0x9e
 800372a:	0052      	lsls	r2, r2, #1
 800372c:	2108      	movs	r1, #8
 800372e:	1852      	adds	r2, r2, r1
 8003730:	19d2      	adds	r2, r2, r7
 8003732:	6013      	str	r3, [r2, #0]
				X_increment=0x07;
 8003734:	233f      	movs	r3, #63	; 0x3f
 8003736:	258c      	movs	r5, #140	; 0x8c
 8003738:	006d      	lsls	r5, r5, #1
 800373a:	195b      	adds	r3, r3, r5
 800373c:	2208      	movs	r2, #8
 800373e:	18ba      	adds	r2, r7, r2
 8003740:	189a      	adds	r2, r3, r2
 8003742:	2307      	movs	r3, #7
 8003744:	7013      	strb	r3, [r2, #0]
				ASCII_height=0x12;
 8003746:	233e      	movs	r3, #62	; 0x3e
 8003748:	195b      	adds	r3, r3, r5
 800374a:	2208      	movs	r2, #8
 800374c:	18ba      	adds	r2, r7, r2
 800374e:	189a      	adds	r2, r3, r2
 8003750:	2312      	movs	r3, #18
 8003752:	7013      	strb	r3, [r2, #0]
				for(i=0;i<strLen;i++){
 8003754:	2362      	movs	r3, #98	; 0x62
 8003756:	195b      	adds	r3, r3, r5
 8003758:	2208      	movs	r2, #8
 800375a:	18ba      	adds	r2, r7, r2
 800375c:	189a      	adds	r2, r3, r2
 800375e:	2300      	movs	r3, #0
 8003760:	8013      	strh	r3, [r2, #0]
 8003762:	e109      	b.n	8003978 <printASCIIarray+0xb74>
					for(j=0;j<symLen;j++){
 8003764:	2364      	movs	r3, #100	; 0x64
 8003766:	228c      	movs	r2, #140	; 0x8c
 8003768:	0052      	lsls	r2, r2, #1
 800376a:	189b      	adds	r3, r3, r2
 800376c:	2208      	movs	r2, #8
 800376e:	18ba      	adds	r2, r7, r2
 8003770:	189a      	adds	r2, r3, r2
 8003772:	2300      	movs	r3, #0
 8003774:	8013      	strh	r3, [r2, #0]
 8003776:	e041      	b.n	80037fc <printASCIIarray+0x9f8>
						weoBuffer[j]=F2[dataASCII[i]][j];
 8003778:	2362      	movs	r3, #98	; 0x62
 800377a:	218c      	movs	r1, #140	; 0x8c
 800377c:	0049      	lsls	r1, r1, #1
 800377e:	185b      	adds	r3, r3, r1
 8003780:	2208      	movs	r2, #8
 8003782:	4694      	mov	ip, r2
 8003784:	44bc      	add	ip, r7
 8003786:	4463      	add	r3, ip
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	2380      	movs	r3, #128	; 0x80
 800378c:	185b      	adds	r3, r3, r1
 800378e:	2008      	movs	r0, #8
 8003790:	4684      	mov	ip, r0
 8003792:	2008      	movs	r0, #8
 8003794:	4681      	mov	r9, r0
 8003796:	44b9      	add	r9, r7
 8003798:	44cc      	add	ip, r9
 800379a:	4463      	add	r3, ip
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	189b      	adds	r3, r3, r2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	001d      	movs	r5, r3
 80037a4:	2264      	movs	r2, #100	; 0x64
 80037a6:	1853      	adds	r3, r2, r1
 80037a8:	2008      	movs	r0, #8
 80037aa:	4684      	mov	ip, r0
 80037ac:	44bc      	add	ip, r7
 80037ae:	4463      	add	r3, ip
 80037b0:	8818      	ldrh	r0, [r3, #0]
 80037b2:	000e      	movs	r6, r1
 80037b4:	1853      	adds	r3, r2, r1
 80037b6:	2208      	movs	r2, #8
 80037b8:	4694      	mov	ip, r2
 80037ba:	44bc      	add	ip, r7
 80037bc:	4463      	add	r3, ip
 80037be:	881c      	ldrh	r4, [r3, #0]
 80037c0:	497a      	ldr	r1, [pc, #488]	; (80039ac <printASCIIarray+0xba8>)
 80037c2:	002a      	movs	r2, r5
 80037c4:	0052      	lsls	r2, r2, #1
 80037c6:	1952      	adds	r2, r2, r5
 80037c8:	0153      	lsls	r3, r2, #5
 80037ca:	18d2      	adds	r2, r2, r3
 80037cc:	188b      	adds	r3, r1, r2
 80037ce:	5c1b      	ldrb	r3, [r3, r0]
 80037d0:	22a6      	movs	r2, #166	; 0xa6
 80037d2:	0052      	lsls	r2, r2, #1
 80037d4:	2108      	movs	r1, #8
 80037d6:	1852      	adds	r2, r2, r1
 80037d8:	19d2      	adds	r2, r2, r7
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	5513      	strb	r3, [r2, r4]
					for(j=0;j<symLen;j++){
 80037de:	2264      	movs	r2, #100	; 0x64
 80037e0:	0031      	movs	r1, r6
 80037e2:	1853      	adds	r3, r2, r1
 80037e4:	2008      	movs	r0, #8
 80037e6:	4684      	mov	ip, r0
 80037e8:	44bc      	add	ip, r7
 80037ea:	4463      	add	r3, ip
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	1852      	adds	r2, r2, r1
 80037f0:	2108      	movs	r1, #8
 80037f2:	468c      	mov	ip, r1
 80037f4:	44bc      	add	ip, r7
 80037f6:	4462      	add	r2, ip
 80037f8:	3301      	adds	r3, #1
 80037fa:	8013      	strh	r3, [r2, #0]
 80037fc:	2364      	movs	r3, #100	; 0x64
 80037fe:	218c      	movs	r1, #140	; 0x8c
 8003800:	0049      	lsls	r1, r1, #1
 8003802:	185b      	adds	r3, r3, r1
 8003804:	2208      	movs	r2, #8
 8003806:	18ba      	adds	r2, r7, r2
 8003808:	189a      	adds	r2, r3, r2
 800380a:	235a      	movs	r3, #90	; 0x5a
 800380c:	185b      	adds	r3, r3, r1
 800380e:	2008      	movs	r0, #8
 8003810:	4684      	mov	ip, r0
 8003812:	44bc      	add	ip, r7
 8003814:	4463      	add	r3, ip
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d3ac      	bcc.n	8003778 <printASCIIarray+0x974>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800381e:	2366      	movs	r3, #102	; 0x66
 8003820:	185b      	adds	r3, r3, r1
 8003822:	2208      	movs	r2, #8
 8003824:	18ba      	adds	r2, r7, r2
 8003826:	189a      	adds	r2, r3, r2
 8003828:	2300      	movs	r3, #0
 800382a:	8013      	strh	r3, [r2, #0]
 800382c:	e030      	b.n	8003890 <printASCIIarray+0xa8c>
						weoBuffer[k]=weoBuffer[k] & contrast;
 800382e:	2066      	movs	r0, #102	; 0x66
 8003830:	248c      	movs	r4, #140	; 0x8c
 8003832:	0064      	lsls	r4, r4, #1
 8003834:	1903      	adds	r3, r0, r4
 8003836:	2208      	movs	r2, #8
 8003838:	4694      	mov	ip, r2
 800383a:	44bc      	add	ip, r7
 800383c:	4463      	add	r3, ip
 800383e:	881a      	ldrh	r2, [r3, #0]
 8003840:	25a6      	movs	r5, #166	; 0xa6
 8003842:	006d      	lsls	r5, r5, #1
 8003844:	2308      	movs	r3, #8
 8003846:	18eb      	adds	r3, r5, r3
 8003848:	19db      	adds	r3, r3, r7
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	5c9a      	ldrb	r2, [r3, r2]
 800384e:	1903      	adds	r3, r0, r4
 8003850:	2108      	movs	r1, #8
 8003852:	468c      	mov	ip, r1
 8003854:	44bc      	add	ip, r7
 8003856:	4463      	add	r3, ip
 8003858:	8819      	ldrh	r1, [r3, #0]
 800385a:	235c      	movs	r3, #92	; 0x5c
 800385c:	191b      	adds	r3, r3, r4
 800385e:	2608      	movs	r6, #8
 8003860:	46b4      	mov	ip, r6
 8003862:	44bc      	add	ip, r7
 8003864:	4463      	add	r3, ip
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4013      	ands	r3, r2
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2208      	movs	r2, #8
 800386e:	18aa      	adds	r2, r5, r2
 8003870:	19d2      	adds	r2, r2, r7
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	5453      	strb	r3, [r2, r1]
					for (k=0;k<symLen;k++){
 8003876:	1903      	adds	r3, r0, r4
 8003878:	2208      	movs	r2, #8
 800387a:	4694      	mov	ip, r2
 800387c:	44bc      	add	ip, r7
 800387e:	4463      	add	r3, ip
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	1902      	adds	r2, r0, r4
 8003884:	2108      	movs	r1, #8
 8003886:	468c      	mov	ip, r1
 8003888:	44bc      	add	ip, r7
 800388a:	4462      	add	r2, ip
 800388c:	3301      	adds	r3, #1
 800388e:	8013      	strh	r3, [r2, #0]
 8003890:	2366      	movs	r3, #102	; 0x66
 8003892:	258c      	movs	r5, #140	; 0x8c
 8003894:	006d      	lsls	r5, r5, #1
 8003896:	195b      	adds	r3, r3, r5
 8003898:	2208      	movs	r2, #8
 800389a:	18ba      	adds	r2, r7, r2
 800389c:	189a      	adds	r2, r3, r2
 800389e:	235a      	movs	r3, #90	; 0x5a
 80038a0:	195b      	adds	r3, r3, r5
 80038a2:	2108      	movs	r1, #8
 80038a4:	468c      	mov	ip, r1
 80038a6:	44bc      	add	ip, r7
 80038a8:	4463      	add	r3, ip
 80038aa:	8812      	ldrh	r2, [r2, #0]
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3bd      	bcc.n	800382e <printASCIIarray+0xa2a>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 80038b2:	205f      	movs	r0, #95	; 0x5f
 80038b4:	1943      	adds	r3, r0, r5
 80038b6:	2208      	movs	r2, #8
 80038b8:	18ba      	adds	r2, r7, r2
 80038ba:	189a      	adds	r2, r3, r2
 80038bc:	233f      	movs	r3, #63	; 0x3f
 80038be:	195b      	adds	r3, r3, r5
 80038c0:	2108      	movs	r1, #8
 80038c2:	468c      	mov	ip, r1
 80038c4:	44bc      	add	ip, r7
 80038c6:	4463      	add	r3, ip
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b2dc      	uxtb	r4, r3
 80038d4:	268f      	movs	r6, #143	; 0x8f
 80038d6:	0076      	lsls	r6, r6, #1
 80038d8:	2308      	movs	r3, #8
 80038da:	18f3      	adds	r3, r6, r3
 80038dc:	19da      	adds	r2, r3, r7
 80038de:	213e      	movs	r1, #62	; 0x3e
 80038e0:	194b      	adds	r3, r1, r5
 80038e2:	2108      	movs	r1, #8
 80038e4:	468c      	mov	ip, r1
 80038e6:	44bc      	add	ip, r7
 80038e8:	4463      	add	r3, ip
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	2160      	movs	r1, #96	; 0x60
 80038f4:	1949      	adds	r1, r1, r5
 80038f6:	2308      	movs	r3, #8
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	18cb      	adds	r3, r1, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	b2da      	uxtb	r2, r3
 8003902:	2308      	movs	r3, #8
 8003904:	18f3      	adds	r3, r6, r3
 8003906:	19db      	adds	r3, r3, r7
 8003908:	7819      	ldrb	r1, [r3, #0]
 800390a:	0005      	movs	r5, r0
 800390c:	238c      	movs	r3, #140	; 0x8c
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	18c6      	adds	r6, r0, r3
 8003912:	2308      	movs	r3, #8
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	18f3      	adds	r3, r6, r3
 8003918:	7818      	ldrb	r0, [r3, #0]
 800391a:	26a6      	movs	r6, #166	; 0xa6
 800391c:	0076      	lsls	r6, r6, #1
 800391e:	2308      	movs	r3, #8
 8003920:	18f3      	adds	r3, r6, r3
 8003922:	19de      	adds	r6, r3, r7
 8003924:	6833      	ldr	r3, [r6, #0]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	23ff      	movs	r3, #255	; 0xff
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	0013      	movs	r3, r2
 800392e:	0022      	movs	r2, r4
 8003930:	f7fd fdc8 	bl	80014c4 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 8003934:	208c      	movs	r0, #140	; 0x8c
 8003936:	0040      	lsls	r0, r0, #1
 8003938:	182b      	adds	r3, r5, r0
 800393a:	2208      	movs	r2, #8
 800393c:	18ba      	adds	r2, r7, r2
 800393e:	1899      	adds	r1, r3, r2
 8003940:	182b      	adds	r3, r5, r0
 8003942:	2208      	movs	r2, #8
 8003944:	18ba      	adds	r2, r7, r2
 8003946:	189a      	adds	r2, r3, r2
 8003948:	233f      	movs	r3, #63	; 0x3f
 800394a:	181b      	adds	r3, r3, r0
 800394c:	2408      	movs	r4, #8
 800394e:	46a4      	mov	ip, r4
 8003950:	44bc      	add	ip, r7
 8003952:	4463      	add	r3, ip
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	18d3      	adds	r3, r2, r3
 800395a:	700b      	strb	r3, [r1, #0]
				for(i=0;i<strLen;i++){
 800395c:	2262      	movs	r2, #98	; 0x62
 800395e:	1813      	adds	r3, r2, r0
 8003960:	2108      	movs	r1, #8
 8003962:	468c      	mov	ip, r1
 8003964:	44bc      	add	ip, r7
 8003966:	4463      	add	r3, ip
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	1812      	adds	r2, r2, r0
 800396c:	2108      	movs	r1, #8
 800396e:	468c      	mov	ip, r1
 8003970:	44bc      	add	ip, r7
 8003972:	4462      	add	r2, ip
 8003974:	3301      	adds	r3, #1
 8003976:	8013      	strh	r3, [r2, #0]
 8003978:	231e      	movs	r3, #30
 800397a:	33ff      	adds	r3, #255	; 0xff
 800397c:	2208      	movs	r2, #8
 800397e:	189b      	adds	r3, r3, r2
 8003980:	19db      	adds	r3, r3, r7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	2162      	movs	r1, #98	; 0x62
 8003988:	208c      	movs	r0, #140	; 0x8c
 800398a:	0040      	lsls	r0, r0, #1
 800398c:	180b      	adds	r3, r1, r0
 800398e:	2408      	movs	r4, #8
 8003990:	46a4      	mov	ip, r4
 8003992:	44bc      	add	ip, r7
 8003994:	4463      	add	r3, ip
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	4293      	cmp	r3, r2
 800399a:	d200      	bcs.n	800399e <printASCIIarray+0xb9a>
 800399c:	e6e2      	b.n	8003764 <printASCIIarray+0x960>
				}
				for(i=0;i<symLen;i++){
 800399e:	180b      	adds	r3, r1, r0
 80039a0:	2208      	movs	r2, #8
 80039a2:	18ba      	adds	r2, r7, r2
 80039a4:	189a      	adds	r2, r3, r2
 80039a6:	2300      	movs	r3, #0
 80039a8:	8013      	strh	r3, [r2, #0]
 80039aa:	e020      	b.n	80039ee <printASCIIarray+0xbea>
 80039ac:	0800fac8 	.word	0x0800fac8
									weoBuffer[j]=0x00;
 80039b0:	2364      	movs	r3, #100	; 0x64
 80039b2:	208c      	movs	r0, #140	; 0x8c
 80039b4:	0040      	lsls	r0, r0, #1
 80039b6:	181b      	adds	r3, r3, r0
 80039b8:	2208      	movs	r2, #8
 80039ba:	4694      	mov	ip, r2
 80039bc:	44bc      	add	ip, r7
 80039be:	4463      	add	r3, ip
 80039c0:	8819      	ldrh	r1, [r3, #0]
 80039c2:	23a6      	movs	r3, #166	; 0xa6
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	2208      	movs	r2, #8
 80039c8:	189b      	adds	r3, r3, r2
 80039ca:	19db      	adds	r3, r3, r7
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	2300      	movs	r3, #0
 80039d0:	5453      	strb	r3, [r2, r1]
				for(i=0;i<symLen;i++){
 80039d2:	2262      	movs	r2, #98	; 0x62
 80039d4:	1813      	adds	r3, r2, r0
 80039d6:	2108      	movs	r1, #8
 80039d8:	468c      	mov	ip, r1
 80039da:	44bc      	add	ip, r7
 80039dc:	4463      	add	r3, ip
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	1812      	adds	r2, r2, r0
 80039e2:	2108      	movs	r1, #8
 80039e4:	468c      	mov	ip, r1
 80039e6:	44bc      	add	ip, r7
 80039e8:	4462      	add	r2, ip
 80039ea:	3301      	adds	r3, #1
 80039ec:	8013      	strh	r3, [r2, #0]
 80039ee:	2362      	movs	r3, #98	; 0x62
 80039f0:	218c      	movs	r1, #140	; 0x8c
 80039f2:	0049      	lsls	r1, r1, #1
 80039f4:	185b      	adds	r3, r3, r1
 80039f6:	2208      	movs	r2, #8
 80039f8:	18ba      	adds	r2, r7, r2
 80039fa:	189a      	adds	r2, r3, r2
 80039fc:	235a      	movs	r3, #90	; 0x5a
 80039fe:	185b      	adds	r3, r3, r1
 8003a00:	2108      	movs	r1, #8
 8003a02:	468c      	mov	ip, r1
 8003a04:	44bc      	add	ip, r7
 8003a06:	4463      	add	r3, ip
 8003a08:	8812      	ldrh	r2, [r2, #0]
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d3cf      	bcc.n	80039b0 <printASCIIarray+0xbac>
 8003a10:	46c5      	mov	sp, r8
							}
			}
			if(fontCur==2){
 8003a12:	2361      	movs	r3, #97	; 0x61
 8003a14:	268c      	movs	r6, #140	; 0x8c
 8003a16:	0076      	lsls	r6, r6, #1
 8003a18:	199b      	adds	r3, r3, r6
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4694      	mov	ip, r2
 8003a1e:	44bc      	add	ip, r7
 8003a20:	4463      	add	r3, ip
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d001      	beq.n	8003a2c <printASCIIarray+0xc28>
 8003a28:	f001 f82b 	bl	8004a82 <printASCIIarray+0x1c7e>
 8003a2c:	466b      	mov	r3, sp
 8003a2e:	001d      	movs	r5, r3
				symLen=304;
 8003a30:	245a      	movs	r4, #90	; 0x5a
 8003a32:	19a3      	adds	r3, r4, r6
 8003a34:	2208      	movs	r2, #8
 8003a36:	18ba      	adds	r2, r7, r2
 8003a38:	189a      	adds	r2, r3, r2
 8003a3a:	2398      	movs	r3, #152	; 0x98
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	8013      	strh	r3, [r2, #0]
				uint8_t weoBuffer[symLen];
 8003a40:	607c      	str	r4, [r7, #4]
 8003a42:	19a3      	adds	r3, r4, r6
 8003a44:	2208      	movs	r2, #8
 8003a46:	4694      	mov	ip, r2
 8003a48:	44bc      	add	ip, r7
 8003a4a:	4463      	add	r3, ip
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	2290      	movs	r2, #144	; 0x90
 8003a50:	0052      	lsls	r2, r2, #1
 8003a52:	18ba      	adds	r2, r7, r2
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	2390      	movs	r3, #144	; 0x90
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	219c      	movs	r1, #156	; 0x9c
 8003a62:	0049      	lsls	r1, r1, #1
 8003a64:	2208      	movs	r2, #8
 8003a66:	188a      	adds	r2, r1, r2
 8003a68:	19d1      	adds	r1, r2, r7
 8003a6a:	600b      	str	r3, [r1, #0]
 8003a6c:	2390      	movs	r3, #144	; 0x90
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	633b      	str	r3, [r7, #48]	; 0x30
 8003a76:	2300      	movs	r3, #0
 8003a78:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a7e:	0003      	movs	r3, r0
 8003a80:	0f5b      	lsrs	r3, r3, #29
 8003a82:	000e      	movs	r6, r1
 8003a84:	00f6      	lsls	r6, r6, #3
 8003a86:	24bc      	movs	r4, #188	; 0xbc
 8003a88:	2208      	movs	r2, #8
 8003a8a:	18a2      	adds	r2, r4, r2
 8003a8c:	19d2      	adds	r2, r2, r7
 8003a8e:	6016      	str	r6, [r2, #0]
 8003a90:	2208      	movs	r2, #8
 8003a92:	18a2      	adds	r2, r4, r2
 8003a94:	19d6      	adds	r6, r2, r7
 8003a96:	6836      	ldr	r6, [r6, #0]
 8003a98:	431e      	orrs	r6, r3
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	18e3      	adds	r3, r4, r3
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	601e      	str	r6, [r3, #0]
 8003aa2:	0003      	movs	r3, r0
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	21b8      	movs	r1, #184	; 0xb8
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	188a      	adds	r2, r1, r2
 8003aac:	19d1      	adds	r1, r2, r7
 8003aae:	600b      	str	r3, [r1, #0]
 8003ab0:	2390      	movs	r3, #144	; 0x90
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	0f5b      	lsrs	r3, r3, #29
 8003ac6:	469c      	mov	ip, r3
 8003ac8:	000e      	movs	r6, r1
 8003aca:	00f6      	lsls	r6, r6, #3
 8003acc:	24b4      	movs	r4, #180	; 0xb4
 8003ace:	0022      	movs	r2, r4
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	18e4      	adds	r4, r4, r3
 8003ad4:	19e4      	adds	r4, r4, r7
 8003ad6:	6026      	str	r6, [r4, #0]
 8003ad8:	0016      	movs	r6, r2
 8003ada:	0032      	movs	r2, r6
 8003adc:	2308      	movs	r3, #8
 8003ade:	18f3      	adds	r3, r6, r3
 8003ae0:	19dc      	adds	r4, r3, r7
 8003ae2:	6826      	ldr	r6, [r4, #0]
 8003ae4:	4663      	mov	r3, ip
 8003ae6:	431e      	orrs	r6, r3
 8003ae8:	0013      	movs	r3, r2
 8003aea:	2208      	movs	r2, #8
 8003aec:	189b      	adds	r3, r3, r2
 8003aee:	19db      	adds	r3, r3, r7
 8003af0:	601e      	str	r6, [r3, #0]
 8003af2:	0003      	movs	r3, r0
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	21b0      	movs	r1, #176	; 0xb0
 8003af8:	2208      	movs	r2, #8
 8003afa:	188a      	adds	r2, r1, r2
 8003afc:	19d1      	adds	r1, r2, r7
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	2390      	movs	r3, #144	; 0x90
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3307      	adds	r3, #7
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	466a      	mov	r2, sp
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	469d      	mov	sp, r3
 8003b14:	ab02      	add	r3, sp, #8
 8003b16:	3300      	adds	r3, #0
 8003b18:	229a      	movs	r2, #154	; 0x9a
 8003b1a:	0052      	lsls	r2, r2, #1
 8003b1c:	2108      	movs	r1, #8
 8003b1e:	1852      	adds	r2, r2, r1
 8003b20:	19d2      	adds	r2, r2, r7
 8003b22:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer1[symLen];
 8003b24:	687c      	ldr	r4, [r7, #4]
 8003b26:	607c      	str	r4, [r7, #4]
 8003b28:	268c      	movs	r6, #140	; 0x8c
 8003b2a:	0076      	lsls	r6, r6, #1
 8003b2c:	19a3      	adds	r3, r4, r6
 8003b2e:	2208      	movs	r2, #8
 8003b30:	4694      	mov	ip, r2
 8003b32:	44bc      	add	ip, r7
 8003b34:	4463      	add	r3, ip
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	2290      	movs	r2, #144	; 0x90
 8003b3a:	0052      	lsls	r2, r2, #1
 8003b3c:	18ba      	adds	r2, r7, r2
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	2390      	movs	r3, #144	; 0x90
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2198      	movs	r1, #152	; 0x98
 8003b4c:	0049      	lsls	r1, r1, #1
 8003b4e:	2208      	movs	r2, #8
 8003b50:	188a      	adds	r2, r1, r2
 8003b52:	19d1      	adds	r1, r2, r7
 8003b54:	600b      	str	r3, [r1, #0]
 8003b56:	2390      	movs	r3, #144	; 0x90
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	6a38      	ldr	r0, [r7, #32]
 8003b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b68:	0003      	movs	r3, r0
 8003b6a:	0f5b      	lsrs	r3, r3, #29
 8003b6c:	000e      	movs	r6, r1
 8003b6e:	00f6      	lsls	r6, r6, #3
 8003b70:	24ac      	movs	r4, #172	; 0xac
 8003b72:	2208      	movs	r2, #8
 8003b74:	18a2      	adds	r2, r4, r2
 8003b76:	19d2      	adds	r2, r2, r7
 8003b78:	6016      	str	r6, [r2, #0]
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	18a2      	adds	r2, r4, r2
 8003b7e:	19d6      	adds	r6, r2, r7
 8003b80:	6836      	ldr	r6, [r6, #0]
 8003b82:	431e      	orrs	r6, r3
 8003b84:	2308      	movs	r3, #8
 8003b86:	18e3      	adds	r3, r4, r3
 8003b88:	19db      	adds	r3, r3, r7
 8003b8a:	601e      	str	r6, [r3, #0]
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	21a8      	movs	r1, #168	; 0xa8
 8003b92:	2208      	movs	r2, #8
 8003b94:	188a      	adds	r2, r1, r2
 8003b96:	19d1      	adds	r1, r2, r7
 8003b98:	600b      	str	r3, [r1, #0]
 8003b9a:	2390      	movs	r3, #144	; 0x90
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	69b8      	ldr	r0, [r7, #24]
 8003baa:	69f9      	ldr	r1, [r7, #28]
 8003bac:	0003      	movs	r3, r0
 8003bae:	0f5b      	lsrs	r3, r3, #29
 8003bb0:	469c      	mov	ip, r3
 8003bb2:	000e      	movs	r6, r1
 8003bb4:	00f6      	lsls	r6, r6, #3
 8003bb6:	24a4      	movs	r4, #164	; 0xa4
 8003bb8:	0022      	movs	r2, r4
 8003bba:	2308      	movs	r3, #8
 8003bbc:	18e4      	adds	r4, r4, r3
 8003bbe:	19e4      	adds	r4, r4, r7
 8003bc0:	6026      	str	r6, [r4, #0]
 8003bc2:	0016      	movs	r6, r2
 8003bc4:	0032      	movs	r2, r6
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	18f3      	adds	r3, r6, r3
 8003bca:	19dc      	adds	r4, r3, r7
 8003bcc:	6826      	ldr	r6, [r4, #0]
 8003bce:	4663      	mov	r3, ip
 8003bd0:	431e      	orrs	r6, r3
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	601e      	str	r6, [r3, #0]
 8003bdc:	0003      	movs	r3, r0
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	21a0      	movs	r1, #160	; 0xa0
 8003be2:	2208      	movs	r2, #8
 8003be4:	188a      	adds	r2, r1, r2
 8003be6:	19d1      	adds	r1, r2, r7
 8003be8:	600b      	str	r3, [r1, #0]
 8003bea:	2390      	movs	r3, #144	; 0x90
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	18fb      	adds	r3, r7, r3
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3307      	adds	r3, #7
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	466a      	mov	r2, sp
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	469d      	mov	sp, r3
 8003bfe:	ab02      	add	r3, sp, #8
 8003c00:	3300      	adds	r3, #0
 8003c02:	2296      	movs	r2, #150	; 0x96
 8003c04:	0052      	lsls	r2, r2, #1
 8003c06:	2108      	movs	r1, #8
 8003c08:	1852      	adds	r2, r2, r1
 8003c0a:	19d2      	adds	r2, r2, r7
 8003c0c:	6013      	str	r3, [r2, #0]
				uint8_t weoBuffer2[symLen];
 8003c0e:	687c      	ldr	r4, [r7, #4]
 8003c10:	268c      	movs	r6, #140	; 0x8c
 8003c12:	0076      	lsls	r6, r6, #1
 8003c14:	19a3      	adds	r3, r4, r6
 8003c16:	2208      	movs	r2, #8
 8003c18:	4694      	mov	ip, r2
 8003c1a:	44bc      	add	ip, r7
 8003c1c:	4463      	add	r3, ip
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	2290      	movs	r2, #144	; 0x90
 8003c22:	0052      	lsls	r2, r2, #1
 8003c24:	18ba      	adds	r2, r7, r2
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	2390      	movs	r3, #144	; 0x90
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	3a01      	subs	r2, #1
 8003c32:	2194      	movs	r1, #148	; 0x94
 8003c34:	0049      	lsls	r1, r1, #1
 8003c36:	2308      	movs	r3, #8
 8003c38:	18cb      	adds	r3, r1, r3
 8003c3a:	19d9      	adds	r1, r3, r7
 8003c3c:	600a      	str	r2, [r1, #0]
 8003c3e:	2390      	movs	r3, #144	; 0x90
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	617a      	str	r2, [r7, #20]
 8003c4c:	6938      	ldr	r0, [r7, #16]
 8003c4e:	6979      	ldr	r1, [r7, #20]
 8003c50:	0002      	movs	r2, r0
 8003c52:	0f52      	lsrs	r2, r2, #29
 8003c54:	000c      	movs	r4, r1
 8003c56:	00e4      	lsls	r4, r4, #3
 8003c58:	269c      	movs	r6, #156	; 0x9c
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	18f3      	adds	r3, r6, r3
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	601c      	str	r4, [r3, #0]
 8003c62:	2308      	movs	r3, #8
 8003c64:	18f3      	adds	r3, r6, r3
 8003c66:	19dc      	adds	r4, r3, r7
 8003c68:	6824      	ldr	r4, [r4, #0]
 8003c6a:	4314      	orrs	r4, r2
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	18f3      	adds	r3, r6, r3
 8003c70:	19da      	adds	r2, r3, r7
 8003c72:	6014      	str	r4, [r2, #0]
 8003c74:	0002      	movs	r2, r0
 8003c76:	00d2      	lsls	r2, r2, #3
 8003c78:	2198      	movs	r1, #152	; 0x98
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	18cb      	adds	r3, r1, r3
 8003c7e:	19d9      	adds	r1, r3, r7
 8003c80:	600a      	str	r2, [r1, #0]
 8003c82:	2390      	movs	r3, #144	; 0x90
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60bb      	str	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	60fa      	str	r2, [r7, #12]
 8003c90:	68b8      	ldr	r0, [r7, #8]
 8003c92:	68f9      	ldr	r1, [r7, #12]
 8003c94:	0002      	movs	r2, r0
 8003c96:	0f52      	lsrs	r2, r2, #29
 8003c98:	000c      	movs	r4, r1
 8003c9a:	00e4      	lsls	r4, r4, #3
 8003c9c:	2694      	movs	r6, #148	; 0x94
 8003c9e:	603e      	str	r6, [r7, #0]
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	18f6      	adds	r6, r6, r3
 8003ca4:	19f6      	adds	r6, r6, r7
 8003ca6:	6034      	str	r4, [r6, #0]
 8003ca8:	683c      	ldr	r4, [r7, #0]
 8003caa:	0023      	movs	r3, r4
 8003cac:	2608      	movs	r6, #8
 8003cae:	19a4      	adds	r4, r4, r6
 8003cb0:	19e6      	adds	r6, r4, r7
 8003cb2:	6834      	ldr	r4, [r6, #0]
 8003cb4:	4314      	orrs	r4, r2
 8003cb6:	001a      	movs	r2, r3
 8003cb8:	2308      	movs	r3, #8
 8003cba:	18d3      	adds	r3, r2, r3
 8003cbc:	19da      	adds	r2, r3, r7
 8003cbe:	6014      	str	r4, [r2, #0]
 8003cc0:	0002      	movs	r2, r0
 8003cc2:	00d2      	lsls	r2, r2, #3
 8003cc4:	2190      	movs	r1, #144	; 0x90
 8003cc6:	2308      	movs	r3, #8
 8003cc8:	18cb      	adds	r3, r1, r3
 8003cca:	19d9      	adds	r1, r3, r7
 8003ccc:	600a      	str	r2, [r1, #0]
 8003cce:	2390      	movs	r3, #144	; 0x90
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3307      	adds	r3, #7
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	466a      	mov	r2, sp
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	469d      	mov	sp, r3
 8003ce2:	ab02      	add	r3, sp, #8
 8003ce4:	3300      	adds	r3, #0
 8003ce6:	2292      	movs	r2, #146	; 0x92
 8003ce8:	0052      	lsls	r2, r2, #1
 8003cea:	2108      	movs	r1, #8
 8003cec:	1852      	adds	r2, r2, r1
 8003cee:	19d2      	adds	r2, r2, r7
 8003cf0:	6013      	str	r3, [r2, #0]
				X_increment=0x10;
 8003cf2:	233f      	movs	r3, #63	; 0x3f
 8003cf4:	268c      	movs	r6, #140	; 0x8c
 8003cf6:	0076      	lsls	r6, r6, #1
 8003cf8:	199b      	adds	r3, r3, r6
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	4694      	mov	ip, r2
 8003cfe:	44bc      	add	ip, r7
 8003d00:	4463      	add	r3, ip
 8003d02:	2210      	movs	r2, #16
 8003d04:	701a      	strb	r2, [r3, #0]
				ASCII_height=0x26;
 8003d06:	233e      	movs	r3, #62	; 0x3e
 8003d08:	199b      	adds	r3, r3, r6
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	4694      	mov	ip, r2
 8003d0e:	44bc      	add	ip, r7
 8003d10:	4463      	add	r3, ip
 8003d12:	2226      	movs	r2, #38	; 0x26
 8003d14:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 8003d16:	2362      	movs	r3, #98	; 0x62
 8003d18:	199b      	adds	r3, r3, r6
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	4694      	mov	ip, r2
 8003d1e:	44bc      	add	ip, r7
 8003d20:	4463      	add	r3, ip
 8003d22:	2200      	movs	r2, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	f000 fd30 	bl	800478a <printASCIIarray+0x1986>
					if(dataASCII[i]==0x20){dataASCII[i]=0x00;}
 8003d2a:	2162      	movs	r1, #98	; 0x62
 8003d2c:	248c      	movs	r4, #140	; 0x8c
 8003d2e:	0064      	lsls	r4, r4, #1
 8003d30:	190b      	adds	r3, r1, r4
 8003d32:	2208      	movs	r2, #8
 8003d34:	4694      	mov	ip, r2
 8003d36:	44bc      	add	ip, r7
 8003d38:	4463      	add	r3, ip
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	2080      	movs	r0, #128	; 0x80
 8003d3e:	1902      	adds	r2, r0, r4
 8003d40:	2608      	movs	r6, #8
 8003d42:	46b4      	mov	ip, r6
 8003d44:	2608      	movs	r6, #8
 8003d46:	46b0      	mov	r8, r6
 8003d48:	44b8      	add	r8, r7
 8003d4a:	44c4      	add	ip, r8
 8003d4c:	4462      	add	r2, ip
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	18d3      	adds	r3, r2, r3
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d111      	bne.n	8003d7c <printASCIIarray+0xf78>
 8003d58:	190b      	adds	r3, r1, r4
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	4694      	mov	ip, r2
 8003d5e:	44bc      	add	ip, r7
 8003d60:	4463      	add	r3, ip
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	1902      	adds	r2, r0, r4
 8003d66:	2108      	movs	r1, #8
 8003d68:	468c      	mov	ip, r1
 8003d6a:	2108      	movs	r1, #8
 8003d6c:	4688      	mov	r8, r1
 8003d6e:	44b8      	add	r8, r7
 8003d70:	44c4      	add	ip, r8
 8003d72:	4462      	add	r2, ip
 8003d74:	6812      	ldr	r2, [r2, #0]
 8003d76:	18d3      	adds	r3, r2, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x21){dataASCII[i]=0x01;}
 8003d7c:	2162      	movs	r1, #98	; 0x62
 8003d7e:	248c      	movs	r4, #140	; 0x8c
 8003d80:	0064      	lsls	r4, r4, #1
 8003d82:	190b      	adds	r3, r1, r4
 8003d84:	2208      	movs	r2, #8
 8003d86:	4694      	mov	ip, r2
 8003d88:	44bc      	add	ip, r7
 8003d8a:	4463      	add	r3, ip
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	2080      	movs	r0, #128	; 0x80
 8003d90:	1902      	adds	r2, r0, r4
 8003d92:	2608      	movs	r6, #8
 8003d94:	46b4      	mov	ip, r6
 8003d96:	2608      	movs	r6, #8
 8003d98:	46b0      	mov	r8, r6
 8003d9a:	44b8      	add	r8, r7
 8003d9c:	44c4      	add	ip, r8
 8003d9e:	4462      	add	r2, ip
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	2b21      	cmp	r3, #33	; 0x21
 8003da8:	d111      	bne.n	8003dce <printASCIIarray+0xfca>
 8003daa:	190b      	adds	r3, r1, r4
 8003dac:	2208      	movs	r2, #8
 8003dae:	4694      	mov	ip, r2
 8003db0:	44bc      	add	ip, r7
 8003db2:	4463      	add	r3, ip
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	1902      	adds	r2, r0, r4
 8003db8:	2108      	movs	r1, #8
 8003dba:	468c      	mov	ip, r1
 8003dbc:	2108      	movs	r1, #8
 8003dbe:	4688      	mov	r8, r1
 8003dc0:	44b8      	add	r8, r7
 8003dc2:	44c4      	add	ip, r8
 8003dc4:	4462      	add	r2, ip
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	18d3      	adds	r3, r2, r3
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x25){dataASCII[i]=0x02;}
 8003dce:	2162      	movs	r1, #98	; 0x62
 8003dd0:	248c      	movs	r4, #140	; 0x8c
 8003dd2:	0064      	lsls	r4, r4, #1
 8003dd4:	190b      	adds	r3, r1, r4
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	4694      	mov	ip, r2
 8003dda:	44bc      	add	ip, r7
 8003ddc:	4463      	add	r3, ip
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	2080      	movs	r0, #128	; 0x80
 8003de2:	1902      	adds	r2, r0, r4
 8003de4:	2608      	movs	r6, #8
 8003de6:	46b4      	mov	ip, r6
 8003de8:	2608      	movs	r6, #8
 8003dea:	46b0      	mov	r8, r6
 8003dec:	44b8      	add	r8, r7
 8003dee:	44c4      	add	ip, r8
 8003df0:	4462      	add	r2, ip
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	18d3      	adds	r3, r2, r3
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b25      	cmp	r3, #37	; 0x25
 8003dfa:	d111      	bne.n	8003e20 <printASCIIarray+0x101c>
 8003dfc:	190b      	adds	r3, r1, r4
 8003dfe:	2208      	movs	r2, #8
 8003e00:	4694      	mov	ip, r2
 8003e02:	44bc      	add	ip, r7
 8003e04:	4463      	add	r3, ip
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	1902      	adds	r2, r0, r4
 8003e0a:	2108      	movs	r1, #8
 8003e0c:	468c      	mov	ip, r1
 8003e0e:	2108      	movs	r1, #8
 8003e10:	4688      	mov	r8, r1
 8003e12:	44b8      	add	r8, r7
 8003e14:	44c4      	add	ip, r8
 8003e16:	4462      	add	r2, ip
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x28){dataASCII[i]=0x03;}
 8003e20:	2162      	movs	r1, #98	; 0x62
 8003e22:	248c      	movs	r4, #140	; 0x8c
 8003e24:	0064      	lsls	r4, r4, #1
 8003e26:	190b      	adds	r3, r1, r4
 8003e28:	2208      	movs	r2, #8
 8003e2a:	4694      	mov	ip, r2
 8003e2c:	44bc      	add	ip, r7
 8003e2e:	4463      	add	r3, ip
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	2080      	movs	r0, #128	; 0x80
 8003e34:	1902      	adds	r2, r0, r4
 8003e36:	2608      	movs	r6, #8
 8003e38:	46b4      	mov	ip, r6
 8003e3a:	2608      	movs	r6, #8
 8003e3c:	46b0      	mov	r8, r6
 8003e3e:	44b8      	add	r8, r7
 8003e40:	44c4      	add	ip, r8
 8003e42:	4462      	add	r2, ip
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b28      	cmp	r3, #40	; 0x28
 8003e4c:	d111      	bne.n	8003e72 <printASCIIarray+0x106e>
 8003e4e:	190b      	adds	r3, r1, r4
 8003e50:	2208      	movs	r2, #8
 8003e52:	4694      	mov	ip, r2
 8003e54:	44bc      	add	ip, r7
 8003e56:	4463      	add	r3, ip
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	1902      	adds	r2, r0, r4
 8003e5c:	2108      	movs	r1, #8
 8003e5e:	468c      	mov	ip, r1
 8003e60:	2108      	movs	r1, #8
 8003e62:	4688      	mov	r8, r1
 8003e64:	44b8      	add	r8, r7
 8003e66:	44c4      	add	ip, r8
 8003e68:	4462      	add	r2, ip
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	18d3      	adds	r3, r2, r3
 8003e6e:	2203      	movs	r2, #3
 8003e70:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x29){dataASCII[i]=0x04;}
 8003e72:	2162      	movs	r1, #98	; 0x62
 8003e74:	248c      	movs	r4, #140	; 0x8c
 8003e76:	0064      	lsls	r4, r4, #1
 8003e78:	190b      	adds	r3, r1, r4
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	4694      	mov	ip, r2
 8003e7e:	44bc      	add	ip, r7
 8003e80:	4463      	add	r3, ip
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	2080      	movs	r0, #128	; 0x80
 8003e86:	1902      	adds	r2, r0, r4
 8003e88:	2608      	movs	r6, #8
 8003e8a:	46b4      	mov	ip, r6
 8003e8c:	2608      	movs	r6, #8
 8003e8e:	46b0      	mov	r8, r6
 8003e90:	44b8      	add	r8, r7
 8003e92:	44c4      	add	ip, r8
 8003e94:	4462      	add	r2, ip
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	18d3      	adds	r3, r2, r3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b29      	cmp	r3, #41	; 0x29
 8003e9e:	d111      	bne.n	8003ec4 <printASCIIarray+0x10c0>
 8003ea0:	190b      	adds	r3, r1, r4
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	4694      	mov	ip, r2
 8003ea6:	44bc      	add	ip, r7
 8003ea8:	4463      	add	r3, ip
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	1902      	adds	r2, r0, r4
 8003eae:	2108      	movs	r1, #8
 8003eb0:	468c      	mov	ip, r1
 8003eb2:	2108      	movs	r1, #8
 8003eb4:	4688      	mov	r8, r1
 8003eb6:	44b8      	add	r8, r7
 8003eb8:	44c4      	add	ip, r8
 8003eba:	4462      	add	r2, ip
 8003ebc:	6812      	ldr	r2, [r2, #0]
 8003ebe:	18d3      	adds	r3, r2, r3
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2a){dataASCII[i]=0x05;}
 8003ec4:	2162      	movs	r1, #98	; 0x62
 8003ec6:	248c      	movs	r4, #140	; 0x8c
 8003ec8:	0064      	lsls	r4, r4, #1
 8003eca:	190b      	adds	r3, r1, r4
 8003ecc:	2208      	movs	r2, #8
 8003ece:	4694      	mov	ip, r2
 8003ed0:	44bc      	add	ip, r7
 8003ed2:	4463      	add	r3, ip
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	2080      	movs	r0, #128	; 0x80
 8003ed8:	1902      	adds	r2, r0, r4
 8003eda:	2608      	movs	r6, #8
 8003edc:	46b4      	mov	ip, r6
 8003ede:	2608      	movs	r6, #8
 8003ee0:	46b0      	mov	r8, r6
 8003ee2:	44b8      	add	r8, r7
 8003ee4:	44c4      	add	ip, r8
 8003ee6:	4462      	add	r2, ip
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	18d3      	adds	r3, r2, r3
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef0:	d111      	bne.n	8003f16 <printASCIIarray+0x1112>
 8003ef2:	190b      	adds	r3, r1, r4
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4694      	mov	ip, r2
 8003ef8:	44bc      	add	ip, r7
 8003efa:	4463      	add	r3, ip
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	1902      	adds	r2, r0, r4
 8003f00:	2108      	movs	r1, #8
 8003f02:	468c      	mov	ip, r1
 8003f04:	2108      	movs	r1, #8
 8003f06:	4688      	mov	r8, r1
 8003f08:	44b8      	add	r8, r7
 8003f0a:	44c4      	add	ip, r8
 8003f0c:	4462      	add	r2, ip
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	18d3      	adds	r3, r2, r3
 8003f12:	2205      	movs	r2, #5
 8003f14:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2b){dataASCII[i]=0x06;}
 8003f16:	2162      	movs	r1, #98	; 0x62
 8003f18:	248c      	movs	r4, #140	; 0x8c
 8003f1a:	0064      	lsls	r4, r4, #1
 8003f1c:	190b      	adds	r3, r1, r4
 8003f1e:	2208      	movs	r2, #8
 8003f20:	4694      	mov	ip, r2
 8003f22:	44bc      	add	ip, r7
 8003f24:	4463      	add	r3, ip
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	2080      	movs	r0, #128	; 0x80
 8003f2a:	1902      	adds	r2, r0, r4
 8003f2c:	2608      	movs	r6, #8
 8003f2e:	46b4      	mov	ip, r6
 8003f30:	2608      	movs	r6, #8
 8003f32:	46b0      	mov	r8, r6
 8003f34:	44b8      	add	r8, r7
 8003f36:	44c4      	add	ip, r8
 8003f38:	4462      	add	r2, ip
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	18d3      	adds	r3, r2, r3
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b2b      	cmp	r3, #43	; 0x2b
 8003f42:	d111      	bne.n	8003f68 <printASCIIarray+0x1164>
 8003f44:	190b      	adds	r3, r1, r4
 8003f46:	2208      	movs	r2, #8
 8003f48:	4694      	mov	ip, r2
 8003f4a:	44bc      	add	ip, r7
 8003f4c:	4463      	add	r3, ip
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	1902      	adds	r2, r0, r4
 8003f52:	2108      	movs	r1, #8
 8003f54:	468c      	mov	ip, r1
 8003f56:	2108      	movs	r1, #8
 8003f58:	4688      	mov	r8, r1
 8003f5a:	44b8      	add	r8, r7
 8003f5c:	44c4      	add	ip, r8
 8003f5e:	4462      	add	r2, ip
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	18d3      	adds	r3, r2, r3
 8003f64:	2206      	movs	r2, #6
 8003f66:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2c){dataASCII[i]=0x07;}
 8003f68:	2162      	movs	r1, #98	; 0x62
 8003f6a:	248c      	movs	r4, #140	; 0x8c
 8003f6c:	0064      	lsls	r4, r4, #1
 8003f6e:	190b      	adds	r3, r1, r4
 8003f70:	2208      	movs	r2, #8
 8003f72:	4694      	mov	ip, r2
 8003f74:	44bc      	add	ip, r7
 8003f76:	4463      	add	r3, ip
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	2080      	movs	r0, #128	; 0x80
 8003f7c:	1902      	adds	r2, r0, r4
 8003f7e:	2608      	movs	r6, #8
 8003f80:	46b4      	mov	ip, r6
 8003f82:	2608      	movs	r6, #8
 8003f84:	46b0      	mov	r8, r6
 8003f86:	44b8      	add	r8, r7
 8003f88:	44c4      	add	ip, r8
 8003f8a:	4462      	add	r2, ip
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	18d3      	adds	r3, r2, r3
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b2c      	cmp	r3, #44	; 0x2c
 8003f94:	d111      	bne.n	8003fba <printASCIIarray+0x11b6>
 8003f96:	190b      	adds	r3, r1, r4
 8003f98:	2208      	movs	r2, #8
 8003f9a:	4694      	mov	ip, r2
 8003f9c:	44bc      	add	ip, r7
 8003f9e:	4463      	add	r3, ip
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	1902      	adds	r2, r0, r4
 8003fa4:	2108      	movs	r1, #8
 8003fa6:	468c      	mov	ip, r1
 8003fa8:	2108      	movs	r1, #8
 8003faa:	4688      	mov	r8, r1
 8003fac:	44b8      	add	r8, r7
 8003fae:	44c4      	add	ip, r8
 8003fb0:	4462      	add	r2, ip
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2d){dataASCII[i]=0x08;}
 8003fba:	2162      	movs	r1, #98	; 0x62
 8003fbc:	248c      	movs	r4, #140	; 0x8c
 8003fbe:	0064      	lsls	r4, r4, #1
 8003fc0:	190b      	adds	r3, r1, r4
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	4694      	mov	ip, r2
 8003fc6:	44bc      	add	ip, r7
 8003fc8:	4463      	add	r3, ip
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	2080      	movs	r0, #128	; 0x80
 8003fce:	1902      	adds	r2, r0, r4
 8003fd0:	2608      	movs	r6, #8
 8003fd2:	46b4      	mov	ip, r6
 8003fd4:	2608      	movs	r6, #8
 8003fd6:	46b0      	mov	r8, r6
 8003fd8:	44b8      	add	r8, r7
 8003fda:	44c4      	add	ip, r8
 8003fdc:	4462      	add	r2, ip
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8003fe6:	d111      	bne.n	800400c <printASCIIarray+0x1208>
 8003fe8:	190b      	adds	r3, r1, r4
 8003fea:	2208      	movs	r2, #8
 8003fec:	4694      	mov	ip, r2
 8003fee:	44bc      	add	ip, r7
 8003ff0:	4463      	add	r3, ip
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	1902      	adds	r2, r0, r4
 8003ff6:	2108      	movs	r1, #8
 8003ff8:	468c      	mov	ip, r1
 8003ffa:	2108      	movs	r1, #8
 8003ffc:	4688      	mov	r8, r1
 8003ffe:	44b8      	add	r8, r7
 8004000:	44c4      	add	ip, r8
 8004002:	4462      	add	r2, ip
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	18d3      	adds	r3, r2, r3
 8004008:	2208      	movs	r2, #8
 800400a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2e){dataASCII[i]=0x09;}
 800400c:	2162      	movs	r1, #98	; 0x62
 800400e:	248c      	movs	r4, #140	; 0x8c
 8004010:	0064      	lsls	r4, r4, #1
 8004012:	190b      	adds	r3, r1, r4
 8004014:	2208      	movs	r2, #8
 8004016:	4694      	mov	ip, r2
 8004018:	44bc      	add	ip, r7
 800401a:	4463      	add	r3, ip
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2080      	movs	r0, #128	; 0x80
 8004020:	1902      	adds	r2, r0, r4
 8004022:	2608      	movs	r6, #8
 8004024:	46b4      	mov	ip, r6
 8004026:	2608      	movs	r6, #8
 8004028:	46b0      	mov	r8, r6
 800402a:	44b8      	add	r8, r7
 800402c:	44c4      	add	ip, r8
 800402e:	4462      	add	r2, ip
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	18d3      	adds	r3, r2, r3
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	2b2e      	cmp	r3, #46	; 0x2e
 8004038:	d111      	bne.n	800405e <printASCIIarray+0x125a>
 800403a:	190b      	adds	r3, r1, r4
 800403c:	2208      	movs	r2, #8
 800403e:	4694      	mov	ip, r2
 8004040:	44bc      	add	ip, r7
 8004042:	4463      	add	r3, ip
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	1902      	adds	r2, r0, r4
 8004048:	2108      	movs	r1, #8
 800404a:	468c      	mov	ip, r1
 800404c:	2108      	movs	r1, #8
 800404e:	4688      	mov	r8, r1
 8004050:	44b8      	add	r8, r7
 8004052:	44c4      	add	ip, r8
 8004054:	4462      	add	r2, ip
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	18d3      	adds	r3, r2, r3
 800405a:	2209      	movs	r2, #9
 800405c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x2f){dataASCII[i]=0x0a;}
 800405e:	2162      	movs	r1, #98	; 0x62
 8004060:	248c      	movs	r4, #140	; 0x8c
 8004062:	0064      	lsls	r4, r4, #1
 8004064:	190b      	adds	r3, r1, r4
 8004066:	2208      	movs	r2, #8
 8004068:	4694      	mov	ip, r2
 800406a:	44bc      	add	ip, r7
 800406c:	4463      	add	r3, ip
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	2080      	movs	r0, #128	; 0x80
 8004072:	1902      	adds	r2, r0, r4
 8004074:	2608      	movs	r6, #8
 8004076:	46b4      	mov	ip, r6
 8004078:	2608      	movs	r6, #8
 800407a:	46b0      	mov	r8, r6
 800407c:	44b8      	add	r8, r7
 800407e:	44c4      	add	ip, r8
 8004080:	4462      	add	r2, ip
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	18d3      	adds	r3, r2, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b2f      	cmp	r3, #47	; 0x2f
 800408a:	d111      	bne.n	80040b0 <printASCIIarray+0x12ac>
 800408c:	190b      	adds	r3, r1, r4
 800408e:	2208      	movs	r2, #8
 8004090:	4694      	mov	ip, r2
 8004092:	44bc      	add	ip, r7
 8004094:	4463      	add	r3, ip
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	1902      	adds	r2, r0, r4
 800409a:	2108      	movs	r1, #8
 800409c:	468c      	mov	ip, r1
 800409e:	2108      	movs	r1, #8
 80040a0:	4688      	mov	r8, r1
 80040a2:	44b8      	add	r8, r7
 80040a4:	44c4      	add	ip, r8
 80040a6:	4462      	add	r2, ip
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	18d3      	adds	r3, r2, r3
 80040ac:	220a      	movs	r2, #10
 80040ae:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x30){dataASCII[i]=0x0b;}
 80040b0:	2162      	movs	r1, #98	; 0x62
 80040b2:	248c      	movs	r4, #140	; 0x8c
 80040b4:	0064      	lsls	r4, r4, #1
 80040b6:	190b      	adds	r3, r1, r4
 80040b8:	2208      	movs	r2, #8
 80040ba:	4694      	mov	ip, r2
 80040bc:	44bc      	add	ip, r7
 80040be:	4463      	add	r3, ip
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	2080      	movs	r0, #128	; 0x80
 80040c4:	1902      	adds	r2, r0, r4
 80040c6:	2608      	movs	r6, #8
 80040c8:	46b4      	mov	ip, r6
 80040ca:	2608      	movs	r6, #8
 80040cc:	46b0      	mov	r8, r6
 80040ce:	44b8      	add	r8, r7
 80040d0:	44c4      	add	ip, r8
 80040d2:	4462      	add	r2, ip
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b30      	cmp	r3, #48	; 0x30
 80040dc:	d111      	bne.n	8004102 <printASCIIarray+0x12fe>
 80040de:	190b      	adds	r3, r1, r4
 80040e0:	2208      	movs	r2, #8
 80040e2:	4694      	mov	ip, r2
 80040e4:	44bc      	add	ip, r7
 80040e6:	4463      	add	r3, ip
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	1902      	adds	r2, r0, r4
 80040ec:	2108      	movs	r1, #8
 80040ee:	468c      	mov	ip, r1
 80040f0:	2108      	movs	r1, #8
 80040f2:	4688      	mov	r8, r1
 80040f4:	44b8      	add	r8, r7
 80040f6:	44c4      	add	ip, r8
 80040f8:	4462      	add	r2, ip
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	18d3      	adds	r3, r2, r3
 80040fe:	220b      	movs	r2, #11
 8004100:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x31){dataASCII[i]=0x0c;}
 8004102:	2162      	movs	r1, #98	; 0x62
 8004104:	248c      	movs	r4, #140	; 0x8c
 8004106:	0064      	lsls	r4, r4, #1
 8004108:	190b      	adds	r3, r1, r4
 800410a:	2208      	movs	r2, #8
 800410c:	4694      	mov	ip, r2
 800410e:	44bc      	add	ip, r7
 8004110:	4463      	add	r3, ip
 8004112:	881b      	ldrh	r3, [r3, #0]
 8004114:	2080      	movs	r0, #128	; 0x80
 8004116:	1902      	adds	r2, r0, r4
 8004118:	2608      	movs	r6, #8
 800411a:	46b4      	mov	ip, r6
 800411c:	2608      	movs	r6, #8
 800411e:	46b0      	mov	r8, r6
 8004120:	44b8      	add	r8, r7
 8004122:	44c4      	add	ip, r8
 8004124:	4462      	add	r2, ip
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	18d3      	adds	r3, r2, r3
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b31      	cmp	r3, #49	; 0x31
 800412e:	d111      	bne.n	8004154 <printASCIIarray+0x1350>
 8004130:	190b      	adds	r3, r1, r4
 8004132:	2208      	movs	r2, #8
 8004134:	4694      	mov	ip, r2
 8004136:	44bc      	add	ip, r7
 8004138:	4463      	add	r3, ip
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	1902      	adds	r2, r0, r4
 800413e:	2108      	movs	r1, #8
 8004140:	468c      	mov	ip, r1
 8004142:	2108      	movs	r1, #8
 8004144:	4688      	mov	r8, r1
 8004146:	44b8      	add	r8, r7
 8004148:	44c4      	add	ip, r8
 800414a:	4462      	add	r2, ip
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	220c      	movs	r2, #12
 8004152:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x32){dataASCII[i]=0x0d;}
 8004154:	2162      	movs	r1, #98	; 0x62
 8004156:	248c      	movs	r4, #140	; 0x8c
 8004158:	0064      	lsls	r4, r4, #1
 800415a:	190b      	adds	r3, r1, r4
 800415c:	2208      	movs	r2, #8
 800415e:	4694      	mov	ip, r2
 8004160:	44bc      	add	ip, r7
 8004162:	4463      	add	r3, ip
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	2080      	movs	r0, #128	; 0x80
 8004168:	1902      	adds	r2, r0, r4
 800416a:	2608      	movs	r6, #8
 800416c:	46b4      	mov	ip, r6
 800416e:	2608      	movs	r6, #8
 8004170:	46b0      	mov	r8, r6
 8004172:	44b8      	add	r8, r7
 8004174:	44c4      	add	ip, r8
 8004176:	4462      	add	r2, ip
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	18d3      	adds	r3, r2, r3
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b32      	cmp	r3, #50	; 0x32
 8004180:	d111      	bne.n	80041a6 <printASCIIarray+0x13a2>
 8004182:	190b      	adds	r3, r1, r4
 8004184:	2208      	movs	r2, #8
 8004186:	4694      	mov	ip, r2
 8004188:	44bc      	add	ip, r7
 800418a:	4463      	add	r3, ip
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	1902      	adds	r2, r0, r4
 8004190:	2108      	movs	r1, #8
 8004192:	468c      	mov	ip, r1
 8004194:	2108      	movs	r1, #8
 8004196:	4688      	mov	r8, r1
 8004198:	44b8      	add	r8, r7
 800419a:	44c4      	add	ip, r8
 800419c:	4462      	add	r2, ip
 800419e:	6812      	ldr	r2, [r2, #0]
 80041a0:	18d3      	adds	r3, r2, r3
 80041a2:	220d      	movs	r2, #13
 80041a4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x33){dataASCII[i]=0x0e;}
 80041a6:	2162      	movs	r1, #98	; 0x62
 80041a8:	248c      	movs	r4, #140	; 0x8c
 80041aa:	0064      	lsls	r4, r4, #1
 80041ac:	190b      	adds	r3, r1, r4
 80041ae:	2208      	movs	r2, #8
 80041b0:	4694      	mov	ip, r2
 80041b2:	44bc      	add	ip, r7
 80041b4:	4463      	add	r3, ip
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	2080      	movs	r0, #128	; 0x80
 80041ba:	1902      	adds	r2, r0, r4
 80041bc:	2608      	movs	r6, #8
 80041be:	46b4      	mov	ip, r6
 80041c0:	2608      	movs	r6, #8
 80041c2:	46b0      	mov	r8, r6
 80041c4:	44b8      	add	r8, r7
 80041c6:	44c4      	add	ip, r8
 80041c8:	4462      	add	r2, ip
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	18d3      	adds	r3, r2, r3
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b33      	cmp	r3, #51	; 0x33
 80041d2:	d111      	bne.n	80041f8 <printASCIIarray+0x13f4>
 80041d4:	190b      	adds	r3, r1, r4
 80041d6:	2208      	movs	r2, #8
 80041d8:	4694      	mov	ip, r2
 80041da:	44bc      	add	ip, r7
 80041dc:	4463      	add	r3, ip
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	1902      	adds	r2, r0, r4
 80041e2:	2108      	movs	r1, #8
 80041e4:	468c      	mov	ip, r1
 80041e6:	2108      	movs	r1, #8
 80041e8:	4688      	mov	r8, r1
 80041ea:	44b8      	add	r8, r7
 80041ec:	44c4      	add	ip, r8
 80041ee:	4462      	add	r2, ip
 80041f0:	6812      	ldr	r2, [r2, #0]
 80041f2:	18d3      	adds	r3, r2, r3
 80041f4:	220e      	movs	r2, #14
 80041f6:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x34){dataASCII[i]=0x0f;}
 80041f8:	2162      	movs	r1, #98	; 0x62
 80041fa:	248c      	movs	r4, #140	; 0x8c
 80041fc:	0064      	lsls	r4, r4, #1
 80041fe:	190b      	adds	r3, r1, r4
 8004200:	2208      	movs	r2, #8
 8004202:	4694      	mov	ip, r2
 8004204:	44bc      	add	ip, r7
 8004206:	4463      	add	r3, ip
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	2080      	movs	r0, #128	; 0x80
 800420c:	1902      	adds	r2, r0, r4
 800420e:	2608      	movs	r6, #8
 8004210:	46b4      	mov	ip, r6
 8004212:	2608      	movs	r6, #8
 8004214:	46b0      	mov	r8, r6
 8004216:	44b8      	add	r8, r7
 8004218:	44c4      	add	ip, r8
 800421a:	4462      	add	r2, ip
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b34      	cmp	r3, #52	; 0x34
 8004224:	d111      	bne.n	800424a <printASCIIarray+0x1446>
 8004226:	190b      	adds	r3, r1, r4
 8004228:	2208      	movs	r2, #8
 800422a:	4694      	mov	ip, r2
 800422c:	44bc      	add	ip, r7
 800422e:	4463      	add	r3, ip
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	1902      	adds	r2, r0, r4
 8004234:	2108      	movs	r1, #8
 8004236:	468c      	mov	ip, r1
 8004238:	2108      	movs	r1, #8
 800423a:	4688      	mov	r8, r1
 800423c:	44b8      	add	r8, r7
 800423e:	44c4      	add	ip, r8
 8004240:	4462      	add	r2, ip
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	18d3      	adds	r3, r2, r3
 8004246:	220f      	movs	r2, #15
 8004248:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x35){dataASCII[i]=0x10;}
 800424a:	2162      	movs	r1, #98	; 0x62
 800424c:	248c      	movs	r4, #140	; 0x8c
 800424e:	0064      	lsls	r4, r4, #1
 8004250:	190b      	adds	r3, r1, r4
 8004252:	2208      	movs	r2, #8
 8004254:	4694      	mov	ip, r2
 8004256:	44bc      	add	ip, r7
 8004258:	4463      	add	r3, ip
 800425a:	881b      	ldrh	r3, [r3, #0]
 800425c:	2080      	movs	r0, #128	; 0x80
 800425e:	1902      	adds	r2, r0, r4
 8004260:	2608      	movs	r6, #8
 8004262:	46b4      	mov	ip, r6
 8004264:	2608      	movs	r6, #8
 8004266:	46b0      	mov	r8, r6
 8004268:	44b8      	add	r8, r7
 800426a:	44c4      	add	ip, r8
 800426c:	4462      	add	r2, ip
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	18d3      	adds	r3, r2, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b35      	cmp	r3, #53	; 0x35
 8004276:	d111      	bne.n	800429c <printASCIIarray+0x1498>
 8004278:	190b      	adds	r3, r1, r4
 800427a:	2208      	movs	r2, #8
 800427c:	4694      	mov	ip, r2
 800427e:	44bc      	add	ip, r7
 8004280:	4463      	add	r3, ip
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	1902      	adds	r2, r0, r4
 8004286:	2108      	movs	r1, #8
 8004288:	468c      	mov	ip, r1
 800428a:	2108      	movs	r1, #8
 800428c:	4688      	mov	r8, r1
 800428e:	44b8      	add	r8, r7
 8004290:	44c4      	add	ip, r8
 8004292:	4462      	add	r2, ip
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	18d3      	adds	r3, r2, r3
 8004298:	2210      	movs	r2, #16
 800429a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x36){dataASCII[i]=0x11;}
 800429c:	2162      	movs	r1, #98	; 0x62
 800429e:	248c      	movs	r4, #140	; 0x8c
 80042a0:	0064      	lsls	r4, r4, #1
 80042a2:	190b      	adds	r3, r1, r4
 80042a4:	2208      	movs	r2, #8
 80042a6:	4694      	mov	ip, r2
 80042a8:	44bc      	add	ip, r7
 80042aa:	4463      	add	r3, ip
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	2080      	movs	r0, #128	; 0x80
 80042b0:	1902      	adds	r2, r0, r4
 80042b2:	2608      	movs	r6, #8
 80042b4:	46b4      	mov	ip, r6
 80042b6:	2608      	movs	r6, #8
 80042b8:	46b0      	mov	r8, r6
 80042ba:	44b8      	add	r8, r7
 80042bc:	44c4      	add	ip, r8
 80042be:	4462      	add	r2, ip
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	18d3      	adds	r3, r2, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b36      	cmp	r3, #54	; 0x36
 80042c8:	d111      	bne.n	80042ee <printASCIIarray+0x14ea>
 80042ca:	190b      	adds	r3, r1, r4
 80042cc:	2208      	movs	r2, #8
 80042ce:	4694      	mov	ip, r2
 80042d0:	44bc      	add	ip, r7
 80042d2:	4463      	add	r3, ip
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	1902      	adds	r2, r0, r4
 80042d8:	2108      	movs	r1, #8
 80042da:	468c      	mov	ip, r1
 80042dc:	2108      	movs	r1, #8
 80042de:	4688      	mov	r8, r1
 80042e0:	44b8      	add	r8, r7
 80042e2:	44c4      	add	ip, r8
 80042e4:	4462      	add	r2, ip
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	18d3      	adds	r3, r2, r3
 80042ea:	2211      	movs	r2, #17
 80042ec:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x37){dataASCII[i]=0x12;}
 80042ee:	2162      	movs	r1, #98	; 0x62
 80042f0:	248c      	movs	r4, #140	; 0x8c
 80042f2:	0064      	lsls	r4, r4, #1
 80042f4:	190b      	adds	r3, r1, r4
 80042f6:	2208      	movs	r2, #8
 80042f8:	4694      	mov	ip, r2
 80042fa:	44bc      	add	ip, r7
 80042fc:	4463      	add	r3, ip
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	2080      	movs	r0, #128	; 0x80
 8004302:	1902      	adds	r2, r0, r4
 8004304:	2608      	movs	r6, #8
 8004306:	46b4      	mov	ip, r6
 8004308:	2608      	movs	r6, #8
 800430a:	46b0      	mov	r8, r6
 800430c:	44b8      	add	r8, r7
 800430e:	44c4      	add	ip, r8
 8004310:	4462      	add	r2, ip
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	18d3      	adds	r3, r2, r3
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b37      	cmp	r3, #55	; 0x37
 800431a:	d111      	bne.n	8004340 <printASCIIarray+0x153c>
 800431c:	190b      	adds	r3, r1, r4
 800431e:	2208      	movs	r2, #8
 8004320:	4694      	mov	ip, r2
 8004322:	44bc      	add	ip, r7
 8004324:	4463      	add	r3, ip
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	1902      	adds	r2, r0, r4
 800432a:	2108      	movs	r1, #8
 800432c:	468c      	mov	ip, r1
 800432e:	2108      	movs	r1, #8
 8004330:	4688      	mov	r8, r1
 8004332:	44b8      	add	r8, r7
 8004334:	44c4      	add	ip, r8
 8004336:	4462      	add	r2, ip
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	18d3      	adds	r3, r2, r3
 800433c:	2212      	movs	r2, #18
 800433e:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x38){dataASCII[i]=0x13;}
 8004340:	2162      	movs	r1, #98	; 0x62
 8004342:	248c      	movs	r4, #140	; 0x8c
 8004344:	0064      	lsls	r4, r4, #1
 8004346:	190b      	adds	r3, r1, r4
 8004348:	2208      	movs	r2, #8
 800434a:	4694      	mov	ip, r2
 800434c:	44bc      	add	ip, r7
 800434e:	4463      	add	r3, ip
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	2080      	movs	r0, #128	; 0x80
 8004354:	1902      	adds	r2, r0, r4
 8004356:	2608      	movs	r6, #8
 8004358:	46b4      	mov	ip, r6
 800435a:	2608      	movs	r6, #8
 800435c:	46b0      	mov	r8, r6
 800435e:	44b8      	add	r8, r7
 8004360:	44c4      	add	ip, r8
 8004362:	4462      	add	r2, ip
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b38      	cmp	r3, #56	; 0x38
 800436c:	d111      	bne.n	8004392 <printASCIIarray+0x158e>
 800436e:	190b      	adds	r3, r1, r4
 8004370:	2208      	movs	r2, #8
 8004372:	4694      	mov	ip, r2
 8004374:	44bc      	add	ip, r7
 8004376:	4463      	add	r3, ip
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	1902      	adds	r2, r0, r4
 800437c:	2108      	movs	r1, #8
 800437e:	468c      	mov	ip, r1
 8004380:	2108      	movs	r1, #8
 8004382:	4688      	mov	r8, r1
 8004384:	44b8      	add	r8, r7
 8004386:	44c4      	add	ip, r8
 8004388:	4462      	add	r2, ip
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	18d3      	adds	r3, r2, r3
 800438e:	2213      	movs	r2, #19
 8004390:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x39){dataASCII[i]=0x14;}
 8004392:	2162      	movs	r1, #98	; 0x62
 8004394:	248c      	movs	r4, #140	; 0x8c
 8004396:	0064      	lsls	r4, r4, #1
 8004398:	190b      	adds	r3, r1, r4
 800439a:	2208      	movs	r2, #8
 800439c:	4694      	mov	ip, r2
 800439e:	44bc      	add	ip, r7
 80043a0:	4463      	add	r3, ip
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	2080      	movs	r0, #128	; 0x80
 80043a6:	1902      	adds	r2, r0, r4
 80043a8:	2608      	movs	r6, #8
 80043aa:	46b4      	mov	ip, r6
 80043ac:	2608      	movs	r6, #8
 80043ae:	46b0      	mov	r8, r6
 80043b0:	44b8      	add	r8, r7
 80043b2:	44c4      	add	ip, r8
 80043b4:	4462      	add	r2, ip
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	18d3      	adds	r3, r2, r3
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b39      	cmp	r3, #57	; 0x39
 80043be:	d111      	bne.n	80043e4 <printASCIIarray+0x15e0>
 80043c0:	190b      	adds	r3, r1, r4
 80043c2:	2208      	movs	r2, #8
 80043c4:	4694      	mov	ip, r2
 80043c6:	44bc      	add	ip, r7
 80043c8:	4463      	add	r3, ip
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	1902      	adds	r2, r0, r4
 80043ce:	2108      	movs	r1, #8
 80043d0:	468c      	mov	ip, r1
 80043d2:	2108      	movs	r1, #8
 80043d4:	4688      	mov	r8, r1
 80043d6:	44b8      	add	r8, r7
 80043d8:	44c4      	add	ip, r8
 80043da:	4462      	add	r2, ip
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	18d3      	adds	r3, r2, r3
 80043e0:	2214      	movs	r2, #20
 80043e2:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3a){dataASCII[i]=0x15;}
 80043e4:	2162      	movs	r1, #98	; 0x62
 80043e6:	248c      	movs	r4, #140	; 0x8c
 80043e8:	0064      	lsls	r4, r4, #1
 80043ea:	190b      	adds	r3, r1, r4
 80043ec:	2208      	movs	r2, #8
 80043ee:	4694      	mov	ip, r2
 80043f0:	44bc      	add	ip, r7
 80043f2:	4463      	add	r3, ip
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	2080      	movs	r0, #128	; 0x80
 80043f8:	1902      	adds	r2, r0, r4
 80043fa:	2608      	movs	r6, #8
 80043fc:	46b4      	mov	ip, r6
 80043fe:	2608      	movs	r6, #8
 8004400:	46b0      	mov	r8, r6
 8004402:	44b8      	add	r8, r7
 8004404:	44c4      	add	ip, r8
 8004406:	4462      	add	r2, ip
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b3a      	cmp	r3, #58	; 0x3a
 8004410:	d111      	bne.n	8004436 <printASCIIarray+0x1632>
 8004412:	190b      	adds	r3, r1, r4
 8004414:	2208      	movs	r2, #8
 8004416:	4694      	mov	ip, r2
 8004418:	44bc      	add	ip, r7
 800441a:	4463      	add	r3, ip
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	1902      	adds	r2, r0, r4
 8004420:	2108      	movs	r1, #8
 8004422:	468c      	mov	ip, r1
 8004424:	2108      	movs	r1, #8
 8004426:	4688      	mov	r8, r1
 8004428:	44b8      	add	r8, r7
 800442a:	44c4      	add	ip, r8
 800442c:	4462      	add	r2, ip
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	18d3      	adds	r3, r2, r3
 8004432:	2215      	movs	r2, #21
 8004434:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3b){dataASCII[i]=0x16;}
 8004436:	2162      	movs	r1, #98	; 0x62
 8004438:	248c      	movs	r4, #140	; 0x8c
 800443a:	0064      	lsls	r4, r4, #1
 800443c:	190b      	adds	r3, r1, r4
 800443e:	2208      	movs	r2, #8
 8004440:	4694      	mov	ip, r2
 8004442:	44bc      	add	ip, r7
 8004444:	4463      	add	r3, ip
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	2080      	movs	r0, #128	; 0x80
 800444a:	1902      	adds	r2, r0, r4
 800444c:	2608      	movs	r6, #8
 800444e:	46b4      	mov	ip, r6
 8004450:	2608      	movs	r6, #8
 8004452:	46b0      	mov	r8, r6
 8004454:	44b8      	add	r8, r7
 8004456:	44c4      	add	ip, r8
 8004458:	4462      	add	r2, ip
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	18d3      	adds	r3, r2, r3
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b3b      	cmp	r3, #59	; 0x3b
 8004462:	d111      	bne.n	8004488 <printASCIIarray+0x1684>
 8004464:	190b      	adds	r3, r1, r4
 8004466:	2208      	movs	r2, #8
 8004468:	4694      	mov	ip, r2
 800446a:	44bc      	add	ip, r7
 800446c:	4463      	add	r3, ip
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	1902      	adds	r2, r0, r4
 8004472:	2108      	movs	r1, #8
 8004474:	468c      	mov	ip, r1
 8004476:	2108      	movs	r1, #8
 8004478:	4688      	mov	r8, r1
 800447a:	44b8      	add	r8, r7
 800447c:	44c4      	add	ip, r8
 800447e:	4462      	add	r2, ip
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	18d3      	adds	r3, r2, r3
 8004484:	2216      	movs	r2, #22
 8004486:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3c){dataASCII[i]=0x17;}
 8004488:	2162      	movs	r1, #98	; 0x62
 800448a:	248c      	movs	r4, #140	; 0x8c
 800448c:	0064      	lsls	r4, r4, #1
 800448e:	190b      	adds	r3, r1, r4
 8004490:	2208      	movs	r2, #8
 8004492:	4694      	mov	ip, r2
 8004494:	44bc      	add	ip, r7
 8004496:	4463      	add	r3, ip
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	2080      	movs	r0, #128	; 0x80
 800449c:	1902      	adds	r2, r0, r4
 800449e:	2608      	movs	r6, #8
 80044a0:	46b4      	mov	ip, r6
 80044a2:	2608      	movs	r6, #8
 80044a4:	46b0      	mov	r8, r6
 80044a6:	44b8      	add	r8, r7
 80044a8:	44c4      	add	ip, r8
 80044aa:	4462      	add	r2, ip
 80044ac:	6812      	ldr	r2, [r2, #0]
 80044ae:	18d3      	adds	r3, r2, r3
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b3c      	cmp	r3, #60	; 0x3c
 80044b4:	d111      	bne.n	80044da <printASCIIarray+0x16d6>
 80044b6:	190b      	adds	r3, r1, r4
 80044b8:	2208      	movs	r2, #8
 80044ba:	4694      	mov	ip, r2
 80044bc:	44bc      	add	ip, r7
 80044be:	4463      	add	r3, ip
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	1902      	adds	r2, r0, r4
 80044c4:	2108      	movs	r1, #8
 80044c6:	468c      	mov	ip, r1
 80044c8:	2108      	movs	r1, #8
 80044ca:	4688      	mov	r8, r1
 80044cc:	44b8      	add	r8, r7
 80044ce:	44c4      	add	ip, r8
 80044d0:	4462      	add	r2, ip
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	18d3      	adds	r3, r2, r3
 80044d6:	2217      	movs	r2, #23
 80044d8:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3d){dataASCII[i]=0x18;}
 80044da:	2162      	movs	r1, #98	; 0x62
 80044dc:	248c      	movs	r4, #140	; 0x8c
 80044de:	0064      	lsls	r4, r4, #1
 80044e0:	190b      	adds	r3, r1, r4
 80044e2:	2208      	movs	r2, #8
 80044e4:	4694      	mov	ip, r2
 80044e6:	44bc      	add	ip, r7
 80044e8:	4463      	add	r3, ip
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	2080      	movs	r0, #128	; 0x80
 80044ee:	1902      	adds	r2, r0, r4
 80044f0:	2608      	movs	r6, #8
 80044f2:	46b4      	mov	ip, r6
 80044f4:	2608      	movs	r6, #8
 80044f6:	46b0      	mov	r8, r6
 80044f8:	44b8      	add	r8, r7
 80044fa:	44c4      	add	ip, r8
 80044fc:	4462      	add	r2, ip
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	18d3      	adds	r3, r2, r3
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b3d      	cmp	r3, #61	; 0x3d
 8004506:	d111      	bne.n	800452c <printASCIIarray+0x1728>
 8004508:	190b      	adds	r3, r1, r4
 800450a:	2208      	movs	r2, #8
 800450c:	4694      	mov	ip, r2
 800450e:	44bc      	add	ip, r7
 8004510:	4463      	add	r3, ip
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	1902      	adds	r2, r0, r4
 8004516:	2108      	movs	r1, #8
 8004518:	468c      	mov	ip, r1
 800451a:	2108      	movs	r1, #8
 800451c:	4688      	mov	r8, r1
 800451e:	44b8      	add	r8, r7
 8004520:	44c4      	add	ip, r8
 8004522:	4462      	add	r2, ip
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	18d3      	adds	r3, r2, r3
 8004528:	2218      	movs	r2, #24
 800452a:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3e){dataASCII[i]=0x19;}
 800452c:	2162      	movs	r1, #98	; 0x62
 800452e:	248c      	movs	r4, #140	; 0x8c
 8004530:	0064      	lsls	r4, r4, #1
 8004532:	190b      	adds	r3, r1, r4
 8004534:	2208      	movs	r2, #8
 8004536:	4694      	mov	ip, r2
 8004538:	44bc      	add	ip, r7
 800453a:	4463      	add	r3, ip
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	2080      	movs	r0, #128	; 0x80
 8004540:	1902      	adds	r2, r0, r4
 8004542:	2608      	movs	r6, #8
 8004544:	46b4      	mov	ip, r6
 8004546:	2608      	movs	r6, #8
 8004548:	46b0      	mov	r8, r6
 800454a:	44b8      	add	r8, r7
 800454c:	44c4      	add	ip, r8
 800454e:	4462      	add	r2, ip
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b3e      	cmp	r3, #62	; 0x3e
 8004558:	d111      	bne.n	800457e <printASCIIarray+0x177a>
 800455a:	190b      	adds	r3, r1, r4
 800455c:	2208      	movs	r2, #8
 800455e:	4694      	mov	ip, r2
 8004560:	44bc      	add	ip, r7
 8004562:	4463      	add	r3, ip
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	1902      	adds	r2, r0, r4
 8004568:	2108      	movs	r1, #8
 800456a:	468c      	mov	ip, r1
 800456c:	2108      	movs	r1, #8
 800456e:	4688      	mov	r8, r1
 8004570:	44b8      	add	r8, r7
 8004572:	44c4      	add	ip, r8
 8004574:	4462      	add	r2, ip
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	2219      	movs	r2, #25
 800457c:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x3f){dataASCII[i]=0x1a;}
 800457e:	2162      	movs	r1, #98	; 0x62
 8004580:	248c      	movs	r4, #140	; 0x8c
 8004582:	0064      	lsls	r4, r4, #1
 8004584:	190b      	adds	r3, r1, r4
 8004586:	2208      	movs	r2, #8
 8004588:	4694      	mov	ip, r2
 800458a:	44bc      	add	ip, r7
 800458c:	4463      	add	r3, ip
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	2080      	movs	r0, #128	; 0x80
 8004592:	1902      	adds	r2, r0, r4
 8004594:	2608      	movs	r6, #8
 8004596:	46b4      	mov	ip, r6
 8004598:	2608      	movs	r6, #8
 800459a:	46b0      	mov	r8, r6
 800459c:	44b8      	add	r8, r7
 800459e:	44c4      	add	ip, r8
 80045a0:	4462      	add	r2, ip
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b3f      	cmp	r3, #63	; 0x3f
 80045aa:	d111      	bne.n	80045d0 <printASCIIarray+0x17cc>
 80045ac:	190b      	adds	r3, r1, r4
 80045ae:	2208      	movs	r2, #8
 80045b0:	4694      	mov	ip, r2
 80045b2:	44bc      	add	ip, r7
 80045b4:	4463      	add	r3, ip
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	1902      	adds	r2, r0, r4
 80045ba:	2108      	movs	r1, #8
 80045bc:	468c      	mov	ip, r1
 80045be:	2108      	movs	r1, #8
 80045c0:	4688      	mov	r8, r1
 80045c2:	44b8      	add	r8, r7
 80045c4:	44c4      	add	ip, r8
 80045c6:	4462      	add	r2, ip
 80045c8:	6812      	ldr	r2, [r2, #0]
 80045ca:	18d3      	adds	r3, r2, r3
 80045cc:	221a      	movs	r2, #26
 80045ce:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5b){dataASCII[i]=0x1b;}
 80045d0:	2162      	movs	r1, #98	; 0x62
 80045d2:	248c      	movs	r4, #140	; 0x8c
 80045d4:	0064      	lsls	r4, r4, #1
 80045d6:	190b      	adds	r3, r1, r4
 80045d8:	2208      	movs	r2, #8
 80045da:	4694      	mov	ip, r2
 80045dc:	44bc      	add	ip, r7
 80045de:	4463      	add	r3, ip
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	2080      	movs	r0, #128	; 0x80
 80045e4:	1902      	adds	r2, r0, r4
 80045e6:	2608      	movs	r6, #8
 80045e8:	46b4      	mov	ip, r6
 80045ea:	2608      	movs	r6, #8
 80045ec:	46b0      	mov	r8, r6
 80045ee:	44b8      	add	r8, r7
 80045f0:	44c4      	add	ip, r8
 80045f2:	4462      	add	r2, ip
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	18d3      	adds	r3, r2, r3
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b5b      	cmp	r3, #91	; 0x5b
 80045fc:	d111      	bne.n	8004622 <printASCIIarray+0x181e>
 80045fe:	190b      	adds	r3, r1, r4
 8004600:	2208      	movs	r2, #8
 8004602:	4694      	mov	ip, r2
 8004604:	44bc      	add	ip, r7
 8004606:	4463      	add	r3, ip
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	1902      	adds	r2, r0, r4
 800460c:	2108      	movs	r1, #8
 800460e:	468c      	mov	ip, r1
 8004610:	2108      	movs	r1, #8
 8004612:	4688      	mov	r8, r1
 8004614:	44b8      	add	r8, r7
 8004616:	44c4      	add	ip, r8
 8004618:	4462      	add	r2, ip
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	18d3      	adds	r3, r2, r3
 800461e:	221b      	movs	r2, #27
 8004620:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5c){dataASCII[i]=0x1c;}
 8004622:	2162      	movs	r1, #98	; 0x62
 8004624:	248c      	movs	r4, #140	; 0x8c
 8004626:	0064      	lsls	r4, r4, #1
 8004628:	190b      	adds	r3, r1, r4
 800462a:	2208      	movs	r2, #8
 800462c:	4694      	mov	ip, r2
 800462e:	44bc      	add	ip, r7
 8004630:	4463      	add	r3, ip
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	2080      	movs	r0, #128	; 0x80
 8004636:	1902      	adds	r2, r0, r4
 8004638:	2608      	movs	r6, #8
 800463a:	46b4      	mov	ip, r6
 800463c:	2608      	movs	r6, #8
 800463e:	46b0      	mov	r8, r6
 8004640:	44b8      	add	r8, r7
 8004642:	44c4      	add	ip, r8
 8004644:	4462      	add	r2, ip
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	18d3      	adds	r3, r2, r3
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b5c      	cmp	r3, #92	; 0x5c
 800464e:	d111      	bne.n	8004674 <printASCIIarray+0x1870>
 8004650:	190b      	adds	r3, r1, r4
 8004652:	2208      	movs	r2, #8
 8004654:	4694      	mov	ip, r2
 8004656:	44bc      	add	ip, r7
 8004658:	4463      	add	r3, ip
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	1902      	adds	r2, r0, r4
 800465e:	2108      	movs	r1, #8
 8004660:	468c      	mov	ip, r1
 8004662:	2108      	movs	r1, #8
 8004664:	4688      	mov	r8, r1
 8004666:	44b8      	add	r8, r7
 8004668:	44c4      	add	ip, r8
 800466a:	4462      	add	r2, ip
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	18d3      	adds	r3, r2, r3
 8004670:	221c      	movs	r2, #28
 8004672:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5d){dataASCII[i]=0x1d;}
 8004674:	2162      	movs	r1, #98	; 0x62
 8004676:	248c      	movs	r4, #140	; 0x8c
 8004678:	0064      	lsls	r4, r4, #1
 800467a:	190b      	adds	r3, r1, r4
 800467c:	2208      	movs	r2, #8
 800467e:	4694      	mov	ip, r2
 8004680:	44bc      	add	ip, r7
 8004682:	4463      	add	r3, ip
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	2080      	movs	r0, #128	; 0x80
 8004688:	1902      	adds	r2, r0, r4
 800468a:	2608      	movs	r6, #8
 800468c:	46b4      	mov	ip, r6
 800468e:	2608      	movs	r6, #8
 8004690:	46b0      	mov	r8, r6
 8004692:	44b8      	add	r8, r7
 8004694:	44c4      	add	ip, r8
 8004696:	4462      	add	r2, ip
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	18d3      	adds	r3, r2, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2b5d      	cmp	r3, #93	; 0x5d
 80046a0:	d111      	bne.n	80046c6 <printASCIIarray+0x18c2>
 80046a2:	190b      	adds	r3, r1, r4
 80046a4:	2208      	movs	r2, #8
 80046a6:	4694      	mov	ip, r2
 80046a8:	44bc      	add	ip, r7
 80046aa:	4463      	add	r3, ip
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	1902      	adds	r2, r0, r4
 80046b0:	2108      	movs	r1, #8
 80046b2:	468c      	mov	ip, r1
 80046b4:	2108      	movs	r1, #8
 80046b6:	4688      	mov	r8, r1
 80046b8:	44b8      	add	r8, r7
 80046ba:	44c4      	add	ip, r8
 80046bc:	4462      	add	r2, ip
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	18d3      	adds	r3, r2, r3
 80046c2:	221d      	movs	r2, #29
 80046c4:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x5f){dataASCII[i]=0x1e;}
 80046c6:	2162      	movs	r1, #98	; 0x62
 80046c8:	248c      	movs	r4, #140	; 0x8c
 80046ca:	0064      	lsls	r4, r4, #1
 80046cc:	190b      	adds	r3, r1, r4
 80046ce:	2208      	movs	r2, #8
 80046d0:	4694      	mov	ip, r2
 80046d2:	44bc      	add	ip, r7
 80046d4:	4463      	add	r3, ip
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	2080      	movs	r0, #128	; 0x80
 80046da:	1902      	adds	r2, r0, r4
 80046dc:	2608      	movs	r6, #8
 80046de:	46b4      	mov	ip, r6
 80046e0:	2608      	movs	r6, #8
 80046e2:	46b0      	mov	r8, r6
 80046e4:	44b8      	add	r8, r7
 80046e6:	44c4      	add	ip, r8
 80046e8:	4462      	add	r2, ip
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b5f      	cmp	r3, #95	; 0x5f
 80046f2:	d111      	bne.n	8004718 <printASCIIarray+0x1914>
 80046f4:	190b      	adds	r3, r1, r4
 80046f6:	2208      	movs	r2, #8
 80046f8:	4694      	mov	ip, r2
 80046fa:	44bc      	add	ip, r7
 80046fc:	4463      	add	r3, ip
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	1902      	adds	r2, r0, r4
 8004702:	2108      	movs	r1, #8
 8004704:	468c      	mov	ip, r1
 8004706:	2108      	movs	r1, #8
 8004708:	4688      	mov	r8, r1
 800470a:	44b8      	add	r8, r7
 800470c:	44c4      	add	ip, r8
 800470e:	4462      	add	r2, ip
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	18d3      	adds	r3, r2, r3
 8004714:	221e      	movs	r2, #30
 8004716:	701a      	strb	r2, [r3, #0]
					if(dataASCII[i]==0x7c){dataASCII[i]=0x1f;}
 8004718:	2162      	movs	r1, #98	; 0x62
 800471a:	248c      	movs	r4, #140	; 0x8c
 800471c:	0064      	lsls	r4, r4, #1
 800471e:	190b      	adds	r3, r1, r4
 8004720:	2208      	movs	r2, #8
 8004722:	4694      	mov	ip, r2
 8004724:	44bc      	add	ip, r7
 8004726:	4463      	add	r3, ip
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	2080      	movs	r0, #128	; 0x80
 800472c:	1902      	adds	r2, r0, r4
 800472e:	2608      	movs	r6, #8
 8004730:	46b4      	mov	ip, r6
 8004732:	2608      	movs	r6, #8
 8004734:	46b0      	mov	r8, r6
 8004736:	44b8      	add	r8, r7
 8004738:	44c4      	add	ip, r8
 800473a:	4462      	add	r2, ip
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	18d3      	adds	r3, r2, r3
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b7c      	cmp	r3, #124	; 0x7c
 8004744:	d111      	bne.n	800476a <printASCIIarray+0x1966>
 8004746:	190b      	adds	r3, r1, r4
 8004748:	2208      	movs	r2, #8
 800474a:	4694      	mov	ip, r2
 800474c:	44bc      	add	ip, r7
 800474e:	4463      	add	r3, ip
 8004750:	881b      	ldrh	r3, [r3, #0]
 8004752:	1902      	adds	r2, r0, r4
 8004754:	2108      	movs	r1, #8
 8004756:	468c      	mov	ip, r1
 8004758:	2108      	movs	r1, #8
 800475a:	4688      	mov	r8, r1
 800475c:	44b8      	add	r8, r7
 800475e:	44c4      	add	ip, r8
 8004760:	4462      	add	r2, ip
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	18d3      	adds	r3, r2, r3
 8004766:	221f      	movs	r2, #31
 8004768:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 800476a:	2162      	movs	r1, #98	; 0x62
 800476c:	208c      	movs	r0, #140	; 0x8c
 800476e:	0040      	lsls	r0, r0, #1
 8004770:	180b      	adds	r3, r1, r0
 8004772:	2208      	movs	r2, #8
 8004774:	4694      	mov	ip, r2
 8004776:	44bc      	add	ip, r7
 8004778:	4463      	add	r3, ip
 800477a:	881a      	ldrh	r2, [r3, #0]
 800477c:	180b      	adds	r3, r1, r0
 800477e:	2108      	movs	r1, #8
 8004780:	468c      	mov	ip, r1
 8004782:	44bc      	add	ip, r7
 8004784:	4463      	add	r3, ip
 8004786:	3201      	adds	r2, #1
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	231e      	movs	r3, #30
 800478c:	33ff      	adds	r3, #255	; 0xff
 800478e:	2208      	movs	r2, #8
 8004790:	189b      	adds	r3, r3, r2
 8004792:	19db      	adds	r3, r3, r7
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b29b      	uxth	r3, r3
 8004798:	2162      	movs	r1, #98	; 0x62
 800479a:	208c      	movs	r0, #140	; 0x8c
 800479c:	0040      	lsls	r0, r0, #1
 800479e:	180a      	adds	r2, r1, r0
 80047a0:	2408      	movs	r4, #8
 80047a2:	46a4      	mov	ip, r4
 80047a4:	44bc      	add	ip, r7
 80047a6:	4462      	add	r2, ip
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d201      	bcs.n	80047b2 <printASCIIarray+0x19ae>
 80047ae:	f7ff fabc 	bl	8003d2a <printASCIIarray+0xf26>
				}
				for(i=0;i<strLen;i++){
 80047b2:	180b      	adds	r3, r1, r0
 80047b4:	2208      	movs	r2, #8
 80047b6:	4694      	mov	ip, r2
 80047b8:	44bc      	add	ip, r7
 80047ba:	4463      	add	r3, ip
 80047bc:	2200      	movs	r2, #0
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	e113      	b.n	80049ea <printASCIIarray+0x1be6>
					for(j=0;j<symLen;j++){
 80047c2:	2364      	movs	r3, #100	; 0x64
 80047c4:	228c      	movs	r2, #140	; 0x8c
 80047c6:	0052      	lsls	r2, r2, #1
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	2208      	movs	r2, #8
 80047cc:	4694      	mov	ip, r2
 80047ce:	44bc      	add	ip, r7
 80047d0:	4463      	add	r3, ip
 80047d2:	2200      	movs	r2, #0
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e041      	b.n	800485c <printASCIIarray+0x1a58>
						weoBuffer[j]=F3[dataASCII[i]][j];
 80047d8:	2362      	movs	r3, #98	; 0x62
 80047da:	218c      	movs	r1, #140	; 0x8c
 80047dc:	0049      	lsls	r1, r1, #1
 80047de:	185b      	adds	r3, r3, r1
 80047e0:	2208      	movs	r2, #8
 80047e2:	4694      	mov	ip, r2
 80047e4:	44bc      	add	ip, r7
 80047e6:	4463      	add	r3, ip
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	1852      	adds	r2, r2, r1
 80047ee:	2008      	movs	r0, #8
 80047f0:	4684      	mov	ip, r0
 80047f2:	2008      	movs	r0, #8
 80047f4:	4680      	mov	r8, r0
 80047f6:	44b8      	add	r8, r7
 80047f8:	44c4      	add	ip, r8
 80047fa:	4462      	add	r2, ip
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	18d3      	adds	r3, r2, r3
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	001a      	movs	r2, r3
 8004804:	2664      	movs	r6, #100	; 0x64
 8004806:	1873      	adds	r3, r6, r1
 8004808:	2008      	movs	r0, #8
 800480a:	4684      	mov	ip, r0
 800480c:	44bc      	add	ip, r7
 800480e:	4463      	add	r3, ip
 8004810:	8818      	ldrh	r0, [r3, #0]
 8004812:	1873      	adds	r3, r6, r1
 8004814:	2108      	movs	r1, #8
 8004816:	468c      	mov	ip, r1
 8004818:	44bc      	add	ip, r7
 800481a:	4463      	add	r3, ip
 800481c:	8819      	ldrh	r1, [r3, #0]
 800481e:	4ca1      	ldr	r4, [pc, #644]	; (8004aa4 <printASCIIarray+0x1ca0>)
 8004820:	0013      	movs	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	189b      	adds	r3, r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	189b      	adds	r3, r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	18e3      	adds	r3, r4, r3
 800482e:	5c1a      	ldrb	r2, [r3, r0]
 8004830:	239a      	movs	r3, #154	; 0x9a
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	2008      	movs	r0, #8
 8004836:	181b      	adds	r3, r3, r0
 8004838:	19db      	adds	r3, r3, r7
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	545a      	strb	r2, [r3, r1]
					for(j=0;j<symLen;j++){
 800483e:	218c      	movs	r1, #140	; 0x8c
 8004840:	0049      	lsls	r1, r1, #1
 8004842:	1873      	adds	r3, r6, r1
 8004844:	2208      	movs	r2, #8
 8004846:	4694      	mov	ip, r2
 8004848:	44bc      	add	ip, r7
 800484a:	4463      	add	r3, ip
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	1873      	adds	r3, r6, r1
 8004850:	2108      	movs	r1, #8
 8004852:	468c      	mov	ip, r1
 8004854:	44bc      	add	ip, r7
 8004856:	4463      	add	r3, ip
 8004858:	3201      	adds	r2, #1
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	2364      	movs	r3, #100	; 0x64
 800485e:	218c      	movs	r1, #140	; 0x8c
 8004860:	0049      	lsls	r1, r1, #1
 8004862:	185b      	adds	r3, r3, r1
 8004864:	2208      	movs	r2, #8
 8004866:	18ba      	adds	r2, r7, r2
 8004868:	189a      	adds	r2, r3, r2
 800486a:	235a      	movs	r3, #90	; 0x5a
 800486c:	185b      	adds	r3, r3, r1
 800486e:	2008      	movs	r0, #8
 8004870:	4684      	mov	ip, r0
 8004872:	44bc      	add	ip, r7
 8004874:	4463      	add	r3, ip
 8004876:	8812      	ldrh	r2, [r2, #0]
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d3ac      	bcc.n	80047d8 <printASCIIarray+0x19d4>
//							weoBuffer2[k]=((weoBuffer[k]&0xF0)>>4)&contrast;
//						}
//					for (k=0;k<symLen;k++){
//							weoBuffer[k]=(weoBuffer2[k]<<4)|weoBuffer1[k];
//						}
					for (k=0;k<symLen;k++){
 800487e:	2366      	movs	r3, #102	; 0x66
 8004880:	185b      	adds	r3, r3, r1
 8004882:	2208      	movs	r2, #8
 8004884:	4694      	mov	ip, r2
 8004886:	44bc      	add	ip, r7
 8004888:	4463      	add	r3, ip
 800488a:	2200      	movs	r2, #0
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	e032      	b.n	80048f6 <printASCIIarray+0x1af2>
						weoBuffer[k]=weoBuffer[k] & contrast;
 8004890:	2066      	movs	r0, #102	; 0x66
 8004892:	248c      	movs	r4, #140	; 0x8c
 8004894:	0064      	lsls	r4, r4, #1
 8004896:	1903      	adds	r3, r0, r4
 8004898:	2208      	movs	r2, #8
 800489a:	4694      	mov	ip, r2
 800489c:	44bc      	add	ip, r7
 800489e:	4463      	add	r3, ip
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	269a      	movs	r6, #154	; 0x9a
 80048a4:	0076      	lsls	r6, r6, #1
 80048a6:	2208      	movs	r2, #8
 80048a8:	18b2      	adds	r2, r6, r2
 80048aa:	19d2      	adds	r2, r2, r7
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	5cd2      	ldrb	r2, [r2, r3]
 80048b0:	1903      	adds	r3, r0, r4
 80048b2:	2108      	movs	r1, #8
 80048b4:	468c      	mov	ip, r1
 80048b6:	44bc      	add	ip, r7
 80048b8:	4463      	add	r3, ip
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	4698      	mov	r8, r3
 80048be:	215c      	movs	r1, #92	; 0x5c
 80048c0:	1909      	adds	r1, r1, r4
 80048c2:	2308      	movs	r3, #8
 80048c4:	469c      	mov	ip, r3
 80048c6:	44bc      	add	ip, r7
 80048c8:	4461      	add	r1, ip
 80048ca:	7809      	ldrb	r1, [r1, #0]
 80048cc:	400a      	ands	r2, r1
 80048ce:	b2d1      	uxtb	r1, r2
 80048d0:	2208      	movs	r2, #8
 80048d2:	18b2      	adds	r2, r6, r2
 80048d4:	19d2      	adds	r2, r2, r7
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	4643      	mov	r3, r8
 80048da:	54d1      	strb	r1, [r2, r3]
					for (k=0;k<symLen;k++){
 80048dc:	1903      	adds	r3, r0, r4
 80048de:	2208      	movs	r2, #8
 80048e0:	4694      	mov	ip, r2
 80048e2:	44bc      	add	ip, r7
 80048e4:	4463      	add	r3, ip
 80048e6:	881a      	ldrh	r2, [r3, #0]
 80048e8:	1903      	adds	r3, r0, r4
 80048ea:	2108      	movs	r1, #8
 80048ec:	468c      	mov	ip, r1
 80048ee:	44bc      	add	ip, r7
 80048f0:	4463      	add	r3, ip
 80048f2:	3201      	adds	r2, #1
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	2366      	movs	r3, #102	; 0x66
 80048f8:	268c      	movs	r6, #140	; 0x8c
 80048fa:	0076      	lsls	r6, r6, #1
 80048fc:	199b      	adds	r3, r3, r6
 80048fe:	2208      	movs	r2, #8
 8004900:	18ba      	adds	r2, r7, r2
 8004902:	189a      	adds	r2, r3, r2
 8004904:	235a      	movs	r3, #90	; 0x5a
 8004906:	199b      	adds	r3, r3, r6
 8004908:	2108      	movs	r1, #8
 800490a:	468c      	mov	ip, r1
 800490c:	44bc      	add	ip, r7
 800490e:	4463      	add	r3, ip
 8004910:	8812      	ldrh	r2, [r2, #0]
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d3bb      	bcc.n	8004890 <printASCIIarray+0x1a8c>
					}
				weoDrawRectangleFilled(ASCII_X, imY, ASCII_X+X_increment-1, imY + ASCII_height - decY, 0xFF, weoBuffer);
 8004918:	205f      	movs	r0, #95	; 0x5f
 800491a:	1983      	adds	r3, r0, r6
 800491c:	2208      	movs	r2, #8
 800491e:	18ba      	adds	r2, r7, r2
 8004920:	189a      	adds	r2, r3, r2
 8004922:	233f      	movs	r3, #63	; 0x3f
 8004924:	199b      	adds	r3, r3, r6
 8004926:	2108      	movs	r1, #8
 8004928:	468c      	mov	ip, r1
 800492a:	44bc      	add	ip, r7
 800492c:	4463      	add	r3, ip
 800492e:	7812      	ldrb	r2, [r2, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	18d3      	adds	r3, r2, r3
 8004934:	b2db      	uxtb	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b2dc      	uxtb	r4, r3
 800493a:	218f      	movs	r1, #143	; 0x8f
 800493c:	0049      	lsls	r1, r1, #1
 800493e:	2308      	movs	r3, #8
 8004940:	18cb      	adds	r3, r1, r3
 8004942:	19da      	adds	r2, r3, r7
 8004944:	213e      	movs	r1, #62	; 0x3e
 8004946:	198b      	adds	r3, r1, r6
 8004948:	2108      	movs	r1, #8
 800494a:	468c      	mov	ip, r1
 800494c:	44bc      	add	ip, r7
 800494e:	4463      	add	r3, ip
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	18d3      	adds	r3, r2, r3
 8004956:	b2da      	uxtb	r2, r3
 8004958:	2160      	movs	r1, #96	; 0x60
 800495a:	198b      	adds	r3, r1, r6
 800495c:	2108      	movs	r1, #8
 800495e:	468c      	mov	ip, r1
 8004960:	44bc      	add	ip, r7
 8004962:	4463      	add	r3, ip
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	b2db      	uxtb	r3, r3
 800496a:	4698      	mov	r8, r3
 800496c:	218f      	movs	r1, #143	; 0x8f
 800496e:	0049      	lsls	r1, r1, #1
 8004970:	2308      	movs	r3, #8
 8004972:	18cb      	adds	r3, r1, r3
 8004974:	19db      	adds	r3, r3, r7
 8004976:	7819      	ldrb	r1, [r3, #0]
 8004978:	0006      	movs	r6, r0
 800497a:	238c      	movs	r3, #140	; 0x8c
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	18c3      	adds	r3, r0, r3
 8004980:	2208      	movs	r2, #8
 8004982:	4694      	mov	ip, r2
 8004984:	44bc      	add	ip, r7
 8004986:	4463      	add	r3, ip
 8004988:	7818      	ldrb	r0, [r3, #0]
 800498a:	239a      	movs	r3, #154	; 0x9a
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2208      	movs	r2, #8
 8004990:	189b      	adds	r3, r3, r2
 8004992:	19db      	adds	r3, r3, r7
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	23ff      	movs	r3, #255	; 0xff
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4643      	mov	r3, r8
 800499e:	0022      	movs	r2, r4
 80049a0:	f7fc fd90 	bl	80014c4 <weoDrawRectangleFilled>
				ASCII_X += X_increment;
 80049a4:	208c      	movs	r0, #140	; 0x8c
 80049a6:	0040      	lsls	r0, r0, #1
 80049a8:	1833      	adds	r3, r6, r0
 80049aa:	2208      	movs	r2, #8
 80049ac:	4694      	mov	ip, r2
 80049ae:	44bc      	add	ip, r7
 80049b0:	4463      	add	r3, ip
 80049b2:	1832      	adds	r2, r6, r0
 80049b4:	2108      	movs	r1, #8
 80049b6:	1879      	adds	r1, r7, r1
 80049b8:	1851      	adds	r1, r2, r1
 80049ba:	223f      	movs	r2, #63	; 0x3f
 80049bc:	1812      	adds	r2, r2, r0
 80049be:	2408      	movs	r4, #8
 80049c0:	46a4      	mov	ip, r4
 80049c2:	44bc      	add	ip, r7
 80049c4:	4462      	add	r2, ip
 80049c6:	7809      	ldrb	r1, [r1, #0]
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	188a      	adds	r2, r1, r2
 80049cc:	701a      	strb	r2, [r3, #0]
				for(i=0;i<strLen;i++){
 80049ce:	2162      	movs	r1, #98	; 0x62
 80049d0:	180b      	adds	r3, r1, r0
 80049d2:	2208      	movs	r2, #8
 80049d4:	4694      	mov	ip, r2
 80049d6:	44bc      	add	ip, r7
 80049d8:	4463      	add	r3, ip
 80049da:	881a      	ldrh	r2, [r3, #0]
 80049dc:	180b      	adds	r3, r1, r0
 80049de:	2108      	movs	r1, #8
 80049e0:	468c      	mov	ip, r1
 80049e2:	44bc      	add	ip, r7
 80049e4:	4463      	add	r3, ip
 80049e6:	3201      	adds	r2, #1
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	231e      	movs	r3, #30
 80049ec:	33ff      	adds	r3, #255	; 0xff
 80049ee:	2208      	movs	r2, #8
 80049f0:	189b      	adds	r3, r3, r2
 80049f2:	19db      	adds	r3, r3, r7
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2162      	movs	r1, #98	; 0x62
 80049fa:	208c      	movs	r0, #140	; 0x8c
 80049fc:	0040      	lsls	r0, r0, #1
 80049fe:	180a      	adds	r2, r1, r0
 8004a00:	2408      	movs	r4, #8
 8004a02:	46a4      	mov	ip, r4
 8004a04:	44bc      	add	ip, r7
 8004a06:	4462      	add	r2, ip
 8004a08:	8812      	ldrh	r2, [r2, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d200      	bcs.n	8004a10 <printASCIIarray+0x1c0c>
 8004a0e:	e6d8      	b.n	80047c2 <printASCIIarray+0x19be>
				}
				for(i=0;i<symLen;i++){
 8004a10:	180b      	adds	r3, r1, r0
 8004a12:	2208      	movs	r2, #8
 8004a14:	4694      	mov	ip, r2
 8004a16:	44bc      	add	ip, r7
 8004a18:	4463      	add	r3, ip
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e01e      	b.n	8004a5e <printASCIIarray+0x1c5a>
									weoBuffer[j]=0x00;
 8004a20:	2364      	movs	r3, #100	; 0x64
 8004a22:	208c      	movs	r0, #140	; 0x8c
 8004a24:	0040      	lsls	r0, r0, #1
 8004a26:	181b      	adds	r3, r3, r0
 8004a28:	2208      	movs	r2, #8
 8004a2a:	4694      	mov	ip, r2
 8004a2c:	44bc      	add	ip, r7
 8004a2e:	4463      	add	r3, ip
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	229a      	movs	r2, #154	; 0x9a
 8004a34:	0052      	lsls	r2, r2, #1
 8004a36:	2108      	movs	r1, #8
 8004a38:	1852      	adds	r2, r2, r1
 8004a3a:	19d2      	adds	r2, r2, r7
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	2100      	movs	r1, #0
 8004a40:	54d1      	strb	r1, [r2, r3]
				for(i=0;i<symLen;i++){
 8004a42:	2162      	movs	r1, #98	; 0x62
 8004a44:	180b      	adds	r3, r1, r0
 8004a46:	2208      	movs	r2, #8
 8004a48:	4694      	mov	ip, r2
 8004a4a:	44bc      	add	ip, r7
 8004a4c:	4463      	add	r3, ip
 8004a4e:	881a      	ldrh	r2, [r3, #0]
 8004a50:	180b      	adds	r3, r1, r0
 8004a52:	2108      	movs	r1, #8
 8004a54:	468c      	mov	ip, r1
 8004a56:	44bc      	add	ip, r7
 8004a58:	4463      	add	r3, ip
 8004a5a:	3201      	adds	r2, #1
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	2362      	movs	r3, #98	; 0x62
 8004a60:	218c      	movs	r1, #140	; 0x8c
 8004a62:	0049      	lsls	r1, r1, #1
 8004a64:	185b      	adds	r3, r3, r1
 8004a66:	2208      	movs	r2, #8
 8004a68:	18ba      	adds	r2, r7, r2
 8004a6a:	189a      	adds	r2, r3, r2
 8004a6c:	235a      	movs	r3, #90	; 0x5a
 8004a6e:	185b      	adds	r3, r3, r1
 8004a70:	2108      	movs	r1, #8
 8004a72:	468c      	mov	ip, r1
 8004a74:	44bc      	add	ip, r7
 8004a76:	4463      	add	r3, ip
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3cf      	bcc.n	8004a20 <printASCIIarray+0x1c1c>
 8004a80:	46ad      	mov	sp, r5
							}
			}
			cmd2Execute=0;
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <printASCIIarray+0x1ca4>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
//			while(BFEN==0){};
			GPIOC->ODR |= 1 << 6;	//set BF
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <printASCIIarray+0x1ca8>)
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <printASCIIarray+0x1ca8>)
 8004a8e:	2140      	movs	r1, #64	; 0x40
 8004a90:	430a      	orrs	r2, r1
 8004a92:	615a      	str	r2, [r3, #20]

	}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	0018      	movs	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	b063      	add	sp, #396	; 0x18c
 8004a9c:	bcc0      	pop	{r6, r7}
 8004a9e:	46b9      	mov	r9, r7
 8004aa0:	46b0      	mov	r8, r6
 8004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa4:	08015dc8 	.word	0x08015dc8
 8004aa8:	200002ea 	.word	0x200002ea
 8004aac:	50000800 	.word	0x50000800

08004ab0 <LIS3DHsendCMD>:
//		HAL_Delay(500);
//		GPIOC->ODR |= 1 << 6;	//set BF
//		cmd2Execute=0;
	}
//=============================================================================================================
	void LIS3DHsendCMD(uint8_t reg, uint8_t data) {
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	0002      	movs	r2, r0
 8004ab8:	1dfb      	adds	r3, r7, #7
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	1dbb      	adds	r3, r7, #6
 8004abe:	1c0a      	adds	r2, r1, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
		uint8_t buf[] = { reg, data };
 8004ac2:	210c      	movs	r1, #12
 8004ac4:	187b      	adds	r3, r7, r1
 8004ac6:	1dfa      	adds	r2, r7, #7
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	187b      	adds	r3, r7, r1
 8004ace:	1dba      	adds	r2, r7, #6
 8004ad0:	7812      	ldrb	r2, [r2, #0]
 8004ad2:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x32, buf, 2, 1000);	//32h - address for writing
 8004ad4:	187a      	adds	r2, r7, r1
 8004ad6:	4806      	ldr	r0, [pc, #24]	; (8004af0 <LIS3DHsendCMD+0x40>)
 8004ad8:	23fa      	movs	r3, #250	; 0xfa
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2302      	movs	r3, #2
 8004ae0:	2132      	movs	r1, #50	; 0x32
 8004ae2:	f001 fd11 	bl	8006508 <HAL_I2C_Master_Transmit>
	}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	b004      	add	sp, #16
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	2000008c 	.word	0x2000008c

08004af4 <LIS3DHsetup>:
//	  xVal = buffer[0];
//	  yVal = buffer[1];
//	  zVal = buffer[2];
//	}
//=============================================================================================================
	void LIS3DHsetup(void){
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
		uint8_t CTRL_REG1_val=0x00;
 8004afa:	1dfb      	adds	r3, r7, #7
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG4_val=0x00;
 8004b00:	1dbb      	adds	r3, r7, #6
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG5_val=0x00;
 8004b06:	1d7b      	adds	r3, r7, #5
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
		uint8_t CTRL_REG6_val=0x00;
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_CTRL_REG_val=0x00;
 8004b12:	1cfb      	adds	r3, r7, #3
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
		uint8_t FIFO_SRC_REG_val=0x00;
 8004b18:	1cbb      	adds	r3, r7, #2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_CFG_val=0x00;
 8004b1e:	1c7b      	adds	r3, r7, #1
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
		uint8_t INT_1_SRC_val=0x00;
 8004b24:	003b      	movs	r3, r7
 8004b26:	2200      	movs	r2, #0
 8004b28:	701a      	strb	r2, [r3, #0]

		LIS3DHsendCMD(CTRL_REG1,(CTRL_REG1_val|accelDataRate_25_Hz|Xen|Yen|Zen));//data rate selection
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2237      	movs	r2, #55	; 0x37
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	0019      	movs	r1, r3
 8004b36:	2020      	movs	r0, #32
 8004b38:	f7ff ffba 	bl	8004ab0 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG2,);//HPFilter
//		LIS3DHsendCMD(CTRL_REG3,);
		LIS3DHsendCMD(CTRL_REG4,(CTRL_REG4_val|BDU|FULL_SCALE_2G|HR));
 8004b3c:	1dbb      	adds	r3, r7, #6
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	227c      	movs	r2, #124	; 0x7c
 8004b42:	4252      	negs	r2, r2
 8004b44:	4313      	orrs	r3, r2
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	0019      	movs	r1, r3
 8004b4a:	2023      	movs	r0, #35	; 0x23
 8004b4c:	f7ff ffb0 	bl	8004ab0 <LIS3DHsendCMD>
//		LIS3DHsendCMD(CTRL_REG6,);
//		LIS3DHsendCMD(FIFO_CTRL_REG,FIFO_CTRL_REG_val);	//	2B configured
//		LIS3DHsendCMD(FIFO_SRC_REG,FIFO_SRC_REG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_CFG,INT_1_CFG_val);	//	2B configured
//		LIS3DHsendCMD(INT_1_SRC_val,INT_1_SRC_val);	//	2B configured
	}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b002      	add	sp, #8
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6a:	4b11      	ldr	r3, [pc, #68]	; (8004bb0 <HAL_MspInit+0x4c>)
 8004b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <HAL_MspInit+0x4c>)
 8004b70:	2101      	movs	r1, #1
 8004b72:	430a      	orrs	r2, r1
 8004b74:	641a      	str	r2, [r3, #64]	; 0x40
 8004b76:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <HAL_MspInit+0x4c>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	607b      	str	r3, [r7, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_MspInit+0x4c>)
 8004b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_MspInit+0x4c>)
 8004b88:	2180      	movs	r1, #128	; 0x80
 8004b8a:	0549      	lsls	r1, r1, #21
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <HAL_MspInit+0x4c>)
 8004b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	055b      	lsls	r3, r3, #21
 8004b98:	4013      	ands	r3, r2
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 fc9a 	bl	80054dc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ba8:	46c0      	nop			; (mov r8, r8)
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b002      	add	sp, #8
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40021000 	.word	0x40021000

08004bb4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	240c      	movs	r4, #12
 8004bbe:	193b      	adds	r3, r7, r4
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	2314      	movs	r3, #20
 8004bc4:	001a      	movs	r2, r3
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f007 fee8 	bl	800c99c <memset>
  if(hcomp->Instance==COMP1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a10      	ldr	r2, [pc, #64]	; (8004c14 <HAL_COMP_MspInit+0x60>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d11a      	bne.n	8004c0c <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <HAL_COMP_MspInit+0x64>)
 8004bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bda:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_COMP_MspInit+0x64>)
 8004bdc:	2102      	movs	r1, #2
 8004bde:	430a      	orrs	r2, r1
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34
 8004be2:	4b0d      	ldr	r3, [pc, #52]	; (8004c18 <HAL_COMP_MspInit+0x64>)
 8004be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be6:	2202      	movs	r2, #2
 8004be8:	4013      	ands	r3, r2
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bee:	193b      	adds	r3, r7, r4
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bf4:	193b      	adds	r3, r7, r4
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c00:	193b      	adds	r3, r7, r4
 8004c02:	4a06      	ldr	r2, [pc, #24]	; (8004c1c <HAL_COMP_MspInit+0x68>)
 8004c04:	0019      	movs	r1, r3
 8004c06:	0010      	movs	r0, r2
 8004c08:	f001 fa84 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8004c0c:	46c0      	nop			; (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b009      	add	sp, #36	; 0x24
 8004c12:	bd90      	pop	{r4, r7, pc}
 8004c14:	40010200 	.word	0x40010200
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	50000400 	.word	0x50000400

08004c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b097      	sub	sp, #92	; 0x5c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c28:	2344      	movs	r3, #68	; 0x44
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	2314      	movs	r3, #20
 8004c30:	001a      	movs	r2, r3
 8004c32:	2100      	movs	r1, #0
 8004c34:	f007 feb2 	bl	800c99c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c38:	2410      	movs	r4, #16
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	2334      	movs	r3, #52	; 0x34
 8004c40:	001a      	movs	r2, r3
 8004c42:	2100      	movs	r1, #0
 8004c44:	f007 feaa 	bl	800c99c <memset>
  if(hi2c->Instance==I2C1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a27      	ldr	r2, [pc, #156]	; (8004cec <HAL_I2C_MspInit+0xcc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d147      	bne.n	8004ce2 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004c52:	193b      	adds	r3, r7, r4
 8004c54:	2220      	movs	r2, #32
 8004c56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004c58:	193b      	adds	r3, r7, r4
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c5e:	193b      	adds	r3, r7, r4
 8004c60:	0018      	movs	r0, r3
 8004c62:	f003 fdc9 	bl	80087f8 <HAL_RCCEx_PeriphCLKConfig>
 8004c66:	1e03      	subs	r3, r0, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004c6a:	f7ff ff75 	bl	8004b58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6e:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <HAL_I2C_MspInit+0xd0>)
 8004c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c72:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <HAL_I2C_MspInit+0xd0>)
 8004c74:	2101      	movs	r1, #1
 8004c76:	430a      	orrs	r2, r1
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <HAL_I2C_MspInit+0xd0>)
 8004c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004c86:	2144      	movs	r1, #68	; 0x44
 8004c88:	187b      	adds	r3, r7, r1
 8004c8a:	22c0      	movs	r2, #192	; 0xc0
 8004c8c:	00d2      	lsls	r2, r2, #3
 8004c8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	2212      	movs	r2, #18
 8004c94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	2201      	movs	r2, #1
 8004c9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9c:	187b      	adds	r3, r7, r1
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	2206      	movs	r2, #6
 8004ca6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca8:	187a      	adds	r2, r7, r1
 8004caa:	23a0      	movs	r3, #160	; 0xa0
 8004cac:	05db      	lsls	r3, r3, #23
 8004cae:	0011      	movs	r1, r2
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 fa2f 	bl	8006114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <HAL_I2C_MspInit+0xd0>)
 8004cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <HAL_I2C_MspInit+0xd0>)
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	0389      	lsls	r1, r1, #14
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cc4:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_I2C_MspInit+0xd0>)
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	2380      	movs	r3, #128	; 0x80
 8004cca:	039b      	lsls	r3, r3, #14
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	2017      	movs	r0, #23
 8004cd8:	f000 ff22 	bl	8005b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004cdc:	2017      	movs	r0, #23
 8004cde:	f000 ff34 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	b017      	add	sp, #92	; 0x5c
 8004ce8:	bd90      	pop	{r4, r7, pc}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	40005400 	.word	0x40005400
 8004cf0:	40021000 	.word	0x40021000

08004cf4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b099      	sub	sp, #100	; 0x64
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	234c      	movs	r3, #76	; 0x4c
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	0018      	movs	r0, r3
 8004d02:	2314      	movs	r3, #20
 8004d04:	001a      	movs	r2, r3
 8004d06:	2100      	movs	r1, #0
 8004d08:	f007 fe48 	bl	800c99c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d0c:	2418      	movs	r4, #24
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	0018      	movs	r0, r3
 8004d12:	2334      	movs	r3, #52	; 0x34
 8004d14:	001a      	movs	r2, r3
 8004d16:	2100      	movs	r1, #0
 8004d18:	f007 fe40 	bl	800c99c <memset>
  if(hi2s->Instance==SPI1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a4f      	ldr	r2, [pc, #316]	; (8004e60 <HAL_I2S_MspInit+0x16c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d000      	beq.n	8004d28 <HAL_I2S_MspInit+0x34>
 8004d26:	e097      	b.n	8004e58 <HAL_I2S_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	2280      	movs	r2, #128	; 0x80
 8004d2c:	0112      	lsls	r2, r2, #4
 8004d2e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8004d30:	193b      	adds	r3, r7, r4
 8004d32:	2200      	movs	r2, #0
 8004d34:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d36:	193b      	adds	r3, r7, r4
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f003 fd5d 	bl	80087f8 <HAL_RCCEx_PeriphCLKConfig>
 8004d3e:	1e03      	subs	r3, r0, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8004d42:	f7ff ff09 	bl	8004b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d46:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d4a:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d4c:	2180      	movs	r1, #128	; 0x80
 8004d4e:	0149      	lsls	r1, r1, #5
 8004d50:	430a      	orrs	r2, r1
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
 8004d54:	4b43      	ldr	r3, [pc, #268]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d58:	2380      	movs	r3, #128	; 0x80
 8004d5a:	015b      	lsls	r3, r3, #5
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d62:	4b40      	ldr	r3, [pc, #256]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d68:	2101      	movs	r1, #1
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d6e:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	2201      	movs	r2, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7e:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d80:	2102      	movs	r1, #2
 8004d82:	430a      	orrs	r2, r1
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
 8004d86:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <HAL_I2S_MspInit+0x170>)
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d92:	214c      	movs	r1, #76	; 0x4c
 8004d94:	187b      	adds	r3, r7, r1
 8004d96:	2280      	movs	r2, #128	; 0x80
 8004d98:	0212      	lsls	r2, r2, #8
 8004d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9c:	000c      	movs	r4, r1
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	2202      	movs	r2, #2
 8004da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	2201      	movs	r2, #1
 8004da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004daa:	193b      	adds	r3, r7, r4
 8004dac:	2203      	movs	r2, #3
 8004dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004db0:	193b      	adds	r3, r7, r4
 8004db2:	2200      	movs	r2, #0
 8004db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004db6:	193a      	adds	r2, r7, r4
 8004db8:	23a0      	movs	r3, #160	; 0xa0
 8004dba:	05db      	lsls	r3, r3, #23
 8004dbc:	0011      	movs	r1, r2
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f001 f9a8 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004dc4:	0021      	movs	r1, r4
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	2238      	movs	r2, #56	; 0x38
 8004dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	2202      	movs	r2, #2
 8004dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004dde:	187b      	adds	r3, r7, r1
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <HAL_I2S_MspInit+0x174>)
 8004de8:	0019      	movs	r1, r3
 8004dea:	0010      	movs	r0, r2
 8004dec:	f001 f992 	bl	8006114 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <HAL_I2S_MspInit+0x17c>)
 8004df4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8004df6:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004df8:	2211      	movs	r2, #17
 8004dfa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004dfe:	2210      	movs	r2, #16
 8004e00:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004e08:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e0a:	2280      	movs	r2, #128	; 0x80
 8004e0c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e0e:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e10:	2280      	movs	r2, #128	; 0x80
 8004e12:	0052      	lsls	r2, r2, #1
 8004e14:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e18:	2280      	movs	r2, #128	; 0x80
 8004e1a:	00d2      	lsls	r2, r2, #3
 8004e1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e26:	22c0      	movs	r2, #192	; 0xc0
 8004e28:	0192      	lsls	r2, r2, #6
 8004e2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f000 fea8 	bl	8005b84 <HAL_DMA_Init>
 8004e34:	1e03      	subs	r3, r0, #0
 8004e36:	d001      	beq.n	8004e3c <HAL_I2S_MspInit+0x148>
    {
      Error_Handler();
 8004e38:	f7ff fe8e 	bl	8004b58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_I2S_MspInit+0x178>)
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2019      	movs	r0, #25
 8004e4e:	f000 fe67 	bl	8005b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004e52:	2019      	movs	r0, #25
 8004e54:	f000 fe79 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b019      	add	sp, #100	; 0x64
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	40013000 	.word	0x40013000
 8004e64:	40021000 	.word	0x40021000
 8004e68:	50000400 	.word	0x50000400
 8004e6c:	2000011c 	.word	0x2000011c
 8004e70:	40020008 	.word	0x40020008

08004e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b08b      	sub	sp, #44	; 0x2c
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7c:	2414      	movs	r4, #20
 8004e7e:	193b      	adds	r3, r7, r4
 8004e80:	0018      	movs	r0, r3
 8004e82:	2314      	movs	r3, #20
 8004e84:	001a      	movs	r2, r3
 8004e86:	2100      	movs	r1, #0
 8004e88:	f007 fd88 	bl	800c99c <memset>
  if(hspi->Instance==SPI2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2a      	ldr	r2, [pc, #168]	; (8004f3c <HAL_SPI_MspInit+0xc8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d14d      	bne.n	8004f32 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e96:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <HAL_SPI_MspInit+0xcc>)
 8004e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e9a:	4b29      	ldr	r3, [pc, #164]	; (8004f40 <HAL_SPI_MspInit+0xcc>)
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	01c9      	lsls	r1, r1, #7
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ea4:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <HAL_SPI_MspInit+0xcc>)
 8004ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	01db      	lsls	r3, r3, #7
 8004eac:	4013      	ands	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb2:	4b23      	ldr	r3, [pc, #140]	; (8004f40 <HAL_SPI_MspInit+0xcc>)
 8004eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_SPI_MspInit+0xcc>)
 8004eb8:	2102      	movs	r1, #2
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_SPI_MspInit+0xcc>)
 8004ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004eca:	193b      	adds	r3, r7, r4
 8004ecc:	2240      	movs	r2, #64	; 0x40
 8004ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed0:	193b      	adds	r3, r7, r4
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ed6:	193b      	adds	r3, r7, r4
 8004ed8:	2201      	movs	r2, #1
 8004eda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004edc:	193b      	adds	r3, r7, r4
 8004ede:	2200      	movs	r2, #0
 8004ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 8004ee2:	193b      	adds	r3, r7, r4
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee8:	193b      	adds	r3, r7, r4
 8004eea:	4a16      	ldr	r2, [pc, #88]	; (8004f44 <HAL_SPI_MspInit+0xd0>)
 8004eec:	0019      	movs	r1, r3
 8004eee:	0010      	movs	r0, r2
 8004ef0:	f001 f910 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004ef4:	0021      	movs	r1, r4
 8004ef6:	187b      	adds	r3, r7, r1
 8004ef8:	22c0      	movs	r2, #192	; 0xc0
 8004efa:	0052      	lsls	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	2202      	movs	r2, #2
 8004f02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f04:	187b      	adds	r3, r7, r1
 8004f06:	2201      	movs	r2, #1
 8004f08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	2201      	movs	r2, #1
 8004f14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	4a0a      	ldr	r2, [pc, #40]	; (8004f44 <HAL_SPI_MspInit+0xd0>)
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	0010      	movs	r0, r2
 8004f1e:	f001 f8f9 	bl	8006114 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	201a      	movs	r0, #26
 8004f28:	f000 fdfa 	bl	8005b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004f2c:	201a      	movs	r0, #26
 8004f2e:	f000 fe0c 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	b00b      	add	sp, #44	; 0x2c
 8004f38:	bd90      	pop	{r4, r7, pc}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	40003800 	.word	0x40003800
 8004f40:	40021000 	.word	0x40021000
 8004f44:	50000400 	.word	0x50000400

08004f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f48:	b590      	push	{r4, r7, lr}
 8004f4a:	b091      	sub	sp, #68	; 0x44
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f50:	240c      	movs	r4, #12
 8004f52:	193b      	adds	r3, r7, r4
 8004f54:	0018      	movs	r0, r3
 8004f56:	2334      	movs	r3, #52	; 0x34
 8004f58:	001a      	movs	r2, r3
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f007 fd1e 	bl	800c99c <memset>
  if(htim_base->Instance==TIM1)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a11      	ldr	r2, [pc, #68]	; (8004fac <HAL_TIM_Base_MspInit+0x64>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d11c      	bne.n	8004fa4 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	2280      	movs	r2, #128	; 0x80
 8004f6e:	0392      	lsls	r2, r2, #14
 8004f70:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	2200      	movs	r2, #0
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f78:	193b      	adds	r3, r7, r4
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f003 fc3c 	bl	80087f8 <HAL_RCCEx_PeriphCLKConfig>
 8004f80:	1e03      	subs	r3, r0, #0
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8004f84:	f7ff fde8 	bl	8004b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f88:	4b09      	ldr	r3, [pc, #36]	; (8004fb0 <HAL_TIM_Base_MspInit+0x68>)
 8004f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <HAL_TIM_Base_MspInit+0x68>)
 8004f8e:	2180      	movs	r1, #128	; 0x80
 8004f90:	0109      	lsls	r1, r1, #4
 8004f92:	430a      	orrs	r2, r1
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <HAL_TIM_Base_MspInit+0x68>)
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b011      	add	sp, #68	; 0x44
 8004faa:	bd90      	pop	{r4, r7, pc}
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fb4:	b590      	push	{r4, r7, lr}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fbc:	240c      	movs	r4, #12
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	2314      	movs	r3, #20
 8004fc4:	001a      	movs	r2, r3
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	f007 fce8 	bl	800c99c <memset>
  if(htim->Instance==TIM1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a15      	ldr	r2, [pc, #84]	; (8005028 <HAL_TIM_MspPostInit+0x74>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d123      	bne.n	800501e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd6:	4b15      	ldr	r3, [pc, #84]	; (800502c <HAL_TIM_MspPostInit+0x78>)
 8004fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fda:	4b14      	ldr	r3, [pc, #80]	; (800502c <HAL_TIM_MspPostInit+0x78>)
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_TIM_MspPostInit+0x78>)
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fee:	193b      	adds	r3, r7, r4
 8004ff0:	2280      	movs	r2, #128	; 0x80
 8004ff2:	0052      	lsls	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff6:	0021      	movs	r1, r4
 8004ff8:	187b      	adds	r3, r7, r1
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	2202      	movs	r2, #2
 8005002:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	187b      	adds	r3, r7, r1
 8005006:	2203      	movs	r2, #3
 8005008:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800500a:	187b      	adds	r3, r7, r1
 800500c:	2202      	movs	r2, #2
 800500e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005010:	187a      	adds	r2, r7, r1
 8005012:	23a0      	movs	r3, #160	; 0xa0
 8005014:	05db      	lsls	r3, r3, #23
 8005016:	0011      	movs	r1, r2
 8005018:	0018      	movs	r0, r3
 800501a:	f001 f87b 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	46bd      	mov	sp, r7
 8005022:	b009      	add	sp, #36	; 0x24
 8005024:	bd90      	pop	{r4, r7, pc}
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	40012c00 	.word	0x40012c00
 800502c:	40021000 	.word	0x40021000

08005030 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b08b      	sub	sp, #44	; 0x2c
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	2414      	movs	r4, #20
 800503a:	193b      	adds	r3, r7, r4
 800503c:	0018      	movs	r0, r3
 800503e:	2314      	movs	r3, #20
 8005040:	001a      	movs	r2, r3
 8005042:	2100      	movs	r1, #0
 8005044:	f007 fcaa 	bl	800c99c <memset>
  if(husart->Instance==USART3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a30      	ldr	r2, [pc, #192]	; (8005110 <HAL_USART_MspInit+0xe0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d159      	bne.n	8005106 <HAL_USART_MspInit+0xd6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005052:	4b30      	ldr	r3, [pc, #192]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005056:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	02c9      	lsls	r1, r1, #11
 800505c:	430a      	orrs	r2, r1
 800505e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005060:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	02db      	lsls	r3, r3, #11
 8005068:	4013      	ands	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005072:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005074:	2101      	movs	r1, #1
 8005076:	430a      	orrs	r2, r1
 8005078:	635a      	str	r2, [r3, #52]	; 0x34
 800507a:	4b26      	ldr	r3, [pc, #152]	; (8005114 <HAL_USART_MspInit+0xe4>)
 800507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507e:	2201      	movs	r2, #1
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005086:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800508a:	4b22      	ldr	r3, [pc, #136]	; (8005114 <HAL_USART_MspInit+0xe4>)
 800508c:	2102      	movs	r1, #2
 800508e:	430a      	orrs	r2, r1
 8005090:	635a      	str	r2, [r3, #52]	; 0x34
 8005092:	4b20      	ldr	r3, [pc, #128]	; (8005114 <HAL_USART_MspInit+0xe4>)
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	2202      	movs	r2, #2
 8005098:	4013      	ands	r3, r2
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800509e:	193b      	adds	r3, r7, r4
 80050a0:	2220      	movs	r2, #32
 80050a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	2202      	movs	r2, #2
 80050a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	2200      	movs	r2, #0
 80050ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	193b      	adds	r3, r7, r4
 80050b2:	2203      	movs	r2, #3
 80050b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	2204      	movs	r2, #4
 80050ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050bc:	193a      	adds	r2, r7, r4
 80050be:	23a0      	movs	r3, #160	; 0xa0
 80050c0:	05db      	lsls	r3, r3, #23
 80050c2:	0011      	movs	r1, r2
 80050c4:	0018      	movs	r0, r3
 80050c6:	f001 f825 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050ca:	0021      	movs	r1, r4
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	2203      	movs	r2, #3
 80050d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	187b      	adds	r3, r7, r1
 80050d4:	2202      	movs	r2, #2
 80050d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	2200      	movs	r2, #0
 80050dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050de:	187b      	adds	r3, r7, r1
 80050e0:	2203      	movs	r2, #3
 80050e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80050e4:	187b      	adds	r3, r7, r1
 80050e6:	2204      	movs	r2, #4
 80050e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ea:	187b      	adds	r3, r7, r1
 80050ec:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <HAL_USART_MspInit+0xe8>)
 80050ee:	0019      	movs	r1, r3
 80050f0:	0010      	movs	r0, r2
 80050f2:	f001 f80f 	bl	8006114 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 80050f6:	2200      	movs	r2, #0
 80050f8:	2100      	movs	r1, #0
 80050fa:	201d      	movs	r0, #29
 80050fc:	f000 fd10 	bl	8005b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8005100:	201d      	movs	r0, #29
 8005102:	f000 fd22 	bl	8005b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b00b      	add	sp, #44	; 0x2c
 800510c:	bd90      	pop	{r4, r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	40004800 	.word	0x40004800
 8005114:	40021000 	.word	0x40021000
 8005118:	50000400 	.word	0x50000400

0800511c <LL_USART_IsActiveFlag_FE>:
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	2202      	movs	r2, #2
 800512a:	4013      	ands	r3, r2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d101      	bne.n	8005134 <LL_USART_IsActiveFlag_FE+0x18>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <LL_USART_IsActiveFlag_FE+0x1a>
 8005134:	2300      	movs	r3, #0
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b002      	add	sp, #8
 800513c:	bd80      	pop	{r7, pc}

0800513e <LL_USART_IsActiveFlag_NE>:
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	2204      	movs	r2, #4
 800514c:	4013      	ands	r3, r2
 800514e:	2b04      	cmp	r3, #4
 8005150:	d101      	bne.n	8005156 <LL_USART_IsActiveFlag_NE+0x18>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <LL_USART_IsActiveFlag_NE+0x1a>
 8005156:	2300      	movs	r3, #0
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <LL_USART_IsActiveFlag_ORE>:
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	2208      	movs	r2, #8
 800516e:	4013      	ands	r3, r2
 8005170:	2b08      	cmp	r3, #8
 8005172:	d101      	bne.n	8005178 <LL_USART_IsActiveFlag_ORE+0x18>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <LL_USART_IsActiveFlag_ORE+0x1a>
 8005178:	2300      	movs	r3, #0
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b002      	add	sp, #8
 8005180:	bd80      	pop	{r7, pc}

08005182 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2220      	movs	r2, #32
 8005190:	4013      	ands	r3, r2
 8005192:	2b20      	cmp	r3, #32
 8005194:	d101      	bne.n	800519a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 800519a:	2300      	movs	r3, #0
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b002      	add	sp, #8
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2220      	movs	r2, #32
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d101      	bne.n	80051bc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 80051bc:	2300      	movs	r3, #0
}
 80051be:	0018      	movs	r0, r3
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b002      	add	sp, #8
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051d4:	e7fe      	b.n	80051d4 <HardFault_Handler+0x4>

080051d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051e4:	46c0      	nop			; (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051ee:	f000 f935 	bl	800545c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <DMA1_Channel1_IRQHandler+0x14>)
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 fe3a 	bl	8005e78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	2000011c 	.word	0x2000011c

08005210 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <I2C1_IRQHandler+0x2c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	23e0      	movs	r3, #224	; 0xe0
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	4013      	ands	r3, r2
 8005220:	d004      	beq.n	800522c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <I2C1_IRQHandler+0x2c>)
 8005224:	0018      	movs	r0, r3
 8005226:	f001 fa91 	bl	800674c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800522a:	e003      	b.n	8005234 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800522c:	4b03      	ldr	r3, [pc, #12]	; (800523c <I2C1_IRQHandler+0x2c>)
 800522e:	0018      	movs	r0, r3
 8005230:	f001 fa72 	bl	8006718 <HAL_I2C_EV_IRQHandler>
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	46c0      	nop			; (mov r8, r8)
 800523c:	2000008c 	.word	0x2000008c

08005240 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8005244:	4b03      	ldr	r3, [pc, #12]	; (8005254 <SPI1_IRQHandler+0x14>)
 8005246:	0018      	movs	r0, r3
 8005248:	f002 fc94 	bl	8007b74 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800524c:	46c0      	nop			; (mov r8, r8)
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			; (mov r8, r8)
 8005254:	200000e0 	.word	0x200000e0

08005258 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <SPI2_IRQHandler+0x14>)
 800525e:	0018      	movs	r0, r3
 8005260:	f004 fcf8 	bl	8009c54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	46c0      	nop			; (mov r8, r8)
 800526c:	20000178 	.word	0x20000178

08005270 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <USART2_IRQHandler+0x9c>)
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <USART2_IRQHandler+0x9c>)
 800527a:	2108      	movs	r1, #8
 800527c:	430a      	orrs	r2, r1
 800527e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <USART2_IRQHandler+0x9c>)
 8005282:	6a1a      	ldr	r2, [r3, #32]
 8005284:	4b21      	ldr	r3, [pc, #132]	; (800530c <USART2_IRQHandler+0x9c>)
 8005286:	2102      	movs	r1, #2
 8005288:	430a      	orrs	r2, r1
 800528a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <USART2_IRQHandler+0x9c>)
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	4b1e      	ldr	r3, [pc, #120]	; (800530c <USART2_IRQHandler+0x9c>)
 8005292:	2104      	movs	r1, #4
 8005294:	430a      	orrs	r2, r1
 8005296:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <USART2_IRQHandler+0x9c>)
 800529a:	0018      	movs	r0, r3
 800529c:	f7ff ff71 	bl	8005182 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d009      	beq.n	80052b8 <USART2_IRQHandler+0x48>
 80052a4:	4b19      	ldr	r3, [pc, #100]	; (800530c <USART2_IRQHandler+0x9c>)
 80052a6:	0018      	movs	r0, r3
 80052a8:	f7ff ff7c 	bl	80051a4 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 80052ac:	1e03      	subs	r3, r0, #0
 80052ae:	d003      	beq.n	80052b8 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 80052b0:	f7fb fefa 	bl	80010a8 <USART2_RX_Callback>
	  {
 80052b4:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052b6:	e025      	b.n	8005304 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 80052b8:	4b14      	ldr	r3, [pc, #80]	; (800530c <USART2_IRQHandler+0x9c>)
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	4b13      	ldr	r3, [pc, #76]	; (800530c <USART2_IRQHandler+0x9c>)
 80052be:	2108      	movs	r1, #8
 80052c0:	430a      	orrs	r2, r1
 80052c2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 80052c4:	4b11      	ldr	r3, [pc, #68]	; (800530c <USART2_IRQHandler+0x9c>)
 80052c6:	0018      	movs	r0, r3
 80052c8:	f7ff ff4a 	bl	8005160 <LL_USART_IsActiveFlag_ORE>
 80052cc:	1e03      	subs	r3, r0, #0
 80052ce:	d008      	beq.n	80052e2 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 80052d0:	4b0e      	ldr	r3, [pc, #56]	; (800530c <USART2_IRQHandler+0x9c>)
 80052d2:	6a1a      	ldr	r2, [r3, #32]
 80052d4:	4b0d      	ldr	r3, [pc, #52]	; (800530c <USART2_IRQHandler+0x9c>)
 80052d6:	2108      	movs	r1, #8
 80052d8:	430a      	orrs	r2, r1
 80052da:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 80052dc:	4b0b      	ldr	r3, [pc, #44]	; (800530c <USART2_IRQHandler+0x9c>)
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052e0:	e010      	b.n	8005304 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <USART2_IRQHandler+0x9c>)
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7ff ff19 	bl	800511c <LL_USART_IsActiveFlag_FE>
 80052ea:	1e03      	subs	r3, r0, #0
 80052ec:	d002      	beq.n	80052f4 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 80052ee:	4b07      	ldr	r3, [pc, #28]	; (800530c <USART2_IRQHandler+0x9c>)
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80052f2:	e007      	b.n	8005304 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 80052f4:	4b05      	ldr	r3, [pc, #20]	; (800530c <USART2_IRQHandler+0x9c>)
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7ff ff21 	bl	800513e <LL_USART_IsActiveFlag_NE>
 80052fc:	1e03      	subs	r3, r0, #0
 80052fe:	d001      	beq.n	8005304 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8005300:	4b02      	ldr	r3, [pc, #8]	; (800530c <USART2_IRQHandler+0x9c>)
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8005304:	46c0      	nop			; (mov r8, r8)
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	40004400 	.word	0x40004400

08005310 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <USART3_4_LPUART1_IRQHandler+0x14>)
 8005316:	0018      	movs	r0, r3
 8005318:	f006 f9d6 	bl	800b6c8 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	20000228 	.word	0x20000228

08005328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005334:	480d      	ldr	r0, [pc, #52]	; (800536c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005336:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005338:	f7ff fff6 	bl	8005328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800533c:	480c      	ldr	r0, [pc, #48]	; (8005370 <LoopForever+0x6>)
  ldr r1, =_edata
 800533e:	490d      	ldr	r1, [pc, #52]	; (8005374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005340:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <LoopForever+0xe>)
  movs r3, #0
 8005342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005344:	e002      	b.n	800534c <LoopCopyDataInit>

08005346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800534a:	3304      	adds	r3, #4

0800534c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800534c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800534e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005350:	d3f9      	bcc.n	8005346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005352:	4a0a      	ldr	r2, [pc, #40]	; (800537c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005354:	4c0a      	ldr	r4, [pc, #40]	; (8005380 <LoopForever+0x16>)
  movs r3, #0
 8005356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005358:	e001      	b.n	800535e <LoopFillZerobss>

0800535a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800535a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800535c:	3204      	adds	r2, #4

0800535e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800535e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005360:	d3fb      	bcc.n	800535a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005362:	f007 faf7 	bl	800c954 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005366:	f7fb f929 	bl	80005bc <main>

0800536a <LoopForever>:

LoopForever:
  b LoopForever
 800536a:	e7fe      	b.n	800536a <LoopForever>
  ldr   r0, =_estack
 800536c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005374:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8005378:	080184b4 	.word	0x080184b4
  ldr r2, =_sbss
 800537c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8005380:	20001304 	.word	0x20001304

08005384 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005384:	e7fe      	b.n	8005384 <ADC1_COMP_IRQHandler>
	...

08005388 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800538e:	1dfb      	adds	r3, r7, #7
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_Init+0x3c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b0a      	ldr	r3, [pc, #40]	; (80053c4 <HAL_Init+0x3c>)
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	0049      	lsls	r1, r1, #1
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053a2:	2000      	movs	r0, #0
 80053a4:	f000 f810 	bl	80053c8 <HAL_InitTick>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80053ac:	1dfb      	adds	r3, r7, #7
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e001      	b.n	80053b8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80053b4:	f7ff fbd6 	bl	8004b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053b8:	1dfb      	adds	r3, r7, #7
 80053ba:	781b      	ldrb	r3, [r3, #0]
}
 80053bc:	0018      	movs	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	b002      	add	sp, #8
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40022000 	.word	0x40022000

080053c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053d0:	230f      	movs	r3, #15
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80053d8:	4b1d      	ldr	r3, [pc, #116]	; (8005450 <HAL_InitTick+0x88>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02b      	beq.n	8005438 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80053e0:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <HAL_InitTick+0x8c>)
 80053e2:	681c      	ldr	r4, [r3, #0]
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <HAL_InitTick+0x88>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	0019      	movs	r1, r3
 80053ea:	23fa      	movs	r3, #250	; 0xfa
 80053ec:	0098      	lsls	r0, r3, #2
 80053ee:	f7fa fe89 	bl	8000104 <__udivsi3>
 80053f2:	0003      	movs	r3, r0
 80053f4:	0019      	movs	r1, r3
 80053f6:	0020      	movs	r0, r4
 80053f8:	f7fa fe84 	bl	8000104 <__udivsi3>
 80053fc:	0003      	movs	r3, r0
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 fbb3 	bl	8005b6a <HAL_SYSTICK_Config>
 8005404:	1e03      	subs	r3, r0, #0
 8005406:	d112      	bne.n	800542e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d80a      	bhi.n	8005424 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	2301      	movs	r3, #1
 8005412:	425b      	negs	r3, r3
 8005414:	2200      	movs	r2, #0
 8005416:	0018      	movs	r0, r3
 8005418:	f000 fb82 	bl	8005b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <HAL_InitTick+0x90>)
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e00d      	b.n	8005440 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005424:	230f      	movs	r3, #15
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	2201      	movs	r2, #1
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	e008      	b.n	8005440 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800542e:	230f      	movs	r3, #15
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	2201      	movs	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e003      	b.n	8005440 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005438:	230f      	movs	r3, #15
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005440:	230f      	movs	r3, #15
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	781b      	ldrb	r3, [r3, #0]
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	b005      	add	sp, #20
 800544c:	bd90      	pop	{r4, r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	2000003c 	.word	0x2000003c
 8005454:	20000034 	.word	0x20000034
 8005458:	20000038 	.word	0x20000038

0800545c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005460:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_IncTick+0x1c>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_IncTick+0x20>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	18d2      	adds	r2, r2, r3
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <HAL_IncTick+0x20>)
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	46c0      	nop			; (mov r8, r8)
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	2000003c 	.word	0x2000003c
 800547c:	20001300 	.word	0x20001300

08005480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  return uwTick;
 8005484:	4b02      	ldr	r3, [pc, #8]	; (8005490 <HAL_GetTick+0x10>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	0018      	movs	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	20001300 	.word	0x20001300

08005494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800549c:	f7ff fff0 	bl	8005480 <HAL_GetTick>
 80054a0:	0003      	movs	r3, r0
 80054a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	d005      	beq.n	80054ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <HAL_Delay+0x44>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	001a      	movs	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	189b      	adds	r3, r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	f7ff ffe0 	bl	8005480 <HAL_GetTick>
 80054c0:	0002      	movs	r2, r0
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d8f7      	bhi.n	80054bc <HAL_Delay+0x28>
  {
  }
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b004      	add	sp, #16
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	46c0      	nop			; (mov r8, r8)
 80054d8:	2000003c 	.word	0x2000003c

080054dc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a06      	ldr	r2, [pc, #24]	; (8005504 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	0019      	movs	r1, r3
 80054ee:	4b04      	ldr	r3, [pc, #16]	; (8005500 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b002      	add	sp, #8
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	40010000 	.word	0x40010000
 8005504:	fffff9ff 	.word	0xfffff9ff

08005508 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005510:	4a05      	ldr	r2, [pc, #20]	; (8005528 <LL_EXTI_EnableIT_0_31+0x20>)
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	58d2      	ldr	r2, [r2, r3]
 8005516:	4904      	ldr	r1, [pc, #16]	; (8005528 <LL_EXTI_EnableIT_0_31+0x20>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4313      	orrs	r3, r2
 800551c:	2280      	movs	r2, #128	; 0x80
 800551e:	508b      	str	r3, [r1, r2]
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40021800 	.word	0x40021800

0800552c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8005534:	4a06      	ldr	r2, [pc, #24]	; (8005550 <LL_EXTI_DisableIT_0_31+0x24>)
 8005536:	2380      	movs	r3, #128	; 0x80
 8005538:	58d3      	ldr	r3, [r2, r3]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	43d2      	mvns	r2, r2
 800553e:	4904      	ldr	r1, [pc, #16]	; (8005550 <LL_EXTI_DisableIT_0_31+0x24>)
 8005540:	4013      	ands	r3, r2
 8005542:	2280      	movs	r2, #128	; 0x80
 8005544:	508b      	str	r3, [r1, r2]
}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b002      	add	sp, #8
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	40021800 	.word	0x40021800

08005554 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800555c:	4a05      	ldr	r2, [pc, #20]	; (8005574 <LL_EXTI_EnableEvent_0_31+0x20>)
 800555e:	2384      	movs	r3, #132	; 0x84
 8005560:	58d2      	ldr	r2, [r2, r3]
 8005562:	4904      	ldr	r1, [pc, #16]	; (8005574 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4313      	orrs	r3, r2
 8005568:	2284      	movs	r2, #132	; 0x84
 800556a:	508b      	str	r3, [r1, r2]

}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}
 8005574:	40021800 	.word	0x40021800

08005578 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005580:	4a06      	ldr	r2, [pc, #24]	; (800559c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005582:	2384      	movs	r3, #132	; 0x84
 8005584:	58d3      	ldr	r3, [r2, r3]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	43d2      	mvns	r2, r2
 800558a:	4904      	ldr	r1, [pc, #16]	; (800559c <LL_EXTI_DisableEvent_0_31+0x24>)
 800558c:	4013      	ands	r3, r2
 800558e:	2284      	movs	r2, #132	; 0x84
 8005590:	508b      	str	r3, [r1, r2]
}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	46bd      	mov	sp, r7
 8005596:	b002      	add	sp, #8
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	40021800 	.word	0x40021800

080055a0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80055a8:	4b04      	ldr	r3, [pc, #16]	; (80055bc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80055aa:	6819      	ldr	r1, [r3, #0]
 80055ac:	4b03      	ldr	r3, [pc, #12]	; (80055bc <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]

}
 80055b4:	46c0      	nop			; (mov r8, r8)
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b002      	add	sp, #8
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021800 	.word	0x40021800

080055c0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80055c8:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	43d9      	mvns	r1, r3
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]

}
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	46bd      	mov	sp, r7
 80055da:	b002      	add	sp, #8
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	40021800 	.word	0x40021800

080055e4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80055ee:	6859      	ldr	r1, [r3, #4]
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021800 	.word	0x40021800

08005604 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	43d9      	mvns	r1, r3
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005616:	400a      	ands	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	40021800 	.word	0x40021800

08005628 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]
}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	46bd      	mov	sp, r7
 800563a:	b002      	add	sp, #8
 800563c:	bd80      	pop	{r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	40021800 	.word	0x40021800

08005644 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 800564c:	4b03      	ldr	r3, [pc, #12]	; (800565c <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	60da      	str	r2, [r3, #12]
}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b002      	add	sp, #8
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	40021800 	.word	0x40021800

08005660 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800566c:	211f      	movs	r1, #31
 800566e:	187b      	adds	r3, r7, r1
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif /* COMP3 */

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 800567a:	187b      	adds	r3, r7, r1
 800567c:	2201      	movs	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e13d      	b.n	80058fe <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	0fdb      	lsrs	r3, r3, #31
 800568a:	07da      	lsls	r2, r3, #31
 800568c:	2380      	movs	r3, #128	; 0x80
 800568e:	061b      	lsls	r3, r3, #24
 8005690:	429a      	cmp	r2, r3
 8005692:	d104      	bne.n	800569e <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8005694:	231f      	movs	r3, #31
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	e12f      	b.n	80058fe <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2229      	movs	r2, #41	; 0x29
 80056a2:	5c9b      	ldrb	r3, [r3, r2]
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2228      	movs	r2, #40	; 0x28
 80056ae:	2100      	movs	r1, #0
 80056b0:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	0018      	movs	r0, r3
 80056bc:	f7ff fa7a 	bl	8004bb4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2230      	movs	r2, #48	; 0x30
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a85      	ldr	r2, [pc, #532]	; (800590c <HAL_COMP_Init+0x2ac>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	0019      	movs	r1, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	429a      	cmp	r2, r3
 8005710:	d10d      	bne.n	800572e <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005712:	4b7f      	ldr	r3, [pc, #508]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	4b7e      	ldr	r3, [pc, #504]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005718:	497e      	ldr	r1, [pc, #504]	; (8005914 <HAL_COMP_Init+0x2b4>)
 800571a:	400a      	ands	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800571e:	4b7c      	ldr	r3, [pc, #496]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	4b7b      	ldr	r3, [pc, #492]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005724:	2180      	movs	r1, #128	; 0x80
 8005726:	0109      	lsls	r1, r1, #4
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
 800572c:	e01f      	b.n	800576e <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	23c0      	movs	r3, #192	; 0xc0
 8005734:	015b      	lsls	r3, r3, #5
 8005736:	429a      	cmp	r2, r3
 8005738:	d10d      	bne.n	8005756 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800573a:	4b75      	ldr	r3, [pc, #468]	; (8005910 <HAL_COMP_Init+0x2b0>)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b74      	ldr	r3, [pc, #464]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005740:	2180      	movs	r1, #128	; 0x80
 8005742:	0109      	lsls	r1, r1, #4
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005748:	4b71      	ldr	r3, [pc, #452]	; (8005910 <HAL_COMP_Init+0x2b0>)
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4b70      	ldr	r3, [pc, #448]	; (8005910 <HAL_COMP_Init+0x2b0>)
 800574e:	4971      	ldr	r1, [pc, #452]	; (8005914 <HAL_COMP_Init+0x2b4>)
 8005750:	400a      	ands	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	e00b      	b.n	800576e <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8005756:	4b6e      	ldr	r3, [pc, #440]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	4b6d      	ldr	r3, [pc, #436]	; (8005910 <HAL_COMP_Init+0x2b0>)
 800575c:	496d      	ldr	r1, [pc, #436]	; (8005914 <HAL_COMP_Init+0x2b4>)
 800575e:	400a      	ands	r2, r1
 8005760:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8005762:	4b6b      	ldr	r3, [pc, #428]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	4b6a      	ldr	r3, [pc, #424]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005768:	496a      	ldr	r1, [pc, #424]	; (8005914 <HAL_COMP_Init+0x2b4>)
 800576a:	400a      	ands	r2, r1
 800576c:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	22a0      	movs	r2, #160	; 0xa0
 8005774:	01d2      	lsls	r2, r2, #7
 8005776:	4293      	cmp	r3, r2
 8005778:	d017      	beq.n	80057aa <HAL_COMP_Init+0x14a>
 800577a:	22a0      	movs	r2, #160	; 0xa0
 800577c:	01d2      	lsls	r2, r2, #7
 800577e:	4293      	cmp	r3, r2
 8005780:	d830      	bhi.n	80057e4 <HAL_COMP_Init+0x184>
 8005782:	2b01      	cmp	r3, #1
 8005784:	d01f      	beq.n	80057c6 <HAL_COMP_Init+0x166>
 8005786:	2280      	movs	r2, #128	; 0x80
 8005788:	01d2      	lsls	r2, r2, #7
 800578a:	4293      	cmp	r3, r2
 800578c:	d12a      	bne.n	80057e4 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800578e:	4b60      	ldr	r3, [pc, #384]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b5f      	ldr	r3, [pc, #380]	; (8005910 <HAL_COMP_Init+0x2b0>)
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	01c9      	lsls	r1, r1, #7
 8005798:	430a      	orrs	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800579c:	4b5c      	ldr	r3, [pc, #368]	; (8005910 <HAL_COMP_Init+0x2b0>)
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b5b      	ldr	r3, [pc, #364]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057a2:	495d      	ldr	r1, [pc, #372]	; (8005918 <HAL_COMP_Init+0x2b8>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
        break;
 80057a8:	e029      	b.n	80057fe <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057aa:	4b59      	ldr	r3, [pc, #356]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b58      	ldr	r3, [pc, #352]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057b0:	4959      	ldr	r1, [pc, #356]	; (8005918 <HAL_COMP_Init+0x2b8>)
 80057b2:	400a      	ands	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057b6:	4b56      	ldr	r3, [pc, #344]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	4b55      	ldr	r3, [pc, #340]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057bc:	2180      	movs	r1, #128	; 0x80
 80057be:	01c9      	lsls	r1, r1, #7
 80057c0:	430a      	orrs	r2, r1
 80057c2:	605a      	str	r2, [r3, #4]
        break;
 80057c4:	e01b      	b.n	80057fe <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057c6:	4b52      	ldr	r3, [pc, #328]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b51      	ldr	r3, [pc, #324]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	01c9      	lsls	r1, r1, #7
 80057d0:	430a      	orrs	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057d4:	4b4e      	ldr	r3, [pc, #312]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b4d      	ldr	r3, [pc, #308]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057da:	2180      	movs	r1, #128	; 0x80
 80057dc:	01c9      	lsls	r1, r1, #7
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
        break;
 80057e2:	e00c      	b.n	80057fe <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80057e4:	4b4a      	ldr	r3, [pc, #296]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	4b49      	ldr	r3, [pc, #292]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057ea:	494b      	ldr	r1, [pc, #300]	; (8005918 <HAL_COMP_Init+0x2b8>)
 80057ec:	400a      	ands	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80057f0:	4b47      	ldr	r3, [pc, #284]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	4b46      	ldr	r3, [pc, #280]	; (8005910 <HAL_COMP_Init+0x2b0>)
 80057f6:	4948      	ldr	r1, [pc, #288]	; (8005918 <HAL_COMP_Init+0x2b8>)
 80057f8:	400a      	ands	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
        break;
 80057fc:	46c0      	nop			; (mov r8, r8)
    }
#endif /* COMP3 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2230      	movs	r2, #48	; 0x30
 8005806:	4013      	ands	r3, r2
 8005808:	d016      	beq.n	8005838 <HAL_COMP_Init+0x1d8>
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d113      	bne.n	8005838 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005810:	4b42      	ldr	r3, [pc, #264]	; (800591c <HAL_COMP_Init+0x2bc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4942      	ldr	r1, [pc, #264]	; (8005920 <HAL_COMP_Init+0x2c0>)
 8005816:	0018      	movs	r0, r3
 8005818:	f7fa fc74 	bl	8000104 <__udivsi3>
 800581c:	0003      	movs	r3, r0
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	0013      	movs	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	189b      	adds	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800582a:	e002      	b.n	8005832 <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3b01      	subs	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1f9      	bne.n	800582c <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a34      	ldr	r2, [pc, #208]	; (8005910 <HAL_COMP_Init+0x2b0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d102      	bne.n	8005848 <HAL_COMP_Init+0x1e8>
 8005842:	2380      	movs	r3, #128	; 0x80
 8005844:	029b      	lsls	r3, r3, #10
 8005846:	e001      	b.n	800584c <HAL_COMP_Init+0x1ec>
 8005848:	2380      	movs	r3, #128	; 0x80
 800584a:	02db      	lsls	r3, r3, #11
 800584c:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2203      	movs	r2, #3
 8005854:	4013      	ands	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585c:	2210      	movs	r2, #16
 800585e:	4013      	ands	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	0018      	movs	r0, r3
 8005866:	f7ff fe9b 	bl	80055a0 <LL_EXTI_EnableRisingTrig_0_31>
 800586a:	e003      	b.n	8005874 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	0018      	movs	r0, r3
 8005870:	f7ff fea6 	bl	80055c0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	2220      	movs	r2, #32
 800587a:	4013      	ands	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	0018      	movs	r0, r3
 8005882:	f7ff feaf 	bl	80055e4 <LL_EXTI_EnableFallingTrig_0_31>
 8005886:	e003      	b.n	8005890 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	0018      	movs	r0, r3
 800588c:	f7ff feba 	bl	8005604 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	0018      	movs	r0, r3
 8005894:	f7ff fed6 	bl	8005644 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	0018      	movs	r0, r3
 800589c:	f7ff fec4 	bl	8005628 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2202      	movs	r2, #2
 80058a6:	4013      	ands	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fe51 	bl	8005554 <LL_EXTI_EnableEvent_0_31>
 80058b2:	e003      	b.n	80058bc <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f7ff fe5e 	bl	8005578 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2201      	movs	r2, #1
 80058c2:	4013      	ands	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fe1d 	bl	8005508 <LL_EXTI_EnableIT_0_31>
 80058ce:	e00c      	b.n	80058ea <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f7ff fe2a 	bl	800552c <LL_EXTI_DisableIT_0_31>
 80058d8:	e007      	b.n	80058ea <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	0018      	movs	r0, r3
 80058de:	f7ff fe4b 	bl	8005578 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7ff fe21 	bl	800552c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2229      	movs	r2, #41	; 0x29
 80058ee:	5c9b      	ldrb	r3, [r3, r2]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d103      	bne.n	80058fe <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2229      	movs	r2, #41	; 0x29
 80058fa:	2101      	movs	r1, #1
 80058fc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80058fe:	231f      	movs	r3, #31
 8005900:	18fb      	adds	r3, r7, r3
 8005902:	781b      	ldrb	r3, [r3, #0]
}
 8005904:	0018      	movs	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	b008      	add	sp, #32
 800590a:	bd80      	pop	{r7, pc}
 800590c:	fe00740f 	.word	0xfe00740f
 8005910:	40010200 	.word	0x40010200
 8005914:	fffff7ff 	.word	0xfffff7ff
 8005918:	ffffbfff 	.word	0xffffbfff
 800591c:	20000034 	.word	0x20000034
 8005920:	00030d40 	.word	0x00030d40

08005924 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800592c:	2300      	movs	r3, #0
 800592e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	210f      	movs	r1, #15
 8005932:	187b      	adds	r3, r7, r1
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800593e:	187b      	adds	r3, r7, r1
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e035      	b.n	80059b2 <HAL_COMP_Start+0x8e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	0fdb      	lsrs	r3, r3, #31
 800594e:	07da      	lsls	r2, r3, #31
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	429a      	cmp	r2, r3
 8005956:	d104      	bne.n	8005962 <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8005958:	230f      	movs	r3, #15
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e027      	b.n	80059b2 <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2229      	movs	r2, #41	; 0x29
 8005966:	5c9b      	ldrb	r3, [r3, r2]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d11d      	bne.n	80059aa <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	430a      	orrs	r2, r1
 800597c:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2229      	movs	r2, #41	; 0x29
 8005982:	2102      	movs	r1, #2
 8005984:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <HAL_COMP_Start+0x9c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	490e      	ldr	r1, [pc, #56]	; (80059c4 <HAL_COMP_Start+0xa0>)
 800598c:	0018      	movs	r0, r3
 800598e:	f7fa fbb9 	bl	8000104 <__udivsi3>
 8005992:	0003      	movs	r3, r0
 8005994:	3301      	adds	r3, #1
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800599a:	e002      	b.n	80059a2 <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3b01      	subs	r3, #1
 80059a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f9      	bne.n	800599c <HAL_COMP_Start+0x78>
 80059a8:	e003      	b.n	80059b2 <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80059aa:	230f      	movs	r3, #15
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	2201      	movs	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80059b2:	230f      	movs	r3, #15
 80059b4:	18fb      	adds	r3, r7, r3
 80059b6:	781b      	ldrb	r3, [r3, #0]
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000034 	.word	0x20000034
 80059c4:	00030d40 	.word	0x00030d40

080059c8 <__NVIC_EnableIRQ>:
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	0002      	movs	r2, r0
 80059d0:	1dfb      	adds	r3, r7, #7
 80059d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80059d4:	1dfb      	adds	r3, r7, #7
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b7f      	cmp	r3, #127	; 0x7f
 80059da:	d809      	bhi.n	80059f0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059dc:	1dfb      	adds	r3, r7, #7
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	001a      	movs	r2, r3
 80059e2:	231f      	movs	r3, #31
 80059e4:	401a      	ands	r2, r3
 80059e6:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <__NVIC_EnableIRQ+0x30>)
 80059e8:	2101      	movs	r1, #1
 80059ea:	4091      	lsls	r1, r2
 80059ec:	000a      	movs	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b002      	add	sp, #8
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000e100 	.word	0xe000e100

080059fc <__NVIC_SetPriority>:
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	0002      	movs	r2, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	1dfb      	adds	r3, r7, #7
 8005a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a0a:	1dfb      	adds	r3, r7, #7
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a10:	d828      	bhi.n	8005a64 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a12:	4a2f      	ldr	r2, [pc, #188]	; (8005ad0 <__NVIC_SetPriority+0xd4>)
 8005a14:	1dfb      	adds	r3, r7, #7
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	33c0      	adds	r3, #192	; 0xc0
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	589b      	ldr	r3, [r3, r2]
 8005a22:	1dfa      	adds	r2, r7, #7
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	0011      	movs	r1, r2
 8005a28:	2203      	movs	r2, #3
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	00d2      	lsls	r2, r2, #3
 8005a2e:	21ff      	movs	r1, #255	; 0xff
 8005a30:	4091      	lsls	r1, r2
 8005a32:	000a      	movs	r2, r1
 8005a34:	43d2      	mvns	r2, r2
 8005a36:	401a      	ands	r2, r3
 8005a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	019b      	lsls	r3, r3, #6
 8005a3e:	22ff      	movs	r2, #255	; 0xff
 8005a40:	401a      	ands	r2, r3
 8005a42:	1dfb      	adds	r3, r7, #7
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	0018      	movs	r0, r3
 8005a48:	2303      	movs	r3, #3
 8005a4a:	4003      	ands	r3, r0
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a50:	481f      	ldr	r0, [pc, #124]	; (8005ad0 <__NVIC_SetPriority+0xd4>)
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	b25b      	sxtb	r3, r3
 8005a58:	089b      	lsrs	r3, r3, #2
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	33c0      	adds	r3, #192	; 0xc0
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	501a      	str	r2, [r3, r0]
}
 8005a62:	e031      	b.n	8005ac8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a64:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <__NVIC_SetPriority+0xd8>)
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	0019      	movs	r1, r3
 8005a6c:	230f      	movs	r3, #15
 8005a6e:	400b      	ands	r3, r1
 8005a70:	3b08      	subs	r3, #8
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	3306      	adds	r3, #6
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	1dfa      	adds	r2, r7, #7
 8005a80:	7812      	ldrb	r2, [r2, #0]
 8005a82:	0011      	movs	r1, r2
 8005a84:	2203      	movs	r2, #3
 8005a86:	400a      	ands	r2, r1
 8005a88:	00d2      	lsls	r2, r2, #3
 8005a8a:	21ff      	movs	r1, #255	; 0xff
 8005a8c:	4091      	lsls	r1, r2
 8005a8e:	000a      	movs	r2, r1
 8005a90:	43d2      	mvns	r2, r2
 8005a92:	401a      	ands	r2, r3
 8005a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	019b      	lsls	r3, r3, #6
 8005a9a:	22ff      	movs	r2, #255	; 0xff
 8005a9c:	401a      	ands	r2, r3
 8005a9e:	1dfb      	adds	r3, r7, #7
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	4003      	ands	r3, r0
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005aac:	4809      	ldr	r0, [pc, #36]	; (8005ad4 <__NVIC_SetPriority+0xd8>)
 8005aae:	1dfb      	adds	r3, r7, #7
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	001c      	movs	r4, r3
 8005ab4:	230f      	movs	r3, #15
 8005ab6:	4023      	ands	r3, r4
 8005ab8:	3b08      	subs	r3, #8
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	430a      	orrs	r2, r1
 8005abe:	3306      	adds	r3, #6
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	18c3      	adds	r3, r0, r3
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	601a      	str	r2, [r3, #0]
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b003      	add	sp, #12
 8005ace:	bd90      	pop	{r4, r7, pc}
 8005ad0:	e000e100 	.word	0xe000e100
 8005ad4:	e000ed00 	.word	0xe000ed00

08005ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	1e5a      	subs	r2, r3, #1
 8005ae4:	2380      	movs	r3, #128	; 0x80
 8005ae6:	045b      	lsls	r3, r3, #17
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d301      	bcc.n	8005af0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005aec:	2301      	movs	r3, #1
 8005aee:	e010      	b.n	8005b12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <SysTick_Config+0x44>)
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	3a01      	subs	r2, #1
 8005af6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005af8:	2301      	movs	r3, #1
 8005afa:	425b      	negs	r3, r3
 8005afc:	2103      	movs	r1, #3
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7ff ff7c 	bl	80059fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b04:	4b05      	ldr	r3, [pc, #20]	; (8005b1c <SysTick_Config+0x44>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b0a:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <SysTick_Config+0x44>)
 8005b0c:	2207      	movs	r2, #7
 8005b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	0018      	movs	r0, r3
 8005b14:	46bd      	mov	sp, r7
 8005b16:	b002      	add	sp, #8
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	46c0      	nop			; (mov r8, r8)
 8005b1c:	e000e010 	.word	0xe000e010

08005b20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	210f      	movs	r1, #15
 8005b2c:	187b      	adds	r3, r7, r1
 8005b2e:	1c02      	adds	r2, r0, #0
 8005b30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7ff ff5d 	bl	80059fc <__NVIC_SetPriority>
}
 8005b42:	46c0      	nop			; (mov r8, r8)
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	0002      	movs	r2, r0
 8005b52:	1dfb      	adds	r3, r7, #7
 8005b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b56:	1dfb      	adds	r3, r7, #7
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	b25b      	sxtb	r3, r3
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f7ff ff33 	bl	80059c8 <__NVIC_EnableIRQ>
}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b002      	add	sp, #8
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7ff ffaf 	bl	8005ad8 <SysTick_Config>
 8005b7a:	0003      	movs	r3, r0
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e077      	b.n	8005c86 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3d      	ldr	r2, [pc, #244]	; (8005c90 <HAL_DMA_Init+0x10c>)
 8005b9c:	4694      	mov	ip, r2
 8005b9e:	4463      	add	r3, ip
 8005ba0:	2114      	movs	r1, #20
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f7fa faae 	bl	8000104 <__udivsi3>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	009a      	lsls	r2, r3, #2
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2225      	movs	r2, #37	; 0x25
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4934      	ldr	r1, [pc, #208]	; (8005c94 <HAL_DMA_Init+0x110>)
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6819      	ldr	r1, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	431a      	orrs	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 fa37 	bl	8006074 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d102      	bne.n	8005c18 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c20:	213f      	movs	r1, #63	; 0x3f
 8005c22:	400a      	ands	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005c2e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d011      	beq.n	8005c5c <HAL_DMA_Init+0xd8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d80d      	bhi.n	8005c5c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fa42 	bl	80060cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	e008      	b.n	8005c6e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2225      	movs	r2, #37	; 0x25
 8005c78:	2101      	movs	r1, #1
 8005c7a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2224      	movs	r2, #36	; 0x24
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	0018      	movs	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b002      	add	sp, #8
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	bffdfff8 	.word	0xbffdfff8
 8005c94:	ffff800f 	.word	0xffff800f

08005c98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
 8005ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca6:	2317      	movs	r3, #23
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2224      	movs	r2, #36	; 0x24
 8005cb2:	5c9b      	ldrb	r3, [r3, r2]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_DMA_Start_IT+0x24>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e06f      	b.n	8005d9c <HAL_DMA_Start_IT+0x104>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2224      	movs	r2, #36	; 0x24
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2225      	movs	r2, #37	; 0x25
 8005cc8:	5c9b      	ldrb	r3, [r3, r2]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d157      	bne.n	8005d80 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2225      	movs	r2, #37	; 0x25
 8005cd4:	2102      	movs	r1, #2
 8005cd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2101      	movs	r1, #1
 8005cea:	438a      	bics	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f97d 	bl	8005ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	210e      	movs	r1, #14
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e00f      	b.n	8005d34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2104      	movs	r1, #4
 8005d20:	438a      	bics	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	210a      	movs	r1, #10
 8005d30:	430a      	orrs	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	025b      	lsls	r3, r3, #9
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d008      	beq.n	8005d54 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	0049      	lsls	r1, r1, #1
 8005d50:	430a      	orrs	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d66:	2180      	movs	r1, #128	; 0x80
 8005d68:	0049      	lsls	r1, r1, #1
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2101      	movs	r1, #1
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e00a      	b.n	8005d96 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2280      	movs	r2, #128	; 0x80
 8005d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2224      	movs	r2, #36	; 0x24
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8005d8e:	2317      	movs	r3, #23
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005d96:	2317      	movs	r3, #23
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	781b      	ldrb	r3, [r3, #0]
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b006      	add	sp, #24
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dac:	210f      	movs	r1, #15
 8005dae:	187b      	adds	r3, r7, r1
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2225      	movs	r2, #37	; 0x25
 8005db8:	5c9b      	ldrb	r3, [r3, r2]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d006      	beq.n	8005dce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2204      	movs	r2, #4
 8005dc4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005dc6:	187b      	adds	r3, r7, r1
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e049      	b.n	8005e62 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	210e      	movs	r1, #14
 8005dda:	438a      	bics	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2101      	movs	r1, #1
 8005dea:	438a      	bics	r2, r1
 8005dec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	491d      	ldr	r1, [pc, #116]	; (8005e70 <HAL_DMA_Abort_IT+0xcc>)
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005dfe:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <HAL_DMA_Abort_IT+0xd0>)
 8005e00:	6859      	ldr	r1, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	221c      	movs	r2, #28
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	409a      	lsls	r2, r3
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <HAL_DMA_Abort_IT+0xd0>)
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	490f      	ldr	r1, [pc, #60]	; (8005e70 <HAL_DMA_Abort_IT+0xcc>)
 8005e32:	400a      	ands	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005e3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2225      	movs	r2, #37	; 0x25
 8005e44:	2101      	movs	r1, #1
 8005e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2224      	movs	r2, #36	; 0x24
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	0010      	movs	r0, r2
 8005e60:	4798      	blx	r3
    }
  }
  return status;
 8005e62:	230f      	movs	r3, #15
 8005e64:	18fb      	adds	r3, r7, r3
 8005e66:	781b      	ldrb	r3, [r3, #0]
}
 8005e68:	0018      	movs	r0, r3
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	b004      	add	sp, #16
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	fffffeff 	.word	0xfffffeff
 8005e74:	40020000 	.word	0x40020000

08005e78 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8005e80:	4b55      	ldr	r3, [pc, #340]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	221c      	movs	r2, #28
 8005e94:	4013      	ands	r3, r2
 8005e96:	2204      	movs	r2, #4
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	0013      	movs	r3, r2
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d027      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0x7a>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d023      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d107      	bne.n	8005ec6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2104      	movs	r1, #4
 8005ec2:	438a      	bics	r2, r1
 8005ec4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8005ec6:	4b44      	ldr	r3, [pc, #272]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	221c      	movs	r2, #28
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	4b40      	ldr	r3, [pc, #256]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d100      	bne.n	8005ee6 <HAL_DMA_IRQHandler+0x6e>
 8005ee4:	e073      	b.n	8005fce <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	0010      	movs	r0, r2
 8005eee:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005ef0:	e06d      	b.n	8005fce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	221c      	movs	r2, #28
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2202      	movs	r2, #2
 8005efc:	409a      	lsls	r2, r3
 8005efe:	0013      	movs	r3, r2
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4013      	ands	r3, r2
 8005f04:	d02e      	beq.n	8005f64 <HAL_DMA_IRQHandler+0xec>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	d02a      	beq.n	8005f64 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2220      	movs	r2, #32
 8005f16:	4013      	ands	r3, r2
 8005f18:	d10b      	bne.n	8005f32 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	210a      	movs	r1, #10
 8005f26:	438a      	bics	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2225      	movs	r2, #37	; 0x25
 8005f2e:	2101      	movs	r1, #1
 8005f30:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005f32:	4b29      	ldr	r3, [pc, #164]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	221c      	movs	r2, #28
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2202      	movs	r2, #2
 8005f40:	409a      	lsls	r2, r3
 8005f42:	4b25      	ldr	r3, [pc, #148]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2224      	movs	r2, #36	; 0x24
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d03a      	beq.n	8005fce <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	0010      	movs	r0, r2
 8005f60:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005f62:	e034      	b.n	8005fce <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f68:	221c      	movs	r2, #28
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	0013      	movs	r3, r2
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4013      	ands	r3, r2
 8005f76:	d02b      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x158>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2208      	movs	r2, #8
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	d027      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	210e      	movs	r1, #14
 8005f8c:	438a      	bics	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005f90:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005f92:	6859      	ldr	r1, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	221c      	movs	r2, #28
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_DMA_IRQHandler+0x160>)
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2225      	movs	r2, #37	; 0x25
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2224      	movs	r2, #36	; 0x24
 8005fb8:	2100      	movs	r1, #0
 8005fba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	0010      	movs	r0, r2
 8005fcc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	46c0      	nop			; (mov r8, r8)
}
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b004      	add	sp, #16
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40020000 	.word	0x40020000

08005fdc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2225      	movs	r2, #37	; 0x25
 8005fe8:	5c9b      	ldrb	r3, [r3, r2]
 8005fea:	b2db      	uxtb	r3, r3
}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800600a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800601c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <DMA_SetConfig+0x7c>)
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	221c      	movs	r2, #28
 8006028:	4013      	ands	r3, r2
 800602a:	2201      	movs	r2, #1
 800602c:	409a      	lsls	r2, r3
 800602e:	4b10      	ldr	r3, [pc, #64]	; (8006070 <DMA_SetConfig+0x7c>)
 8006030:	430a      	orrs	r2, r1
 8006032:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b10      	cmp	r3, #16
 8006042:	d108      	bne.n	8006056 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006054:	e007      	b.n	8006066 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	b004      	add	sp, #16
 800606c:	bd80      	pop	{r7, pc}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	40020000 	.word	0x40020000

08006074 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	089b      	lsrs	r3, r3, #2
 8006082:	4a10      	ldr	r2, [pc, #64]	; (80060c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8006084:	4694      	mov	ip, r2
 8006086:	4463      	add	r3, ip
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	001a      	movs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	001a      	movs	r2, r3
 8006096:	23ff      	movs	r3, #255	; 0xff
 8006098:	4013      	ands	r3, r2
 800609a:	3b08      	subs	r3, #8
 800609c:	2114      	movs	r1, #20
 800609e:	0018      	movs	r0, r3
 80060a0:	f7fa f830 	bl	8000104 <__udivsi3>
 80060a4:	0003      	movs	r3, r0
 80060a6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a07      	ldr	r2, [pc, #28]	; (80060c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80060ac:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	221f      	movs	r2, #31
 80060b2:	4013      	ands	r3, r2
 80060b4:	2201      	movs	r2, #1
 80060b6:	409a      	lsls	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80060bc:	46c0      	nop			; (mov r8, r8)
 80060be:	46bd      	mov	sp, r7
 80060c0:	b004      	add	sp, #16
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	10008200 	.word	0x10008200
 80060c8:	40020880 	.word	0x40020880

080060cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	223f      	movs	r2, #63	; 0x3f
 80060da:	4013      	ands	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a0a      	ldr	r2, [pc, #40]	; (800610c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80060e2:	4694      	mov	ip, r2
 80060e4:	4463      	add	r3, ip
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	001a      	movs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a07      	ldr	r2, [pc, #28]	; (8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	2203      	movs	r2, #3
 80060fa:	4013      	ands	r3, r2
 80060fc:	2201      	movs	r2, #1
 80060fe:	409a      	lsls	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b004      	add	sp, #16
 800610a:	bd80      	pop	{r7, pc}
 800610c:	1000823f 	.word	0x1000823f
 8006110:	40020940 	.word	0x40020940

08006114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006122:	e147      	b.n	80063b4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2101      	movs	r1, #1
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4091      	lsls	r1, r2
 800612e:	000a      	movs	r2, r1
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d100      	bne.n	800613c <HAL_GPIO_Init+0x28>
 800613a:	e138      	b.n	80063ae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2203      	movs	r2, #3
 8006142:	4013      	ands	r3, r2
 8006144:	2b01      	cmp	r3, #1
 8006146:	d005      	beq.n	8006154 <HAL_GPIO_Init+0x40>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	2203      	movs	r2, #3
 800614e:	4013      	ands	r3, r2
 8006150:	2b02      	cmp	r3, #2
 8006152:	d130      	bne.n	80061b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	2203      	movs	r2, #3
 8006160:	409a      	lsls	r2, r3
 8006162:	0013      	movs	r3, r2
 8006164:	43da      	mvns	r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4013      	ands	r3, r2
 800616a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	409a      	lsls	r2, r3
 8006176:	0013      	movs	r3, r2
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4313      	orrs	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800618a:	2201      	movs	r2, #1
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	409a      	lsls	r2, r3
 8006190:	0013      	movs	r3, r2
 8006192:	43da      	mvns	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4013      	ands	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	2201      	movs	r2, #1
 80061a2:	401a      	ands	r2, r3
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	409a      	lsls	r2, r3
 80061a8:	0013      	movs	r3, r2
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2203      	movs	r2, #3
 80061bc:	4013      	ands	r3, r2
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d017      	beq.n	80061f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	2203      	movs	r2, #3
 80061ce:	409a      	lsls	r2, r3
 80061d0:	0013      	movs	r3, r2
 80061d2:	43da      	mvns	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	4013      	ands	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	409a      	lsls	r2, r3
 80061e4:	0013      	movs	r3, r2
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2203      	movs	r2, #3
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d123      	bne.n	8006246 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	08da      	lsrs	r2, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	3208      	adds	r2, #8
 8006206:	0092      	lsls	r2, r2, #2
 8006208:	58d3      	ldr	r3, [r2, r3]
 800620a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2207      	movs	r2, #7
 8006210:	4013      	ands	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	220f      	movs	r2, #15
 8006216:	409a      	lsls	r2, r3
 8006218:	0013      	movs	r3, r2
 800621a:	43da      	mvns	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4013      	ands	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	691a      	ldr	r2, [r3, #16]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2107      	movs	r1, #7
 800622a:	400b      	ands	r3, r1
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	409a      	lsls	r2, r3
 8006230:	0013      	movs	r3, r2
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	08da      	lsrs	r2, r3, #3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3208      	adds	r2, #8
 8006240:	0092      	lsls	r2, r2, #2
 8006242:	6939      	ldr	r1, [r7, #16]
 8006244:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	2203      	movs	r2, #3
 8006252:	409a      	lsls	r2, r3
 8006254:	0013      	movs	r3, r2
 8006256:	43da      	mvns	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	4013      	ands	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2203      	movs	r2, #3
 8006264:	401a      	ands	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	409a      	lsls	r2, r3
 800626c:	0013      	movs	r3, r2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	23c0      	movs	r3, #192	; 0xc0
 8006280:	029b      	lsls	r3, r3, #10
 8006282:	4013      	ands	r3, r2
 8006284:	d100      	bne.n	8006288 <HAL_GPIO_Init+0x174>
 8006286:	e092      	b.n	80063ae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006288:	4a50      	ldr	r2, [pc, #320]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	089b      	lsrs	r3, r3, #2
 800628e:	3318      	adds	r3, #24
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	589b      	ldr	r3, [r3, r2]
 8006294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2203      	movs	r2, #3
 800629a:	4013      	ands	r3, r2
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	220f      	movs	r2, #15
 80062a0:	409a      	lsls	r2, r3
 80062a2:	0013      	movs	r3, r2
 80062a4:	43da      	mvns	r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4013      	ands	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	23a0      	movs	r3, #160	; 0xa0
 80062b0:	05db      	lsls	r3, r3, #23
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d013      	beq.n	80062de <HAL_GPIO_Init+0x1ca>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a45      	ldr	r2, [pc, #276]	; (80063d0 <HAL_GPIO_Init+0x2bc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00d      	beq.n	80062da <HAL_GPIO_Init+0x1c6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a44      	ldr	r2, [pc, #272]	; (80063d4 <HAL_GPIO_Init+0x2c0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d007      	beq.n	80062d6 <HAL_GPIO_Init+0x1c2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a43      	ldr	r2, [pc, #268]	; (80063d8 <HAL_GPIO_Init+0x2c4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <HAL_GPIO_Init+0x1be>
 80062ce:	2303      	movs	r3, #3
 80062d0:	e006      	b.n	80062e0 <HAL_GPIO_Init+0x1cc>
 80062d2:	2305      	movs	r3, #5
 80062d4:	e004      	b.n	80062e0 <HAL_GPIO_Init+0x1cc>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e002      	b.n	80062e0 <HAL_GPIO_Init+0x1cc>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_GPIO_Init+0x1cc>
 80062de:	2300      	movs	r3, #0
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	2103      	movs	r1, #3
 80062e4:	400a      	ands	r2, r1
 80062e6:	00d2      	lsls	r2, r2, #3
 80062e8:	4093      	lsls	r3, r2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80062f0:	4936      	ldr	r1, [pc, #216]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	3318      	adds	r3, #24
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062fe:	4b33      	ldr	r3, [pc, #204]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	43da      	mvns	r2, r3
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	4013      	ands	r3, r2
 800630c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	2380      	movs	r3, #128	; 0x80
 8006314:	035b      	lsls	r3, r3, #13
 8006316:	4013      	ands	r3, r2
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006322:	4b2a      	ldr	r3, [pc, #168]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006328:	4b28      	ldr	r3, [pc, #160]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	43da      	mvns	r2, r3
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4013      	ands	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	039b      	lsls	r3, r3, #14
 8006340:	4013      	ands	r3, r2
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800634c:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006352:	4a1e      	ldr	r2, [pc, #120]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 8006354:	2384      	movs	r3, #132	; 0x84
 8006356:	58d3      	ldr	r3, [r2, r3]
 8006358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	43da      	mvns	r2, r3
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4013      	ands	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	029b      	lsls	r3, r3, #10
 800636c:	4013      	ands	r3, r2
 800636e:	d003      	beq.n	8006378 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006378:	4914      	ldr	r1, [pc, #80]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 800637a:	2284      	movs	r2, #132	; 0x84
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006380:	4a12      	ldr	r2, [pc, #72]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	58d3      	ldr	r3, [r2, r3]
 8006386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	43da      	mvns	r2, r3
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4013      	ands	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	2380      	movs	r3, #128	; 0x80
 8006398:	025b      	lsls	r3, r3, #9
 800639a:	4013      	ands	r3, r2
 800639c:	d003      	beq.n	80063a6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063a6:	4909      	ldr	r1, [pc, #36]	; (80063cc <HAL_GPIO_Init+0x2b8>)
 80063a8:	2280      	movs	r2, #128	; 0x80
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	3301      	adds	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	40da      	lsrs	r2, r3
 80063bc:	1e13      	subs	r3, r2, #0
 80063be:	d000      	beq.n	80063c2 <HAL_GPIO_Init+0x2ae>
 80063c0:	e6b0      	b.n	8006124 <HAL_GPIO_Init+0x10>
  }
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b006      	add	sp, #24
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40021800 	.word	0x40021800
 80063d0:	50000400 	.word	0x50000400
 80063d4:	50000800 	.word	0x50000800
 80063d8:	50000c00 	.word	0x50000c00

080063dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e082      	b.n	80064f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2241      	movs	r2, #65	; 0x41
 80063f2:	5c9b      	ldrb	r3, [r3, r2]
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2240      	movs	r2, #64	; 0x40
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0018      	movs	r0, r3
 8006406:	f7fe fc0b 	bl	8004c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2241      	movs	r2, #65	; 0x41
 800640e:	2124      	movs	r1, #36	; 0x24
 8006410:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2101      	movs	r1, #1
 800641e:	438a      	bics	r2, r1
 8006420:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4934      	ldr	r1, [pc, #208]	; (80064fc <HAL_I2C_Init+0x120>)
 800642c:	400a      	ands	r2, r1
 800642e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4931      	ldr	r1, [pc, #196]	; (8006500 <HAL_I2C_Init+0x124>)
 800643c:	400a      	ands	r2, r1
 800643e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b01      	cmp	r3, #1
 8006446:	d108      	bne.n	800645a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	0209      	lsls	r1, r1, #8
 8006454:	430a      	orrs	r2, r1
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	e007      	b.n	800646a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2184      	movs	r1, #132	; 0x84
 8006464:	0209      	lsls	r1, r1, #8
 8006466:	430a      	orrs	r2, r1
 8006468:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d104      	bne.n	800647c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2280      	movs	r2, #128	; 0x80
 8006478:	0112      	lsls	r2, r2, #4
 800647a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	491f      	ldr	r1, [pc, #124]	; (8006504 <HAL_I2C_Init+0x128>)
 8006488:	430a      	orrs	r2, r1
 800648a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	491a      	ldr	r1, [pc, #104]	; (8006500 <HAL_I2C_Init+0x124>)
 8006498:	400a      	ands	r2, r1
 800649a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69d9      	ldr	r1, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2101      	movs	r1, #1
 80064d2:	430a      	orrs	r2, r1
 80064d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2241      	movs	r2, #65	; 0x41
 80064e0:	2120      	movs	r1, #32
 80064e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2242      	movs	r2, #66	; 0x42
 80064ee:	2100      	movs	r1, #0
 80064f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	0018      	movs	r0, r3
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	f0ffffff 	.word	0xf0ffffff
 8006500:	ffff7fff 	.word	0xffff7fff
 8006504:	02008000 	.word	0x02008000

08006508 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b089      	sub	sp, #36	; 0x24
 800650c:	af02      	add	r7, sp, #8
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	0008      	movs	r0, r1
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	0019      	movs	r1, r3
 8006516:	230a      	movs	r3, #10
 8006518:	18fb      	adds	r3, r7, r3
 800651a:	1c02      	adds	r2, r0, #0
 800651c:	801a      	strh	r2, [r3, #0]
 800651e:	2308      	movs	r3, #8
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	1c0a      	adds	r2, r1, #0
 8006524:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2241      	movs	r2, #65	; 0x41
 800652a:	5c9b      	ldrb	r3, [r3, r2]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b20      	cmp	r3, #32
 8006530:	d000      	beq.n	8006534 <HAL_I2C_Master_Transmit+0x2c>
 8006532:	e0e7      	b.n	8006704 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	5c9b      	ldrb	r3, [r3, r2]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_I2C_Master_Transmit+0x3a>
 800653e:	2302      	movs	r3, #2
 8006540:	e0e1      	b.n	8006706 <HAL_I2C_Master_Transmit+0x1fe>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2240      	movs	r2, #64	; 0x40
 8006546:	2101      	movs	r1, #1
 8006548:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800654a:	f7fe ff99 	bl	8005480 <HAL_GetTick>
 800654e:	0003      	movs	r3, r0
 8006550:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	0219      	lsls	r1, r3, #8
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	2319      	movs	r3, #25
 800655e:	2201      	movs	r2, #1
 8006560:	f000 fe76 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006564:	1e03      	subs	r3, r0, #0
 8006566:	d001      	beq.n	800656c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0cc      	b.n	8006706 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2241      	movs	r2, #65	; 0x41
 8006570:	2121      	movs	r1, #33	; 0x21
 8006572:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2242      	movs	r2, #66	; 0x42
 8006578:	2110      	movs	r1, #16
 800657a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2208      	movs	r2, #8
 800658c:	18ba      	adds	r2, r7, r2
 800658e:	8812      	ldrh	r2, [r2, #0]
 8006590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	2bff      	cmp	r3, #255	; 0xff
 80065a0:	d911      	bls.n	80065c6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	22ff      	movs	r2, #255	; 0xff
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	045c      	lsls	r4, r3, #17
 80065b2:	230a      	movs	r3, #10
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	8819      	ldrh	r1, [r3, #0]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	4b55      	ldr	r3, [pc, #340]	; (8006710 <HAL_I2C_Master_Transmit+0x208>)
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	0023      	movs	r3, r4
 80065c0:	f001 f800 	bl	80075c4 <I2C_TransferConfig>
 80065c4:	e075      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	2380      	movs	r3, #128	; 0x80
 80065d8:	049c      	lsls	r4, r3, #18
 80065da:	230a      	movs	r3, #10
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	8819      	ldrh	r1, [r3, #0]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	4b4b      	ldr	r3, [pc, #300]	; (8006710 <HAL_I2C_Master_Transmit+0x208>)
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	0023      	movs	r3, r4
 80065e8:	f000 ffec 	bl	80075c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80065ec:	e061      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	0018      	movs	r0, r3
 80065f6:	f000 fe6a 	bl	80072ce <I2C_WaitOnTXISFlagUntilTimeout>
 80065fa:	1e03      	subs	r3, r0, #0
 80065fc:	d001      	beq.n	8006602 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e081      	b.n	8006706 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	781a      	ldrb	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d03a      	beq.n	80066b2 <HAL_I2C_Master_Transmit+0x1aa>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	2b00      	cmp	r3, #0
 8006642:	d136      	bne.n	80066b2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	0013      	movs	r3, r2
 800664e:	2200      	movs	r2, #0
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	f000 fdfd 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006656:	1e03      	subs	r3, r0, #0
 8006658:	d001      	beq.n	800665e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e053      	b.n	8006706 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	2bff      	cmp	r3, #255	; 0xff
 8006666:	d911      	bls.n	800668c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	22ff      	movs	r2, #255	; 0xff
 800666c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	b2da      	uxtb	r2, r3
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	045c      	lsls	r4, r3, #17
 8006678:	230a      	movs	r3, #10
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	8819      	ldrh	r1, [r3, #0]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	0023      	movs	r3, r4
 8006686:	f000 ff9d 	bl	80075c4 <I2C_TransferConfig>
 800668a:	e012      	b.n	80066b2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669a:	b2da      	uxtb	r2, r3
 800669c:	2380      	movs	r3, #128	; 0x80
 800669e:	049c      	lsls	r4, r3, #18
 80066a0:	230a      	movs	r3, #10
 80066a2:	18fb      	adds	r3, r7, r3
 80066a4:	8819      	ldrh	r1, [r3, #0]
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	0023      	movs	r3, r4
 80066ae:	f000 ff89 	bl	80075c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d198      	bne.n	80065ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	0018      	movs	r0, r3
 80066c4:	f000 fe42 	bl	800734c <I2C_WaitOnSTOPFlagUntilTimeout>
 80066c8:	1e03      	subs	r3, r0, #0
 80066ca:	d001      	beq.n	80066d0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e01a      	b.n	8006706 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2220      	movs	r2, #32
 80066d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	490c      	ldr	r1, [pc, #48]	; (8006714 <HAL_I2C_Master_Transmit+0x20c>)
 80066e4:	400a      	ands	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2241      	movs	r2, #65	; 0x41
 80066ec:	2120      	movs	r1, #32
 80066ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2242      	movs	r2, #66	; 0x42
 80066f4:	2100      	movs	r1, #0
 80066f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2240      	movs	r2, #64	; 0x40
 80066fc:	2100      	movs	r1, #0
 80066fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	e000      	b.n	8006706 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
  }
}
 8006706:	0018      	movs	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	b007      	add	sp, #28
 800670c:	bd90      	pop	{r4, r7, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	80002000 	.word	0x80002000
 8006714:	fe00e800 	.word	0xfe00e800

08006718 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
  }
}
 8006744:	46c0      	nop			; (mov r8, r8)
 8006746:	46bd      	mov	sp, r7
 8006748:	b004      	add	sp, #16
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	001a      	movs	r2, r3
 800676a:	2301      	movs	r3, #1
 800676c:	4013      	ands	r3, r2
 800676e:	d010      	beq.n	8006792 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	09db      	lsrs	r3, r3, #7
 8006774:	001a      	movs	r2, r3
 8006776:	2301      	movs	r3, #1
 8006778:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800677a:	d00a      	beq.n	8006792 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	2201      	movs	r2, #1
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2280      	movs	r2, #128	; 0x80
 800678e:	0052      	lsls	r2, r2, #1
 8006790:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	0a9b      	lsrs	r3, r3, #10
 8006796:	001a      	movs	r2, r3
 8006798:	2301      	movs	r3, #1
 800679a:	4013      	ands	r3, r2
 800679c:	d010      	beq.n	80067c0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	001a      	movs	r2, r3
 80067a4:	2301      	movs	r3, #1
 80067a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067a8:	d00a      	beq.n	80067c0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	2208      	movs	r2, #8
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2280      	movs	r2, #128	; 0x80
 80067bc:	00d2      	lsls	r2, r2, #3
 80067be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	0a5b      	lsrs	r3, r3, #9
 80067c4:	001a      	movs	r2, r3
 80067c6:	2301      	movs	r3, #1
 80067c8:	4013      	ands	r3, r2
 80067ca:	d010      	beq.n	80067ee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	09db      	lsrs	r3, r3, #7
 80067d0:	001a      	movs	r2, r3
 80067d2:	2301      	movs	r3, #1
 80067d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80067d6:	d00a      	beq.n	80067ee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	2202      	movs	r2, #2
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2280      	movs	r2, #128	; 0x80
 80067ea:	0092      	lsls	r2, r2, #2
 80067ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	220b      	movs	r2, #11
 80067f8:	4013      	ands	r3, r2
 80067fa:	d005      	beq.n	8006808 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	0011      	movs	r1, r2
 8006802:	0018      	movs	r0, r3
 8006804:	f000 fbd8 	bl	8006fb8 <I2C_ITError>
  }
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b006      	add	sp, #24
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b002      	add	sp, #8
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	46bd      	mov	sp, r7
 800682c:	b002      	add	sp, #8
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	0008      	movs	r0, r1
 800683a:	0011      	movs	r1, r2
 800683c:	1cfb      	adds	r3, r7, #3
 800683e:	1c02      	adds	r2, r0, #0
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	003b      	movs	r3, r7
 8006844:	1c0a      	adds	r2, r1, #0
 8006846:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006848:	46c0      	nop			; (mov r8, r8)
 800684a:	46bd      	mov	sp, r7
 800684c:	b002      	add	sp, #8
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006858:	46c0      	nop			; (mov r8, r8)
 800685a:	46bd      	mov	sp, r7
 800685c:	b002      	add	sp, #8
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006868:	46c0      	nop			; (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b002      	add	sp, #8
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006878:	46c0      	nop			; (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b002      	add	sp, #8
 800687e:	bd80      	pop	{r7, pc}

08006880 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2240      	movs	r2, #64	; 0x40
 800689a:	5c9b      	ldrb	r3, [r3, r2]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <I2C_Slave_ISR_IT+0x24>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e0fa      	b.n	8006a9a <I2C_Slave_ISR_IT+0x21a>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	2101      	movs	r1, #1
 80068aa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	001a      	movs	r2, r3
 80068b2:	2301      	movs	r3, #1
 80068b4:	4013      	ands	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	001a      	movs	r2, r3
 80068be:	2301      	movs	r3, #1
 80068c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068c2:	d005      	beq.n	80068d0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	0011      	movs	r1, r2
 80068ca:	0018      	movs	r0, r3
 80068cc:	f000 f9f6 	bl	8006cbc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	091b      	lsrs	r3, r3, #4
 80068d4:	001a      	movs	r2, r3
 80068d6:	2301      	movs	r3, #1
 80068d8:	4013      	ands	r3, r2
 80068da:	d054      	beq.n	8006986 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	091b      	lsrs	r3, r3, #4
 80068e0:	001a      	movs	r2, r3
 80068e2:	2301      	movs	r3, #1
 80068e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068e6:	d04e      	beq.n	8006986 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d12d      	bne.n	800694e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2241      	movs	r2, #65	; 0x41
 80068f6:	5c9b      	ldrb	r3, [r3, r2]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b28      	cmp	r3, #40	; 0x28
 80068fc:	d10b      	bne.n	8006916 <I2C_Slave_ISR_IT+0x96>
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	2380      	movs	r3, #128	; 0x80
 8006902:	049b      	lsls	r3, r3, #18
 8006904:	429a      	cmp	r2, r3
 8006906:	d106      	bne.n	8006916 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	0011      	movs	r1, r2
 800690e:	0018      	movs	r0, r3
 8006910:	f000 faf8 	bl	8006f04 <I2C_ITListenCplt>
 8006914:	e036      	b.n	8006984 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2241      	movs	r2, #65	; 0x41
 800691a:	5c9b      	ldrb	r3, [r3, r2]
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b29      	cmp	r3, #41	; 0x29
 8006920:	d110      	bne.n	8006944 <I2C_Slave_ISR_IT+0xc4>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4a5f      	ldr	r2, [pc, #380]	; (8006aa4 <I2C_Slave_ISR_IT+0x224>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00c      	beq.n	8006944 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2210      	movs	r2, #16
 8006930:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fc4a 	bl	80071ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	0018      	movs	r0, r3
 800693e:	f000 f957 	bl	8006bf0 <I2C_ITSlaveSeqCplt>
 8006942:	e01f      	b.n	8006984 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2210      	movs	r2, #16
 800694a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800694c:	e09d      	b.n	8006a8a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2210      	movs	r2, #16
 8006954:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	2204      	movs	r2, #4
 800695c:	431a      	orrs	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d005      	beq.n	8006974 <I2C_Slave_ISR_IT+0xf4>
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	2380      	movs	r3, #128	; 0x80
 800696c:	045b      	lsls	r3, r3, #17
 800696e:	429a      	cmp	r2, r3
 8006970:	d000      	beq.n	8006974 <I2C_Slave_ISR_IT+0xf4>
 8006972:	e08a      	b.n	8006a8a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	0011      	movs	r1, r2
 800697c:	0018      	movs	r0, r3
 800697e:	f000 fb1b 	bl	8006fb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006982:	e082      	b.n	8006a8a <I2C_Slave_ISR_IT+0x20a>
 8006984:	e081      	b.n	8006a8a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	089b      	lsrs	r3, r3, #2
 800698a:	001a      	movs	r2, r3
 800698c:	2301      	movs	r3, #1
 800698e:	4013      	ands	r3, r2
 8006990:	d031      	beq.n	80069f6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	089b      	lsrs	r3, r3, #2
 8006996:	001a      	movs	r2, r3
 8006998:	2301      	movs	r3, #1
 800699a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800699c:	d02b      	beq.n	80069f6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d018      	beq.n	80069da <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d154      	bne.n	8006a8e <I2C_Slave_ISR_IT+0x20e>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	4a2f      	ldr	r2, [pc, #188]	; (8006aa4 <I2C_Slave_ISR_IT+0x224>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d050      	beq.n	8006a8e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 f8fe 	bl	8006bf0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80069f4:	e04b      	b.n	8006a8e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	08db      	lsrs	r3, r3, #3
 80069fa:	001a      	movs	r2, r3
 80069fc:	2301      	movs	r3, #1
 80069fe:	4013      	ands	r3, r2
 8006a00:	d00c      	beq.n	8006a1c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	08db      	lsrs	r3, r3, #3
 8006a06:	001a      	movs	r2, r3
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a0c:	d006      	beq.n	8006a1c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	0011      	movs	r1, r2
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 f847 	bl	8006aa8 <I2C_ITAddrCplt>
 8006a1a:	e039      	b.n	8006a90 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	001a      	movs	r2, r3
 8006a22:	2301      	movs	r3, #1
 8006a24:	4013      	ands	r3, r2
 8006a26:	d033      	beq.n	8006a90 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	001a      	movs	r2, r3
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a32:	d02d      	beq.n	8006a90 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	781a      	ldrb	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a6e:	e00f      	b.n	8006a90 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	045b      	lsls	r3, r3, #17
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d002      	beq.n	8006a80 <I2C_Slave_ISR_IT+0x200>
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d107      	bne.n	8006a90 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 f8b4 	bl	8006bf0 <I2C_ITSlaveSeqCplt>
 8006a88:	e002      	b.n	8006a90 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	e000      	b.n	8006a90 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8006a8e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2240      	movs	r2, #64	; 0x40
 8006a94:	2100      	movs	r1, #0
 8006a96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b006      	add	sp, #24
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	ffff0000 	.word	0xffff0000

08006aa8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006aa8:	b5b0      	push	{r4, r5, r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2241      	movs	r2, #65	; 0x41
 8006ab6:	5c9b      	ldrb	r3, [r3, r2]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	001a      	movs	r2, r3
 8006abc:	2328      	movs	r3, #40	; 0x28
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b28      	cmp	r3, #40	; 0x28
 8006ac2:	d000      	beq.n	8006ac6 <I2C_ITAddrCplt+0x1e>
 8006ac4:	e088      	b.n	8006bd8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	250f      	movs	r5, #15
 8006ad2:	197b      	adds	r3, r7, r5
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	400a      	ands	r2, r1
 8006ad8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	200c      	movs	r0, #12
 8006ae6:	183b      	adds	r3, r7, r0
 8006ae8:	21fe      	movs	r1, #254	; 0xfe
 8006aea:	400a      	ands	r2, r1
 8006aec:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	240a      	movs	r4, #10
 8006af8:	193b      	adds	r3, r7, r4
 8006afa:	0592      	lsls	r2, r2, #22
 8006afc:	0d92      	lsrs	r2, r2, #22
 8006afe:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	2308      	movs	r3, #8
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	21fe      	movs	r1, #254	; 0xfe
 8006b0e:	400a      	ands	r2, r1
 8006b10:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d148      	bne.n	8006bac <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b1a:	0021      	movs	r1, r4
 8006b1c:	187b      	adds	r3, r7, r1
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	09db      	lsrs	r3, r3, #7
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	183b      	adds	r3, r7, r0
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	4053      	eors	r3, r2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	001a      	movs	r2, r3
 8006b2e:	2306      	movs	r3, #6
 8006b30:	4013      	ands	r3, r2
 8006b32:	d120      	bne.n	8006b76 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006b34:	183b      	adds	r3, r7, r0
 8006b36:	187a      	adds	r2, r7, r1
 8006b38:	8812      	ldrh	r2, [r2, #0]
 8006b3a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d14c      	bne.n	8006be8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2240      	movs	r2, #64	; 0x40
 8006b60:	2100      	movs	r1, #0
 8006b62:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b64:	183b      	adds	r3, r7, r0
 8006b66:	881a      	ldrh	r2, [r3, #0]
 8006b68:	197b      	adds	r3, r7, r5
 8006b6a:	7819      	ldrb	r1, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f7ff fe5e 	bl	8006830 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b74:	e038      	b.n	8006be8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8006b76:	240c      	movs	r4, #12
 8006b78:	193b      	adds	r3, r7, r4
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	18ba      	adds	r2, r7, r2
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b82:	2380      	movs	r3, #128	; 0x80
 8006b84:	021a      	lsls	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	0011      	movs	r1, r2
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	f000 fd54 	bl	8007638 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2240      	movs	r2, #64	; 0x40
 8006b94:	2100      	movs	r1, #0
 8006b96:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b98:	193b      	adds	r3, r7, r4
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	230f      	movs	r3, #15
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	7819      	ldrb	r1, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7ff fe43 	bl	8006830 <HAL_I2C_AddrCallback>
}
 8006baa:	e01d      	b.n	8006be8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bac:	2380      	movs	r3, #128	; 0x80
 8006bae:	021a      	lsls	r2, r3, #8
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	0011      	movs	r1, r2
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f000 fd3f 	bl	8007638 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2240      	movs	r2, #64	; 0x40
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bc2:	230c      	movs	r3, #12
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	881a      	ldrh	r2, [r3, #0]
 8006bc8:	230f      	movs	r3, #15
 8006bca:	18fb      	adds	r3, r7, r3
 8006bcc:	7819      	ldrb	r1, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	0018      	movs	r0, r3
 8006bd2:	f7ff fe2d 	bl	8006830 <HAL_I2C_AddrCallback>
}
 8006bd6:	e007      	b.n	8006be8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2240      	movs	r2, #64	; 0x40
 8006be4:	2100      	movs	r1, #0
 8006be6:	5499      	strb	r1, [r3, r2]
}
 8006be8:	46c0      	nop			; (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b004      	add	sp, #16
 8006bee:	bdb0      	pop	{r4, r5, r7, pc}

08006bf0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2242      	movs	r2, #66	; 0x42
 8006c04:	2100      	movs	r1, #0
 8006c06:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	0b9b      	lsrs	r3, r3, #14
 8006c0c:	001a      	movs	r2, r3
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	d008      	beq.n	8006c26 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4925      	ldr	r1, [pc, #148]	; (8006cb4 <I2C_ITSlaveSeqCplt+0xc4>)
 8006c20:	400a      	ands	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	e00d      	b.n	8006c42 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	0bdb      	lsrs	r3, r3, #15
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d007      	beq.n	8006c42 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	491e      	ldr	r1, [pc, #120]	; (8006cb8 <I2C_ITSlaveSeqCplt+0xc8>)
 8006c3e:	400a      	ands	r2, r1
 8006c40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2241      	movs	r2, #65	; 0x41
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b29      	cmp	r3, #41	; 0x29
 8006c4c:	d114      	bne.n	8006c78 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2241      	movs	r2, #65	; 0x41
 8006c52:	2128      	movs	r1, #40	; 0x28
 8006c54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2221      	movs	r2, #33	; 0x21
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2101      	movs	r1, #1
 8006c60:	0018      	movs	r0, r3
 8006c62:	f000 fce9 	bl	8007638 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2240      	movs	r2, #64	; 0x40
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	0018      	movs	r0, r3
 8006c72:	f7ff fdcd 	bl	8006810 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c76:	e019      	b.n	8006cac <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2241      	movs	r2, #65	; 0x41
 8006c7c:	5c9b      	ldrb	r3, [r3, r2]
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b2a      	cmp	r3, #42	; 0x2a
 8006c82:	d113      	bne.n	8006cac <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2241      	movs	r2, #65	; 0x41
 8006c88:	2128      	movs	r1, #40	; 0x28
 8006c8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2222      	movs	r2, #34	; 0x22
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2102      	movs	r1, #2
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 fcce 	bl	8007638 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f7ff fdba 	bl	8006820 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	ffffbfff 	.word	0xffffbfff
 8006cb8:	ffff7fff 	.word	0xffff7fff

08006cbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cd2:	200f      	movs	r0, #15
 8006cd4:	183b      	adds	r3, r7, r0
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	2141      	movs	r1, #65	; 0x41
 8006cda:	5c52      	ldrb	r2, [r2, r1]
 8006cdc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ce6:	183b      	adds	r3, r7, r0
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b21      	cmp	r3, #33	; 0x21
 8006cec:	d003      	beq.n	8006cf6 <I2C_ITSlaveCplt+0x3a>
 8006cee:	183b      	adds	r3, r7, r0
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b29      	cmp	r3, #41	; 0x29
 8006cf4:	d109      	bne.n	8006d0a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cf6:	4a7d      	ldr	r2, [pc, #500]	; (8006eec <I2C_ITSlaveCplt+0x230>)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fc9b 	bl	8007638 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2221      	movs	r2, #33	; 0x21
 8006d06:	631a      	str	r2, [r3, #48]	; 0x30
 8006d08:	e011      	b.n	8006d2e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d0a:	220f      	movs	r2, #15
 8006d0c:	18bb      	adds	r3, r7, r2
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	2b22      	cmp	r3, #34	; 0x22
 8006d12:	d003      	beq.n	8006d1c <I2C_ITSlaveCplt+0x60>
 8006d14:	18bb      	adds	r3, r7, r2
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b2a      	cmp	r3, #42	; 0x2a
 8006d1a:	d108      	bne.n	8006d2e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d1c:	4a74      	ldr	r2, [pc, #464]	; (8006ef0 <I2C_ITSlaveCplt+0x234>)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	0011      	movs	r1, r2
 8006d22:	0018      	movs	r0, r3
 8006d24:	f000 fc88 	bl	8007638 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2222      	movs	r2, #34	; 0x22
 8006d2c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2180      	movs	r1, #128	; 0x80
 8006d3a:	0209      	lsls	r1, r1, #8
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	496a      	ldr	r1, [pc, #424]	; (8006ef4 <I2C_ITSlaveCplt+0x238>)
 8006d4c:	400a      	ands	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f000 fa3b 	bl	80071ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	0b9b      	lsrs	r3, r3, #14
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4013      	ands	r3, r2
 8006d62:	d013      	beq.n	8006d8c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4962      	ldr	r1, [pc, #392]	; (8006ef8 <I2C_ITSlaveCplt+0x23c>)
 8006d70:	400a      	ands	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d020      	beq.n	8006dbe <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d8a:	e018      	b.n	8006dbe <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	0bdb      	lsrs	r3, r3, #15
 8006d90:	001a      	movs	r2, r3
 8006d92:	2301      	movs	r3, #1
 8006d94:	4013      	ands	r3, r2
 8006d96:	d012      	beq.n	8006dbe <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4956      	ldr	r1, [pc, #344]	; (8006efc <I2C_ITSlaveCplt+0x240>)
 8006da4:	400a      	ands	r2, r1
 8006da6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d006      	beq.n	8006dbe <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	089b      	lsrs	r3, r3, #2
 8006dc2:	001a      	movs	r2, r3
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d020      	beq.n	8006e0c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	4393      	bics	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	431a      	orrs	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2242      	movs	r2, #66	; 0x42
 8006e26:	2100      	movs	r1, #0
 8006e28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d013      	beq.n	8006e60 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	0011      	movs	r1, r2
 8006e40:	0018      	movs	r0, r3
 8006e42:	f000 f8b9 	bl	8006fb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2241      	movs	r2, #65	; 0x41
 8006e4a:	5c9b      	ldrb	r3, [r3, r2]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b28      	cmp	r3, #40	; 0x28
 8006e50:	d147      	bne.n	8006ee2 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f000 f853 	bl	8006f04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e5e:	e040      	b.n	8006ee2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a26      	ldr	r2, [pc, #152]	; (8006f00 <I2C_ITSlaveCplt+0x244>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d016      	beq.n	8006e98 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f7ff febf 	bl	8006bf0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a22      	ldr	r2, [pc, #136]	; (8006f00 <I2C_ITSlaveCplt+0x244>)
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2241      	movs	r2, #65	; 0x41
 8006e7c:	2120      	movs	r1, #32
 8006e7e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2240      	movs	r2, #64	; 0x40
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f7ff fcdd 	bl	8006850 <HAL_I2C_ListenCpltCallback>
}
 8006e96:	e024      	b.n	8006ee2 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2241      	movs	r2, #65	; 0x41
 8006e9c:	5c9b      	ldrb	r3, [r3, r2]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	2b22      	cmp	r3, #34	; 0x22
 8006ea2:	d10f      	bne.n	8006ec4 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2241      	movs	r2, #65	; 0x41
 8006ea8:	2120      	movs	r1, #32
 8006eaa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2240      	movs	r2, #64	; 0x40
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7ff fcaf 	bl	8006820 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ec2:	e00e      	b.n	8006ee2 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2241      	movs	r2, #65	; 0x41
 8006ec8:	2120      	movs	r1, #32
 8006eca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2240      	movs	r2, #64	; 0x40
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7ff fc97 	bl	8006810 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	b006      	add	sp, #24
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	00008001 	.word	0x00008001
 8006ef0:	00008002 	.word	0x00008002
 8006ef4:	fe00e800 	.word	0xfe00e800
 8006ef8:	ffffbfff 	.word	0xffffbfff
 8006efc:	ffff7fff 	.word	0xffff7fff
 8006f00:	ffff0000 	.word	0xffff0000

08006f04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4a27      	ldr	r2, [pc, #156]	; (8006fb0 <I2C_ITListenCplt+0xac>)
 8006f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2241      	movs	r2, #65	; 0x41
 8006f1e:	2120      	movs	r1, #32
 8006f20:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2242      	movs	r2, #66	; 0x42
 8006f26:	2100      	movs	r1, #0
 8006f28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	089b      	lsrs	r3, r3, #2
 8006f34:	001a      	movs	r2, r3
 8006f36:	2301      	movs	r3, #1
 8006f38:	4013      	ands	r3, r2
 8006f3a:	d022      	beq.n	8006f82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	b2d2      	uxtb	r2, r2
 8006f48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d012      	beq.n	8006f82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f60:	3b01      	subs	r3, #1
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f82:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <I2C_ITListenCplt+0xb0>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	0011      	movs	r1, r2
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f000 fb55 	bl	8007638 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2210      	movs	r2, #16
 8006f94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2240      	movs	r2, #64	; 0x40
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff fc55 	bl	8006850 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b002      	add	sp, #8
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	ffff0000 	.word	0xffff0000
 8006fb4:	00008003 	.word	0x00008003

08006fb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fc2:	200f      	movs	r0, #15
 8006fc4:	183b      	adds	r3, r7, r0
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	2141      	movs	r1, #65	; 0x41
 8006fca:	5c52      	ldrb	r2, [r2, r1]
 8006fcc:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2242      	movs	r2, #66	; 0x42
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a62      	ldr	r2, [pc, #392]	; (8007164 <I2C_ITError+0x1ac>)
 8006fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fee:	183b      	adds	r3, r7, r0
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b28      	cmp	r3, #40	; 0x28
 8006ff4:	d007      	beq.n	8007006 <I2C_ITError+0x4e>
 8006ff6:	183b      	adds	r3, r7, r0
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b29      	cmp	r3, #41	; 0x29
 8006ffc:	d003      	beq.n	8007006 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006ffe:	183b      	adds	r3, r7, r0
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b2a      	cmp	r3, #42	; 0x2a
 8007004:	d10c      	bne.n	8007020 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2103      	movs	r1, #3
 800700a:	0018      	movs	r0, r3
 800700c:	f000 fb14 	bl	8007638 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2241      	movs	r2, #65	; 0x41
 8007014:	2128      	movs	r1, #40	; 0x28
 8007016:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a53      	ldr	r2, [pc, #332]	; (8007168 <I2C_ITError+0x1b0>)
 800701c:	635a      	str	r2, [r3, #52]	; 0x34
 800701e:	e012      	b.n	8007046 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007020:	4a52      	ldr	r2, [pc, #328]	; (800716c <I2C_ITError+0x1b4>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	0011      	movs	r1, r2
 8007026:	0018      	movs	r0, r3
 8007028:	f000 fb06 	bl	8007638 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2241      	movs	r2, #65	; 0x41
 8007030:	5c9b      	ldrb	r3, [r3, r2]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b60      	cmp	r3, #96	; 0x60
 8007036:	d003      	beq.n	8007040 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2241      	movs	r2, #65	; 0x41
 800703c:	2120      	movs	r1, #32
 800703e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	2b00      	cmp	r3, #0
 8007052:	d03b      	beq.n	80070cc <I2C_ITError+0x114>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b11      	cmp	r3, #17
 8007058:	d002      	beq.n	8007060 <I2C_ITError+0xa8>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b21      	cmp	r3, #33	; 0x21
 800705e:	d135      	bne.n	80070cc <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	2380      	movs	r3, #128	; 0x80
 8007068:	01db      	lsls	r3, r3, #7
 800706a:	401a      	ands	r2, r3
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	01db      	lsls	r3, r3, #7
 8007070:	429a      	cmp	r2, r3
 8007072:	d107      	bne.n	8007084 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	493c      	ldr	r1, [pc, #240]	; (8007170 <I2C_ITError+0x1b8>)
 8007080:	400a      	ands	r2, r1
 8007082:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	0018      	movs	r0, r3
 800708a:	f7fe ffa7 	bl	8005fdc <HAL_DMA_GetState>
 800708e:	0003      	movs	r3, r0
 8007090:	2b01      	cmp	r3, #1
 8007092:	d016      	beq.n	80070c2 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	4a36      	ldr	r2, [pc, #216]	; (8007174 <I2C_ITError+0x1bc>)
 800709a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2240      	movs	r2, #64	; 0x40
 80070a0:	2100      	movs	r1, #0
 80070a2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	0018      	movs	r0, r3
 80070aa:	f7fe fe7b 	bl	8005da4 <HAL_DMA_Abort_IT>
 80070ae:	1e03      	subs	r3, r0, #0
 80070b0:	d051      	beq.n	8007156 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070bc:	0018      	movs	r0, r3
 80070be:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070c0:	e049      	b.n	8007156 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f000 f859 	bl	800717c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ca:	e044      	b.n	8007156 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d03b      	beq.n	800714c <I2C_ITError+0x194>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b12      	cmp	r3, #18
 80070d8:	d002      	beq.n	80070e0 <I2C_ITError+0x128>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b22      	cmp	r3, #34	; 0x22
 80070de:	d135      	bne.n	800714c <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	401a      	ands	r2, r3
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d107      	bne.n	8007104 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	491e      	ldr	r1, [pc, #120]	; (8007178 <I2C_ITError+0x1c0>)
 8007100:	400a      	ands	r2, r1
 8007102:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	0018      	movs	r0, r3
 800710a:	f7fe ff67 	bl	8005fdc <HAL_DMA_GetState>
 800710e:	0003      	movs	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d016      	beq.n	8007142 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007118:	4a16      	ldr	r2, [pc, #88]	; (8007174 <I2C_ITError+0x1bc>)
 800711a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2240      	movs	r2, #64	; 0x40
 8007120:	2100      	movs	r1, #0
 8007122:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	0018      	movs	r0, r3
 800712a:	f7fe fe3b 	bl	8005da4 <HAL_DMA_Abort_IT>
 800712e:	1e03      	subs	r3, r0, #0
 8007130:	d013      	beq.n	800715a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	0018      	movs	r0, r3
 800713e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007140:	e00b      	b.n	800715a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f000 f819 	bl	800717c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800714a:	e006      	b.n	800715a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	0018      	movs	r0, r3
 8007150:	f000 f814 	bl	800717c <I2C_TreatErrorCallback>
  }
}
 8007154:	e002      	b.n	800715c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	e000      	b.n	800715c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800715a:	46c0      	nop			; (mov r8, r8)
}
 800715c:	46c0      	nop			; (mov r8, r8)
 800715e:	46bd      	mov	sp, r7
 8007160:	b004      	add	sp, #16
 8007162:	bd80      	pop	{r7, pc}
 8007164:	ffff0000 	.word	0xffff0000
 8007168:	08006881 	.word	0x08006881
 800716c:	00008003 	.word	0x00008003
 8007170:	ffffbfff 	.word	0xffffbfff
 8007174:	08007213 	.word	0x08007213
 8007178:	ffff7fff 	.word	0xffff7fff

0800717c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2241      	movs	r2, #65	; 0x41
 8007188:	5c9b      	ldrb	r3, [r3, r2]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b60      	cmp	r3, #96	; 0x60
 800718e:	d10f      	bne.n	80071b0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2241      	movs	r2, #65	; 0x41
 8007194:	2120      	movs	r1, #32
 8007196:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2240      	movs	r2, #64	; 0x40
 80071a2:	2100      	movs	r1, #0
 80071a4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	0018      	movs	r0, r3
 80071aa:	f7ff fb61 	bl	8006870 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071ae:	e00a      	b.n	80071c6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2240      	movs	r2, #64	; 0x40
 80071ba:	2100      	movs	r1, #0
 80071bc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	0018      	movs	r0, r3
 80071c2:	f7ff fb4d 	bl	8006860 <HAL_I2C_ErrorCallback>
}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b002      	add	sp, #8
 80071cc:	bd80      	pop	{r7, pc}

080071ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	699b      	ldr	r3, [r3, #24]
 80071dc:	2202      	movs	r2, #2
 80071de:	4013      	ands	r3, r2
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d103      	bne.n	80071ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2201      	movs	r2, #1
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d007      	beq.n	800720a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2101      	movs	r1, #1
 8007206:	430a      	orrs	r2, r1
 8007208:	619a      	str	r2, [r3, #24]
  }
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}

08007212 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	2200      	movs	r2, #0
 800722e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d003      	beq.n	8007240 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723c:	2200      	movs	r2, #0
 800723e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0018      	movs	r0, r3
 8007244:	f7ff ff9a 	bl	800717c <I2C_TreatErrorCallback>
}
 8007248:	46c0      	nop			; (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}

08007250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	1dfb      	adds	r3, r7, #7
 800725e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007260:	e021      	b.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	d01e      	beq.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007268:	f7fe f90a 	bl	8005480 <HAL_GetTick>
 800726c:	0002      	movs	r2, r0
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d302      	bcc.n	800727e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d113      	bne.n	80072a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	2220      	movs	r2, #32
 8007284:	431a      	orrs	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2241      	movs	r2, #65	; 0x41
 800728e:	2120      	movs	r1, #32
 8007290:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2242      	movs	r2, #66	; 0x42
 8007296:	2100      	movs	r1, #0
 8007298:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2240      	movs	r2, #64	; 0x40
 800729e:	2100      	movs	r1, #0
 80072a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e00f      	b.n	80072c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4013      	ands	r3, r2
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	425a      	negs	r2, r3
 80072b6:	4153      	adcs	r3, r2
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	001a      	movs	r2, r3
 80072bc:	1dfb      	adds	r3, r7, #7
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d0ce      	beq.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	0018      	movs	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b004      	add	sp, #16
 80072cc:	bd80      	pop	{r7, pc}

080072ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072da:	e02b      	b.n	8007334 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	0018      	movs	r0, r3
 80072e4:	f000 f86e 	bl	80073c4 <I2C_IsErrorOccurred>
 80072e8:	1e03      	subs	r3, r0, #0
 80072ea:	d001      	beq.n	80072f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e029      	b.n	8007344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	3301      	adds	r3, #1
 80072f4:	d01e      	beq.n	8007334 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f6:	f7fe f8c3 	bl	8005480 <HAL_GetTick>
 80072fa:	0002      	movs	r2, r0
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d113      	bne.n	8007334 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007310:	2220      	movs	r2, #32
 8007312:	431a      	orrs	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2241      	movs	r2, #65	; 0x41
 800731c:	2120      	movs	r1, #32
 800731e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2242      	movs	r2, #66	; 0x42
 8007324:	2100      	movs	r1, #0
 8007326:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2240      	movs	r2, #64	; 0x40
 800732c:	2100      	movs	r1, #0
 800732e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e007      	b.n	8007344 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2202      	movs	r2, #2
 800733c:	4013      	ands	r3, r2
 800733e:	2b02      	cmp	r3, #2
 8007340:	d1cc      	bne.n	80072dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	0018      	movs	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	b004      	add	sp, #16
 800734a:	bd80      	pop	{r7, pc}

0800734c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007358:	e028      	b.n	80073ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	0018      	movs	r0, r3
 8007362:	f000 f82f 	bl	80073c4 <I2C_IsErrorOccurred>
 8007366:	1e03      	subs	r3, r0, #0
 8007368:	d001      	beq.n	800736e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e026      	b.n	80073bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736e:	f7fe f887 	bl	8005480 <HAL_GetTick>
 8007372:	0002      	movs	r2, r0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	429a      	cmp	r2, r3
 800737c:	d302      	bcc.n	8007384 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d113      	bne.n	80073ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007388:	2220      	movs	r2, #32
 800738a:	431a      	orrs	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2241      	movs	r2, #65	; 0x41
 8007394:	2120      	movs	r1, #32
 8007396:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2242      	movs	r2, #66	; 0x42
 800739c:	2100      	movs	r1, #0
 800739e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2240      	movs	r2, #64	; 0x40
 80073a4:	2100      	movs	r1, #0
 80073a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e007      	b.n	80073bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2220      	movs	r2, #32
 80073b4:	4013      	ands	r3, r2
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d1cf      	bne.n	800735a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	0018      	movs	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	b004      	add	sp, #16
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c4:	b590      	push	{r4, r7, lr}
 80073c6:	b08b      	sub	sp, #44	; 0x2c
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d0:	2327      	movs	r3, #39	; 0x27
 80073d2:	18fb      	adds	r3, r7, r3
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	2210      	movs	r2, #16
 80073ec:	4013      	ands	r3, r2
 80073ee:	d100      	bne.n	80073f2 <I2C_IsErrorOccurred+0x2e>
 80073f0:	e082      	b.n	80074f8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2210      	movs	r2, #16
 80073f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073fa:	e060      	b.n	80074be <I2C_IsErrorOccurred+0xfa>
 80073fc:	2427      	movs	r4, #39	; 0x27
 80073fe:	193b      	adds	r3, r7, r4
 8007400:	193a      	adds	r2, r7, r4
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	3301      	adds	r3, #1
 800740a:	d058      	beq.n	80074be <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800740c:	f7fe f838 	bl	8005480 <HAL_GetTick>
 8007410:	0002      	movs	r2, r0
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	d306      	bcc.n	800742a <I2C_IsErrorOccurred+0x66>
 800741c:	193b      	adds	r3, r7, r4
 800741e:	193a      	adds	r2, r7, r4
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d149      	bne.n	80074be <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	01db      	lsls	r3, r3, #7
 8007434:	4013      	ands	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007438:	2013      	movs	r0, #19
 800743a:	183b      	adds	r3, r7, r0
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	2142      	movs	r1, #66	; 0x42
 8007440:	5c52      	ldrb	r2, [r2, r1]
 8007442:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	2380      	movs	r3, #128	; 0x80
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	401a      	ands	r2, r3
 8007450:	2380      	movs	r3, #128	; 0x80
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	429a      	cmp	r2, r3
 8007456:	d126      	bne.n	80074a6 <I2C_IsErrorOccurred+0xe2>
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	01db      	lsls	r3, r3, #7
 800745e:	429a      	cmp	r2, r3
 8007460:	d021      	beq.n	80074a6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8007462:	183b      	adds	r3, r7, r0
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b20      	cmp	r3, #32
 8007468:	d01d      	beq.n	80074a6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2180      	movs	r1, #128	; 0x80
 8007476:	01c9      	lsls	r1, r1, #7
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800747c:	f7fe f800 	bl	8005480 <HAL_GetTick>
 8007480:	0003      	movs	r3, r0
 8007482:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007484:	e00f      	b.n	80074a6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007486:	f7fd fffb 	bl	8005480 <HAL_GetTick>
 800748a:	0002      	movs	r2, r0
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b19      	cmp	r3, #25
 8007492:	d908      	bls.n	80074a6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2220      	movs	r2, #32
 8007498:	4313      	orrs	r3, r2
 800749a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800749c:	2327      	movs	r3, #39	; 0x27
 800749e:	18fb      	adds	r3, r7, r3
 80074a0:	2201      	movs	r2, #1
 80074a2:	701a      	strb	r2, [r3, #0]

              break;
 80074a4:	e00b      	b.n	80074be <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2220      	movs	r2, #32
 80074ae:	4013      	ands	r3, r2
 80074b0:	2127      	movs	r1, #39	; 0x27
 80074b2:	187a      	adds	r2, r7, r1
 80074b4:	1879      	adds	r1, r7, r1
 80074b6:	7809      	ldrb	r1, [r1, #0]
 80074b8:	7011      	strb	r1, [r2, #0]
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d1e3      	bne.n	8007486 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	2220      	movs	r2, #32
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d004      	beq.n	80074d6 <I2C_IsErrorOccurred+0x112>
 80074cc:	2327      	movs	r3, #39	; 0x27
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d092      	beq.n	80073fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074d6:	2327      	movs	r3, #39	; 0x27
 80074d8:	18fb      	adds	r3, r7, r3
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d103      	bne.n	80074e8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2220      	movs	r2, #32
 80074e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	2204      	movs	r2, #4
 80074ec:	4313      	orrs	r3, r2
 80074ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074f0:	2327      	movs	r3, #39	; 0x27
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	2201      	movs	r2, #1
 80074f6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	2380      	movs	r3, #128	; 0x80
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4013      	ands	r3, r2
 8007508:	d00c      	beq.n	8007524 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	2201      	movs	r2, #1
 800750e:	4313      	orrs	r3, r2
 8007510:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2280      	movs	r2, #128	; 0x80
 8007518:	0052      	lsls	r2, r2, #1
 800751a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800751c:	2327      	movs	r3, #39	; 0x27
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	2201      	movs	r2, #1
 8007522:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007524:	69ba      	ldr	r2, [r7, #24]
 8007526:	2380      	movs	r3, #128	; 0x80
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	4013      	ands	r3, r2
 800752c:	d00c      	beq.n	8007548 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	2208      	movs	r2, #8
 8007532:	4313      	orrs	r3, r2
 8007534:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2280      	movs	r2, #128	; 0x80
 800753c:	00d2      	lsls	r2, r2, #3
 800753e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007540:	2327      	movs	r3, #39	; 0x27
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	2380      	movs	r3, #128	; 0x80
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4013      	ands	r3, r2
 8007550:	d00c      	beq.n	800756c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	2202      	movs	r2, #2
 8007556:	4313      	orrs	r3, r2
 8007558:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2280      	movs	r2, #128	; 0x80
 8007560:	0092      	lsls	r2, r2, #2
 8007562:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007564:	2327      	movs	r3, #39	; 0x27
 8007566:	18fb      	adds	r3, r7, r3
 8007568:	2201      	movs	r2, #1
 800756a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800756c:	2327      	movs	r3, #39	; 0x27
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01d      	beq.n	80075b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	0018      	movs	r0, r3
 800757a:	f7ff fe28 	bl	80071ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	490d      	ldr	r1, [pc, #52]	; (80075c0 <I2C_IsErrorOccurred+0x1fc>)
 800758a:	400a      	ands	r2, r1
 800758c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	431a      	orrs	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2241      	movs	r2, #65	; 0x41
 800759e:	2120      	movs	r1, #32
 80075a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2242      	movs	r2, #66	; 0x42
 80075a6:	2100      	movs	r1, #0
 80075a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2240      	movs	r2, #64	; 0x40
 80075ae:	2100      	movs	r1, #0
 80075b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80075b2:	2327      	movs	r3, #39	; 0x27
 80075b4:	18fb      	adds	r3, r7, r3
 80075b6:	781b      	ldrb	r3, [r3, #0]
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b00b      	add	sp, #44	; 0x2c
 80075be:	bd90      	pop	{r4, r7, pc}
 80075c0:	fe00e800 	.word	0xfe00e800

080075c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075c4:	b590      	push	{r4, r7, lr}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	0008      	movs	r0, r1
 80075ce:	0011      	movs	r1, r2
 80075d0:	607b      	str	r3, [r7, #4]
 80075d2:	240a      	movs	r4, #10
 80075d4:	193b      	adds	r3, r7, r4
 80075d6:	1c02      	adds	r2, r0, #0
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	2009      	movs	r0, #9
 80075dc:	183b      	adds	r3, r7, r0
 80075de:	1c0a      	adds	r2, r1, #0
 80075e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075e2:	193b      	adds	r3, r7, r4
 80075e4:	881b      	ldrh	r3, [r3, #0]
 80075e6:	059b      	lsls	r3, r3, #22
 80075e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075ea:	183b      	adds	r3, r7, r0
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	0419      	lsls	r1, r3, #16
 80075f0:	23ff      	movs	r3, #255	; 0xff
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	4313      	orrs	r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760e:	0d51      	lsrs	r1, r2, #21
 8007610:	2280      	movs	r2, #128	; 0x80
 8007612:	00d2      	lsls	r2, r2, #3
 8007614:	400a      	ands	r2, r1
 8007616:	4907      	ldr	r1, [pc, #28]	; (8007634 <I2C_TransferConfig+0x70>)
 8007618:	430a      	orrs	r2, r1
 800761a:	43d2      	mvns	r2, r2
 800761c:	401a      	ands	r2, r3
 800761e:	0011      	movs	r1, r2
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b007      	add	sp, #28
 8007630:	bd90      	pop	{r4, r7, pc}
 8007632:	46c0      	nop			; (mov r8, r8)
 8007634:	03ff63ff 	.word	0x03ff63ff

08007638 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	000a      	movs	r2, r1
 8007642:	1cbb      	adds	r3, r7, #2
 8007644:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800764a:	1cbb      	adds	r3, r7, #2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	2201      	movs	r2, #1
 8007650:	4013      	ands	r3, r2
 8007652:	d010      	beq.n	8007676 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2242      	movs	r2, #66	; 0x42
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2241      	movs	r2, #65	; 0x41
 8007660:	5c9b      	ldrb	r3, [r3, r2]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	001a      	movs	r2, r3
 8007666:	2328      	movs	r3, #40	; 0x28
 8007668:	4013      	ands	r3, r2
 800766a:	2b28      	cmp	r3, #40	; 0x28
 800766c:	d003      	beq.n	8007676 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	22b0      	movs	r2, #176	; 0xb0
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007676:	1cbb      	adds	r3, r7, #2
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	2202      	movs	r2, #2
 800767c:	4013      	ands	r3, r2
 800767e:	d010      	beq.n	80076a2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2244      	movs	r2, #68	; 0x44
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2241      	movs	r2, #65	; 0x41
 800768c:	5c9b      	ldrb	r3, [r3, r2]
 800768e:	b2db      	uxtb	r3, r3
 8007690:	001a      	movs	r2, r3
 8007692:	2328      	movs	r3, #40	; 0x28
 8007694:	4013      	ands	r3, r2
 8007696:	2b28      	cmp	r3, #40	; 0x28
 8007698:	d003      	beq.n	80076a2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	22b0      	movs	r2, #176	; 0xb0
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076a2:	1cbb      	adds	r3, r7, #2
 80076a4:	2200      	movs	r2, #0
 80076a6:	5e9b      	ldrsh	r3, [r3, r2]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	da03      	bge.n	80076b4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	22b8      	movs	r2, #184	; 0xb8
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076b4:	1cbb      	adds	r3, r7, #2
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	2b10      	cmp	r3, #16
 80076ba:	d103      	bne.n	80076c4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2290      	movs	r2, #144	; 0x90
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076c4:	1cbb      	adds	r3, r7, #2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	2b20      	cmp	r3, #32
 80076ca:	d103      	bne.n	80076d4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076d4:	1cbb      	adds	r3, r7, #2
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d103      	bne.n	80076e4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	43d9      	mvns	r1, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	400a      	ands	r2, r1
 80076f4:	601a      	str	r2, [r3, #0]
}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b004      	add	sp, #16
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2241      	movs	r2, #65	; 0x41
 800770e:	5c9b      	ldrb	r3, [r3, r2]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b20      	cmp	r3, #32
 8007714:	d138      	bne.n	8007788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2240      	movs	r2, #64	; 0x40
 800771a:	5c9b      	ldrb	r3, [r3, r2]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007720:	2302      	movs	r3, #2
 8007722:	e032      	b.n	800778a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	2101      	movs	r1, #1
 800772a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2241      	movs	r2, #65	; 0x41
 8007730:	2124      	movs	r1, #36	; 0x24
 8007732:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2101      	movs	r1, #1
 8007740:	438a      	bics	r2, r1
 8007742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4911      	ldr	r1, [pc, #68]	; (8007794 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007750:	400a      	ands	r2, r1
 8007752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6819      	ldr	r1, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2101      	movs	r1, #1
 8007770:	430a      	orrs	r2, r1
 8007772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2241      	movs	r2, #65	; 0x41
 8007778:	2120      	movs	r1, #32
 800777a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2240      	movs	r2, #64	; 0x40
 8007780:	2100      	movs	r1, #0
 8007782:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	e000      	b.n	800778a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007788:	2302      	movs	r3, #2
  }
}
 800778a:	0018      	movs	r0, r3
 800778c:	46bd      	mov	sp, r7
 800778e:	b002      	add	sp, #8
 8007790:	bd80      	pop	{r7, pc}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	ffffefff 	.word	0xffffefff

08007798 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2241      	movs	r2, #65	; 0x41
 80077a6:	5c9b      	ldrb	r3, [r3, r2]
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d139      	bne.n	8007822 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2240      	movs	r2, #64	; 0x40
 80077b2:	5c9b      	ldrb	r3, [r3, r2]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d101      	bne.n	80077bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077b8:	2302      	movs	r3, #2
 80077ba:	e033      	b.n	8007824 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2240      	movs	r2, #64	; 0x40
 80077c0:	2101      	movs	r1, #1
 80077c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2241      	movs	r2, #65	; 0x41
 80077c8:	2124      	movs	r1, #36	; 0x24
 80077ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2101      	movs	r1, #1
 80077d8:	438a      	bics	r2, r1
 80077da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4a11      	ldr	r2, [pc, #68]	; (800782c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	021b      	lsls	r3, r3, #8
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2101      	movs	r1, #1
 800780a:	430a      	orrs	r2, r1
 800780c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2241      	movs	r2, #65	; 0x41
 8007812:	2120      	movs	r1, #32
 8007814:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2240      	movs	r2, #64	; 0x40
 800781a:	2100      	movs	r1, #0
 800781c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800781e:	2300      	movs	r3, #0
 8007820:	e000      	b.n	8007824 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
  }
}
 8007824:	0018      	movs	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	b004      	add	sp, #16
 800782a:	bd80      	pop	{r7, pc}
 800782c:	fffff0ff 	.word	0xfffff0ff

08007830 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e0e5      	b.n	8007a0e <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2235      	movs	r2, #53	; 0x35
 8007846:	5c9b      	ldrb	r3, [r3, r2]
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d107      	bne.n	800785e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2234      	movs	r2, #52	; 0x34
 8007852:	2100      	movs	r1, #0
 8007854:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0018      	movs	r0, r3
 800785a:	f7fd fa4b 	bl	8004cf4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2235      	movs	r2, #53	; 0x35
 8007862:	2102      	movs	r1, #2
 8007864:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4969      	ldr	r1, [pc, #420]	; (8007a18 <HAL_I2S_Init+0x1e8>)
 8007872:	400a      	ands	r2, r1
 8007874:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2202      	movs	r2, #2
 800787c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d100      	bne.n	8007888 <HAL_I2S_Init+0x58>
 8007886:	e076      	b.n	8007976 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8007890:	2310      	movs	r3, #16
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e001      	b.n	800789a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007896:	2320      	movs	r3, #32
 8007898:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d802      	bhi.n	80078a8 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	011b      	lsls	r3, r3, #4
 80078ac:	0018      	movs	r0, r3
 80078ae:	f001 f95b 	bl	8008b68 <HAL_RCCEx_GetPeriphCLKFreq>
 80078b2:	0003      	movs	r3, r0
 80078b4:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PERIPHCLK_I2S2 */
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	2380      	movs	r3, #128	; 0x80
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	429a      	cmp	r2, r3
 80078c0:	d131      	bne.n	8007926 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d016      	beq.n	80078f8 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	0019      	movs	r1, r3
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7f8 fc17 	bl	8000104 <__udivsi3>
 80078d6:	0003      	movs	r3, r0
 80078d8:	001a      	movs	r2, r3
 80078da:	0013      	movs	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	189b      	adds	r3, r3, r2
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	001a      	movs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	0019      	movs	r1, r3
 80078ea:	0010      	movs	r0, r2
 80078ec:	f7f8 fc0a 	bl	8000104 <__udivsi3>
 80078f0:	0003      	movs	r3, r0
 80078f2:	3305      	adds	r3, #5
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	e02a      	b.n	800794e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	0019      	movs	r1, r3
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7f8 fc00 	bl	8000104 <__udivsi3>
 8007904:	0003      	movs	r3, r0
 8007906:	001a      	movs	r2, r3
 8007908:	0013      	movs	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	189b      	adds	r3, r3, r2
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	001a      	movs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	0019      	movs	r1, r3
 8007918:	0010      	movs	r0, r2
 800791a:	f7f8 fbf3 	bl	8000104 <__udivsi3>
 800791e:	0003      	movs	r3, r0
 8007920:	3305      	adds	r3, #5
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e013      	b.n	800794e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007926:	6979      	ldr	r1, [r7, #20]
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f7f8 fbeb 	bl	8000104 <__udivsi3>
 800792e:	0003      	movs	r3, r0
 8007930:	001a      	movs	r2, r3
 8007932:	0013      	movs	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	189b      	adds	r3, r3, r2
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	001a      	movs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	695b      	ldr	r3, [r3, #20]
 8007940:	0019      	movs	r1, r3
 8007942:	0010      	movs	r0, r2
 8007944:	f7f8 fbde 	bl	8000104 <__udivsi3>
 8007948:	0003      	movs	r3, r0
 800794a:	3305      	adds	r3, #5
 800794c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	210a      	movs	r1, #10
 8007952:	0018      	movs	r0, r3
 8007954:	f7f8 fbd6 	bl	8000104 <__udivsi3>
 8007958:	0003      	movs	r3, r0
 800795a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2201      	movs	r2, #1
 8007960:	4013      	ands	r3, r2
 8007962:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	085b      	lsrs	r3, r3, #1
 800796c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	021b      	lsls	r3, r3, #8
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	e003      	b.n	800797e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8007976:	2302      	movs	r3, #2
 8007978:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d902      	bls.n	800798a <HAL_I2S_Init+0x15a>
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	2bff      	cmp	r3, #255	; 0xff
 8007988:	d907      	bls.n	800799a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798e:	2210      	movs	r2, #16
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e039      	b.n	8007a0e <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	0011      	movs	r1, r2
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	69fa      	ldr	r2, [r7, #28]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <HAL_I2S_Init+0x1e8>)
 80079b6:	401a      	ands	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6859      	ldr	r1, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	4319      	orrs	r1, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	4319      	orrs	r1, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	430b      	orrs	r3, r1
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2180      	movs	r1, #128	; 0x80
 80079d6:	0109      	lsls	r1, r1, #4
 80079d8:	430a      	orrs	r2, r1
 80079da:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	2b30      	cmp	r3, #48	; 0x30
 80079e2:	d003      	beq.n	80079ec <HAL_I2S_Init+0x1bc>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2bb0      	cmp	r3, #176	; 0xb0
 80079ea:	d108      	bne.n	80079fe <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	69da      	ldr	r2, [r3, #28]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2180      	movs	r1, #128	; 0x80
 80079f8:	0149      	lsls	r1, r1, #5
 80079fa:	430a      	orrs	r2, r1
 80079fc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2235      	movs	r2, #53	; 0x35
 8007a08:	2101      	movs	r1, #1
 8007a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	0018      	movs	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	b008      	add	sp, #32
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	46c0      	nop			; (mov r8, r8)
 8007a18:	fffff040 	.word	0xfffff040

08007a1c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	1dbb      	adds	r3, r7, #6
 8007a28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <HAL_I2S_Transmit_DMA+0x1c>
 8007a30:	1dbb      	adds	r3, r7, #6
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_I2S_Transmit_DMA+0x20>
  {
    return  HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e091      	b.n	8007b60 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2234      	movs	r2, #52	; 0x34
 8007a40:	5c9b      	ldrb	r3, [r3, r2]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_I2S_Transmit_DMA+0x30>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e089      	b.n	8007b60 <HAL_I2S_Transmit_DMA+0x144>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2234      	movs	r2, #52	; 0x34
 8007a50:	2101      	movs	r1, #1
 8007a52:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2235      	movs	r2, #53	; 0x35
 8007a58:	5c9b      	ldrb	r3, [r3, r2]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d005      	beq.n	8007a6c <HAL_I2S_Transmit_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2234      	movs	r2, #52	; 0x34
 8007a64:	2100      	movs	r1, #0
 8007a66:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e079      	b.n	8007b60 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2235      	movs	r2, #53	; 0x35
 8007a70:	2103      	movs	r1, #3
 8007a72:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	2207      	movs	r2, #7
 8007a88:	4013      	ands	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d002      	beq.n	8007a98 <HAL_I2S_Transmit_DMA+0x7c>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d10c      	bne.n	8007ab2 <HAL_I2S_Transmit_DMA+0x96>
  {
    hi2s->TxXferSize = (Size << 1U);
 8007a98:	1dbb      	adds	r3, r7, #6
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	18db      	adds	r3, r3, r3
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 8007aa4:	1dbb      	adds	r3, r7, #6
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	18db      	adds	r3, r3, r3
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	845a      	strh	r2, [r3, #34]	; 0x22
 8007ab0:	e007      	b.n	8007ac2 <HAL_I2S_Transmit_DMA+0xa6>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1dba      	adds	r2, r7, #6
 8007ab6:	8812      	ldrh	r2, [r2, #0]
 8007ab8:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	1dba      	adds	r2, r7, #6
 8007abe:	8812      	ldrh	r2, [r2, #0]
 8007ac0:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac6:	4a28      	ldr	r2, [pc, #160]	; (8007b68 <HAL_I2S_Transmit_DMA+0x14c>)
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	4a27      	ldr	r2, [pc, #156]	; (8007b6c <HAL_I2S_Transmit_DMA+0x150>)
 8007ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4a26      	ldr	r2, [pc, #152]	; (8007b70 <HAL_I2S_Transmit_DMA+0x154>)
 8007ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007ae2:	0019      	movs	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007aea:	001a      	movs	r2, r3
                                 hi2s->TxXferSize))
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8c1b      	ldrh	r3, [r3, #32]
 8007af0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007af2:	f7fe f8d1 	bl	8005c98 <HAL_DMA_Start_IT>
 8007af6:	1e03      	subs	r3, r0, #0
 8007af8:	d00f      	beq.n	8007b1a <HAL_I2S_Transmit_DMA+0xfe>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	2208      	movs	r2, #8
 8007b00:	431a      	orrs	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2235      	movs	r2, #53	; 0x35
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2234      	movs	r2, #52	; 0x34
 8007b12:	2100      	movs	r1, #0
 8007b14:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e022      	b.n	8007b60 <HAL_I2S_Transmit_DMA+0x144>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	69da      	ldr	r2, [r3, #28]
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	4013      	ands	r3, r2
 8007b26:	d108      	bne.n	8007b3a <HAL_I2S_Transmit_DMA+0x11e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2180      	movs	r1, #128	; 0x80
 8007b34:	00c9      	lsls	r1, r1, #3
 8007b36:	430a      	orrs	r2, r1
 8007b38:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2202      	movs	r2, #2
 8007b42:	4013      	ands	r3, r2
 8007b44:	d107      	bne.n	8007b56 <HAL_I2S_Transmit_DMA+0x13a>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2102      	movs	r1, #2
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2234      	movs	r2, #52	; 0x34
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b006      	add	sp, #24
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	08007caf 	.word	0x08007caf
 8007b6c:	08007c6b 	.word	0x08007c6b
 8007b70:	08007ccd 	.word	0x08007ccd

08007b74 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	099b      	lsrs	r3, r3, #6
 8007b90:	001a      	movs	r2, r3
 8007b92:	2301      	movs	r3, #1
 8007b94:	4013      	ands	r3, r2
 8007b96:	d10e      	bne.n	8007bb6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	099b      	lsrs	r3, r3, #6
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 f8e2 	bl	8007d78 <I2S_Receive_IT>
    return;
 8007bb4:	e046      	b.n	8007c44 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	085b      	lsrs	r3, r3, #1
 8007bba:	001a      	movs	r2, r3
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_I2S_IRQHandler+0x64>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	09db      	lsrs	r3, r3, #7
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d004      	beq.n	8007bd8 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 f8a2 	bl	8007d1a <I2S_Transmit_IT>
    return;
 8007bd6:	e035      	b.n	8007c44 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	095b      	lsrs	r3, r3, #5
 8007bdc:	001a      	movs	r2, r3
 8007bde:	2301      	movs	r3, #1
 8007be0:	4013      	ands	r3, r2
 8007be2:	d02f      	beq.n	8007c44 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	099b      	lsrs	r3, r3, #6
 8007be8:	001a      	movs	r2, r3
 8007bea:	2301      	movs	r3, #1
 8007bec:	4013      	ands	r3, r2
 8007bee:	d00d      	beq.n	8007c0c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2160      	movs	r1, #96	; 0x60
 8007bfc:	438a      	bics	r2, r1
 8007bfe:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	2202      	movs	r2, #2
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	08db      	lsrs	r3, r3, #3
 8007c10:	001a      	movs	r2, r3
 8007c12:	2301      	movs	r3, #1
 8007c14:	4013      	ands	r3, r2
 8007c16:	d00d      	beq.n	8007c34 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	21a0      	movs	r1, #160	; 0xa0
 8007c24:	438a      	bics	r2, r1
 8007c26:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2235      	movs	r2, #53	; 0x35
 8007c38:	2101      	movs	r1, #1
 8007c3a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f000 f80b 	bl	8007c5a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b004      	add	sp, #16
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b002      	add	sp, #8
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b002      	add	sp, #8
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10e      	bne.n	8007c9e <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2102      	movs	r1, #2
 8007c8c:	438a      	bics	r2, r1
 8007c8e:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2235      	movs	r2, #53	; 0x35
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7f9 fa69 	bl	8001178 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	b004      	add	sp, #16
 8007cac:	bd80      	pop	{r7, pc}

08007cae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b084      	sub	sp, #16
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f7f9 fa50 	bl	8001164 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007cc4:	46c0      	nop			; (mov r8, r8)
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b004      	add	sp, #16
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685a      	ldr	r2, [r3, #4]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2103      	movs	r1, #3
 8007ce6:	438a      	bics	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2235      	movs	r2, #53	; 0x35
 8007cfa:	2101      	movs	r1, #1
 8007cfc:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	2208      	movs	r2, #8
 8007d04:	431a      	orrs	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f7ff ffa4 	bl	8007c5a <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b004      	add	sp, #16
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	881a      	ldrh	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	1c9a      	adds	r2, r3, #2
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10f      	bne.n	8007d70 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	21a0      	movs	r1, #160	; 0xa0
 8007d5c:	438a      	bics	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2235      	movs	r2, #53	; 0x35
 8007d64:	2101      	movs	r1, #1
 8007d66:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f7f9 fa04 	bl	8001178 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007d70:	46c0      	nop			; (mov r8, r8)
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b002      	add	sp, #8
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	b292      	uxth	r2, r2
 8007d8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	1c9a      	adds	r2, r3, #2
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10f      	bne.n	8007dd0 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2160      	movs	r1, #96	; 0x60
 8007dbc:	438a      	bics	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2235      	movs	r2, #53	; 0x35
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	0018      	movs	r0, r3
 8007dcc:	f7ff ff3d 	bl	8007c4a <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007dd0:	46c0      	nop			; (mov r8, r8)
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	b002      	add	sp, #8
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007de0:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	0019      	movs	r1, r3
 8007dea:	4b17      	ldr	r3, [pc, #92]	; (8007e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	2380      	movs	r3, #128	; 0x80
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d11f      	bne.n	8007e3c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007dfc:	4b14      	ldr	r3, [pc, #80]	; (8007e50 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	0013      	movs	r3, r2
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	189b      	adds	r3, r3, r2
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	4912      	ldr	r1, [pc, #72]	; (8007e54 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f7f8 f97a 	bl	8000104 <__udivsi3>
 8007e10:	0003      	movs	r3, r0
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e16:	e008      	b.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3b01      	subs	r3, #1
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e001      	b.n	8007e2a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e009      	b.n	8007e3e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	2380      	movs	r3, #128	; 0x80
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	401a      	ands	r2, r3
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d0ed      	beq.n	8007e18 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	0018      	movs	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b004      	add	sp, #16
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	40007000 	.word	0x40007000
 8007e4c:	fffff9ff 	.word	0xfffff9ff
 8007e50:	20000034 	.word	0x20000034
 8007e54:	000f4240 	.word	0x000f4240

08007e58 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007e5c:	4b03      	ldr	r3, [pc, #12]	; (8007e6c <LL_RCC_GetAPB1Prescaler+0x14>)
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	23e0      	movs	r3, #224	; 0xe0
 8007e62:	01db      	lsls	r3, r3, #7
 8007e64:	4013      	ands	r3, r2
}
 8007e66:	0018      	movs	r0, r3
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	40021000 	.word	0x40021000

08007e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e2fe      	b.n	8008480 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2201      	movs	r2, #1
 8007e88:	4013      	ands	r3, r2
 8007e8a:	d100      	bne.n	8007e8e <HAL_RCC_OscConfig+0x1e>
 8007e8c:	e07c      	b.n	8007f88 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e8e:	4bc3      	ldr	r3, [pc, #780]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2238      	movs	r2, #56	; 0x38
 8007e94:	4013      	ands	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e98:	4bc0      	ldr	r3, [pc, #768]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	2203      	movs	r2, #3
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	2b10      	cmp	r3, #16
 8007ea6:	d102      	bne.n	8007eae <HAL_RCC_OscConfig+0x3e>
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d002      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d10b      	bne.n	8007ecc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007eb4:	4bb9      	ldr	r3, [pc, #740]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	2380      	movs	r3, #128	; 0x80
 8007eba:	029b      	lsls	r3, r3, #10
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d062      	beq.n	8007f86 <HAL_RCC_OscConfig+0x116>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d15e      	bne.n	8007f86 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e2d9      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	2380      	movs	r3, #128	; 0x80
 8007ed2:	025b      	lsls	r3, r3, #9
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d107      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x78>
 8007ed8:	4bb0      	ldr	r3, [pc, #704]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	4baf      	ldr	r3, [pc, #700]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	0249      	lsls	r1, r1, #9
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e020      	b.n	8007f2a <HAL_RCC_OscConfig+0xba>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	23a0      	movs	r3, #160	; 0xa0
 8007eee:	02db      	lsls	r3, r3, #11
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d10e      	bne.n	8007f12 <HAL_RCC_OscConfig+0xa2>
 8007ef4:	4ba9      	ldr	r3, [pc, #676]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	4ba8      	ldr	r3, [pc, #672]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007efa:	2180      	movs	r1, #128	; 0x80
 8007efc:	02c9      	lsls	r1, r1, #11
 8007efe:	430a      	orrs	r2, r1
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	4ba6      	ldr	r3, [pc, #664]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4ba5      	ldr	r3, [pc, #660]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f08:	2180      	movs	r1, #128	; 0x80
 8007f0a:	0249      	lsls	r1, r1, #9
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e00b      	b.n	8007f2a <HAL_RCC_OscConfig+0xba>
 8007f12:	4ba2      	ldr	r3, [pc, #648]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	4ba1      	ldr	r3, [pc, #644]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f18:	49a1      	ldr	r1, [pc, #644]	; (80081a0 <HAL_RCC_OscConfig+0x330>)
 8007f1a:	400a      	ands	r2, r1
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	4b9f      	ldr	r3, [pc, #636]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4b9e      	ldr	r3, [pc, #632]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f24:	499f      	ldr	r1, [pc, #636]	; (80081a4 <HAL_RCC_OscConfig+0x334>)
 8007f26:	400a      	ands	r2, r1
 8007f28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d014      	beq.n	8007f5c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f32:	f7fd faa5 	bl	8005480 <HAL_GetTick>
 8007f36:	0003      	movs	r3, r0
 8007f38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f3a:	e008      	b.n	8007f4e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f3c:	f7fd faa0 	bl	8005480 <HAL_GetTick>
 8007f40:	0002      	movs	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	2b64      	cmp	r3, #100	; 0x64
 8007f48:	d901      	bls.n	8007f4e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e298      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f4e:	4b93      	ldr	r3, [pc, #588]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	2380      	movs	r3, #128	; 0x80
 8007f54:	029b      	lsls	r3, r3, #10
 8007f56:	4013      	ands	r3, r2
 8007f58:	d0f0      	beq.n	8007f3c <HAL_RCC_OscConfig+0xcc>
 8007f5a:	e015      	b.n	8007f88 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5c:	f7fd fa90 	bl	8005480 <HAL_GetTick>
 8007f60:	0003      	movs	r3, r0
 8007f62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f64:	e008      	b.n	8007f78 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f66:	f7fd fa8b 	bl	8005480 <HAL_GetTick>
 8007f6a:	0002      	movs	r2, r0
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	2b64      	cmp	r3, #100	; 0x64
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e283      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f78:	4b88      	ldr	r3, [pc, #544]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	2380      	movs	r3, #128	; 0x80
 8007f7e:	029b      	lsls	r3, r3, #10
 8007f80:	4013      	ands	r3, r2
 8007f82:	d1f0      	bne.n	8007f66 <HAL_RCC_OscConfig+0xf6>
 8007f84:	e000      	b.n	8007f88 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	4013      	ands	r3, r2
 8007f90:	d100      	bne.n	8007f94 <HAL_RCC_OscConfig+0x124>
 8007f92:	e099      	b.n	80080c8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f94:	4b81      	ldr	r3, [pc, #516]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	2238      	movs	r2, #56	; 0x38
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f9e:	4b7f      	ldr	r3, [pc, #508]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d102      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x144>
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d002      	beq.n	8007fba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d135      	bne.n	8008026 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fba:	4b78      	ldr	r3, [pc, #480]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	2380      	movs	r3, #128	; 0x80
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	d005      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x162>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e256      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fd2:	4b72      	ldr	r3, [pc, #456]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	4a74      	ldr	r2, [pc, #464]	; (80081a8 <HAL_RCC_OscConfig+0x338>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	0019      	movs	r1, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	021a      	lsls	r2, r3, #8
 8007fe2:	4b6e      	ldr	r3, [pc, #440]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d112      	bne.n	8008014 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fee:	4b6b      	ldr	r3, [pc, #428]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a6e      	ldr	r2, [pc, #440]	; (80081ac <HAL_RCC_OscConfig+0x33c>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	0019      	movs	r1, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691a      	ldr	r2, [r3, #16]
 8007ffc:	4b67      	ldr	r3, [pc, #412]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8007ffe:	430a      	orrs	r2, r1
 8008000:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008002:	4b66      	ldr	r3, [pc, #408]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	0adb      	lsrs	r3, r3, #11
 8008008:	2207      	movs	r2, #7
 800800a:	4013      	ands	r3, r2
 800800c:	4a68      	ldr	r2, [pc, #416]	; (80081b0 <HAL_RCC_OscConfig+0x340>)
 800800e:	40da      	lsrs	r2, r3
 8008010:	4b68      	ldr	r3, [pc, #416]	; (80081b4 <HAL_RCC_OscConfig+0x344>)
 8008012:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008014:	4b68      	ldr	r3, [pc, #416]	; (80081b8 <HAL_RCC_OscConfig+0x348>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0018      	movs	r0, r3
 800801a:	f7fd f9d5 	bl	80053c8 <HAL_InitTick>
 800801e:	1e03      	subs	r3, r0, #0
 8008020:	d051      	beq.n	80080c6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e22c      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d030      	beq.n	8008090 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800802e:	4b5b      	ldr	r3, [pc, #364]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a5e      	ldr	r2, [pc, #376]	; (80081ac <HAL_RCC_OscConfig+0x33c>)
 8008034:	4013      	ands	r3, r2
 8008036:	0019      	movs	r1, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	4b57      	ldr	r3, [pc, #348]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 800803e:	430a      	orrs	r2, r1
 8008040:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008042:	4b56      	ldr	r3, [pc, #344]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	4b55      	ldr	r3, [pc, #340]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008048:	2180      	movs	r1, #128	; 0x80
 800804a:	0049      	lsls	r1, r1, #1
 800804c:	430a      	orrs	r2, r1
 800804e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008050:	f7fd fa16 	bl	8005480 <HAL_GetTick>
 8008054:	0003      	movs	r3, r0
 8008056:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800805a:	f7fd fa11 	bl	8005480 <HAL_GetTick>
 800805e:	0002      	movs	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e209      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800806c:	4b4b      	ldr	r3, [pc, #300]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	2380      	movs	r3, #128	; 0x80
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	4013      	ands	r3, r2
 8008076:	d0f0      	beq.n	800805a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008078:	4b48      	ldr	r3, [pc, #288]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4a4a      	ldr	r2, [pc, #296]	; (80081a8 <HAL_RCC_OscConfig+0x338>)
 800807e:	4013      	ands	r3, r2
 8008080:	0019      	movs	r1, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	4b44      	ldr	r3, [pc, #272]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 800808a:	430a      	orrs	r2, r1
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	e01b      	b.n	80080c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008090:	4b42      	ldr	r3, [pc, #264]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b41      	ldr	r3, [pc, #260]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008096:	4949      	ldr	r1, [pc, #292]	; (80081bc <HAL_RCC_OscConfig+0x34c>)
 8008098:	400a      	ands	r2, r1
 800809a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809c:	f7fd f9f0 	bl	8005480 <HAL_GetTick>
 80080a0:	0003      	movs	r3, r0
 80080a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080a6:	f7fd f9eb 	bl	8005480 <HAL_GetTick>
 80080aa:	0002      	movs	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e1e3      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80080b8:	4b38      	ldr	r3, [pc, #224]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	2380      	movs	r3, #128	; 0x80
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4013      	ands	r3, r2
 80080c2:	d1f0      	bne.n	80080a6 <HAL_RCC_OscConfig+0x236>
 80080c4:	e000      	b.n	80080c8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2208      	movs	r2, #8
 80080ce:	4013      	ands	r3, r2
 80080d0:	d047      	beq.n	8008162 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80080d2:	4b32      	ldr	r3, [pc, #200]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2238      	movs	r2, #56	; 0x38
 80080d8:	4013      	ands	r3, r2
 80080da:	2b18      	cmp	r3, #24
 80080dc:	d10a      	bne.n	80080f4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80080de:	4b2f      	ldr	r3, [pc, #188]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 80080e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e2:	2202      	movs	r2, #2
 80080e4:	4013      	ands	r3, r2
 80080e6:	d03c      	beq.n	8008162 <HAL_RCC_OscConfig+0x2f2>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d138      	bne.n	8008162 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e1c5      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d019      	beq.n	8008130 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80080fc:	4b27      	ldr	r3, [pc, #156]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 80080fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008100:	4b26      	ldr	r3, [pc, #152]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008102:	2101      	movs	r1, #1
 8008104:	430a      	orrs	r2, r1
 8008106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fd f9ba 	bl	8005480 <HAL_GetTick>
 800810c:	0003      	movs	r3, r0
 800810e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008110:	e008      	b.n	8008124 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008112:	f7fd f9b5 	bl	8005480 <HAL_GetTick>
 8008116:	0002      	movs	r2, r0
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e1ad      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008124:	4b1d      	ldr	r3, [pc, #116]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008128:	2202      	movs	r2, #2
 800812a:	4013      	ands	r3, r2
 800812c:	d0f1      	beq.n	8008112 <HAL_RCC_OscConfig+0x2a2>
 800812e:	e018      	b.n	8008162 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008134:	4b19      	ldr	r3, [pc, #100]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008136:	2101      	movs	r1, #1
 8008138:	438a      	bics	r2, r1
 800813a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813c:	f7fd f9a0 	bl	8005480 <HAL_GetTick>
 8008140:	0003      	movs	r3, r0
 8008142:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008144:	e008      	b.n	8008158 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008146:	f7fd f99b 	bl	8005480 <HAL_GetTick>
 800814a:	0002      	movs	r2, r0
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e193      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008158:	4b10      	ldr	r3, [pc, #64]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	2202      	movs	r2, #2
 800815e:	4013      	ands	r3, r2
 8008160:	d1f1      	bne.n	8008146 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2204      	movs	r2, #4
 8008168:	4013      	ands	r3, r2
 800816a:	d100      	bne.n	800816e <HAL_RCC_OscConfig+0x2fe>
 800816c:	e0c6      	b.n	80082fc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800816e:	231f      	movs	r3, #31
 8008170:	18fb      	adds	r3, r7, r3
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008176:	4b09      	ldr	r3, [pc, #36]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2238      	movs	r2, #56	; 0x38
 800817c:	4013      	ands	r3, r2
 800817e:	2b20      	cmp	r3, #32
 8008180:	d11e      	bne.n	80081c0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008182:	4b06      	ldr	r3, [pc, #24]	; (800819c <HAL_RCC_OscConfig+0x32c>)
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	2202      	movs	r2, #2
 8008188:	4013      	ands	r3, r2
 800818a:	d100      	bne.n	800818e <HAL_RCC_OscConfig+0x31e>
 800818c:	e0b6      	b.n	80082fc <HAL_RCC_OscConfig+0x48c>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d000      	beq.n	8008198 <HAL_RCC_OscConfig+0x328>
 8008196:	e0b1      	b.n	80082fc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e171      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
 800819c:	40021000 	.word	0x40021000
 80081a0:	fffeffff 	.word	0xfffeffff
 80081a4:	fffbffff 	.word	0xfffbffff
 80081a8:	ffff80ff 	.word	0xffff80ff
 80081ac:	ffffc7ff 	.word	0xffffc7ff
 80081b0:	00f42400 	.word	0x00f42400
 80081b4:	20000034 	.word	0x20000034
 80081b8:	20000038 	.word	0x20000038
 80081bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80081c0:	4bb1      	ldr	r3, [pc, #708]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80081c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	055b      	lsls	r3, r3, #21
 80081c8:	4013      	ands	r3, r2
 80081ca:	d101      	bne.n	80081d0 <HAL_RCC_OscConfig+0x360>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_RCC_OscConfig+0x362>
 80081d0:	2300      	movs	r3, #0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d011      	beq.n	80081fa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80081d6:	4bac      	ldr	r3, [pc, #688]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80081d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081da:	4bab      	ldr	r3, [pc, #684]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80081dc:	2180      	movs	r1, #128	; 0x80
 80081de:	0549      	lsls	r1, r1, #21
 80081e0:	430a      	orrs	r2, r1
 80081e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80081e4:	4ba8      	ldr	r3, [pc, #672]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80081e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081e8:	2380      	movs	r3, #128	; 0x80
 80081ea:	055b      	lsls	r3, r3, #21
 80081ec:	4013      	ands	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80081f2:	231f      	movs	r3, #31
 80081f4:	18fb      	adds	r3, r7, r3
 80081f6:	2201      	movs	r2, #1
 80081f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081fa:	4ba4      	ldr	r3, [pc, #656]	; (800848c <HAL_RCC_OscConfig+0x61c>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	2380      	movs	r3, #128	; 0x80
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	4013      	ands	r3, r2
 8008204:	d11a      	bne.n	800823c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008206:	4ba1      	ldr	r3, [pc, #644]	; (800848c <HAL_RCC_OscConfig+0x61c>)
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	4ba0      	ldr	r3, [pc, #640]	; (800848c <HAL_RCC_OscConfig+0x61c>)
 800820c:	2180      	movs	r1, #128	; 0x80
 800820e:	0049      	lsls	r1, r1, #1
 8008210:	430a      	orrs	r2, r1
 8008212:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008214:	f7fd f934 	bl	8005480 <HAL_GetTick>
 8008218:	0003      	movs	r3, r0
 800821a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800821c:	e008      	b.n	8008230 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800821e:	f7fd f92f 	bl	8005480 <HAL_GetTick>
 8008222:	0002      	movs	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e127      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008230:	4b96      	ldr	r3, [pc, #600]	; (800848c <HAL_RCC_OscConfig+0x61c>)
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	2380      	movs	r3, #128	; 0x80
 8008236:	005b      	lsls	r3, r3, #1
 8008238:	4013      	ands	r3, r2
 800823a:	d0f0      	beq.n	800821e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d106      	bne.n	8008252 <HAL_RCC_OscConfig+0x3e2>
 8008244:	4b90      	ldr	r3, [pc, #576]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008248:	4b8f      	ldr	r3, [pc, #572]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800824a:	2101      	movs	r1, #1
 800824c:	430a      	orrs	r2, r1
 800824e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008250:	e01c      	b.n	800828c <HAL_RCC_OscConfig+0x41c>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	2b05      	cmp	r3, #5
 8008258:	d10c      	bne.n	8008274 <HAL_RCC_OscConfig+0x404>
 800825a:	4b8b      	ldr	r3, [pc, #556]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800825c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800825e:	4b8a      	ldr	r3, [pc, #552]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008260:	2104      	movs	r1, #4
 8008262:	430a      	orrs	r2, r1
 8008264:	65da      	str	r2, [r3, #92]	; 0x5c
 8008266:	4b88      	ldr	r3, [pc, #544]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008268:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800826a:	4b87      	ldr	r3, [pc, #540]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800826c:	2101      	movs	r1, #1
 800826e:	430a      	orrs	r2, r1
 8008270:	65da      	str	r2, [r3, #92]	; 0x5c
 8008272:	e00b      	b.n	800828c <HAL_RCC_OscConfig+0x41c>
 8008274:	4b84      	ldr	r3, [pc, #528]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008276:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008278:	4b83      	ldr	r3, [pc, #524]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800827a:	2101      	movs	r1, #1
 800827c:	438a      	bics	r2, r1
 800827e:	65da      	str	r2, [r3, #92]	; 0x5c
 8008280:	4b81      	ldr	r3, [pc, #516]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008282:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008284:	4b80      	ldr	r3, [pc, #512]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008286:	2104      	movs	r1, #4
 8008288:	438a      	bics	r2, r1
 800828a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d014      	beq.n	80082be <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008294:	f7fd f8f4 	bl	8005480 <HAL_GetTick>
 8008298:	0003      	movs	r3, r0
 800829a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800829c:	e009      	b.n	80082b2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829e:	f7fd f8ef 	bl	8005480 <HAL_GetTick>
 80082a2:	0002      	movs	r2, r0
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	4a79      	ldr	r2, [pc, #484]	; (8008490 <HAL_RCC_OscConfig+0x620>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e0e6      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082b2:	4b75      	ldr	r3, [pc, #468]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80082b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b6:	2202      	movs	r2, #2
 80082b8:	4013      	ands	r3, r2
 80082ba:	d0f0      	beq.n	800829e <HAL_RCC_OscConfig+0x42e>
 80082bc:	e013      	b.n	80082e6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fd f8df 	bl	8005480 <HAL_GetTick>
 80082c2:	0003      	movs	r3, r0
 80082c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082c6:	e009      	b.n	80082dc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c8:	f7fd f8da 	bl	8005480 <HAL_GetTick>
 80082cc:	0002      	movs	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	4a6f      	ldr	r2, [pc, #444]	; (8008490 <HAL_RCC_OscConfig+0x620>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e0d1      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082dc:	4b6a      	ldr	r3, [pc, #424]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80082de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082e0:	2202      	movs	r2, #2
 80082e2:	4013      	ands	r3, r2
 80082e4:	d1f0      	bne.n	80082c8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80082e6:	231f      	movs	r3, #31
 80082e8:	18fb      	adds	r3, r7, r3
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d105      	bne.n	80082fc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80082f0:	4b65      	ldr	r3, [pc, #404]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80082f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f4:	4b64      	ldr	r3, [pc, #400]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80082f6:	4967      	ldr	r1, [pc, #412]	; (8008494 <HAL_RCC_OscConfig+0x624>)
 80082f8:	400a      	ands	r2, r1
 80082fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d100      	bne.n	8008306 <HAL_RCC_OscConfig+0x496>
 8008304:	e0bb      	b.n	800847e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008306:	4b60      	ldr	r3, [pc, #384]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2238      	movs	r2, #56	; 0x38
 800830c:	4013      	ands	r3, r2
 800830e:	2b10      	cmp	r3, #16
 8008310:	d100      	bne.n	8008314 <HAL_RCC_OscConfig+0x4a4>
 8008312:	e07b      	b.n	800840c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	2b02      	cmp	r3, #2
 800831a:	d156      	bne.n	80083ca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800831c:	4b5a      	ldr	r3, [pc, #360]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4b59      	ldr	r3, [pc, #356]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008322:	495d      	ldr	r1, [pc, #372]	; (8008498 <HAL_RCC_OscConfig+0x628>)
 8008324:	400a      	ands	r2, r1
 8008326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008328:	f7fd f8aa 	bl	8005480 <HAL_GetTick>
 800832c:	0003      	movs	r3, r0
 800832e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008330:	e008      	b.n	8008344 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008332:	f7fd f8a5 	bl	8005480 <HAL_GetTick>
 8008336:	0002      	movs	r2, r0
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	2b02      	cmp	r3, #2
 800833e:	d901      	bls.n	8008344 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008340:	2303      	movs	r3, #3
 8008342:	e09d      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008344:	4b50      	ldr	r3, [pc, #320]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	049b      	lsls	r3, r3, #18
 800834c:	4013      	ands	r3, r2
 800834e:	d1f0      	bne.n	8008332 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008350:	4b4d      	ldr	r3, [pc, #308]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4a51      	ldr	r2, [pc, #324]	; (800849c <HAL_RCC_OscConfig+0x62c>)
 8008356:	4013      	ands	r3, r2
 8008358:	0019      	movs	r1, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1a      	ldr	r2, [r3, #32]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	431a      	orrs	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	431a      	orrs	r2, r3
 800837e:	4b42      	ldr	r3, [pc, #264]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008380:	430a      	orrs	r2, r1
 8008382:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008384:	4b40      	ldr	r3, [pc, #256]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	4b3f      	ldr	r3, [pc, #252]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800838a:	2180      	movs	r1, #128	; 0x80
 800838c:	0449      	lsls	r1, r1, #17
 800838e:	430a      	orrs	r2, r1
 8008390:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008392:	4b3d      	ldr	r3, [pc, #244]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	4b3c      	ldr	r3, [pc, #240]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008398:	2180      	movs	r1, #128	; 0x80
 800839a:	0549      	lsls	r1, r1, #21
 800839c:	430a      	orrs	r2, r1
 800839e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a0:	f7fd f86e 	bl	8005480 <HAL_GetTick>
 80083a4:	0003      	movs	r3, r0
 80083a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083a8:	e008      	b.n	80083bc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083aa:	f7fd f869 	bl	8005480 <HAL_GetTick>
 80083ae:	0002      	movs	r2, r0
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d901      	bls.n	80083bc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e061      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083bc:	4b32      	ldr	r3, [pc, #200]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	2380      	movs	r3, #128	; 0x80
 80083c2:	049b      	lsls	r3, r3, #18
 80083c4:	4013      	ands	r3, r2
 80083c6:	d0f0      	beq.n	80083aa <HAL_RCC_OscConfig+0x53a>
 80083c8:	e059      	b.n	800847e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ca:	4b2f      	ldr	r3, [pc, #188]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b2e      	ldr	r3, [pc, #184]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80083d0:	4931      	ldr	r1, [pc, #196]	; (8008498 <HAL_RCC_OscConfig+0x628>)
 80083d2:	400a      	ands	r2, r1
 80083d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d6:	f7fd f853 	bl	8005480 <HAL_GetTick>
 80083da:	0003      	movs	r3, r0
 80083dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083e0:	f7fd f84e 	bl	8005480 <HAL_GetTick>
 80083e4:	0002      	movs	r2, r0
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e046      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083f2:	4b25      	ldr	r3, [pc, #148]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	2380      	movs	r3, #128	; 0x80
 80083f8:	049b      	lsls	r3, r3, #18
 80083fa:	4013      	ands	r3, r2
 80083fc:	d1f0      	bne.n	80083e0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80083fe:	4b22      	ldr	r3, [pc, #136]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	4b21      	ldr	r3, [pc, #132]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 8008404:	4926      	ldr	r1, [pc, #152]	; (80084a0 <HAL_RCC_OscConfig+0x630>)
 8008406:	400a      	ands	r2, r1
 8008408:	60da      	str	r2, [r3, #12]
 800840a:	e038      	b.n	800847e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e033      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008418:	4b1b      	ldr	r3, [pc, #108]	; (8008488 <HAL_RCC_OscConfig+0x618>)
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2203      	movs	r2, #3
 8008422:	401a      	ands	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a1b      	ldr	r3, [r3, #32]
 8008428:	429a      	cmp	r2, r3
 800842a:	d126      	bne.n	800847a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	2270      	movs	r2, #112	; 0x70
 8008430:	401a      	ands	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008436:	429a      	cmp	r2, r3
 8008438:	d11f      	bne.n	800847a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	23fe      	movs	r3, #254	; 0xfe
 800843e:	01db      	lsls	r3, r3, #7
 8008440:	401a      	ands	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008446:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008448:	429a      	cmp	r2, r3
 800844a:	d116      	bne.n	800847a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	23f8      	movs	r3, #248	; 0xf8
 8008450:	039b      	lsls	r3, r3, #14
 8008452:	401a      	ands	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008458:	429a      	cmp	r2, r3
 800845a:	d10e      	bne.n	800847a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	23e0      	movs	r3, #224	; 0xe0
 8008460:	051b      	lsls	r3, r3, #20
 8008462:	401a      	ands	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008468:	429a      	cmp	r2, r3
 800846a:	d106      	bne.n	800847a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	0f5b      	lsrs	r3, r3, #29
 8008470:	075a      	lsls	r2, r3, #29
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008476:	429a      	cmp	r2, r3
 8008478:	d001      	beq.n	800847e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	0018      	movs	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	b008      	add	sp, #32
 8008486:	bd80      	pop	{r7, pc}
 8008488:	40021000 	.word	0x40021000
 800848c:	40007000 	.word	0x40007000
 8008490:	00001388 	.word	0x00001388
 8008494:	efffffff 	.word	0xefffffff
 8008498:	feffffff 	.word	0xfeffffff
 800849c:	11c1808c 	.word	0x11c1808c
 80084a0:	eefefffc 	.word	0xeefefffc

080084a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0e9      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084b8:	4b76      	ldr	r3, [pc, #472]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2207      	movs	r2, #7
 80084be:	4013      	ands	r3, r2
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d91e      	bls.n	8008504 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084c6:	4b73      	ldr	r3, [pc, #460]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2207      	movs	r2, #7
 80084cc:	4393      	bics	r3, r2
 80084ce:	0019      	movs	r1, r3
 80084d0:	4b70      	ldr	r3, [pc, #448]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084d8:	f7fc ffd2 	bl	8005480 <HAL_GetTick>
 80084dc:	0003      	movs	r3, r0
 80084de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084e0:	e009      	b.n	80084f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084e2:	f7fc ffcd 	bl	8005480 <HAL_GetTick>
 80084e6:	0002      	movs	r2, r0
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	4a6a      	ldr	r2, [pc, #424]	; (8008698 <HAL_RCC_ClockConfig+0x1f4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e0ca      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084f6:	4b67      	ldr	r3, [pc, #412]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2207      	movs	r2, #7
 80084fc:	4013      	ands	r3, r2
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d1ee      	bne.n	80084e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2202      	movs	r2, #2
 800850a:	4013      	ands	r3, r2
 800850c:	d015      	beq.n	800853a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2204      	movs	r2, #4
 8008514:	4013      	ands	r3, r2
 8008516:	d006      	beq.n	8008526 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008518:	4b60      	ldr	r3, [pc, #384]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 800851a:	689a      	ldr	r2, [r3, #8]
 800851c:	4b5f      	ldr	r3, [pc, #380]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 800851e:	21e0      	movs	r1, #224	; 0xe0
 8008520:	01c9      	lsls	r1, r1, #7
 8008522:	430a      	orrs	r2, r1
 8008524:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008526:	4b5d      	ldr	r3, [pc, #372]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	4a5d      	ldr	r2, [pc, #372]	; (80086a0 <HAL_RCC_ClockConfig+0x1fc>)
 800852c:	4013      	ands	r3, r2
 800852e:	0019      	movs	r1, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	4b59      	ldr	r3, [pc, #356]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 8008536:	430a      	orrs	r2, r1
 8008538:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2201      	movs	r2, #1
 8008540:	4013      	ands	r3, r2
 8008542:	d057      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d107      	bne.n	800855c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800854c:	4b53      	ldr	r3, [pc, #332]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	029b      	lsls	r3, r3, #10
 8008554:	4013      	ands	r3, r2
 8008556:	d12b      	bne.n	80085b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e097      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d107      	bne.n	8008574 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008564:	4b4d      	ldr	r3, [pc, #308]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	2380      	movs	r3, #128	; 0x80
 800856a:	049b      	lsls	r3, r3, #18
 800856c:	4013      	ands	r3, r2
 800856e:	d11f      	bne.n	80085b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e08b      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d107      	bne.n	800858c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800857c:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	2380      	movs	r3, #128	; 0x80
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	4013      	ands	r3, r2
 8008586:	d113      	bne.n	80085b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e07f      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d106      	bne.n	80085a2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008594:	4b41      	ldr	r3, [pc, #260]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 8008596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008598:	2202      	movs	r2, #2
 800859a:	4013      	ands	r3, r2
 800859c:	d108      	bne.n	80085b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e074      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a2:	4b3e      	ldr	r3, [pc, #248]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 80085a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a6:	2202      	movs	r2, #2
 80085a8:	4013      	ands	r3, r2
 80085aa:	d101      	bne.n	80085b0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e06d      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085b0:	4b3a      	ldr	r3, [pc, #232]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2207      	movs	r2, #7
 80085b6:	4393      	bics	r3, r2
 80085b8:	0019      	movs	r1, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685a      	ldr	r2, [r3, #4]
 80085be:	4b37      	ldr	r3, [pc, #220]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 80085c0:	430a      	orrs	r2, r1
 80085c2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085c4:	f7fc ff5c 	bl	8005480 <HAL_GetTick>
 80085c8:	0003      	movs	r3, r0
 80085ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085cc:	e009      	b.n	80085e2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085ce:	f7fc ff57 	bl	8005480 <HAL_GetTick>
 80085d2:	0002      	movs	r2, r0
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	4a2f      	ldr	r2, [pc, #188]	; (8008698 <HAL_RCC_ClockConfig+0x1f4>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e054      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e2:	4b2e      	ldr	r3, [pc, #184]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2238      	movs	r2, #56	; 0x38
 80085e8:	401a      	ands	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d1ec      	bne.n	80085ce <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085f4:	4b27      	ldr	r3, [pc, #156]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2207      	movs	r2, #7
 80085fa:	4013      	ands	r3, r2
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d21e      	bcs.n	8008640 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008602:	4b24      	ldr	r3, [pc, #144]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2207      	movs	r2, #7
 8008608:	4393      	bics	r3, r2
 800860a:	0019      	movs	r1, r3
 800860c:	4b21      	ldr	r3, [pc, #132]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	430a      	orrs	r2, r1
 8008612:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008614:	f7fc ff34 	bl	8005480 <HAL_GetTick>
 8008618:	0003      	movs	r3, r0
 800861a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800861c:	e009      	b.n	8008632 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800861e:	f7fc ff2f 	bl	8005480 <HAL_GetTick>
 8008622:	0002      	movs	r2, r0
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	4a1b      	ldr	r2, [pc, #108]	; (8008698 <HAL_RCC_ClockConfig+0x1f4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d901      	bls.n	8008632 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e02c      	b.n	800868c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008632:	4b18      	ldr	r3, [pc, #96]	; (8008694 <HAL_RCC_ClockConfig+0x1f0>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2207      	movs	r2, #7
 8008638:	4013      	ands	r3, r2
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d1ee      	bne.n	800861e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2204      	movs	r2, #4
 8008646:	4013      	ands	r3, r2
 8008648:	d009      	beq.n	800865e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	4a15      	ldr	r2, [pc, #84]	; (80086a4 <HAL_RCC_ClockConfig+0x200>)
 8008650:	4013      	ands	r3, r2
 8008652:	0019      	movs	r1, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	4b10      	ldr	r3, [pc, #64]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 800865a:	430a      	orrs	r2, r1
 800865c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800865e:	f000 f829 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008662:	0001      	movs	r1, r0
 8008664:	4b0d      	ldr	r3, [pc, #52]	; (800869c <HAL_RCC_ClockConfig+0x1f8>)
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	220f      	movs	r2, #15
 800866c:	401a      	ands	r2, r3
 800866e:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <HAL_RCC_ClockConfig+0x204>)
 8008670:	0092      	lsls	r2, r2, #2
 8008672:	58d3      	ldr	r3, [r2, r3]
 8008674:	221f      	movs	r2, #31
 8008676:	4013      	ands	r3, r2
 8008678:	000a      	movs	r2, r1
 800867a:	40da      	lsrs	r2, r3
 800867c:	4b0b      	ldr	r3, [pc, #44]	; (80086ac <HAL_RCC_ClockConfig+0x208>)
 800867e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008680:	4b0b      	ldr	r3, [pc, #44]	; (80086b0 <HAL_RCC_ClockConfig+0x20c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	0018      	movs	r0, r3
 8008686:	f7fc fe9f 	bl	80053c8 <HAL_InitTick>
 800868a:	0003      	movs	r3, r0
}
 800868c:	0018      	movs	r0, r3
 800868e:	46bd      	mov	sp, r7
 8008690:	b004      	add	sp, #16
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40022000 	.word	0x40022000
 8008698:	00001388 	.word	0x00001388
 800869c:	40021000 	.word	0x40021000
 80086a0:	fffff0ff 	.word	0xfffff0ff
 80086a4:	ffff8fff 	.word	0xffff8fff
 80086a8:	080183c8 	.word	0x080183c8
 80086ac:	20000034 	.word	0x20000034
 80086b0:	20000038 	.word	0x20000038

080086b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086ba:	4b3c      	ldr	r3, [pc, #240]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2238      	movs	r2, #56	; 0x38
 80086c0:	4013      	ands	r3, r2
 80086c2:	d10f      	bne.n	80086e4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80086c4:	4b39      	ldr	r3, [pc, #228]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	0adb      	lsrs	r3, r3, #11
 80086ca:	2207      	movs	r2, #7
 80086cc:	4013      	ands	r3, r2
 80086ce:	2201      	movs	r2, #1
 80086d0:	409a      	lsls	r2, r3
 80086d2:	0013      	movs	r3, r2
 80086d4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	4835      	ldr	r0, [pc, #212]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086da:	f7f7 fd13 	bl	8000104 <__udivsi3>
 80086de:	0003      	movs	r3, r0
 80086e0:	613b      	str	r3, [r7, #16]
 80086e2:	e05d      	b.n	80087a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086e4:	4b31      	ldr	r3, [pc, #196]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2238      	movs	r2, #56	; 0x38
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d102      	bne.n	80086f6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086f0:	4b30      	ldr	r3, [pc, #192]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	e054      	b.n	80087a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086f6:	4b2d      	ldr	r3, [pc, #180]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	2238      	movs	r2, #56	; 0x38
 80086fc:	4013      	ands	r3, r2
 80086fe:	2b10      	cmp	r3, #16
 8008700:	d138      	bne.n	8008774 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008702:	4b2a      	ldr	r3, [pc, #168]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	2203      	movs	r2, #3
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800870c:	4b27      	ldr	r3, [pc, #156]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	091b      	lsrs	r3, r3, #4
 8008712:	2207      	movs	r2, #7
 8008714:	4013      	ands	r3, r2
 8008716:	3301      	adds	r3, #1
 8008718:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d10d      	bne.n	800873c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	4824      	ldr	r0, [pc, #144]	; (80087b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8008724:	f7f7 fcee 	bl	8000104 <__udivsi3>
 8008728:	0003      	movs	r3, r0
 800872a:	0019      	movs	r1, r3
 800872c:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	227f      	movs	r2, #127	; 0x7f
 8008734:	4013      	ands	r3, r2
 8008736:	434b      	muls	r3, r1
 8008738:	617b      	str	r3, [r7, #20]
        break;
 800873a:	e00d      	b.n	8008758 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800873c:	68b9      	ldr	r1, [r7, #8]
 800873e:	481c      	ldr	r0, [pc, #112]	; (80087b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008740:	f7f7 fce0 	bl	8000104 <__udivsi3>
 8008744:	0003      	movs	r3, r0
 8008746:	0019      	movs	r1, r3
 8008748:	4b18      	ldr	r3, [pc, #96]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	227f      	movs	r2, #127	; 0x7f
 8008750:	4013      	ands	r3, r2
 8008752:	434b      	muls	r3, r1
 8008754:	617b      	str	r3, [r7, #20]
        break;
 8008756:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008758:	4b14      	ldr	r3, [pc, #80]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	0f5b      	lsrs	r3, r3, #29
 800875e:	2207      	movs	r2, #7
 8008760:	4013      	ands	r3, r2
 8008762:	3301      	adds	r3, #1
 8008764:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	6978      	ldr	r0, [r7, #20]
 800876a:	f7f7 fccb 	bl	8000104 <__udivsi3>
 800876e:	0003      	movs	r3, r0
 8008770:	613b      	str	r3, [r7, #16]
 8008772:	e015      	b.n	80087a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008774:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2238      	movs	r2, #56	; 0x38
 800877a:	4013      	ands	r3, r2
 800877c:	2b20      	cmp	r3, #32
 800877e:	d103      	bne.n	8008788 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008780:	2380      	movs	r3, #128	; 0x80
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	e00b      	b.n	80087a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008788:	4b08      	ldr	r3, [pc, #32]	; (80087ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	2238      	movs	r2, #56	; 0x38
 800878e:	4013      	ands	r3, r2
 8008790:	2b18      	cmp	r3, #24
 8008792:	d103      	bne.n	800879c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008794:	23fa      	movs	r3, #250	; 0xfa
 8008796:	01db      	lsls	r3, r3, #7
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	e001      	b.n	80087a0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087a0:	693b      	ldr	r3, [r7, #16]
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b006      	add	sp, #24
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	40021000 	.word	0x40021000
 80087b0:	00f42400 	.word	0x00f42400
 80087b4:	007a1200 	.word	0x007a1200

080087b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087bc:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80087be:	681b      	ldr	r3, [r3, #0]
}
 80087c0:	0018      	movs	r0, r3
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	20000034 	.word	0x20000034

080087cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087cc:	b5b0      	push	{r4, r5, r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80087d0:	f7ff fff2 	bl	80087b8 <HAL_RCC_GetHCLKFreq>
 80087d4:	0004      	movs	r4, r0
 80087d6:	f7ff fb3f 	bl	8007e58 <LL_RCC_GetAPB1Prescaler>
 80087da:	0003      	movs	r3, r0
 80087dc:	0b1a      	lsrs	r2, r3, #12
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087e0:	0092      	lsls	r2, r2, #2
 80087e2:	58d3      	ldr	r3, [r2, r3]
 80087e4:	221f      	movs	r2, #31
 80087e6:	4013      	ands	r3, r2
 80087e8:	40dc      	lsrs	r4, r3
 80087ea:	0023      	movs	r3, r4
}
 80087ec:	0018      	movs	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bdb0      	pop	{r4, r5, r7, pc}
 80087f2:	46c0      	nop			; (mov r8, r8)
 80087f4:	08018408 	.word	0x08018408

080087f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008800:	2313      	movs	r3, #19
 8008802:	18fb      	adds	r3, r7, r3
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008808:	2312      	movs	r3, #18
 800880a:	18fb      	adds	r3, r7, r3
 800880c:	2200      	movs	r2, #0
 800880e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	029b      	lsls	r3, r3, #10
 8008818:	4013      	ands	r3, r2
 800881a:	d100      	bne.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800881c:	e0a3      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881e:	2011      	movs	r0, #17
 8008820:	183b      	adds	r3, r7, r0
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008826:	4bc3      	ldr	r3, [pc, #780]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882a:	2380      	movs	r3, #128	; 0x80
 800882c:	055b      	lsls	r3, r3, #21
 800882e:	4013      	ands	r3, r2
 8008830:	d110      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008832:	4bc0      	ldr	r3, [pc, #768]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008834:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008836:	4bbf      	ldr	r3, [pc, #764]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008838:	2180      	movs	r1, #128	; 0x80
 800883a:	0549      	lsls	r1, r1, #21
 800883c:	430a      	orrs	r2, r1
 800883e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008840:	4bbc      	ldr	r3, [pc, #752]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008844:	2380      	movs	r3, #128	; 0x80
 8008846:	055b      	lsls	r3, r3, #21
 8008848:	4013      	ands	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]
 800884c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800884e:	183b      	adds	r3, r7, r0
 8008850:	2201      	movs	r2, #1
 8008852:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008854:	4bb8      	ldr	r3, [pc, #736]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	4bb7      	ldr	r3, [pc, #732]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800885a:	2180      	movs	r1, #128	; 0x80
 800885c:	0049      	lsls	r1, r1, #1
 800885e:	430a      	orrs	r2, r1
 8008860:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008862:	f7fc fe0d 	bl	8005480 <HAL_GetTick>
 8008866:	0003      	movs	r3, r0
 8008868:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800886a:	e00b      	b.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800886c:	f7fc fe08 	bl	8005480 <HAL_GetTick>
 8008870:	0002      	movs	r2, r0
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	2b02      	cmp	r3, #2
 8008878:	d904      	bls.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800887a:	2313      	movs	r3, #19
 800887c:	18fb      	adds	r3, r7, r3
 800887e:	2203      	movs	r2, #3
 8008880:	701a      	strb	r2, [r3, #0]
        break;
 8008882:	e005      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008884:	4bac      	ldr	r3, [pc, #688]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	2380      	movs	r3, #128	; 0x80
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	4013      	ands	r3, r2
 800888e:	d0ed      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008890:	2313      	movs	r3, #19
 8008892:	18fb      	adds	r3, r7, r3
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d154      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800889a:	4ba6      	ldr	r3, [pc, #664]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800889c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800889e:	23c0      	movs	r3, #192	; 0xc0
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4013      	ands	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d019      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	697a      	ldr	r2, [r7, #20]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d014      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088b6:	4b9f      	ldr	r3, [pc, #636]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ba:	4aa0      	ldr	r2, [pc, #640]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80088bc:	4013      	ands	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088c0:	4b9c      	ldr	r3, [pc, #624]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088c4:	4b9b      	ldr	r3, [pc, #620]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088c6:	2180      	movs	r1, #128	; 0x80
 80088c8:	0249      	lsls	r1, r1, #9
 80088ca:	430a      	orrs	r2, r1
 80088cc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088ce:	4b99      	ldr	r3, [pc, #612]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80088d2:	4b98      	ldr	r3, [pc, #608]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088d4:	499a      	ldr	r1, [pc, #616]	; (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80088d6:	400a      	ands	r2, r1
 80088d8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088da:	4b96      	ldr	r3, [pc, #600]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2201      	movs	r2, #1
 80088e4:	4013      	ands	r3, r2
 80088e6:	d016      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fc fdca 	bl	8005480 <HAL_GetTick>
 80088ec:	0003      	movs	r3, r0
 80088ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088f0:	e00c      	b.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088f2:	f7fc fdc5 	bl	8005480 <HAL_GetTick>
 80088f6:	0002      	movs	r2, r0
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	4a91      	ldr	r2, [pc, #580]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d904      	bls.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008902:	2313      	movs	r3, #19
 8008904:	18fb      	adds	r3, r7, r3
 8008906:	2203      	movs	r2, #3
 8008908:	701a      	strb	r2, [r3, #0]
            break;
 800890a:	e004      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800890c:	4b89      	ldr	r3, [pc, #548]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008910:	2202      	movs	r2, #2
 8008912:	4013      	ands	r3, r2
 8008914:	d0ed      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008916:	2313      	movs	r3, #19
 8008918:	18fb      	adds	r3, r7, r3
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10a      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008920:	4b84      	ldr	r3, [pc, #528]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008924:	4a85      	ldr	r2, [pc, #532]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008926:	4013      	ands	r3, r2
 8008928:	0019      	movs	r1, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800892e:	4b81      	ldr	r3, [pc, #516]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008930:	430a      	orrs	r2, r1
 8008932:	65da      	str	r2, [r3, #92]	; 0x5c
 8008934:	e00c      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008936:	2312      	movs	r3, #18
 8008938:	18fb      	adds	r3, r7, r3
 800893a:	2213      	movs	r2, #19
 800893c:	18ba      	adds	r2, r7, r2
 800893e:	7812      	ldrb	r2, [r2, #0]
 8008940:	701a      	strb	r2, [r3, #0]
 8008942:	e005      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008944:	2312      	movs	r3, #18
 8008946:	18fb      	adds	r3, r7, r3
 8008948:	2213      	movs	r2, #19
 800894a:	18ba      	adds	r2, r7, r2
 800894c:	7812      	ldrb	r2, [r2, #0]
 800894e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008950:	2311      	movs	r3, #17
 8008952:	18fb      	adds	r3, r7, r3
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d105      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800895a:	4b76      	ldr	r3, [pc, #472]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800895c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800895e:	4b75      	ldr	r3, [pc, #468]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008960:	4979      	ldr	r1, [pc, #484]	; (8008b48 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008962:	400a      	ands	r2, r1
 8008964:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2201      	movs	r2, #1
 800896c:	4013      	ands	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008970:	4b70      	ldr	r3, [pc, #448]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008974:	2203      	movs	r2, #3
 8008976:	4393      	bics	r3, r2
 8008978:	0019      	movs	r1, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	4b6d      	ldr	r3, [pc, #436]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008980:	430a      	orrs	r2, r1
 8008982:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2202      	movs	r2, #2
 800898a:	4013      	ands	r3, r2
 800898c:	d009      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800898e:	4b69      	ldr	r3, [pc, #420]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	220c      	movs	r2, #12
 8008994:	4393      	bics	r3, r2
 8008996:	0019      	movs	r1, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	4b65      	ldr	r3, [pc, #404]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800899e:	430a      	orrs	r2, r1
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2210      	movs	r2, #16
 80089a8:	4013      	ands	r3, r2
 80089aa:	d009      	beq.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089ac:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b0:	4a66      	ldr	r2, [pc, #408]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80089b2:	4013      	ands	r3, r2
 80089b4:	0019      	movs	r1, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68da      	ldr	r2, [r3, #12]
 80089ba:	4b5e      	ldr	r3, [pc, #376]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089bc:	430a      	orrs	r2, r1
 80089be:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	2380      	movs	r3, #128	; 0x80
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4013      	ands	r3, r2
 80089ca:	d009      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089cc:	4b59      	ldr	r3, [pc, #356]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d0:	4a5f      	ldr	r2, [pc, #380]	; (8008b50 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	0019      	movs	r1, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	4b56      	ldr	r3, [pc, #344]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089dc:	430a      	orrs	r2, r1
 80089de:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	2380      	movs	r3, #128	; 0x80
 80089e6:	00db      	lsls	r3, r3, #3
 80089e8:	4013      	ands	r3, r2
 80089ea:	d009      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089ec:	4b51      	ldr	r3, [pc, #324]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f0:	4a58      	ldr	r2, [pc, #352]	; (8008b54 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	0019      	movs	r1, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69da      	ldr	r2, [r3, #28]
 80089fa:	4b4e      	ldr	r3, [pc, #312]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089fc:	430a      	orrs	r2, r1
 80089fe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2220      	movs	r2, #32
 8008a06:	4013      	ands	r3, r2
 8008a08:	d009      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a0a:	4b4a      	ldr	r3, [pc, #296]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	4a52      	ldr	r2, [pc, #328]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	0019      	movs	r1, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	691a      	ldr	r2, [r3, #16]
 8008a18:	4b46      	ldr	r3, [pc, #280]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	2380      	movs	r3, #128	; 0x80
 8008a24:	01db      	lsls	r3, r3, #7
 8008a26:	4013      	ands	r3, r2
 8008a28:	d015      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a2a:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	0899      	lsrs	r1, r3, #2
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1a      	ldr	r2, [r3, #32]
 8008a36:	4b3f      	ldr	r3, [pc, #252]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a1a      	ldr	r2, [r3, #32]
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	05db      	lsls	r3, r3, #23
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d106      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008a48:	4b3a      	ldr	r3, [pc, #232]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	4b39      	ldr	r3, [pc, #228]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a4e:	2180      	movs	r1, #128	; 0x80
 8008a50:	0249      	lsls	r1, r1, #9
 8008a52:	430a      	orrs	r2, r1
 8008a54:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	2380      	movs	r3, #128	; 0x80
 8008a5c:	031b      	lsls	r3, r3, #12
 8008a5e:	4013      	ands	r3, r2
 8008a60:	d009      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a62:	4b34      	ldr	r3, [pc, #208]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a66:	2240      	movs	r2, #64	; 0x40
 8008a68:	4393      	bics	r3, r2
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a70:	4b30      	ldr	r3, [pc, #192]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a72:	430a      	orrs	r2, r1
 8008a74:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	2380      	movs	r3, #128	; 0x80
 8008a7c:	039b      	lsls	r3, r3, #14
 8008a7e:	4013      	ands	r3, r2
 8008a80:	d016      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a82:	4b2c      	ldr	r3, [pc, #176]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	4a35      	ldr	r2, [pc, #212]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	0019      	movs	r1, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a90:	4b28      	ldr	r3, [pc, #160]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a92:	430a      	orrs	r2, r1
 8008a94:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a9a:	2380      	movs	r3, #128	; 0x80
 8008a9c:	03db      	lsls	r3, r3, #15
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d106      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008aa2:	4b24      	ldr	r3, [pc, #144]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	4b23      	ldr	r3, [pc, #140]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aa8:	2180      	movs	r1, #128	; 0x80
 8008aaa:	0449      	lsls	r1, r1, #17
 8008aac:	430a      	orrs	r2, r1
 8008aae:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	2380      	movs	r3, #128	; 0x80
 8008ab6:	03db      	lsls	r3, r3, #15
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d016      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008abc:	4b1d      	ldr	r3, [pc, #116]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac0:	4a27      	ldr	r2, [pc, #156]	; (8008b60 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	0019      	movs	r1, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aca:	4b1a      	ldr	r3, [pc, #104]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008acc:	430a      	orrs	r2, r1
 8008ace:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	2380      	movs	r3, #128	; 0x80
 8008ad6:	045b      	lsls	r3, r3, #17
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	4b14      	ldr	r3, [pc, #80]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae2:	2180      	movs	r1, #128	; 0x80
 8008ae4:	0449      	lsls	r1, r1, #17
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	2380      	movs	r3, #128	; 0x80
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	4013      	ands	r3, r2
 8008af4:	d016      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008af6:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	0019      	movs	r1, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	4b0b      	ldr	r3, [pc, #44]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b06:	430a      	orrs	r2, r1
 8008b08:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695a      	ldr	r2, [r3, #20]
 8008b0e:	2380      	movs	r3, #128	; 0x80
 8008b10:	01db      	lsls	r3, r3, #7
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d106      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008b16:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	4b06      	ldr	r3, [pc, #24]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008b1c:	2180      	movs	r1, #128	; 0x80
 8008b1e:	0249      	lsls	r1, r1, #9
 8008b20:	430a      	orrs	r2, r1
 8008b22:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008b24:	2312      	movs	r3, #18
 8008b26:	18fb      	adds	r3, r7, r3
 8008b28:	781b      	ldrb	r3, [r3, #0]
}
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	b006      	add	sp, #24
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	40021000 	.word	0x40021000
 8008b38:	40007000 	.word	0x40007000
 8008b3c:	fffffcff 	.word	0xfffffcff
 8008b40:	fffeffff 	.word	0xfffeffff
 8008b44:	00001388 	.word	0x00001388
 8008b48:	efffffff 	.word	0xefffffff
 8008b4c:	fffff3ff 	.word	0xfffff3ff
 8008b50:	fff3ffff 	.word	0xfff3ffff
 8008b54:	ffcfffff 	.word	0xffcfffff
 8008b58:	ffffcfff 	.word	0xffffcfff
 8008b5c:	ffbfffff 	.word	0xffbfffff
 8008b60:	feffffff 	.word	0xfeffffff
 8008b64:	ffff3fff 	.word	0xffff3fff

08008b68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	029b      	lsls	r3, r3, #10
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d136      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008b7e:	4bcd      	ldr	r3, [pc, #820]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b82:	23c0      	movs	r3, #192	; 0xc0
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4013      	ands	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008b8a:	4bca      	ldr	r3, [pc, #808]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8e:	2202      	movs	r2, #2
 8008b90:	4013      	ands	r3, r2
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d108      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	005b      	lsls	r3, r3, #1
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d103      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8008ba0:	2380      	movs	r3, #128	; 0x80
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	617b      	str	r3, [r7, #20]
 8008ba6:	e31c      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008ba8:	4bc2      	ldr	r3, [pc, #776]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bac:	2202      	movs	r2, #2
 8008bae:	4013      	ands	r3, r2
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d108      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	2380      	movs	r3, #128	; 0x80
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d103      	bne.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8008bbe:	23fa      	movs	r3, #250	; 0xfa
 8008bc0:	01db      	lsls	r3, r3, #7
 8008bc2:	617b      	str	r3, [r7, #20]
 8008bc4:	e30d      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008bc6:	4bbb      	ldr	r3, [pc, #748]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	2380      	movs	r3, #128	; 0x80
 8008bcc:	029b      	lsls	r3, r3, #10
 8008bce:	401a      	ands	r2, r3
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	029b      	lsls	r3, r3, #10
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d000      	beq.n	8008bda <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8008bd8:	e303      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	23c0      	movs	r3, #192	; 0xc0
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d000      	beq.n	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8008be4:	e2fd      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8008be6:	4bb4      	ldr	r3, [pc, #720]	; (8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e2fa      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8008bec:	4bb1      	ldr	r3, [pc, #708]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d102      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8008bf8:	4bb0      	ldr	r3, [pc, #704]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008bfa:	613b      	str	r3, [r7, #16]
 8008bfc:	e00a      	b.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8008bfe:	4bad      	ldr	r3, [pc, #692]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2203      	movs	r2, #3
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d102      	bne.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8008c0a:	4bad      	ldr	r3, [pc, #692]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	e001      	b.n	8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008c14:	4ba7      	ldr	r3, [pc, #668]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	2207      	movs	r2, #7
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	3301      	adds	r3, #1
 8008c20:	0019      	movs	r1, r3
 8008c22:	6938      	ldr	r0, [r7, #16]
 8008c24:	f7f7 fa6e 	bl	8000104 <__udivsi3>
 8008c28:	0003      	movs	r3, r0
 8008c2a:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	2380      	movs	r3, #128	; 0x80
 8008c30:	03db      	lsls	r3, r3, #15
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d100      	bne.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8008c36:	e28e      	b.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	2380      	movs	r3, #128	; 0x80
 8008c3c:	03db      	lsls	r3, r3, #15
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d900      	bls.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008c42:	e2b7      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	039b      	lsls	r3, r3, #14
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d100      	bne.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008c4e:	e253      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	2380      	movs	r3, #128	; 0x80
 8008c54:	039b      	lsls	r3, r3, #14
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d900      	bls.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008c5a:	e2ab      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	031b      	lsls	r3, r3, #12
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d100      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8008c66:	e0b2      	b.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	2380      	movs	r3, #128	; 0x80
 8008c6c:	031b      	lsls	r3, r3, #12
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d900      	bls.n	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008c72:	e29f      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	2380      	movs	r3, #128	; 0x80
 8008c78:	01db      	lsls	r3, r3, #7
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d100      	bne.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8008c7e:	e103      	b.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	2380      	movs	r3, #128	; 0x80
 8008c84:	01db      	lsls	r3, r3, #7
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d900      	bls.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c8a:	e293      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	2380      	movs	r3, #128	; 0x80
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d100      	bne.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8008c96:	e165      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d900      	bls.n	8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8008ca2:	e287      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	2380      	movs	r3, #128	; 0x80
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d100      	bne.n	8008cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008cae:	e1e3      	b.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	2380      	movs	r3, #128	; 0x80
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d900      	bls.n	8008cbc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008cba:	e27b      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	2380      	movs	r3, #128	; 0x80
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d100      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008cc6:	e197      	b.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	2380      	movs	r3, #128	; 0x80
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d900      	bls.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8008cd2:	e26f      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d100      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8008cda:	e118      	b.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2b20      	cmp	r3, #32
 8008ce0:	d900      	bls.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8008ce2:	e267      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d100      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8008cea:	e093      	b.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b10      	cmp	r3, #16
 8008cf0:	d900      	bls.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8008cf2:	e25f      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d003      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d033      	beq.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8008d00:	e258      	b.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008d02:	4b6c      	ldr	r3, [pc, #432]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d06:	2203      	movs	r2, #3
 8008d08:	4013      	ands	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d104      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d12:	f7ff fd5b 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 8008d16:	0003      	movs	r3, r0
 8008d18:	617b      	str	r3, [r7, #20]
        break;
 8008d1a:	e24d      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d104      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d22:	f7ff fcc7 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008d26:	0003      	movs	r3, r0
 8008d28:	617b      	str	r3, [r7, #20]
        break;
 8008d2a:	e245      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008d2c:	4b61      	ldr	r3, [pc, #388]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	2380      	movs	r3, #128	; 0x80
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	401a      	ands	r2, r3
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d105      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d102      	bne.n	8008d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8008d44:	4b5d      	ldr	r3, [pc, #372]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008d46:	617b      	str	r3, [r7, #20]
        break;
 8008d48:	e236      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008d4a:	4b5a      	ldr	r3, [pc, #360]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4e:	2202      	movs	r2, #2
 8008d50:	4013      	ands	r3, r2
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d000      	beq.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8008d56:	e22f      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d000      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8008d5e:	e22b      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8008d60:	2380      	movs	r3, #128	; 0x80
 8008d62:	021b      	lsls	r3, r3, #8
 8008d64:	617b      	str	r3, [r7, #20]
        break;
 8008d66:	e227      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008d68:	4b52      	ldr	r3, [pc, #328]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d6c:	220c      	movs	r2, #12
 8008d6e:	4013      	ands	r3, r2
 8008d70:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d104      	bne.n	8008d82 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d78:	f7ff fd28 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	617b      	str	r3, [r7, #20]
        break;
 8008d80:	e21c      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d104      	bne.n	8008d92 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008d88:	f7ff fc94 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008d8c:	0003      	movs	r3, r0
 8008d8e:	617b      	str	r3, [r7, #20]
        break;
 8008d90:	e214      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008d92:	4b48      	ldr	r3, [pc, #288]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	2380      	movs	r3, #128	; 0x80
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	401a      	ands	r2, r3
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d105      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d102      	bne.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8008daa:	4b44      	ldr	r3, [pc, #272]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008dac:	617b      	str	r3, [r7, #20]
        break;
 8008dae:	e205      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008db0:	4b40      	ldr	r3, [pc, #256]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db4:	2202      	movs	r2, #2
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d000      	beq.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008dbc:	e1fe      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b0c      	cmp	r3, #12
 8008dc2:	d000      	beq.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8008dc4:	e1fa      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8008dc6:	2380      	movs	r3, #128	; 0x80
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	617b      	str	r3, [r7, #20]
        break;
 8008dcc:	e1f6      	b.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008dce:	4b39      	ldr	r3, [pc, #228]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd2:	2240      	movs	r2, #64	; 0x40
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8008dd8:	4b36      	ldr	r3, [pc, #216]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	00db      	lsls	r3, r3, #3
 8008de0:	401a      	ands	r2, r3
 8008de2:	2380      	movs	r3, #128	; 0x80
 8008de4:	00db      	lsls	r3, r3, #3
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d105      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d102      	bne.n	8008df6 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8008df0:	4b34      	ldr	r3, [pc, #208]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8008df2:	617b      	str	r3, [r7, #20]
        break;
 8008df4:	e1e4      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008df6:	4b2f      	ldr	r3, [pc, #188]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d000      	beq.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8008e02:	e1dd      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d000      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8008e0a:	e1d9      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8008e0c:	2380      	movs	r3, #128	; 0x80
 8008e0e:	021b      	lsls	r3, r3, #8
 8008e10:	617b      	str	r3, [r7, #20]
        break;
 8008e12:	e1d5      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e14:	4b27      	ldr	r3, [pc, #156]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e18:	23c0      	movs	r3, #192	; 0xc0
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d104      	bne.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e26:	f7ff fcd1 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	617b      	str	r3, [r7, #20]
        break;
 8008e2e:	e1c9      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	2380      	movs	r3, #128	; 0x80
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d104      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e3a:	f7ff fc3b 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008e3e:	0003      	movs	r3, r0
 8008e40:	617b      	str	r3, [r7, #20]
        break;
 8008e42:	e1bf      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008e44:	4b1b      	ldr	r3, [pc, #108]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	2380      	movs	r3, #128	; 0x80
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	401a      	ands	r2, r3
 8008e4e:	2380      	movs	r3, #128	; 0x80
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d107      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	2380      	movs	r3, #128	; 0x80
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d102      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8008e60:	4b16      	ldr	r3, [pc, #88]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008e62:	617b      	str	r3, [r7, #20]
        break;
 8008e64:	e1ae      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008e66:	4b13      	ldr	r3, [pc, #76]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d000      	beq.n	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8008e72:	e1a7      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	23c0      	movs	r3, #192	; 0xc0
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d000      	beq.n	8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008e7e:	e1a1      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8008e80:	2380      	movs	r3, #128	; 0x80
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	617b      	str	r3, [r7, #20]
        break;
 8008e86:	e19d      	b.n	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8c:	0f9b      	lsrs	r3, r3, #30
 8008e8e:	079b      	lsls	r3, r3, #30
 8008e90:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d104      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8008e98:	f7ff fc0c 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008e9c:	0003      	movs	r3, r0
 8008e9e:	617b      	str	r3, [r7, #20]
        break;
 8008ea0:	e192      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	061b      	lsls	r3, r3, #24
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d10d      	bne.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8008eac:	4b03      	ldr	r3, [pc, #12]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8008eae:	617b      	str	r3, [r7, #20]
        break;
 8008eb0:	e18a      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	40021000 	.word	0x40021000
 8008eb8:	0003d090 	.word	0x0003d090
 8008ebc:	00f42400 	.word	0x00f42400
 8008ec0:	007a1200 	.word	0x007a1200
 8008ec4:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	2380      	movs	r3, #128	; 0x80
 8008ecc:	05db      	lsls	r3, r3, #23
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d000      	beq.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8008ed2:	e179      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008ed4:	4bc5      	ldr	r3, [pc, #788]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ed6:	68da      	ldr	r2, [r3, #12]
 8008ed8:	2380      	movs	r3, #128	; 0x80
 8008eda:	025b      	lsls	r3, r3, #9
 8008edc:	4013      	ands	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8008ee0:	e172      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008ee2:	4bc2      	ldr	r3, [pc, #776]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	227f      	movs	r2, #127	; 0x7f
 8008eea:	4013      	ands	r3, r2
 8008eec:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	435a      	muls	r2, r3
 8008ef4:	4bbd      	ldr	r3, [pc, #756]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	0c5b      	lsrs	r3, r3, #17
 8008efa:	211f      	movs	r1, #31
 8008efc:	400b      	ands	r3, r1
 8008efe:	3301      	adds	r3, #1
 8008f00:	0019      	movs	r1, r3
 8008f02:	0010      	movs	r0, r2
 8008f04:	f7f7 f8fe 	bl	8000104 <__udivsi3>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	617b      	str	r3, [r7, #20]
        break;
 8008f0c:	e15c      	b.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008f0e:	4bb7      	ldr	r3, [pc, #732]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f12:	23c0      	movs	r3, #192	; 0xc0
 8008f14:	019b      	lsls	r3, r3, #6
 8008f16:	4013      	ands	r3, r2
 8008f18:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f20:	f7ff fc54 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 8008f24:	0003      	movs	r3, r0
 8008f26:	617b      	str	r3, [r7, #20]
        break;
 8008f28:	e150      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	2380      	movs	r3, #128	; 0x80
 8008f2e:	015b      	lsls	r3, r3, #5
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d104      	bne.n	8008f3e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f34:	f7ff fbbe 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	617b      	str	r3, [r7, #20]
        break;
 8008f3c:	e146      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008f3e:	4bab      	ldr	r3, [pc, #684]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	2380      	movs	r3, #128	; 0x80
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	401a      	ands	r2, r3
 8008f48:	2380      	movs	r3, #128	; 0x80
 8008f4a:	00db      	lsls	r3, r3, #3
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d000      	beq.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8008f50:	e13c      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	2380      	movs	r3, #128	; 0x80
 8008f56:	019b      	lsls	r3, r3, #6
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d000      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8008f5c:	e136      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8008f5e:	4ba4      	ldr	r3, [pc, #656]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008f60:	617b      	str	r3, [r7, #20]
        break;
 8008f62:	e133      	b.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8008f64:	4ba1      	ldr	r3, [pc, #644]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f68:	23c0      	movs	r3, #192	; 0xc0
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	2380      	movs	r3, #128	; 0x80
 8008f74:	01db      	lsls	r3, r3, #7
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d11c      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8008f7a:	4b9c      	ldr	r3, [pc, #624]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	2380      	movs	r3, #128	; 0x80
 8008f80:	025b      	lsls	r3, r3, #9
 8008f82:	4013      	ands	r3, r2
 8008f84:	d100      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8008f86:	e123      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8008f88:	4b98      	ldr	r3, [pc, #608]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	0a1b      	lsrs	r3, r3, #8
 8008f8e:	227f      	movs	r2, #127	; 0x7f
 8008f90:	4013      	ands	r3, r2
 8008f92:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	435a      	muls	r2, r3
 8008f9a:	4b94      	ldr	r3, [pc, #592]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	0c5b      	lsrs	r3, r3, #17
 8008fa0:	211f      	movs	r1, #31
 8008fa2:	400b      	ands	r3, r1
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	0019      	movs	r1, r3
 8008fa8:	0010      	movs	r0, r2
 8008faa:	f7f7 f8ab 	bl	8000104 <__udivsi3>
 8008fae:	0003      	movs	r3, r0
 8008fb0:	617b      	str	r3, [r7, #20]
        break;
 8008fb2:	e10d      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8008fba:	f7ff fb7b 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 8008fbe:	0003      	movs	r3, r0
 8008fc0:	617b      	str	r3, [r7, #20]
        break;
 8008fc2:	e105      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8008fc4:	4b89      	ldr	r3, [pc, #548]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	2380      	movs	r3, #128	; 0x80
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	401a      	ands	r2, r3
 8008fce:	2380      	movs	r3, #128	; 0x80
 8008fd0:	00db      	lsls	r3, r3, #3
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d107      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	2380      	movs	r3, #128	; 0x80
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d102      	bne.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8008fe0:	4b83      	ldr	r3, [pc, #524]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8008fe2:	617b      	str	r3, [r7, #20]
        break;
 8008fe4:	e0f4      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	23c0      	movs	r3, #192	; 0xc0
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d000      	beq.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008ff0:	e0ee      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8008ff2:	4b80      	ldr	r3, [pc, #512]	; (80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8008ff4:	617b      	str	r3, [r7, #20]
        break;
 8008ff6:	e0eb      	b.n	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008ff8:	4b7c      	ldr	r3, [pc, #496]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8008ffa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ffc:	23c0      	movs	r3, #192	; 0xc0
 8008ffe:	031b      	lsls	r3, r3, #12
 8009000:	4013      	ands	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 800900a:	f7ff fbdf 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 800900e:	0003      	movs	r3, r0
 8009010:	617b      	str	r3, [r7, #20]
        break;
 8009012:	e0df      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009014:	4b75      	ldr	r3, [pc, #468]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009018:	2202      	movs	r2, #2
 800901a:	4013      	ands	r3, r2
 800901c:	2b02      	cmp	r3, #2
 800901e:	d108      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	2380      	movs	r3, #128	; 0x80
 8009024:	02db      	lsls	r3, r3, #11
 8009026:	429a      	cmp	r2, r3
 8009028:	d103      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800902a:	23fa      	movs	r3, #250	; 0xfa
 800902c:	01db      	lsls	r3, r3, #7
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	e021      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009032:	4b6e      	ldr	r3, [pc, #440]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	2380      	movs	r3, #128	; 0x80
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	401a      	ands	r2, r3
 800903c:	2380      	movs	r3, #128	; 0x80
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	429a      	cmp	r2, r3
 8009042:	d107      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	2380      	movs	r3, #128	; 0x80
 8009048:	031b      	lsls	r3, r3, #12
 800904a:	429a      	cmp	r2, r3
 800904c:	d102      	bne.n	8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800904e:	4b68      	ldr	r3, [pc, #416]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	e010      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009054:	4b65      	ldr	r3, [pc, #404]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009058:	2202      	movs	r2, #2
 800905a:	4013      	ands	r3, r2
 800905c:	2b02      	cmp	r3, #2
 800905e:	d000      	beq.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009060:	e0b8      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	23c0      	movs	r3, #192	; 0xc0
 8009066:	031b      	lsls	r3, r3, #12
 8009068:	429a      	cmp	r2, r3
 800906a:	d000      	beq.n	800906e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800906c:	e0b2      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	617b      	str	r3, [r7, #20]
        break;
 8009074:	e0ae      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8009076:	e0ad      	b.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009078:	4b5c      	ldr	r3, [pc, #368]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800907a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800907c:	23c0      	movs	r3, #192	; 0xc0
 800907e:	039b      	lsls	r3, r3, #14
 8009080:	4013      	ands	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800908a:	f7ff fb9f 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 800908e:	0003      	movs	r3, r0
 8009090:	617b      	str	r3, [r7, #20]
        break;
 8009092:	e0a1      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009094:	4b55      	ldr	r3, [pc, #340]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009098:	2202      	movs	r2, #2
 800909a:	4013      	ands	r3, r2
 800909c:	2b02      	cmp	r3, #2
 800909e:	d108      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	2380      	movs	r3, #128	; 0x80
 80090a4:	035b      	lsls	r3, r3, #13
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d103      	bne.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 80090aa:	23fa      	movs	r3, #250	; 0xfa
 80090ac:	01db      	lsls	r3, r3, #7
 80090ae:	617b      	str	r3, [r7, #20]
 80090b0:	e021      	b.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80090b2:	4b4e      	ldr	r3, [pc, #312]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	2380      	movs	r3, #128	; 0x80
 80090b8:	00db      	lsls	r3, r3, #3
 80090ba:	401a      	ands	r2, r3
 80090bc:	2380      	movs	r3, #128	; 0x80
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d107      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	2380      	movs	r3, #128	; 0x80
 80090c8:	039b      	lsls	r3, r3, #14
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d102      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80090ce:	4b48      	ldr	r3, [pc, #288]	; (80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80090d0:	617b      	str	r3, [r7, #20]
 80090d2:	e010      	b.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80090d4:	4b45      	ldr	r3, [pc, #276]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090d8:	2202      	movs	r2, #2
 80090da:	4013      	ands	r3, r2
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d000      	beq.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80090e0:	e07a      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	23c0      	movs	r3, #192	; 0xc0
 80090e6:	039b      	lsls	r3, r3, #14
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d000      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80090ec:	e074      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	617b      	str	r3, [r7, #20]
        break;
 80090f4:	e070      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80090f6:	e06f      	b.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80090f8:	4b3c      	ldr	r3, [pc, #240]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80090fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	03db      	lsls	r3, r3, #15
 8009100:	4013      	ands	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	2380      	movs	r3, #128	; 0x80
 8009108:	03db      	lsls	r3, r3, #15
 800910a:	429a      	cmp	r2, r3
 800910c:	d11b      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800910e:	4b37      	ldr	r3, [pc, #220]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	045b      	lsls	r3, r3, #17
 8009116:	4013      	ands	r3, r2
 8009118:	d060      	beq.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800911a:	4b34      	ldr	r3, [pc, #208]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	227f      	movs	r2, #127	; 0x7f
 8009122:	4013      	ands	r3, r2
 8009124:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	435a      	muls	r2, r3
 800912c:	4b2f      	ldr	r3, [pc, #188]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	0e5b      	lsrs	r3, r3, #25
 8009132:	2107      	movs	r1, #7
 8009134:	400b      	ands	r3, r1
 8009136:	3301      	adds	r3, #1
 8009138:	0019      	movs	r1, r3
 800913a:	0010      	movs	r0, r2
 800913c:	f7f6 ffe2 	bl	8000104 <__udivsi3>
 8009140:	0003      	movs	r3, r0
 8009142:	617b      	str	r3, [r7, #20]
        break;
 8009144:	e04a      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d147      	bne.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 800914c:	f7ff fb3e 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 8009150:	0003      	movs	r3, r0
 8009152:	617b      	str	r3, [r7, #20]
        break;
 8009154:	e042      	b.n	80091dc <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8009156:	4b25      	ldr	r3, [pc, #148]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8009158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800915a:	2380      	movs	r3, #128	; 0x80
 800915c:	045b      	lsls	r3, r3, #17
 800915e:	4013      	ands	r3, r2
 8009160:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	2380      	movs	r3, #128	; 0x80
 8009166:	045b      	lsls	r3, r3, #17
 8009168:	429a      	cmp	r2, r3
 800916a:	d11b      	bne.n	80091a4 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 800916c:	4b1f      	ldr	r3, [pc, #124]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800916e:	68da      	ldr	r2, [r3, #12]
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	045b      	lsls	r3, r3, #17
 8009174:	4013      	ands	r3, r2
 8009176:	d033      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009178:	4b1c      	ldr	r3, [pc, #112]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	0a1b      	lsrs	r3, r3, #8
 800917e:	227f      	movs	r2, #127	; 0x7f
 8009180:	4013      	ands	r3, r2
 8009182:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	435a      	muls	r2, r3
 800918a:	4b18      	ldr	r3, [pc, #96]	; (80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	0e5b      	lsrs	r3, r3, #25
 8009190:	2107      	movs	r1, #7
 8009192:	400b      	ands	r3, r1
 8009194:	3301      	adds	r3, #1
 8009196:	0019      	movs	r1, r3
 8009198:	0010      	movs	r0, r2
 800919a:	f7f6 ffb3 	bl	8000104 <__udivsi3>
 800919e:	0003      	movs	r3, r0
 80091a0:	617b      	str	r3, [r7, #20]
        break;
 80091a2:	e01d      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d11a      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 80091aa:	f7ff fb0f 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 80091ae:	0003      	movs	r3, r0
 80091b0:	617b      	str	r3, [r7, #20]
        break;
 80091b2:	e015      	b.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80091b4:	46c0      	nop			; (mov r8, r8)
 80091b6:	e014      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091b8:	46c0      	nop			; (mov r8, r8)
 80091ba:	e012      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091bc:	46c0      	nop			; (mov r8, r8)
 80091be:	e010      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091c0:	46c0      	nop			; (mov r8, r8)
 80091c2:	e00e      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091c4:	46c0      	nop			; (mov r8, r8)
 80091c6:	e00c      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091c8:	46c0      	nop			; (mov r8, r8)
 80091ca:	e00a      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091cc:	46c0      	nop			; (mov r8, r8)
 80091ce:	e008      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091d0:	46c0      	nop			; (mov r8, r8)
 80091d2:	e006      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091d4:	46c0      	nop			; (mov r8, r8)
 80091d6:	e004      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091d8:	46c0      	nop			; (mov r8, r8)
 80091da:	e002      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	e000      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80091e0:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80091e2:	697b      	ldr	r3, [r7, #20]
}
 80091e4:	0018      	movs	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	b006      	add	sp, #24
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	40021000 	.word	0x40021000
 80091f0:	00f42400 	.word	0x00f42400
 80091f4:	0000bb80 	.word	0x0000bb80

080091f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	e0a8      	b.n	800935c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	2382      	movs	r3, #130	; 0x82
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	429a      	cmp	r2, r3
 800921c:	d009      	beq.n	8009232 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	61da      	str	r2, [r3, #28]
 8009224:	e005      	b.n	8009232 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	225d      	movs	r2, #93	; 0x5d
 800923c:	5c9b      	ldrb	r3, [r3, r2]
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d107      	bne.n	8009254 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	225c      	movs	r2, #92	; 0x5c
 8009248:	2100      	movs	r1, #0
 800924a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	0018      	movs	r0, r3
 8009250:	f7fb fe10 	bl	8004e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	225d      	movs	r2, #93	; 0x5d
 8009258:	2102      	movs	r1, #2
 800925a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2140      	movs	r1, #64	; 0x40
 8009268:	438a      	bics	r2, r1
 800926a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	23e0      	movs	r3, #224	; 0xe0
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	429a      	cmp	r2, r3
 8009276:	d902      	bls.n	800927e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	e002      	b.n	8009284 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800927e:	2380      	movs	r3, #128	; 0x80
 8009280:	015b      	lsls	r3, r3, #5
 8009282:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	23f0      	movs	r3, #240	; 0xf0
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	429a      	cmp	r2, r3
 800928e:	d008      	beq.n	80092a2 <HAL_SPI_Init+0xaa>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	23e0      	movs	r3, #224	; 0xe0
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	429a      	cmp	r2, r3
 800929a:	d002      	beq.n	80092a2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	2382      	movs	r3, #130	; 0x82
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	401a      	ands	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6899      	ldr	r1, [r3, #8]
 80092b0:	2384      	movs	r3, #132	; 0x84
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	400b      	ands	r3, r1
 80092b6:	431a      	orrs	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	2102      	movs	r1, #2
 80092be:	400b      	ands	r3, r1
 80092c0:	431a      	orrs	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	2101      	movs	r1, #1
 80092c8:	400b      	ands	r3, r1
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6999      	ldr	r1, [r3, #24]
 80092d0:	2380      	movs	r3, #128	; 0x80
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	400b      	ands	r3, r1
 80092d6:	431a      	orrs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	2138      	movs	r1, #56	; 0x38
 80092de:	400b      	ands	r3, r1
 80092e0:	431a      	orrs	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	2180      	movs	r1, #128	; 0x80
 80092e8:	400b      	ands	r3, r1
 80092ea:	431a      	orrs	r2, r3
 80092ec:	0011      	movs	r1, r2
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092f2:	2380      	movs	r3, #128	; 0x80
 80092f4:	019b      	lsls	r3, r3, #6
 80092f6:	401a      	ands	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	699b      	ldr	r3, [r3, #24]
 8009304:	0c1b      	lsrs	r3, r3, #16
 8009306:	2204      	movs	r2, #4
 8009308:	401a      	ands	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2110      	movs	r1, #16
 8009310:	400b      	ands	r3, r1
 8009312:	431a      	orrs	r2, r3
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009318:	2108      	movs	r1, #8
 800931a:	400b      	ands	r3, r1
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68d9      	ldr	r1, [r3, #12]
 8009322:	23f0      	movs	r3, #240	; 0xf0
 8009324:	011b      	lsls	r3, r3, #4
 8009326:	400b      	ands	r3, r1
 8009328:	431a      	orrs	r2, r3
 800932a:	0011      	movs	r1, r2
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	015b      	lsls	r3, r3, #5
 8009332:	401a      	ands	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	69da      	ldr	r2, [r3, #28]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4907      	ldr	r1, [pc, #28]	; (8009364 <HAL_SPI_Init+0x16c>)
 8009348:	400a      	ands	r2, r1
 800934a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	225d      	movs	r2, #93	; 0x5d
 8009356:	2101      	movs	r1, #1
 8009358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	b004      	add	sp, #16
 8009362:	bd80      	pop	{r7, pc}
 8009364:	fffff7ff 	.word	0xfffff7ff

08009368 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	1dbb      	adds	r3, r7, #6
 8009376:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009378:	231f      	movs	r3, #31
 800937a:	18fb      	adds	r3, r7, r3
 800937c:	2200      	movs	r2, #0
 800937e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	225c      	movs	r2, #92	; 0x5c
 8009384:	5c9b      	ldrb	r3, [r3, r2]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d101      	bne.n	800938e <HAL_SPI_Transmit+0x26>
 800938a:	2302      	movs	r3, #2
 800938c:	e140      	b.n	8009610 <HAL_SPI_Transmit+0x2a8>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	225c      	movs	r2, #92	; 0x5c
 8009392:	2101      	movs	r1, #1
 8009394:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009396:	f7fc f873 	bl	8005480 <HAL_GetTick>
 800939a:	0003      	movs	r3, r0
 800939c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800939e:	2316      	movs	r3, #22
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	1dba      	adds	r2, r7, #6
 80093a4:	8812      	ldrh	r2, [r2, #0]
 80093a6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	225d      	movs	r2, #93	; 0x5d
 80093ac:	5c9b      	ldrb	r3, [r3, r2]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d004      	beq.n	80093be <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80093b4:	231f      	movs	r3, #31
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2202      	movs	r2, #2
 80093ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80093bc:	e11d      	b.n	80095fa <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_SPI_Transmit+0x64>
 80093c4:	1dbb      	adds	r3, r7, #6
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80093cc:	231f      	movs	r3, #31
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	2201      	movs	r2, #1
 80093d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80093d4:	e111      	b.n	80095fa <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	225d      	movs	r2, #93	; 0x5d
 80093da:	2103      	movs	r1, #3
 80093dc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	1dba      	adds	r2, r7, #6
 80093ee:	8812      	ldrh	r2, [r2, #0]
 80093f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1dba      	adds	r2, r7, #6
 80093f6:	8812      	ldrh	r2, [r2, #0]
 80093f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2244      	movs	r2, #68	; 0x44
 8009404:	2100      	movs	r1, #0
 8009406:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2246      	movs	r2, #70	; 0x46
 800940c:	2100      	movs	r1, #0
 800940e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	2380      	movs	r3, #128	; 0x80
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	429a      	cmp	r2, r3
 8009426:	d110      	bne.n	800944a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2140      	movs	r1, #64	; 0x40
 8009434:	438a      	bics	r2, r1
 8009436:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2180      	movs	r1, #128	; 0x80
 8009444:	01c9      	lsls	r1, r1, #7
 8009446:	430a      	orrs	r2, r1
 8009448:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2240      	movs	r2, #64	; 0x40
 8009452:	4013      	ands	r3, r2
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d007      	beq.n	8009468 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2140      	movs	r1, #64	; 0x40
 8009464:	430a      	orrs	r2, r1
 8009466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	68da      	ldr	r2, [r3, #12]
 800946c:	23e0      	movs	r3, #224	; 0xe0
 800946e:	00db      	lsls	r3, r3, #3
 8009470:	429a      	cmp	r2, r3
 8009472:	d94e      	bls.n	8009512 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d004      	beq.n	8009486 <HAL_SPI_Transmit+0x11e>
 800947c:	2316      	movs	r3, #22
 800947e:	18fb      	adds	r3, r7, r3
 8009480:	881b      	ldrh	r3, [r3, #0]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d13f      	bne.n	8009506 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	1c9a      	adds	r2, r3, #2
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80094aa:	e02c      	b.n	8009506 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2202      	movs	r2, #2
 80094b4:	4013      	ands	r3, r2
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d112      	bne.n	80094e0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	881a      	ldrh	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ca:	1c9a      	adds	r2, r3, #2
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	3b01      	subs	r3, #1
 80094d8:	b29a      	uxth	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094de:	e012      	b.n	8009506 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094e0:	f7fb ffce 	bl	8005480 <HAL_GetTick>
 80094e4:	0002      	movs	r2, r0
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d802      	bhi.n	80094f6 <HAL_SPI_Transmit+0x18e>
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	d102      	bne.n	80094fc <HAL_SPI_Transmit+0x194>
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d104      	bne.n	8009506 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80094fc:	231f      	movs	r3, #31
 80094fe:	18fb      	adds	r3, r7, r3
 8009500:	2203      	movs	r2, #3
 8009502:	701a      	strb	r2, [r3, #0]
          goto error;
 8009504:	e079      	b.n	80095fa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1cd      	bne.n	80094ac <HAL_SPI_Transmit+0x144>
 8009510:	e04f      	b.n	80095b2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d004      	beq.n	8009524 <HAL_SPI_Transmit+0x1bc>
 800951a:	2316      	movs	r3, #22
 800951c:	18fb      	adds	r3, r7, r3
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d141      	bne.n	80095a8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	330c      	adds	r3, #12
 800952e:	7812      	ldrb	r2, [r2, #0]
 8009530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009540:	b29b      	uxth	r3, r3
 8009542:	3b01      	subs	r3, #1
 8009544:	b29a      	uxth	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800954a:	e02d      	b.n	80095a8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	2202      	movs	r2, #2
 8009554:	4013      	ands	r3, r2
 8009556:	2b02      	cmp	r3, #2
 8009558:	d113      	bne.n	8009582 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	330c      	adds	r3, #12
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009576:	b29b      	uxth	r3, r3
 8009578:	3b01      	subs	r3, #1
 800957a:	b29a      	uxth	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009580:	e012      	b.n	80095a8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009582:	f7fb ff7d 	bl	8005480 <HAL_GetTick>
 8009586:	0002      	movs	r2, r0
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	429a      	cmp	r2, r3
 8009590:	d802      	bhi.n	8009598 <HAL_SPI_Transmit+0x230>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	3301      	adds	r3, #1
 8009596:	d102      	bne.n	800959e <HAL_SPI_Transmit+0x236>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800959e:	231f      	movs	r3, #31
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	2203      	movs	r2, #3
 80095a4:	701a      	strb	r2, [r3, #0]
          goto error;
 80095a6:	e028      	b.n	80095fa <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1cc      	bne.n	800954c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	0018      	movs	r0, r3
 80095ba:	f000 fdf5 	bl	800a1a8 <SPI_EndRxTxTransaction>
 80095be:	1e03      	subs	r3, r0, #0
 80095c0:	d002      	beq.n	80095c8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80095ee:	231f      	movs	r3, #31
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	2201      	movs	r2, #1
 80095f4:	701a      	strb	r2, [r3, #0]
 80095f6:	e000      	b.n	80095fa <HAL_SPI_Transmit+0x292>
  }

error:
 80095f8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	225d      	movs	r2, #93	; 0x5d
 80095fe:	2101      	movs	r1, #1
 8009600:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	225c      	movs	r2, #92	; 0x5c
 8009606:	2100      	movs	r1, #0
 8009608:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800960a:	231f      	movs	r3, #31
 800960c:	18fb      	adds	r3, r7, r3
 800960e:	781b      	ldrb	r3, [r3, #0]
}
 8009610:	0018      	movs	r0, r3
 8009612:	46bd      	mov	sp, r7
 8009614:	b008      	add	sp, #32
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009618:	b590      	push	{r4, r7, lr}
 800961a:	b089      	sub	sp, #36	; 0x24
 800961c:	af02      	add	r7, sp, #8
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	1dbb      	adds	r3, r7, #6
 8009626:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009628:	2317      	movs	r3, #23
 800962a:	18fb      	adds	r3, r7, r3
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	2382      	movs	r3, #130	; 0x82
 8009636:	005b      	lsls	r3, r3, #1
 8009638:	429a      	cmp	r2, r3
 800963a:	d113      	bne.n	8009664 <HAL_SPI_Receive+0x4c>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10f      	bne.n	8009664 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	225d      	movs	r2, #93	; 0x5d
 8009648:	2104      	movs	r1, #4
 800964a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800964c:	1dbb      	adds	r3, r7, #6
 800964e:	881c      	ldrh	r4, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	0023      	movs	r3, r4
 800965c:	f000 f928 	bl	80098b0 <HAL_SPI_TransmitReceive>
 8009660:	0003      	movs	r3, r0
 8009662:	e11c      	b.n	800989e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	225c      	movs	r2, #92	; 0x5c
 8009668:	5c9b      	ldrb	r3, [r3, r2]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_SPI_Receive+0x5a>
 800966e:	2302      	movs	r3, #2
 8009670:	e115      	b.n	800989e <HAL_SPI_Receive+0x286>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	225c      	movs	r2, #92	; 0x5c
 8009676:	2101      	movs	r1, #1
 8009678:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800967a:	f7fb ff01 	bl	8005480 <HAL_GetTick>
 800967e:	0003      	movs	r3, r0
 8009680:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	225d      	movs	r2, #93	; 0x5d
 8009686:	5c9b      	ldrb	r3, [r3, r2]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b01      	cmp	r3, #1
 800968c:	d004      	beq.n	8009698 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800968e:	2317      	movs	r3, #23
 8009690:	18fb      	adds	r3, r7, r3
 8009692:	2202      	movs	r2, #2
 8009694:	701a      	strb	r2, [r3, #0]
    goto error;
 8009696:	e0f7      	b.n	8009888 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_SPI_Receive+0x8e>
 800969e:	1dbb      	adds	r3, r7, #6
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80096a6:	2317      	movs	r3, #23
 80096a8:	18fb      	adds	r3, r7, r3
 80096aa:	2201      	movs	r2, #1
 80096ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80096ae:	e0eb      	b.n	8009888 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	225d      	movs	r2, #93	; 0x5d
 80096b4:	2104      	movs	r1, #4
 80096b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	1dba      	adds	r2, r7, #6
 80096c8:	2144      	movs	r1, #68	; 0x44
 80096ca:	8812      	ldrh	r2, [r2, #0]
 80096cc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1dba      	adds	r2, r7, #6
 80096d2:	2146      	movs	r1, #70	; 0x46
 80096d4:	8812      	ldrh	r2, [r2, #0]
 80096d6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	68da      	ldr	r2, [r3, #12]
 80096fa:	23e0      	movs	r3, #224	; 0xe0
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	429a      	cmp	r2, r3
 8009700:	d908      	bls.n	8009714 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4966      	ldr	r1, [pc, #408]	; (80098a8 <HAL_SPI_Receive+0x290>)
 800970e:	400a      	ands	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
 8009712:	e008      	b.n	8009726 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2180      	movs	r1, #128	; 0x80
 8009720:	0149      	lsls	r1, r1, #5
 8009722:	430a      	orrs	r2, r1
 8009724:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	689a      	ldr	r2, [r3, #8]
 800972a:	2380      	movs	r3, #128	; 0x80
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	429a      	cmp	r2, r3
 8009730:	d10f      	bne.n	8009752 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2140      	movs	r1, #64	; 0x40
 800973e:	438a      	bics	r2, r1
 8009740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4957      	ldr	r1, [pc, #348]	; (80098ac <HAL_SPI_Receive+0x294>)
 800974e:	400a      	ands	r2, r1
 8009750:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2240      	movs	r2, #64	; 0x40
 800975a:	4013      	ands	r3, r2
 800975c:	2b40      	cmp	r3, #64	; 0x40
 800975e:	d007      	beq.n	8009770 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2140      	movs	r1, #64	; 0x40
 800976c:	430a      	orrs	r2, r1
 800976e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	23e0      	movs	r3, #224	; 0xe0
 8009776:	00db      	lsls	r3, r3, #3
 8009778:	429a      	cmp	r2, r3
 800977a:	d900      	bls.n	800977e <HAL_SPI_Receive+0x166>
 800977c:	e069      	b.n	8009852 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800977e:	e031      	b.n	80097e4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	2201      	movs	r2, #1
 8009788:	4013      	ands	r3, r2
 800978a:	2b01      	cmp	r3, #1
 800978c:	d117      	bne.n	80097be <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	330c      	adds	r3, #12
 8009794:	001a      	movs	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979a:	7812      	ldrb	r2, [r2, #0]
 800979c:	b2d2      	uxtb	r2, r2
 800979e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2246      	movs	r2, #70	; 0x46
 80097ae:	5a9b      	ldrh	r3, [r3, r2]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b299      	uxth	r1, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2246      	movs	r2, #70	; 0x46
 80097ba:	5299      	strh	r1, [r3, r2]
 80097bc:	e012      	b.n	80097e4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097be:	f7fb fe5f 	bl	8005480 <HAL_GetTick>
 80097c2:	0002      	movs	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d802      	bhi.n	80097d4 <HAL_SPI_Receive+0x1bc>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	3301      	adds	r3, #1
 80097d2:	d102      	bne.n	80097da <HAL_SPI_Receive+0x1c2>
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d104      	bne.n	80097e4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80097da:	2317      	movs	r3, #23
 80097dc:	18fb      	adds	r3, r7, r3
 80097de:	2203      	movs	r2, #3
 80097e0:	701a      	strb	r2, [r3, #0]
          goto error;
 80097e2:	e051      	b.n	8009888 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2246      	movs	r2, #70	; 0x46
 80097e8:	5a9b      	ldrh	r3, [r3, r2]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1c7      	bne.n	8009780 <HAL_SPI_Receive+0x168>
 80097f0:	e035      	b.n	800985e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	2201      	movs	r2, #1
 80097fa:	4013      	ands	r3, r2
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d115      	bne.n	800982c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68da      	ldr	r2, [r3, #12]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980a:	b292      	uxth	r2, r2
 800980c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	1c9a      	adds	r2, r3, #2
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2246      	movs	r2, #70	; 0x46
 800981c:	5a9b      	ldrh	r3, [r3, r2]
 800981e:	b29b      	uxth	r3, r3
 8009820:	3b01      	subs	r3, #1
 8009822:	b299      	uxth	r1, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2246      	movs	r2, #70	; 0x46
 8009828:	5299      	strh	r1, [r3, r2]
 800982a:	e012      	b.n	8009852 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800982c:	f7fb fe28 	bl	8005480 <HAL_GetTick>
 8009830:	0002      	movs	r2, r0
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d802      	bhi.n	8009842 <HAL_SPI_Receive+0x22a>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	3301      	adds	r3, #1
 8009840:	d102      	bne.n	8009848 <HAL_SPI_Receive+0x230>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d104      	bne.n	8009852 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8009848:	2317      	movs	r3, #23
 800984a:	18fb      	adds	r3, r7, r3
 800984c:	2203      	movs	r2, #3
 800984e:	701a      	strb	r2, [r3, #0]
          goto error;
 8009850:	e01a      	b.n	8009888 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2246      	movs	r2, #70	; 0x46
 8009856:	5a9b      	ldrh	r3, [r3, r2]
 8009858:	b29b      	uxth	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1c9      	bne.n	80097f2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	0018      	movs	r0, r3
 8009866:	f000 fc41 	bl	800a0ec <SPI_EndRxTransaction>
 800986a:	1e03      	subs	r3, r0, #0
 800986c:	d002      	beq.n	8009874 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009878:	2b00      	cmp	r3, #0
 800987a:	d004      	beq.n	8009886 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800987c:	2317      	movs	r3, #23
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	2201      	movs	r2, #1
 8009882:	701a      	strb	r2, [r3, #0]
 8009884:	e000      	b.n	8009888 <HAL_SPI_Receive+0x270>
  }

error :
 8009886:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	225d      	movs	r2, #93	; 0x5d
 800988c:	2101      	movs	r1, #1
 800988e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	225c      	movs	r2, #92	; 0x5c
 8009894:	2100      	movs	r1, #0
 8009896:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009898:	2317      	movs	r3, #23
 800989a:	18fb      	adds	r3, r7, r3
 800989c:	781b      	ldrb	r3, [r3, #0]
}
 800989e:	0018      	movs	r0, r3
 80098a0:	46bd      	mov	sp, r7
 80098a2:	b007      	add	sp, #28
 80098a4:	bd90      	pop	{r4, r7, pc}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	ffffefff 	.word	0xffffefff
 80098ac:	ffffbfff 	.word	0xffffbfff

080098b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	; 0x28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	001a      	movs	r2, r3
 80098be:	1cbb      	adds	r3, r7, #2
 80098c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098c2:	2301      	movs	r3, #1
 80098c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098c6:	2323      	movs	r3, #35	; 0x23
 80098c8:	18fb      	adds	r3, r7, r3
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	225c      	movs	r2, #92	; 0x5c
 80098d2:	5c9b      	ldrb	r3, [r3, r2]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d101      	bne.n	80098dc <HAL_SPI_TransmitReceive+0x2c>
 80098d8:	2302      	movs	r3, #2
 80098da:	e1b5      	b.n	8009c48 <HAL_SPI_TransmitReceive+0x398>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	225c      	movs	r2, #92	; 0x5c
 80098e0:	2101      	movs	r1, #1
 80098e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098e4:	f7fb fdcc 	bl	8005480 <HAL_GetTick>
 80098e8:	0003      	movs	r3, r0
 80098ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098ec:	201b      	movs	r0, #27
 80098ee:	183b      	adds	r3, r7, r0
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	215d      	movs	r1, #93	; 0x5d
 80098f4:	5c52      	ldrb	r2, [r2, r1]
 80098f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80098fe:	2312      	movs	r3, #18
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	1cba      	adds	r2, r7, #2
 8009904:	8812      	ldrh	r2, [r2, #0]
 8009906:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009908:	183b      	adds	r3, r7, r0
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d011      	beq.n	8009934 <HAL_SPI_TransmitReceive+0x84>
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	2382      	movs	r3, #130	; 0x82
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	429a      	cmp	r2, r3
 8009918:	d107      	bne.n	800992a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <HAL_SPI_TransmitReceive+0x7a>
 8009922:	183b      	adds	r3, r7, r0
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d004      	beq.n	8009934 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800992a:	2323      	movs	r3, #35	; 0x23
 800992c:	18fb      	adds	r3, r7, r3
 800992e:	2202      	movs	r2, #2
 8009930:	701a      	strb	r2, [r3, #0]
    goto error;
 8009932:	e17e      	b.n	8009c32 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d006      	beq.n	8009948 <HAL_SPI_TransmitReceive+0x98>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <HAL_SPI_TransmitReceive+0x98>
 8009940:	1cbb      	adds	r3, r7, #2
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8009948:	2323      	movs	r3, #35	; 0x23
 800994a:	18fb      	adds	r3, r7, r3
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009950:	e16f      	b.n	8009c32 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	225d      	movs	r2, #93	; 0x5d
 8009956:	5c9b      	ldrb	r3, [r3, r2]
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b04      	cmp	r3, #4
 800995c:	d003      	beq.n	8009966 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	225d      	movs	r2, #93	; 0x5d
 8009962:	2105      	movs	r1, #5
 8009964:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	1cba      	adds	r2, r7, #2
 8009976:	2146      	movs	r1, #70	; 0x46
 8009978:	8812      	ldrh	r2, [r2, #0]
 800997a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	1cba      	adds	r2, r7, #2
 8009980:	2144      	movs	r1, #68	; 0x44
 8009982:	8812      	ldrh	r2, [r2, #0]
 8009984:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	1cba      	adds	r2, r7, #2
 8009990:	8812      	ldrh	r2, [r2, #0]
 8009992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	1cba      	adds	r2, r7, #2
 8009998:	8812      	ldrh	r2, [r2, #0]
 800999a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	23e0      	movs	r3, #224	; 0xe0
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d908      	bls.n	80099c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	49a4      	ldr	r1, [pc, #656]	; (8009c50 <HAL_SPI_TransmitReceive+0x3a0>)
 80099c0:	400a      	ands	r2, r1
 80099c2:	605a      	str	r2, [r3, #4]
 80099c4:	e008      	b.n	80099d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2180      	movs	r1, #128	; 0x80
 80099d2:	0149      	lsls	r1, r1, #5
 80099d4:	430a      	orrs	r2, r1
 80099d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2240      	movs	r2, #64	; 0x40
 80099e0:	4013      	ands	r3, r2
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d007      	beq.n	80099f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2140      	movs	r1, #64	; 0x40
 80099f2:	430a      	orrs	r2, r1
 80099f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	23e0      	movs	r3, #224	; 0xe0
 80099fc:	00db      	lsls	r3, r3, #3
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d800      	bhi.n	8009a04 <HAL_SPI_TransmitReceive+0x154>
 8009a02:	e07f      	b.n	8009b04 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d005      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x168>
 8009a0c:	2312      	movs	r3, #18
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	881b      	ldrh	r3, [r3, #0]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d000      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x168>
 8009a16:	e069      	b.n	8009aec <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	881a      	ldrh	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	1c9a      	adds	r2, r3, #2
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a3c:	e056      	b.n	8009aec <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2202      	movs	r2, #2
 8009a46:	4013      	ands	r3, r2
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d11b      	bne.n	8009a84 <HAL_SPI_TransmitReceive+0x1d4>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d016      	beq.n	8009a84 <HAL_SPI_TransmitReceive+0x1d4>
 8009a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d113      	bne.n	8009a84 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	881a      	ldrh	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	1c9a      	adds	r2, r3, #2
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d11c      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x21c>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2246      	movs	r2, #70	; 0x46
 8009a96:	5a9b      	ldrh	r3, [r3, r2]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d016      	beq.n	8009acc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68da      	ldr	r2, [r3, #12]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa8:	b292      	uxth	r2, r2
 8009aaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	1c9a      	adds	r2, r3, #2
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2246      	movs	r2, #70	; 0x46
 8009aba:	5a9b      	ldrh	r3, [r3, r2]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b299      	uxth	r1, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2246      	movs	r2, #70	; 0x46
 8009ac6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009acc:	f7fb fcd8 	bl	8005480 <HAL_GetTick>
 8009ad0:	0002      	movs	r2, r0
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d807      	bhi.n	8009aec <HAL_SPI_TransmitReceive+0x23c>
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	3301      	adds	r3, #1
 8009ae0:	d004      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8009ae2:	2323      	movs	r3, #35	; 0x23
 8009ae4:	18fb      	adds	r3, r7, r3
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	701a      	strb	r2, [r3, #0]
        goto error;
 8009aea:	e0a2      	b.n	8009c32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1a3      	bne.n	8009a3e <HAL_SPI_TransmitReceive+0x18e>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2246      	movs	r2, #70	; 0x46
 8009afa:	5a9b      	ldrh	r3, [r3, r2]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d19d      	bne.n	8009a3e <HAL_SPI_TransmitReceive+0x18e>
 8009b02:	e085      	b.n	8009c10 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <HAL_SPI_TransmitReceive+0x268>
 8009b0c:	2312      	movs	r3, #18
 8009b0e:	18fb      	adds	r3, r7, r3
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d000      	beq.n	8009b18 <HAL_SPI_TransmitReceive+0x268>
 8009b16:	e070      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	330c      	adds	r3, #12
 8009b22:	7812      	ldrb	r2, [r2, #0]
 8009b24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2a:	1c5a      	adds	r2, r3, #1
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b3e:	e05c      	b.n	8009bfa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2202      	movs	r2, #2
 8009b48:	4013      	ands	r3, r2
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d11c      	bne.n	8009b88 <HAL_SPI_TransmitReceive+0x2d8>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d017      	beq.n	8009b88 <HAL_SPI_TransmitReceive+0x2d8>
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d114      	bne.n	8009b88 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	330c      	adds	r3, #12
 8009b68:	7812      	ldrb	r2, [r2, #0]
 8009b6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4013      	ands	r3, r2
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d11e      	bne.n	8009bd4 <HAL_SPI_TransmitReceive+0x324>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2246      	movs	r2, #70	; 0x46
 8009b9a:	5a9b      	ldrh	r3, [r3, r2]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d018      	beq.n	8009bd4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	330c      	adds	r3, #12
 8009ba8:	001a      	movs	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb8:	1c5a      	adds	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2246      	movs	r2, #70	; 0x46
 8009bc2:	5a9b      	ldrh	r3, [r3, r2]
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	b299      	uxth	r1, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2246      	movs	r2, #70	; 0x46
 8009bce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009bd4:	f7fb fc54 	bl	8005480 <HAL_GetTick>
 8009bd8:	0002      	movs	r2, r0
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d802      	bhi.n	8009bea <HAL_SPI_TransmitReceive+0x33a>
 8009be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be6:	3301      	adds	r3, #1
 8009be8:	d102      	bne.n	8009bf0 <HAL_SPI_TransmitReceive+0x340>
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d104      	bne.n	8009bfa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8009bf0:	2323      	movs	r3, #35	; 0x23
 8009bf2:	18fb      	adds	r3, r7, r3
 8009bf4:	2203      	movs	r2, #3
 8009bf6:	701a      	strb	r2, [r3, #0]
        goto error;
 8009bf8:	e01b      	b.n	8009c32 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d19d      	bne.n	8009b40 <HAL_SPI_TransmitReceive+0x290>
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2246      	movs	r2, #70	; 0x46
 8009c08:	5a9b      	ldrh	r3, [r3, r2]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d197      	bne.n	8009b40 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c10:	69fa      	ldr	r2, [r7, #28]
 8009c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	0018      	movs	r0, r3
 8009c18:	f000 fac6 	bl	800a1a8 <SPI_EndRxTxTransaction>
 8009c1c:	1e03      	subs	r3, r0, #0
 8009c1e:	d007      	beq.n	8009c30 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8009c20:	2323      	movs	r3, #35	; 0x23
 8009c22:	18fb      	adds	r3, r7, r3
 8009c24:	2201      	movs	r2, #1
 8009c26:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	661a      	str	r2, [r3, #96]	; 0x60
 8009c2e:	e000      	b.n	8009c32 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8009c30:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	225d      	movs	r2, #93	; 0x5d
 8009c36:	2101      	movs	r1, #1
 8009c38:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	225c      	movs	r2, #92	; 0x5c
 8009c3e:	2100      	movs	r1, #0
 8009c40:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009c42:	2323      	movs	r3, #35	; 0x23
 8009c44:	18fb      	adds	r3, r7, r3
 8009c46:	781b      	ldrb	r3, [r3, #0]
}
 8009c48:	0018      	movs	r0, r3
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	b00a      	add	sp, #40	; 0x28
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	ffffefff 	.word	0xffffefff

08009c54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b088      	sub	sp, #32
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	099b      	lsrs	r3, r3, #6
 8009c70:	001a      	movs	r2, r3
 8009c72:	2301      	movs	r3, #1
 8009c74:	4013      	ands	r3, r2
 8009c76:	d10f      	bne.n	8009c98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009c7e:	d00b      	beq.n	8009c98 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	099b      	lsrs	r3, r3, #6
 8009c84:	001a      	movs	r2, r3
 8009c86:	2301      	movs	r3, #1
 8009c88:	4013      	ands	r3, r2
 8009c8a:	d005      	beq.n	8009c98 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	0010      	movs	r0, r2
 8009c94:	4798      	blx	r3
    return;
 8009c96:	e0d5      	b.n	8009e44 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	085b      	lsrs	r3, r3, #1
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	d00b      	beq.n	8009cbc <HAL_SPI_IRQHandler+0x68>
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	09db      	lsrs	r3, r3, #7
 8009ca8:	001a      	movs	r2, r3
 8009caa:	2301      	movs	r3, #1
 8009cac:	4013      	ands	r3, r2
 8009cae:	d005      	beq.n	8009cbc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	0010      	movs	r0, r2
 8009cb8:	4798      	blx	r3
    return;
 8009cba:	e0c3      	b.n	8009e44 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	095b      	lsrs	r3, r3, #5
 8009cc0:	001a      	movs	r2, r3
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_SPI_IRQHandler+0x8e>
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	099b      	lsrs	r3, r3, #6
 8009ccc:	001a      	movs	r2, r3
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	d106      	bne.n	8009ce2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	0a1b      	lsrs	r3, r3, #8
 8009cd8:	001a      	movs	r2, r3
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4013      	ands	r3, r2
 8009cde:	d100      	bne.n	8009ce2 <HAL_SPI_IRQHandler+0x8e>
 8009ce0:	e0b0      	b.n	8009e44 <HAL_SPI_IRQHandler+0x1f0>
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	095b      	lsrs	r3, r3, #5
 8009ce6:	001a      	movs	r2, r3
 8009ce8:	2301      	movs	r3, #1
 8009cea:	4013      	ands	r3, r2
 8009cec:	d100      	bne.n	8009cf0 <HAL_SPI_IRQHandler+0x9c>
 8009cee:	e0a9      	b.n	8009e44 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	099b      	lsrs	r3, r3, #6
 8009cf4:	001a      	movs	r2, r3
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	d023      	beq.n	8009d44 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	225d      	movs	r2, #93	; 0x5d
 8009d00:	5c9b      	ldrb	r3, [r3, r2]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d011      	beq.n	8009d2c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	617b      	str	r3, [r7, #20]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	e00b      	b.n	8009d44 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	613b      	str	r3, [r7, #16]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	613b      	str	r3, [r7, #16]
 8009d40:	693b      	ldr	r3, [r7, #16]
        return;
 8009d42:	e07f      	b.n	8009e44 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	095b      	lsrs	r3, r3, #5
 8009d48:	001a      	movs	r2, r3
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d014      	beq.n	8009d7a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d54:	2201      	movs	r2, #1
 8009d56:	431a      	orrs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2140      	movs	r1, #64	; 0x40
 8009d74:	438a      	bics	r2, r1
 8009d76:	601a      	str	r2, [r3, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	0a1b      	lsrs	r3, r3, #8
 8009d7e:	001a      	movs	r2, r3
 8009d80:	2301      	movs	r3, #1
 8009d82:	4013      	ands	r3, r2
 8009d84:	d00c      	beq.n	8009da0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	60bb      	str	r3, [r7, #8]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d04c      	beq.n	8009e42 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	21e0      	movs	r1, #224	; 0xe0
 8009db4:	438a      	bics	r2, r1
 8009db6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	225d      	movs	r2, #93	; 0x5d
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	d103      	bne.n	8009dd0 <HAL_SPI_IRQHandler+0x17c>
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4013      	ands	r3, r2
 8009dce:	d032      	beq.n	8009e36 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2103      	movs	r1, #3
 8009ddc:	438a      	bics	r2, r1
 8009dde:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d010      	beq.n	8009e0a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dec:	4a17      	ldr	r2, [pc, #92]	; (8009e4c <HAL_SPI_IRQHandler+0x1f8>)
 8009dee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df4:	0018      	movs	r0, r3
 8009df6:	f7fb ffd5 	bl	8005da4 <HAL_DMA_Abort_IT>
 8009dfa:	1e03      	subs	r3, r0, #0
 8009dfc:	d005      	beq.n	8009e0a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e02:	2240      	movs	r2, #64	; 0x40
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d016      	beq.n	8009e40 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e16:	4a0d      	ldr	r2, [pc, #52]	; (8009e4c <HAL_SPI_IRQHandler+0x1f8>)
 8009e18:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f7fb ffc0 	bl	8005da4 <HAL_DMA_Abort_IT>
 8009e24:	1e03      	subs	r3, r0, #0
 8009e26:	d00b      	beq.n	8009e40 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e2c:	2240      	movs	r2, #64	; 0x40
 8009e2e:	431a      	orrs	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009e34:	e004      	b.n	8009e40 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	0018      	movs	r0, r3
 8009e3a:	f000 f809 	bl	8009e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009e3e:	e000      	b.n	8009e42 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8009e40:	46c0      	nop			; (mov r8, r8)
    return;
 8009e42:	46c0      	nop			; (mov r8, r8)
  }
}
 8009e44:	46bd      	mov	sp, r7
 8009e46:	b008      	add	sp, #32
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	46c0      	nop			; (mov r8, r8)
 8009e4c:	08009e61 	.word	0x08009e61

08009e50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e58:	46c0      	nop			; (mov r8, r8)
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	b002      	add	sp, #8
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2246      	movs	r2, #70	; 0x46
 8009e72:	2100      	movs	r1, #0
 8009e74:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f7ff ffe6 	bl	8009e50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009e84:	46c0      	nop			; (mov r8, r8)
 8009e86:	46bd      	mov	sp, r7
 8009e88:	b004      	add	sp, #16
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	1dfb      	adds	r3, r7, #7
 8009e9a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009e9c:	f7fb faf0 	bl	8005480 <HAL_GetTick>
 8009ea0:	0002      	movs	r2, r0
 8009ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea4:	1a9b      	subs	r3, r3, r2
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	18d3      	adds	r3, r2, r3
 8009eaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009eac:	f7fb fae8 	bl	8005480 <HAL_GetTick>
 8009eb0:	0003      	movs	r3, r0
 8009eb2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009eb4:	4b3a      	ldr	r3, [pc, #232]	; (8009fa0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	015b      	lsls	r3, r3, #5
 8009eba:	0d1b      	lsrs	r3, r3, #20
 8009ebc:	69fa      	ldr	r2, [r7, #28]
 8009ebe:	4353      	muls	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ec2:	e058      	b.n	8009f76 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	d055      	beq.n	8009f76 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009eca:	f7fb fad9 	bl	8005480 <HAL_GetTick>
 8009ece:	0002      	movs	r2, r0
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	69fa      	ldr	r2, [r7, #28]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d902      	bls.n	8009ee0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d142      	bne.n	8009f66 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	21e0      	movs	r1, #224	; 0xe0
 8009eec:	438a      	bics	r2, r1
 8009eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	2382      	movs	r3, #130	; 0x82
 8009ef6:	005b      	lsls	r3, r3, #1
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d113      	bne.n	8009f24 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	689a      	ldr	r2, [r3, #8]
 8009f00:	2380      	movs	r3, #128	; 0x80
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d005      	beq.n	8009f14 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	689a      	ldr	r2, [r3, #8]
 8009f0c:	2380      	movs	r3, #128	; 0x80
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d107      	bne.n	8009f24 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2140      	movs	r1, #64	; 0x40
 8009f20:	438a      	bics	r2, r1
 8009f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f28:	2380      	movs	r3, #128	; 0x80
 8009f2a:	019b      	lsls	r3, r3, #6
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d110      	bne.n	8009f52 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	491a      	ldr	r1, [pc, #104]	; (8009fa4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009f3c:	400a      	ands	r2, r1
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2180      	movs	r1, #128	; 0x80
 8009f4c:	0189      	lsls	r1, r1, #6
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	225d      	movs	r2, #93	; 0x5d
 8009f56:	2101      	movs	r1, #1
 8009f58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	225c      	movs	r2, #92	; 0x5c
 8009f5e:	2100      	movs	r1, #0
 8009f60:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e017      	b.n	8009f96 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d101      	bne.n	8009f70 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	425a      	negs	r2, r3
 8009f86:	4153      	adcs	r3, r2
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	001a      	movs	r2, r3
 8009f8c:	1dfb      	adds	r3, r7, #7
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d197      	bne.n	8009ec4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	0018      	movs	r0, r3
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b008      	add	sp, #32
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	20000034 	.word	0x20000034
 8009fa4:	ffffdfff 	.word	0xffffdfff

08009fa8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009fb6:	2317      	movs	r3, #23
 8009fb8:	18fb      	adds	r3, r7, r3
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009fbe:	f7fb fa5f 	bl	8005480 <HAL_GetTick>
 8009fc2:	0002      	movs	r2, r0
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	1a9b      	subs	r3, r3, r2
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	18d3      	adds	r3, r2, r3
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009fce:	f7fb fa57 	bl	8005480 <HAL_GetTick>
 8009fd2:	0003      	movs	r3, r0
 8009fd4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	330c      	adds	r3, #12
 8009fdc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009fde:	4b41      	ldr	r3, [pc, #260]	; (800a0e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	0013      	movs	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	189b      	adds	r3, r3, r2
 8009fe8:	00da      	lsls	r2, r3, #3
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	0d1b      	lsrs	r3, r3, #20
 8009fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ff0:	4353      	muls	r3, r2
 8009ff2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009ff4:	e068      	b.n	800a0c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	23c0      	movs	r3, #192	; 0xc0
 8009ffa:	00db      	lsls	r3, r3, #3
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d10a      	bne.n	800a016 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d107      	bne.n	800a016 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	2117      	movs	r1, #23
 800a00e:	187b      	adds	r3, r7, r1
 800a010:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a012:	187b      	adds	r3, r7, r1
 800a014:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	3301      	adds	r3, #1
 800a01a:	d055      	beq.n	800a0c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a01c:	f7fb fa30 	bl	8005480 <HAL_GetTick>
 800a020:	0002      	movs	r2, r0
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a028:	429a      	cmp	r2, r3
 800a02a:	d902      	bls.n	800a032 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d142      	bne.n	800a0b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	21e0      	movs	r1, #224	; 0xe0
 800a03e:	438a      	bics	r2, r1
 800a040:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	2382      	movs	r3, #130	; 0x82
 800a048:	005b      	lsls	r3, r3, #1
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d113      	bne.n	800a076 <SPI_WaitFifoStateUntilTimeout+0xce>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	2380      	movs	r3, #128	; 0x80
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	429a      	cmp	r2, r3
 800a058:	d005      	beq.n	800a066 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	2380      	movs	r3, #128	; 0x80
 800a060:	00db      	lsls	r3, r3, #3
 800a062:	429a      	cmp	r2, r3
 800a064:	d107      	bne.n	800a076 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2140      	movs	r1, #64	; 0x40
 800a072:	438a      	bics	r2, r1
 800a074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a07a:	2380      	movs	r3, #128	; 0x80
 800a07c:	019b      	lsls	r3, r3, #6
 800a07e:	429a      	cmp	r2, r3
 800a080:	d110      	bne.n	800a0a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4916      	ldr	r1, [pc, #88]	; (800a0e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800a08e:	400a      	ands	r2, r1
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2180      	movs	r1, #128	; 0x80
 800a09e:	0189      	lsls	r1, r1, #6
 800a0a0:	430a      	orrs	r2, r1
 800a0a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	225d      	movs	r2, #93	; 0x5d
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	225c      	movs	r2, #92	; 0x5c
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e010      	b.n	800a0da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	3b01      	subs	r3, #1
 800a0c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d18e      	bne.n	8009ff6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	0018      	movs	r0, r3
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	b00a      	add	sp, #40	; 0x28
 800a0e0:	bd80      	pop	{r7, pc}
 800a0e2:	46c0      	nop			; (mov r8, r8)
 800a0e4:	20000034 	.word	0x20000034
 800a0e8:	ffffdfff 	.word	0xffffdfff

0800a0ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af02      	add	r7, sp, #8
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	2382      	movs	r3, #130	; 0x82
 800a0fe:	005b      	lsls	r3, r3, #1
 800a100:	429a      	cmp	r2, r3
 800a102:	d113      	bne.n	800a12c <SPI_EndRxTransaction+0x40>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	2380      	movs	r3, #128	; 0x80
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d005      	beq.n	800a11c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	689a      	ldr	r2, [r3, #8]
 800a114:	2380      	movs	r3, #128	; 0x80
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	429a      	cmp	r2, r3
 800a11a:	d107      	bne.n	800a12c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2140      	movs	r1, #64	; 0x40
 800a128:	438a      	bics	r2, r1
 800a12a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	0013      	movs	r3, r2
 800a136:	2200      	movs	r2, #0
 800a138:	2180      	movs	r1, #128	; 0x80
 800a13a:	f7ff fea7 	bl	8009e8c <SPI_WaitFlagStateUntilTimeout>
 800a13e:	1e03      	subs	r3, r0, #0
 800a140:	d007      	beq.n	800a152 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a146:	2220      	movs	r2, #32
 800a148:	431a      	orrs	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e026      	b.n	800a1a0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	2382      	movs	r3, #130	; 0x82
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d11f      	bne.n	800a19e <SPI_EndRxTransaction+0xb2>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	429a      	cmp	r2, r3
 800a168:	d005      	beq.n	800a176 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	2380      	movs	r3, #128	; 0x80
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	429a      	cmp	r2, r3
 800a174:	d113      	bne.n	800a19e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	23c0      	movs	r3, #192	; 0xc0
 800a17a:	00d9      	lsls	r1, r3, #3
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	0013      	movs	r3, r2
 800a184:	2200      	movs	r2, #0
 800a186:	f7ff ff0f 	bl	8009fa8 <SPI_WaitFifoStateUntilTimeout>
 800a18a:	1e03      	subs	r3, r0, #0
 800a18c:	d007      	beq.n	800a19e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a192:	2220      	movs	r2, #32
 800a194:	431a      	orrs	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e000      	b.n	800a1a0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	0018      	movs	r0, r3
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	b004      	add	sp, #16
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	23c0      	movs	r3, #192	; 0xc0
 800a1b8:	0159      	lsls	r1, r3, #5
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	0013      	movs	r3, r2
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f7ff fef0 	bl	8009fa8 <SPI_WaitFifoStateUntilTimeout>
 800a1c8:	1e03      	subs	r3, r0, #0
 800a1ca:	d007      	beq.n	800a1dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e027      	b.n	800a22c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	0013      	movs	r3, r2
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2180      	movs	r1, #128	; 0x80
 800a1ea:	f7ff fe4f 	bl	8009e8c <SPI_WaitFlagStateUntilTimeout>
 800a1ee:	1e03      	subs	r3, r0, #0
 800a1f0:	d007      	beq.n	800a202 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1f6:	2220      	movs	r2, #32
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e014      	b.n	800a22c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	23c0      	movs	r3, #192	; 0xc0
 800a206:	00d9      	lsls	r1, r3, #3
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	0013      	movs	r3, r2
 800a210:	2200      	movs	r2, #0
 800a212:	f7ff fec9 	bl	8009fa8 <SPI_WaitFifoStateUntilTimeout>
 800a216:	1e03      	subs	r3, r0, #0
 800a218:	d007      	beq.n	800a22a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a21e:	2220      	movs	r2, #32
 800a220:	431a      	orrs	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e000      	b.n	800a22c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	0018      	movs	r0, r3
 800a22e:	46bd      	mov	sp, r7
 800a230:	b004      	add	sp, #16
 800a232:	bd80      	pop	{r7, pc}

0800a234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e04a      	b.n	800a2dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	223d      	movs	r2, #61	; 0x3d
 800a24a:	5c9b      	ldrb	r3, [r3, r2]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d107      	bne.n	800a262 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	223c      	movs	r2, #60	; 0x3c
 800a256:	2100      	movs	r1, #0
 800a258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	0018      	movs	r0, r3
 800a25e:	f7fa fe73 	bl	8004f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	223d      	movs	r2, #61	; 0x3d
 800a266:	2102      	movs	r1, #2
 800a268:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	3304      	adds	r3, #4
 800a272:	0019      	movs	r1, r3
 800a274:	0010      	movs	r0, r2
 800a276:	f000 fb55 	bl	800a924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2248      	movs	r2, #72	; 0x48
 800a27e:	2101      	movs	r1, #1
 800a280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	223e      	movs	r2, #62	; 0x3e
 800a286:	2101      	movs	r1, #1
 800a288:	5499      	strb	r1, [r3, r2]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	223f      	movs	r2, #63	; 0x3f
 800a28e:	2101      	movs	r1, #1
 800a290:	5499      	strb	r1, [r3, r2]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2240      	movs	r2, #64	; 0x40
 800a296:	2101      	movs	r1, #1
 800a298:	5499      	strb	r1, [r3, r2]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2241      	movs	r2, #65	; 0x41
 800a29e:	2101      	movs	r1, #1
 800a2a0:	5499      	strb	r1, [r3, r2]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2242      	movs	r2, #66	; 0x42
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	5499      	strb	r1, [r3, r2]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2243      	movs	r2, #67	; 0x43
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2244      	movs	r2, #68	; 0x44
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	5499      	strb	r1, [r3, r2]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2245      	movs	r2, #69	; 0x45
 800a2be:	2101      	movs	r1, #1
 800a2c0:	5499      	strb	r1, [r3, r2]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2246      	movs	r2, #70	; 0x46
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	5499      	strb	r1, [r3, r2]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2247      	movs	r2, #71	; 0x47
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	223d      	movs	r2, #61	; 0x3d
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	0018      	movs	r0, r3
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	b002      	add	sp, #8
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e04a      	b.n	800a38c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	223d      	movs	r2, #61	; 0x3d
 800a2fa:	5c9b      	ldrb	r3, [r3, r2]
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d107      	bne.n	800a312 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	223c      	movs	r2, #60	; 0x3c
 800a306:	2100      	movs	r1, #0
 800a308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	0018      	movs	r0, r3
 800a30e:	f000 f841 	bl	800a394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	223d      	movs	r2, #61	; 0x3d
 800a316:	2102      	movs	r1, #2
 800a318:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	3304      	adds	r3, #4
 800a322:	0019      	movs	r1, r3
 800a324:	0010      	movs	r0, r2
 800a326:	f000 fafd 	bl	800a924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2248      	movs	r2, #72	; 0x48
 800a32e:	2101      	movs	r1, #1
 800a330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	223e      	movs	r2, #62	; 0x3e
 800a336:	2101      	movs	r1, #1
 800a338:	5499      	strb	r1, [r3, r2]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	223f      	movs	r2, #63	; 0x3f
 800a33e:	2101      	movs	r1, #1
 800a340:	5499      	strb	r1, [r3, r2]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2240      	movs	r2, #64	; 0x40
 800a346:	2101      	movs	r1, #1
 800a348:	5499      	strb	r1, [r3, r2]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2241      	movs	r2, #65	; 0x41
 800a34e:	2101      	movs	r1, #1
 800a350:	5499      	strb	r1, [r3, r2]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2242      	movs	r2, #66	; 0x42
 800a356:	2101      	movs	r1, #1
 800a358:	5499      	strb	r1, [r3, r2]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2243      	movs	r2, #67	; 0x43
 800a35e:	2101      	movs	r1, #1
 800a360:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2244      	movs	r2, #68	; 0x44
 800a366:	2101      	movs	r1, #1
 800a368:	5499      	strb	r1, [r3, r2]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2245      	movs	r2, #69	; 0x45
 800a36e:	2101      	movs	r1, #1
 800a370:	5499      	strb	r1, [r3, r2]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2246      	movs	r2, #70	; 0x46
 800a376:	2101      	movs	r1, #1
 800a378:	5499      	strb	r1, [r3, r2]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2247      	movs	r2, #71	; 0x47
 800a37e:	2101      	movs	r1, #1
 800a380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	223d      	movs	r2, #61	; 0x3d
 800a386:	2101      	movs	r1, #1
 800a388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	0018      	movs	r0, r3
 800a38e:	46bd      	mov	sp, r7
 800a390:	b002      	add	sp, #8
 800a392:	bd80      	pop	{r7, pc}

0800a394 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a39c:	46c0      	nop			; (mov r8, r8)
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	b002      	add	sp, #8
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d108      	bne.n	800a3c6 <HAL_TIM_PWM_Start+0x22>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	223e      	movs	r2, #62	; 0x3e
 800a3b8:	5c9b      	ldrb	r3, [r3, r2]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	1e5a      	subs	r2, r3, #1
 800a3c0:	4193      	sbcs	r3, r2
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	e037      	b.n	800a436 <HAL_TIM_PWM_Start+0x92>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d108      	bne.n	800a3de <HAL_TIM_PWM_Start+0x3a>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	223f      	movs	r2, #63	; 0x3f
 800a3d0:	5c9b      	ldrb	r3, [r3, r2]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	1e5a      	subs	r2, r3, #1
 800a3d8:	4193      	sbcs	r3, r2
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	e02b      	b.n	800a436 <HAL_TIM_PWM_Start+0x92>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b08      	cmp	r3, #8
 800a3e2:	d108      	bne.n	800a3f6 <HAL_TIM_PWM_Start+0x52>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2240      	movs	r2, #64	; 0x40
 800a3e8:	5c9b      	ldrb	r3, [r3, r2]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	1e5a      	subs	r2, r3, #1
 800a3f0:	4193      	sbcs	r3, r2
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	e01f      	b.n	800a436 <HAL_TIM_PWM_Start+0x92>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b0c      	cmp	r3, #12
 800a3fa:	d108      	bne.n	800a40e <HAL_TIM_PWM_Start+0x6a>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2241      	movs	r2, #65	; 0x41
 800a400:	5c9b      	ldrb	r3, [r3, r2]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	3b01      	subs	r3, #1
 800a406:	1e5a      	subs	r2, r3, #1
 800a408:	4193      	sbcs	r3, r2
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	e013      	b.n	800a436 <HAL_TIM_PWM_Start+0x92>
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b10      	cmp	r3, #16
 800a412:	d108      	bne.n	800a426 <HAL_TIM_PWM_Start+0x82>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2242      	movs	r2, #66	; 0x42
 800a418:	5c9b      	ldrb	r3, [r3, r2]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	3b01      	subs	r3, #1
 800a41e:	1e5a      	subs	r2, r3, #1
 800a420:	4193      	sbcs	r3, r2
 800a422:	b2db      	uxtb	r3, r3
 800a424:	e007      	b.n	800a436 <HAL_TIM_PWM_Start+0x92>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2243      	movs	r2, #67	; 0x43
 800a42a:	5c9b      	ldrb	r3, [r3, r2]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	4193      	sbcs	r3, r2
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e08b      	b.n	800a556 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d104      	bne.n	800a44e <HAL_TIM_PWM_Start+0xaa>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	223e      	movs	r2, #62	; 0x3e
 800a448:	2102      	movs	r1, #2
 800a44a:	5499      	strb	r1, [r3, r2]
 800a44c:	e023      	b.n	800a496 <HAL_TIM_PWM_Start+0xf2>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b04      	cmp	r3, #4
 800a452:	d104      	bne.n	800a45e <HAL_TIM_PWM_Start+0xba>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	223f      	movs	r2, #63	; 0x3f
 800a458:	2102      	movs	r1, #2
 800a45a:	5499      	strb	r1, [r3, r2]
 800a45c:	e01b      	b.n	800a496 <HAL_TIM_PWM_Start+0xf2>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b08      	cmp	r3, #8
 800a462:	d104      	bne.n	800a46e <HAL_TIM_PWM_Start+0xca>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2240      	movs	r2, #64	; 0x40
 800a468:	2102      	movs	r1, #2
 800a46a:	5499      	strb	r1, [r3, r2]
 800a46c:	e013      	b.n	800a496 <HAL_TIM_PWM_Start+0xf2>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b0c      	cmp	r3, #12
 800a472:	d104      	bne.n	800a47e <HAL_TIM_PWM_Start+0xda>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2241      	movs	r2, #65	; 0x41
 800a478:	2102      	movs	r1, #2
 800a47a:	5499      	strb	r1, [r3, r2]
 800a47c:	e00b      	b.n	800a496 <HAL_TIM_PWM_Start+0xf2>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b10      	cmp	r3, #16
 800a482:	d104      	bne.n	800a48e <HAL_TIM_PWM_Start+0xea>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2242      	movs	r2, #66	; 0x42
 800a488:	2102      	movs	r1, #2
 800a48a:	5499      	strb	r1, [r3, r2]
 800a48c:	e003      	b.n	800a496 <HAL_TIM_PWM_Start+0xf2>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2243      	movs	r2, #67	; 0x43
 800a492:	2102      	movs	r1, #2
 800a494:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	2201      	movs	r2, #1
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f000 fe20 	bl	800b0e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a2d      	ldr	r2, [pc, #180]	; (800a560 <HAL_TIM_PWM_Start+0x1bc>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d00e      	beq.n	800a4cc <HAL_TIM_PWM_Start+0x128>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a2c      	ldr	r2, [pc, #176]	; (800a564 <HAL_TIM_PWM_Start+0x1c0>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d009      	beq.n	800a4cc <HAL_TIM_PWM_Start+0x128>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a2a      	ldr	r2, [pc, #168]	; (800a568 <HAL_TIM_PWM_Start+0x1c4>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d004      	beq.n	800a4cc <HAL_TIM_PWM_Start+0x128>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a29      	ldr	r2, [pc, #164]	; (800a56c <HAL_TIM_PWM_Start+0x1c8>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d101      	bne.n	800a4d0 <HAL_TIM_PWM_Start+0x12c>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <HAL_TIM_PWM_Start+0x12e>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d008      	beq.n	800a4e8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2180      	movs	r1, #128	; 0x80
 800a4e2:	0209      	lsls	r1, r1, #8
 800a4e4:	430a      	orrs	r2, r1
 800a4e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	4a1c      	ldr	r2, [pc, #112]	; (800a560 <HAL_TIM_PWM_Start+0x1bc>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d00f      	beq.n	800a512 <HAL_TIM_PWM_Start+0x16e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	2380      	movs	r3, #128	; 0x80
 800a4f8:	05db      	lsls	r3, r3, #23
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d009      	beq.n	800a512 <HAL_TIM_PWM_Start+0x16e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <HAL_TIM_PWM_Start+0x1cc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d004      	beq.n	800a512 <HAL_TIM_PWM_Start+0x16e>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a15      	ldr	r2, [pc, #84]	; (800a564 <HAL_TIM_PWM_Start+0x1c0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d116      	bne.n	800a540 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	4a16      	ldr	r2, [pc, #88]	; (800a574 <HAL_TIM_PWM_Start+0x1d0>)
 800a51a:	4013      	ands	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2b06      	cmp	r3, #6
 800a522:	d016      	beq.n	800a552 <HAL_TIM_PWM_Start+0x1ae>
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	2380      	movs	r3, #128	; 0x80
 800a528:	025b      	lsls	r3, r3, #9
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d011      	beq.n	800a552 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2101      	movs	r1, #1
 800a53a:	430a      	orrs	r2, r1
 800a53c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a53e:	e008      	b.n	800a552 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2101      	movs	r1, #1
 800a54c:	430a      	orrs	r2, r1
 800a54e:	601a      	str	r2, [r3, #0]
 800a550:	e000      	b.n	800a554 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a552:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a554:	2300      	movs	r3, #0
}
 800a556:	0018      	movs	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	b004      	add	sp, #16
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	46c0      	nop			; (mov r8, r8)
 800a560:	40012c00 	.word	0x40012c00
 800a564:	40014000 	.word	0x40014000
 800a568:	40014400 	.word	0x40014400
 800a56c:	40014800 	.word	0x40014800
 800a570:	40000400 	.word	0x40000400
 800a574:	00010007 	.word	0x00010007

0800a578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b086      	sub	sp, #24
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a584:	2317      	movs	r3, #23
 800a586:	18fb      	adds	r3, r7, r3
 800a588:	2200      	movs	r2, #0
 800a58a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	223c      	movs	r2, #60	; 0x3c
 800a590:	5c9b      	ldrb	r3, [r3, r2]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d101      	bne.n	800a59a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a596:	2302      	movs	r3, #2
 800a598:	e0e5      	b.n	800a766 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	223c      	movs	r2, #60	; 0x3c
 800a59e:	2101      	movs	r1, #1
 800a5a0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b14      	cmp	r3, #20
 800a5a6:	d900      	bls.n	800a5aa <HAL_TIM_PWM_ConfigChannel+0x32>
 800a5a8:	e0d1      	b.n	800a74e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	009a      	lsls	r2, r3, #2
 800a5ae:	4b70      	ldr	r3, [pc, #448]	; (800a770 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a5b0:	18d3      	adds	r3, r2, r3
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	68ba      	ldr	r2, [r7, #8]
 800a5bc:	0011      	movs	r1, r2
 800a5be:	0018      	movs	r0, r3
 800a5c0:	f000 fa30 	bl	800aa24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699a      	ldr	r2, [r3, #24]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2108      	movs	r1, #8
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	699a      	ldr	r2, [r3, #24]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2104      	movs	r1, #4
 800a5e0:	438a      	bics	r2, r1
 800a5e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6999      	ldr	r1, [r3, #24]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	691a      	ldr	r2, [r3, #16]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	619a      	str	r2, [r3, #24]
      break;
 800a5f6:	e0af      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	0011      	movs	r1, r2
 800a600:	0018      	movs	r0, r3
 800a602:	f000 fa99 	bl	800ab38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	699a      	ldr	r2, [r3, #24]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2180      	movs	r1, #128	; 0x80
 800a612:	0109      	lsls	r1, r1, #4
 800a614:	430a      	orrs	r2, r1
 800a616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4954      	ldr	r1, [pc, #336]	; (800a774 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a624:	400a      	ands	r2, r1
 800a626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6999      	ldr	r1, [r3, #24]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	021a      	lsls	r2, r3, #8
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	619a      	str	r2, [r3, #24]
      break;
 800a63c:	e08c      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	0011      	movs	r1, r2
 800a646:	0018      	movs	r0, r3
 800a648:	f000 fafa 	bl	800ac40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	69da      	ldr	r2, [r3, #28]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2108      	movs	r1, #8
 800a658:	430a      	orrs	r2, r1
 800a65a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	69da      	ldr	r2, [r3, #28]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2104      	movs	r1, #4
 800a668:	438a      	bics	r2, r1
 800a66a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	69d9      	ldr	r1, [r3, #28]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	691a      	ldr	r2, [r3, #16]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	61da      	str	r2, [r3, #28]
      break;
 800a67e:	e06b      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68ba      	ldr	r2, [r7, #8]
 800a686:	0011      	movs	r1, r2
 800a688:	0018      	movs	r0, r3
 800a68a:	f000 fb61 	bl	800ad50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2180      	movs	r1, #128	; 0x80
 800a69a:	0109      	lsls	r1, r1, #4
 800a69c:	430a      	orrs	r2, r1
 800a69e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69da      	ldr	r2, [r3, #28]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4932      	ldr	r1, [pc, #200]	; (800a774 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a6ac:	400a      	ands	r2, r1
 800a6ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	69d9      	ldr	r1, [r3, #28]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	021a      	lsls	r2, r3, #8
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	430a      	orrs	r2, r1
 800a6c2:	61da      	str	r2, [r3, #28]
      break;
 800a6c4:	e048      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	0011      	movs	r1, r2
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f000 fba8 	bl	800ae24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	2108      	movs	r1, #8
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2104      	movs	r1, #4
 800a6f0:	438a      	bics	r2, r1
 800a6f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	691a      	ldr	r2, [r3, #16]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a706:	e027      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68ba      	ldr	r2, [r7, #8]
 800a70e:	0011      	movs	r1, r2
 800a710:	0018      	movs	r0, r3
 800a712:	f000 fbe7 	bl	800aee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2180      	movs	r1, #128	; 0x80
 800a722:	0109      	lsls	r1, r1, #4
 800a724:	430a      	orrs	r2, r1
 800a726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4910      	ldr	r1, [pc, #64]	; (800a774 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a734:	400a      	ands	r2, r1
 800a736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	021a      	lsls	r2, r3, #8
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a74c:	e004      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a74e:	2317      	movs	r3, #23
 800a750:	18fb      	adds	r3, r7, r3
 800a752:	2201      	movs	r2, #1
 800a754:	701a      	strb	r2, [r3, #0]
      break;
 800a756:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	223c      	movs	r2, #60	; 0x3c
 800a75c:	2100      	movs	r1, #0
 800a75e:	5499      	strb	r1, [r3, r2]

  return status;
 800a760:	2317      	movs	r3, #23
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	781b      	ldrb	r3, [r3, #0]
}
 800a766:	0018      	movs	r0, r3
 800a768:	46bd      	mov	sp, r7
 800a76a:	b006      	add	sp, #24
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	08018428 	.word	0x08018428
 800a774:	fffffbff 	.word	0xfffffbff

0800a778 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a782:	230f      	movs	r3, #15
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	2200      	movs	r2, #0
 800a788:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	223c      	movs	r2, #60	; 0x3c
 800a78e:	5c9b      	ldrb	r3, [r3, r2]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_TIM_ConfigClockSource+0x20>
 800a794:	2302      	movs	r3, #2
 800a796:	e0bc      	b.n	800a912 <HAL_TIM_ConfigClockSource+0x19a>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	223c      	movs	r2, #60	; 0x3c
 800a79c:	2101      	movs	r1, #1
 800a79e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	223d      	movs	r2, #61	; 0x3d
 800a7a4:	2102      	movs	r1, #2
 800a7a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	4a5a      	ldr	r2, [pc, #360]	; (800a91c <HAL_TIM_ConfigClockSource+0x1a4>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4a59      	ldr	r2, [pc, #356]	; (800a920 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2280      	movs	r2, #128	; 0x80
 800a7ce:	0192      	lsls	r2, r2, #6
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d040      	beq.n	800a856 <HAL_TIM_ConfigClockSource+0xde>
 800a7d4:	2280      	movs	r2, #128	; 0x80
 800a7d6:	0192      	lsls	r2, r2, #6
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d900      	bls.n	800a7de <HAL_TIM_ConfigClockSource+0x66>
 800a7dc:	e088      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a7de:	2280      	movs	r2, #128	; 0x80
 800a7e0:	0152      	lsls	r2, r2, #5
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d100      	bne.n	800a7e8 <HAL_TIM_ConfigClockSource+0x70>
 800a7e6:	e088      	b.n	800a8fa <HAL_TIM_ConfigClockSource+0x182>
 800a7e8:	2280      	movs	r2, #128	; 0x80
 800a7ea:	0152      	lsls	r2, r2, #5
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d900      	bls.n	800a7f2 <HAL_TIM_ConfigClockSource+0x7a>
 800a7f0:	e07e      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a7f2:	2b70      	cmp	r3, #112	; 0x70
 800a7f4:	d018      	beq.n	800a828 <HAL_TIM_ConfigClockSource+0xb0>
 800a7f6:	d900      	bls.n	800a7fa <HAL_TIM_ConfigClockSource+0x82>
 800a7f8:	e07a      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a7fa:	2b60      	cmp	r3, #96	; 0x60
 800a7fc:	d04f      	beq.n	800a89e <HAL_TIM_ConfigClockSource+0x126>
 800a7fe:	d900      	bls.n	800a802 <HAL_TIM_ConfigClockSource+0x8a>
 800a800:	e076      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a802:	2b50      	cmp	r3, #80	; 0x50
 800a804:	d03b      	beq.n	800a87e <HAL_TIM_ConfigClockSource+0x106>
 800a806:	d900      	bls.n	800a80a <HAL_TIM_ConfigClockSource+0x92>
 800a808:	e072      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a80a:	2b40      	cmp	r3, #64	; 0x40
 800a80c:	d057      	beq.n	800a8be <HAL_TIM_ConfigClockSource+0x146>
 800a80e:	d900      	bls.n	800a812 <HAL_TIM_ConfigClockSource+0x9a>
 800a810:	e06e      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a812:	2b30      	cmp	r3, #48	; 0x30
 800a814:	d063      	beq.n	800a8de <HAL_TIM_ConfigClockSource+0x166>
 800a816:	d86b      	bhi.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a818:	2b20      	cmp	r3, #32
 800a81a:	d060      	beq.n	800a8de <HAL_TIM_ConfigClockSource+0x166>
 800a81c:	d868      	bhi.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d05d      	beq.n	800a8de <HAL_TIM_ConfigClockSource+0x166>
 800a822:	2b10      	cmp	r3, #16
 800a824:	d05b      	beq.n	800a8de <HAL_TIM_ConfigClockSource+0x166>
 800a826:	e063      	b.n	800a8f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6818      	ldr	r0, [r3, #0]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	6899      	ldr	r1, [r3, #8]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	f000 fc34 	bl	800b0a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2277      	movs	r2, #119	; 0x77
 800a848:	4313      	orrs	r3, r2
 800a84a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	609a      	str	r2, [r3, #8]
      break;
 800a854:	e052      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	6899      	ldr	r1, [r3, #8]
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f000 fc1d 	bl	800b0a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689a      	ldr	r2, [r3, #8]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2180      	movs	r1, #128	; 0x80
 800a876:	01c9      	lsls	r1, r1, #7
 800a878:	430a      	orrs	r2, r1
 800a87a:	609a      	str	r2, [r3, #8]
      break;
 800a87c:	e03e      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6818      	ldr	r0, [r3, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	6859      	ldr	r1, [r3, #4]
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	001a      	movs	r2, r3
 800a88c:	f000 fb8e 	bl	800afac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2150      	movs	r1, #80	; 0x50
 800a896:	0018      	movs	r0, r3
 800a898:	f000 fbe8 	bl	800b06c <TIM_ITRx_SetConfig>
      break;
 800a89c:	e02e      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6818      	ldr	r0, [r3, #0]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	6859      	ldr	r1, [r3, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	001a      	movs	r2, r3
 800a8ac:	f000 fbac 	bl	800b008 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2160      	movs	r1, #96	; 0x60
 800a8b6:	0018      	movs	r0, r3
 800a8b8:	f000 fbd8 	bl	800b06c <TIM_ITRx_SetConfig>
      break;
 800a8bc:	e01e      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	6859      	ldr	r1, [r3, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	001a      	movs	r2, r3
 800a8cc:	f000 fb6e 	bl	800afac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2140      	movs	r1, #64	; 0x40
 800a8d6:	0018      	movs	r0, r3
 800a8d8:	f000 fbc8 	bl	800b06c <TIM_ITRx_SetConfig>
      break;
 800a8dc:	e00e      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	0019      	movs	r1, r3
 800a8e8:	0010      	movs	r0, r2
 800a8ea:	f000 fbbf 	bl	800b06c <TIM_ITRx_SetConfig>
      break;
 800a8ee:	e005      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a8f0:	230f      	movs	r3, #15
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	701a      	strb	r2, [r3, #0]
      break;
 800a8f8:	e000      	b.n	800a8fc <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a8fa:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	223d      	movs	r2, #61	; 0x3d
 800a900:	2101      	movs	r1, #1
 800a902:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	223c      	movs	r2, #60	; 0x3c
 800a908:	2100      	movs	r1, #0
 800a90a:	5499      	strb	r1, [r3, r2]

  return status;
 800a90c:	230f      	movs	r3, #15
 800a90e:	18fb      	adds	r3, r7, r3
 800a910:	781b      	ldrb	r3, [r3, #0]
}
 800a912:	0018      	movs	r0, r3
 800a914:	46bd      	mov	sp, r7
 800a916:	b004      	add	sp, #16
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	46c0      	nop			; (mov r8, r8)
 800a91c:	ffceff88 	.word	0xffceff88
 800a920:	ffff00ff 	.word	0xffff00ff

0800a924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a34      	ldr	r2, [pc, #208]	; (800aa08 <TIM_Base_SetConfig+0xe4>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d008      	beq.n	800a94e <TIM_Base_SetConfig+0x2a>
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	2380      	movs	r3, #128	; 0x80
 800a940:	05db      	lsls	r3, r3, #23
 800a942:	429a      	cmp	r2, r3
 800a944:	d003      	beq.n	800a94e <TIM_Base_SetConfig+0x2a>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a30      	ldr	r2, [pc, #192]	; (800aa0c <TIM_Base_SetConfig+0xe8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d108      	bne.n	800a960 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2270      	movs	r2, #112	; 0x70
 800a952:	4393      	bics	r3, r2
 800a954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a29      	ldr	r2, [pc, #164]	; (800aa08 <TIM_Base_SetConfig+0xe4>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d018      	beq.n	800a99a <TIM_Base_SetConfig+0x76>
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	2380      	movs	r3, #128	; 0x80
 800a96c:	05db      	lsls	r3, r3, #23
 800a96e:	429a      	cmp	r2, r3
 800a970:	d013      	beq.n	800a99a <TIM_Base_SetConfig+0x76>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	4a25      	ldr	r2, [pc, #148]	; (800aa0c <TIM_Base_SetConfig+0xe8>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d00f      	beq.n	800a99a <TIM_Base_SetConfig+0x76>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a24      	ldr	r2, [pc, #144]	; (800aa10 <TIM_Base_SetConfig+0xec>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00b      	beq.n	800a99a <TIM_Base_SetConfig+0x76>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a23      	ldr	r2, [pc, #140]	; (800aa14 <TIM_Base_SetConfig+0xf0>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d007      	beq.n	800a99a <TIM_Base_SetConfig+0x76>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a22      	ldr	r2, [pc, #136]	; (800aa18 <TIM_Base_SetConfig+0xf4>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d003      	beq.n	800a99a <TIM_Base_SetConfig+0x76>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a21      	ldr	r2, [pc, #132]	; (800aa1c <TIM_Base_SetConfig+0xf8>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d108      	bne.n	800a9ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	4a20      	ldr	r2, [pc, #128]	; (800aa20 <TIM_Base_SetConfig+0xfc>)
 800a99e:	4013      	ands	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2280      	movs	r2, #128	; 0x80
 800a9b0:	4393      	bics	r3, r2
 800a9b2:	001a      	movs	r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	689a      	ldr	r2, [r3, #8]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a0c      	ldr	r2, [pc, #48]	; (800aa08 <TIM_Base_SetConfig+0xe4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00b      	beq.n	800a9f2 <TIM_Base_SetConfig+0xce>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a0d      	ldr	r2, [pc, #52]	; (800aa14 <TIM_Base_SetConfig+0xf0>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d007      	beq.n	800a9f2 <TIM_Base_SetConfig+0xce>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a0c      	ldr	r2, [pc, #48]	; (800aa18 <TIM_Base_SetConfig+0xf4>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d003      	beq.n	800a9f2 <TIM_Base_SetConfig+0xce>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a0b      	ldr	r2, [pc, #44]	; (800aa1c <TIM_Base_SetConfig+0xf8>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d103      	bne.n	800a9fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	691a      	ldr	r2, [r3, #16]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	615a      	str	r2, [r3, #20]
}
 800aa00:	46c0      	nop			; (mov r8, r8)
 800aa02:	46bd      	mov	sp, r7
 800aa04:	b004      	add	sp, #16
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	40012c00 	.word	0x40012c00
 800aa0c:	40000400 	.word	0x40000400
 800aa10:	40002000 	.word	0x40002000
 800aa14:	40014000 	.word	0x40014000
 800aa18:	40014400 	.word	0x40014400
 800aa1c:	40014800 	.word	0x40014800
 800aa20:	fffffcff 	.word	0xfffffcff

0800aa24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b086      	sub	sp, #24
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a1b      	ldr	r3, [r3, #32]
 800aa32:	2201      	movs	r2, #1
 800aa34:	4393      	bics	r3, r2
 800aa36:	001a      	movs	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a1b      	ldr	r3, [r3, #32]
 800aa40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4a32      	ldr	r2, [pc, #200]	; (800ab1c <TIM_OC1_SetConfig+0xf8>)
 800aa52:	4013      	ands	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2203      	movs	r2, #3
 800aa5a:	4393      	bics	r3, r2
 800aa5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	4393      	bics	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	697a      	ldr	r2, [r7, #20]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a28      	ldr	r2, [pc, #160]	; (800ab20 <TIM_OC1_SetConfig+0xfc>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d00b      	beq.n	800aa9a <TIM_OC1_SetConfig+0x76>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a27      	ldr	r2, [pc, #156]	; (800ab24 <TIM_OC1_SetConfig+0x100>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d007      	beq.n	800aa9a <TIM_OC1_SetConfig+0x76>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a26      	ldr	r2, [pc, #152]	; (800ab28 <TIM_OC1_SetConfig+0x104>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d003      	beq.n	800aa9a <TIM_OC1_SetConfig+0x76>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a25      	ldr	r2, [pc, #148]	; (800ab2c <TIM_OC1_SetConfig+0x108>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d10c      	bne.n	800aab4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	2208      	movs	r2, #8
 800aa9e:	4393      	bics	r3, r2
 800aaa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	2204      	movs	r2, #4
 800aab0:	4393      	bics	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a1a      	ldr	r2, [pc, #104]	; (800ab20 <TIM_OC1_SetConfig+0xfc>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d00b      	beq.n	800aad4 <TIM_OC1_SetConfig+0xb0>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a19      	ldr	r2, [pc, #100]	; (800ab24 <TIM_OC1_SetConfig+0x100>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d007      	beq.n	800aad4 <TIM_OC1_SetConfig+0xb0>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a18      	ldr	r2, [pc, #96]	; (800ab28 <TIM_OC1_SetConfig+0x104>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d003      	beq.n	800aad4 <TIM_OC1_SetConfig+0xb0>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a17      	ldr	r2, [pc, #92]	; (800ab2c <TIM_OC1_SetConfig+0x108>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d111      	bne.n	800aaf8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	4a16      	ldr	r2, [pc, #88]	; (800ab30 <TIM_OC1_SetConfig+0x10c>)
 800aad8:	4013      	ands	r3, r2
 800aada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4a15      	ldr	r2, [pc, #84]	; (800ab34 <TIM_OC1_SetConfig+0x110>)
 800aae0:	4013      	ands	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	693a      	ldr	r2, [r7, #16]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	685a      	ldr	r2, [r3, #4]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	621a      	str	r2, [r3, #32]
}
 800ab12:	46c0      	nop			; (mov r8, r8)
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b006      	add	sp, #24
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	46c0      	nop			; (mov r8, r8)
 800ab1c:	fffeff8f 	.word	0xfffeff8f
 800ab20:	40012c00 	.word	0x40012c00
 800ab24:	40014000 	.word	0x40014000
 800ab28:	40014400 	.word	0x40014400
 800ab2c:	40014800 	.word	0x40014800
 800ab30:	fffffeff 	.word	0xfffffeff
 800ab34:	fffffdff 	.word	0xfffffdff

0800ab38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	2210      	movs	r2, #16
 800ab48:	4393      	bics	r3, r2
 800ab4a:	001a      	movs	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4a2e      	ldr	r2, [pc, #184]	; (800ac20 <TIM_OC2_SetConfig+0xe8>)
 800ab66:	4013      	ands	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4a2d      	ldr	r2, [pc, #180]	; (800ac24 <TIM_OC2_SetConfig+0xec>)
 800ab6e:	4013      	ands	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2220      	movs	r2, #32
 800ab82:	4393      	bics	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a24      	ldr	r2, [pc, #144]	; (800ac28 <TIM_OC2_SetConfig+0xf0>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d10d      	bne.n	800abb6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	2280      	movs	r2, #128	; 0x80
 800ab9e:	4393      	bics	r3, r2
 800aba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	4313      	orrs	r3, r2
 800abac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2240      	movs	r2, #64	; 0x40
 800abb2:	4393      	bics	r3, r2
 800abb4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a1b      	ldr	r2, [pc, #108]	; (800ac28 <TIM_OC2_SetConfig+0xf0>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00b      	beq.n	800abd6 <TIM_OC2_SetConfig+0x9e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a1a      	ldr	r2, [pc, #104]	; (800ac2c <TIM_OC2_SetConfig+0xf4>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d007      	beq.n	800abd6 <TIM_OC2_SetConfig+0x9e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a19      	ldr	r2, [pc, #100]	; (800ac30 <TIM_OC2_SetConfig+0xf8>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <TIM_OC2_SetConfig+0x9e>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a18      	ldr	r2, [pc, #96]	; (800ac34 <TIM_OC2_SetConfig+0xfc>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d113      	bne.n	800abfe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <TIM_OC2_SetConfig+0x100>)
 800abda:	4013      	ands	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	4a16      	ldr	r2, [pc, #88]	; (800ac3c <TIM_OC2_SetConfig+0x104>)
 800abe2:	4013      	ands	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	621a      	str	r2, [r3, #32]
}
 800ac18:	46c0      	nop			; (mov r8, r8)
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	b006      	add	sp, #24
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	feff8fff 	.word	0xfeff8fff
 800ac24:	fffffcff 	.word	0xfffffcff
 800ac28:	40012c00 	.word	0x40012c00
 800ac2c:	40014000 	.word	0x40014000
 800ac30:	40014400 	.word	0x40014400
 800ac34:	40014800 	.word	0x40014800
 800ac38:	fffffbff 	.word	0xfffffbff
 800ac3c:	fffff7ff 	.word	0xfffff7ff

0800ac40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	4a35      	ldr	r2, [pc, #212]	; (800ad24 <TIM_OC3_SetConfig+0xe4>)
 800ac50:	401a      	ands	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4a2f      	ldr	r2, [pc, #188]	; (800ad28 <TIM_OC3_SetConfig+0xe8>)
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2203      	movs	r2, #3
 800ac74:	4393      	bics	r3, r2
 800ac76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4a29      	ldr	r2, [pc, #164]	; (800ad2c <TIM_OC3_SetConfig+0xec>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	021b      	lsls	r3, r3, #8
 800ac90:	697a      	ldr	r2, [r7, #20]
 800ac92:	4313      	orrs	r3, r2
 800ac94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a25      	ldr	r2, [pc, #148]	; (800ad30 <TIM_OC3_SetConfig+0xf0>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d10d      	bne.n	800acba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	4a24      	ldr	r2, [pc, #144]	; (800ad34 <TIM_OC3_SetConfig+0xf4>)
 800aca2:	4013      	ands	r3, r2
 800aca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	021b      	lsls	r3, r3, #8
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	4313      	orrs	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	4a20      	ldr	r2, [pc, #128]	; (800ad38 <TIM_OC3_SetConfig+0xf8>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a1c      	ldr	r2, [pc, #112]	; (800ad30 <TIM_OC3_SetConfig+0xf0>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00b      	beq.n	800acda <TIM_OC3_SetConfig+0x9a>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a1d      	ldr	r2, [pc, #116]	; (800ad3c <TIM_OC3_SetConfig+0xfc>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d007      	beq.n	800acda <TIM_OC3_SetConfig+0x9a>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a1c      	ldr	r2, [pc, #112]	; (800ad40 <TIM_OC3_SetConfig+0x100>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d003      	beq.n	800acda <TIM_OC3_SetConfig+0x9a>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a1b      	ldr	r2, [pc, #108]	; (800ad44 <TIM_OC3_SetConfig+0x104>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d113      	bne.n	800ad02 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	4a1a      	ldr	r2, [pc, #104]	; (800ad48 <TIM_OC3_SetConfig+0x108>)
 800acde:	4013      	ands	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	4a19      	ldr	r2, [pc, #100]	; (800ad4c <TIM_OC3_SetConfig+0x10c>)
 800ace6:	4013      	ands	r3, r2
 800ace8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	011b      	lsls	r3, r3, #4
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	4313      	orrs	r3, r2
 800acf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	697a      	ldr	r2, [r7, #20]
 800ad1a:	621a      	str	r2, [r3, #32]
}
 800ad1c:	46c0      	nop			; (mov r8, r8)
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b006      	add	sp, #24
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	fffffeff 	.word	0xfffffeff
 800ad28:	fffeff8f 	.word	0xfffeff8f
 800ad2c:	fffffdff 	.word	0xfffffdff
 800ad30:	40012c00 	.word	0x40012c00
 800ad34:	fffff7ff 	.word	0xfffff7ff
 800ad38:	fffffbff 	.word	0xfffffbff
 800ad3c:	40014000 	.word	0x40014000
 800ad40:	40014400 	.word	0x40014400
 800ad44:	40014800 	.word	0x40014800
 800ad48:	ffffefff 	.word	0xffffefff
 800ad4c:	ffffdfff 	.word	0xffffdfff

0800ad50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6a1b      	ldr	r3, [r3, #32]
 800ad5e:	4a28      	ldr	r2, [pc, #160]	; (800ae00 <TIM_OC4_SetConfig+0xb0>)
 800ad60:	401a      	ands	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	69db      	ldr	r3, [r3, #28]
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	4a22      	ldr	r2, [pc, #136]	; (800ae04 <TIM_OC4_SetConfig+0xb4>)
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4a21      	ldr	r2, [pc, #132]	; (800ae08 <TIM_OC4_SetConfig+0xb8>)
 800ad84:	4013      	ands	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	021b      	lsls	r3, r3, #8
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	4a1d      	ldr	r2, [pc, #116]	; (800ae0c <TIM_OC4_SetConfig+0xbc>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	031b      	lsls	r3, r3, #12
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a19      	ldr	r2, [pc, #100]	; (800ae10 <TIM_OC4_SetConfig+0xc0>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d00b      	beq.n	800adc8 <TIM_OC4_SetConfig+0x78>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a18      	ldr	r2, [pc, #96]	; (800ae14 <TIM_OC4_SetConfig+0xc4>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d007      	beq.n	800adc8 <TIM_OC4_SetConfig+0x78>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <TIM_OC4_SetConfig+0xc8>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d003      	beq.n	800adc8 <TIM_OC4_SetConfig+0x78>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a16      	ldr	r2, [pc, #88]	; (800ae1c <TIM_OC4_SetConfig+0xcc>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d109      	bne.n	800addc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	4a15      	ldr	r2, [pc, #84]	; (800ae20 <TIM_OC4_SetConfig+0xd0>)
 800adcc:	4013      	ands	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	019b      	lsls	r3, r3, #6
 800add6:	697a      	ldr	r2, [r7, #20]
 800add8:	4313      	orrs	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	621a      	str	r2, [r3, #32]
}
 800adf6:	46c0      	nop			; (mov r8, r8)
 800adf8:	46bd      	mov	sp, r7
 800adfa:	b006      	add	sp, #24
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	ffffefff 	.word	0xffffefff
 800ae04:	feff8fff 	.word	0xfeff8fff
 800ae08:	fffffcff 	.word	0xfffffcff
 800ae0c:	ffffdfff 	.word	0xffffdfff
 800ae10:	40012c00 	.word	0x40012c00
 800ae14:	40014000 	.word	0x40014000
 800ae18:	40014400 	.word	0x40014400
 800ae1c:	40014800 	.word	0x40014800
 800ae20:	ffffbfff 	.word	0xffffbfff

0800ae24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	4a25      	ldr	r2, [pc, #148]	; (800aec8 <TIM_OC5_SetConfig+0xa4>)
 800ae34:	401a      	ands	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a1f      	ldr	r2, [pc, #124]	; (800aecc <TIM_OC5_SetConfig+0xa8>)
 800ae50:	4013      	ands	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	4a1b      	ldr	r2, [pc, #108]	; (800aed0 <TIM_OC5_SetConfig+0xac>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	041b      	lsls	r3, r3, #16
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	4a17      	ldr	r2, [pc, #92]	; (800aed4 <TIM_OC5_SetConfig+0xb0>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00b      	beq.n	800ae92 <TIM_OC5_SetConfig+0x6e>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a16      	ldr	r2, [pc, #88]	; (800aed8 <TIM_OC5_SetConfig+0xb4>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d007      	beq.n	800ae92 <TIM_OC5_SetConfig+0x6e>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a15      	ldr	r2, [pc, #84]	; (800aedc <TIM_OC5_SetConfig+0xb8>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d003      	beq.n	800ae92 <TIM_OC5_SetConfig+0x6e>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a14      	ldr	r2, [pc, #80]	; (800aee0 <TIM_OC5_SetConfig+0xbc>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d109      	bne.n	800aea6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	4a0c      	ldr	r2, [pc, #48]	; (800aec8 <TIM_OC5_SetConfig+0xa4>)
 800ae96:	4013      	ands	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	021b      	lsls	r3, r3, #8
 800aea0:	697a      	ldr	r2, [r7, #20]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	621a      	str	r2, [r3, #32]
}
 800aec0:	46c0      	nop			; (mov r8, r8)
 800aec2:	46bd      	mov	sp, r7
 800aec4:	b006      	add	sp, #24
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	fffeffff 	.word	0xfffeffff
 800aecc:	fffeff8f 	.word	0xfffeff8f
 800aed0:	fffdffff 	.word	0xfffdffff
 800aed4:	40012c00 	.word	0x40012c00
 800aed8:	40014000 	.word	0x40014000
 800aedc:	40014400 	.word	0x40014400
 800aee0:	40014800 	.word	0x40014800

0800aee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b086      	sub	sp, #24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	4a26      	ldr	r2, [pc, #152]	; (800af8c <TIM_OC6_SetConfig+0xa8>)
 800aef4:	401a      	ands	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a1b      	ldr	r3, [r3, #32]
 800aefe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4a20      	ldr	r2, [pc, #128]	; (800af90 <TIM_OC6_SetConfig+0xac>)
 800af10:	4013      	ands	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	4313      	orrs	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	4a1c      	ldr	r2, [pc, #112]	; (800af94 <TIM_OC6_SetConfig+0xb0>)
 800af24:	4013      	ands	r3, r2
 800af26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	051b      	lsls	r3, r3, #20
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	4313      	orrs	r3, r2
 800af32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a18      	ldr	r2, [pc, #96]	; (800af98 <TIM_OC6_SetConfig+0xb4>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d00b      	beq.n	800af54 <TIM_OC6_SetConfig+0x70>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	4a17      	ldr	r2, [pc, #92]	; (800af9c <TIM_OC6_SetConfig+0xb8>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d007      	beq.n	800af54 <TIM_OC6_SetConfig+0x70>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4a16      	ldr	r2, [pc, #88]	; (800afa0 <TIM_OC6_SetConfig+0xbc>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d003      	beq.n	800af54 <TIM_OC6_SetConfig+0x70>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	4a15      	ldr	r2, [pc, #84]	; (800afa4 <TIM_OC6_SetConfig+0xc0>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d109      	bne.n	800af68 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	4a14      	ldr	r2, [pc, #80]	; (800afa8 <TIM_OC6_SetConfig+0xc4>)
 800af58:	4013      	ands	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	695b      	ldr	r3, [r3, #20]
 800af60:	029b      	lsls	r3, r3, #10
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	4313      	orrs	r3, r2
 800af66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	697a      	ldr	r2, [r7, #20]
 800af6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	621a      	str	r2, [r3, #32]
}
 800af82:	46c0      	nop			; (mov r8, r8)
 800af84:	46bd      	mov	sp, r7
 800af86:	b006      	add	sp, #24
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	46c0      	nop			; (mov r8, r8)
 800af8c:	ffefffff 	.word	0xffefffff
 800af90:	feff8fff 	.word	0xfeff8fff
 800af94:	ffdfffff 	.word	0xffdfffff
 800af98:	40012c00 	.word	0x40012c00
 800af9c:	40014000 	.word	0x40014000
 800afa0:	40014400 	.word	0x40014400
 800afa4:	40014800 	.word	0x40014800
 800afa8:	fffbffff 	.word	0xfffbffff

0800afac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a1b      	ldr	r3, [r3, #32]
 800afc2:	2201      	movs	r2, #1
 800afc4:	4393      	bics	r3, r2
 800afc6:	001a      	movs	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	22f0      	movs	r2, #240	; 0xf0
 800afd6:	4393      	bics	r3, r2
 800afd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	220a      	movs	r2, #10
 800afe8:	4393      	bics	r3, r2
 800afea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	693a      	ldr	r2, [r7, #16]
 800aff8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	621a      	str	r2, [r3, #32]
}
 800b000:	46c0      	nop			; (mov r8, r8)
 800b002:	46bd      	mov	sp, r7
 800b004:	b006      	add	sp, #24
 800b006:	bd80      	pop	{r7, pc}

0800b008 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	2210      	movs	r2, #16
 800b01a:	4393      	bics	r3, r2
 800b01c:	001a      	movs	r2, r3
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	4a0d      	ldr	r2, [pc, #52]	; (800b068 <TIM_TI2_ConfigInputStage+0x60>)
 800b032:	4013      	ands	r3, r2
 800b034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	031b      	lsls	r3, r3, #12
 800b03a:	697a      	ldr	r2, [r7, #20]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	22a0      	movs	r2, #160	; 0xa0
 800b044:	4393      	bics	r3, r2
 800b046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	011b      	lsls	r3, r3, #4
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4313      	orrs	r3, r2
 800b050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	621a      	str	r2, [r3, #32]
}
 800b05e:	46c0      	nop			; (mov r8, r8)
 800b060:	46bd      	mov	sp, r7
 800b062:	b006      	add	sp, #24
 800b064:	bd80      	pop	{r7, pc}
 800b066:	46c0      	nop			; (mov r8, r8)
 800b068:	ffff0fff 	.word	0xffff0fff

0800b06c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4a08      	ldr	r2, [pc, #32]	; (800b0a0 <TIM_ITRx_SetConfig+0x34>)
 800b080:	4013      	ands	r3, r2
 800b082:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4313      	orrs	r3, r2
 800b08a:	2207      	movs	r2, #7
 800b08c:	4313      	orrs	r3, r2
 800b08e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	609a      	str	r2, [r3, #8]
}
 800b096:	46c0      	nop			; (mov r8, r8)
 800b098:	46bd      	mov	sp, r7
 800b09a:	b004      	add	sp, #16
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	ffcfff8f 	.word	0xffcfff8f

0800b0a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
 800b0b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	4a09      	ldr	r2, [pc, #36]	; (800b0e0 <TIM_ETR_SetConfig+0x3c>)
 800b0bc:	4013      	ands	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	021a      	lsls	r2, r3, #8
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	431a      	orrs	r2, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	609a      	str	r2, [r3, #8]
}
 800b0d8:	46c0      	nop			; (mov r8, r8)
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	b006      	add	sp, #24
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	ffff00ff 	.word	0xffff00ff

0800b0e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b086      	sub	sp, #24
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	221f      	movs	r2, #31
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	409a      	lsls	r2, r3
 800b0fa:	0013      	movs	r3, r2
 800b0fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	43d2      	mvns	r2, r2
 800b106:	401a      	ands	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6a1a      	ldr	r2, [r3, #32]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	211f      	movs	r1, #31
 800b114:	400b      	ands	r3, r1
 800b116:	6879      	ldr	r1, [r7, #4]
 800b118:	4099      	lsls	r1, r3
 800b11a:	000b      	movs	r3, r1
 800b11c:	431a      	orrs	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	621a      	str	r2, [r3, #32]
}
 800b122:	46c0      	nop			; (mov r8, r8)
 800b124:	46bd      	mov	sp, r7
 800b126:	b006      	add	sp, #24
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	223c      	movs	r2, #60	; 0x3c
 800b13a:	5c9b      	ldrb	r3, [r3, r2]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b140:	2302      	movs	r3, #2
 800b142:	e055      	b.n	800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	223c      	movs	r2, #60	; 0x3c
 800b148:	2101      	movs	r1, #1
 800b14a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	223d      	movs	r2, #61	; 0x3d
 800b150:	2102      	movs	r1, #2
 800b152:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a23      	ldr	r2, [pc, #140]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d108      	bne.n	800b180 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	4a22      	ldr	r2, [pc, #136]	; (800b1fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b172:	4013      	ands	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2270      	movs	r2, #112	; 0x70
 800b184:	4393      	bics	r3, r2
 800b186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	4313      	orrs	r3, r2
 800b190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00f      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	2380      	movs	r3, #128	; 0x80
 800b1aa:	05db      	lsls	r3, r3, #23
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d009      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a12      	ldr	r2, [pc, #72]	; (800b200 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a11      	ldr	r2, [pc, #68]	; (800b204 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d10c      	bne.n	800b1de <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2280      	movs	r2, #128	; 0x80
 800b1c8:	4393      	bics	r3, r2
 800b1ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	223d      	movs	r2, #61	; 0x3d
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	223c      	movs	r2, #60	; 0x3c
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	0018      	movs	r0, r3
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	b004      	add	sp, #16
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	40012c00 	.word	0x40012c00
 800b1fc:	ff0fffff 	.word	0xff0fffff
 800b200:	40000400 	.word	0x40000400
 800b204:	40014000 	.word	0x40014000

0800b208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	223c      	movs	r2, #60	; 0x3c
 800b21a:	5c9b      	ldrb	r3, [r3, r2]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b220:	2302      	movs	r3, #2
 800b222:	e079      	b.n	800b318 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	223c      	movs	r2, #60	; 0x3c
 800b228:	2101      	movs	r1, #1
 800b22a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	22ff      	movs	r2, #255	; 0xff
 800b230:	4393      	bics	r3, r2
 800b232:	001a      	movs	r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a38      	ldr	r2, [pc, #224]	; (800b320 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b240:	401a      	ands	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	4a35      	ldr	r2, [pc, #212]	; (800b324 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b24e:	401a      	ands	r2, r3
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	4313      	orrs	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4a33      	ldr	r2, [pc, #204]	; (800b328 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b25c:	401a      	ands	r2, r3
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4a30      	ldr	r2, [pc, #192]	; (800b32c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b26a:	401a      	ands	r2, r3
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	4313      	orrs	r3, r2
 800b272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	4a2e      	ldr	r2, [pc, #184]	; (800b330 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b278:	401a      	ands	r2, r3
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	4a2b      	ldr	r2, [pc, #172]	; (800b334 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b286:	401a      	ands	r2, r3
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	4313      	orrs	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4a29      	ldr	r2, [pc, #164]	; (800b338 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b294:	401a      	ands	r2, r3
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	041b      	lsls	r3, r3, #16
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a25      	ldr	r2, [pc, #148]	; (800b33c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d106      	bne.n	800b2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	4a24      	ldr	r2, [pc, #144]	; (800b340 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b2ae:	401a      	ands	r2, r3
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a1f      	ldr	r2, [pc, #124]	; (800b33c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d121      	bne.n	800b306 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	4a1f      	ldr	r2, [pc, #124]	; (800b344 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b2c6:	401a      	ands	r2, r3
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2cc:	051b      	lsls	r3, r3, #20
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4a1c      	ldr	r2, [pc, #112]	; (800b348 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800b2d6:	401a      	ands	r2, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	6a1b      	ldr	r3, [r3, #32]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800b2e4:	401a      	ands	r2, r3
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a12      	ldr	r2, [pc, #72]	; (800b33c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d106      	bne.n	800b306 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4a15      	ldr	r2, [pc, #84]	; (800b350 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800b2fc:	401a      	ands	r2, r3
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	223c      	movs	r2, #60	; 0x3c
 800b312:	2100      	movs	r1, #0
 800b314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	0018      	movs	r0, r3
 800b31a:	46bd      	mov	sp, r7
 800b31c:	b004      	add	sp, #16
 800b31e:	bd80      	pop	{r7, pc}
 800b320:	fffffcff 	.word	0xfffffcff
 800b324:	fffffbff 	.word	0xfffffbff
 800b328:	fffff7ff 	.word	0xfffff7ff
 800b32c:	ffffefff 	.word	0xffffefff
 800b330:	ffffdfff 	.word	0xffffdfff
 800b334:	ffffbfff 	.word	0xffffbfff
 800b338:	fff0ffff 	.word	0xfff0ffff
 800b33c:	40012c00 	.word	0x40012c00
 800b340:	efffffff 	.word	0xefffffff
 800b344:	ff0fffff 	.word	0xff0fffff
 800b348:	feffffff 	.word	0xfeffffff
 800b34c:	fdffffff 	.word	0xfdffffff
 800b350:	dfffffff 	.word	0xdfffffff

0800b354 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b360:	2327      	movs	r3, #39	; 0x27
 800b362:	18fb      	adds	r3, r7, r3
 800b364:	2200      	movs	r2, #0
 800b366:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	223c      	movs	r2, #60	; 0x3c
 800b36c:	5c9b      	ldrb	r3, [r3, r2]
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d101      	bne.n	800b376 <HAL_TIMEx_ConfigBreakInput+0x22>
 800b372:	2302      	movs	r3, #2
 800b374:	e095      	b.n	800b4a2 <HAL_TIMEx_ConfigBreakInput+0x14e>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	223c      	movs	r2, #60	; 0x3c
 800b37a:	2101      	movs	r1, #1
 800b37c:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b04      	cmp	r3, #4
 800b384:	d019      	beq.n	800b3ba <HAL_TIMEx_ConfigBreakInput+0x66>
 800b386:	d822      	bhi.n	800b3ce <HAL_TIMEx_ConfigBreakInput+0x7a>
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d002      	beq.n	800b392 <HAL_TIMEx_ConfigBreakInput+0x3e>
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d00a      	beq.n	800b3a6 <HAL_TIMEx_ConfigBreakInput+0x52>
 800b390:	e01d      	b.n	800b3ce <HAL_TIMEx_ConfigBreakInput+0x7a>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800b392:	2301      	movs	r3, #1
 800b394:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800b396:	2300      	movs	r3, #0
 800b398:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800b39a:	2380      	movs	r3, #128	; 0x80
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800b3a0:	2309      	movs	r3, #9
 800b3a2:	617b      	str	r3, [r7, #20]
      break;
 800b3a4:	e01c      	b.n	800b3e0 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800b3ae:	2380      	movs	r3, #128	; 0x80
 800b3b0:	00db      	lsls	r3, r3, #3
 800b3b2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800b3b4:	230a      	movs	r3, #10
 800b3b6:	617b      	str	r3, [r7, #20]
      break;
 800b3b8:	e012      	b.n	800b3e0 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800b3ba:	2304      	movs	r3, #4
 800b3bc:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800b3be:	2302      	movs	r3, #2
 800b3c0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800b3c2:	2380      	movs	r3, #128	; 0x80
 800b3c4:	011b      	lsls	r3, r3, #4
 800b3c6:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800b3c8:	230b      	movs	r3, #11
 800b3ca:	617b      	str	r3, [r7, #20]
      break;
 800b3cc:	e008      	b.n	800b3e0 <HAL_TIMEx_ConfigBreakInput+0x8c>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	617b      	str	r3, [r7, #20]
      break;
 800b3de:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d003      	beq.n	800b3ee <HAL_TIMEx_ConfigBreakInput+0x9a>
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d027      	beq.n	800b43c <HAL_TIMEx_ConfigBreakInput+0xe8>
 800b3ec:	e04d      	b.n	800b48a <HAL_TIMEx_ConfigBreakInput+0x136>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3f4:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	43da      	mvns	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	409a      	lsls	r2, r3
 800b408:	0013      	movs	r3, r2
 800b40a:	6a3a      	ldr	r2, [r7, #32]
 800b40c:	4013      	ands	r3, r2
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	4313      	orrs	r3, r2
 800b412:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	43da      	mvns	r2, r3
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	4013      	ands	r3, r2
 800b41c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689a      	ldr	r2, [r3, #8]
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	409a      	lsls	r2, r3
 800b426:	0013      	movs	r3, r2
 800b428:	69fa      	ldr	r2, [r7, #28]
 800b42a:	4013      	ands	r3, r2
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	4313      	orrs	r3, r2
 800b430:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b43a:	e02b      	b.n	800b494 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b442:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	43da      	mvns	r2, r3
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	4013      	ands	r3, r2
 800b44c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	409a      	lsls	r2, r3
 800b456:	0013      	movs	r3, r2
 800b458:	6a3a      	ldr	r2, [r7, #32]
 800b45a:	4013      	ands	r3, r2
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	4313      	orrs	r3, r2
 800b460:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	43da      	mvns	r2, r3
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	4013      	ands	r3, r2
 800b46a:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	689a      	ldr	r2, [r3, #8]
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	409a      	lsls	r2, r3
 800b474:	0013      	movs	r3, r2
 800b476:	69fa      	ldr	r2, [r7, #28]
 800b478:	4013      	ands	r3, r2
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800b488:	e004      	b.n	800b494 <HAL_TIMEx_ConfigBreakInput+0x140>
    }
    default:
      status = HAL_ERROR;
 800b48a:	2327      	movs	r3, #39	; 0x27
 800b48c:	18fb      	adds	r3, r7, r3
 800b48e:	2201      	movs	r2, #1
 800b490:	701a      	strb	r2, [r3, #0]
      break;
 800b492:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	223c      	movs	r2, #60	; 0x3c
 800b498:	2100      	movs	r1, #0
 800b49a:	5499      	strb	r1, [r3, r2]

  return status;
 800b49c:	2327      	movs	r3, #39	; 0x27
 800b49e:	18fb      	adds	r3, r7, r3
 800b4a0:	781b      	ldrb	r3, [r3, #0]
}
 800b4a2:	0018      	movs	r0, r3
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	b00a      	add	sp, #40	; 0x28
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e03f      	b.n	800b53e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2259      	movs	r2, #89	; 0x59
 800b4c2:	5c9b      	ldrb	r3, [r3, r2]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d107      	bne.n	800b4da <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2258      	movs	r2, #88	; 0x58
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f7f9 fdab 	bl	8005030 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2259      	movs	r2, #89	; 0x59
 800b4de:	2102      	movs	r1, #2
 800b4e0:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	438a      	bics	r2, r1
 800b4f0:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	0018      	movs	r0, r3
 800b4f6:	f000 fae3 	bl	800bac0 <USART_SetConfig>
 800b4fa:	0003      	movs	r3, r0
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d101      	bne.n	800b504 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 800b500:	2301      	movs	r3, #1
 800b502:	e01c      	b.n	800b53e <HAL_USART_Init+0x92>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	490e      	ldr	r1, [pc, #56]	; (800b548 <HAL_USART_Init+0x9c>)
 800b510:	400a      	ands	r2, r1
 800b512:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	212a      	movs	r1, #42	; 0x2a
 800b520:	438a      	bics	r2, r1
 800b522:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	2101      	movs	r1, #1
 800b530:	430a      	orrs	r2, r1
 800b532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	0018      	movs	r0, r3
 800b538:	f000 fd5e 	bl	800bff8 <USART_CheckIdleState>
 800b53c:	0003      	movs	r3, r0
}
 800b53e:	0018      	movs	r0, r3
 800b540:	46bd      	mov	sp, r7
 800b542:	b002      	add	sp, #8
 800b544:	bd80      	pop	{r7, pc}
 800b546:	46c0      	nop			; (mov r8, r8)
 800b548:	ffffbfff 	.word	0xffffbfff

0800b54c <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b08a      	sub	sp, #40	; 0x28
 800b550:	af02      	add	r7, sp, #8
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	1dbb      	adds	r3, r7, #6
 800b55a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2259      	movs	r2, #89	; 0x59
 800b560:	5c9b      	ldrb	r3, [r3, r2]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b01      	cmp	r3, #1
 800b566:	d000      	beq.n	800b56a <HAL_USART_Transmit+0x1e>
 800b568:	e0a9      	b.n	800b6be <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d003      	beq.n	800b578 <HAL_USART_Transmit+0x2c>
 800b570:	1dbb      	adds	r3, r7, #6
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d101      	bne.n	800b57c <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	e0a1      	b.n	800b6c0 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	2380      	movs	r3, #128	; 0x80
 800b582:	015b      	lsls	r3, r3, #5
 800b584:	429a      	cmp	r2, r3
 800b586:	d109      	bne.n	800b59c <HAL_USART_Transmit+0x50>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d105      	bne.n	800b59c <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	2201      	movs	r2, #1
 800b594:	4013      	ands	r3, r2
 800b596:	d001      	beq.n	800b59c <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e091      	b.n	800b6c0 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2258      	movs	r2, #88	; 0x58
 800b5a0:	5c9b      	ldrb	r3, [r3, r2]
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d101      	bne.n	800b5aa <HAL_USART_Transmit+0x5e>
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e08a      	b.n	800b6c0 <HAL_USART_Transmit+0x174>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2258      	movs	r2, #88	; 0x58
 800b5ae:	2101      	movs	r1, #1
 800b5b0:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2259      	movs	r2, #89	; 0x59
 800b5bc:	2112      	movs	r1, #18
 800b5be:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5c0:	f7f9 ff5e 	bl	8005480 <HAL_GetTick>
 800b5c4:	0003      	movs	r3, r0
 800b5c6:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	1dba      	adds	r2, r7, #6
 800b5cc:	8812      	ldrh	r2, [r2, #0]
 800b5ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	1dba      	adds	r2, r7, #6
 800b5d4:	8812      	ldrh	r2, [r2, #0]
 800b5d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	689a      	ldr	r2, [r3, #8]
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	015b      	lsls	r3, r3, #5
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d108      	bne.n	800b5f6 <HAL_USART_Transmit+0xaa>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	691b      	ldr	r3, [r3, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d104      	bne.n	800b5f6 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	61bb      	str	r3, [r7, #24]
 800b5f4:	e003      	b.n	800b5fe <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b5fe:	e02a      	b.n	800b656 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b600:	697a      	ldr	r2, [r7, #20]
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	0013      	movs	r3, r2
 800b60a:	2200      	movs	r2, #0
 800b60c:	2180      	movs	r1, #128	; 0x80
 800b60e:	f000 fa22 	bl	800ba56 <USART_WaitOnFlagUntilTimeout>
 800b612:	1e03      	subs	r3, r0, #0
 800b614:	d001      	beq.n	800b61a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e052      	b.n	800b6c0 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800b61a:	69fb      	ldr	r3, [r7, #28]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d10b      	bne.n	800b638 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	881b      	ldrh	r3, [r3, #0]
 800b624:	001a      	movs	r2, r3
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	05d2      	lsls	r2, r2, #23
 800b62c:	0dd2      	lsrs	r2, r2, #23
 800b62e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	3302      	adds	r3, #2
 800b634:	61bb      	str	r3, [r7, #24]
 800b636:	e007      	b.n	800b648 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	781a      	ldrb	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	3301      	adds	r3, #1
 800b646:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1cf      	bne.n	800b600 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	0013      	movs	r3, r2
 800b66a:	2200      	movs	r2, #0
 800b66c:	2140      	movs	r1, #64	; 0x40
 800b66e:	f000 f9f2 	bl	800ba56 <USART_WaitOnFlagUntilTimeout>
 800b672:	1e03      	subs	r3, r0, #0
 800b674:	d001      	beq.n	800b67a <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e022      	b.n	800b6c0 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2240      	movs	r2, #64	; 0x40
 800b680:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2208      	movs	r2, #8
 800b688:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	699a      	ldr	r2, [r3, #24]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2108      	movs	r1, #8
 800b696:	430a      	orrs	r2, r1
 800b698:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2110      	movs	r1, #16
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2259      	movs	r2, #89	; 0x59
 800b6ae:	2101      	movs	r1, #1
 800b6b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2258      	movs	r2, #88	; 0x58
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e000      	b.n	800b6c0 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b6be:	2302      	movs	r3, #2
  }
}
 800b6c0:	0018      	movs	r0, r3
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	b008      	add	sp, #32
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b088      	sub	sp, #32
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	4ab3      	ldr	r2, [pc, #716]	; (800b9b8 <HAL_USART_IRQHandler+0x2f0>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d117      	bne.n	800b726 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2220      	movs	r2, #32
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	d013      	beq.n	800b726 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	2220      	movs	r2, #32
 800b702:	4013      	ands	r3, r2
 800b704:	d104      	bne.n	800b710 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b706:	697a      	ldr	r2, [r7, #20]
 800b708:	2380      	movs	r3, #128	; 0x80
 800b70a:	055b      	lsls	r3, r3, #21
 800b70c:	4013      	ands	r3, r2
 800b70e:	d00a      	beq.n	800b726 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b714:	2b00      	cmp	r3, #0
 800b716:	d100      	bne.n	800b71a <HAL_USART_IRQHandler+0x52>
 800b718:	e14a      	b.n	800b9b0 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	0010      	movs	r0, r2
 800b722:	4798      	blx	r3
      }
      return;
 800b724:	e144      	b.n	800b9b0 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d100      	bne.n	800b72e <HAL_USART_IRQHandler+0x66>
 800b72c:	e100      	b.n	800b930 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	4aa2      	ldr	r2, [pc, #648]	; (800b9bc <HAL_USART_IRQHandler+0x2f4>)
 800b732:	4013      	ands	r3, r2
 800b734:	d105      	bne.n	800b742 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800b736:	69ba      	ldr	r2, [r7, #24]
 800b738:	2390      	movs	r3, #144	; 0x90
 800b73a:	005b      	lsls	r3, r3, #1
 800b73c:	4013      	ands	r3, r2
 800b73e:	d100      	bne.n	800b742 <HAL_USART_IRQHandler+0x7a>
 800b740:	e0f6      	b.n	800b930 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	2201      	movs	r2, #1
 800b746:	4013      	ands	r3, r2
 800b748:	d00e      	beq.n	800b768 <HAL_USART_IRQHandler+0xa0>
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	2380      	movs	r3, #128	; 0x80
 800b74e:	005b      	lsls	r3, r3, #1
 800b750:	4013      	ands	r3, r2
 800b752:	d009      	beq.n	800b768 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2201      	movs	r2, #1
 800b75a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b760:	2201      	movs	r2, #1
 800b762:	431a      	orrs	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	2202      	movs	r2, #2
 800b76c:	4013      	ands	r3, r2
 800b76e:	d00d      	beq.n	800b78c <HAL_USART_IRQHandler+0xc4>
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	2201      	movs	r2, #1
 800b774:	4013      	ands	r3, r2
 800b776:	d009      	beq.n	800b78c <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2202      	movs	r2, #2
 800b77e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b784:	2204      	movs	r2, #4
 800b786:	431a      	orrs	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	2204      	movs	r2, #4
 800b790:	4013      	ands	r3, r2
 800b792:	d00d      	beq.n	800b7b0 <HAL_USART_IRQHandler+0xe8>
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2201      	movs	r2, #1
 800b798:	4013      	ands	r3, r2
 800b79a:	d009      	beq.n	800b7b0 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2204      	movs	r2, #4
 800b7a2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	4013      	ands	r3, r2
 800b7b6:	d011      	beq.n	800b7dc <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	4013      	ands	r3, r2
 800b7be:	d103      	bne.n	800b7c8 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	4a7e      	ldr	r2, [pc, #504]	; (800b9bc <HAL_USART_IRQHandler+0x2f4>)
 800b7c4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7c6:	d009      	beq.n	800b7dc <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	2208      	movs	r2, #8
 800b7ce:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7d4:	2208      	movs	r2, #8
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7dc:	69fa      	ldr	r2, [r7, #28]
 800b7de:	2380      	movs	r3, #128	; 0x80
 800b7e0:	011b      	lsls	r3, r3, #4
 800b7e2:	4013      	ands	r3, r2
 800b7e4:	d00f      	beq.n	800b806 <HAL_USART_IRQHandler+0x13e>
 800b7e6:	69ba      	ldr	r2, [r7, #24]
 800b7e8:	2380      	movs	r3, #128	; 0x80
 800b7ea:	04db      	lsls	r3, r3, #19
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	d00a      	beq.n	800b806 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2280      	movs	r2, #128	; 0x80
 800b7f6:	0112      	lsls	r2, r2, #4
 800b7f8:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7fe:	2280      	movs	r2, #128	; 0x80
 800b800:	431a      	orrs	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	2380      	movs	r3, #128	; 0x80
 800b80a:	019b      	lsls	r3, r3, #6
 800b80c:	4013      	ands	r3, r2
 800b80e:	d01a      	beq.n	800b846 <HAL_USART_IRQHandler+0x17e>
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2201      	movs	r2, #1
 800b814:	4013      	ands	r3, r2
 800b816:	d016      	beq.n	800b846 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2259      	movs	r2, #89	; 0x59
 800b81c:	5c9b      	ldrb	r3, [r3, r2]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b22      	cmp	r3, #34	; 0x22
 800b822:	d105      	bne.n	800b830 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2280      	movs	r2, #128	; 0x80
 800b82a:	0192      	lsls	r2, r2, #6
 800b82c:	621a      	str	r2, [r3, #32]
        return;
 800b82e:	e0ca      	b.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2280      	movs	r2, #128	; 0x80
 800b836:	0192      	lsls	r2, r2, #6
 800b838:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b83e:	2220      	movs	r2, #32
 800b840:	431a      	orrs	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d100      	bne.n	800b850 <HAL_USART_IRQHandler+0x188>
 800b84e:	e0b1      	b.n	800b9b4 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	2220      	movs	r2, #32
 800b854:	4013      	ands	r3, r2
 800b856:	d011      	beq.n	800b87c <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2220      	movs	r2, #32
 800b85c:	4013      	ands	r3, r2
 800b85e:	d104      	bne.n	800b86a <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	2380      	movs	r3, #128	; 0x80
 800b864:	055b      	lsls	r3, r3, #21
 800b866:	4013      	ands	r3, r2
 800b868:	d008      	beq.n	800b87c <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d004      	beq.n	800b87c <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	0010      	movs	r0, r2
 800b87a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b880:	2208      	movs	r2, #8
 800b882:	4013      	ands	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	2240      	movs	r2, #64	; 0x40
 800b88e:	4013      	ands	r3, r2
 800b890:	2b40      	cmp	r3, #64	; 0x40
 800b892:	d002      	beq.n	800b89a <HAL_USART_IRQHandler+0x1d2>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d040      	beq.n	800b91c <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	0018      	movs	r0, r3
 800b89e:	f000 f8a5 	bl	800b9ec <USART_EndTransfer>

        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	2240      	movs	r2, #64	; 0x40
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	2b40      	cmp	r3, #64	; 0x40
 800b8ae:	d130      	bne.n	800b912 <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2140      	movs	r1, #64	; 0x40
 800b8bc:	438a      	bics	r2, r1
 800b8be:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d008      	beq.n	800b8da <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	f7fa fa65 	bl	8005da4 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d012      	beq.n	800b908 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8e6:	4a36      	ldr	r2, [pc, #216]	; (800b9c0 <HAL_USART_IRQHandler+0x2f8>)
 800b8e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ee:	0018      	movs	r0, r3
 800b8f0:	f7fa fa58 	bl	8005da4 <HAL_DMA_Abort_IT>
 800b8f4:	1e03      	subs	r3, r0, #0
 800b8f6:	d019      	beq.n	800b92c <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b902:	0018      	movs	r0, r3
 800b904:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b906:	e011      	b.n	800b92c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	0018      	movs	r0, r3
 800b90c:	f000 f866 	bl	800b9dc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b910:	e00c      	b.n	800b92c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	0018      	movs	r0, r3
 800b916:	f000 f861 	bl	800b9dc <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b91a:	e007      	b.n	800b92c <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	0018      	movs	r0, r3
 800b920:	f000 f85c 	bl	800b9dc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 800b92a:	e043      	b.n	800b9b4 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800b92c:	46c0      	nop			; (mov r8, r8)
    return;
 800b92e:	e041      	b.n	800b9b4 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2280      	movs	r2, #128	; 0x80
 800b934:	4013      	ands	r3, r2
 800b936:	d012      	beq.n	800b95e <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b938:	69bb      	ldr	r3, [r7, #24]
 800b93a:	2280      	movs	r2, #128	; 0x80
 800b93c:	4013      	ands	r3, r2
 800b93e:	d104      	bne.n	800b94a <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	041b      	lsls	r3, r3, #16
 800b946:	4013      	ands	r3, r2
 800b948:	d009      	beq.n	800b95e <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d038      	beq.n	800b9c4 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	0010      	movs	r0, r2
 800b95a:	4798      	blx	r3
    }
    return;
 800b95c:	e032      	b.n	800b9c4 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2240      	movs	r2, #64	; 0x40
 800b962:	4013      	ands	r3, r2
 800b964:	d008      	beq.n	800b978 <HAL_USART_IRQHandler+0x2b0>
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2240      	movs	r2, #64	; 0x40
 800b96a:	4013      	ands	r3, r2
 800b96c:	d004      	beq.n	800b978 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	0018      	movs	r0, r3
 800b972:	f000 fb85 	bl	800c080 <USART_EndTransmit_IT>
    return;
 800b976:	e026      	b.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b978:	69fa      	ldr	r2, [r7, #28]
 800b97a:	2380      	movs	r3, #128	; 0x80
 800b97c:	041b      	lsls	r3, r3, #16
 800b97e:	4013      	ands	r3, r2
 800b980:	d009      	beq.n	800b996 <HAL_USART_IRQHandler+0x2ce>
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	2380      	movs	r3, #128	; 0x80
 800b986:	05db      	lsls	r3, r3, #23
 800b988:	4013      	ands	r3, r2
 800b98a:	d004      	beq.n	800b996 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	0018      	movs	r0, r3
 800b990:	f000 fbc1 	bl	800c116 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b994:	e017      	b.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	2380      	movs	r3, #128	; 0x80
 800b99a:	045b      	lsls	r3, r3, #17
 800b99c:	4013      	ands	r3, r2
 800b99e:	d012      	beq.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	da0f      	bge.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	0018      	movs	r0, r3
 800b9aa:	f000 fbac 	bl	800c106 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800b9ae:	e00a      	b.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
      return;
 800b9b0:	46c0      	nop			; (mov r8, r8)
 800b9b2:	e008      	b.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
    return;
 800b9b4:	46c0      	nop			; (mov r8, r8)
 800b9b6:	e006      	b.n	800b9c6 <HAL_USART_IRQHandler+0x2fe>
 800b9b8:	0000280f 	.word	0x0000280f
 800b9bc:	10000001 	.word	0x10000001
 800b9c0:	0800ba2d 	.word	0x0800ba2d
    return;
 800b9c4:	46c0      	nop			; (mov r8, r8)
  }
}
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	b008      	add	sp, #32
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 800b9d4:	46c0      	nop			; (mov r8, r8)
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	b002      	add	sp, #8
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 800b9e4:	46c0      	nop			; (mov r8, r8)
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	b002      	add	sp, #8
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4909      	ldr	r1, [pc, #36]	; (800ba24 <USART_EndTransfer+0x38>)
 800ba00:	400a      	ands	r2, r1
 800ba02:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689a      	ldr	r2, [r3, #8]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4906      	ldr	r1, [pc, #24]	; (800ba28 <USART_EndTransfer+0x3c>)
 800ba10:	400a      	ands	r2, r1
 800ba12:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2259      	movs	r2, #89	; 0x59
 800ba18:	2101      	movs	r1, #1
 800ba1a:	5499      	strb	r1, [r3, r2]
}
 800ba1c:	46c0      	nop			; (mov r8, r8)
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	b002      	add	sp, #8
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	fffffe1f 	.word	0xfffffe1f
 800ba28:	ef7ffffe 	.word	0xef7ffffe

0800ba2c <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba38:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	0018      	movs	r0, r3
 800ba4a:	f7ff ffc7 	bl	800b9dc <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800ba4e:	46c0      	nop			; (mov r8, r8)
 800ba50:	46bd      	mov	sp, r7
 800ba52:	b004      	add	sp, #16
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	603b      	str	r3, [r7, #0]
 800ba62:	1dfb      	adds	r3, r7, #7
 800ba64:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba66:	e017      	b.n	800ba98 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	d014      	beq.n	800ba98 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba6e:	f7f9 fd07 	bl	8005480 <HAL_GetTick>
 800ba72:	0002      	movs	r2, r0
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d302      	bcc.n	800ba84 <USART_WaitOnFlagUntilTimeout+0x2e>
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d109      	bne.n	800ba98 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	2259      	movs	r2, #89	; 0x59
 800ba88:	2101      	movs	r1, #1
 800ba8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2258      	movs	r2, #88	; 0x58
 800ba90:	2100      	movs	r1, #0
 800ba92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e00f      	b.n	800bab8 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	69db      	ldr	r3, [r3, #28]
 800ba9e:	68ba      	ldr	r2, [r7, #8]
 800baa0:	4013      	ands	r3, r2
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	425a      	negs	r2, r3
 800baa8:	4153      	adcs	r3, r2
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	001a      	movs	r2, r3
 800baae:	1dfb      	adds	r3, r7, #7
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d0d8      	beq.n	800ba68 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	0018      	movs	r0, r3
 800baba:	46bd      	mov	sp, r7
 800babc:	b004      	add	sp, #16
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bac8:	231e      	movs	r3, #30
 800baca:	18fb      	adds	r3, r7, r3
 800bacc:	2200      	movs	r2, #0
 800bace:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bad0:	2300      	movs	r3, #0
 800bad2:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	431a      	orrs	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	2280      	movs	r2, #128	; 0x80
 800bae6:	0212      	lsls	r2, r2, #8
 800bae8:	4313      	orrs	r3, r2
 800baea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4ab1      	ldr	r2, [pc, #708]	; (800bdb8 <USART_SetConfig+0x2f8>)
 800baf4:	4013      	ands	r3, r2
 800baf6:	0019      	movs	r1, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	697a      	ldr	r2, [r7, #20]
 800bafe:	430a      	orrs	r2, r1
 800bb00:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bb02:	2380      	movs	r3, #128	; 0x80
 800bb04:	011b      	lsls	r3, r3, #4
 800bb06:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699a      	ldr	r2, [r3, #24]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	697a      	ldr	r2, [r7, #20]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	4aa2      	ldr	r2, [pc, #648]	; (800bdbc <USART_SetConfig+0x2fc>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	0019      	movs	r1, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb48:	220f      	movs	r2, #15
 800bb4a:	4393      	bics	r3, r2
 800bb4c:	0019      	movs	r1, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	430a      	orrs	r2, r1
 800bb58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4a98      	ldr	r2, [pc, #608]	; (800bdc0 <USART_SetConfig+0x300>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d127      	bne.n	800bbb4 <USART_SetConfig+0xf4>
 800bb64:	4b97      	ldr	r3, [pc, #604]	; (800bdc4 <USART_SetConfig+0x304>)
 800bb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb68:	2203      	movs	r2, #3
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	2b03      	cmp	r3, #3
 800bb6e:	d017      	beq.n	800bba0 <USART_SetConfig+0xe0>
 800bb70:	d81b      	bhi.n	800bbaa <USART_SetConfig+0xea>
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d00a      	beq.n	800bb8c <USART_SetConfig+0xcc>
 800bb76:	d818      	bhi.n	800bbaa <USART_SetConfig+0xea>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <USART_SetConfig+0xc2>
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d00a      	beq.n	800bb96 <USART_SetConfig+0xd6>
 800bb80:	e013      	b.n	800bbaa <USART_SetConfig+0xea>
 800bb82:	231f      	movs	r3, #31
 800bb84:	18fb      	adds	r3, r7, r3
 800bb86:	2200      	movs	r2, #0
 800bb88:	701a      	strb	r2, [r3, #0]
 800bb8a:	e058      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bb8c:	231f      	movs	r3, #31
 800bb8e:	18fb      	adds	r3, r7, r3
 800bb90:	2202      	movs	r2, #2
 800bb92:	701a      	strb	r2, [r3, #0]
 800bb94:	e053      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bb96:	231f      	movs	r3, #31
 800bb98:	18fb      	adds	r3, r7, r3
 800bb9a:	2204      	movs	r2, #4
 800bb9c:	701a      	strb	r2, [r3, #0]
 800bb9e:	e04e      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bba0:	231f      	movs	r3, #31
 800bba2:	18fb      	adds	r3, r7, r3
 800bba4:	2208      	movs	r2, #8
 800bba6:	701a      	strb	r2, [r3, #0]
 800bba8:	e049      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bbaa:	231f      	movs	r3, #31
 800bbac:	18fb      	adds	r3, r7, r3
 800bbae:	2210      	movs	r2, #16
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	e044      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a83      	ldr	r2, [pc, #524]	; (800bdc8 <USART_SetConfig+0x308>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d127      	bne.n	800bc0e <USART_SetConfig+0x14e>
 800bbbe:	4b81      	ldr	r3, [pc, #516]	; (800bdc4 <USART_SetConfig+0x304>)
 800bbc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc2:	220c      	movs	r2, #12
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	2b0c      	cmp	r3, #12
 800bbc8:	d017      	beq.n	800bbfa <USART_SetConfig+0x13a>
 800bbca:	d81b      	bhi.n	800bc04 <USART_SetConfig+0x144>
 800bbcc:	2b08      	cmp	r3, #8
 800bbce:	d00a      	beq.n	800bbe6 <USART_SetConfig+0x126>
 800bbd0:	d818      	bhi.n	800bc04 <USART_SetConfig+0x144>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d002      	beq.n	800bbdc <USART_SetConfig+0x11c>
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d00a      	beq.n	800bbf0 <USART_SetConfig+0x130>
 800bbda:	e013      	b.n	800bc04 <USART_SetConfig+0x144>
 800bbdc:	231f      	movs	r3, #31
 800bbde:	18fb      	adds	r3, r7, r3
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	701a      	strb	r2, [r3, #0]
 800bbe4:	e02b      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bbe6:	231f      	movs	r3, #31
 800bbe8:	18fb      	adds	r3, r7, r3
 800bbea:	2202      	movs	r2, #2
 800bbec:	701a      	strb	r2, [r3, #0]
 800bbee:	e026      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bbf0:	231f      	movs	r3, #31
 800bbf2:	18fb      	adds	r3, r7, r3
 800bbf4:	2204      	movs	r2, #4
 800bbf6:	701a      	strb	r2, [r3, #0]
 800bbf8:	e021      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bbfa:	231f      	movs	r3, #31
 800bbfc:	18fb      	adds	r3, r7, r3
 800bbfe:	2208      	movs	r2, #8
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	e01c      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bc04:	231f      	movs	r3, #31
 800bc06:	18fb      	adds	r3, r7, r3
 800bc08:	2210      	movs	r2, #16
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e017      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a6e      	ldr	r2, [pc, #440]	; (800bdcc <USART_SetConfig+0x30c>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d104      	bne.n	800bc22 <USART_SetConfig+0x162>
 800bc18:	231f      	movs	r3, #31
 800bc1a:	18fb      	adds	r3, r7, r3
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
 800bc20:	e00d      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a6a      	ldr	r2, [pc, #424]	; (800bdd0 <USART_SetConfig+0x310>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d104      	bne.n	800bc36 <USART_SetConfig+0x176>
 800bc2c:	231f      	movs	r3, #31
 800bc2e:	18fb      	adds	r3, r7, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	e003      	b.n	800bc3e <USART_SetConfig+0x17e>
 800bc36:	231f      	movs	r3, #31
 800bc38:	18fb      	adds	r3, r7, r3
 800bc3a:	2210      	movs	r2, #16
 800bc3c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800bc3e:	231f      	movs	r3, #31
 800bc40:	18fb      	adds	r3, r7, r3
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	2b08      	cmp	r3, #8
 800bc46:	d100      	bne.n	800bc4a <USART_SetConfig+0x18a>
 800bc48:	e139      	b.n	800bebe <USART_SetConfig+0x3fe>
 800bc4a:	dd00      	ble.n	800bc4e <USART_SetConfig+0x18e>
 800bc4c:	e195      	b.n	800bf7a <USART_SetConfig+0x4ba>
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	d100      	bne.n	800bc54 <USART_SetConfig+0x194>
 800bc52:	e0d3      	b.n	800bdfc <USART_SetConfig+0x33c>
 800bc54:	dd00      	ble.n	800bc58 <USART_SetConfig+0x198>
 800bc56:	e190      	b.n	800bf7a <USART_SetConfig+0x4ba>
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <USART_SetConfig+0x1a4>
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d100      	bne.n	800bc62 <USART_SetConfig+0x1a2>
 800bc60:	e061      	b.n	800bd26 <USART_SetConfig+0x266>
 800bc62:	e18a      	b.n	800bf7a <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc64:	f7fc fdb2 	bl	80087cc <HAL_RCC_GetPCLK1Freq>
 800bc68:	0003      	movs	r3, r0
 800bc6a:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d044      	beq.n	800bcfe <USART_SetConfig+0x23e>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d03e      	beq.n	800bcfa <USART_SetConfig+0x23a>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc80:	2b02      	cmp	r3, #2
 800bc82:	d038      	beq.n	800bcf6 <USART_SetConfig+0x236>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d032      	beq.n	800bcf2 <USART_SetConfig+0x232>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	d02c      	beq.n	800bcee <USART_SetConfig+0x22e>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc98:	2b05      	cmp	r3, #5
 800bc9a:	d026      	beq.n	800bcea <USART_SetConfig+0x22a>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca0:	2b06      	cmp	r3, #6
 800bca2:	d020      	beq.n	800bce6 <USART_SetConfig+0x226>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b07      	cmp	r3, #7
 800bcaa:	d01a      	beq.n	800bce2 <USART_SetConfig+0x222>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	d014      	beq.n	800bcde <USART_SetConfig+0x21e>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb8:	2b09      	cmp	r3, #9
 800bcba:	d00e      	beq.n	800bcda <USART_SetConfig+0x21a>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc0:	2b0a      	cmp	r3, #10
 800bcc2:	d008      	beq.n	800bcd6 <USART_SetConfig+0x216>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc8:	2b0b      	cmp	r3, #11
 800bcca:	d102      	bne.n	800bcd2 <USART_SetConfig+0x212>
 800bccc:	2380      	movs	r3, #128	; 0x80
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	e016      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	e014      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcd6:	2380      	movs	r3, #128	; 0x80
 800bcd8:	e012      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcda:	2340      	movs	r3, #64	; 0x40
 800bcdc:	e010      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcde:	2320      	movs	r3, #32
 800bce0:	e00e      	b.n	800bd00 <USART_SetConfig+0x240>
 800bce2:	2310      	movs	r3, #16
 800bce4:	e00c      	b.n	800bd00 <USART_SetConfig+0x240>
 800bce6:	230c      	movs	r3, #12
 800bce8:	e00a      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcea:	230a      	movs	r3, #10
 800bcec:	e008      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcee:	2308      	movs	r3, #8
 800bcf0:	e006      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcf2:	2306      	movs	r3, #6
 800bcf4:	e004      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcf6:	2304      	movs	r3, #4
 800bcf8:	e002      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcfa:	2302      	movs	r3, #2
 800bcfc:	e000      	b.n	800bd00 <USART_SetConfig+0x240>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	0019      	movs	r1, r3
 800bd02:	6938      	ldr	r0, [r7, #16]
 800bd04:	f7f4 f9fe 	bl	8000104 <__udivsi3>
 800bd08:	0003      	movs	r3, r0
 800bd0a:	005a      	lsls	r2, r3, #1
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	085b      	lsrs	r3, r3, #1
 800bd12:	18d2      	adds	r2, r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	0019      	movs	r1, r3
 800bd1a:	0010      	movs	r0, r2
 800bd1c:	f7f4 f9f2 	bl	8000104 <__udivsi3>
 800bd20:	0003      	movs	r3, r0
 800bd22:	61bb      	str	r3, [r7, #24]
      break;
 800bd24:	e12e      	b.n	800bf84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d052      	beq.n	800bdd4 <USART_SetConfig+0x314>
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d03e      	beq.n	800bdb4 <USART_SetConfig+0x2f4>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3a:	2b02      	cmp	r3, #2
 800bd3c:	d038      	beq.n	800bdb0 <USART_SetConfig+0x2f0>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	d032      	beq.n	800bdac <USART_SetConfig+0x2ec>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d02c      	beq.n	800bda8 <USART_SetConfig+0x2e8>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d026      	beq.n	800bda4 <USART_SetConfig+0x2e4>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5a:	2b06      	cmp	r3, #6
 800bd5c:	d020      	beq.n	800bda0 <USART_SetConfig+0x2e0>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd62:	2b07      	cmp	r3, #7
 800bd64:	d01a      	beq.n	800bd9c <USART_SetConfig+0x2dc>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b08      	cmp	r3, #8
 800bd6c:	d014      	beq.n	800bd98 <USART_SetConfig+0x2d8>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	2b09      	cmp	r3, #9
 800bd74:	d00e      	beq.n	800bd94 <USART_SetConfig+0x2d4>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	2b0a      	cmp	r3, #10
 800bd7c:	d008      	beq.n	800bd90 <USART_SetConfig+0x2d0>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	2b0b      	cmp	r3, #11
 800bd84:	d102      	bne.n	800bd8c <USART_SetConfig+0x2cc>
 800bd86:	2380      	movs	r3, #128	; 0x80
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	e024      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e022      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bd90:	2380      	movs	r3, #128	; 0x80
 800bd92:	e020      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	e01e      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bd98:	2320      	movs	r3, #32
 800bd9a:	e01c      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bd9c:	2310      	movs	r3, #16
 800bd9e:	e01a      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bda0:	230c      	movs	r3, #12
 800bda2:	e018      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bda4:	230a      	movs	r3, #10
 800bda6:	e016      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bda8:	2308      	movs	r3, #8
 800bdaa:	e014      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bdac:	2306      	movs	r3, #6
 800bdae:	e012      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bdb0:	2304      	movs	r3, #4
 800bdb2:	e010      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	e00e      	b.n	800bdd6 <USART_SetConfig+0x316>
 800bdb8:	cfff69f3 	.word	0xcfff69f3
 800bdbc:	ffffc0f6 	.word	0xffffc0f6
 800bdc0:	40013800 	.word	0x40013800
 800bdc4:	40021000 	.word	0x40021000
 800bdc8:	40004400 	.word	0x40004400
 800bdcc:	40004800 	.word	0x40004800
 800bdd0:	40004c00 	.word	0x40004c00
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	0019      	movs	r1, r3
 800bdd8:	4886      	ldr	r0, [pc, #536]	; (800bff4 <USART_SetConfig+0x534>)
 800bdda:	f7f4 f993 	bl	8000104 <__udivsi3>
 800bdde:	0003      	movs	r3, r0
 800bde0:	005a      	lsls	r2, r3, #1
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	18d2      	adds	r2, r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	0019      	movs	r1, r3
 800bdf0:	0010      	movs	r0, r2
 800bdf2:	f7f4 f987 	bl	8000104 <__udivsi3>
 800bdf6:	0003      	movs	r3, r0
 800bdf8:	61bb      	str	r3, [r7, #24]
      break;
 800bdfa:	e0c3      	b.n	800bf84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bdfc:	f7fc fc5a 	bl	80086b4 <HAL_RCC_GetSysClockFreq>
 800be00:	0003      	movs	r3, r0
 800be02:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d044      	beq.n	800be96 <USART_SetConfig+0x3d6>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	2b01      	cmp	r3, #1
 800be12:	d03e      	beq.n	800be92 <USART_SetConfig+0x3d2>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d038      	beq.n	800be8e <USART_SetConfig+0x3ce>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be20:	2b03      	cmp	r3, #3
 800be22:	d032      	beq.n	800be8a <USART_SetConfig+0x3ca>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	2b04      	cmp	r3, #4
 800be2a:	d02c      	beq.n	800be86 <USART_SetConfig+0x3c6>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be30:	2b05      	cmp	r3, #5
 800be32:	d026      	beq.n	800be82 <USART_SetConfig+0x3c2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	2b06      	cmp	r3, #6
 800be3a:	d020      	beq.n	800be7e <USART_SetConfig+0x3be>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	2b07      	cmp	r3, #7
 800be42:	d01a      	beq.n	800be7a <USART_SetConfig+0x3ba>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	2b08      	cmp	r3, #8
 800be4a:	d014      	beq.n	800be76 <USART_SetConfig+0x3b6>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	2b09      	cmp	r3, #9
 800be52:	d00e      	beq.n	800be72 <USART_SetConfig+0x3b2>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	2b0a      	cmp	r3, #10
 800be5a:	d008      	beq.n	800be6e <USART_SetConfig+0x3ae>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	2b0b      	cmp	r3, #11
 800be62:	d102      	bne.n	800be6a <USART_SetConfig+0x3aa>
 800be64:	2380      	movs	r3, #128	; 0x80
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	e016      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be6a:	2301      	movs	r3, #1
 800be6c:	e014      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be6e:	2380      	movs	r3, #128	; 0x80
 800be70:	e012      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be72:	2340      	movs	r3, #64	; 0x40
 800be74:	e010      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be76:	2320      	movs	r3, #32
 800be78:	e00e      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be7a:	2310      	movs	r3, #16
 800be7c:	e00c      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be7e:	230c      	movs	r3, #12
 800be80:	e00a      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be82:	230a      	movs	r3, #10
 800be84:	e008      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be86:	2308      	movs	r3, #8
 800be88:	e006      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be8a:	2306      	movs	r3, #6
 800be8c:	e004      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be8e:	2304      	movs	r3, #4
 800be90:	e002      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be92:	2302      	movs	r3, #2
 800be94:	e000      	b.n	800be98 <USART_SetConfig+0x3d8>
 800be96:	2301      	movs	r3, #1
 800be98:	0019      	movs	r1, r3
 800be9a:	6938      	ldr	r0, [r7, #16]
 800be9c:	f7f4 f932 	bl	8000104 <__udivsi3>
 800bea0:	0003      	movs	r3, r0
 800bea2:	005a      	lsls	r2, r3, #1
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	085b      	lsrs	r3, r3, #1
 800beaa:	18d2      	adds	r2, r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	0019      	movs	r1, r3
 800beb2:	0010      	movs	r0, r2
 800beb4:	f7f4 f926 	bl	8000104 <__udivsi3>
 800beb8:	0003      	movs	r3, r0
 800beba:	61bb      	str	r3, [r7, #24]
      break;
 800bebc:	e062      	b.n	800bf84 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d044      	beq.n	800bf50 <USART_SetConfig+0x490>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	2b01      	cmp	r3, #1
 800becc:	d03e      	beq.n	800bf4c <USART_SetConfig+0x48c>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d038      	beq.n	800bf48 <USART_SetConfig+0x488>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d032      	beq.n	800bf44 <USART_SetConfig+0x484>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	2b04      	cmp	r3, #4
 800bee4:	d02c      	beq.n	800bf40 <USART_SetConfig+0x480>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beea:	2b05      	cmp	r3, #5
 800beec:	d026      	beq.n	800bf3c <USART_SetConfig+0x47c>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef2:	2b06      	cmp	r3, #6
 800bef4:	d020      	beq.n	800bf38 <USART_SetConfig+0x478>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befa:	2b07      	cmp	r3, #7
 800befc:	d01a      	beq.n	800bf34 <USART_SetConfig+0x474>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf02:	2b08      	cmp	r3, #8
 800bf04:	d014      	beq.n	800bf30 <USART_SetConfig+0x470>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	2b09      	cmp	r3, #9
 800bf0c:	d00e      	beq.n	800bf2c <USART_SetConfig+0x46c>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	2b0a      	cmp	r3, #10
 800bf14:	d008      	beq.n	800bf28 <USART_SetConfig+0x468>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1a:	2b0b      	cmp	r3, #11
 800bf1c:	d102      	bne.n	800bf24 <USART_SetConfig+0x464>
 800bf1e:	2380      	movs	r3, #128	; 0x80
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	e016      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e014      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf28:	2380      	movs	r3, #128	; 0x80
 800bf2a:	e012      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf2c:	2340      	movs	r3, #64	; 0x40
 800bf2e:	e010      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf30:	2320      	movs	r3, #32
 800bf32:	e00e      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf34:	2310      	movs	r3, #16
 800bf36:	e00c      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf38:	230c      	movs	r3, #12
 800bf3a:	e00a      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf3c:	230a      	movs	r3, #10
 800bf3e:	e008      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf40:	2308      	movs	r3, #8
 800bf42:	e006      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf44:	2306      	movs	r3, #6
 800bf46:	e004      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf48:	2304      	movs	r3, #4
 800bf4a:	e002      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	e000      	b.n	800bf52 <USART_SetConfig+0x492>
 800bf50:	2301      	movs	r3, #1
 800bf52:	0019      	movs	r1, r3
 800bf54:	2380      	movs	r3, #128	; 0x80
 800bf56:	0218      	lsls	r0, r3, #8
 800bf58:	f7f4 f8d4 	bl	8000104 <__udivsi3>
 800bf5c:	0003      	movs	r3, r0
 800bf5e:	005a      	lsls	r2, r3, #1
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	085b      	lsrs	r3, r3, #1
 800bf66:	18d2      	adds	r2, r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	0019      	movs	r1, r3
 800bf6e:	0010      	movs	r0, r2
 800bf70:	f7f4 f8c8 	bl	8000104 <__udivsi3>
 800bf74:	0003      	movs	r3, r0
 800bf76:	61bb      	str	r3, [r7, #24]
      break;
 800bf78:	e004      	b.n	800bf84 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 800bf7a:	231e      	movs	r3, #30
 800bf7c:	18fb      	adds	r3, r7, r3
 800bf7e:	2201      	movs	r2, #1
 800bf80:	701a      	strb	r2, [r3, #0]
      break;
 800bf82:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	2b0f      	cmp	r3, #15
 800bf88:	d91c      	bls.n	800bfc4 <USART_SetConfig+0x504>
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	025b      	lsls	r3, r3, #9
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d217      	bcs.n	800bfc4 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	b29a      	uxth	r2, r3
 800bf98:	200e      	movs	r0, #14
 800bf9a:	183b      	adds	r3, r7, r0
 800bf9c:	210f      	movs	r1, #15
 800bf9e:	438a      	bics	r2, r1
 800bfa0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	085b      	lsrs	r3, r3, #1
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2207      	movs	r2, #7
 800bfaa:	4013      	ands	r3, r2
 800bfac:	b299      	uxth	r1, r3
 800bfae:	183b      	adds	r3, r7, r0
 800bfb0:	183a      	adds	r2, r7, r0
 800bfb2:	8812      	ldrh	r2, [r2, #0]
 800bfb4:	430a      	orrs	r2, r1
 800bfb6:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	183a      	adds	r2, r7, r0
 800bfbe:	8812      	ldrh	r2, [r2, #0]
 800bfc0:	60da      	str	r2, [r3, #12]
 800bfc2:	e003      	b.n	800bfcc <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 800bfc4:	231e      	movs	r3, #30
 800bfc6:	18fb      	adds	r3, r7, r3
 800bfc8:	2201      	movs	r2, #1
 800bfca:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 800bfe4:	231e      	movs	r3, #30
 800bfe6:	18fb      	adds	r3, r7, r3
 800bfe8:	781b      	ldrb	r3, [r3, #0]
}
 800bfea:	0018      	movs	r0, r3
 800bfec:	46bd      	mov	sp, r7
 800bfee:	b008      	add	sp, #32
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	46c0      	nop			; (mov r8, r8)
 800bff4:	00f42400 	.word	0x00f42400

0800bff8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af02      	add	r7, sp, #8
 800bffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c006:	f7f9 fa3b 	bl	8005480 <HAL_GetTick>
 800c00a:	0003      	movs	r3, r0
 800c00c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2208      	movs	r2, #8
 800c016:	4013      	ands	r3, r2
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d10e      	bne.n	800c03a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	2380      	movs	r3, #128	; 0x80
 800c020:	0399      	lsls	r1, r3, #14
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	23fa      	movs	r3, #250	; 0xfa
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	0013      	movs	r3, r2
 800c02c:	2200      	movs	r2, #0
 800c02e:	f7ff fd12 	bl	800ba56 <USART_WaitOnFlagUntilTimeout>
 800c032:	1e03      	subs	r3, r0, #0
 800c034:	d001      	beq.n	800c03a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c036:	2303      	movs	r3, #3
 800c038:	e01e      	b.n	800c078 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2204      	movs	r2, #4
 800c042:	4013      	ands	r3, r2
 800c044:	2b04      	cmp	r3, #4
 800c046:	d10e      	bne.n	800c066 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	2380      	movs	r3, #128	; 0x80
 800c04c:	03d9      	lsls	r1, r3, #15
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	23fa      	movs	r3, #250	; 0xfa
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	0013      	movs	r3, r2
 800c058:	2200      	movs	r2, #0
 800c05a:	f7ff fcfc 	bl	800ba56 <USART_WaitOnFlagUntilTimeout>
 800c05e:	1e03      	subs	r3, r0, #0
 800c060:	d001      	beq.n	800c066 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c062:	2303      	movs	r3, #3
 800c064:	e008      	b.n	800c078 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2259      	movs	r2, #89	; 0x59
 800c06a:	2101      	movs	r1, #1
 800c06c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2258      	movs	r2, #88	; 0x58
 800c072:	2100      	movs	r1, #0
 800c074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	0018      	movs	r0, r3
 800c07a:	46bd      	mov	sp, r7
 800c07c:	b004      	add	sp, #16
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2140      	movs	r1, #64	; 0x40
 800c094:	438a      	bics	r2, r1
 800c096:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689a      	ldr	r2, [r3, #8]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	438a      	bics	r2, r1
 800c0a6:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2259      	movs	r2, #89	; 0x59
 800c0b2:	5c9b      	ldrb	r3, [r3, r2]
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	2b12      	cmp	r3, #18
 800c0b8:	d114      	bne.n	800c0e4 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2208      	movs	r2, #8
 800c0c0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	699a      	ldr	r2, [r3, #24]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2108      	movs	r1, #8
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2259      	movs	r2, #89	; 0x59
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f7f5 f81b 	bl	8001118 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c0e2:	e00c      	b.n	800c0fe <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d107      	bne.n	800c0fe <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2259      	movs	r2, #89	; 0x59
 800c0f2:	2101      	movs	r1, #1
 800c0f4:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f7ff fc67 	bl	800b9cc <HAL_USART_TxRxCpltCallback>
}
 800c0fe:	46c0      	nop			; (mov r8, r8)
 800c100:	46bd      	mov	sp, r7
 800c102:	b002      	add	sp, #8
 800c104:	bd80      	pop	{r7, pc}

0800c106 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c10e:	46c0      	nop			; (mov r8, r8)
 800c110:	46bd      	mov	sp, r7
 800c112:	b002      	add	sp, #8
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c11e:	46c0      	nop			; (mov r8, r8)
 800c120:	46bd      	mov	sp, r7
 800c122:	b002      	add	sp, #8
 800c124:	bd80      	pop	{r7, pc}

0800c126 <LL_GPIO_SetPinMode>:
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	60f8      	str	r0, [r7, #12]
 800c12e:	60b9      	str	r1, [r7, #8]
 800c130:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6819      	ldr	r1, [r3, #0]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	435b      	muls	r3, r3
 800c13a:	001a      	movs	r2, r3
 800c13c:	0013      	movs	r3, r2
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	189b      	adds	r3, r3, r2
 800c142:	43db      	mvns	r3, r3
 800c144:	400b      	ands	r3, r1
 800c146:	001a      	movs	r2, r3
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	435b      	muls	r3, r3
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	434b      	muls	r3, r1
 800c150:	431a      	orrs	r2, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	601a      	str	r2, [r3, #0]
}
 800c156:	46c0      	nop			; (mov r8, r8)
 800c158:	46bd      	mov	sp, r7
 800c15a:	b004      	add	sp, #16
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <LL_GPIO_SetPinOutputType>:
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b084      	sub	sp, #16
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	685b      	ldr	r3, [r3, #4]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	43d2      	mvns	r2, r2
 800c172:	401a      	ands	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	434b      	muls	r3, r1
 800c17a:	431a      	orrs	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	605a      	str	r2, [r3, #4]
}
 800c180:	46c0      	nop			; (mov r8, r8)
 800c182:	46bd      	mov	sp, r7
 800c184:	b004      	add	sp, #16
 800c186:	bd80      	pop	{r7, pc}

0800c188 <LL_GPIO_SetPinSpeed>:
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6899      	ldr	r1, [r3, #8]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	435b      	muls	r3, r3
 800c19c:	001a      	movs	r2, r3
 800c19e:	0013      	movs	r3, r2
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	189b      	adds	r3, r3, r2
 800c1a4:	43db      	mvns	r3, r3
 800c1a6:	400b      	ands	r3, r1
 800c1a8:	001a      	movs	r2, r3
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	435b      	muls	r3, r3
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	434b      	muls	r3, r1
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	609a      	str	r2, [r3, #8]
}
 800c1b8:	46c0      	nop			; (mov r8, r8)
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	b004      	add	sp, #16
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <LL_GPIO_SetPinPull>:
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	68d9      	ldr	r1, [r3, #12]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	435b      	muls	r3, r3
 800c1d4:	001a      	movs	r2, r3
 800c1d6:	0013      	movs	r3, r2
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	189b      	adds	r3, r3, r2
 800c1dc:	43db      	mvns	r3, r3
 800c1de:	400b      	ands	r3, r1
 800c1e0:	001a      	movs	r2, r3
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	435b      	muls	r3, r3
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	434b      	muls	r3, r1
 800c1ea:	431a      	orrs	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	60da      	str	r2, [r3, #12]
}
 800c1f0:	46c0      	nop			; (mov r8, r8)
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	b004      	add	sp, #16
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <LL_GPIO_SetAFPin_0_7>:
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6a19      	ldr	r1, [r3, #32]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	435b      	muls	r3, r3
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	4353      	muls	r3, r2
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	435a      	muls	r2, r3
 800c214:	0013      	movs	r3, r2
 800c216:	011b      	lsls	r3, r3, #4
 800c218:	1a9b      	subs	r3, r3, r2
 800c21a:	43db      	mvns	r3, r3
 800c21c:	400b      	ands	r3, r1
 800c21e:	001a      	movs	r2, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	435b      	muls	r3, r3
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	434b      	muls	r3, r1
 800c228:	68b9      	ldr	r1, [r7, #8]
 800c22a:	434b      	muls	r3, r1
 800c22c:	6879      	ldr	r1, [r7, #4]
 800c22e:	434b      	muls	r3, r1
 800c230:	431a      	orrs	r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	621a      	str	r2, [r3, #32]
}
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	46bd      	mov	sp, r7
 800c23a:	b004      	add	sp, #16
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <LL_GPIO_SetAFPin_8_15>:
{
 800c23e:	b580      	push	{r7, lr}
 800c240:	b084      	sub	sp, #16
 800c242:	af00      	add	r7, sp, #0
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	60b9      	str	r1, [r7, #8]
 800c248:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	0a1b      	lsrs	r3, r3, #8
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	0a12      	lsrs	r2, r2, #8
 800c256:	4353      	muls	r3, r2
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	0a12      	lsrs	r2, r2, #8
 800c25c:	4353      	muls	r3, r2
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	0a12      	lsrs	r2, r2, #8
 800c262:	435a      	muls	r2, r3
 800c264:	0013      	movs	r3, r2
 800c266:	011b      	lsls	r3, r3, #4
 800c268:	1a9b      	subs	r3, r3, r2
 800c26a:	43db      	mvns	r3, r3
 800c26c:	400b      	ands	r3, r1
 800c26e:	001a      	movs	r2, r3
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	0a1b      	lsrs	r3, r3, #8
 800c274:	68b9      	ldr	r1, [r7, #8]
 800c276:	0a09      	lsrs	r1, r1, #8
 800c278:	434b      	muls	r3, r1
 800c27a:	68b9      	ldr	r1, [r7, #8]
 800c27c:	0a09      	lsrs	r1, r1, #8
 800c27e:	434b      	muls	r3, r1
 800c280:	68b9      	ldr	r1, [r7, #8]
 800c282:	0a09      	lsrs	r1, r1, #8
 800c284:	434b      	muls	r3, r1
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	434b      	muls	r3, r1
 800c28a:	431a      	orrs	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c290:	46c0      	nop			; (mov r8, r8)
 800c292:	46bd      	mov	sp, r7
 800c294:	b004      	add	sp, #16
 800c296:	bd80      	pop	{r7, pc}

0800c298 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c2a6:	e047      	b.n	800c338 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	68fa      	ldr	r2, [r7, #12]
 800c2b0:	4091      	lsls	r1, r2
 800c2b2:	000a      	movs	r2, r1
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d039      	beq.n	800c332 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d003      	beq.n	800c2ce <LL_GPIO_Init+0x36>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d10d      	bne.n	800c2ea <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	689a      	ldr	r2, [r3, #8]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	f7ff ff56 	bl	800c188 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	68da      	ldr	r2, [r3, #12]
 800c2e0:	68b9      	ldr	r1, [r7, #8]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	0018      	movs	r0, r3
 800c2e6:	f7ff ff3a 	bl	800c15e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	691a      	ldr	r2, [r3, #16]
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	f7ff ff64 	bl	800c1c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d111      	bne.n	800c324 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2bff      	cmp	r3, #255	; 0xff
 800c304:	d807      	bhi.n	800c316 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	695a      	ldr	r2, [r3, #20]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	0018      	movs	r0, r3
 800c310:	f7ff ff72 	bl	800c1f8 <LL_GPIO_SetAFPin_0_7>
 800c314:	e006      	b.n	800c324 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	695a      	ldr	r2, [r3, #20]
 800c31a:	68b9      	ldr	r1, [r7, #8]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	0018      	movs	r0, r3
 800c320:	f7ff ff8d 	bl	800c23e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	68b9      	ldr	r1, [r7, #8]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	0018      	movs	r0, r3
 800c32e:	f7ff fefa 	bl	800c126 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	3301      	adds	r3, #1
 800c336:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	40da      	lsrs	r2, r3
 800c340:	1e13      	subs	r3, r2, #0
 800c342:	d1b1      	bne.n	800c2a8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800c344:	2300      	movs	r3, #0
}
 800c346:	0018      	movs	r0, r3
 800c348:	46bd      	mov	sp, r7
 800c34a:	b004      	add	sp, #16
 800c34c:	bd80      	pop	{r7, pc}
	...

0800c350 <LL_RCC_HSI_IsReady>:
{
 800c350:	b580      	push	{r7, lr}
 800c352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800c354:	4b07      	ldr	r3, [pc, #28]	; (800c374 <LL_RCC_HSI_IsReady+0x24>)
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	2380      	movs	r3, #128	; 0x80
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	401a      	ands	r2, r3
 800c35e:	2380      	movs	r3, #128	; 0x80
 800c360:	00db      	lsls	r3, r3, #3
 800c362:	429a      	cmp	r2, r3
 800c364:	d101      	bne.n	800c36a <LL_RCC_HSI_IsReady+0x1a>
 800c366:	2301      	movs	r3, #1
 800c368:	e000      	b.n	800c36c <LL_RCC_HSI_IsReady+0x1c>
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	0018      	movs	r0, r3
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	46c0      	nop			; (mov r8, r8)
 800c374:	40021000 	.word	0x40021000

0800c378 <LL_RCC_LSE_IsReady>:
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c37c:	4b05      	ldr	r3, [pc, #20]	; (800c394 <LL_RCC_LSE_IsReady+0x1c>)
 800c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c380:	2202      	movs	r2, #2
 800c382:	4013      	ands	r3, r2
 800c384:	2b02      	cmp	r3, #2
 800c386:	d101      	bne.n	800c38c <LL_RCC_LSE_IsReady+0x14>
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <LL_RCC_LSE_IsReady+0x16>
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	0018      	movs	r0, r3
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	40021000 	.word	0x40021000

0800c398 <LL_RCC_GetSysClkSource>:
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c39c:	4b03      	ldr	r3, [pc, #12]	; (800c3ac <LL_RCC_GetSysClkSource+0x14>)
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	2238      	movs	r2, #56	; 0x38
 800c3a2:	4013      	ands	r3, r2
}
 800c3a4:	0018      	movs	r0, r3
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}
 800c3aa:	46c0      	nop			; (mov r8, r8)
 800c3ac:	40021000 	.word	0x40021000

0800c3b0 <LL_RCC_GetAHBPrescaler>:
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c3b4:	4b03      	ldr	r3, [pc, #12]	; (800c3c4 <LL_RCC_GetAHBPrescaler+0x14>)
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	23f0      	movs	r3, #240	; 0xf0
 800c3ba:	011b      	lsls	r3, r3, #4
 800c3bc:	4013      	ands	r3, r2
}
 800c3be:	0018      	movs	r0, r3
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	40021000 	.word	0x40021000

0800c3c8 <LL_RCC_GetAPB1Prescaler>:
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c3cc:	4b03      	ldr	r3, [pc, #12]	; (800c3dc <LL_RCC_GetAPB1Prescaler+0x14>)
 800c3ce:	689a      	ldr	r2, [r3, #8]
 800c3d0:	23e0      	movs	r3, #224	; 0xe0
 800c3d2:	01db      	lsls	r3, r3, #7
 800c3d4:	4013      	ands	r3, r2
}
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	40021000 	.word	0x40021000

0800c3e0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b082      	sub	sp, #8
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800c3e8:	4b05      	ldr	r3, [pc, #20]	; (800c400 <LL_RCC_GetUSARTClockSource+0x20>)
 800c3ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	401a      	ands	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	041b      	lsls	r3, r3, #16
 800c3f4:	4313      	orrs	r3, r2
}
 800c3f6:	0018      	movs	r0, r3
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	b002      	add	sp, #8
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	40021000 	.word	0x40021000

0800c404 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c408:	4b03      	ldr	r3, [pc, #12]	; (800c418 <LL_RCC_PLL_GetN+0x14>)
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	0a1b      	lsrs	r3, r3, #8
 800c40e:	227f      	movs	r2, #127	; 0x7f
 800c410:	4013      	ands	r3, r2
}
 800c412:	0018      	movs	r0, r3
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	40021000 	.word	0x40021000

0800c41c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c420:	4b03      	ldr	r3, [pc, #12]	; (800c430 <LL_RCC_PLL_GetR+0x14>)
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	0f5b      	lsrs	r3, r3, #29
 800c426:	075b      	lsls	r3, r3, #29
}
 800c428:	0018      	movs	r0, r3
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	46c0      	nop			; (mov r8, r8)
 800c430:	40021000 	.word	0x40021000

0800c434 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c438:	4b03      	ldr	r3, [pc, #12]	; (800c448 <LL_RCC_PLL_GetMainSource+0x14>)
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	2203      	movs	r2, #3
 800c43e:	4013      	ands	r3, r2
}
 800c440:	0018      	movs	r0, r3
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	46c0      	nop			; (mov r8, r8)
 800c448:	40021000 	.word	0x40021000

0800c44c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c450:	4b03      	ldr	r3, [pc, #12]	; (800c460 <LL_RCC_PLL_GetDivider+0x14>)
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	2270      	movs	r2, #112	; 0x70
 800c456:	4013      	ands	r3, r2
}
 800c458:	0018      	movs	r0, r3
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	46c0      	nop			; (mov r8, r8)
 800c460:	40021000 	.word	0x40021000

0800c464 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800c46c:	f000 f8a8 	bl	800c5c0 <RCC_GetSystemClockFreq>
 800c470:	0002      	movs	r2, r0
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	0018      	movs	r0, r3
 800c47c:	f000 f8ce 	bl	800c61c <RCC_GetHCLKClockFreq>
 800c480:	0002      	movs	r2, r0
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	0018      	movs	r0, r3
 800c48c:	f000 f8de 	bl	800c64c <RCC_GetPCLK1ClockFreq>
 800c490:	0002      	movs	r2, r0
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	609a      	str	r2, [r3, #8]
}
 800c496:	46c0      	nop			; (mov r8, r8)
 800c498:	46bd      	mov	sp, r7
 800c49a:	b002      	add	sp, #8
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b03      	cmp	r3, #3
 800c4b0:	d134      	bne.n	800c51c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	0018      	movs	r0, r3
 800c4b6:	f7ff ff93 	bl	800c3e0 <LL_RCC_GetUSARTClockSource>
 800c4ba:	0003      	movs	r3, r0
 800c4bc:	4a39      	ldr	r2, [pc, #228]	; (800c5a4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d016      	beq.n	800c4f0 <LL_RCC_GetUSARTClockFreq+0x50>
 800c4c2:	4a38      	ldr	r2, [pc, #224]	; (800c5a4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d81c      	bhi.n	800c502 <LL_RCC_GetUSARTClockFreq+0x62>
 800c4c8:	4a37      	ldr	r2, [pc, #220]	; (800c5a8 <LL_RCC_GetUSARTClockFreq+0x108>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d003      	beq.n	800c4d6 <LL_RCC_GetUSARTClockFreq+0x36>
 800c4ce:	4a37      	ldr	r2, [pc, #220]	; (800c5ac <LL_RCC_GetUSARTClockFreq+0x10c>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d005      	beq.n	800c4e0 <LL_RCC_GetUSARTClockFreq+0x40>
 800c4d4:	e015      	b.n	800c502 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c4d6:	f000 f873 	bl	800c5c0 <RCC_GetSystemClockFreq>
 800c4da:	0003      	movs	r3, r0
 800c4dc:	60fb      	str	r3, [r7, #12]
        break;
 800c4de:	e05c      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c4e0:	f7ff ff36 	bl	800c350 <LL_RCC_HSI_IsReady>
 800c4e4:	0003      	movs	r3, r0
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d150      	bne.n	800c58c <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800c4ea:	4b31      	ldr	r3, [pc, #196]	; (800c5b0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c4ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c4ee:	e04d      	b.n	800c58c <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c4f0:	f7ff ff42 	bl	800c378 <LL_RCC_LSE_IsReady>
 800c4f4:	0003      	movs	r3, r0
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d14a      	bne.n	800c590 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800c4fa:	2380      	movs	r3, #128	; 0x80
 800c4fc:	021b      	lsls	r3, r3, #8
 800c4fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c500:	e046      	b.n	800c590 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c502:	f000 f85d 	bl	800c5c0 <RCC_GetSystemClockFreq>
 800c506:	0003      	movs	r3, r0
 800c508:	0018      	movs	r0, r3
 800c50a:	f000 f887 	bl	800c61c <RCC_GetHCLKClockFreq>
 800c50e:	0003      	movs	r3, r0
 800c510:	0018      	movs	r0, r3
 800c512:	f000 f89b 	bl	800c64c <RCC_GetPCLK1ClockFreq>
 800c516:	0003      	movs	r3, r0
 800c518:	60fb      	str	r3, [r7, #12]
        break;
 800c51a:	e03e      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b0c      	cmp	r3, #12
 800c520:	d13b      	bne.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	0018      	movs	r0, r3
 800c526:	f7ff ff5b 	bl	800c3e0 <LL_RCC_GetUSARTClockSource>
 800c52a:	0003      	movs	r3, r0
 800c52c:	4a21      	ldr	r2, [pc, #132]	; (800c5b4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d016      	beq.n	800c560 <LL_RCC_GetUSARTClockFreq+0xc0>
 800c532:	4a20      	ldr	r2, [pc, #128]	; (800c5b4 <LL_RCC_GetUSARTClockFreq+0x114>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d81c      	bhi.n	800c572 <LL_RCC_GetUSARTClockFreq+0xd2>
 800c538:	4a1f      	ldr	r2, [pc, #124]	; (800c5b8 <LL_RCC_GetUSARTClockFreq+0x118>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d003      	beq.n	800c546 <LL_RCC_GetUSARTClockFreq+0xa6>
 800c53e:	4a1f      	ldr	r2, [pc, #124]	; (800c5bc <LL_RCC_GetUSARTClockFreq+0x11c>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d005      	beq.n	800c550 <LL_RCC_GetUSARTClockFreq+0xb0>
 800c544:	e015      	b.n	800c572 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800c546:	f000 f83b 	bl	800c5c0 <RCC_GetSystemClockFreq>
 800c54a:	0003      	movs	r3, r0
 800c54c:	60fb      	str	r3, [r7, #12]
        break;
 800c54e:	e024      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800c550:	f7ff fefe 	bl	800c350 <LL_RCC_HSI_IsReady>
 800c554:	0003      	movs	r3, r0
 800c556:	2b01      	cmp	r3, #1
 800c558:	d11c      	bne.n	800c594 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800c55a:	4b15      	ldr	r3, [pc, #84]	; (800c5b0 <LL_RCC_GetUSARTClockFreq+0x110>)
 800c55c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c55e:	e019      	b.n	800c594 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800c560:	f7ff ff0a 	bl	800c378 <LL_RCC_LSE_IsReady>
 800c564:	0003      	movs	r3, r0
 800c566:	2b01      	cmp	r3, #1
 800c568:	d116      	bne.n	800c598 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800c56a:	2380      	movs	r3, #128	; 0x80
 800c56c:	021b      	lsls	r3, r3, #8
 800c56e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800c570:	e012      	b.n	800c598 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800c572:	f000 f825 	bl	800c5c0 <RCC_GetSystemClockFreq>
 800c576:	0003      	movs	r3, r0
 800c578:	0018      	movs	r0, r3
 800c57a:	f000 f84f 	bl	800c61c <RCC_GetHCLKClockFreq>
 800c57e:	0003      	movs	r3, r0
 800c580:	0018      	movs	r0, r3
 800c582:	f000 f863 	bl	800c64c <RCC_GetPCLK1ClockFreq>
 800c586:	0003      	movs	r3, r0
 800c588:	60fb      	str	r3, [r7, #12]
        break;
 800c58a:	e006      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c58c:	46c0      	nop			; (mov r8, r8)
 800c58e:	e004      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c590:	46c0      	nop			; (mov r8, r8)
 800c592:	e002      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c594:	46c0      	nop			; (mov r8, r8)
 800c596:	e000      	b.n	800c59a <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800c598:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800c59a:	68fb      	ldr	r3, [r7, #12]
}
 800c59c:	0018      	movs	r0, r3
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	b004      	add	sp, #16
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	00030003 	.word	0x00030003
 800c5a8:	00030001 	.word	0x00030001
 800c5ac:	00030002 	.word	0x00030002
 800c5b0:	00f42400 	.word	0x00f42400
 800c5b4:	000c000c 	.word	0x000c000c
 800c5b8:	000c0004 	.word	0x000c0004
 800c5bc:	000c0008 	.word	0x000c0008

0800c5c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800c5c6:	f7ff fee7 	bl	800c398 <LL_RCC_GetSysClkSource>
 800c5ca:	0003      	movs	r3, r0
 800c5cc:	2b08      	cmp	r3, #8
 800c5ce:	d002      	beq.n	800c5d6 <RCC_GetSystemClockFreq+0x16>
 800c5d0:	2b10      	cmp	r3, #16
 800c5d2:	d003      	beq.n	800c5dc <RCC_GetSystemClockFreq+0x1c>
 800c5d4:	e007      	b.n	800c5e6 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800c5d6:	4b0e      	ldr	r3, [pc, #56]	; (800c610 <RCC_GetSystemClockFreq+0x50>)
 800c5d8:	607b      	str	r3, [r7, #4]
      break;
 800c5da:	e014      	b.n	800c606 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800c5dc:	f000 f84c 	bl	800c678 <RCC_PLL_GetFreqDomain_SYS>
 800c5e0:	0003      	movs	r3, r0
 800c5e2:	607b      	str	r3, [r7, #4]
      break;
 800c5e4:	e00f      	b.n	800c606 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <RCC_GetSystemClockFreq+0x54>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	0adb      	lsrs	r3, r3, #11
 800c5ec:	2207      	movs	r2, #7
 800c5ee:	4013      	ands	r3, r2
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	409a      	lsls	r2, r3
 800c5f4:	0013      	movs	r3, r2
 800c5f6:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	4807      	ldr	r0, [pc, #28]	; (800c618 <RCC_GetSystemClockFreq+0x58>)
 800c5fc:	f7f3 fd82 	bl	8000104 <__udivsi3>
 800c600:	0003      	movs	r3, r0
 800c602:	607b      	str	r3, [r7, #4]
      break;
 800c604:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800c606:	687b      	ldr	r3, [r7, #4]
}
 800c608:	0018      	movs	r0, r3
 800c60a:	46bd      	mov	sp, r7
 800c60c:	b002      	add	sp, #8
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	007a1200 	.word	0x007a1200
 800c614:	40021000 	.word	0x40021000
 800c618:	00f42400 	.word	0x00f42400

0800c61c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800c624:	f7ff fec4 	bl	800c3b0 <LL_RCC_GetAHBPrescaler>
 800c628:	0003      	movs	r3, r0
 800c62a:	0a1b      	lsrs	r3, r3, #8
 800c62c:	220f      	movs	r2, #15
 800c62e:	401a      	ands	r2, r3
 800c630:	4b05      	ldr	r3, [pc, #20]	; (800c648 <RCC_GetHCLKClockFreq+0x2c>)
 800c632:	0092      	lsls	r2, r2, #2
 800c634:	58d3      	ldr	r3, [r2, r3]
 800c636:	221f      	movs	r2, #31
 800c638:	4013      	ands	r3, r2
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	40da      	lsrs	r2, r3
 800c63e:	0013      	movs	r3, r2
}
 800c640:	0018      	movs	r0, r3
 800c642:	46bd      	mov	sp, r7
 800c644:	b002      	add	sp, #8
 800c646:	bd80      	pop	{r7, pc}
 800c648:	080183c8 	.word	0x080183c8

0800c64c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800c654:	f7ff feb8 	bl	800c3c8 <LL_RCC_GetAPB1Prescaler>
 800c658:	0003      	movs	r3, r0
 800c65a:	0b1a      	lsrs	r2, r3, #12
 800c65c:	4b05      	ldr	r3, [pc, #20]	; (800c674 <RCC_GetPCLK1ClockFreq+0x28>)
 800c65e:	0092      	lsls	r2, r2, #2
 800c660:	58d3      	ldr	r3, [r2, r3]
 800c662:	221f      	movs	r2, #31
 800c664:	4013      	ands	r3, r2
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	40da      	lsrs	r2, r3
 800c66a:	0013      	movs	r3, r2
}
 800c66c:	0018      	movs	r0, r3
 800c66e:	46bd      	mov	sp, r7
 800c670:	b002      	add	sp, #8
 800c672:	bd80      	pop	{r7, pc}
 800c674:	08018408 	.word	0x08018408

0800c678 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800c678:	b590      	push	{r4, r7, lr}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800c67e:	f7ff fed9 	bl	800c434 <LL_RCC_PLL_GetMainSource>
 800c682:	0003      	movs	r3, r0
 800c684:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d003      	beq.n	800c694 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d003      	beq.n	800c69a <RCC_PLL_GetFreqDomain_SYS+0x22>
 800c692:	e005      	b.n	800c6a0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800c694:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c696:	607b      	str	r3, [r7, #4]
      break;
 800c698:	e005      	b.n	800c6a6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800c69c:	607b      	str	r3, [r7, #4]
      break;
 800c69e:	e002      	b.n	800c6a6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800c6a0:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800c6a2:	607b      	str	r3, [r7, #4]
      break;
 800c6a4:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800c6a6:	f7ff fead 	bl	800c404 <LL_RCC_PLL_GetN>
 800c6aa:	0002      	movs	r2, r0
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4353      	muls	r3, r2
 800c6b0:	001c      	movs	r4, r3
 800c6b2:	f7ff fecb 	bl	800c44c <LL_RCC_PLL_GetDivider>
 800c6b6:	0003      	movs	r3, r0
 800c6b8:	091b      	lsrs	r3, r3, #4
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	0019      	movs	r1, r3
 800c6be:	0020      	movs	r0, r4
 800c6c0:	f7f3 fd20 	bl	8000104 <__udivsi3>
 800c6c4:	0003      	movs	r3, r0
 800c6c6:	001c      	movs	r4, r3
 800c6c8:	f7ff fea8 	bl	800c41c <LL_RCC_PLL_GetR>
 800c6cc:	0003      	movs	r3, r0
 800c6ce:	0f5b      	lsrs	r3, r3, #29
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	0019      	movs	r1, r3
 800c6d4:	0020      	movs	r0, r4
 800c6d6:	f7f3 fd15 	bl	8000104 <__udivsi3>
 800c6da:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800c6dc:	0018      	movs	r0, r3
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	b003      	add	sp, #12
 800c6e2:	bd90      	pop	{r4, r7, pc}
 800c6e4:	00f42400 	.word	0x00f42400
 800c6e8:	007a1200 	.word	0x007a1200

0800c6ec <LL_USART_IsEnabled>:
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d101      	bne.n	800c704 <LL_USART_IsEnabled+0x18>
 800c700:	2301      	movs	r3, #1
 800c702:	e000      	b.n	800c706 <LL_USART_IsEnabled+0x1a>
 800c704:	2300      	movs	r3, #0
}
 800c706:	0018      	movs	r0, r3
 800c708:	46bd      	mov	sp, r7
 800c70a:	b002      	add	sp, #8
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <LL_USART_SetPrescaler>:
{
 800c70e:	b580      	push	{r7, lr}
 800c710:	b082      	sub	sp, #8
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71c:	220f      	movs	r2, #15
 800c71e:	4393      	bics	r3, r2
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	b292      	uxth	r2, r2
 800c724:	431a      	orrs	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800c72a:	46c0      	nop			; (mov r8, r8)
 800c72c:	46bd      	mov	sp, r7
 800c72e:	b002      	add	sp, #8
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <LL_USART_SetStopBitsLength>:
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	4a05      	ldr	r2, [pc, #20]	; (800c758 <LL_USART_SetStopBitsLength+0x24>)
 800c744:	401a      	ands	r2, r3
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	605a      	str	r2, [r3, #4]
}
 800c74e:	46c0      	nop			; (mov r8, r8)
 800c750:	46bd      	mov	sp, r7
 800c752:	b002      	add	sp, #8
 800c754:	bd80      	pop	{r7, pc}
 800c756:	46c0      	nop			; (mov r8, r8)
 800c758:	ffffcfff 	.word	0xffffcfff

0800c75c <LL_USART_SetHWFlowCtrl>:
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	4a05      	ldr	r2, [pc, #20]	; (800c780 <LL_USART_SetHWFlowCtrl+0x24>)
 800c76c:	401a      	ands	r2, r3
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	431a      	orrs	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	609a      	str	r2, [r3, #8]
}
 800c776:	46c0      	nop			; (mov r8, r8)
 800c778:	46bd      	mov	sp, r7
 800c77a:	b002      	add	sp, #8
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	46c0      	nop			; (mov r8, r8)
 800c780:	fffffcff 	.word	0xfffffcff

0800c784 <LL_USART_SetBaudRate>:
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b086      	sub	sp, #24
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
 800c790:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2b0b      	cmp	r3, #11
 800c796:	d846      	bhi.n	800c826 <LL_USART_SetBaudRate+0xa2>
  else if (BaudRate == 0U)
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d043      	beq.n	800c826 <LL_USART_SetBaudRate+0xa2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	2380      	movs	r3, #128	; 0x80
 800c7a2:	021b      	lsls	r3, r3, #8
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d126      	bne.n	800c7f6 <LL_USART_SetBaudRate+0x72>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	001a      	movs	r2, r3
 800c7ae:	4b20      	ldr	r3, [pc, #128]	; (800c830 <LL_USART_SetBaudRate+0xac>)
 800c7b0:	0092      	lsls	r2, r2, #2
 800c7b2:	58d3      	ldr	r3, [r2, r3]
 800c7b4:	0019      	movs	r1, r3
 800c7b6:	68b8      	ldr	r0, [r7, #8]
 800c7b8:	f7f3 fca4 	bl	8000104 <__udivsi3>
 800c7bc:	0003      	movs	r3, r0
 800c7be:	005a      	lsls	r2, r3, #1
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	085b      	lsrs	r3, r3, #1
 800c7c4:	18d3      	adds	r3, r2, r3
 800c7c6:	6a39      	ldr	r1, [r7, #32]
 800c7c8:	0018      	movs	r0, r3
 800c7ca:	f7f3 fc9b 	bl	8000104 <__udivsi3>
 800c7ce:	0003      	movs	r3, r0
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	4a17      	ldr	r2, [pc, #92]	; (800c834 <LL_USART_SetBaudRate+0xb0>)
 800c7d8:	4013      	ands	r3, r2
 800c7da:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	085b      	lsrs	r3, r3, #1
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	001a      	movs	r2, r3
 800c7e4:	2307      	movs	r3, #7
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	693a      	ldr	r2, [r7, #16]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	60da      	str	r2, [r3, #12]
}
 800c7f4:	e017      	b.n	800c826 <LL_USART_SetBaudRate+0xa2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	001a      	movs	r2, r3
 800c7fc:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <LL_USART_SetBaudRate+0xac>)
 800c7fe:	0092      	lsls	r2, r2, #2
 800c800:	58d3      	ldr	r3, [r2, r3]
 800c802:	0019      	movs	r1, r3
 800c804:	68b8      	ldr	r0, [r7, #8]
 800c806:	f7f3 fc7d 	bl	8000104 <__udivsi3>
 800c80a:	0003      	movs	r3, r0
 800c80c:	001a      	movs	r2, r3
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	085b      	lsrs	r3, r3, #1
 800c812:	18d3      	adds	r3, r2, r3
 800c814:	6a39      	ldr	r1, [r7, #32]
 800c816:	0018      	movs	r0, r3
 800c818:	f7f3 fc74 	bl	8000104 <__udivsi3>
 800c81c:	0003      	movs	r3, r0
 800c81e:	b29b      	uxth	r3, r3
 800c820:	001a      	movs	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	60da      	str	r2, [r3, #12]
}
 800c826:	46c0      	nop			; (mov r8, r8)
 800c828:	46bd      	mov	sp, r7
 800c82a:	b006      	add	sp, #24
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	46c0      	nop			; (mov r8, r8)
 800c830:	0801847c 	.word	0x0801847c
 800c834:	0000fff0 	.word	0x0000fff0

0800c838 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c838:	b590      	push	{r4, r7, lr}
 800c83a:	b08b      	sub	sp, #44	; 0x2c
 800c83c:	af02      	add	r7, sp, #8
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c842:	231f      	movs	r3, #31
 800c844:	18fb      	adds	r3, r7, r3
 800c846:	2201      	movs	r2, #1
 800c848:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	0018      	movs	r0, r3
 800c852:	f7ff ff4b 	bl	800c6ec <LL_USART_IsEnabled>
 800c856:	1e03      	subs	r3, r0, #0
 800c858:	d16a      	bne.n	800c930 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a38      	ldr	r2, [pc, #224]	; (800c940 <LL_USART_Init+0x108>)
 800c860:	401a      	ands	r2, r3
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	6899      	ldr	r1, [r3, #8]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	4319      	orrs	r1, r3
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	4319      	orrs	r1, r3
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	69db      	ldr	r3, [r3, #28]
 800c876:	430b      	orrs	r3, r1
 800c878:	431a      	orrs	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	0011      	movs	r1, r2
 800c886:	0018      	movs	r0, r3
 800c888:	f7ff ff54 	bl	800c734 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	699a      	ldr	r2, [r3, #24]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	0011      	movs	r1, r2
 800c894:	0018      	movs	r0, r3
 800c896:	f7ff ff61 	bl	800c75c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a29      	ldr	r2, [pc, #164]	; (800c944 <LL_USART_Init+0x10c>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d105      	bne.n	800c8ae <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800c8a2:	2003      	movs	r0, #3
 800c8a4:	f7ff fdfc 	bl	800c4a0 <LL_RCC_GetUSARTClockFreq>
 800c8a8:	0003      	movs	r3, r0
 800c8aa:	61bb      	str	r3, [r7, #24]
 800c8ac:	e022      	b.n	800c8f4 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	4a25      	ldr	r2, [pc, #148]	; (800c948 <LL_USART_Init+0x110>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d105      	bne.n	800c8c2 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800c8b6:	200c      	movs	r0, #12
 800c8b8:	f7ff fdf2 	bl	800c4a0 <LL_RCC_GetUSARTClockFreq>
 800c8bc:	0003      	movs	r3, r0
 800c8be:	61bb      	str	r3, [r7, #24]
 800c8c0:	e018      	b.n	800c8f4 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	4a21      	ldr	r2, [pc, #132]	; (800c94c <LL_USART_Init+0x114>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d108      	bne.n	800c8dc <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c8ca:	240c      	movs	r4, #12
 800c8cc:	193b      	adds	r3, r7, r4
 800c8ce:	0018      	movs	r0, r3
 800c8d0:	f7ff fdc8 	bl	800c464 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c8d4:	193b      	adds	r3, r7, r4
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	61bb      	str	r3, [r7, #24]
 800c8da:	e00b      	b.n	800c8f4 <LL_USART_Init+0xbc>
#endif /* USART3 Clock selector flag */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4a1c      	ldr	r2, [pc, #112]	; (800c950 <LL_USART_Init+0x118>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d107      	bne.n	800c8f4 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800c8e4:	240c      	movs	r4, #12
 800c8e6:	193b      	adds	r3, r7, r4
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	f7ff fdbb 	bl	800c464 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800c8ee:	193b      	adds	r3, r7, r4
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d013      	beq.n	800c922 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00f      	beq.n	800c922 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800c902:	231f      	movs	r3, #31
 800c904:	18fb      	adds	r3, r7, r3
 800c906:	2200      	movs	r2, #0
 800c908:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	69dc      	ldr	r4, [r3, #28]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	69b9      	ldr	r1, [r7, #24]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	0023      	movs	r3, r4
 800c91e:	f7ff ff31 	bl	800c784 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	0011      	movs	r1, r2
 800c92a:	0018      	movs	r0, r3
 800c92c:	f7ff feef 	bl	800c70e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c930:	231f      	movs	r3, #31
 800c932:	18fb      	adds	r3, r7, r3
 800c934:	781b      	ldrb	r3, [r3, #0]
}
 800c936:	0018      	movs	r0, r3
 800c938:	46bd      	mov	sp, r7
 800c93a:	b009      	add	sp, #36	; 0x24
 800c93c:	bd90      	pop	{r4, r7, pc}
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	efff69f3 	.word	0xefff69f3
 800c944:	40013800 	.word	0x40013800
 800c948:	40004400 	.word	0x40004400
 800c94c:	40004800 	.word	0x40004800
 800c950:	40004c00 	.word	0x40004c00

0800c954 <__libc_init_array>:
 800c954:	b570      	push	{r4, r5, r6, lr}
 800c956:	2600      	movs	r6, #0
 800c958:	4d0c      	ldr	r5, [pc, #48]	; (800c98c <__libc_init_array+0x38>)
 800c95a:	4c0d      	ldr	r4, [pc, #52]	; (800c990 <__libc_init_array+0x3c>)
 800c95c:	1b64      	subs	r4, r4, r5
 800c95e:	10a4      	asrs	r4, r4, #2
 800c960:	42a6      	cmp	r6, r4
 800c962:	d109      	bne.n	800c978 <__libc_init_array+0x24>
 800c964:	2600      	movs	r6, #0
 800c966:	f000 f821 	bl	800c9ac <_init>
 800c96a:	4d0a      	ldr	r5, [pc, #40]	; (800c994 <__libc_init_array+0x40>)
 800c96c:	4c0a      	ldr	r4, [pc, #40]	; (800c998 <__libc_init_array+0x44>)
 800c96e:	1b64      	subs	r4, r4, r5
 800c970:	10a4      	asrs	r4, r4, #2
 800c972:	42a6      	cmp	r6, r4
 800c974:	d105      	bne.n	800c982 <__libc_init_array+0x2e>
 800c976:	bd70      	pop	{r4, r5, r6, pc}
 800c978:	00b3      	lsls	r3, r6, #2
 800c97a:	58eb      	ldr	r3, [r5, r3]
 800c97c:	4798      	blx	r3
 800c97e:	3601      	adds	r6, #1
 800c980:	e7ee      	b.n	800c960 <__libc_init_array+0xc>
 800c982:	00b3      	lsls	r3, r6, #2
 800c984:	58eb      	ldr	r3, [r5, r3]
 800c986:	4798      	blx	r3
 800c988:	3601      	adds	r6, #1
 800c98a:	e7f2      	b.n	800c972 <__libc_init_array+0x1e>
 800c98c:	080184ac 	.word	0x080184ac
 800c990:	080184ac 	.word	0x080184ac
 800c994:	080184ac 	.word	0x080184ac
 800c998:	080184b0 	.word	0x080184b0

0800c99c <memset>:
 800c99c:	0003      	movs	r3, r0
 800c99e:	1882      	adds	r2, r0, r2
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d100      	bne.n	800c9a6 <memset+0xa>
 800c9a4:	4770      	bx	lr
 800c9a6:	7019      	strb	r1, [r3, #0]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	e7f9      	b.n	800c9a0 <memset+0x4>

0800c9ac <_init>:
 800c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ae:	46c0      	nop			; (mov r8, r8)
 800c9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9b2:	bc08      	pop	{r3}
 800c9b4:	469e      	mov	lr, r3
 800c9b6:	4770      	bx	lr

0800c9b8 <_fini>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9be:	bc08      	pop	{r3}
 800c9c0:	469e      	mov	lr, r3
 800c9c2:	4770      	bx	lr
