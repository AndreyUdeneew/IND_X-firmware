
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a650  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a70c  0800a70c  0001a70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7f4  0800a7f4  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7f4  0800a7f4  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7f4  0800a7f4  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f4  0800a7f4  0001a7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7f8  0800a7f8  0001a7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  0800a7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024c0  20003140  0800d93c  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005600  0800d93c  00025600  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d33  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0003ce9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  00040370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001718  00000000  00000000  00041c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f7  00000000  00000000  00043318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d073  00000000  00000000  0005f70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae23f  00000000  00000000  0007c782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a9c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d4  00000000  00000000  0012aa14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a6f4 	.word	0x0800a6f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	0800a6f4 	.word	0x0800a6f4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	430a      	orrs	r2, r1
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4013      	ands	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	b004      	add	sp, #16
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800050e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	430a      	orrs	r2, r1
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_IOP_GRP1_EnableClock+0x28>)
 800051a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	4013      	ands	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000522:	68fb      	ldr	r3, [r7, #12]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021000 	.word	0x40021000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 8000536:	2316      	movs	r3, #22
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	2200      	movs	r2, #0
 800053c:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 800053e:	2314      	movs	r3, #20
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 8000546:	2312      	movs	r3, #18
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	2200      	movs	r2, #0
 800054c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f002 fd07 	bl	8002f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f871 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b32      	ldr	r3, [pc, #200]	; (8000620 <main+0xf0>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b31      	ldr	r3, [pc, #196]	; (8000620 <main+0xf0>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b2f      	ldr	r3, [pc, #188]	; (8000620 <main+0xf0>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	4b2c      	ldr	r3, [pc, #176]	; (8000620 <main+0xf0>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b2b      	ldr	r3, [pc, #172]	; (8000620 <main+0xf0>)
 8000574:	2102      	movs	r1, #2
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0xf0>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2202      	movs	r2, #2
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <main+0xf0>)
 8000588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <main+0xf0>)
 800058c:	2104      	movs	r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
 8000592:	4b23      	ldr	r3, [pc, #140]	; (8000620 <main+0xf0>)
 8000594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000596:	2204      	movs	r2, #4
 8000598:	4013      	ands	r3, r2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fbb3 	bl	8000d08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a2:	f000 fb83 	bl	8000cac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 faa1 	bl	8000aec <MX_USART2_UART_Init>
  MX_COMP1_Init();
 80005aa:	f000 f8c5 	bl	8000738 <MX_COMP1_Init>
  MX_TIM1_Init();
 80005ae:	f000 f9a3 	bl	80008f8 <MX_TIM1_Init>
  MX_USART3_Init();
 80005b2:	f000 fb39 	bl	8000c28 <MX_USART3_Init>
  MX_I2S1_Init();
 80005b6:	f000 f931 	bl	800081c <MX_I2S1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f8ef 	bl	800079c <MX_I2C1_Init>
  MX_SPI2_Init();
 80005be:	f000 f957 	bl	8000870 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0xf4>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 ff99 	bl	80034fc <HAL_COMP_Start>
	HAL_Delay(100);
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f002 fd4e 	bl	800306c <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005d0:	f001 fc76 	bl	8001ec0 <MEM_Reset>

	weoInit();
 80005d4:	f000 fdfa 	bl	80011cc <weoInit>
	weoClear();
 80005d8:	f000 fe64 	bl	80012a4 <weoClear>

	MEM_GetID();
 80005dc:	f001 fec2 	bl	8002364 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0xf8>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <main+0xf8>)
 80005e6:	4911      	ldr	r1, [pc, #68]	; (800062c <main+0xfc>)
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0xf8>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff20 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <main+0xf8>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ff2a 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <main+0xf8>)
 80005fe:	6a1a      	ldr	r2, [r3, #32]
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0xf8>)
 8000602:	2108      	movs	r1, #8
 8000604:	430a      	orrs	r2, r1
 8000606:	621a      	str	r2, [r3, #32]
//	USART3->CR1 |= USART_CR1_UE;
//weoDrawRectangleFilled(0x00,0x00,0x7F,0x7F,0xFF,h1);
//	USART3->CR1 &= ~(USART_CR1_UE);
//		USART3->CR2 |= USART_CR2_MSBFIRST;
//		USART3->CR1 |= USART_CR1_UE;
	GPIOC->ODR |= 1 << 6;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <main+0x100>)
 800060a:	695a      	ldr	r2, [r3, #20]
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <main+0x100>)
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	430a      	orrs	r2, r1
 8000612:	615a      	str	r2, [r3, #20]
	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <main+0x104>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	0018      	movs	r0, r3
 800061a:	f001 ff05 	bl	8002428 <cmdExecute>
 800061e:	e7f9      	b.n	8000614 <main+0xe4>
 8000620:	40021000 	.word	0x40021000
 8000624:	20003350 	.word	0x20003350
 8000628:	40004400 	.word	0x40004400
 800062c:	1000100d 	.word	0x1000100d
 8000630:	50000800 	.word	0x50000800
 8000634:	2000345a 	.word	0x2000345a

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b0a1      	sub	sp, #132	; 0x84
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	2448      	movs	r4, #72	; 0x48
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2338      	movs	r3, #56	; 0x38
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f00a f84b 	bl	800a6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064e:	2338      	movs	r3, #56	; 0x38
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	0018      	movs	r0, r3
 8000654:	2310      	movs	r3, #16
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f00a f843 	bl	800a6e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	2334      	movs	r3, #52	; 0x34
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f00a f83c 	bl	800a6e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	0018      	movs	r0, r3
 8000672:	f004 fda5 	bl	80051c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	0052      	lsls	r2, r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000684:	0021      	movs	r1, r4
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2240      	movs	r2, #64	; 0x40
 8000690:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2202      	movs	r2, #2
 8000696:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2202      	movs	r2, #2
 800069c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2208      	movs	r2, #8
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0292      	lsls	r2, r2, #10
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0492      	lsls	r2, r2, #18
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0592      	lsls	r2, r2, #22
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f004 fdc7 	bl	8005258 <HAL_RCC_OscConfig>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ce:	f001 ffc5 	bl	800265c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	2138      	movs	r1, #56	; 0x38
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2207      	movs	r2, #7
 80006d8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2202      	movs	r2, #2
 80006de:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2102      	movs	r1, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f005 f8d1 	bl	8005898 <HAL_RCC_ClockConfig>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fa:	f001 ffaf 	bl	800265c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <SystemClock_Config+0xfc>)
 8000702:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	0018      	movs	r0, r3
 8000720:	f005 fa64 	bl	8005bec <HAL_RCCEx_PeriphCLKConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000728:	f001 ff98 	bl	800265c <Error_Handler>
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b021      	add	sp, #132	; 0x84
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	00200822 	.word	0x00200822

08000738 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_COMP1_Init+0x5c>)
 800073e:	4a16      	ldr	r2, [pc, #88]	; (8000798 <MX_COMP1_Init+0x60>)
 8000740:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_COMP1_Init+0x5c>)
 800074c:	2230      	movs	r2, #48	; 0x30
 800074e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_COMP1_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0392      	lsls	r2, r2, #14
 8000768:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_COMP1_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_COMP1_Init+0x5c>)
 8000778:	2212      	movs	r2, #18
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_COMP1_Init+0x5c>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 fd5a 	bl	8003238 <HAL_COMP_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000788:	f001 ff68 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	20003350 	.word	0x20003350
 8000798:	40010200 	.word	0x40010200

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <MX_I2C1_Init+0x78>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_I2C1_Init+0x74>)
 80007a8:	4a1b      	ldr	r2, [pc, #108]	; (8000818 <MX_I2C1_Init+0x7c>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_I2C1_Init+0x74>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b8:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_I2C1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_I2C1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_I2C1_Init+0x74>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f003 fbeb 	bl	8003fb4 <HAL_I2C_Init>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e2:	f001 ff3b 	bl	800265c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_I2C1_Init+0x74>)
 80007e8:	2100      	movs	r1, #0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f004 fa78 	bl	8004ce0 <HAL_I2CEx_ConfigAnalogFilter>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f4:	f001 ff32 	bl	800265c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <MX_I2C1_Init+0x74>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	0018      	movs	r0, r3
 80007fe:	f004 fabb 	bl	8004d78 <HAL_I2CEx_ConfigDigitalFilter>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000806:	f001 ff29 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20003230 	.word	0x20003230
 8000814:	40005400 	.word	0x40005400
 8000818:	1094102c 	.word	0x1094102c

0800081c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_I2S1_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S1_Init+0x4c>)
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0092      	lsls	r2, r2, #2
 8000840:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000844:	22fa      	movs	r2, #250	; 0xfa
 8000846:	0192      	lsls	r2, r2, #6
 8000848:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2S1_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_I2S1_Init+0x4c>)
 8000852:	0018      	movs	r0, r3
 8000854:	f004 fadc 	bl	8004e10 <HAL_I2S_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 800085c:	f001 fefe 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	2000345c 	.word	0x2000345c
 800086c:	40013000 	.word	0x40013000

08000870 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000876:	2208      	movs	r2, #8
 8000878:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_SPI2_Init+0x80>)
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <MX_SPI2_Init+0x84>)
 800087e:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000882:	2282      	movs	r2, #130	; 0x82
 8000884:	0052      	lsls	r2, r2, #1
 8000886:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_SPI2_Init+0x80>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000890:	22e0      	movs	r2, #224	; 0xe0
 8000892:	00d2      	lsls	r2, r2, #3
 8000894:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI2_Init+0x80>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI2_Init+0x80>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	0092      	lsls	r2, r2, #2
 80008a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008ac:	2208      	movs	r2, #8
 80008ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f005 fe88 	bl	80065ec <HAL_SPI_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008e0:	f001 febc 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <MX_SPI2_Init+0x80>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI2_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200031b0 	.word	0x200031b0
 80008f4:	40003800 	.word	0x40003800

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2368      	movs	r3, #104	; 0x68
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f009 feeb 	bl	800a6e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	235c      	movs	r3, #92	; 0x5c
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	230c      	movs	r3, #12
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f009 fee3 	bl	800a6e4 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800091e:	2350      	movs	r3, #80	; 0x50
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	230c      	movs	r3, #12
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f009 fedb 	bl	800a6e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	2334      	movs	r3, #52	; 0x34
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	231c      	movs	r3, #28
 8000936:	001a      	movs	r2, r3
 8000938:	2100      	movs	r1, #0
 800093a:	f009 fed3 	bl	800a6e4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	2334      	movs	r3, #52	; 0x34
 8000944:	001a      	movs	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	f009 fecc 	bl	800a6e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094c:	4b64      	ldr	r3, [pc, #400]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <MX_TIM1_Init+0x1ec>)
 8000950:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000952:	4b63      	ldr	r3, [pc, #396]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b61      	ldr	r3, [pc, #388]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 800095e:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000960:	4a61      	ldr	r2, [pc, #388]	; (8000ae8 <MX_TIM1_Init+0x1f0>)
 8000962:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b5e      	ldr	r3, [pc, #376]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096a:	4b5d      	ldr	r3, [pc, #372]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b5b      	ldr	r3, [pc, #364]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000976:	4b5a      	ldr	r3, [pc, #360]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000978:	0018      	movs	r0, r3
 800097a:	f007 fa2b 	bl	8007dd4 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000982:	f001 fe6b 	bl	800265c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2168      	movs	r1, #104	; 0x68
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b53      	ldr	r3, [pc, #332]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f007 fcb4 	bl	8008304 <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80009a0:	f001 fe5c 	bl	800265c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a4:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f007 fa6c 	bl	8007e84 <HAL_TIM_PWM_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80009b0:	f001 fe54 	bl	800265c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	215c      	movs	r1, #92	; 0x5c
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009c8:	187a      	adds	r2, r7, r1
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f008 f968 	bl	8008ca4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009d8:	f001 fe40 	bl	800265c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009dc:	2150      	movs	r1, #80	; 0x50
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2201      	movs	r2, #1
 80009e8:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	4b3b      	ldr	r3, [pc, #236]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	0018      	movs	r0, r3
 80009f8:	f008 fa68 	bl	8008ecc <HAL_TIMEx_ConfigBreakInput>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a00:	f001 fe2c 	bl	800265c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a04:	2134      	movs	r1, #52	; 0x34
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2260      	movs	r2, #96	; 0x60
 8000a0a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2296      	movs	r2, #150	; 0x96
 8000a10:	0052      	lsls	r2, r2, #1
 8000a12:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2204      	movs	r2, #4
 8000a24:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	1879      	adds	r1, r7, r1
 8000a34:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f007 fb6d 	bl	8008118 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a42:	f001 fe0b 	bl	800265c <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a46:	2134      	movs	r1, #52	; 0x34
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2232      	movs	r2, #50	; 0x32
 8000a4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a4e:	1879      	adds	r1, r7, r1
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	0018      	movs	r0, r3
 8000a56:	f007 fb5f 	bl	8008118 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a5e:	f001 fdfd 	bl	800265c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	00d2      	lsls	r2, r2, #3
 8000a70:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0152      	lsls	r2, r2, #5
 8000a84:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2280      	movs	r2, #128	; 0x80
 8000a8a:	0192      	lsls	r2, r2, #6
 8000a8c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	220a      	movs	r2, #10
 8000a92:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	0492      	lsls	r2, r2, #18
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000aae:	003b      	movs	r3, r7
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2280      	movs	r2, #128	; 0x80
 8000ab8:	01d2      	lsls	r2, r2, #7
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	003a      	movs	r2, r7
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ac0:	0011      	movs	r1, r2
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f008 f95c 	bl	8008d80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000acc:	f001 fdc6 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <MX_TIM1_Init+0x1e8>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 f808 	bl	8002ae8 <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b01e      	add	sp, #120	; 0x78
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20003404 	.word	0x20003404
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	0000027f 	.word	0x0000027f

08000aec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08f      	sub	sp, #60	; 0x3c
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000af2:	2418      	movs	r4, #24
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2320      	movs	r3, #32
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f009 fdf1 	bl	800a6e4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	003b      	movs	r3, r7
 8000b04:	0018      	movs	r0, r3
 8000b06:	2318      	movs	r3, #24
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f009 fdea 	bl	800a6e4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	029b      	lsls	r3, r3, #10
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff fcdf 	bl	80004d8 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fcf2 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b20:	003b      	movs	r3, r7
 8000b22:	2204      	movs	r2, #4
 8000b24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2202      	movs	r2, #2
 8000b2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2201      	movs	r2, #1
 8000b42:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	003a      	movs	r2, r7
 8000b46:	23a0      	movs	r3, #160	; 0xa0
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	0011      	movs	r1, r2
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f009 fa4b 	bl	8009fe8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b52:	003b      	movs	r3, r7
 8000b54:	2208      	movs	r2, #8
 8000b56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b58:	003b      	movs	r3, r7
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b5e:	003b      	movs	r3, r7
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b64:	003b      	movs	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b70:	003b      	movs	r3, r7
 8000b72:	2201      	movs	r2, #1
 8000b74:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	003a      	movs	r2, r7
 8000b78:	23a0      	movs	r3, #160	; 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f009 fa32 	bl	8009fe8 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	201c      	movs	r0, #28
 8000b88:	f7ff fb62 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b8c:	201c      	movs	r0, #28
 8000b8e:	f7ff fb45 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	22e1      	movs	r2, #225	; 0xe1
 8000b9c:	0212      	lsls	r2, r2, #8
 8000b9e:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	220c      	movs	r2, #12
 8000bba:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bcc:	0019      	movs	r1, r3
 8000bce:	0010      	movs	r0, r2
 8000bd0:	f009 fcd6 	bl	800a580 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fbc5 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff fbd2 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff fbac 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff fbde 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fb96 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fbed 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d0f9      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x138>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff fbfb 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d0f3      	beq.n	8000c02 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b00f      	add	sp, #60	; 0x3c
 8000c22:	bd90      	pop	{r4, r7, pc}
 8000c24:	40004400 	.word	0x40004400

08000c28 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0309      	lsls	r1, r1, #12
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c3c:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <MX_USART3_Init+0x78>)
 8000c3e:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c44:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	00d2      	lsls	r2, r2, #3
 8000c64:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0052      	lsls	r2, r2, #1
 8000c74:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f008 f9c1 	bl	800900c <HAL_USART_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c8e:	f001 fce5 	bl	800265c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  husart3.Init.BaudRate = 8100000;
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <MX_USART3_Init+0x7c>)
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <MX_USART3_Init+0x80>)
 8000c96:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 2 */

}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	20003390 	.word	0x20003390
 8000ca8:	007b98a0 	.word	0x007b98a0

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cb8:	2101      	movs	r1, #1
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_DMA_Init+0x58>)
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2009      	movs	r0, #9
 8000cd0:	f002 fd12 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cd4:	2009      	movs	r0, #9
 8000cd6:	f002 fd24 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f002 fd0a 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f002 fd1c 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	200b      	movs	r0, #11
 8000cf0:	f002 fd02 	bl	80036f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f002 fd14 	bl	8003722 <HAL_NVIC_EnableIRQ>

}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000

08000d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0e:	003b      	movs	r3, r7
 8000d10:	0018      	movs	r0, r3
 8000d12:	2318      	movs	r3, #24
 8000d14:	001a      	movs	r2, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	f009 fce4 	bl	800a6e4 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f7ff fbf1 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000d22:	2004      	movs	r0, #4
 8000d24:	f7ff fbee 	bl	8000504 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff fbeb 	bl	8000504 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4a8f      	ldr	r2, [pc, #572]	; (8000f70 <MX_GPIO_Init+0x268>)
 8000d34:	0019      	movs	r1, r3
 8000d36:	0010      	movs	r0, r2
 8000d38:	f7ff fbb6 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4a8c      	ldr	r2, [pc, #560]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d42:	0019      	movs	r1, r3
 8000d44:	0010      	movs	r0, r2
 8000d46:	f7ff fbaf 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	4a89      	ldr	r2, [pc, #548]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f7ff fba8 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d58:	23a0      	movs	r3, #160	; 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f7ff fba2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2180      	movs	r1, #128	; 0x80
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fb9c 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d70:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fb97 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_1_GPIO_Port, TEST_1_Pin);
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	011a      	lsls	r2, r3, #4
 8000d7e:	23a0      	movs	r3, #160	; 0xa0
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fb9b 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEST_2_GPIO_Port, TEST_2_Pin);
 8000d8a:	2380      	movs	r3, #128	; 0x80
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	23a0      	movs	r3, #160	; 0xa0
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff fb93 	bl	80004c0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d9a:	003b      	movs	r3, r7
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000da2:	003b      	movs	r3, r7
 8000da4:	2201      	movs	r2, #1
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	003b      	movs	r3, r7
 8000daa:	2203      	movs	r2, #3
 8000dac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dae:	003b      	movs	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db4:	003b      	movs	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000dba:	003b      	movs	r3, r7
 8000dbc:	4a6c      	ldr	r2, [pc, #432]	; (8000f70 <MX_GPIO_Init+0x268>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f009 f911 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	01d2      	lsls	r2, r2, #7
 8000dcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000de6:	003b      	movs	r3, r7
 8000de8:	4a62      	ldr	r2, [pc, #392]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000dea:	0019      	movs	r1, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f009 f8fb 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000df2:	003b      	movs	r3, r7
 8000df4:	2280      	movs	r2, #128	; 0x80
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e00:	003b      	movs	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e06:	003b      	movs	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	003b      	movs	r3, r7
 8000e14:	4a57      	ldr	r2, [pc, #348]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000e16:	0019      	movs	r1, r3
 8000e18:	0010      	movs	r0, r2
 8000e1a:	f009 f8e5 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000e1e:	003b      	movs	r3, r7
 8000e20:	2201      	movs	r2, #1
 8000e22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e24:	003b      	movs	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e2a:	003b      	movs	r3, r7
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000e30:	003a      	movs	r2, r7
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f009 f8d5 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2202      	movs	r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000e50:	003a      	movs	r2, r7
 8000e52:	23a0      	movs	r3, #160	; 0xa0
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f009 f8c5 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2210      	movs	r2, #16
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000e70:	003a      	movs	r2, r7
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f009 f8b5 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e7e:	003b      	movs	r3, r7
 8000e80:	2240      	movs	r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e84:	003b      	movs	r3, r7
 8000e86:	2201      	movs	r2, #1
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	003b      	movs	r3, r7
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e90:	003b      	movs	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e96:	003b      	movs	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	003a      	movs	r2, r7
 8000e9e:	23a0      	movs	r3, #160	; 0xa0
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	0011      	movs	r1, r2
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f009 f89f 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000eaa:	003b      	movs	r3, r7
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	003b      	movs	r3, r7
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	003b      	movs	r3, r7
 8000eb8:	2203      	movs	r2, #3
 8000eba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ebc:	003b      	movs	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec2:	003b      	movs	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	003a      	movs	r2, r7
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f009 f889 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	2240      	movs	r2, #64	; 0x40
 8000eda:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000edc:	003b      	movs	r3, r7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ee8:	003b      	movs	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eee:	003b      	movs	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ef4:	003b      	movs	r3, r7
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <MX_GPIO_Init+0x26c>)
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0010      	movs	r0, r2
 8000efc:	f009 f874 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_1_Pin;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f08:	003b      	movs	r3, r7
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	003b      	movs	r3, r7
 8000f10:	2203      	movs	r2, #3
 8000f12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f14:	003b      	movs	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f1a:	003b      	movs	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_1_GPIO_Port, &GPIO_InitStruct);
 8000f20:	003a      	movs	r2, r7
 8000f22:	23a0      	movs	r3, #160	; 0xa0
 8000f24:	05db      	lsls	r3, r3, #23
 8000f26:	0011      	movs	r1, r2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f009 f85d 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_2_Pin;
 8000f2e:	003b      	movs	r3, r7
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	0152      	lsls	r2, r2, #5
 8000f34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f36:	003b      	movs	r3, r7
 8000f38:	2201      	movs	r2, #1
 8000f3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	003b      	movs	r3, r7
 8000f3e:	2203      	movs	r2, #3
 8000f40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f42:	003b      	movs	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f48:	003b      	movs	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEST_2_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	003a      	movs	r2, r7
 8000f50:	23a0      	movs	r3, #160	; 0xa0
 8000f52:	05db      	lsls	r3, r3, #23
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f009 f846 	bl	8009fe8 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	031b      	lsls	r3, r3, #12
 8000f60:	0018      	movs	r0, r3
 8000f62:	f7ff fa91 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b006      	add	sp, #24
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	50000400 	.word	0x50000400
 8000f74:	50000800 	.word	0x50000800

08000f78 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <USART2_RX_Callback+0x60>)
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff fa74 	bl	800046c <LL_USART_ReceiveData9>
 8000f84:	0003      	movs	r3, r0
 8000f86:	001a      	movs	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000f8a:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <USART2_RX_Callback+0x60>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	05db      	lsls	r3, r3, #23
 8000f94:	0ddb      	lsrs	r3, r3, #23
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000f9a:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f9c:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <USART2_RX_Callback+0x68>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	2bff      	cmp	r3, #255	; 0xff
 8000fa8:	d90a      	bls.n	8000fc0 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <USART2_RX_Callback+0x6c>)
 8000fb2:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <USART2_RX_Callback+0x70>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <USART2_RX_Callback+0x74>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <USART2_RX_Callback+0x74>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d104      	bne.n	8000fd2 <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <USART2_RX_Callback+0x64>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 f87f 	bl	80010d0 <cmdReceive>
  }
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	200035da 	.word	0x200035da
 8000fe0:	20003160 	.word	0x20003160
 8000fe4:	200055e0 	.word	0x200055e0
 8000fe8:	20003162 	.word	0x20003162
 8000fec:	20003161 	.word	0x20003161

08000ff0 <HAL_SPI_RxHalfCpltCallback>:
//====================================================================================================================
void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  	GPIOA->ODR |= 1 << 11;	//set test 1
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2180      	movs	r1, #128	; 0x80
 8001004:	0109      	lsls	r1, r1, #4
 8001006:	430a      	orrs	r2, r1
 8001008:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 11);	//reset test 1
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	05db      	lsls	r3, r3, #23
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	23a0      	movs	r3, #160	; 0xa0
 8001012:	05db      	lsls	r3, r3, #23
 8001014:	490e      	ldr	r1, [pc, #56]	; (8001050 <HAL_SPI_RxHalfCpltCallback+0x60>)
 8001016:	400a      	ands	r2, r1
 8001018:	615a      	str	r2, [r3, #20]
  	GPIOA->ODR &= ~(1 << 6);	//reset cs
 800101a:	23a0      	movs	r3, #160	; 0xa0
 800101c:	05db      	lsls	r3, r3, #23
 800101e:	695a      	ldr	r2, [r3, #20]
 8001020:	23a0      	movs	r3, #160	; 0xa0
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	2140      	movs	r1, #64	; 0x40
 8001026:	438a      	bics	r2, r1
 8001028:	615a      	str	r2, [r3, #20]
  		GPIOA->ODR |= 1 << 7;	// reset dc
 800102a:	23a0      	movs	r3, #160	; 0xa0
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	430a      	orrs	r2, r1
 8001038:	615a      	str	r2, [r3, #20]
  		HAL_USART_Transmit_DMA(&husart3, MEM_Buffer,len);
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_SPI_RxHalfCpltCallback+0x64>)
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	4906      	ldr	r1, [pc, #24]	; (8001058 <HAL_SPI_RxHalfCpltCallback+0x68>)
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_SPI_RxHalfCpltCallback+0x6c>)
 8001042:	0018      	movs	r0, r3
 8001044:	f008 f8f0 	bl	8009228 <HAL_USART_Transmit_DMA>

}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	fffff7ff 	.word	0xfffff7ff
 8001054:	200035d8 	.word	0x200035d8
 8001058:	200035e0 	.word	0x200035e0
 800105c:	20003390 	.word	0x20003390

08001060 <HAL_SPI_RxCpltCallback>:
//==========================================================
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi2)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  	GPIOC->ODR |= 1 << 15; // set cs
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_SPI_RxCpltCallback+0x20>)
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_SPI_RxCpltCallback+0x20>)
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0209      	lsls	r1, r1, #8
 8001072:	430a      	orrs	r2, r1
 8001074:	615a      	str	r2, [r3, #20]
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b002      	add	sp, #8
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	50000800 	.word	0x50000800

08001084 <HAL_USART_TxCpltCallback>:
//==============================================================
void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart3)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	GPIOA->ODR &= ~(1 << 7);	//reset dc
 800108c:	23a0      	movs	r3, #160	; 0xa0
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	438a      	bics	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
	GPIOA->ODR |= 1 << 6;	//set cs
 800109c:	23a0      	movs	r3, #160	; 0xa0
 800109e:	05db      	lsls	r3, r3, #23
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	23a0      	movs	r3, #160	; 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]

	GPIOC->ODR |= 1 << 6;	//set BF
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_USART_TxCpltCallback+0x44>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_USART_TxCpltCallback+0x44>)
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	430a      	orrs	r2, r1
 80010b6:	615a      	str	r2, [r3, #20]
	cmd2Execute=0;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <HAL_USART_TxCpltCallback+0x48>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	50000800 	.word	0x50000800
 80010cc:	2000345a 	.word	0x2000345a

080010d0 <cmdReceive>:
//==============================================================
	void cmdReceive (uint16_t dt1)
	{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 80010dc:	230f      	movs	r3, #15
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <cmdReceive+0xc4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0fb      	beq.n	80010e6 <cmdReceive+0x16>
	  ByteReceived=0;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <cmdReceive+0xc4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <cmdReceive+0xc8>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	b2d9      	uxtb	r1, r3
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <cmdReceive+0xcc>)
 8001102:	5499      	strb	r1, [r3, r2]
	  ind++;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <cmdReceive+0xc8>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <cmdReceive+0xc8>)
 800110e:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <cmdReceive+0xc8>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d033      	beq.n	8001180 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <cmdReceive+0xc8>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	001a      	movs	r2, r3
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <cmdReceive+0xcc>)
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	3301      	adds	r3, #1
 8001124:	429a      	cmp	r2, r3
 8001126:	dd2b      	ble.n	8001180 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e00f      	b.n	8001152 <cmdReceive+0x82>
				 inputCS+=cmd[i];
 8001132:	210f      	movs	r1, #15
 8001134:	187b      	adds	r3, r7, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4a18      	ldr	r2, [pc, #96]	; (800119c <cmdReceive+0xcc>)
 800113a:	5cd2      	ldrb	r2, [r2, r3]
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <cmdReceive+0xd0>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <cmdReceive+0xd0>)
 8001146:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001148:	187b      	adds	r3, r7, r1
 800114a:	781a      	ldrb	r2, [r3, #0]
 800114c:	187b      	adds	r3, r7, r1
 800114e:	3201      	adds	r2, #1
 8001150:	701a      	strb	r2, [r3, #0]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <cmdReceive+0xcc>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	210f      	movs	r1, #15
 800115a:	187b      	adds	r3, r7, r1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	dae7      	bge.n	8001132 <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <cmdReceive+0xd0>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10a      	bne.n	8001180 <cmdReceive+0xb0>
 800116a:	187b      	adds	r3, r7, r1
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <cmdReceive+0xcc>)
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	3302      	adds	r3, #2
 8001174:	429a      	cmp	r2, r3
 8001176:	d103      	bne.n	8001180 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <cmdReceive+0xcc>)
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fa60 	bl	8001640 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <cmdReceive+0xd4>)
 8001182:	6a1a      	ldr	r2, [r3, #32]
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <cmdReceive+0xd4>)
 8001186:	2108      	movs	r1, #8
 8001188:	430a      	orrs	r2, r1
 800118a:	621a      	str	r2, [r3, #32]
	}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20003160 	.word	0x20003160
 8001198:	20003162 	.word	0x20003162
 800119c:	200055e0 	.word	0x200055e0
 80011a0:	20003164 	.word	0x20003164
 80011a4:	40004400 	.word	0x40004400

080011a8 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	0002      	movs	r2, r0
 80011b0:	1dfb      	adds	r3, r7, #7
 80011b2:	701a      	strb	r2, [r3, #0]
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
 80011b4:	1df9      	adds	r1, r7, #7
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <USART_AS_SPI_sendCMD+0x20>)
 80011b8:	230a      	movs	r3, #10
 80011ba:	2201      	movs	r2, #1
 80011bc:	f007 ff76 	bl	80090ac <HAL_USART_Transmit>
		}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20003390 	.word	0x20003390

080011cc <weoInit>:
	void USART_AS_SPI_sendDAT(uint8_t byte) //(Without CS and D/C)
	{
		HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 1);
	}
	void weoInit(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

		USART3->CR1 &= ~(USART_CR1_UE);
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <weoInit+0xd0>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b31      	ldr	r3, [pc, #196]	; (800129c <weoInit+0xd0>)
 80011d6:	2101      	movs	r1, #1
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
		USART3->CR2 |= USART_CR2_MSBFIRST;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <weoInit+0xd0>)
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4b2e      	ldr	r3, [pc, #184]	; (800129c <weoInit+0xd0>)
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0309      	lsls	r1, r1, #12
 80011e6:	430a      	orrs	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]
		USART3->CR1 |= USART_CR1_UE;
 80011ea:	4b2c      	ldr	r3, [pc, #176]	; (800129c <weoInit+0xd0>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <weoInit+0xd0>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	430a      	orrs	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

		HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f001 ff38 	bl	800306c <HAL_Delay>
		HAL_Delay(1);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f001 ff35 	bl	800306c <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001202:	4b27      	ldr	r3, [pc, #156]	; (80012a0 <weoInit+0xd4>)
 8001204:	2100      	movs	r1, #0
 8001206:	0018      	movs	r0, r3
 8001208:	f006 fe9c 	bl	8007f44 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f001 ff2d 	bl	800306c <HAL_Delay>

		GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	438a      	bics	r2, r1
 8001220:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001222:	23a0      	movs	r3, #160	; 0xa0
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	23a0      	movs	r3, #160	; 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	438a      	bics	r2, r1
 8001230:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 8001232:	20af      	movs	r0, #175	; 0xaf
 8001234:	f7ff ffb8 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001238:	20a0      	movs	r0, #160	; 0xa0
 800123a:	f7ff ffb5 	bl	80011a8 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 800123e:	2051      	movs	r0, #81	; 0x51
 8001240:	f7ff ffb2 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 8001244:	2081      	movs	r0, #129	; 0x81
 8001246:	f7ff ffaf 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 800124a:	20ff      	movs	r0, #255	; 0xff
 800124c:	f7ff ffac 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 8001250:	20a1      	movs	r0, #161	; 0xa1
 8001252:	f7ff ffa9 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001256:	2000      	movs	r0, #0
 8001258:	f7ff ffa6 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 800125c:	20a2      	movs	r0, #162	; 0xa2
 800125e:	f7ff ffa3 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ffa0 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001268:	20a8      	movs	r0, #168	; 0xa8
 800126a:	f7ff ff9d 	bl	80011a8 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 800126e:	207f      	movs	r0, #127	; 0x7f
 8001270:	f7ff ff9a 	bl	80011a8 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	430a      	orrs	r2, r1
 8001282:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	695a      	ldr	r2, [r3, #20]
 800128a:	23a0      	movs	r3, #160	; 0xa0
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	430a      	orrs	r2, r1
 8001292:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	40004800 	.word	0x40004800
 80012a0:	20003404 	.word	0x20003404

080012a4 <weoClear>:
	void weoClear(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
		uint16_t i = 0;
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012b0:	23a0      	movs	r3, #160	; 0xa0
 80012b2:	05db      	lsls	r3, r3, #23
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	23a0      	movs	r3, #160	; 0xa0
 80012b8:	05db      	lsls	r3, r3, #23
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	438a      	bics	r2, r1
 80012be:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80012c0:	23a0      	movs	r3, #160	; 0xa0
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	23a0      	movs	r3, #160	; 0xa0
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	438a      	bics	r2, r1
 80012ce:	615a      	str	r2, [r3, #20]
						USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80012d0:	2075      	movs	r0, #117	; 0x75
 80012d2:	f7ff ff69 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ff66 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80012dc:	207f      	movs	r0, #127	; 0x7f
 80012de:	f7ff ff63 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80012e2:	2015      	movs	r0, #21
 80012e4:	f7ff ff60 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff5d 	bl	80011a8 <USART_AS_SPI_sendCMD>
						USART_AS_SPI_sendCMD(0x7F);
 80012ee:	207f      	movs	r0, #127	; 0x7f
 80012f0:	f7ff ff5a 	bl	80011a8 <USART_AS_SPI_sendCMD>
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80012f4:	23a0      	movs	r3, #160	; 0xa0
 80012f6:	05db      	lsls	r3, r3, #23
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	23a0      	movs	r3, #160	; 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	2140      	movs	r1, #64	; 0x40
 8001300:	438a      	bics	r2, r1
 8001302:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001304:	23a0      	movs	r3, #160	; 0xa0
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	23a0      	movs	r3, #160	; 0xa0
 800130c:	05db      	lsls	r3, r3, #23
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
					for (i = 0; i < 8192;i++) {	//fullScreen + small reserve
 8001314:	1dbb      	adds	r3, r7, #6
 8001316:	2200      	movs	r2, #0
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	e00d      	b.n	8001338 <weoClear+0x94>
						while(!(USART3->ISR & USART_ISR_TXE)){};
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <weoClear+0xc8>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	4013      	ands	r3, r2
 8001326:	d0fa      	beq.n	800131e <weoClear+0x7a>
						USART3->TDR = 0x00;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <weoClear+0xc8>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i < 8192;i++) {	//fullScreen + small reserve
 800132e:	1dbb      	adds	r3, r7, #6
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	1dbb      	adds	r3, r7, #6
 8001334:	3201      	adds	r2, #1
 8001336:	801a      	strh	r2, [r3, #0]
 8001338:	1dbb      	adds	r3, r7, #6
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	019b      	lsls	r3, r3, #6
 8001340:	429a      	cmp	r2, r3
 8001342:	d3eb      	bcc.n	800131c <weoClear+0x78>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001344:	23a0      	movs	r3, #160	; 0xa0
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	2180      	movs	r1, #128	; 0x80
 8001350:	438a      	bics	r2, r1
 8001352:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001354:	23a0      	movs	r3, #160	; 0xa0
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	695a      	ldr	r2, [r3, #20]
 800135a:	23a0      	movs	r3, #160	; 0xa0
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	430a      	orrs	r2, r1
 8001362:	615a      	str	r2, [r3, #20]
	}
 8001364:	46c0      	nop			; (mov r8, r8)
 8001366:	46bd      	mov	sp, r7
 8001368:	b002      	add	sp, #8
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40004800 	.word	0x40004800

08001370 <weoDrawRectangleFilled>:
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	0005      	movs	r5, r0
 8001378:	000c      	movs	r4, r1
 800137a:	0010      	movs	r0, r2
 800137c:	0019      	movs	r1, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	1c2a      	adds	r2, r5, #0
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	1dbb      	adds	r3, r7, #6
 8001386:	1c22      	adds	r2, r4, #0
 8001388:	701a      	strb	r2, [r3, #0]
 800138a:	1d7b      	adds	r3, r7, #5
 800138c:	1c02      	adds	r2, r0, #0
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	1c0a      	adds	r2, r1, #0
 8001394:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001396:	240e      	movs	r4, #14
 8001398:	193b      	adds	r3, r7, r4
 800139a:	2200      	movs	r2, #0
 800139c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	da00      	bge.n	80013aa <weoDrawRectangleFilled+0x3a>
 80013a8:	e0bc      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
 80013aa:	1dbb      	adds	r3, r7, #6
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	da00      	bge.n	80013b6 <weoDrawRectangleFilled+0x46>
 80013b4:	e0b6      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80013b6:	1d7b      	adds	r3, r7, #5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da00      	bge.n	80013c2 <weoDrawRectangleFilled+0x52>
 80013c0:	e0b0      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	da00      	bge.n	80013ce <weoDrawRectangleFilled+0x5e>
 80013cc:	e0aa      	b.n	8001524 <weoDrawRectangleFilled+0x1b4>
				return;
			}


			start_x_New=start_x;
 80013ce:	250d      	movs	r5, #13
 80013d0:	197b      	adds	r3, r7, r5
 80013d2:	1dfa      	adds	r2, r7, #7
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 80013d8:	260c      	movs	r6, #12
 80013da:	19bb      	adds	r3, r7, r6
 80013dc:	1d3a      	adds	r2, r7, #4
 80013de:	7812      	ldrb	r2, [r2, #0]
 80013e0:	217f      	movs	r1, #127	; 0x7f
 80013e2:	1a8a      	subs	r2, r1, r2
 80013e4:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 80013e6:	230b      	movs	r3, #11
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	1d7a      	adds	r2, r7, #5
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80013f0:	220a      	movs	r2, #10
 80013f2:	18bb      	adds	r3, r7, r2
 80013f4:	1dba      	adds	r2, r7, #6
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	217f      	movs	r1, #127	; 0x7f
 80013fa:	1a8a      	subs	r2, r1, r2
 80013fc:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013fe:	23a0      	movs	r3, #160	; 0xa0
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	23a0      	movs	r3, #160	; 0xa0
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	2140      	movs	r1, #64	; 0x40
 800140a:	438a      	bics	r2, r1
 800140c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 800140e:	23a0      	movs	r3, #160	; 0xa0
 8001410:	05db      	lsls	r3, r3, #23
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	23a0      	movs	r3, #160	; 0xa0
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	438a      	bics	r2, r1
 800141c:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 800141e:	2075      	movs	r0, #117	; 0x75
 8001420:	f7ff fec2 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001424:	197b      	adds	r3, r7, r5
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff febd 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 800142e:	230b      	movs	r3, #11
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	0018      	movs	r0, r3
 8001436:	f7ff feb7 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800143a:	2015      	movs	r0, #21
 800143c:	f7ff feb4 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001440:	19bb      	adds	r3, r7, r6
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	085b      	lsrs	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fead 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 800144e:	220a      	movs	r2, #10
 8001450:	18bb      	adds	r3, r7, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fea5 	bl	80011a8 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	05db      	lsls	r3, r3, #23
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	430a      	orrs	r2, r1
 800146c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800146e:	23a0      	movs	r3, #160	; 0xa0
 8001470:	05db      	lsls	r3, r3, #23
 8001472:	695a      	ldr	r2, [r3, #20]
 8001474:	23a0      	movs	r3, #160	; 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	430a      	orrs	r2, r1
 800147c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 800147e:	23a0      	movs	r3, #160	; 0xa0
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	23a0      	movs	r3, #160	; 0xa0
 8001486:	05db      	lsls	r3, r3, #23
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	438a      	bics	r2, r1
 800148c:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 800148e:	23a0      	movs	r3, #160	; 0xa0
 8001490:	05db      	lsls	r3, r3, #23
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	05db      	lsls	r3, r3, #23
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	430a      	orrs	r2, r1
 800149c:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2200      	movs	r2, #0
 80014a2:	801a      	strh	r2, [r3, #0]
 80014a4:	e012      	b.n	80014cc <weoDrawRectangleFilled+0x15c>
				while(!(USART3->ISR & USART_ISR_TXE)){};
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <weoDrawRectangleFilled+0x1bc>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	4013      	ands	r3, r2
 80014b0:	d0fa      	beq.n	80014a8 <weoDrawRectangleFilled+0x138>
				USART3->TDR =MEM_Buffer[i];
 80014b2:	210e      	movs	r1, #14
 80014b4:	187b      	adds	r3, r7, r1
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <weoDrawRectangleFilled+0x1bc>)
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));i++) {
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	3201      	adds	r2, #1
 80014ca:	801a      	strh	r2, [r3, #0]
 80014cc:	230e      	movs	r3, #14
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	230b      	movs	r3, #11
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	7819      	ldrb	r1, [r3, #0]
 80014d8:	230d      	movs	r3, #13
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	1acb      	subs	r3, r1, r3
 80014e0:	3301      	adds	r3, #1
 80014e2:	210a      	movs	r1, #10
 80014e4:	1879      	adds	r1, r7, r1
 80014e6:	7809      	ldrb	r1, [r1, #0]
 80014e8:	0849      	lsrs	r1, r1, #1
 80014ea:	b2c9      	uxtb	r1, r1
 80014ec:	0008      	movs	r0, r1
 80014ee:	210c      	movs	r1, #12
 80014f0:	1879      	adds	r1, r7, r1
 80014f2:	7809      	ldrb	r1, [r1, #0]
 80014f4:	0849      	lsrs	r1, r1, #1
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	1a41      	subs	r1, r0, r1
 80014fa:	3101      	adds	r1, #1
 80014fc:	434b      	muls	r3, r1
 80014fe:	429a      	cmp	r2, r3
 8001500:	dbd1      	blt.n	80014a6 <weoDrawRectangleFilled+0x136>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001502:	23a0      	movs	r3, #160	; 0xa0
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	23a0      	movs	r3, #160	; 0xa0
 800150a:	05db      	lsls	r3, r3, #23
 800150c:	2180      	movs	r1, #128	; 0x80
 800150e:	438a      	bics	r2, r1
 8001510:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001512:	23a0      	movs	r3, #160	; 0xa0
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	23a0      	movs	r3, #160	; 0xa0
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	430a      	orrs	r2, r1
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	e000      	b.n	8001526 <weoDrawRectangleFilled+0x1b6>
				return;
 8001524:	46c0      	nop			; (mov r8, r8)
		}
 8001526:	46bd      	mov	sp, r7
 8001528:	b005      	add	sp, #20
 800152a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152c:	40004800 	.word	0x40004800

08001530 <weoDrawRectangleInit>:
//========================================================================================================================
	void weoDrawRectangleInit(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y) {
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	0005      	movs	r5, r0
 8001538:	000c      	movs	r4, r1
 800153a:	0010      	movs	r0, r2
 800153c:	0019      	movs	r1, r3
 800153e:	1dfb      	adds	r3, r7, #7
 8001540:	1c2a      	adds	r2, r5, #0
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	1dbb      	adds	r3, r7, #6
 8001546:	1c22      	adds	r2, r4, #0
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	1d7b      	adds	r3, r7, #5
 800154c:	1c02      	adds	r2, r0, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	1c0a      	adds	r2, r1, #0
 8001554:	701a      	strb	r2, [r3, #0]
			uint16_t i = 0;
 8001556:	230e      	movs	r3, #14
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	2200      	movs	r2, #0
 800155c:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b25b      	sxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	db66      	blt.n	8001636 <weoDrawRectangleInit+0x106>
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	db61      	blt.n	8001636 <weoDrawRectangleInit+0x106>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 8001572:	1d7b      	adds	r3, r7, #5
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	2b00      	cmp	r3, #0
 800157a:	db5c      	blt.n	8001636 <weoDrawRectangleInit+0x106>
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b25b      	sxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	db57      	blt.n	8001636 <weoDrawRectangleInit+0x106>
				return;
			}
			start_x_New=start_x;
 8001586:	240d      	movs	r4, #13
 8001588:	193b      	adds	r3, r7, r4
 800158a:	1dfa      	adds	r2, r7, #7
 800158c:	7812      	ldrb	r2, [r2, #0]
 800158e:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 8001590:	250c      	movs	r5, #12
 8001592:	197b      	adds	r3, r7, r5
 8001594:	1d3a      	adds	r2, r7, #4
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	217f      	movs	r1, #127	; 0x7f
 800159a:	1a8a      	subs	r2, r1, r2
 800159c:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800159e:	260b      	movs	r6, #11
 80015a0:	19bb      	adds	r3, r7, r6
 80015a2:	1d7a      	adds	r2, r7, #5
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 80015a8:	230a      	movs	r3, #10
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	1dba      	adds	r2, r7, #6
 80015ae:	7812      	ldrb	r2, [r2, #0]
 80015b0:	217f      	movs	r1, #127	; 0x7f
 80015b2:	1a8a      	subs	r2, r1, r2
 80015b4:	701a      	strb	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80015b6:	23a0      	movs	r3, #160	; 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	23a0      	movs	r3, #160	; 0xa0
 80015be:	05db      	lsls	r3, r3, #23
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	438a      	bics	r2, r1
 80015c4:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	695a      	ldr	r2, [r3, #20]
 80015cc:	23a0      	movs	r3, #160	; 0xa0
 80015ce:	05db      	lsls	r3, r3, #23
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	438a      	bics	r2, r1
 80015d4:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80015d6:	2075      	movs	r0, #117	; 0x75
 80015d8:	f7ff fde6 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 80015dc:	193b      	adds	r3, r7, r4
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff fde1 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 80015e6:	19bb      	adds	r3, r7, r6
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7ff fddc 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80015f0:	2015      	movs	r0, #21
 80015f2:	f7ff fdd9 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 80015f6:	197b      	adds	r3, r7, r5
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff fdd2 	bl	80011a8 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001604:	230a      	movs	r3, #10
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	0018      	movs	r0, r3
 8001610:	f7ff fdca 	bl	80011a8 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001614:	23a0      	movs	r3, #160	; 0xa0
 8001616:	05db      	lsls	r3, r3, #23
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	23a0      	movs	r3, #160	; 0xa0
 800161c:	05db      	lsls	r3, r3, #23
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	430a      	orrs	r2, r1
 8001622:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 8001624:	23a0      	movs	r3, #160	; 0xa0
 8001626:	05db      	lsls	r3, r3, #23
 8001628:	695a      	ldr	r2, [r3, #20]
 800162a:	23a0      	movs	r3, #160	; 0xa0
 800162c:	05db      	lsls	r3, r3, #23
 800162e:	2140      	movs	r1, #64	; 0x40
 8001630:	430a      	orrs	r2, r1
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	e000      	b.n	8001638 <weoDrawRectangleInit+0x108>
				return;
 8001636:	46c0      	nop			; (mov r8, r8)
		}
 8001638:	46bd      	mov	sp, r7
 800163a:	b005      	add	sp, #20
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001640 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 8001648:	230f      	movs	r3, #15
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	22ff      	movs	r2, #255	; 0xff
 800164e:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 8001650:	230d      	movs	r3, #13
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 8001658:	230a      	movs	r3, #10
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 8001660:	4bd1      	ldr	r3, [pc, #836]	; (80019a8 <answer2CPU+0x368>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
		if ((cmd[0] == 0x11)||(cmd[0] == 0x12)||(cmd[0] == 0x14)) {GPIOC->ODR &= ~(1 << 6);}//reset BF
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b11      	cmp	r3, #17
 800166c:	d007      	beq.n	800167e <answer2CPU+0x3e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b12      	cmp	r3, #18
 8001674:	d003      	beq.n	800167e <answer2CPU+0x3e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b14      	cmp	r3, #20
 800167c:	d105      	bne.n	800168a <answer2CPU+0x4a>
 800167e:	4bcb      	ldr	r3, [pc, #812]	; (80019ac <answer2CPU+0x36c>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	4bca      	ldr	r3, [pc, #808]	; (80019ac <answer2CPU+0x36c>)
 8001684:	2140      	movs	r1, #64	; 0x40
 8001686:	438a      	bics	r2, r1
 8001688:	615a      	str	r2, [r3, #20]
		ans[0] = cmd[0]|0x80;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	4252      	negs	r2, r2
 8001692:	4313      	orrs	r3, r2
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b29a      	uxth	r2, r3
 8001698:	4bc5      	ldr	r3, [pc, #788]	; (80019b0 <answer2CPU+0x370>)
 800169a:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d800      	bhi.n	80016a6 <answer2CPU+0x66>
 80016a4:	e150      	b.n	8001948 <answer2CPU+0x308>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b15      	cmp	r3, #21
 80016ac:	d900      	bls.n	80016b0 <answer2CPU+0x70>
 80016ae:	e14b      	b.n	8001948 <answer2CPU+0x308>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 80016b0:	23a0      	movs	r3, #160	; 0xa0
 80016b2:	05db      	lsls	r3, r3, #23
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2201      	movs	r2, #1
 80016b8:	4013      	ands	r3, r2
 80016ba:	d106      	bne.n	80016ca <answer2CPU+0x8a>
					keyboard &= 0b11111110;
 80016bc:	220f      	movs	r2, #15
 80016be:	18bb      	adds	r3, r7, r2
 80016c0:	18ba      	adds	r2, r7, r2
 80016c2:	7812      	ldrb	r2, [r2, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	438a      	bics	r2, r1
 80016c8:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 80016ca:	23a0      	movs	r3, #160	; 0xa0
 80016cc:	05db      	lsls	r3, r3, #23
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2202      	movs	r2, #2
 80016d2:	4013      	ands	r3, r2
 80016d4:	d106      	bne.n	80016e4 <answer2CPU+0xa4>
					keyboard &= 0b11111101;
 80016d6:	220f      	movs	r2, #15
 80016d8:	18bb      	adds	r3, r7, r2
 80016da:	18ba      	adds	r2, r7, r2
 80016dc:	7812      	ldrb	r2, [r2, #0]
 80016de:	2102      	movs	r1, #2
 80016e0:	438a      	bics	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 80016e4:	23a0      	movs	r3, #160	; 0xa0
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2210      	movs	r2, #16
 80016ec:	4013      	ands	r3, r2
 80016ee:	d106      	bne.n	80016fe <answer2CPU+0xbe>
					keyboard &= 0b11111011;
 80016f0:	220f      	movs	r2, #15
 80016f2:	18bb      	adds	r3, r7, r2
 80016f4:	18ba      	adds	r2, r7, r2
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	2104      	movs	r1, #4
 80016fa:	438a      	bics	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 80016fe:	23a0      	movs	r3, #160	; 0xa0
 8001700:	05db      	lsls	r3, r3, #23
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	019b      	lsls	r3, r3, #6
 8001708:	4013      	ands	r3, r2
 800170a:	d106      	bne.n	800171a <answer2CPU+0xda>
					keyboard &= 0b11110111;
 800170c:	220f      	movs	r2, #15
 800170e:	18bb      	adds	r3, r7, r2
 8001710:	18ba      	adds	r2, r7, r2
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	2108      	movs	r1, #8
 8001716:	438a      	bics	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 800171a:	23a0      	movs	r3, #160	; 0xa0
 800171c:	05db      	lsls	r3, r3, #23
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	4013      	ands	r3, r2
 8001726:	d106      	bne.n	8001736 <answer2CPU+0xf6>
					keyboard &= 0b11101111;
 8001728:	220f      	movs	r2, #15
 800172a:	18bb      	adds	r3, r7, r2
 800172c:	18ba      	adds	r2, r7, r2
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	2110      	movs	r1, #16
 8001732:	438a      	bics	r2, r1
 8001734:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001736:	210f      	movs	r1, #15
 8001738:	187b      	adds	r3, r7, r1
 800173a:	187a      	adds	r2, r7, r1
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	43d2      	mvns	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001742:	2009      	movs	r0, #9
 8001744:	183b      	adds	r3, r7, r0
 8001746:	2204      	movs	r2, #4
 8001748:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800174a:	183b      	adds	r3, r7, r0
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	3b02      	subs	r3, #2
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b96      	ldr	r3, [pc, #600]	; (80019b0 <answer2CPU+0x370>)
 8001756:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 8001758:	187b      	adds	r3, r7, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	4b94      	ldr	r3, [pc, #592]	; (80019b0 <answer2CPU+0x370>)
 8001760:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 8001762:	230e      	movs	r3, #14
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e011      	b.n	8001790 <answer2CPU+0x150>
					myCS = myCS + ans[i];
 800176c:	200e      	movs	r0, #14
 800176e:	183b      	adds	r3, r7, r0
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <answer2CPU+0x370>)
 8001774:	0052      	lsls	r2, r2, #1
 8001776:	5ad3      	ldrh	r3, [r2, r3]
 8001778:	b2d9      	uxtb	r1, r3
 800177a:	220d      	movs	r2, #13
 800177c:	18bb      	adds	r3, r7, r2
 800177e:	18ba      	adds	r2, r7, r2
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	188a      	adds	r2, r1, r2
 8001784:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001786:	183b      	adds	r3, r7, r0
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	183b      	adds	r3, r7, r0
 800178c:	3201      	adds	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	200e      	movs	r0, #14
 8001792:	183b      	adds	r3, r7, r0
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	2309      	movs	r3, #9
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbe4      	blt.n	800176c <answer2CPU+0x12c>
				}
				myCS = 0 - myCS;
 80017a2:	210d      	movs	r1, #13
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	187a      	adds	r2, r7, r1
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	4252      	negs	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b7e      	ldr	r3, [pc, #504]	; (80019b0 <answer2CPU+0x370>)
 80017b6:	80da      	strh	r2, [r3, #6]
				i=0;
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <answer2CPU+0x374>)
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0fa      	beq.n	80017c0 <answer2CPU+0x180>
				USART2->TDR = ans[0]|0x0100;
 80017ca:	4b79      	ldr	r3, [pc, #484]	; (80019b0 <answer2CPU+0x370>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	2280      	movs	r2, #128	; 0x80
 80017d0:	0052      	lsls	r2, r2, #1
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b77      	ldr	r3, [pc, #476]	; (80019b4 <answer2CPU+0x374>)
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 80017da:	230e      	movs	r3, #14
 80017dc:	18fb      	adds	r3, r7, r3
 80017de:	2201      	movs	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	e013      	b.n	800180c <answer2CPU+0x1cc>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <answer2CPU+0x374>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0fa      	beq.n	80017e6 <answer2CPU+0x1a6>
				    USART2->TDR = (uint8_t)ans[i];
 80017f0:	210e      	movs	r1, #14
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <answer2CPU+0x370>)
 80017f8:	0052      	lsls	r2, r2, #1
 80017fa:	5ad3      	ldrh	r3, [r2, r3]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <answer2CPU+0x374>)
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001802:	187b      	adds	r3, r7, r1
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	187b      	adds	r3, r7, r1
 8001808:	3201      	adds	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	230e      	movs	r3, #14
 800180e:	18fa      	adds	r2, r7, r3
 8001810:	2309      	movs	r3, #9
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3e3      	bcc.n	80017e4 <answer2CPU+0x1a4>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {//Show full screen background;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b11      	cmp	r3, #17
 8001822:	d109      	bne.n	8001838 <answer2CPU+0x1f8>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					picNum = cmd[2];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	789a      	ldrb	r2, [r3, #2]
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <answer2CPU+0x378>)
 800182a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 800182c:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <answer2CPU+0x368>)
 800182e:	2211      	movs	r2, #17
 8001830:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001832:	4b62      	ldr	r3, [pc, #392]	; (80019bc <answer2CPU+0x37c>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b12      	cmp	r3, #18
 800183e:	d115      	bne.n	800186c <answer2CPU+0x22c>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	001a      	movs	r2, r3
 8001848:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <answer2CPU+0x380>)
 800184a:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3303      	adds	r3, #3
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	001a      	movs	r2, r3
 8001854:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <answer2CPU+0x384>)
 8001856:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	791a      	ldrb	r2, [r3, #4]
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <answer2CPU+0x378>)
 800185e:	701a      	strb	r2, [r3, #0]
//					weoShowSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <answer2CPU+0x368>)
 8001862:	2212      	movs	r2, #18
 8001864:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001866:	4b55      	ldr	r3, [pc, #340]	; (80019bc <answer2CPU+0x37c>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b13      	cmp	r3, #19
 8001872:	d134      	bne.n	80018de <answer2CPU+0x29e>
//					GPIOC->ODR &= ~(1 << 6);//reset BF
					imX = cmd[2];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3302      	adds	r3, #2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	001a      	movs	r2, r3
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <answer2CPU+0x380>)
 800187e:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3303      	adds	r3, #3
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	001a      	movs	r2, r3
 8001888:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <answer2CPU+0x384>)
 800188a:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3301      	adds	r3, #1
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	3b03      	subs	r3, #3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <answer2CPU+0x388>)
 8001898:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 800189a:	230e      	movs	r3, #14
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e00f      	b.n	80018c4 <answer2CPU+0x284>
					dataASCII[i] = cmd[i+4];
 80018a4:	200e      	movs	r0, #14
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	18d2      	adds	r2, r2, r3
 80018b0:	183b      	adds	r3, r7, r0
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	7811      	ldrb	r1, [r2, #0]
 80018b6:	4a45      	ldr	r2, [pc, #276]	; (80019cc <answer2CPU+0x38c>)
 80018b8:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 80018ba:	183b      	adds	r3, r7, r0
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	3201      	adds	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <answer2CPU+0x388>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	220e      	movs	r2, #14
 80018ca:	18ba      	adds	r2, r7, r2
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d3e8      	bcc.n	80018a4 <answer2CPU+0x264>
				}
					cmd2Execute=0x13;
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <answer2CPU+0x368>)
 80018d4:	2213      	movs	r2, #19
 80018d6:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <answer2CPU+0x37c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b14      	cmp	r3, #20
 80018e4:	d10c      	bne.n	8001900 <answer2CPU+0x2c0>
					numSound = cmd[3];
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	78da      	ldrb	r2, [r3, #3]
 80018ea:	4b39      	ldr	r3, [pc, #228]	; (80019d0 <answer2CPU+0x390>)
 80018ec:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <answer2CPU+0x368>)
 80018f0:	2214      	movs	r2, #20
 80018f2:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	22ff      	movs	r2, #255	; 0xff
 80018f8:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 80018fa:	4b30      	ldr	r3, [pc, #192]	; (80019bc <answer2CPU+0x37c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b15      	cmp	r3, #21
 8001906:	d10d      	bne.n	8001924 <answer2CPU+0x2e4>
					volume = cmd[2];
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	789a      	ldrb	r2, [r3, #2]
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <answer2CPU+0x394>)
 800190e:	701a      	strb	r2, [r3, #0]
					contrast = cmd[3];
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	78da      	ldrb	r2, [r3, #3]
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <answer2CPU+0x398>)
 8001916:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <answer2CPU+0x368>)
 800191a:	2215      	movs	r2, #21
 800191c:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <answer2CPU+0x37c>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b16      	cmp	r3, #22
 800192a:	d10d      	bne.n	8001948 <answer2CPU+0x308>
					volume = cmd[3];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	78da      	ldrb	r2, [r3, #3]
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <answer2CPU+0x394>)
 8001932:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	791a      	ldrb	r2, [r3, #4]
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <answer2CPU+0x398>)
 800193a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <answer2CPU+0x368>)
 800193e:	2216      	movs	r2, #22
 8001940:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001942:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <answer2CPU+0x37c>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d000      	beq.n	8001952 <answer2CPU+0x312>
 8001950:	e09c      	b.n	8001a8c <answer2CPU+0x44c>
				myLength = 0x14; //20 bytes length answer
 8001952:	2109      	movs	r1, #9
 8001954:	187b      	adds	r3, r7, r1
 8001956:	2214      	movs	r2, #20
 8001958:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 800195a:	187b      	adds	r3, r7, r1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b02      	subs	r3, #2
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <answer2CPU+0x370>)
 8001966:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001968:	230e      	movs	r3, #14
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e010      	b.n	8001994 <answer2CPU+0x354>
					ans[i + 2] = PCB_type[i];
 8001972:	200e      	movs	r0, #14
 8001974:	183b      	adds	r3, r7, r0
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4a18      	ldr	r2, [pc, #96]	; (80019dc <answer2CPU+0x39c>)
 800197a:	5cd1      	ldrb	r1, [r2, r3]
 800197c:	183b      	adds	r3, r7, r0
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	1c9a      	adds	r2, r3, #2
 8001982:	b289      	uxth	r1, r1
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <answer2CPU+0x370>)
 8001986:	0052      	lsls	r2, r2, #1
 8001988:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 800198a:	183b      	adds	r3, r7, r0
 800198c:	781a      	ldrb	r2, [r3, #0]
 800198e:	183b      	adds	r3, r7, r0
 8001990:	3201      	adds	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	220e      	movs	r2, #14
 8001996:	18bb      	adds	r3, r7, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d9e9      	bls.n	8001972 <answer2CPU+0x332>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 800199e:	18bb      	adds	r3, r7, r2
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e02e      	b.n	8001a04 <answer2CPU+0x3c4>
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	2000345a 	.word	0x2000345a
 80019ac:	50000800 	.word	0x50000800
 80019b0:	2000349c 	.word	0x2000349c
 80019b4:	40004400 	.word	0x40004400
 80019b8:	20003459 	.word	0x20003459
 80019bc:	200034b0 	.word	0x200034b0
 80019c0:	200032f0 	.word	0x200032f0
 80019c4:	20003384 	.word	0x20003384
 80019c8:	20003499 	.word	0x20003499
 80019cc:	200031a0 	.word	0x200031a0
 80019d0:	20003519 	.word	0x20003519
 80019d4:	200032ed 	.word	0x200032ed
 80019d8:	200033f0 	.word	0x200033f0
 80019dc:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 80019e0:	200e      	movs	r0, #14
 80019e2:	183b      	adds	r3, r7, r0
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	4bdb      	ldr	r3, [pc, #876]	; (8001d54 <answer2CPU+0x714>)
 80019e8:	0052      	lsls	r2, r2, #1
 80019ea:	5ad3      	ldrh	r3, [r2, r3]
 80019ec:	b2d9      	uxtb	r1, r3
 80019ee:	220d      	movs	r2, #13
 80019f0:	18bb      	adds	r3, r7, r2
 80019f2:	18ba      	adds	r2, r7, r2
 80019f4:	7812      	ldrb	r2, [r2, #0]
 80019f6:	188a      	adds	r2, r1, r2
 80019f8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80019fa:	183b      	adds	r3, r7, r0
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	183b      	adds	r3, r7, r0
 8001a00:	3201      	adds	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	230e      	movs	r3, #14
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	2009      	movs	r0, #9
 8001a0c:	183b      	adds	r3, r7, r0
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbe4      	blt.n	80019e0 <answer2CPU+0x3a0>
				}
				myCS = 0 - myCS;
 8001a16:	210d      	movs	r1, #13
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	187a      	adds	r2, r7, r1
 8001a1c:	7812      	ldrb	r2, [r2, #0]
 8001a1e:	4252      	negs	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b299      	uxth	r1, r3
 8001a2e:	4bc9      	ldr	r3, [pc, #804]	; (8001d54 <answer2CPU+0x714>)
 8001a30:	0052      	lsls	r2, r2, #1
 8001a32:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	4bc8      	ldr	r3, [pc, #800]	; (8001d58 <answer2CPU+0x718>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d0fa      	beq.n	8001a36 <answer2CPU+0x3f6>
				USART2->TDR = ans[0]|0x0100;
 8001a40:	4bc4      	ldr	r3, [pc, #784]	; (8001d54 <answer2CPU+0x714>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	0052      	lsls	r2, r2, #1
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	4bc2      	ldr	r3, [pc, #776]	; (8001d58 <answer2CPU+0x718>)
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a50:	e014      	b.n	8001a7c <answer2CPU+0x43c>
				  {
				    i++;
 8001a52:	210e      	movs	r1, #14
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	3201      	adds	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	4bbd      	ldr	r3, [pc, #756]	; (8001d58 <answer2CPU+0x718>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	4013      	ands	r3, r2
 8001a68:	d0fa      	beq.n	8001a60 <answer2CPU+0x420>
				    USART2->TDR = (uint8_t)ans[i];
 8001a6a:	230e      	movs	r3, #14
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	781a      	ldrb	r2, [r3, #0]
 8001a70:	4bb8      	ldr	r3, [pc, #736]	; (8001d54 <answer2CPU+0x714>)
 8001a72:	0052      	lsls	r2, r2, #1
 8001a74:	5ad3      	ldrh	r3, [r2, r3]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4bb7      	ldr	r3, [pc, #732]	; (8001d58 <answer2CPU+0x718>)
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001a7c:	230e      	movs	r3, #14
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781a      	ldrb	r2, [r3, #0]
 8001a82:	4bb4      	ldr	r3, [pc, #720]	; (8001d54 <answer2CPU+0x714>)
 8001a84:	0052      	lsls	r2, r2, #1
 8001a86:	5ad3      	ldrh	r3, [r2, r3]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e2      	bne.n	8001a52 <answer2CPU+0x412>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d000      	beq.n	8001a96 <answer2CPU+0x456>
 8001a94:	e07f      	b.n	8001b96 <answer2CPU+0x556>
				myLength = 0x0B; //19 bytes length answer
 8001a96:	2109      	movs	r1, #9
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	220b      	movs	r2, #11
 8001a9c:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b02      	subs	r3, #2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4baa      	ldr	r3, [pc, #680]	; (8001d54 <answer2CPU+0x714>)
 8001aaa:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001aac:	230e      	movs	r3, #14
 8001aae:	18fb      	adds	r3, r7, r3
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e010      	b.n	8001ad8 <answer2CPU+0x498>
					ans[i + 2] = PCB_rev[i];
 8001ab6:	200e      	movs	r0, #14
 8001ab8:	183b      	adds	r3, r7, r0
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4aa7      	ldr	r2, [pc, #668]	; (8001d5c <answer2CPU+0x71c>)
 8001abe:	5cd1      	ldrb	r1, [r2, r3]
 8001ac0:	183b      	adds	r3, r7, r0
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	1c9a      	adds	r2, r3, #2
 8001ac6:	b289      	uxth	r1, r1
 8001ac8:	4ba2      	ldr	r3, [pc, #648]	; (8001d54 <answer2CPU+0x714>)
 8001aca:	0052      	lsls	r2, r2, #1
 8001acc:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	3201      	adds	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	220e      	movs	r2, #14
 8001ada:	18bb      	adds	r3, r7, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d9e9      	bls.n	8001ab6 <answer2CPU+0x476>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001ae2:	18bb      	adds	r3, r7, r2
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e011      	b.n	8001b0e <answer2CPU+0x4ce>
					myCS = myCS + ans[i];
 8001aea:	200e      	movs	r0, #14
 8001aec:	183b      	adds	r3, r7, r0
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b98      	ldr	r3, [pc, #608]	; (8001d54 <answer2CPU+0x714>)
 8001af2:	0052      	lsls	r2, r2, #1
 8001af4:	5ad3      	ldrh	r3, [r2, r3]
 8001af6:	b2d9      	uxtb	r1, r3
 8001af8:	220d      	movs	r2, #13
 8001afa:	18bb      	adds	r3, r7, r2
 8001afc:	18ba      	adds	r2, r7, r2
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	188a      	adds	r2, r1, r2
 8001b02:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 8001b04:	183b      	adds	r3, r7, r0
 8001b06:	781a      	ldrb	r2, [r3, #0]
 8001b08:	183b      	adds	r3, r7, r0
 8001b0a:	3201      	adds	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	230e      	movs	r3, #14
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	2009      	movs	r0, #9
 8001b16:	183b      	adds	r3, r7, r0
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbe4      	blt.n	8001aea <answer2CPU+0x4aa>
				}
				myCS = 0 - myCS;
 8001b20:	210d      	movs	r1, #13
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	187a      	adds	r2, r7, r1
 8001b26:	7812      	ldrb	r2, [r2, #0]
 8001b28:	4252      	negs	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b2c:	183b      	adds	r3, r7, r0
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b299      	uxth	r1, r3
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <answer2CPU+0x714>)
 8001b3a:	0052      	lsls	r2, r2, #1
 8001b3c:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	4b85      	ldr	r3, [pc, #532]	; (8001d58 <answer2CPU+0x718>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	4013      	ands	r3, r2
 8001b48:	d0fa      	beq.n	8001b40 <answer2CPU+0x500>
				USART2->TDR = ans[0]|0x0100;
 8001b4a:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <answer2CPU+0x714>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	0052      	lsls	r2, r2, #1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b80      	ldr	r3, [pc, #512]	; (8001d58 <answer2CPU+0x718>)
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b5a:	e014      	b.n	8001b86 <answer2CPU+0x546>
					  {
					    i++;
 8001b5c:	210e      	movs	r1, #14
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	781a      	ldrb	r2, [r3, #0]
 8001b62:	187b      	adds	r3, r7, r1
 8001b64:	3201      	adds	r2, #1
 8001b66:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <answer2CPU+0x718>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	2280      	movs	r2, #128	; 0x80
 8001b70:	4013      	ands	r3, r2
 8001b72:	d0fa      	beq.n	8001b6a <answer2CPU+0x52a>
					    USART2->TDR = (uint8_t)ans[i];
 8001b74:	230e      	movs	r3, #14
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	4b76      	ldr	r3, [pc, #472]	; (8001d54 <answer2CPU+0x714>)
 8001b7c:	0052      	lsls	r2, r2, #1
 8001b7e:	5ad3      	ldrh	r3, [r2, r3]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b75      	ldr	r3, [pc, #468]	; (8001d58 <answer2CPU+0x718>)
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001b86:	230e      	movs	r3, #14
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <answer2CPU+0x714>)
 8001b8e:	0052      	lsls	r2, r2, #1
 8001b90:	5ad3      	ldrh	r3, [r2, r3]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1e2      	bne.n	8001b5c <answer2CPU+0x51c>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d000      	beq.n	8001ba0 <answer2CPU+0x560>
 8001b9e:	e07f      	b.n	8001ca0 <answer2CPU+0x660>
				myLength = 0x13; //19 bytes length answer
 8001ba0:	2109      	movs	r1, #9
 8001ba2:	187b      	adds	r3, r7, r1
 8001ba4:	2213      	movs	r2, #19
 8001ba6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001ba8:	187b      	adds	r3, r7, r1
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b02      	subs	r3, #2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <answer2CPU+0x714>)
 8001bb4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 8001bb6:	230e      	movs	r3, #14
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e010      	b.n	8001be2 <answer2CPU+0x5a2>
					ans[i + 2] = EmitterSN[i];
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	183b      	adds	r3, r7, r0
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <answer2CPU+0x720>)
 8001bc8:	5cd1      	ldrb	r1, [r2, r3]
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	1c9a      	adds	r2, r3, #2
 8001bd0:	b289      	uxth	r1, r1
 8001bd2:	4b60      	ldr	r3, [pc, #384]	; (8001d54 <answer2CPU+0x714>)
 8001bd4:	0052      	lsls	r2, r2, #1
 8001bd6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	183b      	adds	r3, r7, r0
 8001bde:	3201      	adds	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	220e      	movs	r2, #14
 8001be4:	18bb      	adds	r3, r7, r2
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d9e9      	bls.n	8001bc0 <answer2CPU+0x580>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001bec:	18bb      	adds	r3, r7, r2
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	e011      	b.n	8001c18 <answer2CPU+0x5d8>
					myCS = myCS + ans[i];
 8001bf4:	200e      	movs	r0, #14
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <answer2CPU+0x714>)
 8001bfc:	0052      	lsls	r2, r2, #1
 8001bfe:	5ad3      	ldrh	r3, [r2, r3]
 8001c00:	b2d9      	uxtb	r1, r3
 8001c02:	220d      	movs	r2, #13
 8001c04:	18bb      	adds	r3, r7, r2
 8001c06:	18ba      	adds	r2, r7, r2
 8001c08:	7812      	ldrb	r2, [r2, #0]
 8001c0a:	188a      	adds	r2, r1, r2
 8001c0c:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001c0e:	183b      	adds	r3, r7, r0
 8001c10:	781a      	ldrb	r2, [r3, #0]
 8001c12:	183b      	adds	r3, r7, r0
 8001c14:	3201      	adds	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	230e      	movs	r3, #14
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	2009      	movs	r0, #9
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbe4      	blt.n	8001bf4 <answer2CPU+0x5b4>
				}
				myCS = 0 - myCS;
 8001c2a:	210d      	movs	r1, #13
 8001c2c:	187b      	adds	r3, r7, r1
 8001c2e:	187a      	adds	r2, r7, r1
 8001c30:	7812      	ldrb	r2, [r2, #0]
 8001c32:	4252      	negs	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	1e5a      	subs	r2, r3, #1
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b299      	uxth	r1, r3
 8001c42:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <answer2CPU+0x714>)
 8001c44:	0052      	lsls	r2, r2, #1
 8001c46:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <answer2CPU+0x718>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2280      	movs	r2, #128	; 0x80
 8001c50:	4013      	ands	r3, r2
 8001c52:	d0fa      	beq.n	8001c4a <answer2CPU+0x60a>
				USART2->TDR = ans[0]|0x0100;
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <answer2CPU+0x714>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	0052      	lsls	r2, r2, #1
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <answer2CPU+0x718>)
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c64:	e014      	b.n	8001c90 <answer2CPU+0x650>
				  {
				    i++;
 8001c66:	210e      	movs	r1, #14
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	3201      	adds	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <answer2CPU+0x718>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d0fa      	beq.n	8001c74 <answer2CPU+0x634>
				    	USART2->TDR = (uint8_t)ans[i];
 8001c7e:	230e      	movs	r3, #14
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <answer2CPU+0x714>)
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	5ad3      	ldrh	r3, [r2, r3]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <answer2CPU+0x718>)
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001c90:	230e      	movs	r3, #14
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <answer2CPU+0x714>)
 8001c98:	0052      	lsls	r2, r2, #1
 8001c9a:	5ad3      	ldrh	r3, [r2, r3]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e2      	bne.n	8001c66 <answer2CPU+0x626>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d000      	beq.n	8001caa <answer2CPU+0x66a>
 8001ca8:	e07b      	b.n	8001da2 <answer2CPU+0x762>
				myLength = 0x04; //4 bytes length answer
 8001caa:	2109      	movs	r1, #9
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2204      	movs	r2, #4
 8001cb0:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b02      	subs	r3, #2
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <answer2CPU+0x714>)
 8001cbe:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <answer2CPU+0x724>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <answer2CPU+0x714>)
 8001cc8:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001cca:	230d      	movs	r3, #13
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <answer2CPU+0x714>)
 8001cd4:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001cd6:	230e      	movs	r3, #14
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e011      	b.n	8001d04 <answer2CPU+0x6c4>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001ce0:	200e      	movs	r0, #14
 8001ce2:	183b      	adds	r3, r7, r0
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <answer2CPU+0x714>)
 8001ce8:	0052      	lsls	r2, r2, #1
 8001cea:	5ad3      	ldrh	r3, [r2, r3]
 8001cec:	b2d9      	uxtb	r1, r3
 8001cee:	220d      	movs	r2, #13
 8001cf0:	18bb      	adds	r3, r7, r2
 8001cf2:	18ba      	adds	r2, r7, r2
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	188a      	adds	r2, r1, r2
 8001cf8:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001cfa:	183b      	adds	r3, r7, r0
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	183b      	adds	r3, r7, r0
 8001d00:	3201      	adds	r2, #1
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	230e      	movs	r3, #14
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	2009      	movs	r0, #9
 8001d0c:	183b      	adds	r3, r7, r0
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	429a      	cmp	r2, r3
 8001d14:	dbe4      	blt.n	8001ce0 <answer2CPU+0x6a0>
				}
				myCS = 0 - myCS;
 8001d16:	210d      	movs	r1, #13
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	187a      	adds	r2, r7, r1
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	4252      	negs	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	1e5a      	subs	r2, r3, #1
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b299      	uxth	r1, r3
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <answer2CPU+0x714>)
 8001d30:	0052      	lsls	r2, r2, #1
 8001d32:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <answer2CPU+0x718>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2280      	movs	r2, #128	; 0x80
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0fa      	beq.n	8001d36 <answer2CPU+0x6f6>
					USART2->TDR = ans[0]|0x0100;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <answer2CPU+0x714>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	0052      	lsls	r2, r2, #1
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4b02      	ldr	r3, [pc, #8]	; (8001d58 <answer2CPU+0x718>)
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d50:	e01f      	b.n	8001d92 <answer2CPU+0x752>
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	2000349c 	.word	0x2000349c
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	20003114 	.word	0x20003114
 8001d60:	20003120 	.word	0x20003120
 8001d64:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001d68:	210e      	movs	r1, #14
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	3201      	adds	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <answer2CPU+0x870>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2280      	movs	r2, #128	; 0x80
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d0fa      	beq.n	8001d76 <answer2CPU+0x736>
						     USART2->TDR = (uint8_t)ans[i];
 8001d80:	230e      	movs	r3, #14
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <answer2CPU+0x874>)
 8001d88:	0052      	lsls	r2, r2, #1
 8001d8a:	5ad3      	ldrh	r3, [r2, r3]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <answer2CPU+0x870>)
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001d92:	230e      	movs	r3, #14
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <answer2CPU+0x874>)
 8001d9a:	0052      	lsls	r2, r2, #1
 8001d9c:	5ad3      	ldrh	r3, [r2, r3]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e2      	bne.n	8001d68 <answer2CPU+0x728>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d000      	beq.n	8001dac <answer2CPU+0x76c>
 8001daa:	e076      	b.n	8001e9a <answer2CPU+0x85a>
				myLength = 0x04; //4 bytes length answer
 8001dac:	2109      	movs	r1, #9
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2204      	movs	r2, #4
 8001db2:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b02      	subs	r3, #2
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <answer2CPU+0x874>)
 8001dc0:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	001a      	movs	r2, r3
 8001dca:	4b3b      	ldr	r3, [pc, #236]	; (8001eb8 <answer2CPU+0x878>)
 8001dcc:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <answer2CPU+0x87c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <answer2CPU+0x874>)
 8001dd6:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001dd8:	230d      	movs	r3, #13
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b34      	ldr	r3, [pc, #208]	; (8001eb4 <answer2CPU+0x874>)
 8001de2:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001de4:	230e      	movs	r3, #14
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e011      	b.n	8001e12 <answer2CPU+0x7d2>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001dee:	200e      	movs	r0, #14
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <answer2CPU+0x874>)
 8001df6:	0052      	lsls	r2, r2, #1
 8001df8:	5ad3      	ldrh	r3, [r2, r3]
 8001dfa:	b2d9      	uxtb	r1, r3
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	18bb      	adds	r3, r7, r2
 8001e00:	18ba      	adds	r2, r7, r2
 8001e02:	7812      	ldrb	r2, [r2, #0]
 8001e04:	188a      	adds	r2, r1, r2
 8001e06:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001e08:	183b      	adds	r3, r7, r0
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	183b      	adds	r3, r7, r0
 8001e0e:	3201      	adds	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	230e      	movs	r3, #14
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	2009      	movs	r0, #9
 8001e1a:	183b      	adds	r3, r7, r0
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	429a      	cmp	r2, r3
 8001e22:	dbe4      	blt.n	8001dee <answer2CPU+0x7ae>
				}
				myCS = 0 - myCS;
 8001e24:	210d      	movs	r1, #13
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	187a      	adds	r2, r7, r1
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	4252      	negs	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001e30:	183b      	adds	r3, r7, r0
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b299      	uxth	r1, r3
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <answer2CPU+0x874>)
 8001e3e:	0052      	lsls	r2, r2, #1
 8001e40:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <answer2CPU+0x870>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	2280      	movs	r2, #128	; 0x80
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d0fa      	beq.n	8001e44 <answer2CPU+0x804>
				USART2->TDR = ans[0]|0x0100;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <answer2CPU+0x874>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	0052      	lsls	r2, r2, #1
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <answer2CPU+0x870>)
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e5e:	e014      	b.n	8001e8a <answer2CPU+0x84a>
				{
				  i++;
 8001e60:	210e      	movs	r1, #14
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	3201      	adds	r2, #1
 8001e6a:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <answer2CPU+0x870>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	4013      	ands	r3, r2
 8001e76:	d0fa      	beq.n	8001e6e <answer2CPU+0x82e>
				  USART2->TDR = (uint8_t)ans[i];
 8001e78:	230e      	movs	r3, #14
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <answer2CPU+0x874>)
 8001e80:	0052      	lsls	r2, r2, #1
 8001e82:	5ad3      	ldrh	r3, [r2, r3]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <answer2CPU+0x870>)
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001e8a:	230e      	movs	r3, #14
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <answer2CPU+0x874>)
 8001e92:	0052      	lsls	r2, r2, #1
 8001e94:	5ad3      	ldrh	r3, [r2, r3]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1e2      	bne.n	8001e60 <answer2CPU+0x820>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <answer2CPU+0x870>)
 8001e9c:	6a1a      	ldr	r2, [r3, #32]
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <answer2CPU+0x870>)
 8001ea0:	2108      	movs	r1, #8
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	621a      	str	r2, [r3, #32]
}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40004400 	.word	0x40004400
 8001eb4:	2000349c 	.word	0x2000349c
 8001eb8:	200033f8 	.word	0x200033f8
 8001ebc:	200032ee 	.word	0x200032ee

08001ec0 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f001 f8d0 	bl	800306c <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <MEM_Reset+0xb0>)
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <MEM_Reset+0xb0>)
 8001ed2:	4928      	ldr	r1, [pc, #160]	; (8001f74 <MEM_Reset+0xb4>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	2266      	movs	r2, #102	; 0x66
 8001edc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001ede:	1df9      	adds	r1, r7, #7
 8001ee0:	4825      	ldr	r0, [pc, #148]	; (8001f78 <MEM_Reset+0xb8>)
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f004 fc39 	bl	800675c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001eea:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <MEM_Reset+0xb0>)
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <MEM_Reset+0xb0>)
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	0209      	lsls	r1, r1, #8
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001ef8:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001efa:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001efc:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001efe:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001f00:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001f02:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001f04:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <MEM_Reset+0xb0>)
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <MEM_Reset+0xb0>)
 8001f0a:	491a      	ldr	r1, [pc, #104]	; (8001f74 <MEM_Reset+0xb4>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001f10:	1dfb      	adds	r3, r7, #7
 8001f12:	2299      	movs	r2, #153	; 0x99
 8001f14:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001f16:	1df9      	adds	r1, r7, #7
 8001f18:	4817      	ldr	r0, [pc, #92]	; (8001f78 <MEM_Reset+0xb8>)
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f004 fc1d 	bl	800675c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <MEM_Reset+0xb0>)
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MEM_Reset+0xb0>)
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0209      	lsls	r1, r1, #8
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f30:	2001      	movs	r0, #1
 8001f32:	f001 f89b 	bl	800306c <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	22b7      	movs	r2, #183	; 0xb7
 8001f3a:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <MEM_Reset+0xb0>)
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <MEM_Reset+0xb0>)
 8001f42:	490c      	ldr	r1, [pc, #48]	; (8001f74 <MEM_Reset+0xb4>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001f48:	1df9      	adds	r1, r7, #7
 8001f4a:	480b      	ldr	r0, [pc, #44]	; (8001f78 <MEM_Reset+0xb8>)
 8001f4c:	2305      	movs	r3, #5
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f004 fc04 	bl	800675c <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <MEM_Reset+0xb0>)
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <MEM_Reset+0xb0>)
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	0209      	lsls	r1, r1, #8
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001f62:	2001      	movs	r0, #1
 8001f64:	f001 f882 	bl	800306c <HAL_Delay>
	}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	50000800 	.word	0x50000800
 8001f74:	ffff7fff 	.word	0xffff7fff
 8001f78:	200031b0 	.word	0x200031b0

08001f7c <weoShowFullScreenDMA>:
		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================

	uint8_t weoShowFullScreenDMA(uint8_t picNum) {
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	4c41      	ldr	r4, [pc, #260]	; (8002084 <weoShowFullScreenDMA+0x108>)
 8001f80:	44a5      	add	sp, r4
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	0002      	movs	r2, r0
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <weoShowFullScreenDMA+0x10c>)
 8001f88:	4940      	ldr	r1, [pc, #256]	; (800208c <weoShowFullScreenDMA+0x110>)
 8001f8a:	468c      	mov	ip, r1
 8001f8c:	44bc      	add	ip, r7
 8001f8e:	4463      	add	r3, ip
 8001f90:	701a      	strb	r2, [r3, #0]
//		uint8_t MEM_Buffer[8192];
		uint8_t DUMMY_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i;
		uint32_t addrInfo,addr;

		weoDrawRectangleInit(0x00, 0x00, 0x7F, 0x7F); // Здесь ещё работает
 8001f92:	237f      	movs	r3, #127	; 0x7f
 8001f94:	227f      	movs	r2, #127	; 0x7f
 8001f96:	2100      	movs	r1, #0
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fac9 	bl	8001530 <weoDrawRectangleInit>

		len=8192;
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <weoShowFullScreenDMA+0x114>)
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	0192      	lsls	r2, r2, #6
 8001fa4:	801a      	strh	r2, [r3, #0]
		dma_spi_cnt=len;
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <weoShowFullScreenDMA+0x114>)
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <weoShowFullScreenDMA+0x118>)
 8001fac:	801a      	strh	r2, [r3, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001fae:	483a      	ldr	r0, [pc, #232]	; (8002098 <weoShowFullScreenDMA+0x11c>)
 8001fb0:	183b      	adds	r3, r7, r0
 8001fb2:	2213      	movs	r2, #19
 8001fb4:	701a      	strb	r2, [r3, #0]

		addr=((picNum)*0x2000);
 8001fb6:	4b34      	ldr	r3, [pc, #208]	; (8002088 <weoShowFullScreenDMA+0x10c>)
 8001fb8:	4a34      	ldr	r2, [pc, #208]	; (800208c <weoShowFullScreenDMA+0x110>)
 8001fba:	4694      	mov	ip, r2
 8001fbc:	44bc      	add	ip, r7
 8001fbe:	4463      	add	r3, ip
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	035b      	lsls	r3, r3, #13
 8001fc4:	4935      	ldr	r1, [pc, #212]	; (800209c <weoShowFullScreenDMA+0x120>)
 8001fc6:	187a      	adds	r2, r7, r1
 8001fc8:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <weoShowFullScreenDMA+0x124>)
 8001fd2:	4c2e      	ldr	r4, [pc, #184]	; (800208c <weoShowFullScreenDMA+0x110>)
 8001fd4:	46a4      	mov	ip, r4
 8001fd6:	44bc      	add	ip, r7
 8001fd8:	4463      	add	r3, ip
 8001fda:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <weoShowFullScreenDMA+0x124>)
 8001fe6:	4c29      	ldr	r4, [pc, #164]	; (800208c <weoShowFullScreenDMA+0x110>)
 8001fe8:	46a4      	mov	ip, r4
 8001fea:	44bc      	add	ip, r7
 8001fec:	4463      	add	r3, ip
 8001fee:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <weoShowFullScreenDMA+0x124>)
 8001ffa:	4c24      	ldr	r4, [pc, #144]	; (800208c <weoShowFullScreenDMA+0x110>)
 8001ffc:	46a4      	mov	ip, r4
 8001ffe:	44bc      	add	ip, r7
 8002000:	4463      	add	r3, ip
 8002002:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8002004:	187b      	adds	r3, r7, r1
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0e1b      	lsrs	r3, r3, #24
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <weoShowFullScreenDMA+0x124>)
 800200e:	491f      	ldr	r1, [pc, #124]	; (800208c <weoShowFullScreenDMA+0x110>)
 8002010:	468c      	mov	ip, r1
 8002012:	44bc      	add	ip, r7
 8002014:	4463      	add	r3, ip
 8002016:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <weoShowFullScreenDMA+0x128>)
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <weoShowFullScreenDMA+0x128>)
 800201e:	4922      	ldr	r1, [pc, #136]	; (80020a8 <weoShowFullScreenDMA+0x12c>)
 8002020:	400a      	ands	r2, r1
 8002022:	615a      	str	r2, [r3, #20]

		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8002024:	1839      	adds	r1, r7, r0
 8002026:	4821      	ldr	r0, [pc, #132]	; (80020ac <weoShowFullScreenDMA+0x130>)
 8002028:	2332      	movs	r3, #50	; 0x32
 800202a:	2201      	movs	r2, #1
 800202c:	f004 fb96 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002030:	2408      	movs	r4, #8
 8002032:	193b      	adds	r3, r7, r4
 8002034:	1cd9      	adds	r1, r3, #3
 8002036:	481d      	ldr	r0, [pc, #116]	; (80020ac <weoShowFullScreenDMA+0x130>)
 8002038:	2332      	movs	r3, #50	; 0x32
 800203a:	2201      	movs	r2, #1
 800203c:	f004 fb8e 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002040:	193b      	adds	r3, r7, r4
 8002042:	1c99      	adds	r1, r3, #2
 8002044:	4819      	ldr	r0, [pc, #100]	; (80020ac <weoShowFullScreenDMA+0x130>)
 8002046:	2332      	movs	r3, #50	; 0x32
 8002048:	2201      	movs	r2, #1
 800204a:	f004 fb87 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 800204e:	193b      	adds	r3, r7, r4
 8002050:	1c59      	adds	r1, r3, #1
 8002052:	4816      	ldr	r0, [pc, #88]	; (80020ac <weoShowFullScreenDMA+0x130>)
 8002054:	2332      	movs	r3, #50	; 0x32
 8002056:	2201      	movs	r2, #1
 8002058:	f004 fb80 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 800205c:	1939      	adds	r1, r7, r4
 800205e:	4813      	ldr	r0, [pc, #76]	; (80020ac <weoShowFullScreenDMA+0x130>)
 8002060:	2332      	movs	r3, #50	; 0x32
 8002062:	2201      	movs	r2, #1
 8002064:	f004 fb7a 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &MEM_Buffer ,len);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <weoShowFullScreenDMA+0x114>)
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	4910      	ldr	r1, [pc, #64]	; (80020b0 <weoShowFullScreenDMA+0x134>)
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <weoShowFullScreenDMA+0x130>)
 8002070:	0018      	movs	r0, r3
 8002072:	f004 ffe9 	bl	8007048 <HAL_SPI_Receive_DMA>
	}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <weoShowFullScreenDMA+0x138>)
 800207e:	449d      	add	sp, r3
 8002080:	bd90      	pop	{r4, r7, pc}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	ffffdfe4 	.word	0xffffdfe4
 8002088:	ffffdfef 	.word	0xffffdfef
 800208c:	00002018 	.word	0x00002018
 8002090:	200035d8 	.word	0x200035d8
 8002094:	20003132 	.word	0x20003132
 8002098:	00002013 	.word	0x00002013
 800209c:	00002014 	.word	0x00002014
 80020a0:	ffffdff0 	.word	0xffffdff0
 80020a4:	50000800 	.word	0x50000800
 80020a8:	ffff7fff 	.word	0xffff7fff
 80020ac:	200031b0 	.word	0x200031b0
 80020b0:	200035e0 	.word	0x200035e0
 80020b4:	0000201c 	.word	0x0000201c

080020b8 <weoShowSmallImage>:
//==========================================================================================================================
	uint8_t weoShowSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	4c97      	ldr	r4, [pc, #604]	; (8002318 <weoShowSmallImage+0x260>)
 80020bc:	44a5      	add	sp, r4
 80020be:	af02      	add	r7, sp, #8
 80020c0:	0004      	movs	r4, r0
 80020c2:	0008      	movs	r0, r1
 80020c4:	0011      	movs	r1, r2
 80020c6:	4b95      	ldr	r3, [pc, #596]	; (800231c <weoShowSmallImage+0x264>)
 80020c8:	4a95      	ldr	r2, [pc, #596]	; (8002320 <weoShowSmallImage+0x268>)
 80020ca:	4694      	mov	ip, r2
 80020cc:	44bc      	add	ip, r7
 80020ce:	4463      	add	r3, ip
 80020d0:	1c22      	adds	r2, r4, #0
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	4b93      	ldr	r3, [pc, #588]	; (8002324 <weoShowSmallImage+0x26c>)
 80020d6:	4a92      	ldr	r2, [pc, #584]	; (8002320 <weoShowSmallImage+0x268>)
 80020d8:	4694      	mov	ip, r2
 80020da:	44bc      	add	ip, r7
 80020dc:	4463      	add	r3, ip
 80020de:	1c02      	adds	r2, r0, #0
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	4b91      	ldr	r3, [pc, #580]	; (8002328 <weoShowSmallImage+0x270>)
 80020e4:	4a8e      	ldr	r2, [pc, #568]	; (8002320 <weoShowSmallImage+0x268>)
 80020e6:	4694      	mov	ip, r2
 80020e8:	44bc      	add	ip, r7
 80020ea:	4463      	add	r3, ip
 80020ec:	1c0a      	adds	r2, r1, #0
 80020ee:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192];
		uint8_t imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 80020f0:	2300      	movs	r3, #0
 80020f2:	498e      	ldr	r1, [pc, #568]	; (800232c <weoShowSmallImage+0x274>)
 80020f4:	187a      	adds	r2, r7, r1
 80020f6:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 80020f8:	4d8d      	ldr	r5, [pc, #564]	; (8002330 <weoShowSmallImage+0x278>)
 80020fa:	197b      	adds	r3, r7, r5
 80020fc:	2213      	movs	r2, #19
 80020fe:	701a      	strb	r2, [r3, #0]
		//look at info about image
//		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
		addr=(picNum*0x2000);
 8002100:	4b86      	ldr	r3, [pc, #536]	; (800231c <weoShowSmallImage+0x264>)
 8002102:	4a87      	ldr	r2, [pc, #540]	; (8002320 <weoShowSmallImage+0x268>)
 8002104:	4694      	mov	ip, r2
 8002106:	44bc      	add	ip, r7
 8002108:	4463      	add	r3, ip
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	035b      	lsls	r3, r3, #13
 800210e:	187a      	adds	r2, r7, r1
 8002110:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8002112:	187b      	adds	r3, r7, r1
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b86      	ldr	r3, [pc, #536]	; (8002334 <weoShowSmallImage+0x27c>)
 800211a:	4881      	ldr	r0, [pc, #516]	; (8002320 <weoShowSmallImage+0x268>)
 800211c:	4684      	mov	ip, r0
 800211e:	44bc      	add	ip, r7
 8002120:	4463      	add	r3, ip
 8002122:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b81      	ldr	r3, [pc, #516]	; (8002334 <weoShowSmallImage+0x27c>)
 800212e:	487c      	ldr	r0, [pc, #496]	; (8002320 <weoShowSmallImage+0x268>)
 8002130:	4684      	mov	ip, r0
 8002132:	44bc      	add	ip, r7
 8002134:	4463      	add	r3, ip
 8002136:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8002138:	187b      	adds	r3, r7, r1
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0c1b      	lsrs	r3, r3, #16
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <weoShowSmallImage+0x27c>)
 8002142:	4877      	ldr	r0, [pc, #476]	; (8002320 <weoShowSmallImage+0x268>)
 8002144:	4684      	mov	ip, r0
 8002146:	44bc      	add	ip, r7
 8002148:	4463      	add	r3, ip
 800214a:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 800214c:	187b      	adds	r3, r7, r1
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e1b      	lsrs	r3, r3, #24
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b77      	ldr	r3, [pc, #476]	; (8002334 <weoShowSmallImage+0x27c>)
 8002156:	4972      	ldr	r1, [pc, #456]	; (8002320 <weoShowSmallImage+0x268>)
 8002158:	468c      	mov	ip, r1
 800215a:	44bc      	add	ip, r7
 800215c:	4463      	add	r3, ip
 800215e:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8002160:	4b75      	ldr	r3, [pc, #468]	; (8002338 <weoShowSmallImage+0x280>)
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	4b74      	ldr	r3, [pc, #464]	; (8002338 <weoShowSmallImage+0x280>)
 8002166:	4975      	ldr	r1, [pc, #468]	; (800233c <weoShowSmallImage+0x284>)
 8002168:	400a      	ands	r2, r1
 800216a:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 800216c:	1979      	adds	r1, r7, r5
 800216e:	4874      	ldr	r0, [pc, #464]	; (8002340 <weoShowSmallImage+0x288>)
 8002170:	2332      	movs	r3, #50	; 0x32
 8002172:	2201      	movs	r2, #1
 8002174:	f004 faf2 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8002178:	240c      	movs	r4, #12
 800217a:	193b      	adds	r3, r7, r4
 800217c:	1cd9      	adds	r1, r3, #3
 800217e:	4870      	ldr	r0, [pc, #448]	; (8002340 <weoShowSmallImage+0x288>)
 8002180:	2332      	movs	r3, #50	; 0x32
 8002182:	2201      	movs	r2, #1
 8002184:	f004 faea 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8002188:	193b      	adds	r3, r7, r4
 800218a:	1c99      	adds	r1, r3, #2
 800218c:	486c      	ldr	r0, [pc, #432]	; (8002340 <weoShowSmallImage+0x288>)
 800218e:	2332      	movs	r3, #50	; 0x32
 8002190:	2201      	movs	r2, #1
 8002192:	f004 fae3 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8002196:	193b      	adds	r3, r7, r4
 8002198:	1c59      	adds	r1, r3, #1
 800219a:	4869      	ldr	r0, [pc, #420]	; (8002340 <weoShowSmallImage+0x288>)
 800219c:	2332      	movs	r3, #50	; 0x32
 800219e:	2201      	movs	r2, #1
 80021a0:	f004 fadc 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 80021a4:	1939      	adds	r1, r7, r4
 80021a6:	4866      	ldr	r0, [pc, #408]	; (8002340 <weoShowSmallImage+0x288>)
 80021a8:	2332      	movs	r3, #50	; 0x32
 80021aa:	2201      	movs	r2, #1
 80021ac:	f004 fad6 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 80021b0:	4b64      	ldr	r3, [pc, #400]	; (8002344 <weoShowSmallImage+0x28c>)
 80021b2:	2210      	movs	r2, #16
 80021b4:	18b9      	adds	r1, r7, r2
 80021b6:	4862      	ldr	r0, [pc, #392]	; (8002340 <weoShowSmallImage+0x288>)
 80021b8:	2202      	movs	r2, #2
 80021ba:	f004 fc27 	bl	8006a0c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 80021be:	4b5e      	ldr	r3, [pc, #376]	; (8002338 <weoShowSmallImage+0x280>)
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <weoShowSmallImage+0x280>)
 80021c4:	2180      	movs	r1, #128	; 0x80
 80021c6:	0209      	lsls	r1, r1, #8
 80021c8:	430a      	orrs	r2, r1
 80021ca:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 80021cc:	4e5e      	ldr	r6, [pc, #376]	; (8002348 <weoShowSmallImage+0x290>)
 80021ce:	19bb      	adds	r3, r7, r6
 80021d0:	4a5e      	ldr	r2, [pc, #376]	; (800234c <weoShowSmallImage+0x294>)
 80021d2:	4953      	ldr	r1, [pc, #332]	; (8002320 <weoShowSmallImage+0x268>)
 80021d4:	468c      	mov	ip, r1
 80021d6:	44bc      	add	ip, r7
 80021d8:	4462      	add	r2, ip
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 80021de:	495c      	ldr	r1, [pc, #368]	; (8002350 <weoShowSmallImage+0x298>)
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	4a5a      	ldr	r2, [pc, #360]	; (800234c <weoShowSmallImage+0x294>)
 80021e4:	484e      	ldr	r0, [pc, #312]	; (8002320 <weoShowSmallImage+0x268>)
 80021e6:	4684      	mov	ip, r0
 80021e8:	44bc      	add	ip, r7
 80021ea:	4462      	add	r2, ip
 80021ec:	7852      	ldrb	r2, [r2, #1]
 80021ee:	701a      	strb	r2, [r3, #0]

		len=(width*height>>1)+0x20;
 80021f0:	19bb      	adds	r3, r7, r6
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	187a      	adds	r2, r7, r1
 80021f6:	7812      	ldrb	r2, [r2, #0]
 80021f8:	4353      	muls	r3, r2
 80021fa:	105b      	asrs	r3, r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	4b55      	ldr	r3, [pc, #340]	; (8002354 <weoShowSmallImage+0x29c>)
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	3220      	adds	r2, #32
 8002204:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 8002206:	4b4b      	ldr	r3, [pc, #300]	; (8002334 <weoShowSmallImage+0x27c>)
 8002208:	4a45      	ldr	r2, [pc, #276]	; (8002320 <weoShowSmallImage+0x268>)
 800220a:	4694      	mov	ip, r2
 800220c:	44bc      	add	ip, r7
 800220e:	4463      	add	r3, ip
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	3302      	adds	r3, #2
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <weoShowSmallImage+0x27c>)
 8002218:	4841      	ldr	r0, [pc, #260]	; (8002320 <weoShowSmallImage+0x268>)
 800221a:	4684      	mov	ip, r0
 800221c:	44bc      	add	ip, r7
 800221e:	4463      	add	r3, ip
 8002220:	701a      	strb	r2, [r3, #0]

		USART2->ICR|=USART_ICR_ORECF;
 8002222:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <weoShowSmallImage+0x2a0>)
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <weoShowSmallImage+0x2a0>)
 8002228:	2108      	movs	r1, #8
 800222a:	430a      	orrs	r2, r1
 800222c:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 800222e:	197b      	adds	r3, r7, r5
 8002230:	2213      	movs	r2, #19
 8002232:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <weoShowSmallImage+0x280>)
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <weoShowSmallImage+0x280>)
 800223a:	4940      	ldr	r1, [pc, #256]	; (800233c <weoShowSmallImage+0x284>)
 800223c:	400a      	ands	r2, r1
 800223e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 8002240:	1979      	adds	r1, r7, r5
 8002242:	483f      	ldr	r0, [pc, #252]	; (8002340 <weoShowSmallImage+0x288>)
 8002244:	2332      	movs	r3, #50	; 0x32
 8002246:	2201      	movs	r2, #1
 8002248:	f004 fa88 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 800224c:	193b      	adds	r3, r7, r4
 800224e:	1cd9      	adds	r1, r3, #3
 8002250:	483b      	ldr	r0, [pc, #236]	; (8002340 <weoShowSmallImage+0x288>)
 8002252:	2332      	movs	r3, #50	; 0x32
 8002254:	2201      	movs	r2, #1
 8002256:	f004 fa81 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 800225a:	193b      	adds	r3, r7, r4
 800225c:	1c99      	adds	r1, r3, #2
 800225e:	4838      	ldr	r0, [pc, #224]	; (8002340 <weoShowSmallImage+0x288>)
 8002260:	2332      	movs	r3, #50	; 0x32
 8002262:	2201      	movs	r2, #1
 8002264:	f004 fa7a 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 8002268:	193b      	adds	r3, r7, r4
 800226a:	1c59      	adds	r1, r3, #1
 800226c:	4834      	ldr	r0, [pc, #208]	; (8002340 <weoShowSmallImage+0x288>)
 800226e:	2332      	movs	r3, #50	; 0x32
 8002270:	2201      	movs	r2, #1
 8002272:	f004 fa73 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 8002276:	1939      	adds	r1, r7, r4
 8002278:	4831      	ldr	r0, [pc, #196]	; (8002340 <weoShowSmallImage+0x288>)
 800227a:	2332      	movs	r3, #50	; 0x32
 800227c:	2201      	movs	r2, #1
 800227e:	f004 fa6d 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 8002282:	4c30      	ldr	r4, [pc, #192]	; (8002344 <weoShowSmallImage+0x28c>)
 8002284:	4b33      	ldr	r3, [pc, #204]	; (8002354 <weoShowSmallImage+0x29c>)
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	881a      	ldrh	r2, [r3, #0]
 800228a:	2514      	movs	r5, #20
 800228c:	1979      	adds	r1, r7, r5
 800228e:	482c      	ldr	r0, [pc, #176]	; (8002340 <weoShowSmallImage+0x288>)
 8002290:	0023      	movs	r3, r4
 8002292:	f004 fbbb 	bl	8006a0c <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 8002296:	4b28      	ldr	r3, [pc, #160]	; (8002338 <weoShowSmallImage+0x280>)
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <weoShowSmallImage+0x280>)
 800229c:	2180      	movs	r1, #128	; 0x80
 800229e:	0209      	lsls	r1, r1, #8
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 80022a4:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <weoShowSmallImage+0x26c>)
 80022a6:	481e      	ldr	r0, [pc, #120]	; (8002320 <weoShowSmallImage+0x268>)
 80022a8:	183a      	adds	r2, r7, r0
 80022aa:	18d2      	adds	r2, r2, r3
 80022ac:	19bb      	adds	r3, r7, r6
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	18d3      	adds	r3, r2, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2dc      	uxtb	r4, r3
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <weoShowSmallImage+0x270>)
 80022bc:	183a      	adds	r2, r7, r0
 80022be:	18d2      	adds	r2, r2, r3
 80022c0:	4923      	ldr	r1, [pc, #140]	; (8002350 <weoShowSmallImage+0x298>)
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <weoShowSmallImage+0x270>)
 80022d2:	4913      	ldr	r1, [pc, #76]	; (8002320 <weoShowSmallImage+0x268>)
 80022d4:	468c      	mov	ip, r1
 80022d6:	44bc      	add	ip, r7
 80022d8:	4463      	add	r3, ip
 80022da:	7819      	ldrb	r1, [r3, #0]
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <weoShowSmallImage+0x26c>)
 80022de:	4810      	ldr	r0, [pc, #64]	; (8002320 <weoShowSmallImage+0x268>)
 80022e0:	4684      	mov	ip, r0
 80022e2:	44bc      	add	ip, r7
 80022e4:	4463      	add	r3, ip
 80022e6:	7818      	ldrb	r0, [r3, #0]
 80022e8:	197b      	adds	r3, r7, r5
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	23ff      	movs	r3, #255	; 0xff
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	0013      	movs	r3, r2
 80022f2:	0022      	movs	r2, r4
 80022f4:	f7ff f83c 	bl	8001370 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <weoShowSmallImage+0x280>)
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <weoShowSmallImage+0x280>)
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	430a      	orrs	r2, r1
 8002302:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <weoShowSmallImage+0x2a4>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
	}
 800230a:	46c0      	nop			; (mov r8, r8)
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <weoShowSmallImage+0x2a8>)
 8002312:	449d      	add	sp, r3
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	ffffdfd4 	.word	0xffffdfd4
 800231c:	ffffdfe7 	.word	0xffffdfe7
 8002320:	00002020 	.word	0x00002020
 8002324:	ffffdfe6 	.word	0xffffdfe6
 8002328:	ffffdfe5 	.word	0xffffdfe5
 800232c:	0000201c 	.word	0x0000201c
 8002330:	00002017 	.word	0x00002017
 8002334:	ffffdfec 	.word	0xffffdfec
 8002338:	50000800 	.word	0x50000800
 800233c:	ffff7fff 	.word	0xffff7fff
 8002340:	200031b0 	.word	0x200031b0
 8002344:	00001388 	.word	0x00001388
 8002348:	0000201b 	.word	0x0000201b
 800234c:	ffffdff0 	.word	0xffffdff0
 8002350:	0000201a 	.word	0x0000201a
 8002354:	00002018 	.word	0x00002018
 8002358:	40004400 	.word	0x40004400
 800235c:	2000345a 	.word	0x2000345a
 8002360:	00002024 	.word	0x00002024

08002364 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <MEM_GetID+0xb0>)
 800236e:	7812      	ldrb	r2, [r2, #0]
 8002370:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	229e      	movs	r2, #158	; 0x9e
 8002376:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <MEM_GetID+0xb4>)
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	4b26      	ldr	r3, [pc, #152]	; (8002418 <MEM_GetID+0xb4>)
 800237e:	4927      	ldr	r1, [pc, #156]	; (800241c <MEM_GetID+0xb8>)
 8002380:	400a      	ands	r2, r1
 8002382:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 8002384:	1df9      	adds	r1, r7, #7
 8002386:	4826      	ldr	r0, [pc, #152]	; (8002420 <MEM_GetID+0xbc>)
 8002388:	2332      	movs	r3, #50	; 0x32
 800238a:	2201      	movs	r2, #1
 800238c:	f004 f9e6 	bl	800675c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002390:	23fa      	movs	r3, #250	; 0xfa
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	1d39      	adds	r1, r7, #4
 8002396:	4822      	ldr	r0, [pc, #136]	; (8002420 <MEM_GetID+0xbc>)
 8002398:	2201      	movs	r2, #1
 800239a:	f004 fb37 	bl	8006a0c <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	001a      	movs	r2, r3
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MEM_GetID+0xc0>)
 80023a6:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <MEM_GetID+0xc0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	021a      	lsls	r2, r3, #8
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <MEM_GetID+0xc0>)
 80023b0:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80023b2:	23fa      	movs	r3, #250	; 0xfa
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	1d39      	adds	r1, r7, #4
 80023b8:	4819      	ldr	r0, [pc, #100]	; (8002420 <MEM_GetID+0xbc>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	f004 fb26 	bl	8006a0c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	001a      	movs	r2, r3
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <MEM_GetID+0xc0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	18d2      	adds	r2, r2, r3
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <MEM_GetID+0xc0>)
 80023ce:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <MEM_GetID+0xc0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	021a      	lsls	r2, r3, #8
 80023d6:	4b13      	ldr	r3, [pc, #76]	; (8002424 <MEM_GetID+0xc0>)
 80023d8:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80023da:	23fa      	movs	r3, #250	; 0xfa
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	1d39      	adds	r1, r7, #4
 80023e0:	480f      	ldr	r0, [pc, #60]	; (8002420 <MEM_GetID+0xbc>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	f004 fb12 	bl	8006a0c <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	001a      	movs	r2, r3
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <MEM_GetID+0xc0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	18d2      	adds	r2, r2, r3
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <MEM_GetID+0xc0>)
 80023f6:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <MEM_GetID+0xb4>)
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MEM_GetID+0xb4>)
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	0209      	lsls	r1, r1, #8
 8002402:	430a      	orrs	r2, r1
 8002404:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <MEM_GetID+0xc0>)
 8002408:	681b      	ldr	r3, [r3, #0]
	}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	0800a70c 	.word	0x0800a70c
 8002418:	50000800 	.word	0x50000800
 800241c:	ffff7fff 	.word	0xffff7fff
 8002420:	200031b0 	.word	0x200031b0
 8002424:	2000315c 	.word	0x2000315c

08002428 <cmdExecute>:

	uint16_t Scount(void){

	}
//====================================================================================================================
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002434:	4b34      	ldr	r3, [pc, #208]	; (8002508 <cmdExecute+0xe0>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b10      	cmp	r3, #16
 800243a:	d05e      	beq.n	80024fa <cmdExecute+0xd2>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <cmdExecute+0xe4>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d15c      	bne.n	80024fe <cmdExecute+0xd6>
		USART2->ICR|=USART_ICR_ORECF;
 8002444:	4b32      	ldr	r3, [pc, #200]	; (8002510 <cmdExecute+0xe8>)
 8002446:	6a1a      	ldr	r2, [r3, #32]
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <cmdExecute+0xe8>)
 800244a:	2108      	movs	r1, #8
 800244c:	430a      	orrs	r2, r1
 800244e:	621a      	str	r2, [r3, #32]

				}
		if(cmd2Execute==0x10){

				}
		if(cmd2Execute==0x11){
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b11      	cmp	r3, #17
 8002456:	d107      	bne.n	8002468 <cmdExecute+0x40>
			bf4me=0x11;	//set BF flag 4 me
 8002458:	4b2c      	ldr	r3, [pc, #176]	; (800250c <cmdExecute+0xe4>)
 800245a:	2211      	movs	r2, #17
 800245c:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowFullScreen(picNum);
			weoShowFullScreenDMA(picNum);
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <cmdExecute+0xec>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	0018      	movs	r0, r3
 8002464:	f7ff fd8a 	bl	8001f7c <weoShowFullScreenDMA>
				}
		if(cmd2Execute==0x12){
 8002468:	1dfb      	adds	r3, r7, #7
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b12      	cmp	r3, #18
 800246e:	d10d      	bne.n	800248c <cmdExecute+0x64>
			bf4me=0x12;	//set BF flag 4 me
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <cmdExecute+0xe4>)
 8002472:	2212      	movs	r2, #18
 8002474:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
//			weoShowSmallImageDMA(picNum,imX,imY);
			weoShowSmallImage(picNum,imX,imY);
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <cmdExecute+0xec>)
 8002478:	7818      	ldrb	r0, [r3, #0]
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <cmdExecute+0xf0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b2d9      	uxtb	r1, r3
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <cmdExecute+0xf4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	001a      	movs	r2, r3
 8002488:	f7ff fe16 	bl	80020b8 <weoShowSmallImage>
				}
		if(cmd2Execute==0x13){
 800248c:	1dfb      	adds	r3, r7, #7
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b13      	cmp	r3, #19
 8002492:	d10d      	bne.n	80024b0 <cmdExecute+0x88>
			bf4me=0x13;	//set BF flag 4 me
 8002494:	4b1d      	ldr	r3, [pc, #116]	; (800250c <cmdExecute+0xe4>)
 8002496:	2213      	movs	r2, #19
 8002498:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <cmdExecute+0xf0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b2d8      	uxtb	r0, r3
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <cmdExecute+0xf4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b2d9      	uxtb	r1, r3
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <cmdExecute+0xf8>)
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <cmdExecute+0xfc>)
 80024ac:	f000 f83c 	bl	8002528 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 80024b0:	1dfb      	adds	r3, r7, #7
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b14      	cmp	r3, #20
 80024b6:	d102      	bne.n	80024be <cmdExecute+0x96>
			bf4me=0x14;	//set BF flag 4 me
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <cmdExecute+0xe4>)
 80024ba:	2214      	movs	r2, #20
 80024bc:	701a      	strb	r2, [r3, #0]
//			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF


				}
		if(cmd2Execute==0x15){
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b15      	cmp	r3, #21
 80024c4:	d108      	bne.n	80024d8 <cmdExecute+0xb0>
			if(cmd[3]==0x00){
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <cmdExecute+0xe0>)
 80024c8:	78db      	ldrb	r3, [r3, #3]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <cmdExecute+0xaa>
				weoClear();
 80024ce:	f7fe fee9 	bl	80012a4 <weoClear>
			}
			bf4me=0x15;	//set BF flag 4 me
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <cmdExecute+0xe4>)
 80024d4:	2215      	movs	r2, #21
 80024d6:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 80024d8:	1dfb      	adds	r3, r7, #7
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b16      	cmp	r3, #22
 80024de:	d102      	bne.n	80024e6 <cmdExecute+0xbe>
			bf4me=0x16;	//set BF flag 4 me
 80024e0:	4b0a      	ldr	r3, [pc, #40]	; (800250c <cmdExecute+0xe4>)
 80024e2:	2216      	movs	r2, #22
 80024e4:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <cmdExecute+0xe8>)
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <cmdExecute+0xe8>)
 80024f2:	2108      	movs	r1, #8
 80024f4:	430a      	orrs	r2, r1
 80024f6:	621a      	str	r2, [r3, #32]
 80024f8:	e002      	b.n	8002500 <cmdExecute+0xd8>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	e000      	b.n	8002500 <cmdExecute+0xd8>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80024fe:	46c0      	nop			; (mov r8, r8)
	}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	b002      	add	sp, #8
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200055e0 	.word	0x200055e0
 800250c:	200034b0 	.word	0x200034b0
 8002510:	40004400 	.word	0x40004400
 8002514:	20003459 	.word	0x20003459
 8002518:	200032f0 	.word	0x200032f0
 800251c:	20003384 	.word	0x20003384
 8002520:	20003499 	.word	0x20003499
 8002524:	200031a0 	.word	0x200031a0

08002528 <printASCIIarray>:
//========================================================================================================================
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b092      	sub	sp, #72	; 0x48
 800252c:	af02      	add	r7, sp, #8
 800252e:	0004      	movs	r4, r0
 8002530:	0008      	movs	r0, r1
 8002532:	0011      	movs	r1, r2
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	1c22      	adds	r2, r4, #0
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	1c02      	adds	r2, r0, #0
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	1d7b      	adds	r3, r7, #5
 8002544:	1c0a      	adds	r2, r1, #0
 8002546:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 8002548:	233e      	movs	r3, #62	; 0x3e
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	1dfa      	adds	r2, r7, #7
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 8002552:	233c      	movs	r3, #60	; 0x3c
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	2200      	movs	r2, #0
 8002558:	801a      	strh	r2, [r3, #0]
 800255a:	e04f      	b.n	80025fc <printASCIIarray+0xd4>
				for(j=0;j<49;j++){
 800255c:	233f      	movs	r3, #63	; 0x3f
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e01b      	b.n	800259e <printASCIIarray+0x76>
					weoBuffer[j]=FONT_X[dataASCII[i]][j];
 8002566:	233c      	movs	r3, #60	; 0x3c
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	18d3      	adds	r3, r2, r3
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	001a      	movs	r2, r3
 8002574:	253f      	movs	r5, #63	; 0x3f
 8002576:	197b      	adds	r3, r7, r5
 8002578:	7818      	ldrb	r0, [r3, #0]
 800257a:	197b      	adds	r3, r7, r5
 800257c:	7819      	ldrb	r1, [r3, #0]
 800257e:	4c33      	ldr	r4, [pc, #204]	; (800264c <printASCIIarray+0x124>)
 8002580:	0013      	movs	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	00da      	lsls	r2, r3, #3
 8002588:	1ad2      	subs	r2, r2, r3
 800258a:	18a3      	adds	r3, r4, r2
 800258c:	5c1a      	ldrb	r2, [r3, r0]
 800258e:	2308      	movs	r3, #8
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 8002594:	197b      	adds	r3, r7, r5
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	197b      	adds	r3, r7, r5
 800259a:	3201      	adds	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	233f      	movs	r3, #63	; 0x3f
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b30      	cmp	r3, #48	; 0x30
 80025a6:	d9de      	bls.n	8002566 <printASCIIarray+0x3e>
					}
				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 80025a8:	4b29      	ldr	r3, [pc, #164]	; (8002650 <printASCIIarray+0x128>)
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	203e      	movs	r0, #62	; 0x3e
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	18d3      	adds	r3, r2, r3
 80025b4:	b2dc      	uxtb	r4, r3
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <printASCIIarray+0x12c>)
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	1dbb      	adds	r3, r7, #6
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	18d3      	adds	r3, r2, r3
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	7819      	ldrb	r1, [r3, #0]
 80025c6:	0005      	movs	r5, r0
 80025c8:	183b      	adds	r3, r7, r0
 80025ca:	7818      	ldrb	r0, [r3, #0]
 80025cc:	2308      	movs	r3, #8
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	23ff      	movs	r3, #255	; 0xff
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	0013      	movs	r3, r2
 80025d8:	0022      	movs	r2, r4
 80025da:	f7fe fec9 	bl	8001370 <weoDrawRectangleFilled>
				ASCII_X += X_increment+1;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <printASCIIarray+0x128>)
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	197b      	adds	r3, r7, r5
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	197b      	adds	r3, r7, r5
 80025ec:	3201      	adds	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 80025f0:	213c      	movs	r1, #60	; 0x3c
 80025f2:	187b      	adds	r3, r7, r1
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	3201      	adds	r2, #1
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	1d7b      	adds	r3, r7, #5
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	213c      	movs	r1, #60	; 0x3c
 8002604:	187a      	adds	r2, r7, r1
 8002606:	8812      	ldrh	r2, [r2, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d3a7      	bcc.n	800255c <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 800260c:	187b      	adds	r3, r7, r1
 800260e:	2200      	movs	r2, #0
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e00b      	b.n	800262c <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 8002614:	203c      	movs	r0, #60	; 0x3c
 8002616:	183b      	adds	r3, r7, r0
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	2208      	movs	r2, #8
 800261c:	18ba      	adds	r2, r7, r2
 800261e:	2100      	movs	r1, #0
 8002620:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 8002622:	183b      	adds	r3, r7, r0
 8002624:	881a      	ldrh	r2, [r3, #0]
 8002626:	183b      	adds	r3, r7, r0
 8002628:	3201      	adds	r2, #1
 800262a:	801a      	strh	r2, [r3, #0]
 800262c:	233c      	movs	r3, #60	; 0x3c
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	2b30      	cmp	r3, #48	; 0x30
 8002634:	d9ee      	bls.n	8002614 <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <printASCIIarray+0x130>)
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <printASCIIarray+0x130>)
 800263c:	2140      	movs	r1, #64	; 0x40
 800263e:	430a      	orrs	r2, r1
 8002640:	615a      	str	r2, [r3, #20]

		}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b010      	add	sp, #64	; 0x40
 800264a:	bdb0      	pop	{r4, r5, r7, pc}
 800264c:	20000000 	.word	0x20000000
 8002650:	20003130 	.word	0x20003130
 8002654:	20003131 	.word	0x20003131
 8002658:	50000800 	.word	0x50000800

0800265c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_MspInit+0x4c>)
 8002670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_MspInit+0x4c>)
 8002674:	2101      	movs	r1, #1
 8002676:	430a      	orrs	r2, r1
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_MspInit+0x4c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2201      	movs	r2, #1
 8002680:	4013      	ands	r3, r2
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_MspInit+0x4c>)
 8002688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_MspInit+0x4c>)
 800268c:	2180      	movs	r1, #128	; 0x80
 800268e:	0549      	lsls	r1, r1, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	63da      	str	r2, [r3, #60]	; 0x3c
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_MspInit+0x4c>)
 8002696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	055b      	lsls	r3, r3, #21
 800269c:	4013      	ands	r3, r2
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 80026a2:	2380      	movs	r3, #128	; 0x80
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 fd04 	bl	80030b4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	240c      	movs	r4, #12
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	0018      	movs	r0, r3
 80026c6:	2314      	movs	r3, #20
 80026c8:	001a      	movs	r2, r3
 80026ca:	2100      	movs	r1, #0
 80026cc:	f008 f80a 	bl	800a6e4 <memset>
  if(hcomp->Instance==COMP1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_COMP_MspInit+0x60>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d11a      	bne.n	8002710 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_COMP_MspInit+0x64>)
 80026dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_COMP_MspInit+0x64>)
 80026e0:	2102      	movs	r1, #2
 80026e2:	430a      	orrs	r2, r1
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34
 80026e6:	4b0d      	ldr	r3, [pc, #52]	; (800271c <HAL_COMP_MspInit+0x64>)
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2204      	movs	r2, #4
 80026f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2203      	movs	r2, #3
 80026fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	2200      	movs	r2, #0
 8002702:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002704:	193b      	adds	r3, r7, r4
 8002706:	4a06      	ldr	r2, [pc, #24]	; (8002720 <HAL_COMP_MspInit+0x68>)
 8002708:	0019      	movs	r1, r3
 800270a:	0010      	movs	r0, r2
 800270c:	f001 faee 	bl	8003cec <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b009      	add	sp, #36	; 0x24
 8002716:	bd90      	pop	{r4, r7, pc}
 8002718:	40010200 	.word	0x40010200
 800271c:	40021000 	.word	0x40021000
 8002720:	50000400 	.word	0x50000400

08002724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b08b      	sub	sp, #44	; 0x2c
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	2414      	movs	r4, #20
 800272e:	193b      	adds	r3, r7, r4
 8002730:	0018      	movs	r0, r3
 8002732:	2314      	movs	r3, #20
 8002734:	001a      	movs	r2, r3
 8002736:	2100      	movs	r1, #0
 8002738:	f007 ffd4 	bl	800a6e4 <memset>
  if(hi2c->Instance==I2C1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a20      	ldr	r2, [pc, #128]	; (80027c4 <HAL_I2C_MspInit+0xa0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d139      	bne.n	80027ba <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_I2C_MspInit+0xa4>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <HAL_I2C_MspInit+0xa4>)
 800274c:	2101      	movs	r1, #1
 800274e:	430a      	orrs	r2, r1
 8002750:	635a      	str	r2, [r3, #52]	; 0x34
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <HAL_I2C_MspInit+0xa4>)
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	2201      	movs	r2, #1
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800275e:	193b      	adds	r3, r7, r4
 8002760:	22c0      	movs	r2, #192	; 0xc0
 8002762:	00d2      	lsls	r2, r2, #3
 8002764:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002766:	0021      	movs	r1, r4
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2212      	movs	r2, #18
 800276c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276e:	187b      	adds	r3, r7, r1
 8002770:	2201      	movs	r2, #1
 8002772:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	187b      	adds	r3, r7, r1
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800277a:	187b      	adds	r3, r7, r1
 800277c:	2206      	movs	r2, #6
 800277e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002780:	187a      	adds	r2, r7, r1
 8002782:	23a0      	movs	r3, #160	; 0xa0
 8002784:	05db      	lsls	r3, r3, #23
 8002786:	0011      	movs	r1, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f001 faaf 	bl	8003cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_I2C_MspInit+0xa4>)
 8002790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_I2C_MspInit+0xa4>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	0389      	lsls	r1, r1, #14
 8002798:	430a      	orrs	r2, r1
 800279a:	63da      	str	r2, [r3, #60]	; 0x3c
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_I2C_MspInit+0xa4>)
 800279e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	039b      	lsls	r3, r3, #14
 80027a4:	4013      	ands	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	2017      	movs	r0, #23
 80027b0:	f000 ffa2 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80027b4:	2017      	movs	r0, #23
 80027b6:	f000 ffb4 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b00b      	add	sp, #44	; 0x2c
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	40005400 	.word	0x40005400
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	2414      	movs	r4, #20
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	0018      	movs	r0, r3
 80027da:	2314      	movs	r3, #20
 80027dc:	001a      	movs	r2, r3
 80027de:	2100      	movs	r1, #0
 80027e0:	f007 ff80 	bl	800a6e4 <memset>
  if(hi2s->Instance==SPI1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a47      	ldr	r2, [pc, #284]	; (8002908 <HAL_I2S_MspInit+0x13c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d000      	beq.n	80027f0 <HAL_I2S_MspInit+0x24>
 80027ee:	e086      	b.n	80028fe <HAL_I2S_MspInit+0x132>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027f0:	4b46      	ldr	r3, [pc, #280]	; (800290c <HAL_I2S_MspInit+0x140>)
 80027f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f4:	4b45      	ldr	r3, [pc, #276]	; (800290c <HAL_I2S_MspInit+0x140>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0149      	lsls	r1, r1, #5
 80027fa:	430a      	orrs	r2, r1
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <HAL_I2S_MspInit+0x140>)
 8002800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	015b      	lsls	r3, r3, #5
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_I2S_MspInit+0x140>)
 800280e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002810:	4b3e      	ldr	r3, [pc, #248]	; (800290c <HAL_I2S_MspInit+0x140>)
 8002812:	2101      	movs	r1, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	635a      	str	r2, [r3, #52]	; 0x34
 8002818:	4b3c      	ldr	r3, [pc, #240]	; (800290c <HAL_I2S_MspInit+0x140>)
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	2201      	movs	r2, #1
 800281e:	4013      	ands	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002824:	4b39      	ldr	r3, [pc, #228]	; (800290c <HAL_I2S_MspInit+0x140>)
 8002826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002828:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_I2S_MspInit+0x140>)
 800282a:	2102      	movs	r1, #2
 800282c:	430a      	orrs	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	; 0x34
 8002830:	4b36      	ldr	r3, [pc, #216]	; (800290c <HAL_I2S_MspInit+0x140>)
 8002832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002834:	2202      	movs	r2, #2
 8002836:	4013      	ands	r3, r2
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800283c:	193b      	adds	r3, r7, r4
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0212      	lsls	r2, r2, #8
 8002842:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	193b      	adds	r3, r7, r4
 8002846:	2202      	movs	r2, #2
 8002848:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	193b      	adds	r3, r7, r4
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	193b      	adds	r3, r7, r4
 8002852:	2200      	movs	r2, #0
 8002854:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	193a      	adds	r2, r7, r4
 800285e:	23a0      	movs	r3, #160	; 0xa0
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	0011      	movs	r1, r2
 8002864:	0018      	movs	r0, r3
 8002866:	f001 fa41 	bl	8003cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800286a:	0021      	movs	r1, r4
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2238      	movs	r2, #56	; 0x38
 8002870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2202      	movs	r2, #2
 8002876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2200      	movs	r2, #0
 8002888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800288a:	187b      	adds	r3, r7, r1
 800288c:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_I2S_MspInit+0x144>)
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f001 fa2b 	bl	8003cec <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <HAL_I2S_MspInit+0x148>)
 8002898:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_I2S_MspInit+0x14c>)
 800289a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_I2S_MspInit+0x148>)
 800289e:	2211      	movs	r2, #17
 80028a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a2:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028a4:	2210      	movs	r2, #16
 80028a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028cc:	22c0      	movs	r2, #192	; 0xc0
 80028ce:	0192      	lsls	r2, r2, #6
 80028d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 ff41 	bl	800375c <HAL_DMA_Init>
 80028da:	1e03      	subs	r3, r0, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2S_MspInit+0x116>
    {
      Error_Handler();
 80028de:	f7ff febd 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028e8:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_I2S_MspInit+0x148>)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2019      	movs	r0, #25
 80028f4:	f000 ff00 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80028f8:	2019      	movs	r0, #25
 80028fa:	f000 ff12 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46bd      	mov	sp, r7
 8002902:	b00b      	add	sp, #44	; 0x2c
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	40013000 	.word	0x40013000
 800290c:	40021000 	.word	0x40021000
 8002910:	50000400 	.word	0x50000400
 8002914:	2000357c 	.word	0x2000357c
 8002918:	40020008 	.word	0x40020008

0800291c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08b      	sub	sp, #44	; 0x2c
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	2414      	movs	r4, #20
 8002926:	193b      	adds	r3, r7, r4
 8002928:	0018      	movs	r0, r3
 800292a:	2314      	movs	r3, #20
 800292c:	001a      	movs	r2, r3
 800292e:	2100      	movs	r1, #0
 8002930:	f007 fed8 	bl	800a6e4 <memset>
  if(hspi->Instance==SPI2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a54      	ldr	r2, [pc, #336]	; (8002a8c <HAL_SPI_MspInit+0x170>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d000      	beq.n	8002940 <HAL_SPI_MspInit+0x24>
 800293e:	e0a0      	b.n	8002a82 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_SPI_MspInit+0x174>)
 8002942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002944:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <HAL_SPI_MspInit+0x174>)
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	01c9      	lsls	r1, r1, #7
 800294a:	430a      	orrs	r2, r1
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c
 800294e:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_SPI_MspInit+0x174>)
 8002950:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	01db      	lsls	r3, r3, #7
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295c:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_SPI_MspInit+0x174>)
 800295e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002960:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <HAL_SPI_MspInit+0x174>)
 8002962:	2102      	movs	r1, #2
 8002964:	430a      	orrs	r2, r1
 8002966:	635a      	str	r2, [r3, #52]	; 0x34
 8002968:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_SPI_MspInit+0x174>)
 800296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296c:	2202      	movs	r2, #2
 800296e:	4013      	ands	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002974:	193b      	adds	r3, r7, r4
 8002976:	2240      	movs	r2, #64	; 0x40
 8002978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	193b      	adds	r3, r7, r4
 800297c:	2202      	movs	r2, #2
 800297e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	193b      	adds	r3, r7, r4
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	193b      	adds	r3, r7, r4
 8002988:	2200      	movs	r2, #0
 800298a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 800298c:	193b      	adds	r3, r7, r4
 800298e:	2204      	movs	r2, #4
 8002990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002992:	193b      	adds	r3, r7, r4
 8002994:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <HAL_SPI_MspInit+0x178>)
 8002996:	0019      	movs	r1, r3
 8002998:	0010      	movs	r0, r2
 800299a:	f001 f9a7 	bl	8003cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800299e:	0021      	movs	r1, r4
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	22c0      	movs	r2, #192	; 0xc0
 80029a4:	0052      	lsls	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	2202      	movs	r2, #2
 80029ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80029ba:	187b      	adds	r3, r7, r1
 80029bc:	2201      	movs	r2, #1
 80029be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_SPI_MspInit+0x178>)
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f001 f990 	bl	8003cec <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel2;
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029ce:	4a33      	ldr	r2, [pc, #204]	; (8002a9c <HAL_SPI_MspInit+0x180>)
 80029d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029d4:	2212      	movs	r2, #18
 80029d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d8:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029de:	4b2e      	ldr	r3, [pc, #184]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e4:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ea:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f0:	4b29      	ldr	r3, [pc, #164]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	0192      	lsls	r2, r2, #6
 8002a02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 fea8 	bl	800375c <HAL_DMA_Init>
 8002a0c:	1e03      	subs	r3, r0, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 8002a10:	f7ff fe24 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 8002a18:	659a      	str	r2, [r3, #88]	; 0x58
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_SPI_MspInit+0x17c>)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel3;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a22:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <HAL_SPI_MspInit+0x188>)
 8002a24:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a28:	2213      	movs	r2, #19
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a2e:	2210      	movs	r2, #16
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f000 fe7f 	bl	800375c <HAL_DMA_Init>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8002a62:	f7ff fdfb 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_SPI_MspInit+0x184>)
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	201a      	movs	r0, #26
 8002a78:	f000 fe3e 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002a7c:	201a      	movs	r0, #26
 8002a7e:	f000 fe50 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b00b      	add	sp, #44	; 0x2c
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	40003800 	.word	0x40003800
 8002a90:	40021000 	.word	0x40021000
 8002a94:	50000400 	.word	0x50000400
 8002a98:	20003290 	.word	0x20003290
 8002a9c:	4002001c 	.word	0x4002001c
 8002aa0:	2000351c 	.word	0x2000351c
 8002aa4:	40020030 	.word	0x40020030

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_TIM_Base_MspInit+0x38>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aba:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8002abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0109      	lsls	r1, r1, #4
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_TIM_Base_MspInit+0x3c>)
 8002aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	40012c00 	.word	0x40012c00
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	240c      	movs	r4, #12
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	0018      	movs	r0, r3
 8002af6:	2314      	movs	r3, #20
 8002af8:	001a      	movs	r2, r3
 8002afa:	2100      	movs	r1, #0
 8002afc:	f007 fdf2 	bl	800a6e4 <memset>
  if(htim->Instance==TIM1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a15      	ldr	r2, [pc, #84]	; (8002b5c <HAL_TIM_MspPostInit+0x74>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d123      	bne.n	8002b52 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_TIM_MspPostInit+0x78>)
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_TIM_MspPostInit+0x78>)
 8002b10:	2101      	movs	r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_TIM_MspPostInit+0x78>)
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	0052      	lsls	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	0021      	movs	r1, r4
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2202      	movs	r2, #2
 8002b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2202      	movs	r2, #2
 8002b36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2202      	movs	r2, #2
 8002b42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	187a      	adds	r2, r7, r1
 8002b46:	23a0      	movs	r3, #160	; 0xa0
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f001 f8cd 	bl	8003cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b009      	add	sp, #36	; 0x24
 8002b58:	bd90      	pop	{r4, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40012c00 	.word	0x40012c00
 8002b60:	40021000 	.word	0x40021000

08002b64 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08b      	sub	sp, #44	; 0x2c
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	2414      	movs	r4, #20
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	0018      	movs	r0, r3
 8002b72:	2314      	movs	r3, #20
 8002b74:	001a      	movs	r2, r3
 8002b76:	2100      	movs	r1, #0
 8002b78:	f007 fdb4 	bl	800a6e4 <memset>
  if(husart->Instance==USART3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a45      	ldr	r2, [pc, #276]	; (8002c98 <HAL_USART_MspInit+0x134>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d000      	beq.n	8002b88 <HAL_USART_MspInit+0x24>
 8002b86:	e083      	b.n	8002c90 <HAL_USART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b88:	4b44      	ldr	r3, [pc, #272]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b8c:	4b43      	ldr	r3, [pc, #268]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	02c9      	lsls	r1, r1, #11
 8002b92:	430a      	orrs	r2, r1
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	02db      	lsls	r3, r3, #11
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002baa:	2101      	movs	r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbc:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc8:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_USART_MspInit+0x138>)
 8002bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bcc:	2202      	movs	r2, #2
 8002bce:	4013      	ands	r3, r2
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	2202      	movs	r2, #2
 8002bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	2200      	movs	r2, #0
 8002be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	2203      	movs	r2, #3
 8002bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2204      	movs	r2, #4
 8002bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	193a      	adds	r2, r7, r4
 8002bf4:	23a0      	movs	r3, #160	; 0xa0
 8002bf6:	05db      	lsls	r3, r3, #23
 8002bf8:	0011      	movs	r1, r2
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f001 f876 	bl	8003cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c00:	0021      	movs	r1, r4
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	2203      	movs	r2, #3
 8002c06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	2203      	movs	r2, #3
 8002c18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002c1a:	187b      	adds	r3, r7, r1
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	187b      	adds	r3, r7, r1
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_USART_MspInit+0x13c>)
 8002c24:	0019      	movs	r1, r3
 8002c26:	0010      	movs	r0, r2
 8002c28:	f001 f860 	bl	8003cec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_USART_MspInit+0x144>)
 8002c30:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c34:	2237      	movs	r2, #55	; 0x37
 8002c36:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c44:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c4a:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c5e:	2280      	movs	r2, #128	; 0x80
 8002c60:	0192      	lsls	r2, r2, #6
 8002c62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 fd78 	bl	800375c <HAL_DMA_Init>
 8002c6c:	1e03      	subs	r3, r0, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_USART_MspInit+0x110>
    {
      Error_Handler();
 8002c70:	f7ff fcf4 	bl	800265c <Error_Handler>
    }

    __HAL_LINKDMA(husart,hdmatx,hdma_usart3_tx);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c78:	651a      	str	r2, [r3, #80]	; 0x50
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_USART_MspInit+0x140>)
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	201d      	movs	r0, #29
 8002c86:	f000 fd37 	bl	80036f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002c8a:	201d      	movs	r0, #29
 8002c8c:	f000 fd49 	bl	8003722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b00b      	add	sp, #44	; 0x2c
 8002c96:	bd90      	pop	{r4, r7, pc}
 8002c98:	40004800 	.word	0x40004800
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	50000400 	.word	0x50000400
 8002ca4:	200032f4 	.word	0x200032f4
 8002ca8:	40020044 	.word	0x40020044

08002cac <LL_USART_IsActiveFlag_FE>:
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d101      	bne.n	8002cc4 <LL_USART_IsActiveFlag_FE+0x18>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_USART_IsActiveFlag_FE+0x1a>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b002      	add	sp, #8
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <LL_USART_IsActiveFlag_NE>:
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d101      	bne.n	8002ce6 <LL_USART_IsActiveFlag_NE+0x18>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <LL_USART_IsActiveFlag_NE+0x1a>
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <LL_USART_IsActiveFlag_ORE>:
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d101      	bne.n	8002d08 <LL_USART_IsActiveFlag_ORE+0x18>
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <LL_USART_IsActiveFlag_ORE+0x1a>
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b002      	add	sp, #8
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d101      	bne.n	8002d2a <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b002      	add	sp, #8
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2220      	movs	r2, #32
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d101      	bne.n	8002d4c <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e000      	b.n	8002d4e <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	0018      	movs	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b002      	add	sp, #8
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <HardFault_Handler+0x4>

08002d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7e:	f000 f959 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <DMA1_Channel1_IRQHandler+0x14>)
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 fe5e 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	2000357c 	.word	0x2000357c

08002da0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

//	HAL_SPI_RxCpltCallback(&hspi2);
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fe52 	bl	8003a50 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002dac:	4b04      	ldr	r3, [pc, #16]	; (8002dc0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fe4e 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002db4:	46c0      	nop			; (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	20003290 	.word	0x20003290
 8002dc0:	2000351c 	.word	0x2000351c

08002dc4 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
//		GPIOA->ODR |= 1 << 11;	//set test 1
//		GPIOA->ODR &= ~(1 << 11);	//reset test 1
  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 fe40 	bl	8003a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	200032f4 	.word	0x200032f4

08002ddc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <I2C1_IRQHandler+0x2c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	23e0      	movs	r3, #224	; 0xe0
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4013      	ands	r3, r2
 8002dec:	d004      	beq.n	8002df8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <I2C1_IRQHandler+0x2c>)
 8002df0:	0018      	movs	r0, r3
 8002df2:	f001 f98f 	bl	8004114 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002df6:	e003      	b.n	8002e00 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <I2C1_IRQHandler+0x2c>)
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f001 f970 	bl	80040e0 <HAL_I2C_EV_IRQHandler>
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	20003230 	.word	0x20003230

08002e0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <SPI1_IRQHandler+0x14>)
 8002e12:	0018      	movs	r0, r3
 8002e14:	f002 f8f2 	bl	8004ffc <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	2000345c 	.word	0x2000345c

08002e24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <SPI2_IRQHandler+0x14>)
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f004 fbfc 	bl	8007628 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002e30:	46c0      	nop			; (mov r8, r8)
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	200031b0 	.word	0x200031b0

08002e3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002e40:	4b25      	ldr	r3, [pc, #148]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e42:	6a1a      	ldr	r2, [r3, #32]
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e46:	2108      	movs	r1, #8
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002e4c:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e52:	2102      	movs	r1, #2
 8002e54:	430a      	orrs	r2, r1
 8002e56:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e5e:	2104      	movs	r1, #4
 8002e60:	430a      	orrs	r2, r1
 8002e62:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002e64:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff ff53 	bl	8002d12 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d009      	beq.n	8002e84 <USART2_IRQHandler+0x48>
 8002e70:	4b19      	ldr	r3, [pc, #100]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e72:	0018      	movs	r0, r3
 8002e74:	f7ff ff5e 	bl	8002d34 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002e78:	1e03      	subs	r3, r0, #0
 8002e7a:	d003      	beq.n	8002e84 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002e7c:	f7fe f87c 	bl	8000f78 <USART2_RX_Callback>
	  {
 8002e80:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e82:	e025      	b.n	8002ed0 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002e84:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e86:	6a1a      	ldr	r2, [r3, #32]
 8002e88:	4b13      	ldr	r3, [pc, #76]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e8a:	2108      	movs	r1, #8
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff ff2c 	bl	8002cf0 <LL_USART_IsActiveFlag_ORE>
 8002e98:	1e03      	subs	r3, r0, #0
 8002e9a:	d008      	beq.n	8002eae <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002ea2:	2108      	movs	r1, #8
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002eac:	e010      	b.n	8002ed0 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f7ff fefb 	bl	8002cac <LL_USART_IsActiveFlag_FE>
 8002eb6:	1e03      	subs	r3, r0, #0
 8002eb8:	d002      	beq.n	8002ec0 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ebe:	e007      	b.n	8002ed0 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f7ff ff03 	bl	8002cce <LL_USART_IsActiveFlag_NE>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d001      	beq.n	8002ed0 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002ecc:	4b02      	ldr	r3, [pc, #8]	; (8002ed8 <USART2_IRQHandler+0x9c>)
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40004400 	.word	0x40004400

08002edc <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f006 fa3c 	bl	8009360 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20003390 	.word	0x20003390

08002ef4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <SystemInit+0x14>)
 8002efa:	2280      	movs	r2, #128	; 0x80
 8002efc:	0512      	lsls	r2, r2, #20
 8002efe:	609a      	str	r2, [r3, #8]
#endif
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f0e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f10:	f7ff fff0 	bl	8002ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <LoopForever+0xe>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <LoopForever+0x16>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f3a:	f007 fbaf 	bl	800a69c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002f3e:	f7fd faf7 	bl	8000530 <main>

08002f42 <LoopForever>:

LoopForever:
  b LoopForever
 8002f42:	e7fe      	b.n	8002f42 <LoopForever>
  ldr   r0, =_estack
 8002f44:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f4c:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8002f50:	0800a7fc 	.word	0x0800a7fc
  ldr r2, =_sbss
 8002f54:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8002f58:	20005600 	.word	0x20005600

08002f5c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC1_COMP_IRQHandler>
	...

08002f60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_Init+0x3c>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_Init+0x3c>)
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	0049      	lsls	r1, r1, #1
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f000 f810 	bl	8002fa0 <HAL_InitTick>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f84:	1dfb      	adds	r3, r7, #7
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
 8002f8a:	e001      	b.n	8002f90 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002f8c:	f7ff fb6c 	bl	8002668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f90:	1dfb      	adds	r3, r7, #7
 8002f92:	781b      	ldrb	r3, [r3, #0]
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40022000 	.word	0x40022000

08002fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa8:	230f      	movs	r3, #15
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_InitTick+0x88>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d02b      	beq.n	8003010 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002fb8:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_InitTick+0x8c>)
 8002fba:	681c      	ldr	r4, [r3, #0]
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_InitTick+0x88>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	23fa      	movs	r3, #250	; 0xfa
 8002fc4:	0098      	lsls	r0, r3, #2
 8002fc6:	f7fd f89d 	bl	8000104 <__udivsi3>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	0019      	movs	r1, r3
 8002fce:	0020      	movs	r0, r4
 8002fd0:	f7fd f898 	bl	8000104 <__udivsi3>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f000 fbb3 	bl	8003742 <HAL_SYSTICK_Config>
 8002fdc:	1e03      	subs	r3, r0, #0
 8002fde:	d112      	bne.n	8003006 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d80a      	bhi.n	8002ffc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	425b      	negs	r3, r3
 8002fec:	2200      	movs	r2, #0
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 fb82 	bl	80036f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_InitTick+0x90>)
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e00d      	b.n	8003018 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002ffc:	230f      	movs	r3, #15
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e008      	b.n	8003018 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003006:	230f      	movs	r3, #15
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e003      	b.n	8003018 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003010:	230f      	movs	r3, #15
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2201      	movs	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003018:	230f      	movs	r3, #15
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	781b      	ldrb	r3, [r3, #0]
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b005      	add	sp, #20
 8003024:	bd90      	pop	{r4, r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	2000313c 	.word	0x2000313c
 800302c:	20003134 	.word	0x20003134
 8003030:	20003138 	.word	0x20003138

08003034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_IncTick+0x1c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	001a      	movs	r2, r3
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <HAL_IncTick+0x20>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	18d2      	adds	r2, r2, r3
 8003044:	4b03      	ldr	r3, [pc, #12]	; (8003054 <HAL_IncTick+0x20>)
 8003046:	601a      	str	r2, [r3, #0]
}
 8003048:	46c0      	nop			; (mov r8, r8)
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	2000313c 	.word	0x2000313c
 8003054:	200055fc 	.word	0x200055fc

08003058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  return uwTick;
 800305c:	4b02      	ldr	r3, [pc, #8]	; (8003068 <HAL_GetTick+0x10>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	0018      	movs	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	200055fc 	.word	0x200055fc

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff fff0 	bl	8003058 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3301      	adds	r3, #1
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	001a      	movs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	189b      	adds	r3, r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	f7ff ffe0 	bl	8003058 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b004      	add	sp, #16
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	2000313c 	.word	0x2000313c

080030b4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a06      	ldr	r2, [pc, #24]	; (80030dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40010000 	.word	0x40010000
 80030dc:	fffff9ff 	.word	0xfffff9ff

080030e0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80030e8:	4a05      	ldr	r2, [pc, #20]	; (8003100 <LL_EXTI_EnableIT_0_31+0x20>)
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	58d2      	ldr	r2, [r2, r3]
 80030ee:	4904      	ldr	r1, [pc, #16]	; (8003100 <LL_EXTI_EnableIT_0_31+0x20>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	508b      	str	r3, [r1, r2]
}
 80030f8:	46c0      	nop			; (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021800 	.word	0x40021800

08003104 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <LL_EXTI_DisableIT_0_31+0x24>)
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	58d3      	ldr	r3, [r2, r3]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	43d2      	mvns	r2, r2
 8003116:	4904      	ldr	r1, [pc, #16]	; (8003128 <LL_EXTI_DisableIT_0_31+0x24>)
 8003118:	4013      	ands	r3, r2
 800311a:	2280      	movs	r2, #128	; 0x80
 800311c:	508b      	str	r3, [r1, r2]
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b002      	add	sp, #8
 8003124:	bd80      	pop	{r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	40021800 	.word	0x40021800

0800312c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <LL_EXTI_EnableEvent_0_31+0x20>)
 8003136:	2384      	movs	r3, #132	; 0x84
 8003138:	58d2      	ldr	r2, [r2, r3]
 800313a:	4904      	ldr	r1, [pc, #16]	; (800314c <LL_EXTI_EnableEvent_0_31+0x20>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4313      	orrs	r3, r2
 8003140:	2284      	movs	r2, #132	; 0x84
 8003142:	508b      	str	r3, [r1, r2]

}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021800 	.word	0x40021800

08003150 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003158:	4a06      	ldr	r2, [pc, #24]	; (8003174 <LL_EXTI_DisableEvent_0_31+0x24>)
 800315a:	2384      	movs	r3, #132	; 0x84
 800315c:	58d3      	ldr	r3, [r2, r3]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	43d2      	mvns	r2, r2
 8003162:	4904      	ldr	r1, [pc, #16]	; (8003174 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003164:	4013      	ands	r3, r2
 8003166:	2284      	movs	r2, #132	; 0x84
 8003168:	508b      	str	r3, [r1, r2]
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40021800 	.word	0x40021800

08003178 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]

}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	46bd      	mov	sp, r7
 8003190:	b002      	add	sp, #8
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021800 	.word	0x40021800

08003198 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	43d9      	mvns	r1, r3
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]

}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b002      	add	sp, #8
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	40021800 	.word	0x40021800

080031bc <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021800 	.word	0x40021800

080031dc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40021800 	.word	0x40021800

08003200 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	40021800 	.word	0x40021800

0800321c <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	60da      	str	r2, [r3, #12]
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46bd      	mov	sp, r7
 800322e:	b002      	add	sp, #8
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	40021800 	.word	0x40021800

08003238 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	211f      	movs	r1, #31
 8003246:	187b      	adds	r3, r7, r1
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	e13d      	b.n	80034d6 <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0fdb      	lsrs	r3, r3, #31
 8003262:	07da      	lsls	r2, r3, #31
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	061b      	lsls	r3, r3, #24
 8003268:	429a      	cmp	r2, r3
 800326a:	d104      	bne.n	8003276 <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 800326c:	231f      	movs	r3, #31
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	2201      	movs	r2, #1
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	e12f      	b.n	80034d6 <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2229      	movs	r2, #41	; 0x29
 800327a:	5c9b      	ldrb	r3, [r3, r2]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2228      	movs	r2, #40	; 0x28
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	0018      	movs	r0, r3
 8003294:	f7ff fa10 	bl	80026b8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2230      	movs	r2, #48	; 0x30
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a85      	ldr	r2, [pc, #532]	; (80034e4 <HAL_COMP_Init+0x2ac>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	0019      	movs	r1, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	430a      	orrs	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d10d      	bne.n	8003306 <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 80032ea:	4b7f      	ldr	r3, [pc, #508]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b7e      	ldr	r3, [pc, #504]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80032f0:	497e      	ldr	r1, [pc, #504]	; (80034ec <HAL_COMP_Init+0x2b4>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 80032f6:	4b7c      	ldr	r3, [pc, #496]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b7b      	ldr	r3, [pc, #492]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80032fc:	2180      	movs	r1, #128	; 0x80
 80032fe:	0109      	lsls	r1, r1, #4
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	e01f      	b.n	8003346 <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	23c0      	movs	r3, #192	; 0xc0
 800330c:	015b      	lsls	r3, r3, #5
 800330e:	429a      	cmp	r2, r3
 8003310:	d10d      	bne.n	800332e <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003312:	4b75      	ldr	r3, [pc, #468]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b74      	ldr	r3, [pc, #464]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	0109      	lsls	r1, r1, #4
 800331c:	430a      	orrs	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003320:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4b70      	ldr	r3, [pc, #448]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003326:	4971      	ldr	r1, [pc, #452]	; (80034ec <HAL_COMP_Init+0x2b4>)
 8003328:	400a      	ands	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
 800332c:	e00b      	b.n	8003346 <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800332e:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4b6d      	ldr	r3, [pc, #436]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003334:	496d      	ldr	r1, [pc, #436]	; (80034ec <HAL_COMP_Init+0x2b4>)
 8003336:	400a      	ands	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800333a:	4b6b      	ldr	r3, [pc, #428]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003340:	496a      	ldr	r1, [pc, #424]	; (80034ec <HAL_COMP_Init+0x2b4>)
 8003342:	400a      	ands	r2, r1
 8003344:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	22a0      	movs	r2, #160	; 0xa0
 800334c:	01d2      	lsls	r2, r2, #7
 800334e:	4293      	cmp	r3, r2
 8003350:	d017      	beq.n	8003382 <HAL_COMP_Init+0x14a>
 8003352:	22a0      	movs	r2, #160	; 0xa0
 8003354:	01d2      	lsls	r2, r2, #7
 8003356:	4293      	cmp	r3, r2
 8003358:	d830      	bhi.n	80033bc <HAL_COMP_Init+0x184>
 800335a:	2b01      	cmp	r3, #1
 800335c:	d01f      	beq.n	800339e <HAL_COMP_Init+0x166>
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	01d2      	lsls	r2, r2, #7
 8003362:	4293      	cmp	r3, r2
 8003364:	d12a      	bne.n	80033bc <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003366:	4b60      	ldr	r3, [pc, #384]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	01c9      	lsls	r1, r1, #7
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003374:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 800337a:	495d      	ldr	r1, [pc, #372]	; (80034f0 <HAL_COMP_Init+0x2b8>)
 800337c:	400a      	ands	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
        break;
 8003380:	e029      	b.n	80033d6 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003382:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003388:	4959      	ldr	r1, [pc, #356]	; (80034f0 <HAL_COMP_Init+0x2b8>)
 800338a:	400a      	ands	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	01c9      	lsls	r1, r1, #7
 8003398:	430a      	orrs	r2, r1
 800339a:	605a      	str	r2, [r3, #4]
        break;
 800339c:	e01b      	b.n	80033d6 <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 800339e:	4b52      	ldr	r3, [pc, #328]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	01c9      	lsls	r1, r1, #7
 80033a8:	430a      	orrs	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	4b4d      	ldr	r3, [pc, #308]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	01c9      	lsls	r1, r1, #7
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
        break;
 80033ba:	e00c      	b.n	80033d6 <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80033bc:	4b4a      	ldr	r3, [pc, #296]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033c2:	494b      	ldr	r1, [pc, #300]	; (80034f0 <HAL_COMP_Init+0x2b8>)
 80033c4:	400a      	ands	r2, r1
 80033c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80033c8:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 80033ce:	4948      	ldr	r1, [pc, #288]	; (80034f0 <HAL_COMP_Init+0x2b8>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
        break;
 80033d4:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2230      	movs	r2, #48	; 0x30
 80033de:	4013      	ands	r3, r2
 80033e0:	d016      	beq.n	8003410 <HAL_COMP_Init+0x1d8>
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d113      	bne.n	8003410 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80033e8:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <HAL_COMP_Init+0x2bc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4942      	ldr	r1, [pc, #264]	; (80034f8 <HAL_COMP_Init+0x2c0>)
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fc fe88 	bl	8000104 <__udivsi3>
 80033f4:	0003      	movs	r3, r0
 80033f6:	001a      	movs	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003402:	e002      	b.n	800340a <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3b01      	subs	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f9      	bne.n	8003404 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <HAL_COMP_Init+0x2b0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d102      	bne.n	8003420 <HAL_COMP_Init+0x1e8>
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	029b      	lsls	r3, r3, #10
 800341e:	e001      	b.n	8003424 <HAL_COMP_Init+0x1ec>
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	02db      	lsls	r3, r3, #11
 8003424:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2203      	movs	r2, #3
 800342c:	4013      	ands	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2210      	movs	r2, #16
 8003436:	4013      	ands	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fe9b 	bl	8003178 <LL_EXTI_EnableRisingTrig_0_31>
 8003442:	e003      	b.n	800344c <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	0018      	movs	r0, r3
 8003448:	f7ff fea6 	bl	8003198 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2220      	movs	r2, #32
 8003452:	4013      	ands	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff feaf 	bl	80031bc <LL_EXTI_EnableFallingTrig_0_31>
 800345e:	e003      	b.n	8003468 <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff feba 	bl	80031dc <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fed6 	bl	800321c <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	0018      	movs	r0, r3
 8003474:	f7ff fec4 	bl	8003200 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2202      	movs	r2, #2
 800347e:	4013      	ands	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	0018      	movs	r0, r3
 8003486:	f7ff fe51 	bl	800312c <LL_EXTI_EnableEvent_0_31>
 800348a:	e003      	b.n	8003494 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff fe5e 	bl	8003150 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	d004      	beq.n	80034a8 <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff fe1d 	bl	80030e0 <LL_EXTI_EnableIT_0_31>
 80034a6:	e00c      	b.n	80034c2 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7ff fe2a 	bl	8003104 <LL_EXTI_DisableIT_0_31>
 80034b0:	e007      	b.n	80034c2 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f7ff fe4b 	bl	8003150 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	0018      	movs	r0, r3
 80034be:	f7ff fe21 	bl	8003104 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2229      	movs	r2, #41	; 0x29
 80034c6:	5c9b      	ldrb	r3, [r3, r2]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2229      	movs	r2, #41	; 0x29
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80034d6:	231f      	movs	r3, #31
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	781b      	ldrb	r3, [r3, #0]
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b008      	add	sp, #32
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	fe00740f 	.word	0xfe00740f
 80034e8:	40010200 	.word	0x40010200
 80034ec:	fffff7ff 	.word	0xfffff7ff
 80034f0:	ffffbfff 	.word	0xffffbfff
 80034f4:	20003134 	.word	0x20003134
 80034f8:	00030d40 	.word	0x00030d40

080034fc <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003504:	2300      	movs	r3, #0
 8003506:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	210f      	movs	r1, #15
 800350a:	187b      	adds	r3, r7, r1
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 8003516:	187b      	adds	r3, r7, r1
 8003518:	2201      	movs	r2, #1
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e034      	b.n	8003588 <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	0fdb      	lsrs	r3, r3, #31
 8003526:	07da      	lsls	r2, r3, #31
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	429a      	cmp	r2, r3
 800352e:	d104      	bne.n	800353a <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003530:	230f      	movs	r3, #15
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e026      	b.n	8003588 <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2229      	movs	r2, #41	; 0x29
 800353e:	5c9b      	ldrb	r3, [r3, r2]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b01      	cmp	r3, #1
 8003544:	d11c      	bne.n	8003580 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2101      	movs	r1, #1
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2229      	movs	r2, #41	; 0x29
 800355a:	2102      	movs	r1, #2
 800355c:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800355e:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_COMP_Start+0x9c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	490e      	ldr	r1, [pc, #56]	; (800359c <HAL_COMP_Start+0xa0>)
 8003564:	0018      	movs	r0, r3
 8003566:	f7fc fdcd 	bl	8000104 <__udivsi3>
 800356a:	0003      	movs	r3, r0
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003570:	e002      	b.n	8003578 <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3b01      	subs	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f9      	bne.n	8003572 <HAL_COMP_Start+0x76>
 800357e:	e003      	b.n	8003588 <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003580:	230f      	movs	r3, #15
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003588:	230f      	movs	r3, #15
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b004      	add	sp, #16
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	20003134 	.word	0x20003134
 800359c:	00030d40 	.word	0x00030d40

080035a0 <__NVIC_EnableIRQ>:
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	0002      	movs	r2, r0
 80035a8:	1dfb      	adds	r3, r7, #7
 80035aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b7f      	cmp	r3, #127	; 0x7f
 80035b2:	d809      	bhi.n	80035c8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	001a      	movs	r2, r3
 80035ba:	231f      	movs	r3, #31
 80035bc:	401a      	ands	r2, r3
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <__NVIC_EnableIRQ+0x30>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	4091      	lsls	r1, r2
 80035c4:	000a      	movs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
}
 80035c8:	46c0      	nop			; (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b002      	add	sp, #8
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	e000e100 	.word	0xe000e100

080035d4 <__NVIC_SetPriority>:
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	0002      	movs	r2, r0
 80035dc:	6039      	str	r1, [r7, #0]
 80035de:	1dfb      	adds	r3, r7, #7
 80035e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b7f      	cmp	r3, #127	; 0x7f
 80035e8:	d828      	bhi.n	800363c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035ea:	4a2f      	ldr	r2, [pc, #188]	; (80036a8 <__NVIC_SetPriority+0xd4>)
 80035ec:	1dfb      	adds	r3, r7, #7
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	089b      	lsrs	r3, r3, #2
 80035f4:	33c0      	adds	r3, #192	; 0xc0
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	589b      	ldr	r3, [r3, r2]
 80035fa:	1dfa      	adds	r2, r7, #7
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	0011      	movs	r1, r2
 8003600:	2203      	movs	r2, #3
 8003602:	400a      	ands	r2, r1
 8003604:	00d2      	lsls	r2, r2, #3
 8003606:	21ff      	movs	r1, #255	; 0xff
 8003608:	4091      	lsls	r1, r2
 800360a:	000a      	movs	r2, r1
 800360c:	43d2      	mvns	r2, r2
 800360e:	401a      	ands	r2, r3
 8003610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	019b      	lsls	r3, r3, #6
 8003616:	22ff      	movs	r2, #255	; 0xff
 8003618:	401a      	ands	r2, r3
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	0018      	movs	r0, r3
 8003620:	2303      	movs	r3, #3
 8003622:	4003      	ands	r3, r0
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003628:	481f      	ldr	r0, [pc, #124]	; (80036a8 <__NVIC_SetPriority+0xd4>)
 800362a:	1dfb      	adds	r3, r7, #7
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	b25b      	sxtb	r3, r3
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	430a      	orrs	r2, r1
 8003634:	33c0      	adds	r3, #192	; 0xc0
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	501a      	str	r2, [r3, r0]
}
 800363a:	e031      	b.n	80036a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <__NVIC_SetPriority+0xd8>)
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	0019      	movs	r1, r3
 8003644:	230f      	movs	r3, #15
 8003646:	400b      	ands	r3, r1
 8003648:	3b08      	subs	r3, #8
 800364a:	089b      	lsrs	r3, r3, #2
 800364c:	3306      	adds	r3, #6
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	3304      	adds	r3, #4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	1dfa      	adds	r2, r7, #7
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	0011      	movs	r1, r2
 800365c:	2203      	movs	r2, #3
 800365e:	400a      	ands	r2, r1
 8003660:	00d2      	lsls	r2, r2, #3
 8003662:	21ff      	movs	r1, #255	; 0xff
 8003664:	4091      	lsls	r1, r2
 8003666:	000a      	movs	r2, r1
 8003668:	43d2      	mvns	r2, r2
 800366a:	401a      	ands	r2, r3
 800366c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	401a      	ands	r2, r3
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	0018      	movs	r0, r3
 800367c:	2303      	movs	r3, #3
 800367e:	4003      	ands	r3, r0
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003684:	4809      	ldr	r0, [pc, #36]	; (80036ac <__NVIC_SetPriority+0xd8>)
 8003686:	1dfb      	adds	r3, r7, #7
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	001c      	movs	r4, r3
 800368c:	230f      	movs	r3, #15
 800368e:	4023      	ands	r3, r4
 8003690:	3b08      	subs	r3, #8
 8003692:	089b      	lsrs	r3, r3, #2
 8003694:	430a      	orrs	r2, r1
 8003696:	3306      	adds	r3, #6
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	18c3      	adds	r3, r0, r3
 800369c:	3304      	adds	r3, #4
 800369e:	601a      	str	r2, [r3, #0]
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b003      	add	sp, #12
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	e000e100 	.word	0xe000e100
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	2380      	movs	r3, #128	; 0x80
 80036be:	045b      	lsls	r3, r3, #17
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d301      	bcc.n	80036c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036c4:	2301      	movs	r3, #1
 80036c6:	e010      	b.n	80036ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c8:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <SysTick_Config+0x44>)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	3a01      	subs	r2, #1
 80036ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d0:	2301      	movs	r3, #1
 80036d2:	425b      	negs	r3, r3
 80036d4:	2103      	movs	r1, #3
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff ff7c 	bl	80035d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036dc:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <SysTick_Config+0x44>)
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <SysTick_Config+0x44>)
 80036e4:	2207      	movs	r2, #7
 80036e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b002      	add	sp, #8
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	e000e010 	.word	0xe000e010

080036f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	210f      	movs	r1, #15
 8003704:	187b      	adds	r3, r7, r1
 8003706:	1c02      	adds	r2, r0, #0
 8003708:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	187b      	adds	r3, r7, r1
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	b25b      	sxtb	r3, r3
 8003712:	0011      	movs	r1, r2
 8003714:	0018      	movs	r0, r3
 8003716:	f7ff ff5d 	bl	80035d4 <__NVIC_SetPriority>
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	0002      	movs	r2, r0
 800372a:	1dfb      	adds	r3, r7, #7
 800372c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b25b      	sxtb	r3, r3
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff ff33 	bl	80035a0 <__NVIC_EnableIRQ>
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f7ff ffaf 	bl	80036b0 <SysTick_Config>
 8003752:	0003      	movs	r3, r0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e077      	b.n	800385e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3d      	ldr	r2, [pc, #244]	; (8003868 <HAL_DMA_Init+0x10c>)
 8003774:	4694      	mov	ip, r2
 8003776:	4463      	add	r3, ip
 8003778:	2114      	movs	r1, #20
 800377a:	0018      	movs	r0, r3
 800377c:	f7fc fcc2 	bl	8000104 <__udivsi3>
 8003780:	0003      	movs	r3, r0
 8003782:	009a      	lsls	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2225      	movs	r2, #37	; 0x25
 800378c:	2102      	movs	r1, #2
 800378e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4934      	ldr	r1, [pc, #208]	; (800386c <HAL_DMA_Init+0x110>)
 800379c:	400a      	ands	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 fa37 	bl	8003c4c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	01db      	lsls	r3, r3, #7
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d102      	bne.n	80037f0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f8:	213f      	movs	r1, #63	; 0x3f
 80037fa:	400a      	ands	r2, r1
 80037fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003806:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d011      	beq.n	8003834 <HAL_DMA_Init+0xd8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b04      	cmp	r3, #4
 8003816:	d80d      	bhi.n	8003834 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fa42 	bl	8003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	e008      	b.n	8003846 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2225      	movs	r2, #37	; 0x25
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	0018      	movs	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	b002      	add	sp, #8
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	bffdfff8 	.word	0xbffdfff8
 800386c:	ffff800f 	.word	0xffff800f

08003870 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387e:	2317      	movs	r3, #23
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2224      	movs	r2, #36	; 0x24
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_DMA_Start_IT+0x24>
 8003890:	2302      	movs	r3, #2
 8003892:	e06f      	b.n	8003974 <HAL_DMA_Start_IT+0x104>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2225      	movs	r2, #37	; 0x25
 80038a0:	5c9b      	ldrb	r3, [r3, r2]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d157      	bne.n	8003958 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2225      	movs	r2, #37	; 0x25
 80038ac:	2102      	movs	r1, #2
 80038ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2101      	movs	r1, #1
 80038c2:	438a      	bics	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f97d 	bl	8003bcc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	210e      	movs	r1, #14
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e00f      	b.n	800390c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2104      	movs	r1, #4
 80038f8:	438a      	bics	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	210a      	movs	r1, #10
 8003908:	430a      	orrs	r2, r1
 800390a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	4013      	ands	r3, r2
 8003918:	d008      	beq.n	800392c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	0049      	lsls	r1, r1, #1
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0049      	lsls	r1, r1, #1
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2101      	movs	r1, #1
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	e00a      	b.n	800396e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2224      	movs	r2, #36	; 0x24
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003966:	2317      	movs	r3, #23
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800396e:	2317      	movs	r3, #23
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	781b      	ldrb	r3, [r3, #0]
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b006      	add	sp, #24
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	210f      	movs	r1, #15
 8003986:	187b      	adds	r3, r7, r1
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2225      	movs	r2, #37	; 0x25
 8003990:	5c9b      	ldrb	r3, [r3, r2]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d006      	beq.n	80039a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2204      	movs	r2, #4
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e049      	b.n	8003a3a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	210e      	movs	r1, #14
 80039b2:	438a      	bics	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	438a      	bics	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	491d      	ldr	r1, [pc, #116]	; (8003a48 <HAL_DMA_Abort_IT+0xcc>)
 80039d2:	400a      	ands	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_DMA_Abort_IT+0xd0>)
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	221c      	movs	r2, #28
 80039e0:	4013      	ands	r3, r2
 80039e2:	2201      	movs	r2, #1
 80039e4:	409a      	lsls	r2, r3
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_DMA_Abort_IT+0xd0>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	490f      	ldr	r1, [pc, #60]	; (8003a48 <HAL_DMA_Abort_IT+0xcc>)
 8003a0a:	400a      	ands	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003a16:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2225      	movs	r2, #37	; 0x25
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	; 0x24
 8003a24:	2100      	movs	r1, #0
 8003a26:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	0010      	movs	r0, r2
 8003a38:	4798      	blx	r3
    }
  }
  return status;
 8003a3a:	230f      	movs	r3, #15
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	781b      	ldrb	r3, [r3, #0]
}
 8003a40:	0018      	movs	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b004      	add	sp, #16
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	fffffeff 	.word	0xfffffeff
 8003a4c:	40020000 	.word	0x40020000

08003a50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003a58:	4b55      	ldr	r3, [pc, #340]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	221c      	movs	r2, #28
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2204      	movs	r2, #4
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	d027      	beq.n	8003aca <HAL_DMA_IRQHandler+0x7a>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d023      	beq.n	8003aca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d107      	bne.n	8003a9e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2104      	movs	r1, #4
 8003a9a:	438a      	bics	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	221c      	movs	r2, #28
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2204      	movs	r2, #4
 8003aac:	409a      	lsls	r2, r3
 8003aae:	4b40      	ldr	r3, [pc, #256]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d100      	bne.n	8003abe <HAL_DMA_IRQHandler+0x6e>
 8003abc:	e073      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	0010      	movs	r0, r2
 8003ac6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ac8:	e06d      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	221c      	movs	r2, #28
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	0013      	movs	r3, r2
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4013      	ands	r3, r2
 8003adc:	d02e      	beq.n	8003b3c <HAL_DMA_IRQHandler+0xec>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d02a      	beq.n	8003b3c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2220      	movs	r2, #32
 8003aee:	4013      	ands	r3, r2
 8003af0:	d10b      	bne.n	8003b0a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	210a      	movs	r1, #10
 8003afe:	438a      	bics	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2225      	movs	r2, #37	; 0x25
 8003b06:	2101      	movs	r1, #1
 8003b08:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	221c      	movs	r2, #28
 8003b14:	4013      	ands	r3, r2
 8003b16:	2202      	movs	r2, #2
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	2100      	movs	r1, #0
 8003b26:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d03a      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	0010      	movs	r0, r2
 8003b38:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003b3a:	e034      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	221c      	movs	r2, #28
 8003b42:	4013      	ands	r3, r2
 8003b44:	2208      	movs	r2, #8
 8003b46:	409a      	lsls	r2, r3
 8003b48:	0013      	movs	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d02b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x158>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2208      	movs	r2, #8
 8003b54:	4013      	ands	r3, r2
 8003b56:	d027      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	210e      	movs	r1, #14
 8003b64:	438a      	bics	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	221c      	movs	r2, #28
 8003b72:	4013      	ands	r3, r2
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <HAL_DMA_IRQHandler+0x160>)
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2225      	movs	r2, #37	; 0x25
 8003b88:	2101      	movs	r1, #1
 8003b8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46c0      	nop			; (mov r8, r8)
}
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b004      	add	sp, #16
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40020000 	.word	0x40020000

08003bb4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2225      	movs	r2, #37	; 0x25
 8003bc0:	5c9b      	ldrb	r3, [r3, r2]
 8003bc2:	b2db      	uxtb	r3, r3
}
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003be2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003bf4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003bf6:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <DMA_SetConfig+0x7c>)
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	221c      	movs	r2, #28
 8003c00:	4013      	ands	r3, r2
 8003c02:	2201      	movs	r2, #1
 8003c04:	409a      	lsls	r2, r3
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <DMA_SetConfig+0x7c>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d108      	bne.n	8003c2e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c2c:	e007      	b.n	8003c3e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	60da      	str	r2, [r3, #12]
}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b004      	add	sp, #16
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	40020000 	.word	0x40020000

08003c4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003c5c:	4694      	mov	ip, r2
 8003c5e:	4463      	add	r3, ip
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	001a      	movs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	001a      	movs	r2, r3
 8003c6e:	23ff      	movs	r3, #255	; 0xff
 8003c70:	4013      	ands	r3, r2
 8003c72:	3b08      	subs	r3, #8
 8003c74:	2114      	movs	r1, #20
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fc fa44 	bl	8000104 <__udivsi3>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a07      	ldr	r2, [pc, #28]	; (8003ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003c84:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	221f      	movs	r2, #31
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003c94:	46c0      	nop			; (mov r8, r8)
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b004      	add	sp, #16
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	10008200 	.word	0x10008200
 8003ca0:	40020880 	.word	0x40020880

08003ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	223f      	movs	r2, #63	; 0x3f
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003cba:	4694      	mov	ip, r2
 8003cbc:	4463      	add	r3, ip
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003cca:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	1000823f 	.word	0x1000823f
 8003ce8:	40020940 	.word	0x40020940

08003cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e147      	b.n	8003f8c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4091      	lsls	r1, r2
 8003d06:	000a      	movs	r2, r1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d100      	bne.n	8003d14 <HAL_GPIO_Init+0x28>
 8003d12:	e138      	b.n	8003f86 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d00b      	beq.n	8003d34 <HAL_GPIO_Init+0x48>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d007      	beq.n	8003d34 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d28:	2b11      	cmp	r3, #17
 8003d2a:	d003      	beq.n	8003d34 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b12      	cmp	r3, #18
 8003d32:	d130      	bne.n	8003d96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	409a      	lsls	r2, r3
 8003d42:	0013      	movs	r3, r2
 8003d44:	43da      	mvns	r2, r3
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	0013      	movs	r3, r2
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	0013      	movs	r3, r2
 8003d72:	43da      	mvns	r2, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4013      	ands	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	2201      	movs	r2, #1
 8003d82:	401a      	ands	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	409a      	lsls	r2, r3
 8003d88:	0013      	movs	r3, r2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2203      	movs	r2, #3
 8003da2:	409a      	lsls	r2, r3
 8003da4:	0013      	movs	r3, r2
 8003da6:	43da      	mvns	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	0013      	movs	r3, r2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0xea>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b12      	cmp	r3, #18
 8003dd4:	d123      	bne.n	8003e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	0092      	lsls	r2, r2, #2
 8003de0:	58d3      	ldr	r3, [r2, r3]
 8003de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2207      	movs	r2, #7
 8003de8:	4013      	ands	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	220f      	movs	r2, #15
 8003dee:	409a      	lsls	r2, r3
 8003df0:	0013      	movs	r3, r2
 8003df2:	43da      	mvns	r2, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2107      	movs	r1, #7
 8003e02:	400b      	ands	r3, r1
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	409a      	lsls	r2, r3
 8003e08:	0013      	movs	r3, r2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	08da      	lsrs	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3208      	adds	r2, #8
 8003e18:	0092      	lsls	r2, r2, #2
 8003e1a:	6939      	ldr	r1, [r7, #16]
 8003e1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	2203      	movs	r2, #3
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	0013      	movs	r3, r2
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	409a      	lsls	r2, r3
 8003e44:	0013      	movs	r3, r2
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	055b      	lsls	r3, r3, #21
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	d100      	bne.n	8003e60 <HAL_GPIO_Init+0x174>
 8003e5e:	e092      	b.n	8003f86 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003e60:	4a50      	ldr	r2, [pc, #320]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	3318      	adds	r3, #24
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	589b      	ldr	r3, [r3, r2]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2203      	movs	r2, #3
 8003e72:	4013      	ands	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	220f      	movs	r2, #15
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	0013      	movs	r3, r2
 8003e7c:	43da      	mvns	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	23a0      	movs	r3, #160	; 0xa0
 8003e88:	05db      	lsls	r3, r3, #23
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d013      	beq.n	8003eb6 <HAL_GPIO_Init+0x1ca>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_GPIO_Init+0x2bc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00d      	beq.n	8003eb2 <HAL_GPIO_Init+0x1c6>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a44      	ldr	r2, [pc, #272]	; (8003fac <HAL_GPIO_Init+0x2c0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <HAL_GPIO_Init+0x1c2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_GPIO_Init+0x2c4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_GPIO_Init+0x1be>
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e006      	b.n	8003eb8 <HAL_GPIO_Init+0x1cc>
 8003eaa:	2305      	movs	r3, #5
 8003eac:	e004      	b.n	8003eb8 <HAL_GPIO_Init+0x1cc>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e002      	b.n	8003eb8 <HAL_GPIO_Init+0x1cc>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <HAL_GPIO_Init+0x1cc>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	2103      	movs	r1, #3
 8003ebc:	400a      	ands	r2, r1
 8003ebe:	00d2      	lsls	r2, r2, #3
 8003ec0:	4093      	lsls	r3, r2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ec8:	4936      	ldr	r1, [pc, #216]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3318      	adds	r3, #24
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ed6:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	58d3      	ldr	r3, [r2, r3]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	2380      	movs	r3, #128	; 0x80
 8003eee:	025b      	lsls	r3, r3, #9
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003efc:	4929      	ldr	r1, [pc, #164]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003f04:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003f06:	2384      	movs	r3, #132	; 0x84
 8003f08:	58d3      	ldr	r3, [r2, r3]
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4013      	ands	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003f2a:	491e      	ldr	r1, [pc, #120]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003f2c:	2284      	movs	r2, #132	; 0x84
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	43da      	mvns	r2, r3
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	035b      	lsls	r3, r3, #13
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f56:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	43da      	mvns	r2, r3
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	039b      	lsls	r3, r3, #14
 8003f74:	4013      	ands	r3, r2
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f80:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <HAL_GPIO_Init+0x2b8>)
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	40da      	lsrs	r2, r3
 8003f94:	1e13      	subs	r3, r2, #0
 8003f96:	d000      	beq.n	8003f9a <HAL_GPIO_Init+0x2ae>
 8003f98:	e6b0      	b.n	8003cfc <HAL_GPIO_Init+0x10>
  }
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b006      	add	sp, #24
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021800 	.word	0x40021800
 8003fa8:	50000400 	.word	0x50000400
 8003fac:	50000800 	.word	0x50000800
 8003fb0:	50000c00 	.word	0x50000c00

08003fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e082      	b.n	80040cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2241      	movs	r2, #65	; 0x41
 8003fca:	5c9b      	ldrb	r3, [r3, r2]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d107      	bne.n	8003fe2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2240      	movs	r2, #64	; 0x40
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fe fba1 	bl	8002724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2241      	movs	r2, #65	; 0x41
 8003fe6:	2124      	movs	r1, #36	; 0x24
 8003fe8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	438a      	bics	r2, r1
 8003ff8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4934      	ldr	r1, [pc, #208]	; (80040d4 <HAL_I2C_Init+0x120>)
 8004004:	400a      	ands	r2, r1
 8004006:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4931      	ldr	r1, [pc, #196]	; (80040d8 <HAL_I2C_Init+0x124>)
 8004014:	400a      	ands	r2, r1
 8004016:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2180      	movs	r1, #128	; 0x80
 800402a:	0209      	lsls	r1, r1, #8
 800402c:	430a      	orrs	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	e007      	b.n	8004042 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2184      	movs	r1, #132	; 0x84
 800403c:	0209      	lsls	r1, r1, #8
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d104      	bne.n	8004054 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2280      	movs	r2, #128	; 0x80
 8004050:	0112      	lsls	r2, r2, #4
 8004052:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	491f      	ldr	r1, [pc, #124]	; (80040dc <HAL_I2C_Init+0x128>)
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	491a      	ldr	r1, [pc, #104]	; (80040d8 <HAL_I2C_Init+0x124>)
 8004070:	400a      	ands	r2, r1
 8004072:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	431a      	orrs	r2, r3
 800407e:	0011      	movs	r1, r2
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	021a      	lsls	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69d9      	ldr	r1, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2101      	movs	r1, #1
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2241      	movs	r2, #65	; 0x41
 80040b8:	2120      	movs	r1, #32
 80040ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2242      	movs	r2, #66	; 0x42
 80040c6:	2100      	movs	r1, #0
 80040c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b002      	add	sp, #8
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	f0ffffff 	.word	0xf0ffffff
 80040d8:	ffff7fff 	.word	0xffff7fff
 80040dc:	02008000 	.word	0x02008000

080040e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	68f9      	ldr	r1, [r7, #12]
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
  }
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	b004      	add	sp, #16
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	001a      	movs	r2, r3
 8004132:	2301      	movs	r3, #1
 8004134:	4013      	ands	r3, r2
 8004136:	d010      	beq.n	800415a <HAL_I2C_ER_IRQHandler+0x46>
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	09db      	lsrs	r3, r3, #7
 800413c:	001a      	movs	r2, r3
 800413e:	2301      	movs	r3, #1
 8004140:	4013      	ands	r3, r2
 8004142:	d00a      	beq.n	800415a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	2201      	movs	r2, #1
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2280      	movs	r2, #128	; 0x80
 8004156:	0052      	lsls	r2, r2, #1
 8004158:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	0a9b      	lsrs	r3, r3, #10
 800415e:	001a      	movs	r2, r3
 8004160:	2301      	movs	r3, #1
 8004162:	4013      	ands	r3, r2
 8004164:	d010      	beq.n	8004188 <HAL_I2C_ER_IRQHandler+0x74>
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	09db      	lsrs	r3, r3, #7
 800416a:	001a      	movs	r2, r3
 800416c:	2301      	movs	r3, #1
 800416e:	4013      	ands	r3, r2
 8004170:	d00a      	beq.n	8004188 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	2208      	movs	r2, #8
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	00d2      	lsls	r2, r2, #3
 8004186:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	0a5b      	lsrs	r3, r3, #9
 800418c:	001a      	movs	r2, r3
 800418e:	2301      	movs	r3, #1
 8004190:	4013      	ands	r3, r2
 8004192:	d010      	beq.n	80041b6 <HAL_I2C_ER_IRQHandler+0xa2>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	09db      	lsrs	r3, r3, #7
 8004198:	001a      	movs	r2, r3
 800419a:	2301      	movs	r3, #1
 800419c:	4013      	ands	r3, r2
 800419e:	d00a      	beq.n	80041b6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a4:	2202      	movs	r2, #2
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	220b      	movs	r2, #11
 80041c0:	4013      	ands	r3, r2
 80041c2:	d005      	beq.n	80041d0 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	0011      	movs	r1, r2
 80041ca:	0018      	movs	r0, r3
 80041cc:	f000 fbd8 	bl	8004980 <I2C_ITError>
  }
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b006      	add	sp, #24
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	0008      	movs	r0, r1
 8004202:	0011      	movs	r1, r2
 8004204:	1cfb      	adds	r3, r7, #3
 8004206:	1c02      	adds	r2, r0, #0
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	003b      	movs	r3, r7
 800420c:	1c0a      	adds	r2, r1, #0
 800420e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2240      	movs	r2, #64	; 0x40
 8004262:	5c9b      	ldrb	r3, [r3, r2]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <I2C_Slave_ISR_IT+0x24>
 8004268:	2302      	movs	r3, #2
 800426a:	e0fa      	b.n	8004462 <I2C_Slave_ISR_IT+0x21a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2240      	movs	r2, #64	; 0x40
 8004270:	2101      	movs	r1, #1
 8004272:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	001a      	movs	r2, r3
 800427a:	2301      	movs	r3, #1
 800427c:	4013      	ands	r3, r2
 800427e:	d00b      	beq.n	8004298 <I2C_Slave_ISR_IT+0x50>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	001a      	movs	r2, r3
 8004286:	2301      	movs	r3, #1
 8004288:	4013      	ands	r3, r2
 800428a:	d005      	beq.n	8004298 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	0011      	movs	r1, r2
 8004292:	0018      	movs	r0, r3
 8004294:	f000 f9f6 	bl	8004684 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	001a      	movs	r2, r3
 800429e:	2301      	movs	r3, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	d054      	beq.n	800434e <I2C_Slave_ISR_IT+0x106>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	001a      	movs	r2, r3
 80042aa:	2301      	movs	r3, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d04e      	beq.n	800434e <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d12d      	bne.n	8004316 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2241      	movs	r2, #65	; 0x41
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b28      	cmp	r3, #40	; 0x28
 80042c4:	d10b      	bne.n	80042de <I2C_Slave_ISR_IT+0x96>
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	049b      	lsls	r3, r3, #18
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d106      	bne.n	80042de <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f000 faf8 	bl	80048cc <I2C_ITListenCplt>
 80042dc:	e036      	b.n	800434c <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2241      	movs	r2, #65	; 0x41
 80042e2:	5c9b      	ldrb	r3, [r3, r2]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b29      	cmp	r3, #41	; 0x29
 80042e8:	d110      	bne.n	800430c <I2C_Slave_ISR_IT+0xc4>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4a5f      	ldr	r2, [pc, #380]	; (800446c <I2C_Slave_ISR_IT+0x224>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00c      	beq.n	800430c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2210      	movs	r2, #16
 80042f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f000 fc4a 	bl	8004b96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 f957 	bl	80045b8 <I2C_ITSlaveSeqCplt>
 800430a:	e01f      	b.n	800434c <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2210      	movs	r2, #16
 8004312:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004314:	e09d      	b.n	8004452 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2210      	movs	r2, #16
 800431c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	2204      	movs	r2, #4
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <I2C_Slave_ISR_IT+0xf4>
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	045b      	lsls	r3, r3, #17
 8004336:	429a      	cmp	r2, r3
 8004338:	d000      	beq.n	800433c <I2C_Slave_ISR_IT+0xf4>
 800433a:	e08a      	b.n	8004452 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	0011      	movs	r1, r2
 8004344:	0018      	movs	r0, r3
 8004346:	f000 fb1b 	bl	8004980 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800434a:	e082      	b.n	8004452 <I2C_Slave_ISR_IT+0x20a>
 800434c:	e081      	b.n	8004452 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	001a      	movs	r2, r3
 8004354:	2301      	movs	r3, #1
 8004356:	4013      	ands	r3, r2
 8004358:	d031      	beq.n	80043be <I2C_Slave_ISR_IT+0x176>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	001a      	movs	r2, r3
 8004360:	2301      	movs	r3, #1
 8004362:	4013      	ands	r3, r2
 8004364:	d02b      	beq.n	80043be <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d018      	beq.n	80043a2 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d154      	bne.n	8004456 <I2C_Slave_ISR_IT+0x20e>
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	4a2f      	ldr	r2, [pc, #188]	; (800446c <I2C_Slave_ISR_IT+0x224>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d050      	beq.n	8004456 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	0018      	movs	r0, r3
 80043b8:	f000 f8fe 	bl	80045b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043bc:	e04b      	b.n	8004456 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	08db      	lsrs	r3, r3, #3
 80043c2:	001a      	movs	r2, r3
 80043c4:	2301      	movs	r3, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	d00c      	beq.n	80043e4 <I2C_Slave_ISR_IT+0x19c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	08db      	lsrs	r3, r3, #3
 80043ce:	001a      	movs	r2, r3
 80043d0:	2301      	movs	r3, #1
 80043d2:	4013      	ands	r3, r2
 80043d4:	d006      	beq.n	80043e4 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	0011      	movs	r1, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	f000 f847 	bl	8004470 <I2C_ITAddrCplt>
 80043e2:	e039      	b.n	8004458 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	085b      	lsrs	r3, r3, #1
 80043e8:	001a      	movs	r2, r3
 80043ea:	2301      	movs	r3, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d033      	beq.n	8004458 <I2C_Slave_ISR_IT+0x210>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	001a      	movs	r2, r3
 80043f6:	2301      	movs	r3, #1
 80043f8:	4013      	ands	r3, r2
 80043fa:	d02d      	beq.n	8004458 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28
 8004436:	e00f      	b.n	8004458 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	045b      	lsls	r3, r3, #17
 800443e:	429a      	cmp	r2, r3
 8004440:	d002      	beq.n	8004448 <I2C_Slave_ISR_IT+0x200>
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	0018      	movs	r0, r3
 800444c:	f000 f8b4 	bl	80045b8 <I2C_ITSlaveSeqCplt>
 8004450:	e002      	b.n	8004458 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	e000      	b.n	8004458 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8004456:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2240      	movs	r2, #64	; 0x40
 800445c:	2100      	movs	r1, #0
 800445e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b006      	add	sp, #24
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	ffff0000 	.word	0xffff0000

08004470 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2241      	movs	r2, #65	; 0x41
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	001a      	movs	r2, r3
 8004484:	2328      	movs	r3, #40	; 0x28
 8004486:	4013      	ands	r3, r2
 8004488:	2b28      	cmp	r3, #40	; 0x28
 800448a:	d000      	beq.n	800448e <I2C_ITAddrCplt+0x1e>
 800448c:	e088      	b.n	80045a0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	0c1b      	lsrs	r3, r3, #16
 8004496:	b2da      	uxtb	r2, r3
 8004498:	250f      	movs	r5, #15
 800449a:	197b      	adds	r3, r7, r5
 800449c:	2101      	movs	r1, #1
 800449e:	400a      	ands	r2, r1
 80044a0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	0c1b      	lsrs	r3, r3, #16
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	200c      	movs	r0, #12
 80044ae:	183b      	adds	r3, r7, r0
 80044b0:	21fe      	movs	r1, #254	; 0xfe
 80044b2:	400a      	ands	r2, r1
 80044b4:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	240a      	movs	r4, #10
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	0592      	lsls	r2, r2, #22
 80044c4:	0d92      	lsrs	r2, r2, #22
 80044c6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	2308      	movs	r3, #8
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	21fe      	movs	r1, #254	; 0xfe
 80044d6:	400a      	ands	r2, r1
 80044d8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d148      	bne.n	8004574 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80044e2:	0021      	movs	r1, r4
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	09db      	lsrs	r3, r3, #7
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	183b      	adds	r3, r7, r0
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	4053      	eors	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	001a      	movs	r2, r3
 80044f6:	2306      	movs	r3, #6
 80044f8:	4013      	ands	r3, r2
 80044fa:	d120      	bne.n	800453e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80044fc:	183b      	adds	r3, r7, r0
 80044fe:	187a      	adds	r2, r7, r1
 8004500:	8812      	ldrh	r2, [r2, #0]
 8004502:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004512:	2b02      	cmp	r3, #2
 8004514:	d14c      	bne.n	80045b0 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2208      	movs	r2, #8
 8004522:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2240      	movs	r2, #64	; 0x40
 8004528:	2100      	movs	r1, #0
 800452a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800452c:	183b      	adds	r3, r7, r0
 800452e:	881a      	ldrh	r2, [r3, #0]
 8004530:	197b      	adds	r3, r7, r5
 8004532:	7819      	ldrb	r1, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	0018      	movs	r0, r3
 8004538:	f7ff fe5e 	bl	80041f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800453c:	e038      	b.n	80045b0 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800453e:	240c      	movs	r4, #12
 8004540:	193b      	adds	r3, r7, r4
 8004542:	2208      	movs	r2, #8
 8004544:	18ba      	adds	r2, r7, r2
 8004546:	8812      	ldrh	r2, [r2, #0]
 8004548:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0011      	movs	r1, r2
 8004552:	0018      	movs	r0, r3
 8004554:	f000 fb60 	bl	8004c18 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2240      	movs	r2, #64	; 0x40
 800455c:	2100      	movs	r1, #0
 800455e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004560:	193b      	adds	r3, r7, r4
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	230f      	movs	r3, #15
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	7819      	ldrb	r1, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f7ff fe43 	bl	80041f8 <HAL_I2C_AddrCallback>
}
 8004572:	e01d      	b.n	80045b0 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	021a      	lsls	r2, r3, #8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0011      	movs	r1, r2
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fb4b 	bl	8004c18 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	2100      	movs	r1, #0
 8004588:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800458a:	230c      	movs	r3, #12
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	881a      	ldrh	r2, [r3, #0]
 8004590:	230f      	movs	r3, #15
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	7819      	ldrb	r1, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff fe2d 	bl	80041f8 <HAL_I2C_AddrCallback>
}
 800459e:	e007      	b.n	80045b0 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2208      	movs	r2, #8
 80045a6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	2100      	movs	r1, #0
 80045ae:	5499      	strb	r1, [r3, r2]
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bdb0      	pop	{r4, r5, r7, pc}

080045b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2242      	movs	r2, #66	; 0x42
 80045cc:	2100      	movs	r1, #0
 80045ce:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	0b9b      	lsrs	r3, r3, #14
 80045d4:	001a      	movs	r2, r3
 80045d6:	2301      	movs	r3, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	d008      	beq.n	80045ee <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4925      	ldr	r1, [pc, #148]	; (800467c <I2C_ITSlaveSeqCplt+0xc4>)
 80045e8:	400a      	ands	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e00d      	b.n	800460a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	0bdb      	lsrs	r3, r3, #15
 80045f2:	001a      	movs	r2, r3
 80045f4:	2301      	movs	r3, #1
 80045f6:	4013      	ands	r3, r2
 80045f8:	d007      	beq.n	800460a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	491e      	ldr	r1, [pc, #120]	; (8004680 <I2C_ITSlaveSeqCplt+0xc8>)
 8004606:	400a      	ands	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2241      	movs	r2, #65	; 0x41
 800460e:	5c9b      	ldrb	r3, [r3, r2]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b29      	cmp	r3, #41	; 0x29
 8004614:	d114      	bne.n	8004640 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2241      	movs	r2, #65	; 0x41
 800461a:	2128      	movs	r1, #40	; 0x28
 800461c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2221      	movs	r2, #33	; 0x21
 8004622:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2101      	movs	r1, #1
 8004628:	0018      	movs	r0, r3
 800462a:	f000 faf5 	bl	8004c18 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2240      	movs	r2, #64	; 0x40
 8004632:	2100      	movs	r1, #0
 8004634:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f7ff fdcd 	bl	80041d8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800463e:	e019      	b.n	8004674 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2241      	movs	r2, #65	; 0x41
 8004644:	5c9b      	ldrb	r3, [r3, r2]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b2a      	cmp	r3, #42	; 0x2a
 800464a:	d113      	bne.n	8004674 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2241      	movs	r2, #65	; 0x41
 8004650:	2128      	movs	r1, #40	; 0x28
 8004652:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2222      	movs	r2, #34	; 0x22
 8004658:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2102      	movs	r1, #2
 800465e:	0018      	movs	r0, r3
 8004660:	f000 fada 	bl	8004c18 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	0018      	movs	r0, r3
 8004670:	f7ff fdba 	bl	80041e8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b004      	add	sp, #16
 800467a:	bd80      	pop	{r7, pc}
 800467c:	ffffbfff 	.word	0xffffbfff
 8004680:	ffff7fff 	.word	0xffff7fff

08004684 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800469a:	200f      	movs	r0, #15
 800469c:	183b      	adds	r3, r7, r0
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	2141      	movs	r1, #65	; 0x41
 80046a2:	5c52      	ldrb	r2, [r2, r1]
 80046a4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2220      	movs	r2, #32
 80046ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046ae:	183b      	adds	r3, r7, r0
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b21      	cmp	r3, #33	; 0x21
 80046b4:	d003      	beq.n	80046be <I2C_ITSlaveCplt+0x3a>
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b29      	cmp	r3, #41	; 0x29
 80046bc:	d109      	bne.n	80046d2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046be:	4a7d      	ldr	r2, [pc, #500]	; (80048b4 <I2C_ITSlaveCplt+0x230>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	0011      	movs	r1, r2
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 faa7 	bl	8004c18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2221      	movs	r2, #33	; 0x21
 80046ce:	631a      	str	r2, [r3, #48]	; 0x30
 80046d0:	e011      	b.n	80046f6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046d2:	220f      	movs	r2, #15
 80046d4:	18bb      	adds	r3, r7, r2
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b22      	cmp	r3, #34	; 0x22
 80046da:	d003      	beq.n	80046e4 <I2C_ITSlaveCplt+0x60>
 80046dc:	18bb      	adds	r3, r7, r2
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b2a      	cmp	r3, #42	; 0x2a
 80046e2:	d108      	bne.n	80046f6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046e4:	4a74      	ldr	r2, [pc, #464]	; (80048b8 <I2C_ITSlaveCplt+0x234>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 fa94 	bl	8004c18 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2222      	movs	r2, #34	; 0x22
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	0209      	lsls	r1, r1, #8
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	496a      	ldr	r1, [pc, #424]	; (80048bc <I2C_ITSlaveCplt+0x238>)
 8004714:	400a      	ands	r2, r1
 8004716:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 fa3b 	bl	8004b96 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	0b9b      	lsrs	r3, r3, #14
 8004724:	001a      	movs	r2, r3
 8004726:	2301      	movs	r3, #1
 8004728:	4013      	ands	r3, r2
 800472a:	d013      	beq.n	8004754 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4962      	ldr	r1, [pc, #392]	; (80048c0 <I2C_ITSlaveCplt+0x23c>)
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	2b00      	cmp	r3, #0
 8004742:	d020      	beq.n	8004786 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004752:	e018      	b.n	8004786 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	0bdb      	lsrs	r3, r3, #15
 8004758:	001a      	movs	r2, r3
 800475a:	2301      	movs	r3, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d012      	beq.n	8004786 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4956      	ldr	r1, [pc, #344]	; (80048c4 <I2C_ITSlaveCplt+0x240>)
 800476c:	400a      	ands	r2, r1
 800476e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	001a      	movs	r2, r3
 800478c:	2301      	movs	r3, #1
 800478e:	4013      	ands	r3, r2
 8004790:	d020      	beq.n	80047d4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2204      	movs	r2, #4
 8004796:	4393      	bics	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	2204      	movs	r2, #4
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2242      	movs	r2, #66	; 0x42
 80047ee:	2100      	movs	r1, #0
 80047f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d013      	beq.n	8004828 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0011      	movs	r1, r2
 8004808:	0018      	movs	r0, r3
 800480a:	f000 f8b9 	bl	8004980 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2241      	movs	r2, #65	; 0x41
 8004812:	5c9b      	ldrb	r3, [r3, r2]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b28      	cmp	r3, #40	; 0x28
 8004818:	d147      	bne.n	80048aa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	0011      	movs	r1, r2
 8004820:	0018      	movs	r0, r3
 8004822:	f000 f853 	bl	80048cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004826:	e040      	b.n	80048aa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <I2C_ITSlaveCplt+0x244>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d016      	beq.n	8004860 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0018      	movs	r0, r3
 8004836:	f7ff febf 	bl	80045b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <I2C_ITSlaveCplt+0x244>)
 800483e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2241      	movs	r2, #65	; 0x41
 8004844:	2120      	movs	r1, #32
 8004846:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7ff fcdd 	bl	8004218 <HAL_I2C_ListenCpltCallback>
}
 800485e:	e024      	b.n	80048aa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2241      	movs	r2, #65	; 0x41
 8004864:	5c9b      	ldrb	r3, [r3, r2]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b22      	cmp	r3, #34	; 0x22
 800486a:	d10f      	bne.n	800488c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2241      	movs	r2, #65	; 0x41
 8004870:	2120      	movs	r1, #32
 8004872:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	2100      	movs	r1, #0
 8004880:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	0018      	movs	r0, r3
 8004886:	f7ff fcaf 	bl	80041e8 <HAL_I2C_SlaveRxCpltCallback>
}
 800488a:	e00e      	b.n	80048aa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2241      	movs	r2, #65	; 0x41
 8004890:	2120      	movs	r1, #32
 8004892:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2240      	movs	r2, #64	; 0x40
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff fc97 	bl	80041d8 <HAL_I2C_SlaveTxCpltCallback>
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b006      	add	sp, #24
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	00008001 	.word	0x00008001
 80048b8:	00008002 	.word	0x00008002
 80048bc:	fe00e800 	.word	0xfe00e800
 80048c0:	ffffbfff 	.word	0xffffbfff
 80048c4:	ffff7fff 	.word	0xffff7fff
 80048c8:	ffff0000 	.word	0xffff0000

080048cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <I2C_ITListenCplt+0xac>)
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2241      	movs	r2, #65	; 0x41
 80048e6:	2120      	movs	r1, #32
 80048e8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2242      	movs	r2, #66	; 0x42
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	001a      	movs	r2, r3
 80048fe:	2301      	movs	r3, #1
 8004900:	4013      	ands	r3, r2
 8004902:	d022      	beq.n	800494a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d012      	beq.n	800494a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	2204      	movs	r2, #4
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800494a:	4a0c      	ldr	r2, [pc, #48]	; (800497c <I2C_ITListenCplt+0xb0>)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	0011      	movs	r1, r2
 8004950:	0018      	movs	r0, r3
 8004952:	f000 f961 	bl	8004c18 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2210      	movs	r2, #16
 800495c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2240      	movs	r2, #64	; 0x40
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	0018      	movs	r0, r3
 800496a:	f7ff fc55 	bl	8004218 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b002      	add	sp, #8
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	ffff0000 	.word	0xffff0000
 800497c:	00008003 	.word	0x00008003

08004980 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800498a:	200f      	movs	r0, #15
 800498c:	183b      	adds	r3, r7, r0
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	2141      	movs	r1, #65	; 0x41
 8004992:	5c52      	ldrb	r2, [r2, r1]
 8004994:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2242      	movs	r2, #66	; 0x42
 800499a:	2100      	movs	r1, #0
 800499c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a62      	ldr	r2, [pc, #392]	; (8004b2c <I2C_ITError+0x1ac>)
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80049b6:	183b      	adds	r3, r7, r0
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b28      	cmp	r3, #40	; 0x28
 80049bc:	d007      	beq.n	80049ce <I2C_ITError+0x4e>
 80049be:	183b      	adds	r3, r7, r0
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b29      	cmp	r3, #41	; 0x29
 80049c4:	d003      	beq.n	80049ce <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80049c6:	183b      	adds	r3, r7, r0
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b2a      	cmp	r3, #42	; 0x2a
 80049cc:	d10c      	bne.n	80049e8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2103      	movs	r1, #3
 80049d2:	0018      	movs	r0, r3
 80049d4:	f000 f920 	bl	8004c18 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2241      	movs	r2, #65	; 0x41
 80049dc:	2128      	movs	r1, #40	; 0x28
 80049de:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a53      	ldr	r2, [pc, #332]	; (8004b30 <I2C_ITError+0x1b0>)
 80049e4:	635a      	str	r2, [r3, #52]	; 0x34
 80049e6:	e012      	b.n	8004a0e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049e8:	4a52      	ldr	r2, [pc, #328]	; (8004b34 <I2C_ITError+0x1b4>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	0011      	movs	r1, r2
 80049ee:	0018      	movs	r0, r3
 80049f0:	f000 f912 	bl	8004c18 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2241      	movs	r2, #65	; 0x41
 80049f8:	5c9b      	ldrb	r3, [r3, r2]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b60      	cmp	r3, #96	; 0x60
 80049fe:	d003      	beq.n	8004a08 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2241      	movs	r2, #65	; 0x41
 8004a04:	2120      	movs	r1, #32
 8004a06:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a12:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d03b      	beq.n	8004a94 <I2C_ITError+0x114>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b11      	cmp	r3, #17
 8004a20:	d002      	beq.n	8004a28 <I2C_ITError+0xa8>
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b21      	cmp	r3, #33	; 0x21
 8004a26:	d135      	bne.n	8004a94 <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	01db      	lsls	r3, r3, #7
 8004a32:	401a      	ands	r2, r3
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	01db      	lsls	r3, r3, #7
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d107      	bne.n	8004a4c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	493c      	ldr	r1, [pc, #240]	; (8004b38 <I2C_ITError+0x1b8>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7ff f8af 	bl	8003bb4 <HAL_DMA_GetState>
 8004a56:	0003      	movs	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d016      	beq.n	8004a8a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	4a36      	ldr	r2, [pc, #216]	; (8004b3c <I2C_ITError+0x1bc>)
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2240      	movs	r2, #64	; 0x40
 8004a68:	2100      	movs	r1, #0
 8004a6a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	0018      	movs	r0, r3
 8004a72:	f7fe ff83 	bl	800397c <HAL_DMA_Abort_IT>
 8004a76:	1e03      	subs	r3, r0, #0
 8004a78:	d051      	beq.n	8004b1e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a84:	0018      	movs	r0, r3
 8004a86:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a88:	e049      	b.n	8004b1e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 f859 	bl	8004b44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a92:	e044      	b.n	8004b1e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d03b      	beq.n	8004b14 <I2C_ITError+0x194>
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b12      	cmp	r3, #18
 8004aa0:	d002      	beq.n	8004aa8 <I2C_ITError+0x128>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b22      	cmp	r3, #34	; 0x22
 8004aa6:	d135      	bne.n	8004b14 <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d107      	bne.n	8004acc <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	491e      	ldr	r1, [pc, #120]	; (8004b40 <I2C_ITError+0x1c0>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f7ff f86f 	bl	8003bb4 <HAL_DMA_GetState>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d016      	beq.n	8004b0a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <I2C_ITError+0x1bc>)
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	2100      	movs	r1, #0
 8004aea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7fe ff43 	bl	800397c <HAL_DMA_Abort_IT>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d013      	beq.n	8004b22 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b04:	0018      	movs	r0, r3
 8004b06:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b08:	e00b      	b.n	8004b22 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 f819 	bl	8004b44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b12:	e006      	b.n	8004b22 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 f814 	bl	8004b44 <I2C_TreatErrorCallback>
  }
}
 8004b1c:	e002      	b.n	8004b24 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	e000      	b.n	8004b24 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b22:	46c0      	nop			; (mov r8, r8)
}
 8004b24:	46c0      	nop			; (mov r8, r8)
 8004b26:	46bd      	mov	sp, r7
 8004b28:	b004      	add	sp, #16
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	ffff0000 	.word	0xffff0000
 8004b30:	08004249 	.word	0x08004249
 8004b34:	00008003 	.word	0x00008003
 8004b38:	ffffbfff 	.word	0xffffbfff
 8004b3c:	08004bdb 	.word	0x08004bdb
 8004b40:	ffff7fff 	.word	0xffff7fff

08004b44 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2241      	movs	r2, #65	; 0x41
 8004b50:	5c9b      	ldrb	r3, [r3, r2]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b60      	cmp	r3, #96	; 0x60
 8004b56:	d10f      	bne.n	8004b78 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2241      	movs	r2, #65	; 0x41
 8004b5c:	2120      	movs	r1, #32
 8004b5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f7ff fb61 	bl	8004238 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b76:	e00a      	b.n	8004b8e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2240      	movs	r2, #64	; 0x40
 8004b82:	2100      	movs	r1, #0
 8004b84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff fb4d 	bl	8004228 <HAL_I2C_ErrorCallback>
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b002      	add	sp, #8
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d103      	bne.n	8004bb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d007      	beq.n	8004bd2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	619a      	str	r2, [r3, #24]
  }
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b002      	add	sp, #8
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	2200      	movs	r2, #0
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff ff9a 	bl	8004b44 <I2C_TreatErrorCallback>
}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b004      	add	sp, #16
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	000a      	movs	r2, r1
 8004c22:	1cbb      	adds	r3, r7, #2
 8004c24:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c2a:	1cbb      	adds	r3, r7, #2
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4013      	ands	r3, r2
 8004c32:	d010      	beq.n	8004c56 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2242      	movs	r2, #66	; 0x42
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2241      	movs	r2, #65	; 0x41
 8004c40:	5c9b      	ldrb	r3, [r3, r2]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	001a      	movs	r2, r3
 8004c46:	2328      	movs	r3, #40	; 0x28
 8004c48:	4013      	ands	r3, r2
 8004c4a:	2b28      	cmp	r3, #40	; 0x28
 8004c4c:	d003      	beq.n	8004c56 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	22b0      	movs	r2, #176	; 0xb0
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c56:	1cbb      	adds	r3, r7, #2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d010      	beq.n	8004c82 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2244      	movs	r2, #68	; 0x44
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2241      	movs	r2, #65	; 0x41
 8004c6c:	5c9b      	ldrb	r3, [r3, r2]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	001a      	movs	r2, r3
 8004c72:	2328      	movs	r3, #40	; 0x28
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b28      	cmp	r3, #40	; 0x28
 8004c78:	d003      	beq.n	8004c82 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	22b0      	movs	r2, #176	; 0xb0
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c82:	1cbb      	adds	r3, r7, #2
 8004c84:	2200      	movs	r2, #0
 8004c86:	5e9b      	ldrsh	r3, [r3, r2]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	da03      	bge.n	8004c94 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	22b8      	movs	r2, #184	; 0xb8
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c94:	1cbb      	adds	r3, r7, #2
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d103      	bne.n	8004ca4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2290      	movs	r2, #144	; 0x90
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ca4:	1cbb      	adds	r3, r7, #2
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d103      	bne.n	8004cb4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004cb4:	1cbb      	adds	r3, r7, #2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	d103      	bne.n	8004cc4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	43d9      	mvns	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	601a      	str	r2, [r3, #0]
}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	b004      	add	sp, #16
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2241      	movs	r2, #65	; 0x41
 8004cee:	5c9b      	ldrb	r3, [r3, r2]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d138      	bne.n	8004d68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	5c9b      	ldrb	r3, [r3, r2]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e032      	b.n	8004d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2240      	movs	r2, #64	; 0x40
 8004d08:	2101      	movs	r1, #1
 8004d0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2241      	movs	r2, #65	; 0x41
 8004d10:	2124      	movs	r1, #36	; 0x24
 8004d12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	438a      	bics	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4911      	ldr	r1, [pc, #68]	; (8004d74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2101      	movs	r1, #1
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2241      	movs	r2, #65	; 0x41
 8004d58:	2120      	movs	r1, #32
 8004d5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2240      	movs	r2, #64	; 0x40
 8004d60:	2100      	movs	r1, #0
 8004d62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e000      	b.n	8004d6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
  }
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b002      	add	sp, #8
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			; (mov r8, r8)
 8004d74:	ffffefff 	.word	0xffffefff

08004d78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2241      	movs	r2, #65	; 0x41
 8004d86:	5c9b      	ldrb	r3, [r3, r2]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d139      	bne.n	8004e02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	5c9b      	ldrb	r3, [r3, r2]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e033      	b.n	8004e04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	2101      	movs	r1, #1
 8004da2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2241      	movs	r2, #65	; 0x41
 8004da8:	2124      	movs	r1, #36	; 0x24
 8004daa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2101      	movs	r1, #1
 8004db8:	438a      	bics	r2, r1
 8004dba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2241      	movs	r2, #65	; 0x41
 8004df2:	2120      	movs	r1, #32
 8004df4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2240      	movs	r2, #64	; 0x40
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	0018      	movs	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b004      	add	sp, #16
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	fffff0ff 	.word	0xfffff0ff

08004e10 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e0e5      	b.n	8004fee <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2235      	movs	r2, #53	; 0x35
 8004e26:	5c9b      	ldrb	r3, [r3, r2]
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2234      	movs	r2, #52	; 0x34
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7fd fcc7 	bl	80027cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2235      	movs	r2, #53	; 0x35
 8004e42:	2102      	movs	r1, #2
 8004e44:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4969      	ldr	r1, [pc, #420]	; (8004ff8 <HAL_I2S_Init+0x1e8>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d100      	bne.n	8004e68 <HAL_I2S_Init+0x58>
 8004e66:	e076      	b.n	8004f56 <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004e70:	2310      	movs	r3, #16
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e001      	b.n	8004e7a <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004e76:	2320      	movs	r3, #32
 8004e78:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d802      	bhi.n	8004e88 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f001 f865 	bl	8005f5c <HAL_RCCEx_GetPeriphCLKFreq>
 8004e92:	0003      	movs	r3, r0
 8004e94:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d131      	bne.n	8004f06 <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d016      	beq.n	8004ed8 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7fb f927 	bl	8000104 <__udivsi3>
 8004eb6:	0003      	movs	r3, r0
 8004eb8:	001a      	movs	r2, r3
 8004eba:	0013      	movs	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	001a      	movs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	0019      	movs	r1, r3
 8004eca:	0010      	movs	r0, r2
 8004ecc:	f7fb f91a 	bl	8000104 <__udivsi3>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	3305      	adds	r3, #5
 8004ed4:	613b      	str	r3, [r7, #16]
 8004ed6:	e02a      	b.n	8004f2e <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	0019      	movs	r1, r3
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f7fb f910 	bl	8000104 <__udivsi3>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	001a      	movs	r2, r3
 8004ee8:	0013      	movs	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	0010      	movs	r0, r2
 8004efa:	f7fb f903 	bl	8000104 <__udivsi3>
 8004efe:	0003      	movs	r3, r0
 8004f00:	3305      	adds	r3, #5
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	e013      	b.n	8004f2e <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004f06:	6979      	ldr	r1, [r7, #20]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7fb f8fb 	bl	8000104 <__udivsi3>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	001a      	movs	r2, r3
 8004f12:	0013      	movs	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	001a      	movs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	0019      	movs	r1, r3
 8004f22:	0010      	movs	r0, r2
 8004f24:	f7fb f8ee 	bl	8000104 <__udivsi3>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	3305      	adds	r3, #5
 8004f2c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	210a      	movs	r1, #10
 8004f32:	0018      	movs	r0, r3
 8004f34:	f7fb f8e6 	bl	8000104 <__udivsi3>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	61bb      	str	r3, [r7, #24]
 8004f54:	e003      	b.n	8004f5e <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004f56:	2302      	movs	r3, #2
 8004f58:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d902      	bls.n	8004f6a <HAL_I2S_Init+0x15a>
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2bff      	cmp	r3, #255	; 0xff
 8004f68:	d907      	bls.n	8004f7a <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	2210      	movs	r2, #16
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e039      	b.n	8004fee <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	0011      	movs	r1, r2
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_I2S_Init+0x1e8>)
 8004f96:	401a      	ands	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4319      	orrs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	4319      	orrs	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	0109      	lsls	r1, r1, #4
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b30      	cmp	r3, #48	; 0x30
 8004fc2:	d003      	beq.n	8004fcc <HAL_I2S_Init+0x1bc>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2bb0      	cmp	r3, #176	; 0xb0
 8004fca:	d108      	bne.n	8004fde <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69da      	ldr	r2, [r3, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2180      	movs	r1, #128	; 0x80
 8004fd8:	0149      	lsls	r1, r1, #5
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2235      	movs	r2, #53	; 0x35
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	0018      	movs	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	b008      	add	sp, #32
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	fffff040 	.word	0xfffff040

08004ffc <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	001a      	movs	r2, r3
 800501a:	2301      	movs	r3, #1
 800501c:	4013      	ands	r3, r2
 800501e:	d10e      	bne.n	800503e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2201      	movs	r2, #1
 8005024:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8005026:	d00a      	beq.n	800503e <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	099b      	lsrs	r3, r3, #6
 800502c:	001a      	movs	r2, r3
 800502e:	2301      	movs	r3, #1
 8005030:	4013      	ands	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0018      	movs	r0, r3
 8005038:	f000 f892 	bl	8005160 <I2S_Receive_IT>
    return;
 800503c:	e046      	b.n	80050cc <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	001a      	movs	r2, r3
 8005044:	2301      	movs	r3, #1
 8005046:	4013      	ands	r3, r2
 8005048:	d00a      	beq.n	8005060 <HAL_I2S_IRQHandler+0x64>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	09db      	lsrs	r3, r3, #7
 800504e:	001a      	movs	r2, r3
 8005050:	2301      	movs	r3, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 f852 	bl	8005102 <I2S_Transmit_IT>
    return;
 800505e:	e035      	b.n	80050cc <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	001a      	movs	r2, r3
 8005066:	2301      	movs	r3, #1
 8005068:	4013      	ands	r3, r2
 800506a:	d02f      	beq.n	80050cc <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	099b      	lsrs	r3, r3, #6
 8005070:	001a      	movs	r2, r3
 8005072:	2301      	movs	r3, #1
 8005074:	4013      	ands	r3, r2
 8005076:	d00d      	beq.n	8005094 <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2160      	movs	r1, #96	; 0x60
 8005084:	438a      	bics	r2, r1
 8005086:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	2202      	movs	r2, #2
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	08db      	lsrs	r3, r3, #3
 8005098:	001a      	movs	r2, r3
 800509a:	2301      	movs	r3, #1
 800509c:	4013      	ands	r3, r2
 800509e:	d00d      	beq.n	80050bc <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	21a0      	movs	r1, #160	; 0xa0
 80050ac:	438a      	bics	r2, r1
 80050ae:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	2204      	movs	r2, #4
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2235      	movs	r2, #53	; 0x35
 80050c0:	2101      	movs	r1, #1
 80050c2:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 f813 	bl	80050f2 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050cc:	46bd      	mov	sp, r7
 80050ce:	b004      	add	sp, #16
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	46bd      	mov	sp, r7
 80050de:	b002      	add	sp, #8
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b082      	sub	sp, #8
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b002      	add	sp, #8
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b002      	add	sp, #8
 8005100:	bd80      	pop	{r7, pc}

08005102 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	1c9a      	adds	r2, r3, #2
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	21a0      	movs	r1, #160	; 0xa0
 8005144:	438a      	bics	r2, r1
 8005146:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2235      	movs	r2, #53	; 0x35
 800514c:	2101      	movs	r1, #1
 800514e:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0018      	movs	r0, r3
 8005154:	f7ff ffbd 	bl	80050d2 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}

08005160 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	b292      	uxth	r2, r2
 8005174:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2160      	movs	r1, #96	; 0x60
 80051a4:	438a      	bics	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2235      	movs	r2, #53	; 0x35
 80051ac:	2101      	movs	r1, #1
 80051ae:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7ff ff95 	bl	80050e2 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b002      	add	sp, #8
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	0019      	movs	r1, r3
 80051d2:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d11f      	bne.n	8005224 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80051e4:	4b14      	ldr	r3, [pc, #80]	; (8005238 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	0013      	movs	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	189b      	adds	r3, r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4912      	ldr	r1, [pc, #72]	; (800523c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7fa ff86 	bl	8000104 <__udivsi3>
 80051f8:	0003      	movs	r3, r0
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051fe:	e008      	b.n	8005212 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3b01      	subs	r3, #1
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e001      	b.n	8005212 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e009      	b.n	8005226 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	401a      	ands	r2, r3
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	429a      	cmp	r2, r3
 8005222:	d0ed      	beq.n	8005200 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b004      	add	sp, #16
 800522c:	bd80      	pop	{r7, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	40007000 	.word	0x40007000
 8005234:	fffff9ff 	.word	0xfffff9ff
 8005238:	20003134 	.word	0x20003134
 800523c:	000f4240 	.word	0x000f4240

08005240 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005244:	4b03      	ldr	r3, [pc, #12]	; (8005254 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	23e0      	movs	r3, #224	; 0xe0
 800524a:	01db      	lsls	r3, r3, #7
 800524c:	4013      	ands	r3, r2
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40021000 	.word	0x40021000

08005258 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e304      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2201      	movs	r2, #1
 8005270:	4013      	ands	r3, r2
 8005272:	d100      	bne.n	8005276 <HAL_RCC_OscConfig+0x1e>
 8005274:	e07c      	b.n	8005370 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005276:	4bc3      	ldr	r3, [pc, #780]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2238      	movs	r2, #56	; 0x38
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005280:	4bc0      	ldr	r3, [pc, #768]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2203      	movs	r2, #3
 8005286:	4013      	ands	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b10      	cmp	r3, #16
 800528e:	d102      	bne.n	8005296 <HAL_RCC_OscConfig+0x3e>
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d002      	beq.n	800529c <HAL_RCC_OscConfig+0x44>
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d10b      	bne.n	80052b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529c:	4bb9      	ldr	r3, [pc, #740]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	4013      	ands	r3, r2
 80052a6:	d062      	beq.n	800536e <HAL_RCC_OscConfig+0x116>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d15e      	bne.n	800536e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e2df      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	025b      	lsls	r3, r3, #9
 80052bc:	429a      	cmp	r2, r3
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_OscConfig+0x78>
 80052c0:	4bb0      	ldr	r3, [pc, #704]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4baf      	ldr	r3, [pc, #700]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052c6:	2180      	movs	r1, #128	; 0x80
 80052c8:	0249      	lsls	r1, r1, #9
 80052ca:	430a      	orrs	r2, r1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e020      	b.n	8005312 <HAL_RCC_OscConfig+0xba>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	23a0      	movs	r3, #160	; 0xa0
 80052d6:	02db      	lsls	r3, r3, #11
 80052d8:	429a      	cmp	r2, r3
 80052da:	d10e      	bne.n	80052fa <HAL_RCC_OscConfig+0xa2>
 80052dc:	4ba9      	ldr	r3, [pc, #676]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4ba8      	ldr	r3, [pc, #672]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052e2:	2180      	movs	r1, #128	; 0x80
 80052e4:	02c9      	lsls	r1, r1, #11
 80052e6:	430a      	orrs	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	4ba6      	ldr	r3, [pc, #664]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	4ba5      	ldr	r3, [pc, #660]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	0249      	lsls	r1, r1, #9
 80052f4:	430a      	orrs	r2, r1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e00b      	b.n	8005312 <HAL_RCC_OscConfig+0xba>
 80052fa:	4ba2      	ldr	r3, [pc, #648]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4ba1      	ldr	r3, [pc, #644]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005300:	49a1      	ldr	r1, [pc, #644]	; (8005588 <HAL_RCC_OscConfig+0x330>)
 8005302:	400a      	ands	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	4b9f      	ldr	r3, [pc, #636]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	4b9e      	ldr	r3, [pc, #632]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800530c:	499f      	ldr	r1, [pc, #636]	; (800558c <HAL_RCC_OscConfig+0x334>)
 800530e:	400a      	ands	r2, r1
 8005310:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d014      	beq.n	8005344 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531a:	f7fd fe9d 	bl	8003058 <HAL_GetTick>
 800531e:	0003      	movs	r3, r0
 8005320:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005324:	f7fd fe98 	bl	8003058 <HAL_GetTick>
 8005328:	0002      	movs	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e29e      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005336:	4b93      	ldr	r3, [pc, #588]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	4013      	ands	r3, r2
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0xcc>
 8005342:	e015      	b.n	8005370 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fd fe88 	bl	8003058 <HAL_GetTick>
 8005348:	0003      	movs	r3, r0
 800534a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534c:	e008      	b.n	8005360 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800534e:	f7fd fe83 	bl	8003058 <HAL_GetTick>
 8005352:	0002      	movs	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	; 0x64
 800535a:	d901      	bls.n	8005360 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e289      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005360:	4b88      	ldr	r3, [pc, #544]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2380      	movs	r3, #128	; 0x80
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	4013      	ands	r3, r2
 800536a:	d1f0      	bne.n	800534e <HAL_RCC_OscConfig+0xf6>
 800536c:	e000      	b.n	8005370 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800536e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2202      	movs	r2, #2
 8005376:	4013      	ands	r3, r2
 8005378:	d100      	bne.n	800537c <HAL_RCC_OscConfig+0x124>
 800537a:	e099      	b.n	80054b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537c:	4b81      	ldr	r3, [pc, #516]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2238      	movs	r2, #56	; 0x38
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005386:	4b7f      	ldr	r3, [pc, #508]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2203      	movs	r2, #3
 800538c:	4013      	ands	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b10      	cmp	r3, #16
 8005394:	d102      	bne.n	800539c <HAL_RCC_OscConfig+0x144>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d002      	beq.n	80053a2 <HAL_RCC_OscConfig+0x14a>
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d135      	bne.n	800540e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053a2:	4b78      	ldr	r3, [pc, #480]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4013      	ands	r3, r2
 80053ac:	d005      	beq.n	80053ba <HAL_RCC_OscConfig+0x162>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e25c      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ba:	4b72      	ldr	r3, [pc, #456]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4a74      	ldr	r2, [pc, #464]	; (8005590 <HAL_RCC_OscConfig+0x338>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	0019      	movs	r1, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	021a      	lsls	r2, r3, #8
 80053ca:	4b6e      	ldr	r3, [pc, #440]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d112      	bne.n	80053fc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80053d6:	4b6b      	ldr	r3, [pc, #428]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6e      	ldr	r2, [pc, #440]	; (8005594 <HAL_RCC_OscConfig+0x33c>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	4b67      	ldr	r3, [pc, #412]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80053e6:	430a      	orrs	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80053ea:	4b66      	ldr	r3, [pc, #408]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	0adb      	lsrs	r3, r3, #11
 80053f0:	2207      	movs	r2, #7
 80053f2:	4013      	ands	r3, r2
 80053f4:	4a68      	ldr	r2, [pc, #416]	; (8005598 <HAL_RCC_OscConfig+0x340>)
 80053f6:	40da      	lsrs	r2, r3
 80053f8:	4b68      	ldr	r3, [pc, #416]	; (800559c <HAL_RCC_OscConfig+0x344>)
 80053fa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053fc:	4b68      	ldr	r3, [pc, #416]	; (80055a0 <HAL_RCC_OscConfig+0x348>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	0018      	movs	r0, r3
 8005402:	f7fd fdcd 	bl	8002fa0 <HAL_InitTick>
 8005406:	1e03      	subs	r3, r0, #0
 8005408:	d051      	beq.n	80054ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e232      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d030      	beq.n	8005478 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005416:	4b5b      	ldr	r3, [pc, #364]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a5e      	ldr	r2, [pc, #376]	; (8005594 <HAL_RCC_OscConfig+0x33c>)
 800541c:	4013      	ands	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	4b57      	ldr	r3, [pc, #348]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005426:	430a      	orrs	r2, r1
 8005428:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800542a:	4b56      	ldr	r3, [pc, #344]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b55      	ldr	r3, [pc, #340]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005430:	2180      	movs	r1, #128	; 0x80
 8005432:	0049      	lsls	r1, r1, #1
 8005434:	430a      	orrs	r2, r1
 8005436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fd fe0e 	bl	8003058 <HAL_GetTick>
 800543c:	0003      	movs	r3, r0
 800543e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005442:	f7fd fe09 	bl	8003058 <HAL_GetTick>
 8005446:	0002      	movs	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e20f      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005454:	4b4b      	ldr	r3, [pc, #300]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4013      	ands	r3, r2
 800545e:	d0f0      	beq.n	8005442 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005460:	4b48      	ldr	r3, [pc, #288]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	4a4a      	ldr	r2, [pc, #296]	; (8005590 <HAL_RCC_OscConfig+0x338>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	021a      	lsls	r2, r3, #8
 8005470:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	e01b      	b.n	80054b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005478:	4b42      	ldr	r3, [pc, #264]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800547e:	4949      	ldr	r1, [pc, #292]	; (80055a4 <HAL_RCC_OscConfig+0x34c>)
 8005480:	400a      	ands	r2, r1
 8005482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd fde8 	bl	8003058 <HAL_GetTick>
 8005488:	0003      	movs	r3, r0
 800548a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548e:	f7fd fde3 	bl	8003058 <HAL_GetTick>
 8005492:	0002      	movs	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e1e9      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a0:	4b38      	ldr	r3, [pc, #224]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4013      	ands	r3, r2
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x236>
 80054ac:	e000      	b.n	80054b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2208      	movs	r2, #8
 80054b6:	4013      	ands	r3, r2
 80054b8:	d047      	beq.n	800554a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054ba:	4b32      	ldr	r3, [pc, #200]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2238      	movs	r2, #56	; 0x38
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b18      	cmp	r3, #24
 80054c4:	d10a      	bne.n	80054dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80054c6:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80054c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ca:	2202      	movs	r2, #2
 80054cc:	4013      	ands	r3, r2
 80054ce:	d03c      	beq.n	800554a <HAL_RCC_OscConfig+0x2f2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d138      	bne.n	800554a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e1cb      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d019      	beq.n	8005518 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80054e4:	4b27      	ldr	r3, [pc, #156]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80054e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054e8:	4b26      	ldr	r3, [pc, #152]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 80054ea:	2101      	movs	r1, #1
 80054ec:	430a      	orrs	r2, r1
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fd fdb2 	bl	8003058 <HAL_GetTick>
 80054f4:	0003      	movs	r3, r0
 80054f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fa:	f7fd fdad 	bl	8003058 <HAL_GetTick>
 80054fe:	0002      	movs	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e1b3      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800550c:	4b1d      	ldr	r3, [pc, #116]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800550e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005510:	2202      	movs	r2, #2
 8005512:	4013      	ands	r3, r2
 8005514:	d0f1      	beq.n	80054fa <HAL_RCC_OscConfig+0x2a2>
 8005516:	e018      	b.n	800554a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800551a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800551e:	2101      	movs	r1, #1
 8005520:	438a      	bics	r2, r1
 8005522:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fd fd98 	bl	8003058 <HAL_GetTick>
 8005528:	0003      	movs	r3, r0
 800552a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552e:	f7fd fd93 	bl	8003058 <HAL_GetTick>
 8005532:	0002      	movs	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e199      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005544:	2202      	movs	r2, #2
 8005546:	4013      	ands	r3, r2
 8005548:	d1f1      	bne.n	800552e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2204      	movs	r2, #4
 8005550:	4013      	ands	r3, r2
 8005552:	d100      	bne.n	8005556 <HAL_RCC_OscConfig+0x2fe>
 8005554:	e0c6      	b.n	80056e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	231f      	movs	r3, #31
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800555e:	4b09      	ldr	r3, [pc, #36]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2238      	movs	r2, #56	; 0x38
 8005564:	4013      	ands	r3, r2
 8005566:	2b20      	cmp	r3, #32
 8005568:	d11e      	bne.n	80055a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCC_OscConfig+0x32c>)
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	2202      	movs	r2, #2
 8005570:	4013      	ands	r3, r2
 8005572:	d100      	bne.n	8005576 <HAL_RCC_OscConfig+0x31e>
 8005574:	e0b6      	b.n	80056e4 <HAL_RCC_OscConfig+0x48c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d000      	beq.n	8005580 <HAL_RCC_OscConfig+0x328>
 800557e:	e0b1      	b.n	80056e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e177      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
 8005584:	40021000 	.word	0x40021000
 8005588:	fffeffff 	.word	0xfffeffff
 800558c:	fffbffff 	.word	0xfffbffff
 8005590:	ffff80ff 	.word	0xffff80ff
 8005594:	ffffc7ff 	.word	0xffffc7ff
 8005598:	00f42400 	.word	0x00f42400
 800559c:	20003134 	.word	0x20003134
 80055a0:	20003138 	.word	0x20003138
 80055a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055a8:	4bb4      	ldr	r3, [pc, #720]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80055aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	055b      	lsls	r3, r3, #21
 80055b0:	4013      	ands	r3, r2
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_OscConfig+0x360>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x362>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d011      	beq.n	80055e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80055be:	4baf      	ldr	r3, [pc, #700]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80055c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c2:	4bae      	ldr	r3, [pc, #696]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	0549      	lsls	r1, r1, #21
 80055c8:	430a      	orrs	r2, r1
 80055ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80055cc:	4bab      	ldr	r3, [pc, #684]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80055ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	055b      	lsls	r3, r3, #21
 80055d4:	4013      	ands	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80055da:	231f      	movs	r3, #31
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e2:	4ba7      	ldr	r3, [pc, #668]	; (8005880 <HAL_RCC_OscConfig+0x628>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	d11a      	bne.n	8005624 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ee:	4ba4      	ldr	r3, [pc, #656]	; (8005880 <HAL_RCC_OscConfig+0x628>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4ba3      	ldr	r3, [pc, #652]	; (8005880 <HAL_RCC_OscConfig+0x628>)
 80055f4:	2180      	movs	r1, #128	; 0x80
 80055f6:	0049      	lsls	r1, r1, #1
 80055f8:	430a      	orrs	r2, r1
 80055fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80055fc:	f7fd fd2c 	bl	8003058 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005606:	f7fd fd27 	bl	8003058 <HAL_GetTick>
 800560a:	0002      	movs	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e12d      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005618:	4b99      	ldr	r3, [pc, #612]	; (8005880 <HAL_RCC_OscConfig+0x628>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	4013      	ands	r3, r2
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x3e2>
 800562c:	4b93      	ldr	r3, [pc, #588]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800562e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005630:	4b92      	ldr	r3, [pc, #584]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005632:	2101      	movs	r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	65da      	str	r2, [r3, #92]	; 0x5c
 8005638:	e01c      	b.n	8005674 <HAL_RCC_OscConfig+0x41c>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b05      	cmp	r3, #5
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x404>
 8005642:	4b8e      	ldr	r3, [pc, #568]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005644:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005646:	4b8d      	ldr	r3, [pc, #564]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005648:	2104      	movs	r1, #4
 800564a:	430a      	orrs	r2, r1
 800564c:	65da      	str	r2, [r3, #92]	; 0x5c
 800564e:	4b8b      	ldr	r3, [pc, #556]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005652:	4b8a      	ldr	r3, [pc, #552]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005654:	2101      	movs	r1, #1
 8005656:	430a      	orrs	r2, r1
 8005658:	65da      	str	r2, [r3, #92]	; 0x5c
 800565a:	e00b      	b.n	8005674 <HAL_RCC_OscConfig+0x41c>
 800565c:	4b87      	ldr	r3, [pc, #540]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800565e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005660:	4b86      	ldr	r3, [pc, #536]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005662:	2101      	movs	r1, #1
 8005664:	438a      	bics	r2, r1
 8005666:	65da      	str	r2, [r3, #92]	; 0x5c
 8005668:	4b84      	ldr	r3, [pc, #528]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800566a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800566c:	4b83      	ldr	r3, [pc, #524]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800566e:	2104      	movs	r1, #4
 8005670:	438a      	bics	r2, r1
 8005672:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d014      	beq.n	80056a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fd fcec 	bl	8003058 <HAL_GetTick>
 8005680:	0003      	movs	r3, r0
 8005682:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005684:	e009      	b.n	800569a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005686:	f7fd fce7 	bl	8003058 <HAL_GetTick>
 800568a:	0002      	movs	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	4a7c      	ldr	r2, [pc, #496]	; (8005884 <HAL_RCC_OscConfig+0x62c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e0ec      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800569a:	4b78      	ldr	r3, [pc, #480]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	2202      	movs	r2, #2
 80056a0:	4013      	ands	r3, r2
 80056a2:	d0f0      	beq.n	8005686 <HAL_RCC_OscConfig+0x42e>
 80056a4:	e013      	b.n	80056ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7fd fcd7 	bl	8003058 <HAL_GetTick>
 80056aa:	0003      	movs	r3, r0
 80056ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ae:	e009      	b.n	80056c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fd fcd2 	bl	8003058 <HAL_GetTick>
 80056b4:	0002      	movs	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	4a72      	ldr	r2, [pc, #456]	; (8005884 <HAL_RCC_OscConfig+0x62c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0d7      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056c4:	4b6d      	ldr	r3, [pc, #436]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80056c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c8:	2202      	movs	r2, #2
 80056ca:	4013      	ands	r3, r2
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80056ce:	231f      	movs	r3, #31
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d105      	bne.n	80056e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80056d8:	4b68      	ldr	r3, [pc, #416]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80056da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056dc:	4b67      	ldr	r3, [pc, #412]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80056de:	496a      	ldr	r1, [pc, #424]	; (8005888 <HAL_RCC_OscConfig+0x630>)
 80056e0:	400a      	ands	r2, r1
 80056e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d100      	bne.n	80056ee <HAL_RCC_OscConfig+0x496>
 80056ec:	e0c1      	b.n	8005872 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ee:	4b63      	ldr	r3, [pc, #396]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2238      	movs	r2, #56	; 0x38
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d100      	bne.n	80056fc <HAL_RCC_OscConfig+0x4a4>
 80056fa:	e081      	b.n	8005800 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d156      	bne.n	80057b2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005704:	4b5d      	ldr	r3, [pc, #372]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b5c      	ldr	r3, [pc, #368]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800570a:	4960      	ldr	r1, [pc, #384]	; (800588c <HAL_RCC_OscConfig+0x634>)
 800570c:	400a      	ands	r2, r1
 800570e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005710:	f7fd fca2 	bl	8003058 <HAL_GetTick>
 8005714:	0003      	movs	r3, r0
 8005716:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800571a:	f7fd fc9d 	bl	8003058 <HAL_GetTick>
 800571e:	0002      	movs	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0a3      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800572c:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	2380      	movs	r3, #128	; 0x80
 8005732:	049b      	lsls	r3, r3, #18
 8005734:	4013      	ands	r3, r2
 8005736:	d1f0      	bne.n	800571a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005738:	4b50      	ldr	r3, [pc, #320]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a54      	ldr	r2, [pc, #336]	; (8005890 <HAL_RCC_OscConfig+0x638>)
 800573e:	4013      	ands	r3, r2
 8005740:	0019      	movs	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1a      	ldr	r2, [r3, #32]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	431a      	orrs	r2, r3
 8005766:	4b45      	ldr	r3, [pc, #276]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005768:	430a      	orrs	r2, r1
 800576a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800576c:	4b43      	ldr	r3, [pc, #268]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	4b42      	ldr	r3, [pc, #264]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005772:	2180      	movs	r1, #128	; 0x80
 8005774:	0449      	lsls	r1, r1, #17
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800577a:	4b40      	ldr	r3, [pc, #256]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	4b3f      	ldr	r3, [pc, #252]	; (800587c <HAL_RCC_OscConfig+0x624>)
 8005780:	2180      	movs	r1, #128	; 0x80
 8005782:	0549      	lsls	r1, r1, #21
 8005784:	430a      	orrs	r2, r1
 8005786:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fd fc66 	bl	8003058 <HAL_GetTick>
 800578c:	0003      	movs	r3, r0
 800578e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005792:	f7fd fc61 	bl	8003058 <HAL_GetTick>
 8005796:	0002      	movs	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e067      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a4:	4b35      	ldr	r3, [pc, #212]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	049b      	lsls	r3, r3, #18
 80057ac:	4013      	ands	r3, r2
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x53a>
 80057b0:	e05f      	b.n	8005872 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b2:	4b32      	ldr	r3, [pc, #200]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b31      	ldr	r3, [pc, #196]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057b8:	4934      	ldr	r1, [pc, #208]	; (800588c <HAL_RCC_OscConfig+0x634>)
 80057ba:	400a      	ands	r2, r1
 80057bc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80057be:	4b2f      	ldr	r3, [pc, #188]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057c4:	2103      	movs	r1, #3
 80057c6:	438a      	bics	r2, r1
 80057c8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80057ca:	4b2c      	ldr	r3, [pc, #176]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	4b2b      	ldr	r3, [pc, #172]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057d0:	4930      	ldr	r1, [pc, #192]	; (8005894 <HAL_RCC_OscConfig+0x63c>)
 80057d2:	400a      	ands	r2, r1
 80057d4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fd fc3f 	bl	8003058 <HAL_GetTick>
 80057da:	0003      	movs	r3, r0
 80057dc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fd fc3a 	bl	8003058 <HAL_GetTick>
 80057e4:	0002      	movs	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e040      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <HAL_RCC_OscConfig+0x624>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	2380      	movs	r3, #128	; 0x80
 80057f8:	049b      	lsls	r3, r3, #18
 80057fa:	4013      	ands	r3, r2
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x588>
 80057fe:	e038      	b.n	8005872 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e033      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800580c:	4b1b      	ldr	r3, [pc, #108]	; (800587c <HAL_RCC_OscConfig+0x624>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2203      	movs	r2, #3
 8005816:	401a      	ands	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	429a      	cmp	r2, r3
 800581e:	d126      	bne.n	800586e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2270      	movs	r2, #112	; 0x70
 8005824:	401a      	ands	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d11f      	bne.n	800586e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	23fe      	movs	r3, #254	; 0xfe
 8005832:	01db      	lsls	r3, r3, #7
 8005834:	401a      	ands	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d116      	bne.n	800586e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	23f8      	movs	r3, #248	; 0xf8
 8005844:	039b      	lsls	r3, r3, #14
 8005846:	401a      	ands	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d10e      	bne.n	800586e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	23e0      	movs	r3, #224	; 0xe0
 8005854:	051b      	lsls	r3, r3, #20
 8005856:	401a      	ands	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d106      	bne.n	800586e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	0f5b      	lsrs	r3, r3, #29
 8005864:	075a      	lsls	r2, r3, #29
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800586a:	429a      	cmp	r2, r3
 800586c:	d001      	beq.n	8005872 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	0018      	movs	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	b008      	add	sp, #32
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000
 8005880:	40007000 	.word	0x40007000
 8005884:	00001388 	.word	0x00001388
 8005888:	efffffff 	.word	0xefffffff
 800588c:	feffffff 	.word	0xfeffffff
 8005890:	11c1808c 	.word	0x11c1808c
 8005894:	eefeffff 	.word	0xeefeffff

08005898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0e9      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058ac:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2207      	movs	r2, #7
 80058b2:	4013      	ands	r3, r2
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d91e      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b73      	ldr	r3, [pc, #460]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2207      	movs	r2, #7
 80058c0:	4393      	bics	r3, r2
 80058c2:	0019      	movs	r1, r3
 80058c4:	4b70      	ldr	r3, [pc, #448]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058cc:	f7fd fbc4 	bl	8003058 <HAL_GetTick>
 80058d0:	0003      	movs	r3, r0
 80058d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058d4:	e009      	b.n	80058ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d6:	f7fd fbbf 	bl	8003058 <HAL_GetTick>
 80058da:	0002      	movs	r2, r0
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	4a6a      	ldr	r2, [pc, #424]	; (8005a8c <HAL_RCC_ClockConfig+0x1f4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e0ca      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058ea:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2207      	movs	r2, #7
 80058f0:	4013      	ands	r3, r2
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d1ee      	bne.n	80058d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2202      	movs	r2, #2
 80058fe:	4013      	ands	r3, r2
 8005900:	d015      	beq.n	800592e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2204      	movs	r2, #4
 8005908:	4013      	ands	r3, r2
 800590a:	d006      	beq.n	800591a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800590c:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	4b5f      	ldr	r3, [pc, #380]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005912:	21e0      	movs	r1, #224	; 0xe0
 8005914:	01c9      	lsls	r1, r1, #7
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800591a:	4b5d      	ldr	r3, [pc, #372]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4a5d      	ldr	r2, [pc, #372]	; (8005a94 <HAL_RCC_ClockConfig+0x1fc>)
 8005920:	4013      	ands	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	4b59      	ldr	r3, [pc, #356]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2201      	movs	r2, #1
 8005934:	4013      	ands	r3, r2
 8005936:	d057      	beq.n	80059e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d107      	bne.n	8005950 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005940:	4b53      	ldr	r3, [pc, #332]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	2380      	movs	r3, #128	; 0x80
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	4013      	ands	r3, r2
 800594a:	d12b      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e097      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d107      	bne.n	8005968 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005958:	4b4d      	ldr	r3, [pc, #308]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2380      	movs	r3, #128	; 0x80
 800595e:	049b      	lsls	r3, r3, #18
 8005960:	4013      	ands	r3, r2
 8005962:	d11f      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e08b      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d107      	bne.n	8005980 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005970:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2380      	movs	r3, #128	; 0x80
 8005976:	00db      	lsls	r3, r3, #3
 8005978:	4013      	ands	r3, r2
 800597a:	d113      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e07f      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d106      	bne.n	8005996 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005988:	4b41      	ldr	r3, [pc, #260]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	2202      	movs	r2, #2
 800598e:	4013      	ands	r3, r2
 8005990:	d108      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e074      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005996:	4b3e      	ldr	r3, [pc, #248]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599a:	2202      	movs	r2, #2
 800599c:	4013      	ands	r3, r2
 800599e:	d101      	bne.n	80059a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e06d      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059a4:	4b3a      	ldr	r3, [pc, #232]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2207      	movs	r2, #7
 80059aa:	4393      	bics	r3, r2
 80059ac:	0019      	movs	r1, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4b37      	ldr	r3, [pc, #220]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 80059b4:	430a      	orrs	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b8:	f7fd fb4e 	bl	8003058 <HAL_GetTick>
 80059bc:	0003      	movs	r3, r0
 80059be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c0:	e009      	b.n	80059d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c2:	f7fd fb49 	bl	8003058 <HAL_GetTick>
 80059c6:	0002      	movs	r2, r0
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <HAL_RCC_ClockConfig+0x1f4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e054      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d6:	4b2e      	ldr	r3, [pc, #184]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2238      	movs	r2, #56	; 0x38
 80059dc:	401a      	ands	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1ec      	bne.n	80059c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059e8:	4b27      	ldr	r3, [pc, #156]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2207      	movs	r2, #7
 80059ee:	4013      	ands	r3, r2
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d21e      	bcs.n	8005a34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2207      	movs	r2, #7
 80059fc:	4393      	bics	r3, r2
 80059fe:	0019      	movs	r1, r3
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a08:	f7fd fb26 	bl	8003058 <HAL_GetTick>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a10:	e009      	b.n	8005a26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a12:	f7fd fb21 	bl	8003058 <HAL_GetTick>
 8005a16:	0002      	movs	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <HAL_RCC_ClockConfig+0x1f4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e02c      	b.n	8005a80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a26:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <HAL_RCC_ClockConfig+0x1f0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d1ee      	bne.n	8005a12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a3e:	4b14      	ldr	r3, [pc, #80]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <HAL_RCC_ClockConfig+0x200>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	0019      	movs	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a52:	f000 f829 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005a56:	0001      	movs	r1, r0
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <HAL_RCC_ClockConfig+0x1f8>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	220f      	movs	r2, #15
 8005a60:	401a      	ands	r2, r3
 8005a62:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <HAL_RCC_ClockConfig+0x204>)
 8005a64:	0092      	lsls	r2, r2, #2
 8005a66:	58d3      	ldr	r3, [r2, r3]
 8005a68:	221f      	movs	r2, #31
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	000a      	movs	r2, r1
 8005a6e:	40da      	lsrs	r2, r3
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <HAL_RCC_ClockConfig+0x208>)
 8005a72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCC_ClockConfig+0x20c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7fd fa91 	bl	8002fa0 <HAL_InitTick>
 8005a7e:	0003      	movs	r3, r0
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b004      	add	sp, #16
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40022000 	.word	0x40022000
 8005a8c:	00001388 	.word	0x00001388
 8005a90:	40021000 	.word	0x40021000
 8005a94:	fffff0ff 	.word	0xfffff0ff
 8005a98:	ffff8fff 	.word	0xffff8fff
 8005a9c:	0800a710 	.word	0x0800a710
 8005aa0:	20003134 	.word	0x20003134
 8005aa4:	20003138 	.word	0x20003138

08005aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aae:	4b3c      	ldr	r3, [pc, #240]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2238      	movs	r2, #56	; 0x38
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d10f      	bne.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005ab8:	4b39      	ldr	r3, [pc, #228]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0adb      	lsrs	r3, r3, #11
 8005abe:	2207      	movs	r2, #7
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	0013      	movs	r3, r2
 8005ac8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	4835      	ldr	r0, [pc, #212]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ace:	f7fa fb19 	bl	8000104 <__udivsi3>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	e05d      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ad8:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2238      	movs	r2, #56	; 0x38
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d102      	bne.n	8005aea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ae4:	4b30      	ldr	r3, [pc, #192]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	e054      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aea:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2238      	movs	r2, #56	; 0x38
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b10      	cmp	r3, #16
 8005af4:	d138      	bne.n	8005b68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005af6:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2203      	movs	r2, #3
 8005afc:	4013      	ands	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b00:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	2207      	movs	r2, #7
 8005b08:	4013      	ands	r3, r2
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d10d      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	4824      	ldr	r0, [pc, #144]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005b18:	f7fa faf4 	bl	8000104 <__udivsi3>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	0019      	movs	r1, r3
 8005b20:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	0a1b      	lsrs	r3, r3, #8
 8005b26:	227f      	movs	r2, #127	; 0x7f
 8005b28:	4013      	ands	r3, r2
 8005b2a:	434b      	muls	r3, r1
 8005b2c:	617b      	str	r3, [r7, #20]
        break;
 8005b2e:	e00d      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	481c      	ldr	r0, [pc, #112]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b34:	f7fa fae6 	bl	8000104 <__udivsi3>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	0019      	movs	r1, r3
 8005b3c:	4b18      	ldr	r3, [pc, #96]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	227f      	movs	r2, #127	; 0x7f
 8005b44:	4013      	ands	r3, r2
 8005b46:	434b      	muls	r3, r1
 8005b48:	617b      	str	r3, [r7, #20]
        break;
 8005b4a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	0f5b      	lsrs	r3, r3, #29
 8005b52:	2207      	movs	r2, #7
 8005b54:	4013      	ands	r3, r2
 8005b56:	3301      	adds	r3, #1
 8005b58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f7fa fad1 	bl	8000104 <__udivsi3>
 8005b62:	0003      	movs	r3, r0
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	e015      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2238      	movs	r2, #56	; 0x38
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b20      	cmp	r3, #32
 8005b72:	d103      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	2238      	movs	r2, #56	; 0x38
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b18      	cmp	r3, #24
 8005b86:	d103      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005b88:	23fa      	movs	r3, #250	; 0xfa
 8005b8a:	01db      	lsls	r3, r3, #7
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e001      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	0018      	movs	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b006      	add	sp, #24
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	00f42400 	.word	0x00f42400
 8005ba8:	007a1200 	.word	0x007a1200

08005bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	20003134 	.word	0x20003134

08005bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc0:	b5b0      	push	{r4, r5, r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005bc4:	f7ff fff2 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bc8:	0004      	movs	r4, r0
 8005bca:	f7ff fb39 	bl	8005240 <LL_RCC_GetAPB1Prescaler>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	0b1a      	lsrs	r2, r3, #12
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bd4:	0092      	lsls	r2, r2, #2
 8005bd6:	58d3      	ldr	r3, [r2, r3]
 8005bd8:	221f      	movs	r2, #31
 8005bda:	4013      	ands	r3, r2
 8005bdc:	40dc      	lsrs	r4, r3
 8005bde:	0023      	movs	r3, r4
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bdb0      	pop	{r4, r5, r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	0800a750 	.word	0x0800a750

08005bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005bf4:	2313      	movs	r3, #19
 8005bf6:	18fb      	adds	r3, r7, r3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bfc:	2312      	movs	r3, #18
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005c10:	e0a3      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c12:	2011      	movs	r0, #17
 8005c14:	183b      	adds	r3, r7, r0
 8005c16:	2200      	movs	r2, #0
 8005c18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c1a:	4bc3      	ldr	r3, [pc, #780]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	055b      	lsls	r3, r3, #21
 8005c22:	4013      	ands	r3, r2
 8005c24:	d110      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	4bc0      	ldr	r3, [pc, #768]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2a:	4bbf      	ldr	r3, [pc, #764]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c2c:	2180      	movs	r1, #128	; 0x80
 8005c2e:	0549      	lsls	r1, r1, #21
 8005c30:	430a      	orrs	r2, r1
 8005c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c34:	4bbc      	ldr	r3, [pc, #752]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	055b      	lsls	r3, r3, #21
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c42:	183b      	adds	r3, r7, r0
 8005c44:	2201      	movs	r2, #1
 8005c46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c48:	4bb8      	ldr	r3, [pc, #736]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4bb7      	ldr	r3, [pc, #732]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c4e:	2180      	movs	r1, #128	; 0x80
 8005c50:	0049      	lsls	r1, r1, #1
 8005c52:	430a      	orrs	r2, r1
 8005c54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c56:	f7fd f9ff 	bl	8003058 <HAL_GetTick>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c5e:	e00b      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c60:	f7fd f9fa 	bl	8003058 <HAL_GetTick>
 8005c64:	0002      	movs	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d904      	bls.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005c6e:	2313      	movs	r3, #19
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2203      	movs	r2, #3
 8005c74:	701a      	strb	r2, [r3, #0]
        break;
 8005c76:	e005      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c78:	4bac      	ldr	r3, [pc, #688]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	d0ed      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005c84:	2313      	movs	r3, #19
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d154      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c8e:	4ba6      	ldr	r3, [pc, #664]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005c92:	23c0      	movs	r3, #192	; 0xc0
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4013      	ands	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d019      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d014      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005caa:	4b9f      	ldr	r3, [pc, #636]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cae:	4aa0      	ldr	r2, [pc, #640]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cb4:	4b9c      	ldr	r3, [pc, #624]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cb8:	4b9b      	ldr	r3, [pc, #620]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	0249      	lsls	r1, r1, #9
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cc2:	4b99      	ldr	r3, [pc, #612]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cc6:	4b98      	ldr	r3, [pc, #608]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cc8:	499a      	ldr	r1, [pc, #616]	; (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005cca:	400a      	ands	r2, r1
 8005ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cce:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d016      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fd f9bc 	bl	8003058 <HAL_GetTick>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce4:	e00c      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fd f9b7 	bl	8003058 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	4a91      	ldr	r2, [pc, #580]	; (8005f38 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d904      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005cf6:	2313      	movs	r3, #19
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	701a      	strb	r2, [r3, #0]
            break;
 8005cfe:	e004      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d00:	4b89      	ldr	r3, [pc, #548]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d04:	2202      	movs	r2, #2
 8005d06:	4013      	ands	r3, r2
 8005d08:	d0ed      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005d0a:	2313      	movs	r3, #19
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d14:	4b84      	ldr	r3, [pc, #528]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d18:	4a85      	ldr	r2, [pc, #532]	; (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d22:	4b81      	ldr	r3, [pc, #516]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d24:	430a      	orrs	r2, r1
 8005d26:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d28:	e00c      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d2a:	2312      	movs	r3, #18
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	2213      	movs	r2, #19
 8005d30:	18ba      	adds	r2, r7, r2
 8005d32:	7812      	ldrb	r2, [r2, #0]
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e005      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	2312      	movs	r3, #18
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	2213      	movs	r2, #19
 8005d3e:	18ba      	adds	r2, r7, r2
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d44:	2311      	movs	r3, #17
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d105      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4e:	4b76      	ldr	r3, [pc, #472]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d52:	4b75      	ldr	r3, [pc, #468]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d54:	4979      	ldr	r1, [pc, #484]	; (8005f3c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8005d56:	400a      	ands	r2, r1
 8005d58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4013      	ands	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d64:	4b70      	ldr	r3, [pc, #448]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d68:	2203      	movs	r2, #3
 8005d6a:	4393      	bics	r3, r2
 8005d6c:	0019      	movs	r1, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	4b6d      	ldr	r3, [pc, #436]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d74:	430a      	orrs	r2, r1
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d82:	4b69      	ldr	r3, [pc, #420]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	220c      	movs	r2, #12
 8005d88:	4393      	bics	r3, r2
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	4b65      	ldr	r3, [pc, #404]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005d92:	430a      	orrs	r2, r1
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	d009      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005da0:	4b61      	ldr	r3, [pc, #388]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da4:	4a66      	ldr	r2, [pc, #408]	; (8005f40 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	0019      	movs	r1, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	4b5e      	ldr	r3, [pc, #376]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005db0:	430a      	orrs	r2, r1
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	2380      	movs	r3, #128	; 0x80
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dc0:	4b59      	ldr	r3, [pc, #356]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc4:	4a5f      	ldr	r2, [pc, #380]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	0019      	movs	r1, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	4b56      	ldr	r3, [pc, #344]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005de0:	4b51      	ldr	r3, [pc, #324]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	4a58      	ldr	r2, [pc, #352]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	0019      	movs	r1, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	4b4e      	ldr	r3, [pc, #312]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005df0:	430a      	orrs	r2, r1
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dfe:	4b4a      	ldr	r3, [pc, #296]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e02:	4a52      	ldr	r2, [pc, #328]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	0019      	movs	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	4b46      	ldr	r3, [pc, #280]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	2380      	movs	r3, #128	; 0x80
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d015      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e1e:	4b42      	ldr	r3, [pc, #264]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	0899      	lsrs	r1, r3, #2
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1a      	ldr	r2, [r3, #32]
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	05db      	lsls	r3, r3, #23
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d106      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e3c:	4b3a      	ldr	r3, [pc, #232]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e42:	2180      	movs	r1, #128	; 0x80
 8005e44:	0249      	lsls	r1, r1, #9
 8005e46:	430a      	orrs	r2, r1
 8005e48:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	4013      	ands	r3, r2
 8005e54:	d009      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e56:	4b34      	ldr	r3, [pc, #208]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	2240      	movs	r2, #64	; 0x40
 8005e5c:	4393      	bics	r3, r2
 8005e5e:	0019      	movs	r1, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e64:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e66:	430a      	orrs	r2, r1
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	039b      	lsls	r3, r3, #14
 8005e72:	4013      	ands	r3, r2
 8005e74:	d016      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e76:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	0019      	movs	r1, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e84:	4b28      	ldr	r3, [pc, #160]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e86:	430a      	orrs	r2, r1
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	03db      	lsls	r3, r3, #15
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d106      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005e96:	4b24      	ldr	r3, [pc, #144]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	4b23      	ldr	r3, [pc, #140]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005e9c:	2180      	movs	r1, #128	; 0x80
 8005e9e:	0449      	lsls	r1, r1, #17
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	03db      	lsls	r3, r3, #15
 8005eac:	4013      	ands	r3, r2
 8005eae:	d016      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	0019      	movs	r1, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	045b      	lsls	r3, r3, #17
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d106      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ed0:	4b15      	ldr	r3, [pc, #84]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ed6:	2180      	movs	r1, #128	; 0x80
 8005ed8:	0449      	lsls	r1, r1, #17
 8005eda:	430a      	orrs	r2, r1
 8005edc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	2380      	movs	r3, #128	; 0x80
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d016      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	4a1a      	ldr	r2, [pc, #104]	; (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005efa:	430a      	orrs	r2, r1
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	01db      	lsls	r3, r3, #7
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d106      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f0a:	4b07      	ldr	r3, [pc, #28]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005f10:	2180      	movs	r1, #128	; 0x80
 8005f12:	0249      	lsls	r1, r1, #9
 8005f14:	430a      	orrs	r2, r1
 8005f16:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f18:	2312      	movs	r3, #18
 8005f1a:	18fb      	adds	r3, r7, r3
 8005f1c:	781b      	ldrb	r3, [r3, #0]
}
 8005f1e:	0018      	movs	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	b006      	add	sp, #24
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	46c0      	nop			; (mov r8, r8)
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40007000 	.word	0x40007000
 8005f30:	fffffcff 	.word	0xfffffcff
 8005f34:	fffeffff 	.word	0xfffeffff
 8005f38:	00001388 	.word	0x00001388
 8005f3c:	efffffff 	.word	0xefffffff
 8005f40:	fffff3ff 	.word	0xfffff3ff
 8005f44:	fff3ffff 	.word	0xfff3ffff
 8005f48:	ffcfffff 	.word	0xffcfffff
 8005f4c:	ffffcfff 	.word	0xffffcfff
 8005f50:	ffbfffff 	.word	0xffbfffff
 8005f54:	feffffff 	.word	0xfeffffff
 8005f58:	ffff3fff 	.word	0xffff3fff

08005f5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d136      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f72:	4bcd      	ldr	r3, [pc, #820]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f76:	23c0      	movs	r3, #192	; 0xc0
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005f7e:	4bca      	ldr	r3, [pc, #808]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	2202      	movs	r2, #2
 8005f84:	4013      	ands	r3, r2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d108      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d103      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	e31c      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005f9c:	4bc2      	ldr	r3, [pc, #776]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d108      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d103      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005fb2:	23fa      	movs	r3, #250	; 0xfa
 8005fb4:	01db      	lsls	r3, r3, #7
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e30d      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005fba:	4bbb      	ldr	r3, [pc, #748]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	029b      	lsls	r3, r3, #10
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	029b      	lsls	r3, r3, #10
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d000      	beq.n	8005fce <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005fcc:	e303      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	23c0      	movs	r3, #192	; 0xc0
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d000      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005fd8:	e2fd      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8005fda:	4bb4      	ldr	r3, [pc, #720]	; (80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e2fa      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005fe0:	4bb1      	ldr	r3, [pc, #708]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d102      	bne.n	8005ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005fec:	4bb0      	ldr	r3, [pc, #704]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005fee:	613b      	str	r3, [r7, #16]
 8005ff0:	e00a      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005ff2:	4bad      	ldr	r3, [pc, #692]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2203      	movs	r2, #3
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005ffe:	4bad      	ldr	r3, [pc, #692]	; (80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	e001      	b.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006008:	4ba7      	ldr	r3, [pc, #668]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	2207      	movs	r2, #7
 8006010:	4013      	ands	r3, r2
 8006012:	3301      	adds	r3, #1
 8006014:	0019      	movs	r1, r3
 8006016:	6938      	ldr	r0, [r7, #16]
 8006018:	f7fa f874 	bl	8000104 <__udivsi3>
 800601c:	0003      	movs	r3, r0
 800601e:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	03db      	lsls	r3, r3, #15
 8006026:	429a      	cmp	r2, r3
 8006028:	d100      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 800602a:	e28e      	b.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	2380      	movs	r3, #128	; 0x80
 8006030:	03db      	lsls	r3, r3, #15
 8006032:	429a      	cmp	r2, r3
 8006034:	d900      	bls.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006036:	e2b7      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	039b      	lsls	r3, r3, #14
 800603e:	429a      	cmp	r2, r3
 8006040:	d100      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006042:	e253      	b.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	2380      	movs	r3, #128	; 0x80
 8006048:	039b      	lsls	r3, r3, #14
 800604a:	429a      	cmp	r2, r3
 800604c:	d900      	bls.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800604e:	e2ab      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	031b      	lsls	r3, r3, #12
 8006056:	429a      	cmp	r2, r3
 8006058:	d100      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800605a:	e0b2      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	031b      	lsls	r3, r3, #12
 8006062:	429a      	cmp	r2, r3
 8006064:	d900      	bls.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8006066:	e29f      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	2380      	movs	r3, #128	; 0x80
 800606c:	01db      	lsls	r3, r3, #7
 800606e:	429a      	cmp	r2, r3
 8006070:	d100      	bne.n	8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8006072:	e103      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	01db      	lsls	r3, r3, #7
 800607a:	429a      	cmp	r2, r3
 800607c:	d900      	bls.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800607e:	e293      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	429a      	cmp	r2, r3
 8006088:	d100      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 800608a:	e165      	b.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	2380      	movs	r3, #128	; 0x80
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	429a      	cmp	r2, r3
 8006094:	d900      	bls.n	8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8006096:	e287      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	429a      	cmp	r2, r3
 80060a0:	d100      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80060a2:	e1e3      	b.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d900      	bls.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80060ae:	e27b      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	2380      	movs	r3, #128	; 0x80
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d100      	bne.n	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80060ba:	e197      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	2380      	movs	r3, #128	; 0x80
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d900      	bls.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80060c6:	e26f      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	d100      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80060ce:	e118      	b.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d900      	bls.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 80060d6:	e267      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d100      	bne.n	80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80060de:	e093      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b10      	cmp	r3, #16
 80060e4:	d900      	bls.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80060e6:	e25f      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d003      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d033      	beq.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 80060f4:	e258      	b.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80060f6:	4b6c      	ldr	r3, [pc, #432]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	2203      	movs	r2, #3
 80060fc:	4013      	ands	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006106:	f7ff fd5b 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 800610a:	0003      	movs	r3, r0
 800610c:	617b      	str	r3, [r7, #20]
        break;
 800610e:	e24d      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d104      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8006116:	f7ff fcc7 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 800611a:	0003      	movs	r3, r0
 800611c:	617b      	str	r3, [r7, #20]
        break;
 800611e:	e245      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006120:	4b61      	ldr	r3, [pc, #388]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	2380      	movs	r3, #128	; 0x80
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	401a      	ands	r2, r3
 800612a:	2380      	movs	r3, #128	; 0x80
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	429a      	cmp	r2, r3
 8006130:	d105      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d102      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8006138:	4b5d      	ldr	r3, [pc, #372]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 800613a:	617b      	str	r3, [r7, #20]
        break;
 800613c:	e236      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800613e:	4b5a      	ldr	r3, [pc, #360]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	2202      	movs	r2, #2
 8006144:	4013      	ands	r3, r2
 8006146:	2b02      	cmp	r3, #2
 8006148:	d000      	beq.n	800614c <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 800614a:	e22f      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b03      	cmp	r3, #3
 8006150:	d000      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8006152:	e22b      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	617b      	str	r3, [r7, #20]
        break;
 800615a:	e227      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800615c:	4b52      	ldr	r3, [pc, #328]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	220c      	movs	r2, #12
 8006162:	4013      	ands	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 800616c:	f7ff fd28 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 8006170:	0003      	movs	r3, r0
 8006172:	617b      	str	r3, [r7, #20]
        break;
 8006174:	e21c      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b04      	cmp	r3, #4
 800617a:	d104      	bne.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 800617c:	f7ff fc94 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8006180:	0003      	movs	r3, r0
 8006182:	617b      	str	r3, [r7, #20]
        break;
 8006184:	e214      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006186:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	2380      	movs	r3, #128	; 0x80
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	401a      	ands	r2, r3
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	429a      	cmp	r2, r3
 8006196:	d105      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b08      	cmp	r3, #8
 800619c:	d102      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 800619e:	4b44      	ldr	r3, [pc, #272]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80061a0:	617b      	str	r3, [r7, #20]
        break;
 80061a2:	e205      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80061a4:	4b40      	ldr	r3, [pc, #256]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	2202      	movs	r2, #2
 80061aa:	4013      	ands	r3, r2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d000      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80061b0:	e1fe      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b0c      	cmp	r3, #12
 80061b6:	d000      	beq.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 80061b8:	e1fa      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	617b      	str	r3, [r7, #20]
        break;
 80061c0:	e1f6      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80061c2:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	4013      	ands	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 80061cc:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	401a      	ands	r2, r3
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	429a      	cmp	r2, r3
 80061dc:	d105      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d102      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 80061e4:	4b34      	ldr	r3, [pc, #208]	; (80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80061e6:	617b      	str	r3, [r7, #20]
        break;
 80061e8:	e1e4      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80061ea:	4b2f      	ldr	r3, [pc, #188]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 80061ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ee:	2202      	movs	r2, #2
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d000      	beq.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80061f6:	e1dd      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b40      	cmp	r3, #64	; 0x40
 80061fc:	d000      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 80061fe:	e1d9      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	021b      	lsls	r3, r3, #8
 8006204:	617b      	str	r3, [r7, #20]
        break;
 8006206:	e1d5      	b.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006208:	4b27      	ldr	r3, [pc, #156]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800620a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800620c:	23c0      	movs	r3, #192	; 0xc0
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800621a:	f7ff fcd1 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 800621e:	0003      	movs	r3, r0
 8006220:	617b      	str	r3, [r7, #20]
        break;
 8006222:	e1c9      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	2380      	movs	r3, #128	; 0x80
 8006228:	00db      	lsls	r3, r3, #3
 800622a:	429a      	cmp	r2, r3
 800622c:	d104      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 800622e:	f7ff fc3b 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8006232:	0003      	movs	r3, r0
 8006234:	617b      	str	r3, [r7, #20]
        break;
 8006236:	e1bf      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006238:	4b1b      	ldr	r3, [pc, #108]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	401a      	ands	r2, r3
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	429a      	cmp	r2, r3
 8006248:	d107      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	429a      	cmp	r2, r3
 8006252:	d102      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8006254:	4b16      	ldr	r3, [pc, #88]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8006256:	617b      	str	r3, [r7, #20]
        break;
 8006258:	e1ae      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800625a:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800625c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625e:	2202      	movs	r2, #2
 8006260:	4013      	ands	r3, r2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d000      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006266:	e1a7      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	23c0      	movs	r3, #192	; 0xc0
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	429a      	cmp	r2, r3
 8006270:	d000      	beq.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006272:	e1a1      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8006274:	2380      	movs	r3, #128	; 0x80
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	617b      	str	r3, [r7, #20]
        break;
 800627a:	e19d      	b.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800627e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006280:	0f9b      	lsrs	r3, r3, #30
 8006282:	079b      	lsls	r3, r3, #30
 8006284:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d104      	bne.n	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 800628c:	f7ff fc0c 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8006290:	0003      	movs	r3, r0
 8006292:	617b      	str	r3, [r7, #20]
        break;
 8006294:	e192      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	2380      	movs	r3, #128	; 0x80
 800629a:	061b      	lsls	r3, r3, #24
 800629c:	429a      	cmp	r2, r3
 800629e:	d10d      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 80062a2:	617b      	str	r3, [r7, #20]
        break;
 80062a4:	e18a      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	40021000 	.word	0x40021000
 80062ac:	0003d090 	.word	0x0003d090
 80062b0:	00f42400 	.word	0x00f42400
 80062b4:	007a1200 	.word	0x007a1200
 80062b8:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	05db      	lsls	r3, r3, #23
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d000      	beq.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 80062c6:	e179      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 80062c8:	4bc5      	ldr	r3, [pc, #788]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	025b      	lsls	r3, r3, #9
 80062d0:	4013      	ands	r3, r2
 80062d2:	d100      	bne.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80062d4:	e172      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80062d6:	4bc2      	ldr	r3, [pc, #776]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	227f      	movs	r2, #127	; 0x7f
 80062de:	4013      	ands	r3, r2
 80062e0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	435a      	muls	r2, r3
 80062e8:	4bbd      	ldr	r3, [pc, #756]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	0c5b      	lsrs	r3, r3, #17
 80062ee:	211f      	movs	r1, #31
 80062f0:	400b      	ands	r3, r1
 80062f2:	3301      	adds	r3, #1
 80062f4:	0019      	movs	r1, r3
 80062f6:	0010      	movs	r0, r2
 80062f8:	f7f9 ff04 	bl	8000104 <__udivsi3>
 80062fc:	0003      	movs	r3, r0
 80062fe:	617b      	str	r3, [r7, #20]
        break;
 8006300:	e15c      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006302:	4bb7      	ldr	r3, [pc, #732]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006306:	23c0      	movs	r3, #192	; 0xc0
 8006308:	019b      	lsls	r3, r3, #6
 800630a:	4013      	ands	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006314:	f7ff fc54 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 8006318:	0003      	movs	r3, r0
 800631a:	617b      	str	r3, [r7, #20]
        break;
 800631c:	e150      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	2380      	movs	r3, #128	; 0x80
 8006322:	015b      	lsls	r3, r3, #5
 8006324:	429a      	cmp	r2, r3
 8006326:	d104      	bne.n	8006332 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006328:	f7ff fbbe 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 800632c:	0003      	movs	r3, r0
 800632e:	617b      	str	r3, [r7, #20]
        break;
 8006330:	e146      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006332:	4bab      	ldr	r3, [pc, #684]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	401a      	ands	r2, r3
 800633c:	2380      	movs	r3, #128	; 0x80
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	429a      	cmp	r2, r3
 8006342:	d000      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8006344:	e13c      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	2380      	movs	r3, #128	; 0x80
 800634a:	019b      	lsls	r3, r3, #6
 800634c:	429a      	cmp	r2, r3
 800634e:	d000      	beq.n	8006352 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8006350:	e136      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8006352:	4ba4      	ldr	r3, [pc, #656]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006354:	617b      	str	r3, [r7, #20]
        break;
 8006356:	e133      	b.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8006358:	4ba1      	ldr	r3, [pc, #644]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800635a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635c:	23c0      	movs	r3, #192	; 0xc0
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	2380      	movs	r3, #128	; 0x80
 8006368:	01db      	lsls	r3, r3, #7
 800636a:	429a      	cmp	r2, r3
 800636c:	d11c      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 800636e:	4b9c      	ldr	r3, [pc, #624]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	025b      	lsls	r3, r3, #9
 8006376:	4013      	ands	r3, r2
 8006378:	d100      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800637a:	e123      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800637c:	4b98      	ldr	r3, [pc, #608]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	227f      	movs	r2, #127	; 0x7f
 8006384:	4013      	ands	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	435a      	muls	r2, r3
 800638e:	4b94      	ldr	r3, [pc, #592]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	0c5b      	lsrs	r3, r3, #17
 8006394:	211f      	movs	r1, #31
 8006396:	400b      	ands	r3, r1
 8006398:	3301      	adds	r3, #1
 800639a:	0019      	movs	r1, r3
 800639c:	0010      	movs	r0, r2
 800639e:	f7f9 feb1 	bl	8000104 <__udivsi3>
 80063a2:	0003      	movs	r3, r0
 80063a4:	617b      	str	r3, [r7, #20]
        break;
 80063a6:	e10d      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d104      	bne.n	80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 80063ae:	f7ff fb7b 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 80063b2:	0003      	movs	r3, r0
 80063b4:	617b      	str	r3, [r7, #20]
        break;
 80063b6:	e105      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 80063b8:	4b89      	ldr	r3, [pc, #548]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	401a      	ands	r2, r3
 80063c2:	2380      	movs	r3, #128	; 0x80
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d107      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	2380      	movs	r3, #128	; 0x80
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d102      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 80063d4:	4b83      	ldr	r3, [pc, #524]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80063d6:	617b      	str	r3, [r7, #20]
        break;
 80063d8:	e0f4      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	23c0      	movs	r3, #192	; 0xc0
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d000      	beq.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80063e4:	e0ee      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 80063e6:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 80063e8:	617b      	str	r3, [r7, #20]
        break;
 80063ea:	e0eb      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80063ec:	4b7c      	ldr	r3, [pc, #496]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80063ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063f0:	23c0      	movs	r3, #192	; 0xc0
 80063f2:	031b      	lsls	r3, r3, #12
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 80063fe:	f7ff fbdf 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 8006402:	0003      	movs	r3, r0
 8006404:	617b      	str	r3, [r7, #20]
        break;
 8006406:	e0df      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006408:	4b75      	ldr	r3, [pc, #468]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800640a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800640c:	2202      	movs	r2, #2
 800640e:	4013      	ands	r3, r2
 8006410:	2b02      	cmp	r3, #2
 8006412:	d108      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	2380      	movs	r3, #128	; 0x80
 8006418:	02db      	lsls	r3, r3, #11
 800641a:	429a      	cmp	r2, r3
 800641c:	d103      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 800641e:	23fa      	movs	r3, #250	; 0xfa
 8006420:	01db      	lsls	r3, r3, #7
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e021      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006426:	4b6e      	ldr	r3, [pc, #440]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	2380      	movs	r3, #128	; 0x80
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	401a      	ands	r2, r3
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	429a      	cmp	r2, r3
 8006436:	d107      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	429a      	cmp	r2, r3
 8006440:	d102      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 8006442:	4b68      	ldr	r3, [pc, #416]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e010      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006448:	4b65      	ldr	r3, [pc, #404]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	2202      	movs	r2, #2
 800644e:	4013      	ands	r3, r2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d000      	beq.n	8006456 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006454:	e0b8      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	23c0      	movs	r3, #192	; 0xc0
 800645a:	031b      	lsls	r3, r3, #12
 800645c:	429a      	cmp	r2, r3
 800645e:	d000      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006460:	e0b2      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 8006462:	2380      	movs	r3, #128	; 0x80
 8006464:	021b      	lsls	r3, r3, #8
 8006466:	617b      	str	r3, [r7, #20]
        break;
 8006468:	e0ae      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800646a:	e0ad      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800646c:	4b5c      	ldr	r3, [pc, #368]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800646e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006470:	23c0      	movs	r3, #192	; 0xc0
 8006472:	039b      	lsls	r3, r3, #14
 8006474:	4013      	ands	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 800647e:	f7ff fb9f 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 8006482:	0003      	movs	r3, r0
 8006484:	617b      	str	r3, [r7, #20]
        break;
 8006486:	e0a1      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006488:	4b55      	ldr	r3, [pc, #340]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	2202      	movs	r2, #2
 800648e:	4013      	ands	r3, r2
 8006490:	2b02      	cmp	r3, #2
 8006492:	d108      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	035b      	lsls	r3, r3, #13
 800649a:	429a      	cmp	r2, r3
 800649c:	d103      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 800649e:	23fa      	movs	r3, #250	; 0xfa
 80064a0:	01db      	lsls	r3, r3, #7
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e021      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80064a6:	4b4e      	ldr	r3, [pc, #312]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	2380      	movs	r3, #128	; 0x80
 80064ac:	00db      	lsls	r3, r3, #3
 80064ae:	401a      	ands	r2, r3
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d107      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	2380      	movs	r3, #128	; 0x80
 80064bc:	039b      	lsls	r3, r3, #14
 80064be:	429a      	cmp	r2, r3
 80064c0:	d102      	bne.n	80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 80064c2:	4b48      	ldr	r3, [pc, #288]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e010      	b.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80064c8:	4b45      	ldr	r3, [pc, #276]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064cc:	2202      	movs	r2, #2
 80064ce:	4013      	ands	r3, r2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d000      	beq.n	80064d6 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80064d4:	e07a      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	23c0      	movs	r3, #192	; 0xc0
 80064da:	039b      	lsls	r3, r3, #14
 80064dc:	429a      	cmp	r2, r3
 80064de:	d000      	beq.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80064e0:	e074      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80064e2:	2380      	movs	r3, #128	; 0x80
 80064e4:	021b      	lsls	r3, r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
        break;
 80064e8:	e070      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80064ea:	e06f      	b.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80064ec:	4b3c      	ldr	r3, [pc, #240]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80064ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064f0:	2380      	movs	r3, #128	; 0x80
 80064f2:	03db      	lsls	r3, r3, #15
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	03db      	lsls	r3, r3, #15
 80064fe:	429a      	cmp	r2, r3
 8006500:	d11b      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006502:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	045b      	lsls	r3, r3, #17
 800650a:	4013      	ands	r3, r2
 800650c:	d060      	beq.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800650e:	4b34      	ldr	r3, [pc, #208]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	227f      	movs	r2, #127	; 0x7f
 8006516:	4013      	ands	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	435a      	muls	r2, r3
 8006520:	4b2f      	ldr	r3, [pc, #188]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	0e5b      	lsrs	r3, r3, #25
 8006526:	2107      	movs	r1, #7
 8006528:	400b      	ands	r3, r1
 800652a:	3301      	adds	r3, #1
 800652c:	0019      	movs	r1, r3
 800652e:	0010      	movs	r0, r2
 8006530:	f7f9 fde8 	bl	8000104 <__udivsi3>
 8006534:	0003      	movs	r3, r0
 8006536:	617b      	str	r3, [r7, #20]
        break;
 8006538:	e04a      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d147      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006540:	f7ff fb3e 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 8006544:	0003      	movs	r3, r0
 8006546:	617b      	str	r3, [r7, #20]
        break;
 8006548:	e042      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 800654a:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800654c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	045b      	lsls	r3, r3, #17
 8006552:	4013      	ands	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	045b      	lsls	r3, r3, #17
 800655c:	429a      	cmp	r2, r3
 800655e:	d11b      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006560:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	045b      	lsls	r3, r3, #17
 8006568:	4013      	ands	r3, r2
 800656a:	d033      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800656c:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	0a1b      	lsrs	r3, r3, #8
 8006572:	227f      	movs	r2, #127	; 0x7f
 8006574:	4013      	ands	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	435a      	muls	r2, r3
 800657e:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	0e5b      	lsrs	r3, r3, #25
 8006584:	2107      	movs	r1, #7
 8006586:	400b      	ands	r3, r1
 8006588:	3301      	adds	r3, #1
 800658a:	0019      	movs	r1, r3
 800658c:	0010      	movs	r0, r2
 800658e:	f7f9 fdb9 	bl	8000104 <__udivsi3>
 8006592:	0003      	movs	r3, r0
 8006594:	617b      	str	r3, [r7, #20]
        break;
 8006596:	e01d      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11a      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 800659e:	f7ff fb0f 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 80065a2:	0003      	movs	r3, r0
 80065a4:	617b      	str	r3, [r7, #20]
        break;
 80065a6:	e015      	b.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 80065a8:	46c0      	nop			; (mov r8, r8)
 80065aa:	e014      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	e012      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	e010      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	e00e      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	e00c      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	e00a      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065c0:	46c0      	nop			; (mov r8, r8)
 80065c2:	e008      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	e006      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065c8:	46c0      	nop			; (mov r8, r8)
 80065ca:	e004      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065cc:	46c0      	nop			; (mov r8, r8)
 80065ce:	e002      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065d0:	46c0      	nop			; (mov r8, r8)
 80065d2:	e000      	b.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 80065d4:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 80065d6:	697b      	ldr	r3, [r7, #20]
}
 80065d8:	0018      	movs	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	b006      	add	sp, #24
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	40021000 	.word	0x40021000
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	0000bb80 	.word	0x0000bb80

080065ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0a8      	b.n	8006750 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	2382      	movs	r3, #130	; 0x82
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	429a      	cmp	r2, r3
 8006610:	d009      	beq.n	8006626 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	61da      	str	r2, [r3, #28]
 8006618:	e005      	b.n	8006626 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	225d      	movs	r2, #93	; 0x5d
 8006630:	5c9b      	ldrb	r3, [r3, r2]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d107      	bne.n	8006648 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	225c      	movs	r2, #92	; 0x5c
 800663c:	2100      	movs	r1, #0
 800663e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	0018      	movs	r0, r3
 8006644:	f7fc f96a 	bl	800291c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	225d      	movs	r2, #93	; 0x5d
 800664c:	2102      	movs	r1, #2
 800664e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	438a      	bics	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	23e0      	movs	r3, #224	; 0xe0
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	429a      	cmp	r2, r3
 800666a:	d902      	bls.n	8006672 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	e002      	b.n	8006678 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	015b      	lsls	r3, r3, #5
 8006676:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	23f0      	movs	r3, #240	; 0xf0
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	429a      	cmp	r2, r3
 8006682:	d008      	beq.n	8006696 <HAL_SPI_Init+0xaa>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	23e0      	movs	r3, #224	; 0xe0
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	429a      	cmp	r2, r3
 800668e:	d002      	beq.n	8006696 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	2382      	movs	r3, #130	; 0x82
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	401a      	ands	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6899      	ldr	r1, [r3, #8]
 80066a4:	2384      	movs	r3, #132	; 0x84
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	400b      	ands	r3, r1
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	2102      	movs	r1, #2
 80066b2:	400b      	ands	r3, r1
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	2101      	movs	r1, #1
 80066bc:	400b      	ands	r3, r1
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6999      	ldr	r1, [r3, #24]
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	400b      	ands	r3, r1
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	2138      	movs	r1, #56	; 0x38
 80066d2:	400b      	ands	r3, r1
 80066d4:	431a      	orrs	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	400b      	ands	r3, r1
 80066de:	431a      	orrs	r2, r3
 80066e0:	0011      	movs	r1, r2
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	019b      	lsls	r3, r3, #6
 80066ea:	401a      	ands	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	2204      	movs	r2, #4
 80066fc:	401a      	ands	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	2110      	movs	r1, #16
 8006704:	400b      	ands	r3, r1
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	2108      	movs	r1, #8
 800670e:	400b      	ands	r3, r1
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68d9      	ldr	r1, [r3, #12]
 8006716:	23f0      	movs	r3, #240	; 0xf0
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	400b      	ands	r3, r1
 800671c:	431a      	orrs	r2, r3
 800671e:	0011      	movs	r1, r2
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	2380      	movs	r3, #128	; 0x80
 8006724:	015b      	lsls	r3, r3, #5
 8006726:	401a      	ands	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69da      	ldr	r2, [r3, #28]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4907      	ldr	r1, [pc, #28]	; (8006758 <HAL_SPI_Init+0x16c>)
 800673c:	400a      	ands	r2, r1
 800673e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	225d      	movs	r2, #93	; 0x5d
 800674a:	2101      	movs	r1, #1
 800674c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	0018      	movs	r0, r3
 8006752:	46bd      	mov	sp, r7
 8006754:	b004      	add	sp, #16
 8006756:	bd80      	pop	{r7, pc}
 8006758:	fffff7ff 	.word	0xfffff7ff

0800675c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	1dbb      	adds	r3, r7, #6
 800676a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800676c:	231f      	movs	r3, #31
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	225c      	movs	r2, #92	; 0x5c
 8006778:	5c9b      	ldrb	r3, [r3, r2]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_SPI_Transmit+0x26>
 800677e:	2302      	movs	r3, #2
 8006780:	e140      	b.n	8006a04 <HAL_SPI_Transmit+0x2a8>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	225c      	movs	r2, #92	; 0x5c
 8006786:	2101      	movs	r1, #1
 8006788:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800678a:	f7fc fc65 	bl	8003058 <HAL_GetTick>
 800678e:	0003      	movs	r3, r0
 8006790:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006792:	2316      	movs	r3, #22
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	1dba      	adds	r2, r7, #6
 8006798:	8812      	ldrh	r2, [r2, #0]
 800679a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	225d      	movs	r2, #93	; 0x5d
 80067a0:	5c9b      	ldrb	r3, [r3, r2]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d004      	beq.n	80067b2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80067a8:	231f      	movs	r3, #31
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	2202      	movs	r2, #2
 80067ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80067b0:	e11d      	b.n	80069ee <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d003      	beq.n	80067c0 <HAL_SPI_Transmit+0x64>
 80067b8:	1dbb      	adds	r3, r7, #6
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80067c0:	231f      	movs	r3, #31
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80067c8:	e111      	b.n	80069ee <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	225d      	movs	r2, #93	; 0x5d
 80067ce:	2103      	movs	r1, #3
 80067d0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1dba      	adds	r2, r7, #6
 80067e2:	8812      	ldrh	r2, [r2, #0]
 80067e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1dba      	adds	r2, r7, #6
 80067ea:	8812      	ldrh	r2, [r2, #0]
 80067ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2244      	movs	r2, #68	; 0x44
 80067f8:	2100      	movs	r1, #0
 80067fa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2246      	movs	r2, #70	; 0x46
 8006800:	2100      	movs	r1, #0
 8006802:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	2380      	movs	r3, #128	; 0x80
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	429a      	cmp	r2, r3
 800681a:	d110      	bne.n	800683e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2140      	movs	r1, #64	; 0x40
 8006828:	438a      	bics	r2, r1
 800682a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	01c9      	lsls	r1, r1, #7
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2240      	movs	r2, #64	; 0x40
 8006846:	4013      	ands	r3, r2
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d007      	beq.n	800685c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2140      	movs	r1, #64	; 0x40
 8006858:	430a      	orrs	r2, r1
 800685a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	23e0      	movs	r3, #224	; 0xe0
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	429a      	cmp	r2, r3
 8006866:	d94e      	bls.n	8006906 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_SPI_Transmit+0x11e>
 8006870:	2316      	movs	r3, #22
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d13f      	bne.n	80068fa <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	1c9a      	adds	r2, r3, #2
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800689e:	e02c      	b.n	80068fa <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	2202      	movs	r2, #2
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d112      	bne.n	80068d4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	881a      	ldrh	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	1c9a      	adds	r2, r3, #2
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068d2:	e012      	b.n	80068fa <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068d4:	f7fc fbc0 	bl	8003058 <HAL_GetTick>
 80068d8:	0002      	movs	r2, r0
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d802      	bhi.n	80068ea <HAL_SPI_Transmit+0x18e>
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	3301      	adds	r3, #1
 80068e8:	d102      	bne.n	80068f0 <HAL_SPI_Transmit+0x194>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80068f0:	231f      	movs	r3, #31
 80068f2:	18fb      	adds	r3, r7, r3
 80068f4:	2203      	movs	r2, #3
 80068f6:	701a      	strb	r2, [r3, #0]
          goto error;
 80068f8:	e079      	b.n	80069ee <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fe:	b29b      	uxth	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1cd      	bne.n	80068a0 <HAL_SPI_Transmit+0x144>
 8006904:	e04f      	b.n	80069a6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d004      	beq.n	8006918 <HAL_SPI_Transmit+0x1bc>
 800690e:	2316      	movs	r3, #22
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d141      	bne.n	800699c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	7812      	ldrb	r2, [r2, #0]
 8006924:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800693e:	e02d      	b.n	800699c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2202      	movs	r2, #2
 8006948:	4013      	ands	r3, r2
 800694a:	2b02      	cmp	r3, #2
 800694c:	d113      	bne.n	8006976 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	7812      	ldrb	r2, [r2, #0]
 800695a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006974:	e012      	b.n	800699c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006976:	f7fc fb6f 	bl	8003058 <HAL_GetTick>
 800697a:	0002      	movs	r2, r0
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d802      	bhi.n	800698c <HAL_SPI_Transmit+0x230>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	d102      	bne.n	8006992 <HAL_SPI_Transmit+0x236>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d104      	bne.n	800699c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006992:	231f      	movs	r3, #31
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	2203      	movs	r2, #3
 8006998:	701a      	strb	r2, [r3, #0]
          goto error;
 800699a:	e028      	b.n	80069ee <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1cc      	bne.n	8006940 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	0018      	movs	r0, r3
 80069ae:	f001 f9cb 	bl	8007d48 <SPI_EndRxTxTransaction>
 80069b2:	1e03      	subs	r3, r0, #0
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d004      	beq.n	80069ec <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80069e2:	231f      	movs	r3, #31
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	2201      	movs	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e000      	b.n	80069ee <HAL_SPI_Transmit+0x292>
  }

error:
 80069ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	225d      	movs	r2, #93	; 0x5d
 80069f2:	2101      	movs	r1, #1
 80069f4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	225c      	movs	r2, #92	; 0x5c
 80069fa:	2100      	movs	r1, #0
 80069fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80069fe:	231f      	movs	r3, #31
 8006a00:	18fb      	adds	r3, r7, r3
 8006a02:	781b      	ldrb	r3, [r3, #0]
}
 8006a04:	0018      	movs	r0, r3
 8006a06:	46bd      	mov	sp, r7
 8006a08:	b008      	add	sp, #32
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b089      	sub	sp, #36	; 0x24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	603b      	str	r3, [r7, #0]
 8006a18:	1dbb      	adds	r3, r7, #6
 8006a1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a1c:	2317      	movs	r3, #23
 8006a1e:	18fb      	adds	r3, r7, r3
 8006a20:	2200      	movs	r2, #0
 8006a22:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	2382      	movs	r3, #130	; 0x82
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d113      	bne.n	8006a58 <HAL_SPI_Receive+0x4c>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10f      	bne.n	8006a58 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	225d      	movs	r2, #93	; 0x5d
 8006a3c:	2104      	movs	r1, #4
 8006a3e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a40:	1dbb      	adds	r3, r7, #6
 8006a42:	881c      	ldrh	r4, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	0023      	movs	r3, r4
 8006a50:	f000 f928 	bl	8006ca4 <HAL_SPI_TransmitReceive>
 8006a54:	0003      	movs	r3, r0
 8006a56:	e11c      	b.n	8006c92 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	225c      	movs	r2, #92	; 0x5c
 8006a5c:	5c9b      	ldrb	r3, [r3, r2]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_SPI_Receive+0x5a>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e115      	b.n	8006c92 <HAL_SPI_Receive+0x286>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	225c      	movs	r2, #92	; 0x5c
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a6e:	f7fc faf3 	bl	8003058 <HAL_GetTick>
 8006a72:	0003      	movs	r3, r0
 8006a74:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	225d      	movs	r2, #93	; 0x5d
 8006a7a:	5c9b      	ldrb	r3, [r3, r2]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d004      	beq.n	8006a8c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8006a82:	2317      	movs	r3, #23
 8006a84:	18fb      	adds	r3, r7, r3
 8006a86:	2202      	movs	r2, #2
 8006a88:	701a      	strb	r2, [r3, #0]
    goto error;
 8006a8a:	e0f7      	b.n	8006c7c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_SPI_Receive+0x8e>
 8006a92:	1dbb      	adds	r3, r7, #6
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2317      	movs	r3, #23
 8006a9c:	18fb      	adds	r3, r7, r3
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	701a      	strb	r2, [r3, #0]
    goto error;
 8006aa2:	e0eb      	b.n	8006c7c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	225d      	movs	r2, #93	; 0x5d
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	1dba      	adds	r2, r7, #6
 8006abc:	2144      	movs	r1, #68	; 0x44
 8006abe:	8812      	ldrh	r2, [r2, #0]
 8006ac0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1dba      	adds	r2, r7, #6
 8006ac6:	2146      	movs	r1, #70	; 0x46
 8006ac8:	8812      	ldrh	r2, [r2, #0]
 8006aca:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	23e0      	movs	r3, #224	; 0xe0
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d908      	bls.n	8006b08 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4966      	ldr	r1, [pc, #408]	; (8006c9c <HAL_SPI_Receive+0x290>)
 8006b02:	400a      	ands	r2, r1
 8006b04:	605a      	str	r2, [r3, #4]
 8006b06:	e008      	b.n	8006b1a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685a      	ldr	r2, [r3, #4]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	0149      	lsls	r1, r1, #5
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d10f      	bne.n	8006b46 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2140      	movs	r1, #64	; 0x40
 8006b32:	438a      	bics	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4957      	ldr	r1, [pc, #348]	; (8006ca0 <HAL_SPI_Receive+0x294>)
 8006b42:	400a      	ands	r2, r1
 8006b44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2240      	movs	r2, #64	; 0x40
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b40      	cmp	r3, #64	; 0x40
 8006b52:	d007      	beq.n	8006b64 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2140      	movs	r1, #64	; 0x40
 8006b60:	430a      	orrs	r2, r1
 8006b62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	23e0      	movs	r3, #224	; 0xe0
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d900      	bls.n	8006b72 <HAL_SPI_Receive+0x166>
 8006b70:	e069      	b.n	8006c46 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b72:	e031      	b.n	8006bd8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d117      	bne.n	8006bb2 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	001a      	movs	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2246      	movs	r2, #70	; 0x46
 8006ba2:	5a9b      	ldrh	r3, [r3, r2]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b299      	uxth	r1, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2246      	movs	r2, #70	; 0x46
 8006bae:	5299      	strh	r1, [r3, r2]
 8006bb0:	e012      	b.n	8006bd8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bb2:	f7fc fa51 	bl	8003058 <HAL_GetTick>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d802      	bhi.n	8006bc8 <HAL_SPI_Receive+0x1bc>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	d102      	bne.n	8006bce <HAL_SPI_Receive+0x1c2>
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d104      	bne.n	8006bd8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006bce:	2317      	movs	r3, #23
 8006bd0:	18fb      	adds	r3, r7, r3
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	701a      	strb	r2, [r3, #0]
          goto error;
 8006bd6:	e051      	b.n	8006c7c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2246      	movs	r2, #70	; 0x46
 8006bdc:	5a9b      	ldrh	r3, [r3, r2]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1c7      	bne.n	8006b74 <HAL_SPI_Receive+0x168>
 8006be4:	e035      	b.n	8006c52 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	2201      	movs	r2, #1
 8006bee:	4013      	ands	r3, r2
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d115      	bne.n	8006c20 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	1c9a      	adds	r2, r3, #2
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2246      	movs	r2, #70	; 0x46
 8006c10:	5a9b      	ldrh	r3, [r3, r2]
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b299      	uxth	r1, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2246      	movs	r2, #70	; 0x46
 8006c1c:	5299      	strh	r1, [r3, r2]
 8006c1e:	e012      	b.n	8006c46 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c20:	f7fc fa1a 	bl	8003058 <HAL_GetTick>
 8006c24:	0002      	movs	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d802      	bhi.n	8006c36 <HAL_SPI_Receive+0x22a>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	d102      	bne.n	8006c3c <HAL_SPI_Receive+0x230>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006c3c:	2317      	movs	r3, #23
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	2203      	movs	r2, #3
 8006c42:	701a      	strb	r2, [r3, #0]
          goto error;
 8006c44:	e01a      	b.n	8006c7c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2246      	movs	r2, #70	; 0x46
 8006c4a:	5a9b      	ldrh	r3, [r3, r2]
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1c9      	bne.n	8006be6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f001 f817 	bl	8007c8c <SPI_EndRxTransaction>
 8006c5e:	1e03      	subs	r3, r0, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d004      	beq.n	8006c7a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006c70:	2317      	movs	r3, #23
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	e000      	b.n	8006c7c <HAL_SPI_Receive+0x270>
  }

error :
 8006c7a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	225d      	movs	r2, #93	; 0x5d
 8006c80:	2101      	movs	r1, #1
 8006c82:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	225c      	movs	r2, #92	; 0x5c
 8006c88:	2100      	movs	r1, #0
 8006c8a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c8c:	2317      	movs	r3, #23
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	781b      	ldrb	r3, [r3, #0]
}
 8006c92:	0018      	movs	r0, r3
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b007      	add	sp, #28
 8006c98:	bd90      	pop	{r4, r7, pc}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	ffffefff 	.word	0xffffefff
 8006ca0:	ffffbfff 	.word	0xffffbfff

08006ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	; 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	1cbb      	adds	r3, r7, #2
 8006cb4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cba:	2323      	movs	r3, #35	; 0x23
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	225c      	movs	r2, #92	; 0x5c
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x2c>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e1b5      	b.n	800703c <HAL_SPI_TransmitReceive+0x398>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	225c      	movs	r2, #92	; 0x5c
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cd8:	f7fc f9be 	bl	8003058 <HAL_GetTick>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ce0:	201b      	movs	r0, #27
 8006ce2:	183b      	adds	r3, r7, r0
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	215d      	movs	r1, #93	; 0x5d
 8006ce8:	5c52      	ldrb	r2, [r2, r1]
 8006cea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006cf2:	2312      	movs	r3, #18
 8006cf4:	18fb      	adds	r3, r7, r3
 8006cf6:	1cba      	adds	r2, r7, #2
 8006cf8:	8812      	ldrh	r2, [r2, #0]
 8006cfa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cfc:	183b      	adds	r3, r7, r0
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d011      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x84>
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	2382      	movs	r3, #130	; 0x82
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d107      	bne.n	8006d1e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <HAL_SPI_TransmitReceive+0x7a>
 8006d16:	183b      	adds	r3, r7, r0
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b04      	cmp	r3, #4
 8006d1c:	d004      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006d1e:	2323      	movs	r3, #35	; 0x23
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	2202      	movs	r2, #2
 8006d24:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d26:	e17e      	b.n	8007026 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d006      	beq.n	8006d3c <HAL_SPI_TransmitReceive+0x98>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_SPI_TransmitReceive+0x98>
 8006d34:	1cbb      	adds	r3, r7, #2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d104      	bne.n	8006d46 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006d3c:	2323      	movs	r3, #35	; 0x23
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d44:	e16f      	b.n	8007026 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	225d      	movs	r2, #93	; 0x5d
 8006d4a:	5c9b      	ldrb	r3, [r3, r2]
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d003      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	225d      	movs	r2, #93	; 0x5d
 8006d56:	2105      	movs	r1, #5
 8006d58:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	1cba      	adds	r2, r7, #2
 8006d6a:	2146      	movs	r1, #70	; 0x46
 8006d6c:	8812      	ldrh	r2, [r2, #0]
 8006d6e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	1cba      	adds	r2, r7, #2
 8006d74:	2144      	movs	r1, #68	; 0x44
 8006d76:	8812      	ldrh	r2, [r2, #0]
 8006d78:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	1cba      	adds	r2, r7, #2
 8006d84:	8812      	ldrh	r2, [r2, #0]
 8006d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1cba      	adds	r2, r7, #2
 8006d8c:	8812      	ldrh	r2, [r2, #0]
 8006d8e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	23e0      	movs	r3, #224	; 0xe0
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d908      	bls.n	8006dba <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	49a4      	ldr	r1, [pc, #656]	; (8007044 <HAL_SPI_TransmitReceive+0x3a0>)
 8006db4:	400a      	ands	r2, r1
 8006db6:	605a      	str	r2, [r3, #4]
 8006db8:	e008      	b.n	8006dcc <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2180      	movs	r1, #128	; 0x80
 8006dc6:	0149      	lsls	r1, r1, #5
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2240      	movs	r2, #64	; 0x40
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d007      	beq.n	8006dea <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	23e0      	movs	r3, #224	; 0xe0
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d800      	bhi.n	8006df8 <HAL_SPI_TransmitReceive+0x154>
 8006df6:	e07f      	b.n	8006ef8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x168>
 8006e00:	2312      	movs	r3, #18
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d000      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x168>
 8006e0a:	e069      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	881a      	ldrh	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	1c9a      	adds	r2, r3, #2
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e30:	e056      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d11b      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x1d4>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d016      	beq.n	8006e78 <HAL_SPI_TransmitReceive+0x1d4>
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d113      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	881a      	ldrh	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	1c9a      	adds	r2, r3, #2
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d11c      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x21c>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2246      	movs	r2, #70	; 0x46
 8006e8a:	5a9b      	ldrh	r3, [r3, r2]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d016      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	b292      	uxth	r2, r2
 8006e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea4:	1c9a      	adds	r2, r3, #2
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2246      	movs	r2, #70	; 0x46
 8006eae:	5a9b      	ldrh	r3, [r3, r2]
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b299      	uxth	r1, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2246      	movs	r2, #70	; 0x46
 8006eba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ec0:	f7fc f8ca 	bl	8003058 <HAL_GetTick>
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d807      	bhi.n	8006ee0 <HAL_SPI_TransmitReceive+0x23c>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	d004      	beq.n	8006ee0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006ed6:	2323      	movs	r3, #35	; 0x23
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	2203      	movs	r2, #3
 8006edc:	701a      	strb	r2, [r3, #0]
        goto error;
 8006ede:	e0a2      	b.n	8007026 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1a3      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x18e>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2246      	movs	r2, #70	; 0x46
 8006eee:	5a9b      	ldrh	r3, [r3, r2]
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d19d      	bne.n	8006e32 <HAL_SPI_TransmitReceive+0x18e>
 8006ef6:	e085      	b.n	8007004 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x268>
 8006f00:	2312      	movs	r3, #18
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d000      	beq.n	8006f0c <HAL_SPI_TransmitReceive+0x268>
 8006f0a:	e070      	b.n	8006fee <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f32:	e05c      	b.n	8006fee <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d11c      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x2d8>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d017      	beq.n	8006f7c <HAL_SPI_TransmitReceive+0x2d8>
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d114      	bne.n	8006f7c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	330c      	adds	r3, #12
 8006f5c:	7812      	ldrb	r2, [r2, #0]
 8006f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2201      	movs	r2, #1
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d11e      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x324>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2246      	movs	r2, #70	; 0x46
 8006f8e:	5a9b      	ldrh	r3, [r3, r2]
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d018      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	001a      	movs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2246      	movs	r2, #70	; 0x46
 8006fb6:	5a9b      	ldrh	r3, [r3, r2]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b299      	uxth	r1, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2246      	movs	r2, #70	; 0x46
 8006fc2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006fc8:	f7fc f846 	bl	8003058 <HAL_GetTick>
 8006fcc:	0002      	movs	r2, r0
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d802      	bhi.n	8006fde <HAL_SPI_TransmitReceive+0x33a>
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	3301      	adds	r3, #1
 8006fdc:	d102      	bne.n	8006fe4 <HAL_SPI_TransmitReceive+0x340>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d104      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006fe4:	2323      	movs	r3, #35	; 0x23
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	2203      	movs	r2, #3
 8006fea:	701a      	strb	r2, [r3, #0]
        goto error;
 8006fec:	e01b      	b.n	8007026 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d19d      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x290>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2246      	movs	r2, #70	; 0x46
 8006ffc:	5a9b      	ldrh	r3, [r3, r2]
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d197      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	0018      	movs	r0, r3
 800700c:	f000 fe9c 	bl	8007d48 <SPI_EndRxTxTransaction>
 8007010:	1e03      	subs	r3, r0, #0
 8007012:	d007      	beq.n	8007024 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007014:	2323      	movs	r3, #35	; 0x23
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	2201      	movs	r2, #1
 800701a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	661a      	str	r2, [r3, #96]	; 0x60
 8007022:	e000      	b.n	8007026 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007024:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	225d      	movs	r2, #93	; 0x5d
 800702a:	2101      	movs	r1, #1
 800702c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	225c      	movs	r2, #92	; 0x5c
 8007032:	2100      	movs	r1, #0
 8007034:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007036:	2323      	movs	r3, #35	; 0x23
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	781b      	ldrb	r3, [r3, #0]
}
 800703c:	0018      	movs	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	b00a      	add	sp, #40	; 0x28
 8007042:	bd80      	pop	{r7, pc}
 8007044:	ffffefff 	.word	0xffffefff

08007048 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	1dbb      	adds	r3, r7, #6
 8007054:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007056:	2317      	movs	r3, #23
 8007058:	18fb      	adds	r3, r7, r3
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d112      	bne.n	800708c <HAL_SPI_Receive_DMA+0x44>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	2382      	movs	r3, #130	; 0x82
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	429a      	cmp	r2, r3
 8007070:	d10c      	bne.n	800708c <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	225d      	movs	r2, #93	; 0x5d
 8007076:	2104      	movs	r1, #4
 8007078:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800707a:	1dbb      	adds	r3, r7, #6
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f91e 	bl	80072c4 <HAL_SPI_TransmitReceive_DMA>
 8007088:	0003      	movs	r3, r0
 800708a:	e10b      	b.n	80072a4 <HAL_SPI_Receive_DMA+0x25c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	225c      	movs	r2, #92	; 0x5c
 8007090:	5c9b      	ldrb	r3, [r3, r2]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_SPI_Receive_DMA+0x52>
 8007096:	2302      	movs	r3, #2
 8007098:	e104      	b.n	80072a4 <HAL_SPI_Receive_DMA+0x25c>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	225c      	movs	r2, #92	; 0x5c
 800709e:	2101      	movs	r1, #1
 80070a0:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	225d      	movs	r2, #93	; 0x5d
 80070a6:	5c9b      	ldrb	r3, [r3, r2]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d004      	beq.n	80070b8 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80070ae:	2317      	movs	r3, #23
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	2202      	movs	r2, #2
 80070b4:	701a      	strb	r2, [r3, #0]
    goto error;
 80070b6:	e0ee      	b.n	8007296 <HAL_SPI_Receive_DMA+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d003      	beq.n	80070c6 <HAL_SPI_Receive_DMA+0x7e>
 80070be:	1dbb      	adds	r3, r7, #6
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 80070c6:	2317      	movs	r3, #23
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	2201      	movs	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]
    goto error;
 80070ce:	e0e2      	b.n	8007296 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	225d      	movs	r2, #93	; 0x5d
 80070d4:	2104      	movs	r1, #4
 80070d6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	1dba      	adds	r2, r7, #6
 80070e8:	2144      	movs	r1, #68	; 0x44
 80070ea:	8812      	ldrh	r2, [r2, #0]
 80070ec:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	1dba      	adds	r2, r7, #6
 80070f2:	2146      	movs	r1, #70	; 0x46
 80070f4:	8812      	ldrh	r2, [r2, #0]
 80070f6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	2380      	movs	r3, #128	; 0x80
 8007116:	021b      	lsls	r3, r3, #8
 8007118:	429a      	cmp	r2, r3
 800711a:	d10f      	bne.n	800713c <HAL_SPI_Receive_DMA+0xf4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2140      	movs	r1, #64	; 0x40
 8007128:	438a      	bics	r2, r1
 800712a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	495d      	ldr	r1, [pc, #372]	; (80072ac <HAL_SPI_Receive_DMA+0x264>)
 8007138:	400a      	ands	r2, r1
 800713a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	495a      	ldr	r1, [pc, #360]	; (80072b0 <HAL_SPI_Receive_DMA+0x268>)
 8007148:	400a      	ands	r2, r1
 800714a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	68da      	ldr	r2, [r3, #12]
 8007150:	23e0      	movs	r3, #224	; 0xe0
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	429a      	cmp	r2, r3
 8007156:	d908      	bls.n	800716a <HAL_SPI_Receive_DMA+0x122>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4954      	ldr	r1, [pc, #336]	; (80072b4 <HAL_SPI_Receive_DMA+0x26c>)
 8007164:	400a      	ands	r2, r1
 8007166:	605a      	str	r2, [r3, #4]
 8007168:	e045      	b.n	80071f6 <HAL_SPI_Receive_DMA+0x1ae>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2180      	movs	r1, #128	; 0x80
 8007176:	0149      	lsls	r1, r1, #5
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	2380      	movs	r3, #128	; 0x80
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	429a      	cmp	r2, r3
 8007188:	d135      	bne.n	80071f6 <HAL_SPI_Receive_DMA+0x1ae>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4947      	ldr	r1, [pc, #284]	; (80072b4 <HAL_SPI_Receive_DMA+0x26c>)
 8007196:	400a      	ands	r2, r1
 8007198:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2246      	movs	r2, #70	; 0x46
 800719e:	5a9b      	ldrh	r3, [r3, r2]
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	001a      	movs	r2, r3
 80071a4:	2301      	movs	r3, #1
 80071a6:	4013      	ands	r3, r2
 80071a8:	d111      	bne.n	80071ce <HAL_SPI_Receive_DMA+0x186>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	493e      	ldr	r1, [pc, #248]	; (80072b0 <HAL_SPI_Receive_DMA+0x268>)
 80071b6:	400a      	ands	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2246      	movs	r2, #70	; 0x46
 80071be:	5a9b      	ldrh	r3, [r3, r2]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	085b      	lsrs	r3, r3, #1
 80071c4:	b299      	uxth	r1, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2246      	movs	r2, #70	; 0x46
 80071ca:	5299      	strh	r1, [r3, r2]
 80071cc:	e013      	b.n	80071f6 <HAL_SPI_Receive_DMA+0x1ae>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	0189      	lsls	r1, r1, #6
 80071dc:	430a      	orrs	r2, r1
 80071de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2246      	movs	r2, #70	; 0x46
 80071e4:	5a9b      	ldrh	r3, [r3, r2]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	3301      	adds	r3, #1
 80071ee:	b299      	uxth	r1, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2246      	movs	r2, #70	; 0x46
 80071f4:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071fa:	4a2f      	ldr	r2, [pc, #188]	; (80072b8 <HAL_SPI_Receive_DMA+0x270>)
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	4a2e      	ldr	r2, [pc, #184]	; (80072bc <HAL_SPI_Receive_DMA+0x274>)
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <HAL_SPI_Receive_DMA+0x278>)
 800720c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007212:	2200      	movs	r2, #0
 8007214:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	0019      	movs	r1, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2246      	movs	r2, #70	; 0x46
 800722c:	5a9b      	ldrh	r3, [r3, r2]
 800722e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007230:	0022      	movs	r2, r4
 8007232:	f7fc fb1d 	bl	8003870 <HAL_DMA_Start_IT>
 8007236:	1e03      	subs	r3, r0, #0
 8007238:	d00e      	beq.n	8007258 <HAL_SPI_Receive_DMA+0x210>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800723e:	2210      	movs	r2, #16
 8007240:	431a      	orrs	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007246:	2317      	movs	r3, #23
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	225d      	movs	r2, #93	; 0x5d
 8007252:	2101      	movs	r1, #1
 8007254:	5499      	strb	r1, [r3, r2]
    goto error;
 8007256:	e01e      	b.n	8007296 <HAL_SPI_Receive_DMA+0x24e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2240      	movs	r2, #64	; 0x40
 8007260:	4013      	ands	r3, r2
 8007262:	2b40      	cmp	r3, #64	; 0x40
 8007264:	d007      	beq.n	8007276 <HAL_SPI_Receive_DMA+0x22e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2140      	movs	r1, #64	; 0x40
 8007272:	430a      	orrs	r2, r1
 8007274:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2120      	movs	r1, #32
 8007282:	430a      	orrs	r2, r1
 8007284:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2101      	movs	r1, #1
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	225c      	movs	r2, #92	; 0x5c
 800729a:	2100      	movs	r1, #0
 800729c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800729e:	2317      	movs	r3, #23
 80072a0:	18fb      	adds	r3, r7, r3
 80072a2:	781b      	ldrb	r3, [r3, #0]
}
 80072a4:	0018      	movs	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b007      	add	sp, #28
 80072aa:	bd90      	pop	{r4, r7, pc}
 80072ac:	ffffbfff 	.word	0xffffbfff
 80072b0:	ffffdfff 	.word	0xffffdfff
 80072b4:	ffffefff 	.word	0xffffefff
 80072b8:	0800799b 	.word	0x0800799b
 80072bc:	08007855 	.word	0x08007855
 80072c0:	080079d7 	.word	0x080079d7

080072c4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	001a      	movs	r2, r3
 80072d2:	1cbb      	adds	r3, r7, #2
 80072d4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072d6:	2317      	movs	r3, #23
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	2200      	movs	r2, #0
 80072dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	225c      	movs	r2, #92	; 0x5c
 80072e2:	5c9b      	ldrb	r3, [r3, r2]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_SPI_TransmitReceive_DMA+0x28>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e186      	b.n	80075fa <HAL_SPI_TransmitReceive_DMA+0x336>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	225c      	movs	r2, #92	; 0x5c
 80072f0:	2101      	movs	r1, #1
 80072f2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072f4:	2016      	movs	r0, #22
 80072f6:	183b      	adds	r3, r7, r0
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	215d      	movs	r1, #93	; 0x5d
 80072fc:	5c52      	ldrb	r2, [r2, r1]
 80072fe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007306:	0001      	movs	r1, r0
 8007308:	187b      	adds	r3, r7, r1
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d011      	beq.n	8007334 <HAL_SPI_TransmitReceive_DMA+0x70>
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	2382      	movs	r3, #130	; 0x82
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	429a      	cmp	r2, r3
 8007318:	d107      	bne.n	800732a <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <HAL_SPI_TransmitReceive_DMA+0x66>
 8007322:	187b      	adds	r3, r7, r1
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d004      	beq.n	8007334 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800732a:	2317      	movs	r3, #23
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	2202      	movs	r2, #2
 8007330:	701a      	strb	r2, [r3, #0]
    goto error;
 8007332:	e15b      	b.n	80075ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <HAL_SPI_TransmitReceive_DMA+0x84>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_SPI_TransmitReceive_DMA+0x84>
 8007340:	1cbb      	adds	r3, r7, #2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8007348:	2317      	movs	r3, #23
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007350:	e14c      	b.n	80075ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	225d      	movs	r2, #93	; 0x5d
 8007356:	5c9b      	ldrb	r3, [r3, r2]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b04      	cmp	r3, #4
 800735c:	d003      	beq.n	8007366 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	225d      	movs	r2, #93	; 0x5d
 8007362:	2105      	movs	r1, #5
 8007364:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	1cba      	adds	r2, r7, #2
 8007376:	8812      	ldrh	r2, [r2, #0]
 8007378:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	1cba      	adds	r2, r7, #2
 800737e:	8812      	ldrh	r2, [r2, #0]
 8007380:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	1cba      	adds	r2, r7, #2
 800738c:	2144      	movs	r1, #68	; 0x44
 800738e:	8812      	ldrh	r2, [r2, #0]
 8007390:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1cba      	adds	r2, r7, #2
 8007396:	2146      	movs	r1, #70	; 0x46
 8007398:	8812      	ldrh	r2, [r2, #0]
 800739a:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4994      	ldr	r1, [pc, #592]	; (8007604 <HAL_SPI_TransmitReceive_DMA+0x340>)
 80073b4:	400a      	ands	r2, r1
 80073b6:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	23e0      	movs	r3, #224	; 0xe0
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d908      	bls.n	80073d6 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685a      	ldr	r2, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	498e      	ldr	r1, [pc, #568]	; (8007608 <HAL_SPI_TransmitReceive_DMA+0x344>)
 80073d0:	400a      	ands	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
 80073d4:	e074      	b.n	80074c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	0149      	lsls	r1, r1, #5
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	2380      	movs	r3, #128	; 0x80
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d127      	bne.n	8007446 <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80073fa:	001a      	movs	r2, r3
 80073fc:	2301      	movs	r3, #1
 80073fe:	4013      	ands	r3, r2
 8007400:	d10f      	bne.n	8007422 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	497f      	ldr	r1, [pc, #508]	; (800760c <HAL_SPI_TransmitReceive_DMA+0x348>)
 800740e:	400a      	ands	r2, r1
 8007410:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007416:	b29b      	uxth	r3, r3
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007420:	e011      	b.n	8007446 <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	01c9      	lsls	r1, r1, #7
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007438:	b29b      	uxth	r3, r3
 800743a:	085b      	lsrs	r3, r3, #1
 800743c:	b29b      	uxth	r3, r3
 800743e:	3301      	adds	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	2380      	movs	r3, #128	; 0x80
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	429a      	cmp	r2, r3
 8007452:	d135      	bne.n	80074c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	496a      	ldr	r1, [pc, #424]	; (8007608 <HAL_SPI_TransmitReceive_DMA+0x344>)
 8007460:	400a      	ands	r2, r1
 8007462:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2246      	movs	r2, #70	; 0x46
 8007468:	5a9b      	ldrh	r3, [r3, r2]
 800746a:	b29b      	uxth	r3, r3
 800746c:	001a      	movs	r2, r3
 800746e:	2301      	movs	r3, #1
 8007470:	4013      	ands	r3, r2
 8007472:	d111      	bne.n	8007498 <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4964      	ldr	r1, [pc, #400]	; (8007610 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8007480:	400a      	ands	r2, r1
 8007482:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2246      	movs	r2, #70	; 0x46
 8007488:	5a9b      	ldrh	r3, [r3, r2]
 800748a:	b29b      	uxth	r3, r3
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	b299      	uxth	r1, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2246      	movs	r2, #70	; 0x46
 8007494:	5299      	strh	r1, [r3, r2]
 8007496:	e013      	b.n	80074c0 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2180      	movs	r1, #128	; 0x80
 80074a4:	0189      	lsls	r1, r1, #6
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2246      	movs	r2, #70	; 0x46
 80074ae:	5a9b      	ldrh	r3, [r3, r2]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3301      	adds	r3, #1
 80074b8:	b299      	uxth	r1, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2246      	movs	r2, #70	; 0x46
 80074be:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	225d      	movs	r2, #93	; 0x5d
 80074c4:	5c9b      	ldrb	r3, [r3, r2]
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d108      	bne.n	80074de <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d0:	4a50      	ldr	r2, [pc, #320]	; (8007614 <HAL_SPI_TransmitReceive_DMA+0x350>)
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	4a4f      	ldr	r2, [pc, #316]	; (8007618 <HAL_SPI_TransmitReceive_DMA+0x354>)
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c
 80074dc:	e007      	b.n	80074ee <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	4a4e      	ldr	r2, [pc, #312]	; (800761c <HAL_SPI_TransmitReceive_DMA+0x358>)
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	4a4d      	ldr	r2, [pc, #308]	; (8007620 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 80074ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074f2:	4a4c      	ldr	r2, [pc, #304]	; (8007624 <HAL_SPI_TransmitReceive_DMA+0x360>)
 80074f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074fa:	2200      	movs	r2, #0
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	330c      	adds	r3, #12
 8007508:	0019      	movs	r1, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2246      	movs	r2, #70	; 0x46
 8007514:	5a9b      	ldrh	r3, [r3, r2]
 8007516:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007518:	0022      	movs	r2, r4
 800751a:	f7fc f9a9 	bl	8003870 <HAL_DMA_Start_IT>
 800751e:	1e03      	subs	r3, r0, #0
 8007520:	d00e      	beq.n	8007540 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007526:	2210      	movs	r2, #16
 8007528:	431a      	orrs	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800752e:	2317      	movs	r3, #23
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	225d      	movs	r2, #93	; 0x5d
 800753a:	2101      	movs	r1, #1
 800753c:	5499      	strb	r1, [r3, r2]
    goto error;
 800753e:	e055      	b.n	80075ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2101      	movs	r1, #1
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	2200      	movs	r2, #0
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	2200      	movs	r2, #0
 800755e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007564:	2200      	movs	r2, #0
 8007566:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756c:	2200      	movs	r2, #0
 800756e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	0019      	movs	r1, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	330c      	adds	r3, #12
 8007580:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007586:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007588:	f7fc f972 	bl	8003870 <HAL_DMA_Start_IT>
 800758c:	1e03      	subs	r3, r0, #0
 800758e:	d00e      	beq.n	80075ae <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007594:	2210      	movs	r2, #16
 8007596:	431a      	orrs	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800759c:	2317      	movs	r3, #23
 800759e:	18fb      	adds	r3, r7, r3
 80075a0:	2201      	movs	r2, #1
 80075a2:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	225d      	movs	r2, #93	; 0x5d
 80075a8:	2101      	movs	r1, #1
 80075aa:	5499      	strb	r1, [r3, r2]
    goto error;
 80075ac:	e01e      	b.n	80075ec <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2240      	movs	r2, #64	; 0x40
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b40      	cmp	r3, #64	; 0x40
 80075ba:	d007      	beq.n	80075cc <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2140      	movs	r1, #64	; 0x40
 80075c8:	430a      	orrs	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2120      	movs	r1, #32
 80075d8:	430a      	orrs	r2, r1
 80075da:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2102      	movs	r1, #2
 80075e8:	430a      	orrs	r2, r1
 80075ea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	225c      	movs	r2, #92	; 0x5c
 80075f0:	2100      	movs	r1, #0
 80075f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80075f4:	2317      	movs	r3, #23
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	781b      	ldrb	r3, [r3, #0]
}
 80075fa:	0018      	movs	r0, r3
 80075fc:	46bd      	mov	sp, r7
 80075fe:	b007      	add	sp, #28
 8007600:	bd90      	pop	{r4, r7, pc}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	ffff9fff 	.word	0xffff9fff
 8007608:	ffffefff 	.word	0xffffefff
 800760c:	ffffbfff 	.word	0xffffbfff
 8007610:	ffffdfff 	.word	0xffffdfff
 8007614:	0800799b 	.word	0x0800799b
 8007618:	08007855 	.word	0x08007855
 800761c:	080079b9 	.word	0x080079b9
 8007620:	08007905 	.word	0x08007905
 8007624:	080079d7 	.word	0x080079d7

08007628 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	099b      	lsrs	r3, r3, #6
 8007644:	001a      	movs	r2, r3
 8007646:	2301      	movs	r3, #1
 8007648:	4013      	ands	r3, r2
 800764a:	d10f      	bne.n	800766c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2201      	movs	r2, #1
 8007650:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007652:	d00b      	beq.n	800766c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	099b      	lsrs	r3, r3, #6
 8007658:	001a      	movs	r2, r3
 800765a:	2301      	movs	r3, #1
 800765c:	4013      	ands	r3, r2
 800765e:	d005      	beq.n	800766c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	0010      	movs	r0, r2
 8007668:	4798      	blx	r3
    return;
 800766a:	e0d5      	b.n	8007818 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	001a      	movs	r2, r3
 8007672:	2301      	movs	r3, #1
 8007674:	4013      	ands	r3, r2
 8007676:	d00b      	beq.n	8007690 <HAL_SPI_IRQHandler+0x68>
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	09db      	lsrs	r3, r3, #7
 800767c:	001a      	movs	r2, r3
 800767e:	2301      	movs	r3, #1
 8007680:	4013      	ands	r3, r2
 8007682:	d005      	beq.n	8007690 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	0010      	movs	r0, r2
 800768c:	4798      	blx	r3
    return;
 800768e:	e0c3      	b.n	8007818 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	001a      	movs	r2, r3
 8007696:	2301      	movs	r3, #1
 8007698:	4013      	ands	r3, r2
 800769a:	d10c      	bne.n	80076b6 <HAL_SPI_IRQHandler+0x8e>
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	099b      	lsrs	r3, r3, #6
 80076a0:	001a      	movs	r2, r3
 80076a2:	2301      	movs	r3, #1
 80076a4:	4013      	ands	r3, r2
 80076a6:	d106      	bne.n	80076b6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	001a      	movs	r2, r3
 80076ae:	2301      	movs	r3, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	d100      	bne.n	80076b6 <HAL_SPI_IRQHandler+0x8e>
 80076b4:	e0b0      	b.n	8007818 <HAL_SPI_IRQHandler+0x1f0>
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	095b      	lsrs	r3, r3, #5
 80076ba:	001a      	movs	r2, r3
 80076bc:	2301      	movs	r3, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	d100      	bne.n	80076c4 <HAL_SPI_IRQHandler+0x9c>
 80076c2:	e0a9      	b.n	8007818 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	099b      	lsrs	r3, r3, #6
 80076c8:	001a      	movs	r2, r3
 80076ca:	2301      	movs	r3, #1
 80076cc:	4013      	ands	r3, r2
 80076ce:	d023      	beq.n	8007718 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	225d      	movs	r2, #93	; 0x5d
 80076d4:	5c9b      	ldrb	r3, [r3, r2]
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d011      	beq.n	8007700 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e0:	2204      	movs	r2, #4
 80076e2:	431a      	orrs	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	617b      	str	r3, [r7, #20]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	e00b      	b.n	8007718 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
        return;
 8007716:	e07f      	b.n	8007818 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	001a      	movs	r2, r3
 800771e:	2301      	movs	r3, #1
 8007720:	4013      	ands	r3, r2
 8007722:	d014      	beq.n	800774e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007728:	2201      	movs	r2, #1
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007730:	2300      	movs	r3, #0
 8007732:	60fb      	str	r3, [r7, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2140      	movs	r1, #64	; 0x40
 8007748:	438a      	bics	r2, r1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	001a      	movs	r2, r3
 8007754:	2301      	movs	r3, #1
 8007756:	4013      	ands	r3, r2
 8007758:	d00c      	beq.n	8007774 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775e:	2208      	movs	r2, #8
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007766:	2300      	movs	r3, #0
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007778:	2b00      	cmp	r3, #0
 800777a:	d04c      	beq.n	8007816 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	21e0      	movs	r1, #224	; 0xe0
 8007788:	438a      	bics	r2, r1
 800778a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	225d      	movs	r2, #93	; 0x5d
 8007790:	2101      	movs	r1, #1
 8007792:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	2202      	movs	r2, #2
 8007798:	4013      	ands	r3, r2
 800779a:	d103      	bne.n	80077a4 <HAL_SPI_IRQHandler+0x17c>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2201      	movs	r2, #1
 80077a0:	4013      	ands	r3, r2
 80077a2:	d032      	beq.n	800780a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2103      	movs	r1, #3
 80077b0:	438a      	bics	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c0:	4a17      	ldr	r2, [pc, #92]	; (8007820 <HAL_SPI_IRQHandler+0x1f8>)
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c8:	0018      	movs	r0, r3
 80077ca:	f7fc f8d7 	bl	800397c <HAL_DMA_Abort_IT>
 80077ce:	1e03      	subs	r3, r0, #0
 80077d0:	d005      	beq.n	80077de <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d6:	2240      	movs	r2, #64	; 0x40
 80077d8:	431a      	orrs	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d016      	beq.n	8007814 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	4a0d      	ldr	r2, [pc, #52]	; (8007820 <HAL_SPI_IRQHandler+0x1f8>)
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7fc f8c2 	bl	800397c <HAL_DMA_Abort_IT>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d00b      	beq.n	8007814 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007800:	2240      	movs	r2, #64	; 0x40
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007808:	e004      	b.n	8007814 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	0018      	movs	r0, r3
 800780e:	f000 f819 	bl	8007844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007812:	e000      	b.n	8007816 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007814:	46c0      	nop			; (mov r8, r8)
    return;
 8007816:	46c0      	nop			; (mov r8, r8)
  }
}
 8007818:	46bd      	mov	sp, r7
 800781a:	b008      	add	sp, #32
 800781c:	bd80      	pop	{r7, pc}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	08007a19 	.word	0x08007a19

08007824 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800782c:	46c0      	nop			; (mov r8, r8)
 800782e:	46bd      	mov	sp, r7
 8007830:	b002      	add	sp, #8
 8007832:	bd80      	pop	{r7, pc}

08007834 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800783c:	46c0      	nop			; (mov r8, r8)
 800783e:	46bd      	mov	sp, r7
 8007840:	b002      	add	sp, #8
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800784c:	46c0      	nop			; (mov r8, r8)
 800784e:	46bd      	mov	sp, r7
 8007850:	b002      	add	sp, #8
 8007852:	bd80      	pop	{r7, pc}

08007854 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007860:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007862:	f7fb fbf9 	bl	8003058 <HAL_GetTick>
 8007866:	0003      	movs	r3, r0
 8007868:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2220      	movs	r2, #32
 8007872:	4013      	ands	r3, r2
 8007874:	2b20      	cmp	r3, #32
 8007876:	d03e      	beq.n	80078f6 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2120      	movs	r1, #32
 8007884:	438a      	bics	r2, r1
 8007886:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10e      	bne.n	80078ae <SPI_DMAReceiveCplt+0x5a>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	2382      	movs	r3, #130	; 0x82
 8007896:	005b      	lsls	r3, r3, #1
 8007898:	429a      	cmp	r2, r3
 800789a:	d108      	bne.n	80078ae <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2103      	movs	r1, #3
 80078a8:	438a      	bics	r2, r1
 80078aa:	605a      	str	r2, [r3, #4]
 80078ac:	e007      	b.n	80078be <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2101      	movs	r1, #1
 80078ba:	438a      	bics	r2, r1
 80078bc:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2164      	movs	r1, #100	; 0x64
 80078c4:	0018      	movs	r0, r3
 80078c6:	f000 f9e1 	bl	8007c8c <SPI_EndRxTransaction>
 80078ca:	1e03      	subs	r3, r0, #0
 80078cc:	d002      	beq.n	80078d4 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2246      	movs	r2, #70	; 0x46
 80078d8:	2100      	movs	r1, #0
 80078da:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	225d      	movs	r2, #93	; 0x5d
 80078e0:	2101      	movs	r1, #1
 80078e2:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d004      	beq.n	80078f6 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f7ff ffa8 	bl	8007844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80078f4:	e003      	b.n	80078fe <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f7f9 fbb1 	bl	8001060 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078fe:	46bd      	mov	sp, r7
 8007900:	b004      	add	sp, #16
 8007902:	bd80      	pop	{r7, pc}

08007904 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007910:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007912:	f7fb fba1 	bl	8003058 <HAL_GetTick>
 8007916:	0003      	movs	r3, r0
 8007918:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2220      	movs	r2, #32
 8007922:	4013      	ands	r3, r2
 8007924:	2b20      	cmp	r3, #32
 8007926:	d031      	beq.n	800798c <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2120      	movs	r1, #32
 8007934:	438a      	bics	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2164      	movs	r1, #100	; 0x64
 800793e:	0018      	movs	r0, r3
 8007940:	f000 fa02 	bl	8007d48 <SPI_EndRxTxTransaction>
 8007944:	1e03      	subs	r3, r0, #0
 8007946:	d005      	beq.n	8007954 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794c:	2220      	movs	r2, #32
 800794e:	431a      	orrs	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2103      	movs	r1, #3
 8007960:	438a      	bics	r2, r1
 8007962:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2246      	movs	r2, #70	; 0x46
 800796e:	2100      	movs	r1, #0
 8007970:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	225d      	movs	r2, #93	; 0x5d
 8007976:	2101      	movs	r1, #1
 8007978:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797e:	2b00      	cmp	r3, #0
 8007980:	d004      	beq.n	800798c <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	0018      	movs	r0, r3
 8007986:	f7ff ff5d 	bl	8007844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800798a:	e003      	b.n	8007994 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	0018      	movs	r0, r3
 8007990:	f7ff ff48 	bl	8007824 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007994:	46bd      	mov	sp, r7
 8007996:	b004      	add	sp, #16
 8007998:	bd80      	pop	{r7, pc}

0800799a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	0018      	movs	r0, r3
 80079ac:	f7f9 fb20 	bl	8000ff0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079b0:	46c0      	nop			; (mov r8, r8)
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b004      	add	sp, #16
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	0018      	movs	r0, r3
 80079ca:	f7ff ff33 	bl	8007834 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	46bd      	mov	sp, r7
 80079d2:	b004      	add	sp, #16
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2103      	movs	r1, #3
 80079f0:	438a      	bics	r2, r1
 80079f2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f8:	2210      	movs	r2, #16
 80079fa:	431a      	orrs	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	225d      	movs	r2, #93	; 0x5d
 8007a04:	2101      	movs	r1, #1
 8007a06:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7ff ff1a 	bl	8007844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a10:	46c0      	nop			; (mov r8, r8)
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b004      	add	sp, #16
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2246      	movs	r2, #70	; 0x46
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff ff04 	bl	8007844 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a3c:	46c0      	nop			; (mov r8, r8)
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b004      	add	sp, #16
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	1dfb      	adds	r3, r7, #7
 8007a52:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a54:	f7fb fb00 	bl	8003058 <HAL_GetTick>
 8007a58:	0002      	movs	r2, r0
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	1a9b      	subs	r3, r3, r2
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	18d3      	adds	r3, r2, r3
 8007a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a64:	f7fb faf8 	bl	8003058 <HAL_GetTick>
 8007a68:	0003      	movs	r3, r0
 8007a6a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a6c:	4b3a      	ldr	r3, [pc, #232]	; (8007b58 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	015b      	lsls	r3, r3, #5
 8007a72:	0d1b      	lsrs	r3, r3, #20
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	4353      	muls	r3, r2
 8007a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a7a:	e058      	b.n	8007b2e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	d055      	beq.n	8007b2e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a82:	f7fb fae9 	bl	8003058 <HAL_GetTick>
 8007a86:	0002      	movs	r2, r0
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d902      	bls.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d142      	bne.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685a      	ldr	r2, [r3, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	21e0      	movs	r1, #224	; 0xe0
 8007aa4:	438a      	bics	r2, r1
 8007aa6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	2382      	movs	r3, #130	; 0x82
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d113      	bne.n	8007adc <SPI_WaitFlagStateUntilTimeout+0x98>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	2380      	movs	r3, #128	; 0x80
 8007aba:	021b      	lsls	r3, r3, #8
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d005      	beq.n	8007acc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	2380      	movs	r3, #128	; 0x80
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d107      	bne.n	8007adc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2140      	movs	r1, #64	; 0x40
 8007ad8:	438a      	bics	r2, r1
 8007ada:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ae0:	2380      	movs	r3, #128	; 0x80
 8007ae2:	019b      	lsls	r3, r3, #6
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d110      	bne.n	8007b0a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	491a      	ldr	r1, [pc, #104]	; (8007b5c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007af4:	400a      	ands	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2180      	movs	r1, #128	; 0x80
 8007b04:	0189      	lsls	r1, r1, #6
 8007b06:	430a      	orrs	r2, r1
 8007b08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	225d      	movs	r2, #93	; 0x5d
 8007b0e:	2101      	movs	r1, #1
 8007b10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	225c      	movs	r2, #92	; 0x5c
 8007b16:	2100      	movs	r1, #0
 8007b18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e017      	b.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	4013      	ands	r3, r2
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	425a      	negs	r2, r3
 8007b3e:	4153      	adcs	r3, r2
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	001a      	movs	r2, r3
 8007b44:	1dfb      	adds	r3, r7, #7
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d197      	bne.n	8007a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	0018      	movs	r0, r3
 8007b50:	46bd      	mov	sp, r7
 8007b52:	b008      	add	sp, #32
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	20003134 	.word	0x20003134
 8007b5c:	ffffdfff 	.word	0xffffdfff

08007b60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b6e:	f7fb fa73 	bl	8003058 <HAL_GetTick>
 8007b72:	0002      	movs	r2, r0
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	1a9b      	subs	r3, r3, r2
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	18d3      	adds	r3, r2, r3
 8007b7c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b7e:	f7fb fa6b 	bl	8003058 <HAL_GetTick>
 8007b82:	0003      	movs	r3, r0
 8007b84:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b86:	4b3f      	ldr	r3, [pc, #252]	; (8007c84 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	0013      	movs	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	189b      	adds	r3, r3, r2
 8007b90:	00da      	lsls	r2, r3, #3
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	0d1b      	lsrs	r3, r3, #20
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	4353      	muls	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b9c:	e064      	b.n	8007c68 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	23c0      	movs	r3, #192	; 0xc0
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d106      	bne.n	8007bb6 <SPI_WaitFifoStateUntilTimeout+0x56>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	d055      	beq.n	8007c68 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bbc:	f7fb fa4c 	bl	8003058 <HAL_GetTick>
 8007bc0:	0002      	movs	r2, r0
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d902      	bls.n	8007bd2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d142      	bne.n	8007c58 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	21e0      	movs	r1, #224	; 0xe0
 8007bde:	438a      	bics	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	2382      	movs	r3, #130	; 0x82
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d113      	bne.n	8007c16 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	2380      	movs	r3, #128	; 0x80
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d005      	beq.n	8007c06 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	2380      	movs	r3, #128	; 0x80
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d107      	bne.n	8007c16 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2140      	movs	r1, #64	; 0x40
 8007c12:	438a      	bics	r2, r1
 8007c14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c1a:	2380      	movs	r3, #128	; 0x80
 8007c1c:	019b      	lsls	r3, r3, #6
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d110      	bne.n	8007c44 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4916      	ldr	r1, [pc, #88]	; (8007c88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007c2e:	400a      	ands	r2, r1
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2180      	movs	r1, #128	; 0x80
 8007c3e:	0189      	lsls	r1, r1, #6
 8007c40:	430a      	orrs	r2, r1
 8007c42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	225d      	movs	r2, #93	; 0x5d
 8007c48:	2101      	movs	r1, #1
 8007c4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	225c      	movs	r2, #92	; 0x5c
 8007c50:	2100      	movs	r1, #0
 8007c52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e010      	b.n	8007c7a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	4013      	ands	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d192      	bne.n	8007b9e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b008      	add	sp, #32
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	20003134 	.word	0x20003134
 8007c88:	ffffdfff 	.word	0xffffdfff

08007c8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af02      	add	r7, sp, #8
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	2382      	movs	r3, #130	; 0x82
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d113      	bne.n	8007ccc <SPI_EndRxTransaction+0x40>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	2380      	movs	r3, #128	; 0x80
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d005      	beq.n	8007cbc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	2380      	movs	r3, #128	; 0x80
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d107      	bne.n	8007ccc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2140      	movs	r1, #64	; 0x40
 8007cc8:	438a      	bics	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	0013      	movs	r3, r2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2180      	movs	r1, #128	; 0x80
 8007cda:	f7ff feb3 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007cde:	1e03      	subs	r3, r0, #0
 8007ce0:	d007      	beq.n	8007cf2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e026      	b.n	8007d40 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	685a      	ldr	r2, [r3, #4]
 8007cf6:	2382      	movs	r3, #130	; 0x82
 8007cf8:	005b      	lsls	r3, r3, #1
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d11f      	bne.n	8007d3e <SPI_EndRxTransaction+0xb2>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	689a      	ldr	r2, [r3, #8]
 8007d02:	2380      	movs	r3, #128	; 0x80
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d005      	beq.n	8007d16 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	2380      	movs	r3, #128	; 0x80
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d113      	bne.n	8007d3e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	23c0      	movs	r3, #192	; 0xc0
 8007d1a:	00d9      	lsls	r1, r3, #3
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	0013      	movs	r3, r2
 8007d24:	2200      	movs	r2, #0
 8007d26:	f7ff ff1b 	bl	8007b60 <SPI_WaitFifoStateUntilTimeout>
 8007d2a:	1e03      	subs	r3, r0, #0
 8007d2c:	d007      	beq.n	8007d3e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d32:	2220      	movs	r2, #32
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e000      	b.n	8007d40 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	0018      	movs	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	b004      	add	sp, #16
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	23c0      	movs	r3, #192	; 0xc0
 8007d58:	0159      	lsls	r1, r3, #5
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	0013      	movs	r3, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	f7ff fefc 	bl	8007b60 <SPI_WaitFifoStateUntilTimeout>
 8007d68:	1e03      	subs	r3, r0, #0
 8007d6a:	d007      	beq.n	8007d7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d70:	2220      	movs	r2, #32
 8007d72:	431a      	orrs	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e027      	b.n	8007dcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	0013      	movs	r3, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	2180      	movs	r1, #128	; 0x80
 8007d8a:	f7ff fe5b 	bl	8007a44 <SPI_WaitFlagStateUntilTimeout>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d007      	beq.n	8007da2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d96:	2220      	movs	r2, #32
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e014      	b.n	8007dcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	23c0      	movs	r3, #192	; 0xc0
 8007da6:	00d9      	lsls	r1, r3, #3
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	0013      	movs	r3, r2
 8007db0:	2200      	movs	r2, #0
 8007db2:	f7ff fed5 	bl	8007b60 <SPI_WaitFifoStateUntilTimeout>
 8007db6:	1e03      	subs	r3, r0, #0
 8007db8:	d007      	beq.n	8007dca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e000      	b.n	8007dcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	0018      	movs	r0, r3
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b004      	add	sp, #16
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e04a      	b.n	8007e7c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	223d      	movs	r2, #61	; 0x3d
 8007dea:	5c9b      	ldrb	r3, [r3, r2]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d107      	bne.n	8007e02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	223c      	movs	r2, #60	; 0x3c
 8007df6:	2100      	movs	r1, #0
 8007df8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7fa fe53 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	223d      	movs	r2, #61	; 0x3d
 8007e06:	2102      	movs	r1, #2
 8007e08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3304      	adds	r3, #4
 8007e12:	0019      	movs	r1, r3
 8007e14:	0010      	movs	r0, r2
 8007e16:	f000 fb41 	bl	800849c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2248      	movs	r2, #72	; 0x48
 8007e1e:	2101      	movs	r1, #1
 8007e20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	223e      	movs	r2, #62	; 0x3e
 8007e26:	2101      	movs	r1, #1
 8007e28:	5499      	strb	r1, [r3, r2]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	223f      	movs	r2, #63	; 0x3f
 8007e2e:	2101      	movs	r1, #1
 8007e30:	5499      	strb	r1, [r3, r2]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2240      	movs	r2, #64	; 0x40
 8007e36:	2101      	movs	r1, #1
 8007e38:	5499      	strb	r1, [r3, r2]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2241      	movs	r2, #65	; 0x41
 8007e3e:	2101      	movs	r1, #1
 8007e40:	5499      	strb	r1, [r3, r2]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2242      	movs	r2, #66	; 0x42
 8007e46:	2101      	movs	r1, #1
 8007e48:	5499      	strb	r1, [r3, r2]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2243      	movs	r2, #67	; 0x43
 8007e4e:	2101      	movs	r1, #1
 8007e50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2244      	movs	r2, #68	; 0x44
 8007e56:	2101      	movs	r1, #1
 8007e58:	5499      	strb	r1, [r3, r2]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2245      	movs	r2, #69	; 0x45
 8007e5e:	2101      	movs	r1, #1
 8007e60:	5499      	strb	r1, [r3, r2]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2246      	movs	r2, #70	; 0x46
 8007e66:	2101      	movs	r1, #1
 8007e68:	5499      	strb	r1, [r3, r2]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2247      	movs	r2, #71	; 0x47
 8007e6e:	2101      	movs	r1, #1
 8007e70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	223d      	movs	r2, #61	; 0x3d
 8007e76:	2101      	movs	r1, #1
 8007e78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b002      	add	sp, #8
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e04a      	b.n	8007f2c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	223d      	movs	r2, #61	; 0x3d
 8007e9a:	5c9b      	ldrb	r3, [r3, r2]
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	223c      	movs	r2, #60	; 0x3c
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	0018      	movs	r0, r3
 8007eae:	f000 f841 	bl	8007f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	223d      	movs	r2, #61	; 0x3d
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	0019      	movs	r1, r3
 8007ec4:	0010      	movs	r0, r2
 8007ec6:	f000 fae9 	bl	800849c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2248      	movs	r2, #72	; 0x48
 8007ece:	2101      	movs	r1, #1
 8007ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	223e      	movs	r2, #62	; 0x3e
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	5499      	strb	r1, [r3, r2]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	223f      	movs	r2, #63	; 0x3f
 8007ede:	2101      	movs	r1, #1
 8007ee0:	5499      	strb	r1, [r3, r2]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2240      	movs	r2, #64	; 0x40
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	5499      	strb	r1, [r3, r2]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2241      	movs	r2, #65	; 0x41
 8007eee:	2101      	movs	r1, #1
 8007ef0:	5499      	strb	r1, [r3, r2]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2242      	movs	r2, #66	; 0x42
 8007ef6:	2101      	movs	r1, #1
 8007ef8:	5499      	strb	r1, [r3, r2]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2243      	movs	r2, #67	; 0x43
 8007efe:	2101      	movs	r1, #1
 8007f00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2244      	movs	r2, #68	; 0x44
 8007f06:	2101      	movs	r1, #1
 8007f08:	5499      	strb	r1, [r3, r2]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2245      	movs	r2, #69	; 0x45
 8007f0e:	2101      	movs	r1, #1
 8007f10:	5499      	strb	r1, [r3, r2]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2246      	movs	r2, #70	; 0x46
 8007f16:	2101      	movs	r1, #1
 8007f18:	5499      	strb	r1, [r3, r2]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2247      	movs	r2, #71	; 0x47
 8007f1e:	2101      	movs	r1, #1
 8007f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	223d      	movs	r2, #61	; 0x3d
 8007f26:	2101      	movs	r1, #1
 8007f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b002      	add	sp, #8
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b002      	add	sp, #8
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d108      	bne.n	8007f66 <HAL_TIM_PWM_Start+0x22>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	223e      	movs	r2, #62	; 0x3e
 8007f58:	5c9b      	ldrb	r3, [r3, r2]
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	1e5a      	subs	r2, r3, #1
 8007f60:	4193      	sbcs	r3, r2
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	e037      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x92>
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d108      	bne.n	8007f7e <HAL_TIM_PWM_Start+0x3a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	223f      	movs	r2, #63	; 0x3f
 8007f70:	5c9b      	ldrb	r3, [r3, r2]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	3b01      	subs	r3, #1
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	4193      	sbcs	r3, r2
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	e02b      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x92>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d108      	bne.n	8007f96 <HAL_TIM_PWM_Start+0x52>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2240      	movs	r2, #64	; 0x40
 8007f88:	5c9b      	ldrb	r3, [r3, r2]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	1e5a      	subs	r2, r3, #1
 8007f90:	4193      	sbcs	r3, r2
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	e01f      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x92>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	2b0c      	cmp	r3, #12
 8007f9a:	d108      	bne.n	8007fae <HAL_TIM_PWM_Start+0x6a>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2241      	movs	r2, #65	; 0x41
 8007fa0:	5c9b      	ldrb	r3, [r3, r2]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	1e5a      	subs	r2, r3, #1
 8007fa8:	4193      	sbcs	r3, r2
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	e013      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x92>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b10      	cmp	r3, #16
 8007fb2:	d108      	bne.n	8007fc6 <HAL_TIM_PWM_Start+0x82>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2242      	movs	r2, #66	; 0x42
 8007fb8:	5c9b      	ldrb	r3, [r3, r2]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	1e5a      	subs	r2, r3, #1
 8007fc0:	4193      	sbcs	r3, r2
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	e007      	b.n	8007fd6 <HAL_TIM_PWM_Start+0x92>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2243      	movs	r2, #67	; 0x43
 8007fca:	5c9b      	ldrb	r3, [r3, r2]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	1e5a      	subs	r2, r3, #1
 8007fd2:	4193      	sbcs	r3, r2
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e08b      	b.n	80080f6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <HAL_TIM_PWM_Start+0xaa>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	223e      	movs	r2, #62	; 0x3e
 8007fe8:	2102      	movs	r1, #2
 8007fea:	5499      	strb	r1, [r3, r2]
 8007fec:	e023      	b.n	8008036 <HAL_TIM_PWM_Start+0xf2>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d104      	bne.n	8007ffe <HAL_TIM_PWM_Start+0xba>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	223f      	movs	r2, #63	; 0x3f
 8007ff8:	2102      	movs	r1, #2
 8007ffa:	5499      	strb	r1, [r3, r2]
 8007ffc:	e01b      	b.n	8008036 <HAL_TIM_PWM_Start+0xf2>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d104      	bne.n	800800e <HAL_TIM_PWM_Start+0xca>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	2102      	movs	r1, #2
 800800a:	5499      	strb	r1, [r3, r2]
 800800c:	e013      	b.n	8008036 <HAL_TIM_PWM_Start+0xf2>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b0c      	cmp	r3, #12
 8008012:	d104      	bne.n	800801e <HAL_TIM_PWM_Start+0xda>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2241      	movs	r2, #65	; 0x41
 8008018:	2102      	movs	r1, #2
 800801a:	5499      	strb	r1, [r3, r2]
 800801c:	e00b      	b.n	8008036 <HAL_TIM_PWM_Start+0xf2>
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b10      	cmp	r3, #16
 8008022:	d104      	bne.n	800802e <HAL_TIM_PWM_Start+0xea>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2242      	movs	r2, #66	; 0x42
 8008028:	2102      	movs	r1, #2
 800802a:	5499      	strb	r1, [r3, r2]
 800802c:	e003      	b.n	8008036 <HAL_TIM_PWM_Start+0xf2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2243      	movs	r2, #67	; 0x43
 8008032:	2102      	movs	r1, #2
 8008034:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	0018      	movs	r0, r3
 8008040:	f000 fe0c 	bl	8008c5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a2d      	ldr	r2, [pc, #180]	; (8008100 <HAL_TIM_PWM_Start+0x1bc>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00e      	beq.n	800806c <HAL_TIM_PWM_Start+0x128>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a2c      	ldr	r2, [pc, #176]	; (8008104 <HAL_TIM_PWM_Start+0x1c0>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d009      	beq.n	800806c <HAL_TIM_PWM_Start+0x128>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a2a      	ldr	r2, [pc, #168]	; (8008108 <HAL_TIM_PWM_Start+0x1c4>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d004      	beq.n	800806c <HAL_TIM_PWM_Start+0x128>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a29      	ldr	r2, [pc, #164]	; (800810c <HAL_TIM_PWM_Start+0x1c8>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d101      	bne.n	8008070 <HAL_TIM_PWM_Start+0x12c>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <HAL_TIM_PWM_Start+0x12e>
 8008070:	2300      	movs	r3, #0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2180      	movs	r1, #128	; 0x80
 8008082:	0209      	lsls	r1, r1, #8
 8008084:	430a      	orrs	r2, r1
 8008086:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1c      	ldr	r2, [pc, #112]	; (8008100 <HAL_TIM_PWM_Start+0x1bc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d00f      	beq.n	80080b2 <HAL_TIM_PWM_Start+0x16e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	2380      	movs	r3, #128	; 0x80
 8008098:	05db      	lsls	r3, r3, #23
 800809a:	429a      	cmp	r2, r3
 800809c:	d009      	beq.n	80080b2 <HAL_TIM_PWM_Start+0x16e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a1b      	ldr	r2, [pc, #108]	; (8008110 <HAL_TIM_PWM_Start+0x1cc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d004      	beq.n	80080b2 <HAL_TIM_PWM_Start+0x16e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a15      	ldr	r2, [pc, #84]	; (8008104 <HAL_TIM_PWM_Start+0x1c0>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d116      	bne.n	80080e0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	4a16      	ldr	r2, [pc, #88]	; (8008114 <HAL_TIM_PWM_Start+0x1d0>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b06      	cmp	r3, #6
 80080c2:	d016      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x1ae>
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	2380      	movs	r3, #128	; 0x80
 80080c8:	025b      	lsls	r3, r3, #9
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d011      	beq.n	80080f2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2101      	movs	r1, #1
 80080da:	430a      	orrs	r2, r1
 80080dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080de:	e008      	b.n	80080f2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2101      	movs	r1, #1
 80080ec:	430a      	orrs	r2, r1
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	e000      	b.n	80080f4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080f2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	0018      	movs	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b004      	add	sp, #16
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	40012c00 	.word	0x40012c00
 8008104:	40014000 	.word	0x40014000
 8008108:	40014400 	.word	0x40014400
 800810c:	40014800 	.word	0x40014800
 8008110:	40000400 	.word	0x40000400
 8008114:	00010007 	.word	0x00010007

08008118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	223c      	movs	r2, #60	; 0x3c
 8008128:	5c9b      	ldrb	r3, [r3, r2]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800812e:	2302      	movs	r3, #2
 8008130:	e0df      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	223c      	movs	r2, #60	; 0x3c
 8008136:	2101      	movs	r1, #1
 8008138:	5499      	strb	r1, [r3, r2]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b14      	cmp	r3, #20
 800813e:	d900      	bls.n	8008142 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008140:	e0d1      	b.n	80082e6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	009a      	lsls	r2, r3, #2
 8008146:	4b6d      	ldr	r3, [pc, #436]	; (80082fc <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008148:	18d3      	adds	r3, r2, r3
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0011      	movs	r1, r2
 8008156:	0018      	movs	r0, r3
 8008158:	f000 fa20 	bl	800859c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	699a      	ldr	r2, [r3, #24]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2108      	movs	r1, #8
 8008168:	430a      	orrs	r2, r1
 800816a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2104      	movs	r1, #4
 8008178:	438a      	bics	r2, r1
 800817a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6999      	ldr	r1, [r3, #24]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	619a      	str	r2, [r3, #24]
      break;
 800818e:	e0ab      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	0011      	movs	r1, r2
 8008198:	0018      	movs	r0, r3
 800819a:	f000 fa89 	bl	80086b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2180      	movs	r1, #128	; 0x80
 80081aa:	0109      	lsls	r1, r1, #4
 80081ac:	430a      	orrs	r2, r1
 80081ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	699a      	ldr	r2, [r3, #24]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4951      	ldr	r1, [pc, #324]	; (8008300 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80081bc:	400a      	ands	r2, r1
 80081be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6999      	ldr	r1, [r3, #24]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	021a      	lsls	r2, r3, #8
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	619a      	str	r2, [r3, #24]
      break;
 80081d4:	e088      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68ba      	ldr	r2, [r7, #8]
 80081dc:	0011      	movs	r1, r2
 80081de:	0018      	movs	r0, r3
 80081e0:	f000 faea 	bl	80087b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69da      	ldr	r2, [r3, #28]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2108      	movs	r1, #8
 80081f0:	430a      	orrs	r2, r1
 80081f2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69da      	ldr	r2, [r3, #28]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2104      	movs	r1, #4
 8008200:	438a      	bics	r2, r1
 8008202:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69d9      	ldr	r1, [r3, #28]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	691a      	ldr	r2, [r3, #16]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	61da      	str	r2, [r3, #28]
      break;
 8008216:	e067      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	0011      	movs	r1, r2
 8008220:	0018      	movs	r0, r3
 8008222:	f000 fb51 	bl	80088c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2180      	movs	r1, #128	; 0x80
 8008232:	0109      	lsls	r1, r1, #4
 8008234:	430a      	orrs	r2, r1
 8008236:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69da      	ldr	r2, [r3, #28]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	492f      	ldr	r1, [pc, #188]	; (8008300 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008244:	400a      	ands	r2, r1
 8008246:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	69d9      	ldr	r1, [r3, #28]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	021a      	lsls	r2, r3, #8
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	61da      	str	r2, [r3, #28]
      break;
 800825c:	e044      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	0011      	movs	r1, r2
 8008266:	0018      	movs	r0, r3
 8008268:	f000 fb98 	bl	800899c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2108      	movs	r1, #8
 8008278:	430a      	orrs	r2, r1
 800827a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2104      	movs	r1, #4
 8008288:	438a      	bics	r2, r1
 800828a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800829e:	e023      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	0011      	movs	r1, r2
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 fbd7 	bl	8008a5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	0109      	lsls	r1, r1, #4
 80082bc:	430a      	orrs	r2, r1
 80082be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	490d      	ldr	r1, [pc, #52]	; (8008300 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082cc:	400a      	ands	r2, r1
 80082ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	021a      	lsls	r2, r3, #8
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082e4:	e000      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80082e6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	223c      	movs	r2, #60	; 0x3c
 80082ec:	2100      	movs	r1, #0
 80082ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	0018      	movs	r0, r3
 80082f4:	46bd      	mov	sp, r7
 80082f6:	b004      	add	sp, #16
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	0800a770 	.word	0x0800a770
 8008300:	fffffbff 	.word	0xfffffbff

08008304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	223c      	movs	r2, #60	; 0x3c
 8008312:	5c9b      	ldrb	r3, [r3, r2]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d101      	bne.n	800831c <HAL_TIM_ConfigClockSource+0x18>
 8008318:	2302      	movs	r3, #2
 800831a:	e0b7      	b.n	800848c <HAL_TIM_ConfigClockSource+0x188>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	223c      	movs	r2, #60	; 0x3c
 8008320:	2101      	movs	r1, #1
 8008322:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	223d      	movs	r2, #61	; 0x3d
 8008328:	2102      	movs	r1, #2
 800832a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4a57      	ldr	r2, [pc, #348]	; (8008494 <HAL_TIM_ConfigClockSource+0x190>)
 8008338:	4013      	ands	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4a56      	ldr	r2, [pc, #344]	; (8008498 <HAL_TIM_ConfigClockSource+0x194>)
 8008340:	4013      	ands	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2280      	movs	r2, #128	; 0x80
 8008352:	0192      	lsls	r2, r2, #6
 8008354:	4293      	cmp	r3, r2
 8008356:	d040      	beq.n	80083da <HAL_TIM_ConfigClockSource+0xd6>
 8008358:	2280      	movs	r2, #128	; 0x80
 800835a:	0192      	lsls	r2, r2, #6
 800835c:	4293      	cmp	r3, r2
 800835e:	d900      	bls.n	8008362 <HAL_TIM_ConfigClockSource+0x5e>
 8008360:	e088      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	0152      	lsls	r2, r2, #5
 8008366:	4293      	cmp	r3, r2
 8008368:	d100      	bne.n	800836c <HAL_TIM_ConfigClockSource+0x68>
 800836a:	e085      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
 800836c:	2280      	movs	r2, #128	; 0x80
 800836e:	0152      	lsls	r2, r2, #5
 8008370:	4293      	cmp	r3, r2
 8008372:	d900      	bls.n	8008376 <HAL_TIM_ConfigClockSource+0x72>
 8008374:	e07e      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 8008376:	2b70      	cmp	r3, #112	; 0x70
 8008378:	d018      	beq.n	80083ac <HAL_TIM_ConfigClockSource+0xa8>
 800837a:	d900      	bls.n	800837e <HAL_TIM_ConfigClockSource+0x7a>
 800837c:	e07a      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 800837e:	2b60      	cmp	r3, #96	; 0x60
 8008380:	d04f      	beq.n	8008422 <HAL_TIM_ConfigClockSource+0x11e>
 8008382:	d900      	bls.n	8008386 <HAL_TIM_ConfigClockSource+0x82>
 8008384:	e076      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 8008386:	2b50      	cmp	r3, #80	; 0x50
 8008388:	d03b      	beq.n	8008402 <HAL_TIM_ConfigClockSource+0xfe>
 800838a:	d900      	bls.n	800838e <HAL_TIM_ConfigClockSource+0x8a>
 800838c:	e072      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 800838e:	2b40      	cmp	r3, #64	; 0x40
 8008390:	d057      	beq.n	8008442 <HAL_TIM_ConfigClockSource+0x13e>
 8008392:	d900      	bls.n	8008396 <HAL_TIM_ConfigClockSource+0x92>
 8008394:	e06e      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 8008396:	2b30      	cmp	r3, #48	; 0x30
 8008398:	d063      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15e>
 800839a:	d86b      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 800839c:	2b20      	cmp	r3, #32
 800839e:	d060      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15e>
 80083a0:	d868      	bhi.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d05d      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15e>
 80083a6:	2b10      	cmp	r3, #16
 80083a8:	d05b      	beq.n	8008462 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083aa:	e063      	b.n	8008474 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	6899      	ldr	r1, [r3, #8]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	f000 fc2e 	bl	8008c1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2277      	movs	r2, #119	; 0x77
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]
      break;
 80083d8:	e04f      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6899      	ldr	r1, [r3, #8]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f000 fc17 	bl	8008c1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	01c9      	lsls	r1, r1, #7
 80083fc:	430a      	orrs	r2, r1
 80083fe:	609a      	str	r2, [r3, #8]
      break;
 8008400:	e03b      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	6859      	ldr	r1, [r3, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	001a      	movs	r2, r3
 8008410:	f000 fb88 	bl	8008b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2150      	movs	r1, #80	; 0x50
 800841a:	0018      	movs	r0, r3
 800841c:	f000 fbe2 	bl	8008be4 <TIM_ITRx_SetConfig>
      break;
 8008420:	e02b      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6859      	ldr	r1, [r3, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	001a      	movs	r2, r3
 8008430:	f000 fba6 	bl	8008b80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2160      	movs	r1, #96	; 0x60
 800843a:	0018      	movs	r0, r3
 800843c:	f000 fbd2 	bl	8008be4 <TIM_ITRx_SetConfig>
      break;
 8008440:	e01b      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6859      	ldr	r1, [r3, #4]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	001a      	movs	r2, r3
 8008450:	f000 fb68 	bl	8008b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2140      	movs	r1, #64	; 0x40
 800845a:	0018      	movs	r0, r3
 800845c:	f000 fbc2 	bl	8008be4 <TIM_ITRx_SetConfig>
      break;
 8008460:	e00b      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	0019      	movs	r1, r3
 800846c:	0010      	movs	r0, r2
 800846e:	f000 fbb9 	bl	8008be4 <TIM_ITRx_SetConfig>
        break;
 8008472:	e002      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008474:	46c0      	nop			; (mov r8, r8)
 8008476:	e000      	b.n	800847a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008478:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	223d      	movs	r2, #61	; 0x3d
 800847e:	2101      	movs	r1, #1
 8008480:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	223c      	movs	r2, #60	; 0x3c
 8008486:	2100      	movs	r1, #0
 8008488:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	0018      	movs	r0, r3
 800848e:	46bd      	mov	sp, r7
 8008490:	b004      	add	sp, #16
 8008492:	bd80      	pop	{r7, pc}
 8008494:	ffceff88 	.word	0xffceff88
 8008498:	ffff00ff 	.word	0xffff00ff

0800849c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a34      	ldr	r2, [pc, #208]	; (8008580 <TIM_Base_SetConfig+0xe4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d008      	beq.n	80084c6 <TIM_Base_SetConfig+0x2a>
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	2380      	movs	r3, #128	; 0x80
 80084b8:	05db      	lsls	r3, r3, #23
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d003      	beq.n	80084c6 <TIM_Base_SetConfig+0x2a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a30      	ldr	r2, [pc, #192]	; (8008584 <TIM_Base_SetConfig+0xe8>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d108      	bne.n	80084d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2270      	movs	r2, #112	; 0x70
 80084ca:	4393      	bics	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a29      	ldr	r2, [pc, #164]	; (8008580 <TIM_Base_SetConfig+0xe4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d018      	beq.n	8008512 <TIM_Base_SetConfig+0x76>
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	2380      	movs	r3, #128	; 0x80
 80084e4:	05db      	lsls	r3, r3, #23
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d013      	beq.n	8008512 <TIM_Base_SetConfig+0x76>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a25      	ldr	r2, [pc, #148]	; (8008584 <TIM_Base_SetConfig+0xe8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d00f      	beq.n	8008512 <TIM_Base_SetConfig+0x76>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a24      	ldr	r2, [pc, #144]	; (8008588 <TIM_Base_SetConfig+0xec>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d00b      	beq.n	8008512 <TIM_Base_SetConfig+0x76>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4a23      	ldr	r2, [pc, #140]	; (800858c <TIM_Base_SetConfig+0xf0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d007      	beq.n	8008512 <TIM_Base_SetConfig+0x76>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	4a22      	ldr	r2, [pc, #136]	; (8008590 <TIM_Base_SetConfig+0xf4>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d003      	beq.n	8008512 <TIM_Base_SetConfig+0x76>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a21      	ldr	r2, [pc, #132]	; (8008594 <TIM_Base_SetConfig+0xf8>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d108      	bne.n	8008524 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a20      	ldr	r2, [pc, #128]	; (8008598 <TIM_Base_SetConfig+0xfc>)
 8008516:	4013      	ands	r3, r2
 8008518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4313      	orrs	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2280      	movs	r2, #128	; 0x80
 8008528:	4393      	bics	r3, r2
 800852a:	001a      	movs	r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a0c      	ldr	r2, [pc, #48]	; (8008580 <TIM_Base_SetConfig+0xe4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_Base_SetConfig+0xce>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a0d      	ldr	r2, [pc, #52]	; (800858c <TIM_Base_SetConfig+0xf0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_Base_SetConfig+0xce>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a0c      	ldr	r2, [pc, #48]	; (8008590 <TIM_Base_SetConfig+0xf4>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_Base_SetConfig+0xce>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a0b      	ldr	r2, [pc, #44]	; (8008594 <TIM_Base_SetConfig+0xf8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d103      	bne.n	8008572 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	615a      	str	r2, [r3, #20]
}
 8008578:	46c0      	nop			; (mov r8, r8)
 800857a:	46bd      	mov	sp, r7
 800857c:	b004      	add	sp, #16
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40012c00 	.word	0x40012c00
 8008584:	40000400 	.word	0x40000400
 8008588:	40002000 	.word	0x40002000
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800
 8008598:	fffffcff 	.word	0xfffffcff

0800859c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	2201      	movs	r2, #1
 80085ac:	4393      	bics	r3, r2
 80085ae:	001a      	movs	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	699b      	ldr	r3, [r3, #24]
 80085c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4a32      	ldr	r2, [pc, #200]	; (8008694 <TIM_OC1_SetConfig+0xf8>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2203      	movs	r2, #3
 80085d2:	4393      	bics	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2202      	movs	r2, #2
 80085e4:	4393      	bics	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a28      	ldr	r2, [pc, #160]	; (8008698 <TIM_OC1_SetConfig+0xfc>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00b      	beq.n	8008612 <TIM_OC1_SetConfig+0x76>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a27      	ldr	r2, [pc, #156]	; (800869c <TIM_OC1_SetConfig+0x100>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d007      	beq.n	8008612 <TIM_OC1_SetConfig+0x76>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <TIM_OC1_SetConfig+0x104>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d003      	beq.n	8008612 <TIM_OC1_SetConfig+0x76>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a25      	ldr	r2, [pc, #148]	; (80086a4 <TIM_OC1_SetConfig+0x108>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d10c      	bne.n	800862c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2208      	movs	r2, #8
 8008616:	4393      	bics	r3, r2
 8008618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2204      	movs	r2, #4
 8008628:	4393      	bics	r3, r2
 800862a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a1a      	ldr	r2, [pc, #104]	; (8008698 <TIM_OC1_SetConfig+0xfc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00b      	beq.n	800864c <TIM_OC1_SetConfig+0xb0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a19      	ldr	r2, [pc, #100]	; (800869c <TIM_OC1_SetConfig+0x100>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d007      	beq.n	800864c <TIM_OC1_SetConfig+0xb0>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a18      	ldr	r2, [pc, #96]	; (80086a0 <TIM_OC1_SetConfig+0x104>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d003      	beq.n	800864c <TIM_OC1_SetConfig+0xb0>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <TIM_OC1_SetConfig+0x108>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d111      	bne.n	8008670 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <TIM_OC1_SetConfig+0x10c>)
 8008650:	4013      	ands	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	4a15      	ldr	r2, [pc, #84]	; (80086ac <TIM_OC1_SetConfig+0x110>)
 8008658:	4013      	ands	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	4313      	orrs	r3, r2
 800866e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	621a      	str	r2, [r3, #32]
}
 800868a:	46c0      	nop			; (mov r8, r8)
 800868c:	46bd      	mov	sp, r7
 800868e:	b006      	add	sp, #24
 8008690:	bd80      	pop	{r7, pc}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	fffeff8f 	.word	0xfffeff8f
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400
 80086a4:	40014800 	.word	0x40014800
 80086a8:	fffffeff 	.word	0xfffffeff
 80086ac:	fffffdff 	.word	0xfffffdff

080086b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	2210      	movs	r2, #16
 80086c0:	4393      	bics	r3, r2
 80086c2:	001a      	movs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4a2e      	ldr	r2, [pc, #184]	; (8008798 <TIM_OC2_SetConfig+0xe8>)
 80086de:	4013      	ands	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4a2d      	ldr	r2, [pc, #180]	; (800879c <TIM_OC2_SetConfig+0xec>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2220      	movs	r2, #32
 80086fa:	4393      	bics	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a24      	ldr	r2, [pc, #144]	; (80087a0 <TIM_OC2_SetConfig+0xf0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d10d      	bne.n	800872e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2280      	movs	r2, #128	; 0x80
 8008716:	4393      	bics	r3, r2
 8008718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	011b      	lsls	r3, r3, #4
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2240      	movs	r2, #64	; 0x40
 800872a:	4393      	bics	r3, r2
 800872c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1b      	ldr	r2, [pc, #108]	; (80087a0 <TIM_OC2_SetConfig+0xf0>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00b      	beq.n	800874e <TIM_OC2_SetConfig+0x9e>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a1a      	ldr	r2, [pc, #104]	; (80087a4 <TIM_OC2_SetConfig+0xf4>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d007      	beq.n	800874e <TIM_OC2_SetConfig+0x9e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <TIM_OC2_SetConfig+0xf8>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d003      	beq.n	800874e <TIM_OC2_SetConfig+0x9e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a18      	ldr	r2, [pc, #96]	; (80087ac <TIM_OC2_SetConfig+0xfc>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d113      	bne.n	8008776 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	4a17      	ldr	r2, [pc, #92]	; (80087b0 <TIM_OC2_SetConfig+0x100>)
 8008752:	4013      	ands	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	4a16      	ldr	r2, [pc, #88]	; (80087b4 <TIM_OC2_SetConfig+0x104>)
 800875a:	4013      	ands	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	46c0      	nop			; (mov r8, r8)
 8008792:	46bd      	mov	sp, r7
 8008794:	b006      	add	sp, #24
 8008796:	bd80      	pop	{r7, pc}
 8008798:	feff8fff 	.word	0xfeff8fff
 800879c:	fffffcff 	.word	0xfffffcff
 80087a0:	40012c00 	.word	0x40012c00
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800
 80087b0:	fffffbff 	.word	0xfffffbff
 80087b4:	fffff7ff 	.word	0xfffff7ff

080087b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4a35      	ldr	r2, [pc, #212]	; (800889c <TIM_OC3_SetConfig+0xe4>)
 80087c8:	401a      	ands	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4a2f      	ldr	r2, [pc, #188]	; (80088a0 <TIM_OC3_SetConfig+0xe8>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2203      	movs	r2, #3
 80087ec:	4393      	bics	r3, r2
 80087ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	4a29      	ldr	r2, [pc, #164]	; (80088a4 <TIM_OC3_SetConfig+0xec>)
 80087fe:	4013      	ands	r3, r2
 8008800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a25      	ldr	r2, [pc, #148]	; (80088a8 <TIM_OC3_SetConfig+0xf0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d10d      	bne.n	8008832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	4a24      	ldr	r2, [pc, #144]	; (80088ac <TIM_OC3_SetConfig+0xf4>)
 800881a:	4013      	ands	r3, r2
 800881c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	4a20      	ldr	r2, [pc, #128]	; (80088b0 <TIM_OC3_SetConfig+0xf8>)
 800882e:	4013      	ands	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1c      	ldr	r2, [pc, #112]	; (80088a8 <TIM_OC3_SetConfig+0xf0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00b      	beq.n	8008852 <TIM_OC3_SetConfig+0x9a>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <TIM_OC3_SetConfig+0xfc>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d007      	beq.n	8008852 <TIM_OC3_SetConfig+0x9a>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1c      	ldr	r2, [pc, #112]	; (80088b8 <TIM_OC3_SetConfig+0x100>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d003      	beq.n	8008852 <TIM_OC3_SetConfig+0x9a>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1b      	ldr	r2, [pc, #108]	; (80088bc <TIM_OC3_SetConfig+0x104>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d113      	bne.n	800887a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4a1a      	ldr	r2, [pc, #104]	; (80088c0 <TIM_OC3_SetConfig+0x108>)
 8008856:	4013      	ands	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4a19      	ldr	r2, [pc, #100]	; (80088c4 <TIM_OC3_SetConfig+0x10c>)
 800885e:	4013      	ands	r3, r2
 8008860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	011b      	lsls	r3, r3, #4
 8008868:	693a      	ldr	r2, [r7, #16]
 800886a:	4313      	orrs	r3, r2
 800886c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	621a      	str	r2, [r3, #32]
}
 8008894:	46c0      	nop			; (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b006      	add	sp, #24
 800889a:	bd80      	pop	{r7, pc}
 800889c:	fffffeff 	.word	0xfffffeff
 80088a0:	fffeff8f 	.word	0xfffeff8f
 80088a4:	fffffdff 	.word	0xfffffdff
 80088a8:	40012c00 	.word	0x40012c00
 80088ac:	fffff7ff 	.word	0xfffff7ff
 80088b0:	fffffbff 	.word	0xfffffbff
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400
 80088bc:	40014800 	.word	0x40014800
 80088c0:	ffffefff 	.word	0xffffefff
 80088c4:	ffffdfff 	.word	0xffffdfff

080088c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	4a28      	ldr	r2, [pc, #160]	; (8008978 <TIM_OC4_SetConfig+0xb0>)
 80088d8:	401a      	ands	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4a22      	ldr	r2, [pc, #136]	; (800897c <TIM_OC4_SetConfig+0xb4>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a21      	ldr	r2, [pc, #132]	; (8008980 <TIM_OC4_SetConfig+0xb8>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	021b      	lsls	r3, r3, #8
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	4313      	orrs	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	4a1d      	ldr	r2, [pc, #116]	; (8008984 <TIM_OC4_SetConfig+0xbc>)
 8008910:	4013      	ands	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	031b      	lsls	r3, r3, #12
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a19      	ldr	r2, [pc, #100]	; (8008988 <TIM_OC4_SetConfig+0xc0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d00b      	beq.n	8008940 <TIM_OC4_SetConfig+0x78>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a18      	ldr	r2, [pc, #96]	; (800898c <TIM_OC4_SetConfig+0xc4>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d007      	beq.n	8008940 <TIM_OC4_SetConfig+0x78>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a17      	ldr	r2, [pc, #92]	; (8008990 <TIM_OC4_SetConfig+0xc8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_OC4_SetConfig+0x78>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a16      	ldr	r2, [pc, #88]	; (8008994 <TIM_OC4_SetConfig+0xcc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d109      	bne.n	8008954 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	4a15      	ldr	r2, [pc, #84]	; (8008998 <TIM_OC4_SetConfig+0xd0>)
 8008944:	4013      	ands	r3, r2
 8008946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	019b      	lsls	r3, r3, #6
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	46bd      	mov	sp, r7
 8008972:	b006      	add	sp, #24
 8008974:	bd80      	pop	{r7, pc}
 8008976:	46c0      	nop			; (mov r8, r8)
 8008978:	ffffefff 	.word	0xffffefff
 800897c:	feff8fff 	.word	0xfeff8fff
 8008980:	fffffcff 	.word	0xfffffcff
 8008984:	ffffdfff 	.word	0xffffdfff
 8008988:	40012c00 	.word	0x40012c00
 800898c:	40014000 	.word	0x40014000
 8008990:	40014400 	.word	0x40014400
 8008994:	40014800 	.word	0x40014800
 8008998:	ffffbfff 	.word	0xffffbfff

0800899c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	4a25      	ldr	r2, [pc, #148]	; (8008a40 <TIM_OC5_SetConfig+0xa4>)
 80089ac:	401a      	ands	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a1f      	ldr	r2, [pc, #124]	; (8008a44 <TIM_OC5_SetConfig+0xa8>)
 80089c8:	4013      	ands	r3, r2
 80089ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	4a1b      	ldr	r2, [pc, #108]	; (8008a48 <TIM_OC5_SetConfig+0xac>)
 80089da:	4013      	ands	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	041b      	lsls	r3, r3, #16
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a17      	ldr	r2, [pc, #92]	; (8008a4c <TIM_OC5_SetConfig+0xb0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d00b      	beq.n	8008a0a <TIM_OC5_SetConfig+0x6e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a16      	ldr	r2, [pc, #88]	; (8008a50 <TIM_OC5_SetConfig+0xb4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d007      	beq.n	8008a0a <TIM_OC5_SetConfig+0x6e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a15      	ldr	r2, [pc, #84]	; (8008a54 <TIM_OC5_SetConfig+0xb8>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d003      	beq.n	8008a0a <TIM_OC5_SetConfig+0x6e>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <TIM_OC5_SetConfig+0xbc>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d109      	bne.n	8008a1e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4a0c      	ldr	r2, [pc, #48]	; (8008a40 <TIM_OC5_SetConfig+0xa4>)
 8008a0e:	4013      	ands	r3, r2
 8008a10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	621a      	str	r2, [r3, #32]
}
 8008a38:	46c0      	nop			; (mov r8, r8)
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b006      	add	sp, #24
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	fffeffff 	.word	0xfffeffff
 8008a44:	fffeff8f 	.word	0xfffeff8f
 8008a48:	fffdffff 	.word	0xfffdffff
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40014000 	.word	0x40014000
 8008a54:	40014400 	.word	0x40014400
 8008a58:	40014800 	.word	0x40014800

08008a5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <TIM_OC6_SetConfig+0xa8>)
 8008a6c:	401a      	ands	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4a20      	ldr	r2, [pc, #128]	; (8008b08 <TIM_OC6_SetConfig+0xac>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	021b      	lsls	r3, r3, #8
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	4a1c      	ldr	r2, [pc, #112]	; (8008b0c <TIM_OC6_SetConfig+0xb0>)
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	051b      	lsls	r3, r3, #20
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <TIM_OC6_SetConfig+0xb4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00b      	beq.n	8008acc <TIM_OC6_SetConfig+0x70>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC6_SetConfig+0xb8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC6_SetConfig+0x70>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <TIM_OC6_SetConfig+0xbc>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC6_SetConfig+0x70>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <TIM_OC6_SetConfig+0xc0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d109      	bne.n	8008ae0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	4a14      	ldr	r2, [pc, #80]	; (8008b20 <TIM_OC6_SetConfig+0xc4>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	029b      	lsls	r3, r3, #10
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	46bd      	mov	sp, r7
 8008afe:	b006      	add	sp, #24
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	ffefffff 	.word	0xffefffff
 8008b08:	feff8fff 	.word	0xfeff8fff
 8008b0c:	ffdfffff 	.word	0xffdfffff
 8008b10:	40012c00 	.word	0x40012c00
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800
 8008b20:	fffbffff 	.word	0xfffbffff

08008b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4393      	bics	r3, r2
 8008b3e:	001a      	movs	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	22f0      	movs	r2, #240	; 0xf0
 8008b4e:	4393      	bics	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	220a      	movs	r2, #10
 8008b60:	4393      	bics	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	697a      	ldr	r2, [r7, #20]
 8008b76:	621a      	str	r2, [r3, #32]
}
 8008b78:	46c0      	nop			; (mov r8, r8)
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	b006      	add	sp, #24
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	2210      	movs	r2, #16
 8008b92:	4393      	bics	r3, r2
 8008b94:	001a      	movs	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4a0d      	ldr	r2, [pc, #52]	; (8008be0 <TIM_TI2_ConfigInputStage+0x60>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	031b      	lsls	r3, r3, #12
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	22a0      	movs	r2, #160	; 0xa0
 8008bbc:	4393      	bics	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	011b      	lsls	r3, r3, #4
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	621a      	str	r2, [r3, #32]
}
 8008bd6:	46c0      	nop			; (mov r8, r8)
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	b006      	add	sp, #24
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	46c0      	nop			; (mov r8, r8)
 8008be0:	ffff0fff 	.word	0xffff0fff

08008be4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a08      	ldr	r2, [pc, #32]	; (8008c18 <TIM_ITRx_SetConfig+0x34>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bfc:	683a      	ldr	r2, [r7, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	2207      	movs	r2, #7
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	609a      	str	r2, [r3, #8]
}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	46bd      	mov	sp, r7
 8008c12:	b004      	add	sp, #16
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	ffcfff8f 	.word	0xffcfff8f

08008c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	4a09      	ldr	r2, [pc, #36]	; (8008c58 <TIM_ETR_SetConfig+0x3c>)
 8008c34:	4013      	ands	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	021a      	lsls	r2, r3, #8
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	431a      	orrs	r2, r3
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	697a      	ldr	r2, [r7, #20]
 8008c4e:	609a      	str	r2, [r3, #8]
}
 8008c50:	46c0      	nop			; (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b006      	add	sp, #24
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	ffff00ff 	.word	0xffff00ff

08008c5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	221f      	movs	r2, #31
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2201      	movs	r2, #1
 8008c70:	409a      	lsls	r2, r3
 8008c72:	0013      	movs	r3, r2
 8008c74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	43d2      	mvns	r2, r2
 8008c7e:	401a      	ands	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6a1a      	ldr	r2, [r3, #32]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	211f      	movs	r1, #31
 8008c8c:	400b      	ands	r3, r1
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	4099      	lsls	r1, r3
 8008c92:	000b      	movs	r3, r1
 8008c94:	431a      	orrs	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	46c0      	nop			; (mov r8, r8)
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	b006      	add	sp, #24
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	223c      	movs	r2, #60	; 0x3c
 8008cb2:	5c9b      	ldrb	r3, [r3, r2]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e055      	b.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	223c      	movs	r2, #60	; 0x3c
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	223d      	movs	r2, #61	; 0x3d
 8008cc8:	2102      	movs	r1, #2
 8008cca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d108      	bne.n	8008cf8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	4a22      	ldr	r2, [pc, #136]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2270      	movs	r2, #112	; 0x70
 8008cfc:	4393      	bics	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00f      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	2380      	movs	r3, #128	; 0x80
 8008d22:	05db      	lsls	r3, r3, #23
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d009      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d10c      	bne.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	4393      	bics	r3, r2
 8008d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	223d      	movs	r2, #61	; 0x3d
 8008d5a:	2101      	movs	r1, #1
 8008d5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	223c      	movs	r2, #60	; 0x3c
 8008d62:	2100      	movs	r1, #0
 8008d64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	0018      	movs	r0, r3
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	b004      	add	sp, #16
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40012c00 	.word	0x40012c00
 8008d74:	ff0fffff 	.word	0xff0fffff
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40014000 	.word	0x40014000

08008d80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	223c      	movs	r2, #60	; 0x3c
 8008d92:	5c9b      	ldrb	r3, [r3, r2]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e079      	b.n	8008e90 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	223c      	movs	r2, #60	; 0x3c
 8008da0:	2101      	movs	r1, #1
 8008da2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	22ff      	movs	r2, #255	; 0xff
 8008da8:	4393      	bics	r3, r2
 8008daa:	001a      	movs	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	4a38      	ldr	r2, [pc, #224]	; (8008e98 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008db8:	401a      	ands	r2, r3
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4a35      	ldr	r2, [pc, #212]	; (8008e9c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008dc6:	401a      	ands	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4a33      	ldr	r2, [pc, #204]	; (8008ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008dd4:	401a      	ands	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4a30      	ldr	r2, [pc, #192]	; (8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008de2:	401a      	ands	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a2e      	ldr	r2, [pc, #184]	; (8008ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008df0:	401a      	ands	r2, r3
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a2b      	ldr	r2, [pc, #172]	; (8008eac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008dfe:	401a      	ands	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e04:	4313      	orrs	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4a29      	ldr	r2, [pc, #164]	; (8008eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008e0c:	401a      	ands	r2, r3
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	041b      	lsls	r3, r3, #16
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a25      	ldr	r2, [pc, #148]	; (8008eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d106      	bne.n	8008e30 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	4a24      	ldr	r2, [pc, #144]	; (8008eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e26:	401a      	ands	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a1f      	ldr	r2, [pc, #124]	; (8008eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d121      	bne.n	8008e7e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	4a1f      	ldr	r2, [pc, #124]	; (8008ebc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008e3e:	401a      	ands	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e44:	051b      	lsls	r3, r3, #20
 8008e46:	4313      	orrs	r3, r2
 8008e48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4a1c      	ldr	r2, [pc, #112]	; (8008ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008e4e:	401a      	ands	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a1a      	ldr	r2, [pc, #104]	; (8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008e5c:	401a      	ands	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	4313      	orrs	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d106      	bne.n	8008e7e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a15      	ldr	r2, [pc, #84]	; (8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008e74:	401a      	ands	r2, r3
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	223c      	movs	r2, #60	; 0x3c
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b004      	add	sp, #16
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	fffffcff 	.word	0xfffffcff
 8008e9c:	fffffbff 	.word	0xfffffbff
 8008ea0:	fffff7ff 	.word	0xfffff7ff
 8008ea4:	ffffefff 	.word	0xffffefff
 8008ea8:	ffffdfff 	.word	0xffffdfff
 8008eac:	ffffbfff 	.word	0xffffbfff
 8008eb0:	fff0ffff 	.word	0xfff0ffff
 8008eb4:	40012c00 	.word	0x40012c00
 8008eb8:	efffffff 	.word	0xefffffff
 8008ebc:	ff0fffff 	.word	0xff0fffff
 8008ec0:	feffffff 	.word	0xfeffffff
 8008ec4:	fdffffff 	.word	0xfdffffff
 8008ec8:	dfffffff 	.word	0xdfffffff

08008ecc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	223c      	movs	r2, #60	; 0x3c
 8008edc:	5c9b      	ldrb	r3, [r3, r2]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e08e      	b.n	8009004 <HAL_TIMEx_ConfigBreakInput+0x138>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	223c      	movs	r2, #60	; 0x3c
 8008eea:	2101      	movs	r1, #1
 8008eec:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d019      	beq.n	8008f2a <HAL_TIMEx_ConfigBreakInput+0x5e>
 8008ef6:	d822      	bhi.n	8008f3e <HAL_TIMEx_ConfigBreakInput+0x72>
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d002      	beq.n	8008f02 <HAL_TIMEx_ConfigBreakInput+0x36>
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d00a      	beq.n	8008f16 <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008f00:	e01d      	b.n	8008f3e <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008f02:	2301      	movs	r3, #1
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8008f0a:	2380      	movs	r3, #128	; 0x80
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008f10:	2309      	movs	r3, #9
 8008f12:	61bb      	str	r3, [r7, #24]
      break;
 8008f14:	e01c      	b.n	8008f50 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8008f16:	2302      	movs	r3, #2
 8008f18:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008f1e:	2380      	movs	r3, #128	; 0x80
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008f24:	230a      	movs	r3, #10
 8008f26:	61bb      	str	r3, [r7, #24]
      break;
 8008f28:	e012      	b.n	8008f50 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8008f2a:	2304      	movs	r3, #4
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008f32:	2380      	movs	r3, #128	; 0x80
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8008f38:	230b      	movs	r3, #11
 8008f3a:	61bb      	str	r3, [r7, #24]
      break;
 8008f3c:	e008      	b.n	8008f50 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8008f46:	2300      	movs	r3, #0
 8008f48:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61bb      	str	r3, [r7, #24]
      break;
 8008f4e:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d003      	beq.n	8008f5e <HAL_TIMEx_ConfigBreakInput+0x92>
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d027      	beq.n	8008fac <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008f5c:	e04d      	b.n	8008ffa <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f64:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	43da      	mvns	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	409a      	lsls	r2, r3
 8008f78:	0013      	movs	r3, r2
 8008f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	43da      	mvns	r2, r3
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	409a      	lsls	r2, r3
 8008f96:	0013      	movs	r3, r2
 8008f98:	6a3a      	ldr	r2, [r7, #32]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8008faa:	e026      	b.n	8008ffa <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb2:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	43da      	mvns	r2, r3
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	409a      	lsls	r2, r3
 8008fc6:	0013      	movs	r3, r2
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	4013      	ands	r3, r2
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008fd2:	6a3b      	ldr	r3, [r7, #32]
 8008fd4:	43da      	mvns	r2, r3
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	409a      	lsls	r2, r3
 8008fe4:	0013      	movs	r3, r2
 8008fe6:	6a3a      	ldr	r2, [r7, #32]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8008ff8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	223c      	movs	r2, #60	; 0x3c
 8008ffe:	2100      	movs	r1, #0
 8009000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	0018      	movs	r0, r3
 8009006:	46bd      	mov	sp, r7
 8009008:	b00a      	add	sp, #40	; 0x28
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e03f      	b.n	800909e <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2259      	movs	r2, #89	; 0x59
 8009022:	5c9b      	ldrb	r3, [r3, r2]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d107      	bne.n	800903a <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2258      	movs	r2, #88	; 0x58
 800902e:	2100      	movs	r1, #0
 8009030:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	0018      	movs	r0, r3
 8009036:	f7f9 fd95 	bl	8002b64 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2259      	movs	r2, #89	; 0x59
 800903e:	2102      	movs	r1, #2
 8009040:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2101      	movs	r1, #1
 800904e:	438a      	bics	r2, r1
 8009050:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	0018      	movs	r0, r3
 8009056:	f000 fbdb 	bl	8009810 <USART_SetConfig>
 800905a:	0003      	movs	r3, r0
 800905c:	2b01      	cmp	r3, #1
 800905e:	d101      	bne.n	8009064 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e01c      	b.n	800909e <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	490e      	ldr	r1, [pc, #56]	; (80090a8 <HAL_USART_Init+0x9c>)
 8009070:	400a      	ands	r2, r1
 8009072:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	212a      	movs	r1, #42	; 0x2a
 8009080:	438a      	bics	r2, r1
 8009082:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2101      	movs	r1, #1
 8009090:	430a      	orrs	r2, r1
 8009092:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	0018      	movs	r0, r3
 8009098:	f000 fe56 	bl	8009d48 <USART_CheckIdleState>
 800909c:	0003      	movs	r3, r0
}
 800909e:	0018      	movs	r0, r3
 80090a0:	46bd      	mov	sp, r7
 80090a2:	b002      	add	sp, #8
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	46c0      	nop			; (mov r8, r8)
 80090a8:	ffffbfff 	.word	0xffffbfff

080090ac <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08a      	sub	sp, #40	; 0x28
 80090b0:	af02      	add	r7, sp, #8
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	1dbb      	adds	r3, r7, #6
 80090ba:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2259      	movs	r2, #89	; 0x59
 80090c0:	5c9b      	ldrb	r3, [r3, r2]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d000      	beq.n	80090ca <HAL_USART_Transmit+0x1e>
 80090c8:	e0a9      	b.n	800921e <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_USART_Transmit+0x2c>
 80090d0:	1dbb      	adds	r3, r7, #6
 80090d2:	881b      	ldrh	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e0a1      	b.n	8009220 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	2380      	movs	r3, #128	; 0x80
 80090e2:	015b      	lsls	r3, r3, #5
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d109      	bne.n	80090fc <HAL_USART_Transmit+0x50>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d105      	bne.n	80090fc <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2201      	movs	r2, #1
 80090f4:	4013      	ands	r3, r2
 80090f6:	d001      	beq.n	80090fc <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e091      	b.n	8009220 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2258      	movs	r2, #88	; 0x58
 8009100:	5c9b      	ldrb	r3, [r3, r2]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <HAL_USART_Transmit+0x5e>
 8009106:	2302      	movs	r3, #2
 8009108:	e08a      	b.n	8009220 <HAL_USART_Transmit+0x174>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2258      	movs	r2, #88	; 0x58
 800910e:	2101      	movs	r1, #1
 8009110:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2259      	movs	r2, #89	; 0x59
 800911c:	2112      	movs	r1, #18
 800911e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009120:	f7f9 ff9a 	bl	8003058 <HAL_GetTick>
 8009124:	0003      	movs	r3, r0
 8009126:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	1dba      	adds	r2, r7, #6
 800912c:	8812      	ldrh	r2, [r2, #0]
 800912e:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	1dba      	adds	r2, r7, #6
 8009134:	8812      	ldrh	r2, [r2, #0]
 8009136:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	2380      	movs	r3, #128	; 0x80
 800913e:	015b      	lsls	r3, r3, #5
 8009140:	429a      	cmp	r2, r3
 8009142:	d108      	bne.n	8009156 <HAL_USART_Transmit+0xaa>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d104      	bne.n	8009156 <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	61bb      	str	r3, [r7, #24]
 8009154:	e003      	b.n	800915e <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800915a:	2300      	movs	r3, #0
 800915c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800915e:	e02a      	b.n	80091b6 <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	0013      	movs	r3, r2
 800916a:	2200      	movs	r2, #0
 800916c:	2180      	movs	r1, #128	; 0x80
 800916e:	f000 fb19 	bl	80097a4 <USART_WaitOnFlagUntilTimeout>
 8009172:	1e03      	subs	r3, r0, #0
 8009174:	d001      	beq.n	800917a <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e052      	b.n	8009220 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10b      	bne.n	8009198 <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	001a      	movs	r2, r3
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	05d2      	lsls	r2, r2, #23
 800918c:	0dd2      	lsrs	r2, r2, #23
 800918e:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	3302      	adds	r3, #2
 8009194:	61bb      	str	r3, [r7, #24]
 8009196:	e007      	b.n	80091a8 <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	781a      	ldrb	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	3301      	adds	r3, #1
 80091a6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1cf      	bne.n	8009160 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091c0:	697a      	ldr	r2, [r7, #20]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	0013      	movs	r3, r2
 80091ca:	2200      	movs	r2, #0
 80091cc:	2140      	movs	r1, #64	; 0x40
 80091ce:	f000 fae9 	bl	80097a4 <USART_WaitOnFlagUntilTimeout>
 80091d2:	1e03      	subs	r3, r0, #0
 80091d4:	d001      	beq.n	80091da <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e022      	b.n	8009220 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2208      	movs	r2, #8
 80091e8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2108      	movs	r1, #8
 80091f6:	430a      	orrs	r2, r1
 80091f8:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2110      	movs	r1, #16
 8009206:	430a      	orrs	r2, r1
 8009208:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2259      	movs	r2, #89	; 0x59
 800920e:	2101      	movs	r1, #1
 8009210:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2258      	movs	r2, #88	; 0x58
 8009216:	2100      	movs	r1, #0
 8009218:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	e000      	b.n	8009220 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 800921e:	2302      	movs	r3, #2
  }
}
 8009220:	0018      	movs	r0, r3
 8009222:	46bd      	mov	sp, r7
 8009224:	b008      	add	sp, #32
 8009226:	bd80      	pop	{r7, pc}

08009228 <HAL_USART_Transmit_DMA>:
  * @param  pTxData pointer to data buffer (u8 or u16 data elements).
  * @param  Size amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit_DMA(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size)
{
 8009228:	b590      	push	{r4, r7, lr}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	1dbb      	adds	r3, r7, #6
 8009234:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009236:	2317      	movs	r3, #23
 8009238:	18fb      	adds	r3, r7, r3
 800923a:	2200      	movs	r2, #0
 800923c:	701a      	strb	r2, [r3, #0]
  uint32_t *tmp;

  if (husart->State == HAL_USART_STATE_READY)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2259      	movs	r2, #89	; 0x59
 8009242:	5c9b      	ldrb	r3, [r3, r2]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b01      	cmp	r3, #1
 8009248:	d000      	beq.n	800924c <HAL_USART_Transmit_DMA+0x24>
 800924a:	e07d      	b.n	8009348 <HAL_USART_Transmit_DMA+0x120>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <HAL_USART_Transmit_DMA+0x32>
 8009252:	1dbb      	adds	r3, r7, #6
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_USART_Transmit_DMA+0x36>
    {
      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e075      	b.n	800934a <HAL_USART_Transmit_DMA+0x122>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689a      	ldr	r2, [r3, #8]
 8009262:	2380      	movs	r3, #128	; 0x80
 8009264:	015b      	lsls	r3, r3, #5
 8009266:	429a      	cmp	r2, r3
 8009268:	d10a      	bne.n	8009280 <HAL_USART_Transmit_DMA+0x58>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d106      	bne.n	8009280 <HAL_USART_Transmit_DMA+0x58>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	001a      	movs	r2, r3
 8009276:	2301      	movs	r3, #1
 8009278:	4013      	ands	r3, r2
 800927a:	d001      	beq.n	8009280 <HAL_USART_Transmit_DMA+0x58>
      {
        return  HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e064      	b.n	800934a <HAL_USART_Transmit_DMA+0x122>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2258      	movs	r2, #88	; 0x58
 8009284:	5c9b      	ldrb	r3, [r3, r2]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <HAL_USART_Transmit_DMA+0x66>
 800928a:	2302      	movs	r3, #2
 800928c:	e05d      	b.n	800934a <HAL_USART_Transmit_DMA+0x122>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2258      	movs	r2, #88	; 0x58
 8009292:	2101      	movs	r1, #1
 8009294:	5499      	strb	r1, [r3, r2]

    husart->pTxBuffPtr = pTxData;
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	629a      	str	r2, [r3, #40]	; 0x28
    husart->TxXferSize = Size;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	1dba      	adds	r2, r7, #6
 80092a0:	8812      	ldrh	r2, [r2, #0]
 80092a2:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	1dba      	adds	r2, r7, #6
 80092a8:	8812      	ldrh	r2, [r2, #0]
 80092aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2259      	movs	r2, #89	; 0x59
 80092b6:	2112      	movs	r1, #18
 80092b8:	5499      	strb	r1, [r3, r2]

    if (husart->hdmatx != NULL)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d01e      	beq.n	8009300 <HAL_USART_Transmit_DMA+0xd8>
    {
      /* Set the USART DMA transfer complete callback */
      husart->hdmatx->XferCpltCallback = USART_DMATransmitCplt;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c6:	4a23      	ldr	r2, [pc, #140]	; (8009354 <HAL_USART_Transmit_DMA+0x12c>)
 80092c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the USART DMA Half transfer complete callback */
      husart->hdmatx->XferHalfCpltCallback = USART_DMATxHalfCplt;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ce:	4a22      	ldr	r2, [pc, #136]	; (8009358 <HAL_USART_Transmit_DMA+0x130>)
 80092d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      husart->hdmatx->XferErrorCallback = USART_DMAError;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d6:	4a21      	ldr	r2, [pc, #132]	; (800935c <HAL_USART_Transmit_DMA+0x134>)
 80092d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the USART transmit DMA channel */
      tmp = (uint32_t *)&pTxData;
 80092da:	2308      	movs	r3, #8
 80092dc:	18fb      	adds	r3, r7, r3
 80092de:	613b      	str	r3, [r7, #16]
      status = HAL_DMA_Start_IT(husart->hdmatx, *(uint32_t *)tmp, (uint32_t)&husart->Instance->TDR, Size);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	6819      	ldr	r1, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3328      	adds	r3, #40	; 0x28
 80092ee:	001a      	movs	r2, r3
 80092f0:	1dbb      	adds	r3, r7, #6
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	2417      	movs	r4, #23
 80092f6:	193c      	adds	r4, r7, r4
 80092f8:	f7fa faba 	bl	8003870 <HAL_DMA_Start_IT>
 80092fc:	0003      	movs	r3, r0
 80092fe:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8009300:	2317      	movs	r3, #23
 8009302:	18fb      	adds	r3, r7, r3
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d111      	bne.n	800932e <HAL_USART_Transmit_DMA+0x106>
    {
      /* Clear the TC flag in the ICR register */
      __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2240      	movs	r2, #64	; 0x40
 8009310:	621a      	str	r2, [r3, #32]

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2258      	movs	r2, #88	; 0x58
 8009316:	2100      	movs	r1, #0
 8009318:	5499      	strb	r1, [r3, r2]

      /* Enable the DMA transfer for transmit request by setting the DMAT bit
         in the USART CR3 register */
      SET_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2180      	movs	r1, #128	; 0x80
 8009326:	430a      	orrs	r2, r1
 8009328:	609a      	str	r2, [r3, #8]

      return HAL_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	e00d      	b.n	800934a <HAL_USART_Transmit_DMA+0x122>
    }
    else
    {
      /* Set error code to DMA */
      husart->ErrorCode = HAL_USART_ERROR_DMA;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2210      	movs	r2, #16
 8009332:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process Unlocked */
      __HAL_UNLOCK(husart);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2258      	movs	r2, #88	; 0x58
 8009338:	2100      	movs	r1, #0
 800933a:	5499      	strb	r1, [r3, r2]

      /* Restore husart->State to ready */
      husart->State = HAL_USART_STATE_READY;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2259      	movs	r2, #89	; 0x59
 8009340:	2101      	movs	r1, #1
 8009342:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <HAL_USART_Transmit_DMA+0x122>
    }
  }
  else
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
  }
}
 800934a:	0018      	movs	r0, r3
 800934c:	46bd      	mov	sp, r7
 800934e:	b007      	add	sp, #28
 8009350:	bd90      	pop	{r4, r7, pc}
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	080096ad 	.word	0x080096ad
 8009358:	08009717 	.word	0x08009717
 800935c:	08009735 	.word	0x08009735

08009360 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	69db      	ldr	r3, [r3, #28]
 800936e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4aab      	ldr	r2, [pc, #684]	; (8009630 <HAL_USART_IRQHandler+0x2d0>)
 8009384:	4013      	ands	r3, r2
 8009386:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d117      	bne.n	80093be <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2220      	movs	r2, #32
 8009392:	4013      	ands	r3, r2
 8009394:	d013      	beq.n	80093be <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	2220      	movs	r2, #32
 800939a:	4013      	ands	r3, r2
 800939c:	d104      	bne.n	80093a8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	2380      	movs	r3, #128	; 0x80
 80093a2:	055b      	lsls	r3, r3, #21
 80093a4:	4013      	ands	r3, r2
 80093a6:	d00a      	beq.n	80093be <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d100      	bne.n	80093b2 <HAL_USART_IRQHandler+0x52>
 80093b0:	e135      	b.n	800961e <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	0010      	movs	r0, r2
 80093ba:	4798      	blx	r3
      }
      return;
 80093bc:	e12f      	b.n	800961e <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d100      	bne.n	80093c6 <HAL_USART_IRQHandler+0x66>
 80093c4:	e0eb      	b.n	800959e <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	4a9a      	ldr	r2, [pc, #616]	; (8009634 <HAL_USART_IRQHandler+0x2d4>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	d105      	bne.n	80093da <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 80093ce:	69ba      	ldr	r2, [r7, #24]
 80093d0:	2390      	movs	r3, #144	; 0x90
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	4013      	ands	r3, r2
 80093d6:	d100      	bne.n	80093da <HAL_USART_IRQHandler+0x7a>
 80093d8:	e0e1      	b.n	800959e <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	2201      	movs	r2, #1
 80093de:	4013      	ands	r3, r2
 80093e0:	d00e      	beq.n	8009400 <HAL_USART_IRQHandler+0xa0>
 80093e2:	69ba      	ldr	r2, [r7, #24]
 80093e4:	2380      	movs	r3, #128	; 0x80
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4013      	ands	r3, r2
 80093ea:	d009      	beq.n	8009400 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f8:	2201      	movs	r2, #1
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	2202      	movs	r2, #2
 8009404:	4013      	ands	r3, r2
 8009406:	d00d      	beq.n	8009424 <HAL_USART_IRQHandler+0xc4>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	2201      	movs	r2, #1
 800940c:	4013      	ands	r3, r2
 800940e:	d009      	beq.n	8009424 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2202      	movs	r2, #2
 8009416:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941c:	2204      	movs	r2, #4
 800941e:	431a      	orrs	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	2204      	movs	r2, #4
 8009428:	4013      	ands	r3, r2
 800942a:	d00d      	beq.n	8009448 <HAL_USART_IRQHandler+0xe8>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2201      	movs	r2, #1
 8009430:	4013      	ands	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2204      	movs	r2, #4
 800943a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009440:	2202      	movs	r2, #2
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2208      	movs	r2, #8
 800944c:	4013      	ands	r3, r2
 800944e:	d011      	beq.n	8009474 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2220      	movs	r2, #32
 8009454:	4013      	ands	r3, r2
 8009456:	d103      	bne.n	8009460 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	4a76      	ldr	r2, [pc, #472]	; (8009634 <HAL_USART_IRQHandler+0x2d4>)
 800945c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800945e:	d009      	beq.n	8009474 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2208      	movs	r2, #8
 8009466:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946c:	2208      	movs	r2, #8
 800946e:	431a      	orrs	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	2380      	movs	r3, #128	; 0x80
 8009478:	019b      	lsls	r3, r3, #6
 800947a:	4013      	ands	r3, r2
 800947c:	d01a      	beq.n	80094b4 <HAL_USART_IRQHandler+0x154>
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2201      	movs	r2, #1
 8009482:	4013      	ands	r3, r2
 8009484:	d016      	beq.n	80094b4 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2259      	movs	r2, #89	; 0x59
 800948a:	5c9b      	ldrb	r3, [r3, r2]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b22      	cmp	r3, #34	; 0x22
 8009490:	d105      	bne.n	800949e <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2280      	movs	r2, #128	; 0x80
 8009498:	0192      	lsls	r2, r2, #6
 800949a:	621a      	str	r2, [r3, #32]
        return;
 800949c:	e0c4      	b.n	8009628 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2280      	movs	r2, #128	; 0x80
 80094a4:	0192      	lsls	r2, r2, #6
 80094a6:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ac:	2220      	movs	r2, #32
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d100      	bne.n	80094be <HAL_USART_IRQHandler+0x15e>
 80094bc:	e0b1      	b.n	8009622 <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	2220      	movs	r2, #32
 80094c2:	4013      	ands	r3, r2
 80094c4:	d011      	beq.n	80094ea <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	2220      	movs	r2, #32
 80094ca:	4013      	ands	r3, r2
 80094cc:	d104      	bne.n	80094d8 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	2380      	movs	r3, #128	; 0x80
 80094d2:	055b      	lsls	r3, r3, #21
 80094d4:	4013      	ands	r3, r2
 80094d6:	d008      	beq.n	80094ea <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d004      	beq.n	80094ea <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	0010      	movs	r0, r2
 80094e8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094ee:	2208      	movs	r2, #8
 80094f0:	4013      	ands	r3, r2
 80094f2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	2240      	movs	r2, #64	; 0x40
 80094fc:	4013      	ands	r3, r2
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d002      	beq.n	8009508 <HAL_USART_IRQHandler+0x1a8>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d040      	beq.n	800958a <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	0018      	movs	r0, r3
 800950c:	f000 f8ae 	bl	800966c <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	2240      	movs	r2, #64	; 0x40
 8009518:	4013      	ands	r3, r2
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d130      	bne.n	8009580 <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2140      	movs	r1, #64	; 0x40
 800952a:	438a      	bics	r2, r1
 800952c:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009532:	2b00      	cmp	r3, #0
 8009534:	d008      	beq.n	8009548 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953a:	2200      	movs	r2, #0
 800953c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009542:	0018      	movs	r0, r3
 8009544:	f7fa fa1a 	bl	800397c <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009554:	4a38      	ldr	r2, [pc, #224]	; (8009638 <HAL_USART_IRQHandler+0x2d8>)
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955c:	0018      	movs	r0, r3
 800955e:	f7fa fa0d 	bl	800397c <HAL_DMA_Abort_IT>
 8009562:	1e03      	subs	r3, r0, #0
 8009564:	d019      	beq.n	800959a <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009570:	0018      	movs	r0, r3
 8009572:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009574:	e011      	b.n	800959a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	0018      	movs	r0, r3
 800957a:	f000 f86f 	bl	800965c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800957e:	e00c      	b.n	800959a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	0018      	movs	r0, r3
 8009584:	f000 f86a 	bl	800965c <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009588:	e007      	b.n	800959a <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	0018      	movs	r0, r3
 800958e:	f000 f865 	bl	800965c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8009598:	e043      	b.n	8009622 <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800959a:	46c0      	nop			; (mov r8, r8)
    return;
 800959c:	e041      	b.n	8009622 <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	2280      	movs	r2, #128	; 0x80
 80095a2:	4013      	ands	r3, r2
 80095a4:	d012      	beq.n	80095cc <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2280      	movs	r2, #128	; 0x80
 80095aa:	4013      	ands	r3, r2
 80095ac:	d104      	bne.n	80095b8 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	2380      	movs	r3, #128	; 0x80
 80095b2:	041b      	lsls	r3, r3, #16
 80095b4:	4013      	ands	r3, r2
 80095b6:	d009      	beq.n	80095cc <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d032      	beq.n	8009626 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	0010      	movs	r0, r2
 80095c8:	4798      	blx	r3
    }
    return;
 80095ca:	e02c      	b.n	8009626 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	2240      	movs	r2, #64	; 0x40
 80095d0:	4013      	ands	r3, r2
 80095d2:	d008      	beq.n	80095e6 <HAL_USART_IRQHandler+0x286>
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	2240      	movs	r2, #64	; 0x40
 80095d8:	4013      	ands	r3, r2
 80095da:	d004      	beq.n	80095e6 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	0018      	movs	r0, r3
 80095e0:	f000 fbf6 	bl	8009dd0 <USART_EndTransmit_IT>
    return;
 80095e4:	e020      	b.n	8009628 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	2380      	movs	r3, #128	; 0x80
 80095ea:	041b      	lsls	r3, r3, #16
 80095ec:	4013      	ands	r3, r2
 80095ee:	d009      	beq.n	8009604 <HAL_USART_IRQHandler+0x2a4>
 80095f0:	69ba      	ldr	r2, [r7, #24]
 80095f2:	2380      	movs	r3, #128	; 0x80
 80095f4:	05db      	lsls	r3, r3, #23
 80095f6:	4013      	ands	r3, r2
 80095f8:	d004      	beq.n	8009604 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0018      	movs	r0, r3
 80095fe:	f000 fc32 	bl	8009e66 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 8009602:	e011      	b.n	8009628 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009604:	69fa      	ldr	r2, [r7, #28]
 8009606:	2380      	movs	r3, #128	; 0x80
 8009608:	045b      	lsls	r3, r3, #17
 800960a:	4013      	ands	r3, r2
 800960c:	d00c      	beq.n	8009628 <HAL_USART_IRQHandler+0x2c8>
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b00      	cmp	r3, #0
 8009612:	da09      	bge.n	8009628 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	0018      	movs	r0, r3
 8009618:	f000 fc1d 	bl	8009e56 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 800961c:	e004      	b.n	8009628 <HAL_USART_IRQHandler+0x2c8>
      return;
 800961e:	46c0      	nop			; (mov r8, r8)
 8009620:	e002      	b.n	8009628 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009622:	46c0      	nop			; (mov r8, r8)
 8009624:	e000      	b.n	8009628 <HAL_USART_IRQHandler+0x2c8>
    return;
 8009626:	46c0      	nop			; (mov r8, r8)
  }
}
 8009628:	46bd      	mov	sp, r7
 800962a:	b008      	add	sp, #32
 800962c:	bd80      	pop	{r7, pc}
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	0000200f 	.word	0x0000200f
 8009634:	10000001 	.word	0x10000001
 8009638:	0800977b 	.word	0x0800977b

0800963c <HAL_USART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxHalfCpltCallback(USART_HandleTypeDef *husart)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009644:	46c0      	nop			; (mov r8, r8)
 8009646:	46bd      	mov	sp, r7
 8009648:	b002      	add	sp, #8
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8009654:	46c0      	nop			; (mov r8, r8)
 8009656:	46bd      	mov	sp, r7
 8009658:	b002      	add	sp, #8
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8009664:	46c0      	nop			; (mov r8, r8)
 8009666:	46bd      	mov	sp, r7
 8009668:	b002      	add	sp, #8
 800966a:	bd80      	pop	{r7, pc}

0800966c <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4909      	ldr	r1, [pc, #36]	; (80096a4 <USART_EndTransfer+0x38>)
 8009680:	400a      	ands	r2, r1
 8009682:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4906      	ldr	r1, [pc, #24]	; (80096a8 <USART_EndTransfer+0x3c>)
 8009690:	400a      	ands	r2, r1
 8009692:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2259      	movs	r2, #89	; 0x59
 8009698:	2101      	movs	r1, #1
 800969a:	5499      	strb	r1, [r3, r2]
}
 800969c:	46c0      	nop			; (mov r8, r8)
 800969e:	46bd      	mov	sp, r7
 80096a0:	b002      	add	sp, #8
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	fffffe1f 	.word	0xfffffe1f
 80096a8:	ef7ffffe 	.word	0xef7ffffe

080096ac <USART_DMATransmitCplt>:
  * @brief DMA USART transmit process complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2220      	movs	r2, #32
 80096c2:	4013      	ands	r3, r2
 80096c4:	d119      	bne.n	80096fa <USART_DMATransmitCplt+0x4e>
  {
    husart->TxXferCount = 0U;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2200      	movs	r2, #0
 80096ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2259      	movs	r2, #89	; 0x59
 80096d0:	5c9b      	ldrb	r3, [r3, r2]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b12      	cmp	r3, #18
 80096d6:	d11a      	bne.n	800970e <USART_DMATransmitCplt+0x62>
    {
      /* Disable the DMA transfer for transmit request by resetting the DMAT bit
         in the USART CR3 register */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAT);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689a      	ldr	r2, [r3, #8]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2180      	movs	r1, #128	; 0x80
 80096e4:	438a      	bics	r2, r1
 80096e6:	609a      	str	r2, [r3, #8]

      /* Enable the USART Transmit Complete Interrupt */
      __HAL_USART_ENABLE_IT(husart, USART_IT_TC);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2140      	movs	r1, #64	; 0x40
 80096f4:	430a      	orrs	r2, r1
 80096f6:	601a      	str	r2, [r3, #0]
      /* Call legacy weak Tx Complete Callback */
      HAL_USART_TxCpltCallback(husart);
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    }
  }
}
 80096f8:	e009      	b.n	800970e <USART_DMATransmitCplt+0x62>
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2259      	movs	r2, #89	; 0x59
 80096fe:	5c9b      	ldrb	r3, [r3, r2]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b12      	cmp	r3, #18
 8009704:	d103      	bne.n	800970e <USART_DMATransmitCplt+0x62>
      HAL_USART_TxCpltCallback(husart);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	0018      	movs	r0, r3
 800970a:	f7f7 fcbb 	bl	8001084 <HAL_USART_TxCpltCallback>
}
 800970e:	46c0      	nop			; (mov r8, r8)
 8009710:	46bd      	mov	sp, r7
 8009712:	b004      	add	sp, #16
 8009714:	bd80      	pop	{r7, pc}

08009716 <USART_DMATxHalfCplt>:
  * @brief DMA USART transmit process half complete callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Half Complete Callback */
  husart->TxHalfCpltCallback(husart);
#else
  /* Call legacy weak Tx Half Complete Callback */
  HAL_USART_TxHalfCpltCallback(husart);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	0018      	movs	r0, r3
 8009728:	f7ff ff88 	bl	800963c <HAL_USART_TxHalfCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800972c:	46c0      	nop			; (mov r8, r8)
 800972e:	46bd      	mov	sp, r7
 8009730:	b004      	add	sp, #16
 8009732:	bd80      	pop	{r7, pc}

08009734 <USART_DMAError>:
  * @brief DMA USART communication error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	60fb      	str	r3, [r7, #12]

  husart->RxXferCount = 0U;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2200      	movs	r2, #0
 800974c:	85da      	strh	r2, [r3, #46]	; 0x2e
  USART_EndTransfer(husart);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	0018      	movs	r0, r3
 8009752:	f7ff ff8b 	bl	800966c <USART_EndTransfer>

  husart->ErrorCode |= HAL_USART_ERROR_DMA;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800975a:	2210      	movs	r2, #16
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	65da      	str	r2, [r3, #92]	; 0x5c
  husart->State = HAL_USART_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2259      	movs	r2, #89	; 0x59
 8009766:	2101      	movs	r1, #1
 8009768:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	0018      	movs	r0, r3
 800976e:	f7ff ff75 	bl	800965c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	46bd      	mov	sp, r7
 8009776:	b004      	add	sp, #16
 8009778:	bd80      	pop	{r7, pc}

0800977a <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	0018      	movs	r0, r3
 8009798:	f7ff ff60 	bl	800965c <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800979c:	46c0      	nop			; (mov r8, r8)
 800979e:	46bd      	mov	sp, r7
 80097a0:	b004      	add	sp, #16
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	1dfb      	adds	r3, r7, #7
 80097b2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80097b4:	e017      	b.n	80097e6 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	3301      	adds	r3, #1
 80097ba:	d014      	beq.n	80097e6 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097bc:	f7f9 fc4c 	bl	8003058 <HAL_GetTick>
 80097c0:	0002      	movs	r2, r0
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d302      	bcc.n	80097d2 <USART_WaitOnFlagUntilTimeout+0x2e>
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d109      	bne.n	80097e6 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2259      	movs	r2, #89	; 0x59
 80097d6:	2101      	movs	r1, #1
 80097d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2258      	movs	r2, #88	; 0x58
 80097de:	2100      	movs	r1, #0
 80097e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e00f      	b.n	8009806 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	4013      	ands	r3, r2
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	425a      	negs	r2, r3
 80097f6:	4153      	adcs	r3, r2
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	001a      	movs	r2, r3
 80097fc:	1dfb      	adds	r3, r7, #7
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	429a      	cmp	r2, r3
 8009802:	d0d8      	beq.n	80097b6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	0018      	movs	r0, r3
 8009808:	46bd      	mov	sp, r7
 800980a:	b004      	add	sp, #16
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8009818:	231e      	movs	r3, #30
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	2200      	movs	r2, #0
 800981e:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	689a      	ldr	r2, [r3, #8]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	4313      	orrs	r3, r2
 8009834:	2280      	movs	r2, #128	; 0x80
 8009836:	0212      	lsls	r2, r2, #8
 8009838:	4313      	orrs	r3, r2
 800983a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4ab1      	ldr	r2, [pc, #708]	; (8009b08 <USART_SetConfig+0x2f8>)
 8009844:	4013      	ands	r3, r2
 8009846:	0019      	movs	r1, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	430a      	orrs	r2, r1
 8009850:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009852:	2380      	movs	r3, #128	; 0x80
 8009854:	011b      	lsls	r3, r3, #4
 8009856:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	699a      	ldr	r2, [r3, #24]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	69db      	ldr	r3, [r3, #28]
 800986a:	4313      	orrs	r3, r2
 800986c:	697a      	ldr	r2, [r7, #20]
 800986e:	4313      	orrs	r3, r2
 8009870:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	4aa2      	ldr	r2, [pc, #648]	; (8009b0c <USART_SetConfig+0x2fc>)
 8009884:	4013      	ands	r3, r2
 8009886:	0019      	movs	r1, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	220f      	movs	r2, #15
 800989a:	4393      	bics	r3, r2
 800989c:	0019      	movs	r1, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a98      	ldr	r2, [pc, #608]	; (8009b10 <USART_SetConfig+0x300>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d127      	bne.n	8009904 <USART_SetConfig+0xf4>
 80098b4:	4b97      	ldr	r3, [pc, #604]	; (8009b14 <USART_SetConfig+0x304>)
 80098b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b8:	2203      	movs	r2, #3
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d017      	beq.n	80098f0 <USART_SetConfig+0xe0>
 80098c0:	d81b      	bhi.n	80098fa <USART_SetConfig+0xea>
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d00a      	beq.n	80098dc <USART_SetConfig+0xcc>
 80098c6:	d818      	bhi.n	80098fa <USART_SetConfig+0xea>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <USART_SetConfig+0xc2>
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d00a      	beq.n	80098e6 <USART_SetConfig+0xd6>
 80098d0:	e013      	b.n	80098fa <USART_SetConfig+0xea>
 80098d2:	231f      	movs	r3, #31
 80098d4:	18fb      	adds	r3, r7, r3
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
 80098da:	e058      	b.n	800998e <USART_SetConfig+0x17e>
 80098dc:	231f      	movs	r3, #31
 80098de:	18fb      	adds	r3, r7, r3
 80098e0:	2202      	movs	r2, #2
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e053      	b.n	800998e <USART_SetConfig+0x17e>
 80098e6:	231f      	movs	r3, #31
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	2204      	movs	r2, #4
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	e04e      	b.n	800998e <USART_SetConfig+0x17e>
 80098f0:	231f      	movs	r3, #31
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	2208      	movs	r2, #8
 80098f6:	701a      	strb	r2, [r3, #0]
 80098f8:	e049      	b.n	800998e <USART_SetConfig+0x17e>
 80098fa:	231f      	movs	r3, #31
 80098fc:	18fb      	adds	r3, r7, r3
 80098fe:	2210      	movs	r2, #16
 8009900:	701a      	strb	r2, [r3, #0]
 8009902:	e044      	b.n	800998e <USART_SetConfig+0x17e>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a83      	ldr	r2, [pc, #524]	; (8009b18 <USART_SetConfig+0x308>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d127      	bne.n	800995e <USART_SetConfig+0x14e>
 800990e:	4b81      	ldr	r3, [pc, #516]	; (8009b14 <USART_SetConfig+0x304>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	220c      	movs	r2, #12
 8009914:	4013      	ands	r3, r2
 8009916:	2b0c      	cmp	r3, #12
 8009918:	d017      	beq.n	800994a <USART_SetConfig+0x13a>
 800991a:	d81b      	bhi.n	8009954 <USART_SetConfig+0x144>
 800991c:	2b08      	cmp	r3, #8
 800991e:	d00a      	beq.n	8009936 <USART_SetConfig+0x126>
 8009920:	d818      	bhi.n	8009954 <USART_SetConfig+0x144>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <USART_SetConfig+0x11c>
 8009926:	2b04      	cmp	r3, #4
 8009928:	d00a      	beq.n	8009940 <USART_SetConfig+0x130>
 800992a:	e013      	b.n	8009954 <USART_SetConfig+0x144>
 800992c:	231f      	movs	r3, #31
 800992e:	18fb      	adds	r3, r7, r3
 8009930:	2200      	movs	r2, #0
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e02b      	b.n	800998e <USART_SetConfig+0x17e>
 8009936:	231f      	movs	r3, #31
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	2202      	movs	r2, #2
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	e026      	b.n	800998e <USART_SetConfig+0x17e>
 8009940:	231f      	movs	r3, #31
 8009942:	18fb      	adds	r3, r7, r3
 8009944:	2204      	movs	r2, #4
 8009946:	701a      	strb	r2, [r3, #0]
 8009948:	e021      	b.n	800998e <USART_SetConfig+0x17e>
 800994a:	231f      	movs	r3, #31
 800994c:	18fb      	adds	r3, r7, r3
 800994e:	2208      	movs	r2, #8
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	e01c      	b.n	800998e <USART_SetConfig+0x17e>
 8009954:	231f      	movs	r3, #31
 8009956:	18fb      	adds	r3, r7, r3
 8009958:	2210      	movs	r2, #16
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	e017      	b.n	800998e <USART_SetConfig+0x17e>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a6e      	ldr	r2, [pc, #440]	; (8009b1c <USART_SetConfig+0x30c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d104      	bne.n	8009972 <USART_SetConfig+0x162>
 8009968:	231f      	movs	r3, #31
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
 8009970:	e00d      	b.n	800998e <USART_SetConfig+0x17e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a6a      	ldr	r2, [pc, #424]	; (8009b20 <USART_SetConfig+0x310>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d104      	bne.n	8009986 <USART_SetConfig+0x176>
 800997c:	231f      	movs	r3, #31
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
 8009984:	e003      	b.n	800998e <USART_SetConfig+0x17e>
 8009986:	231f      	movs	r3, #31
 8009988:	18fb      	adds	r3, r7, r3
 800998a:	2210      	movs	r2, #16
 800998c:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 800998e:	231f      	movs	r3, #31
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b08      	cmp	r3, #8
 8009996:	d100      	bne.n	800999a <USART_SetConfig+0x18a>
 8009998:	e139      	b.n	8009c0e <USART_SetConfig+0x3fe>
 800999a:	dd00      	ble.n	800999e <USART_SetConfig+0x18e>
 800999c:	e195      	b.n	8009cca <USART_SetConfig+0x4ba>
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d100      	bne.n	80099a4 <USART_SetConfig+0x194>
 80099a2:	e0d3      	b.n	8009b4c <USART_SetConfig+0x33c>
 80099a4:	dd00      	ble.n	80099a8 <USART_SetConfig+0x198>
 80099a6:	e190      	b.n	8009cca <USART_SetConfig+0x4ba>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <USART_SetConfig+0x1a4>
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d100      	bne.n	80099b2 <USART_SetConfig+0x1a2>
 80099b0:	e061      	b.n	8009a76 <USART_SetConfig+0x266>
 80099b2:	e18a      	b.n	8009cca <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7fc f904 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 80099b8:	0003      	movs	r3, r0
 80099ba:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d044      	beq.n	8009a4e <USART_SetConfig+0x23e>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d03e      	beq.n	8009a4a <USART_SetConfig+0x23a>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d038      	beq.n	8009a46 <USART_SetConfig+0x236>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d032      	beq.n	8009a42 <USART_SetConfig+0x232>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	2b04      	cmp	r3, #4
 80099e2:	d02c      	beq.n	8009a3e <USART_SetConfig+0x22e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	d026      	beq.n	8009a3a <USART_SetConfig+0x22a>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	2b06      	cmp	r3, #6
 80099f2:	d020      	beq.n	8009a36 <USART_SetConfig+0x226>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	2b07      	cmp	r3, #7
 80099fa:	d01a      	beq.n	8009a32 <USART_SetConfig+0x222>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d014      	beq.n	8009a2e <USART_SetConfig+0x21e>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d00e      	beq.n	8009a2a <USART_SetConfig+0x21a>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b0a      	cmp	r3, #10
 8009a12:	d008      	beq.n	8009a26 <USART_SetConfig+0x216>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b0b      	cmp	r3, #11
 8009a1a:	d102      	bne.n	8009a22 <USART_SetConfig+0x212>
 8009a1c:	2380      	movs	r3, #128	; 0x80
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	e016      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e014      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a26:	2380      	movs	r3, #128	; 0x80
 8009a28:	e012      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a2a:	2340      	movs	r3, #64	; 0x40
 8009a2c:	e010      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a2e:	2320      	movs	r3, #32
 8009a30:	e00e      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a32:	2310      	movs	r3, #16
 8009a34:	e00c      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a36:	230c      	movs	r3, #12
 8009a38:	e00a      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a3a:	230a      	movs	r3, #10
 8009a3c:	e008      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a3e:	2308      	movs	r3, #8
 8009a40:	e006      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a42:	2306      	movs	r3, #6
 8009a44:	e004      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a46:	2304      	movs	r3, #4
 8009a48:	e002      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	e000      	b.n	8009a50 <USART_SetConfig+0x240>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	0019      	movs	r1, r3
 8009a52:	6938      	ldr	r0, [r7, #16]
 8009a54:	f7f6 fb56 	bl	8000104 <__udivsi3>
 8009a58:	0003      	movs	r3, r0
 8009a5a:	005a      	lsls	r2, r3, #1
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	085b      	lsrs	r3, r3, #1
 8009a62:	18d2      	adds	r2, r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	0019      	movs	r1, r3
 8009a6a:	0010      	movs	r0, r2
 8009a6c:	f7f6 fb4a 	bl	8000104 <__udivsi3>
 8009a70:	0003      	movs	r3, r0
 8009a72:	61bb      	str	r3, [r7, #24]
      break;
 8009a74:	e12e      	b.n	8009cd4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d052      	beq.n	8009b24 <USART_SetConfig+0x314>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d03e      	beq.n	8009b04 <USART_SetConfig+0x2f4>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d038      	beq.n	8009b00 <USART_SetConfig+0x2f0>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	2b03      	cmp	r3, #3
 8009a94:	d032      	beq.n	8009afc <USART_SetConfig+0x2ec>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d02c      	beq.n	8009af8 <USART_SetConfig+0x2e8>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	2b05      	cmp	r3, #5
 8009aa4:	d026      	beq.n	8009af4 <USART_SetConfig+0x2e4>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	2b06      	cmp	r3, #6
 8009aac:	d020      	beq.n	8009af0 <USART_SetConfig+0x2e0>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	2b07      	cmp	r3, #7
 8009ab4:	d01a      	beq.n	8009aec <USART_SetConfig+0x2dc>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b08      	cmp	r3, #8
 8009abc:	d014      	beq.n	8009ae8 <USART_SetConfig+0x2d8>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d00e      	beq.n	8009ae4 <USART_SetConfig+0x2d4>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	2b0a      	cmp	r3, #10
 8009acc:	d008      	beq.n	8009ae0 <USART_SetConfig+0x2d0>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2b0b      	cmp	r3, #11
 8009ad4:	d102      	bne.n	8009adc <USART_SetConfig+0x2cc>
 8009ad6:	2380      	movs	r3, #128	; 0x80
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	e024      	b.n	8009b26 <USART_SetConfig+0x316>
 8009adc:	2301      	movs	r3, #1
 8009ade:	e022      	b.n	8009b26 <USART_SetConfig+0x316>
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	e020      	b.n	8009b26 <USART_SetConfig+0x316>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	e01e      	b.n	8009b26 <USART_SetConfig+0x316>
 8009ae8:	2320      	movs	r3, #32
 8009aea:	e01c      	b.n	8009b26 <USART_SetConfig+0x316>
 8009aec:	2310      	movs	r3, #16
 8009aee:	e01a      	b.n	8009b26 <USART_SetConfig+0x316>
 8009af0:	230c      	movs	r3, #12
 8009af2:	e018      	b.n	8009b26 <USART_SetConfig+0x316>
 8009af4:	230a      	movs	r3, #10
 8009af6:	e016      	b.n	8009b26 <USART_SetConfig+0x316>
 8009af8:	2308      	movs	r3, #8
 8009afa:	e014      	b.n	8009b26 <USART_SetConfig+0x316>
 8009afc:	2306      	movs	r3, #6
 8009afe:	e012      	b.n	8009b26 <USART_SetConfig+0x316>
 8009b00:	2304      	movs	r3, #4
 8009b02:	e010      	b.n	8009b26 <USART_SetConfig+0x316>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e00e      	b.n	8009b26 <USART_SetConfig+0x316>
 8009b08:	cfff69f3 	.word	0xcfff69f3
 8009b0c:	ffffc0f6 	.word	0xffffc0f6
 8009b10:	40013800 	.word	0x40013800
 8009b14:	40021000 	.word	0x40021000
 8009b18:	40004400 	.word	0x40004400
 8009b1c:	40004800 	.word	0x40004800
 8009b20:	40004c00 	.word	0x40004c00
 8009b24:	2301      	movs	r3, #1
 8009b26:	0019      	movs	r1, r3
 8009b28:	4886      	ldr	r0, [pc, #536]	; (8009d44 <USART_SetConfig+0x534>)
 8009b2a:	f7f6 faeb 	bl	8000104 <__udivsi3>
 8009b2e:	0003      	movs	r3, r0
 8009b30:	005a      	lsls	r2, r3, #1
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	085b      	lsrs	r3, r3, #1
 8009b38:	18d2      	adds	r2, r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	0019      	movs	r1, r3
 8009b40:	0010      	movs	r0, r2
 8009b42:	f7f6 fadf 	bl	8000104 <__udivsi3>
 8009b46:	0003      	movs	r3, r0
 8009b48:	61bb      	str	r3, [r7, #24]
      break;
 8009b4a:	e0c3      	b.n	8009cd4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8009b4c:	f7fb ffac 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8009b50:	0003      	movs	r3, r0
 8009b52:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d044      	beq.n	8009be6 <USART_SetConfig+0x3d6>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d03e      	beq.n	8009be2 <USART_SetConfig+0x3d2>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d038      	beq.n	8009bde <USART_SetConfig+0x3ce>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d032      	beq.n	8009bda <USART_SetConfig+0x3ca>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d02c      	beq.n	8009bd6 <USART_SetConfig+0x3c6>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b80:	2b05      	cmp	r3, #5
 8009b82:	d026      	beq.n	8009bd2 <USART_SetConfig+0x3c2>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b88:	2b06      	cmp	r3, #6
 8009b8a:	d020      	beq.n	8009bce <USART_SetConfig+0x3be>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	2b07      	cmp	r3, #7
 8009b92:	d01a      	beq.n	8009bca <USART_SetConfig+0x3ba>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	2b08      	cmp	r3, #8
 8009b9a:	d014      	beq.n	8009bc6 <USART_SetConfig+0x3b6>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	2b09      	cmp	r3, #9
 8009ba2:	d00e      	beq.n	8009bc2 <USART_SetConfig+0x3b2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	2b0a      	cmp	r3, #10
 8009baa:	d008      	beq.n	8009bbe <USART_SetConfig+0x3ae>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	2b0b      	cmp	r3, #11
 8009bb2:	d102      	bne.n	8009bba <USART_SetConfig+0x3aa>
 8009bb4:	2380      	movs	r3, #128	; 0x80
 8009bb6:	005b      	lsls	r3, r3, #1
 8009bb8:	e016      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e014      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bbe:	2380      	movs	r3, #128	; 0x80
 8009bc0:	e012      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bc2:	2340      	movs	r3, #64	; 0x40
 8009bc4:	e010      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bc6:	2320      	movs	r3, #32
 8009bc8:	e00e      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bca:	2310      	movs	r3, #16
 8009bcc:	e00c      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bce:	230c      	movs	r3, #12
 8009bd0:	e00a      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bd2:	230a      	movs	r3, #10
 8009bd4:	e008      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	e006      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bda:	2306      	movs	r3, #6
 8009bdc:	e004      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009bde:	2304      	movs	r3, #4
 8009be0:	e002      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009be2:	2302      	movs	r3, #2
 8009be4:	e000      	b.n	8009be8 <USART_SetConfig+0x3d8>
 8009be6:	2301      	movs	r3, #1
 8009be8:	0019      	movs	r1, r3
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f7f6 fa8a 	bl	8000104 <__udivsi3>
 8009bf0:	0003      	movs	r3, r0
 8009bf2:	005a      	lsls	r2, r3, #1
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	085b      	lsrs	r3, r3, #1
 8009bfa:	18d2      	adds	r2, r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	0019      	movs	r1, r3
 8009c02:	0010      	movs	r0, r2
 8009c04:	f7f6 fa7e 	bl	8000104 <__udivsi3>
 8009c08:	0003      	movs	r3, r0
 8009c0a:	61bb      	str	r3, [r7, #24]
      break;
 8009c0c:	e062      	b.n	8009cd4 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d044      	beq.n	8009ca0 <USART_SetConfig+0x490>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d03e      	beq.n	8009c9c <USART_SetConfig+0x48c>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d038      	beq.n	8009c98 <USART_SetConfig+0x488>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d032      	beq.n	8009c94 <USART_SetConfig+0x484>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c32:	2b04      	cmp	r3, #4
 8009c34:	d02c      	beq.n	8009c90 <USART_SetConfig+0x480>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d026      	beq.n	8009c8c <USART_SetConfig+0x47c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	2b06      	cmp	r3, #6
 8009c44:	d020      	beq.n	8009c88 <USART_SetConfig+0x478>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4a:	2b07      	cmp	r3, #7
 8009c4c:	d01a      	beq.n	8009c84 <USART_SetConfig+0x474>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	2b08      	cmp	r3, #8
 8009c54:	d014      	beq.n	8009c80 <USART_SetConfig+0x470>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b09      	cmp	r3, #9
 8009c5c:	d00e      	beq.n	8009c7c <USART_SetConfig+0x46c>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	2b0a      	cmp	r3, #10
 8009c64:	d008      	beq.n	8009c78 <USART_SetConfig+0x468>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b0b      	cmp	r3, #11
 8009c6c:	d102      	bne.n	8009c74 <USART_SetConfig+0x464>
 8009c6e:	2380      	movs	r3, #128	; 0x80
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	e016      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e014      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c78:	2380      	movs	r3, #128	; 0x80
 8009c7a:	e012      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c7c:	2340      	movs	r3, #64	; 0x40
 8009c7e:	e010      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c80:	2320      	movs	r3, #32
 8009c82:	e00e      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c84:	2310      	movs	r3, #16
 8009c86:	e00c      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c88:	230c      	movs	r3, #12
 8009c8a:	e00a      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c8c:	230a      	movs	r3, #10
 8009c8e:	e008      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c90:	2308      	movs	r3, #8
 8009c92:	e006      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c94:	2306      	movs	r3, #6
 8009c96:	e004      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c98:	2304      	movs	r3, #4
 8009c9a:	e002      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	e000      	b.n	8009ca2 <USART_SetConfig+0x492>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	0019      	movs	r1, r3
 8009ca4:	2380      	movs	r3, #128	; 0x80
 8009ca6:	0218      	lsls	r0, r3, #8
 8009ca8:	f7f6 fa2c 	bl	8000104 <__udivsi3>
 8009cac:	0003      	movs	r3, r0
 8009cae:	005a      	lsls	r2, r3, #1
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	085b      	lsrs	r3, r3, #1
 8009cb6:	18d2      	adds	r2, r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	0019      	movs	r1, r3
 8009cbe:	0010      	movs	r0, r2
 8009cc0:	f7f6 fa20 	bl	8000104 <__udivsi3>
 8009cc4:	0003      	movs	r3, r0
 8009cc6:	61bb      	str	r3, [r7, #24]
      break;
 8009cc8:	e004      	b.n	8009cd4 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8009cca:	231e      	movs	r3, #30
 8009ccc:	18fb      	adds	r3, r7, r3
 8009cce:	2201      	movs	r2, #1
 8009cd0:	701a      	strb	r2, [r3, #0]
      break;
 8009cd2:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2b0f      	cmp	r3, #15
 8009cd8:	d91c      	bls.n	8009d14 <USART_SetConfig+0x504>
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	2380      	movs	r3, #128	; 0x80
 8009cde:	025b      	lsls	r3, r3, #9
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d217      	bcs.n	8009d14 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	200e      	movs	r0, #14
 8009cea:	183b      	adds	r3, r7, r0
 8009cec:	210f      	movs	r1, #15
 8009cee:	438a      	bics	r2, r1
 8009cf0:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2207      	movs	r2, #7
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	b299      	uxth	r1, r3
 8009cfe:	183b      	adds	r3, r7, r0
 8009d00:	183a      	adds	r2, r7, r0
 8009d02:	8812      	ldrh	r2, [r2, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	183a      	adds	r2, r7, r0
 8009d0e:	8812      	ldrh	r2, [r2, #0]
 8009d10:	60da      	str	r2, [r3, #12]
 8009d12:	e003      	b.n	8009d1c <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8009d14:	231e      	movs	r3, #30
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	2201      	movs	r2, #1
 8009d1a:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009d34:	231e      	movs	r3, #30
 8009d36:	18fb      	adds	r3, r7, r3
 8009d38:	781b      	ldrb	r3, [r3, #0]
}
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	b008      	add	sp, #32
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	00f42400 	.word	0x00f42400

08009d48 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af02      	add	r7, sp, #8
 8009d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d56:	f7f9 f97f 	bl	8003058 <HAL_GetTick>
 8009d5a:	0003      	movs	r3, r0
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2208      	movs	r2, #8
 8009d66:	4013      	ands	r3, r2
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d10e      	bne.n	8009d8a <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	2380      	movs	r3, #128	; 0x80
 8009d70:	0399      	lsls	r1, r3, #14
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	23fa      	movs	r3, #250	; 0xfa
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	0013      	movs	r3, r2
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f7ff fd11 	bl	80097a4 <USART_WaitOnFlagUntilTimeout>
 8009d82:	1e03      	subs	r3, r0, #0
 8009d84:	d001      	beq.n	8009d8a <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d86:	2303      	movs	r3, #3
 8009d88:	e01e      	b.n	8009dc8 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2204      	movs	r2, #4
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	d10e      	bne.n	8009db6 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	2380      	movs	r3, #128	; 0x80
 8009d9c:	03d9      	lsls	r1, r3, #15
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	23fa      	movs	r3, #250	; 0xfa
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	0013      	movs	r3, r2
 8009da8:	2200      	movs	r2, #0
 8009daa:	f7ff fcfb 	bl	80097a4 <USART_WaitOnFlagUntilTimeout>
 8009dae:	1e03      	subs	r3, r0, #0
 8009db0:	d001      	beq.n	8009db6 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009db2:	2303      	movs	r3, #3
 8009db4:	e008      	b.n	8009dc8 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2259      	movs	r2, #89	; 0x59
 8009dba:	2101      	movs	r1, #1
 8009dbc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2258      	movs	r2, #88	; 0x58
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b004      	add	sp, #16
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2140      	movs	r1, #64	; 0x40
 8009de4:	438a      	bics	r2, r1
 8009de6:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2101      	movs	r1, #1
 8009df4:	438a      	bics	r2, r1
 8009df6:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2259      	movs	r2, #89	; 0x59
 8009e02:	5c9b      	ldrb	r3, [r3, r2]
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b12      	cmp	r3, #18
 8009e08:	d114      	bne.n	8009e34 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2208      	movs	r2, #8
 8009e10:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2108      	movs	r1, #8
 8009e1e:	430a      	orrs	r2, r1
 8009e20:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2259      	movs	r2, #89	; 0x59
 8009e26:	2101      	movs	r1, #1
 8009e28:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	f7f7 f929 	bl	8001084 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009e32:	e00c      	b.n	8009e4e <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d107      	bne.n	8009e4e <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2259      	movs	r2, #89	; 0x59
 8009e42:	2101      	movs	r1, #1
 8009e44:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	0018      	movs	r0, r3
 8009e4a:	f7ff fbff 	bl	800964c <HAL_USART_TxRxCpltCallback>
}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	46bd      	mov	sp, r7
 8009e52:	b002      	add	sp, #8
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b082      	sub	sp, #8
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b002      	add	sp, #8
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b082      	sub	sp, #8
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e6e:	46c0      	nop			; (mov r8, r8)
 8009e70:	46bd      	mov	sp, r7
 8009e72:	b002      	add	sp, #8
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <LL_GPIO_SetPinMode>:
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6819      	ldr	r1, [r3, #0]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	435b      	muls	r3, r3
 8009e8a:	001a      	movs	r2, r3
 8009e8c:	0013      	movs	r3, r2
 8009e8e:	005b      	lsls	r3, r3, #1
 8009e90:	189b      	adds	r3, r3, r2
 8009e92:	43db      	mvns	r3, r3
 8009e94:	400b      	ands	r3, r1
 8009e96:	001a      	movs	r2, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	435b      	muls	r3, r3
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	434b      	muls	r3, r1
 8009ea0:	431a      	orrs	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	601a      	str	r2, [r3, #0]
}
 8009ea6:	46c0      	nop			; (mov r8, r8)
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	b004      	add	sp, #16
 8009eac:	bd80      	pop	{r7, pc}

08009eae <LL_GPIO_SetPinOutputType>:
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	43d2      	mvns	r2, r2
 8009ec2:	401a      	ands	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	434b      	muls	r3, r1
 8009eca:	431a      	orrs	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	605a      	str	r2, [r3, #4]
}
 8009ed0:	46c0      	nop			; (mov r8, r8)
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	b004      	add	sp, #16
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <LL_GPIO_SetPinSpeed>:
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6899      	ldr	r1, [r3, #8]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	435b      	muls	r3, r3
 8009eec:	001a      	movs	r2, r3
 8009eee:	0013      	movs	r3, r2
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	189b      	adds	r3, r3, r2
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	400b      	ands	r3, r1
 8009ef8:	001a      	movs	r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	435b      	muls	r3, r3
 8009efe:	6879      	ldr	r1, [r7, #4]
 8009f00:	434b      	muls	r3, r1
 8009f02:	431a      	orrs	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	609a      	str	r2, [r3, #8]
}
 8009f08:	46c0      	nop			; (mov r8, r8)
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	b004      	add	sp, #16
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <LL_GPIO_SetPinPull>:
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68d9      	ldr	r1, [r3, #12]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	435b      	muls	r3, r3
 8009f24:	001a      	movs	r2, r3
 8009f26:	0013      	movs	r3, r2
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	189b      	adds	r3, r3, r2
 8009f2c:	43db      	mvns	r3, r3
 8009f2e:	400b      	ands	r3, r1
 8009f30:	001a      	movs	r2, r3
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	435b      	muls	r3, r3
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	434b      	muls	r3, r1
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	60da      	str	r2, [r3, #12]
}
 8009f40:	46c0      	nop			; (mov r8, r8)
 8009f42:	46bd      	mov	sp, r7
 8009f44:	b004      	add	sp, #16
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <LL_GPIO_SetAFPin_0_7>:
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a19      	ldr	r1, [r3, #32]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	435b      	muls	r3, r3
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	4353      	muls	r3, r2
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	435a      	muls	r2, r3
 8009f64:	0013      	movs	r3, r2
 8009f66:	011b      	lsls	r3, r3, #4
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	43db      	mvns	r3, r3
 8009f6c:	400b      	ands	r3, r1
 8009f6e:	001a      	movs	r2, r3
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	435b      	muls	r3, r3
 8009f74:	68b9      	ldr	r1, [r7, #8]
 8009f76:	434b      	muls	r3, r1
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	434b      	muls	r3, r1
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	434b      	muls	r3, r1
 8009f80:	431a      	orrs	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	621a      	str	r2, [r3, #32]
}
 8009f86:	46c0      	nop			; (mov r8, r8)
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b004      	add	sp, #16
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <LL_GPIO_SetAFPin_8_15>:
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b084      	sub	sp, #16
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	60b9      	str	r1, [r7, #8]
 8009f98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	0a1b      	lsrs	r3, r3, #8
 8009fa2:	68ba      	ldr	r2, [r7, #8]
 8009fa4:	0a12      	lsrs	r2, r2, #8
 8009fa6:	4353      	muls	r3, r2
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	0a12      	lsrs	r2, r2, #8
 8009fac:	4353      	muls	r3, r2
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	0a12      	lsrs	r2, r2, #8
 8009fb2:	435a      	muls	r2, r3
 8009fb4:	0013      	movs	r3, r2
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	1a9b      	subs	r3, r3, r2
 8009fba:	43db      	mvns	r3, r3
 8009fbc:	400b      	ands	r3, r1
 8009fbe:	001a      	movs	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	0a09      	lsrs	r1, r1, #8
 8009fc8:	434b      	muls	r3, r1
 8009fca:	68b9      	ldr	r1, [r7, #8]
 8009fcc:	0a09      	lsrs	r1, r1, #8
 8009fce:	434b      	muls	r3, r1
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	0a09      	lsrs	r1, r1, #8
 8009fd4:	434b      	muls	r3, r1
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	434b      	muls	r3, r1
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009fe0:	46c0      	nop			; (mov r8, r8)
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	b004      	add	sp, #16
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009ff6:	e047      	b.n	800a088 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	4091      	lsls	r1, r2
 800a002:	000a      	movs	r2, r1
 800a004:	4013      	ands	r3, r2
 800a006:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d039      	beq.n	800a082 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d003      	beq.n	800a01e <LL_GPIO_Init+0x36>
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d10d      	bne.n	800a03a <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	689a      	ldr	r2, [r3, #8]
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	0018      	movs	r0, r3
 800a028:	f7ff ff56 	bl	8009ed8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	0018      	movs	r0, r3
 800a036:	f7ff ff3a 	bl	8009eae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	691a      	ldr	r2, [r3, #16]
 800a03e:	68b9      	ldr	r1, [r7, #8]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	0018      	movs	r0, r3
 800a044:	f7ff ff64 	bl	8009f10 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d111      	bne.n	800a074 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2bff      	cmp	r3, #255	; 0xff
 800a054:	d807      	bhi.n	800a066 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	695a      	ldr	r2, [r3, #20]
 800a05a:	68b9      	ldr	r1, [r7, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	0018      	movs	r0, r3
 800a060:	f7ff ff72 	bl	8009f48 <LL_GPIO_SetAFPin_0_7>
 800a064:	e006      	b.n	800a074 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	695a      	ldr	r2, [r3, #20]
 800a06a:	68b9      	ldr	r1, [r7, #8]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	0018      	movs	r0, r3
 800a070:	f7ff ff8d 	bl	8009f8e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	0018      	movs	r0, r3
 800a07e:	f7ff fefa 	bl	8009e76 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3301      	adds	r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	40da      	lsrs	r2, r3
 800a090:	1e13      	subs	r3, r2, #0
 800a092:	d1b1      	bne.n	8009ff8 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800a094:	2300      	movs	r3, #0
}
 800a096:	0018      	movs	r0, r3
 800a098:	46bd      	mov	sp, r7
 800a09a:	b004      	add	sp, #16
 800a09c:	bd80      	pop	{r7, pc}
	...

0800a0a0 <LL_RCC_HSI_IsReady>:
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a0a4:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <LL_RCC_HSI_IsReady+0x24>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	2380      	movs	r3, #128	; 0x80
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	401a      	ands	r2, r3
 800a0ae:	2380      	movs	r3, #128	; 0x80
 800a0b0:	00db      	lsls	r3, r3, #3
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d101      	bne.n	800a0ba <LL_RCC_HSI_IsReady+0x1a>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <LL_RCC_HSI_IsReady+0x1c>
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	0018      	movs	r0, r3
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	40021000 	.word	0x40021000

0800a0c8 <LL_RCC_LSE_IsReady>:
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <LL_RCC_LSE_IsReady+0x1c>)
 800a0ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d101      	bne.n	800a0dc <LL_RCC_LSE_IsReady+0x14>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e000      	b.n	800a0de <LL_RCC_LSE_IsReady+0x16>
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	0018      	movs	r0, r3
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	40021000 	.word	0x40021000

0800a0e8 <LL_RCC_GetSysClkSource>:
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a0ec:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <LL_RCC_GetSysClkSource+0x14>)
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	2238      	movs	r2, #56	; 0x38
 800a0f2:	4013      	ands	r3, r2
}
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	46c0      	nop			; (mov r8, r8)
 800a0fc:	40021000 	.word	0x40021000

0800a100 <LL_RCC_GetAHBPrescaler>:
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a104:	4b03      	ldr	r3, [pc, #12]	; (800a114 <LL_RCC_GetAHBPrescaler+0x14>)
 800a106:	689a      	ldr	r2, [r3, #8]
 800a108:	23f0      	movs	r3, #240	; 0xf0
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	4013      	ands	r3, r2
}
 800a10e:	0018      	movs	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40021000 	.word	0x40021000

0800a118 <LL_RCC_GetAPB1Prescaler>:
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800a11c:	4b03      	ldr	r3, [pc, #12]	; (800a12c <LL_RCC_GetAPB1Prescaler+0x14>)
 800a11e:	689a      	ldr	r2, [r3, #8]
 800a120:	23e0      	movs	r3, #224	; 0xe0
 800a122:	01db      	lsls	r3, r3, #7
 800a124:	4013      	ands	r3, r2
}
 800a126:	0018      	movs	r0, r3
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	40021000 	.word	0x40021000

0800a130 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800a138:	4b05      	ldr	r3, [pc, #20]	; (800a150 <LL_RCC_GetUSARTClockSource+0x20>)
 800a13a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	401a      	ands	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	041b      	lsls	r3, r3, #16
 800a144:	4313      	orrs	r3, r2
}
 800a146:	0018      	movs	r0, r3
 800a148:	46bd      	mov	sp, r7
 800a14a:	b002      	add	sp, #8
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	46c0      	nop			; (mov r8, r8)
 800a150:	40021000 	.word	0x40021000

0800a154 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a158:	4b03      	ldr	r3, [pc, #12]	; (800a168 <LL_RCC_PLL_GetN+0x14>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	0a1b      	lsrs	r3, r3, #8
 800a15e:	227f      	movs	r2, #127	; 0x7f
 800a160:	4013      	ands	r3, r2
}
 800a162:	0018      	movs	r0, r3
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	40021000 	.word	0x40021000

0800a16c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a170:	4b03      	ldr	r3, [pc, #12]	; (800a180 <LL_RCC_PLL_GetR+0x14>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	0f5b      	lsrs	r3, r3, #29
 800a176:	075b      	lsls	r3, r3, #29
}
 800a178:	0018      	movs	r0, r3
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	40021000 	.word	0x40021000

0800a184 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a188:	4b03      	ldr	r3, [pc, #12]	; (800a198 <LL_RCC_PLL_GetMainSource+0x14>)
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	2203      	movs	r2, #3
 800a18e:	4013      	ands	r3, r2
}
 800a190:	0018      	movs	r0, r3
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	46c0      	nop			; (mov r8, r8)
 800a198:	40021000 	.word	0x40021000

0800a19c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a1a0:	4b03      	ldr	r3, [pc, #12]	; (800a1b0 <LL_RCC_PLL_GetDivider+0x14>)
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2270      	movs	r2, #112	; 0x70
 800a1a6:	4013      	ands	r3, r2
}
 800a1a8:	0018      	movs	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	40021000 	.word	0x40021000

0800a1b4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800a1bc:	f000 f8a8 	bl	800a310 <RCC_GetSystemClockFreq>
 800a1c0:	0002      	movs	r2, r0
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f000 f8ce 	bl	800a36c <RCC_GetHCLKClockFreq>
 800a1d0:	0002      	movs	r2, r0
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 f8de 	bl	800a39c <RCC_GetPCLK1ClockFreq>
 800a1e0:	0002      	movs	r2, r0
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	609a      	str	r2, [r3, #8]
}
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	b002      	add	sp, #8
 800a1ec:	bd80      	pop	{r7, pc}
	...

0800a1f0 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d134      	bne.n	800a26c <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	0018      	movs	r0, r3
 800a206:	f7ff ff93 	bl	800a130 <LL_RCC_GetUSARTClockSource>
 800a20a:	0003      	movs	r3, r0
 800a20c:	4a39      	ldr	r2, [pc, #228]	; (800a2f4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d016      	beq.n	800a240 <LL_RCC_GetUSARTClockFreq+0x50>
 800a212:	4a38      	ldr	r2, [pc, #224]	; (800a2f4 <LL_RCC_GetUSARTClockFreq+0x104>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d81c      	bhi.n	800a252 <LL_RCC_GetUSARTClockFreq+0x62>
 800a218:	4a37      	ldr	r2, [pc, #220]	; (800a2f8 <LL_RCC_GetUSARTClockFreq+0x108>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d003      	beq.n	800a226 <LL_RCC_GetUSARTClockFreq+0x36>
 800a21e:	4a37      	ldr	r2, [pc, #220]	; (800a2fc <LL_RCC_GetUSARTClockFreq+0x10c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d005      	beq.n	800a230 <LL_RCC_GetUSARTClockFreq+0x40>
 800a224:	e015      	b.n	800a252 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a226:	f000 f873 	bl	800a310 <RCC_GetSystemClockFreq>
 800a22a:	0003      	movs	r3, r0
 800a22c:	60fb      	str	r3, [r7, #12]
        break;
 800a22e:	e05c      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a230:	f7ff ff36 	bl	800a0a0 <LL_RCC_HSI_IsReady>
 800a234:	0003      	movs	r3, r0
 800a236:	2b01      	cmp	r3, #1
 800a238:	d150      	bne.n	800a2dc <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 800a23a:	4b31      	ldr	r3, [pc, #196]	; (800a300 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a23c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a23e:	e04d      	b.n	800a2dc <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a240:	f7ff ff42 	bl	800a0c8 <LL_RCC_LSE_IsReady>
 800a244:	0003      	movs	r3, r0
 800a246:	2b01      	cmp	r3, #1
 800a248:	d14a      	bne.n	800a2e0 <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 800a24a:	2380      	movs	r3, #128	; 0x80
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a250:	e046      	b.n	800a2e0 <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a252:	f000 f85d 	bl	800a310 <RCC_GetSystemClockFreq>
 800a256:	0003      	movs	r3, r0
 800a258:	0018      	movs	r0, r3
 800a25a:	f000 f887 	bl	800a36c <RCC_GetHCLKClockFreq>
 800a25e:	0003      	movs	r3, r0
 800a260:	0018      	movs	r0, r3
 800a262:	f000 f89b 	bl	800a39c <RCC_GetPCLK1ClockFreq>
 800a266:	0003      	movs	r3, r0
 800a268:	60fb      	str	r3, [r7, #12]
        break;
 800a26a:	e03e      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b0c      	cmp	r3, #12
 800a270:	d13b      	bne.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	0018      	movs	r0, r3
 800a276:	f7ff ff5b 	bl	800a130 <LL_RCC_GetUSARTClockSource>
 800a27a:	0003      	movs	r3, r0
 800a27c:	4a21      	ldr	r2, [pc, #132]	; (800a304 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d016      	beq.n	800a2b0 <LL_RCC_GetUSARTClockFreq+0xc0>
 800a282:	4a20      	ldr	r2, [pc, #128]	; (800a304 <LL_RCC_GetUSARTClockFreq+0x114>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d81c      	bhi.n	800a2c2 <LL_RCC_GetUSARTClockFreq+0xd2>
 800a288:	4a1f      	ldr	r2, [pc, #124]	; (800a308 <LL_RCC_GetUSARTClockFreq+0x118>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d003      	beq.n	800a296 <LL_RCC_GetUSARTClockFreq+0xa6>
 800a28e:	4a1f      	ldr	r2, [pc, #124]	; (800a30c <LL_RCC_GetUSARTClockFreq+0x11c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d005      	beq.n	800a2a0 <LL_RCC_GetUSARTClockFreq+0xb0>
 800a294:	e015      	b.n	800a2c2 <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800a296:	f000 f83b 	bl	800a310 <RCC_GetSystemClockFreq>
 800a29a:	0003      	movs	r3, r0
 800a29c:	60fb      	str	r3, [r7, #12]
        break;
 800a29e:	e024      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800a2a0:	f7ff fefe 	bl	800a0a0 <LL_RCC_HSI_IsReady>
 800a2a4:	0003      	movs	r3, r0
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d11c      	bne.n	800a2e4 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 800a2aa:	4b15      	ldr	r3, [pc, #84]	; (800a300 <LL_RCC_GetUSARTClockFreq+0x110>)
 800a2ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2ae:	e019      	b.n	800a2e4 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800a2b0:	f7ff ff0a 	bl	800a0c8 <LL_RCC_LSE_IsReady>
 800a2b4:	0003      	movs	r3, r0
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d116      	bne.n	800a2e8 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 800a2ba:	2380      	movs	r3, #128	; 0x80
 800a2bc:	021b      	lsls	r3, r3, #8
 800a2be:	60fb      	str	r3, [r7, #12]
        }
        break;
 800a2c0:	e012      	b.n	800a2e8 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800a2c2:	f000 f825 	bl	800a310 <RCC_GetSystemClockFreq>
 800a2c6:	0003      	movs	r3, r0
 800a2c8:	0018      	movs	r0, r3
 800a2ca:	f000 f84f 	bl	800a36c <RCC_GetHCLKClockFreq>
 800a2ce:	0003      	movs	r3, r0
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f000 f863 	bl	800a39c <RCC_GetPCLK1ClockFreq>
 800a2d6:	0003      	movs	r3, r0
 800a2d8:	60fb      	str	r3, [r7, #12]
        break;
 800a2da:	e006      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a2dc:	46c0      	nop			; (mov r8, r8)
 800a2de:	e004      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a2e0:	46c0      	nop			; (mov r8, r8)
 800a2e2:	e002      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a2e4:	46c0      	nop			; (mov r8, r8)
 800a2e6:	e000      	b.n	800a2ea <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 800a2e8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
}
 800a2ec:	0018      	movs	r0, r3
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	b004      	add	sp, #16
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	00030003 	.word	0x00030003
 800a2f8:	00030001 	.word	0x00030001
 800a2fc:	00030002 	.word	0x00030002
 800a300:	00f42400 	.word	0x00f42400
 800a304:	000c000c 	.word	0x000c000c
 800a308:	000c0004 	.word	0x000c0004
 800a30c:	000c0008 	.word	0x000c0008

0800a310 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800a316:	f7ff fee7 	bl	800a0e8 <LL_RCC_GetSysClkSource>
 800a31a:	0003      	movs	r3, r0
 800a31c:	2b08      	cmp	r3, #8
 800a31e:	d002      	beq.n	800a326 <RCC_GetSystemClockFreq+0x16>
 800a320:	2b10      	cmp	r3, #16
 800a322:	d003      	beq.n	800a32c <RCC_GetSystemClockFreq+0x1c>
 800a324:	e007      	b.n	800a336 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800a326:	4b0e      	ldr	r3, [pc, #56]	; (800a360 <RCC_GetSystemClockFreq+0x50>)
 800a328:	607b      	str	r3, [r7, #4]
      break;
 800a32a:	e014      	b.n	800a356 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800a32c:	f000 f84c 	bl	800a3c8 <RCC_PLL_GetFreqDomain_SYS>
 800a330:	0003      	movs	r3, r0
 800a332:	607b      	str	r3, [r7, #4]
      break;
 800a334:	e00f      	b.n	800a356 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a336:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <RCC_GetSystemClockFreq+0x54>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	0adb      	lsrs	r3, r3, #11
 800a33c:	2207      	movs	r2, #7
 800a33e:	4013      	ands	r3, r2
 800a340:	2201      	movs	r2, #1
 800a342:	409a      	lsls	r2, r3
 800a344:	0013      	movs	r3, r2
 800a346:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	4807      	ldr	r0, [pc, #28]	; (800a368 <RCC_GetSystemClockFreq+0x58>)
 800a34c:	f7f5 feda 	bl	8000104 <__udivsi3>
 800a350:	0003      	movs	r3, r0
 800a352:	607b      	str	r3, [r7, #4]
      break;
 800a354:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800a356:	687b      	ldr	r3, [r7, #4]
}
 800a358:	0018      	movs	r0, r3
 800a35a:	46bd      	mov	sp, r7
 800a35c:	b002      	add	sp, #8
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	007a1200 	.word	0x007a1200
 800a364:	40021000 	.word	0x40021000
 800a368:	00f42400 	.word	0x00f42400

0800a36c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800a374:	f7ff fec4 	bl	800a100 <LL_RCC_GetAHBPrescaler>
 800a378:	0003      	movs	r3, r0
 800a37a:	0a1b      	lsrs	r3, r3, #8
 800a37c:	220f      	movs	r2, #15
 800a37e:	401a      	ands	r2, r3
 800a380:	4b05      	ldr	r3, [pc, #20]	; (800a398 <RCC_GetHCLKClockFreq+0x2c>)
 800a382:	0092      	lsls	r2, r2, #2
 800a384:	58d3      	ldr	r3, [r2, r3]
 800a386:	221f      	movs	r2, #31
 800a388:	4013      	ands	r3, r2
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	40da      	lsrs	r2, r3
 800a38e:	0013      	movs	r3, r2
}
 800a390:	0018      	movs	r0, r3
 800a392:	46bd      	mov	sp, r7
 800a394:	b002      	add	sp, #8
 800a396:	bd80      	pop	{r7, pc}
 800a398:	0800a710 	.word	0x0800a710

0800a39c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800a3a4:	f7ff feb8 	bl	800a118 <LL_RCC_GetAPB1Prescaler>
 800a3a8:	0003      	movs	r3, r0
 800a3aa:	0b1a      	lsrs	r2, r3, #12
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <RCC_GetPCLK1ClockFreq+0x28>)
 800a3ae:	0092      	lsls	r2, r2, #2
 800a3b0:	58d3      	ldr	r3, [r2, r3]
 800a3b2:	221f      	movs	r2, #31
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	40da      	lsrs	r2, r3
 800a3ba:	0013      	movs	r3, r2
}
 800a3bc:	0018      	movs	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	0800a750 	.word	0x0800a750

0800a3c8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800a3ce:	f7ff fed9 	bl	800a184 <LL_RCC_PLL_GetMainSource>
 800a3d2:	0003      	movs	r3, r0
 800a3d4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d003      	beq.n	800a3e4 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d003      	beq.n	800a3ea <RCC_PLL_GetFreqDomain_SYS+0x22>
 800a3e2:	e005      	b.n	800a3f0 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800a3e4:	4b13      	ldr	r3, [pc, #76]	; (800a434 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a3e6:	607b      	str	r3, [r7, #4]
      break;
 800a3e8:	e005      	b.n	800a3f6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800a3ea:	4b13      	ldr	r3, [pc, #76]	; (800a438 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800a3ec:	607b      	str	r3, [r7, #4]
      break;
 800a3ee:	e002      	b.n	800a3f6 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800a3f2:	607b      	str	r3, [r7, #4]
      break;
 800a3f4:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800a3f6:	f7ff fead 	bl	800a154 <LL_RCC_PLL_GetN>
 800a3fa:	0002      	movs	r2, r0
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4353      	muls	r3, r2
 800a400:	001c      	movs	r4, r3
 800a402:	f7ff fecb 	bl	800a19c <LL_RCC_PLL_GetDivider>
 800a406:	0003      	movs	r3, r0
 800a408:	091b      	lsrs	r3, r3, #4
 800a40a:	3301      	adds	r3, #1
 800a40c:	0019      	movs	r1, r3
 800a40e:	0020      	movs	r0, r4
 800a410:	f7f5 fe78 	bl	8000104 <__udivsi3>
 800a414:	0003      	movs	r3, r0
 800a416:	001c      	movs	r4, r3
 800a418:	f7ff fea8 	bl	800a16c <LL_RCC_PLL_GetR>
 800a41c:	0003      	movs	r3, r0
 800a41e:	0f5b      	lsrs	r3, r3, #29
 800a420:	3301      	adds	r3, #1
 800a422:	0019      	movs	r1, r3
 800a424:	0020      	movs	r0, r4
 800a426:	f7f5 fe6d 	bl	8000104 <__udivsi3>
 800a42a:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800a42c:	0018      	movs	r0, r3
 800a42e:	46bd      	mov	sp, r7
 800a430:	b003      	add	sp, #12
 800a432:	bd90      	pop	{r4, r7, pc}
 800a434:	00f42400 	.word	0x00f42400
 800a438:	007a1200 	.word	0x007a1200

0800a43c <LL_USART_IsEnabled>:
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2201      	movs	r2, #1
 800a44a:	4013      	ands	r3, r2
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d101      	bne.n	800a454 <LL_USART_IsEnabled+0x18>
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <LL_USART_IsEnabled+0x1a>
 800a454:	2300      	movs	r3, #0
}
 800a456:	0018      	movs	r0, r3
 800a458:	46bd      	mov	sp, r7
 800a45a:	b002      	add	sp, #8
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <LL_USART_SetPrescaler>:
{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b082      	sub	sp, #8
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46c:	220f      	movs	r2, #15
 800a46e:	4393      	bics	r3, r2
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	b292      	uxth	r2, r2
 800a474:	431a      	orrs	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	46bd      	mov	sp, r7
 800a47e:	b002      	add	sp, #8
 800a480:	bd80      	pop	{r7, pc}
	...

0800a484 <LL_USART_SetStopBitsLength>:
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	4a05      	ldr	r2, [pc, #20]	; (800a4a8 <LL_USART_SetStopBitsLength+0x24>)
 800a494:	401a      	ands	r2, r3
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	431a      	orrs	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]
}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	b002      	add	sp, #8
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	46c0      	nop			; (mov r8, r8)
 800a4a8:	ffffcfff 	.word	0xffffcfff

0800a4ac <LL_USART_SetHWFlowCtrl>:
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <LL_USART_SetHWFlowCtrl+0x24>)
 800a4bc:	401a      	ands	r2, r3
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	609a      	str	r2, [r3, #8]
}
 800a4c6:	46c0      	nop			; (mov r8, r8)
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	b002      	add	sp, #8
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	fffffcff 	.word	0xfffffcff

0800a4d4 <LL_USART_SetBaudRate>:
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b086      	sub	sp, #24
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b0b      	cmp	r3, #11
 800a4e6:	d843      	bhi.n	800a570 <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a4e8:	683a      	ldr	r2, [r7, #0]
 800a4ea:	2380      	movs	r3, #128	; 0x80
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d126      	bne.n	800a540 <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	001a      	movs	r2, r3
 800a4f8:	4b1f      	ldr	r3, [pc, #124]	; (800a578 <LL_USART_SetBaudRate+0xa4>)
 800a4fa:	0092      	lsls	r2, r2, #2
 800a4fc:	58d3      	ldr	r3, [r2, r3]
 800a4fe:	0019      	movs	r1, r3
 800a500:	68b8      	ldr	r0, [r7, #8]
 800a502:	f7f5 fdff 	bl	8000104 <__udivsi3>
 800a506:	0003      	movs	r3, r0
 800a508:	005a      	lsls	r2, r3, #1
 800a50a:	6a3b      	ldr	r3, [r7, #32]
 800a50c:	085b      	lsrs	r3, r3, #1
 800a50e:	18d3      	adds	r3, r2, r3
 800a510:	6a39      	ldr	r1, [r7, #32]
 800a512:	0018      	movs	r0, r3
 800a514:	f7f5 fdf6 	bl	8000104 <__udivsi3>
 800a518:	0003      	movs	r3, r0
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	4a16      	ldr	r2, [pc, #88]	; (800a57c <LL_USART_SetBaudRate+0xa8>)
 800a522:	4013      	ands	r3, r2
 800a524:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	001a      	movs	r2, r3
 800a52e:	2307      	movs	r3, #7
 800a530:	4013      	ands	r3, r2
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	4313      	orrs	r3, r2
 800a536:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	60da      	str	r2, [r3, #12]
}
 800a53e:	e017      	b.n	800a570 <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	001a      	movs	r2, r3
 800a546:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <LL_USART_SetBaudRate+0xa4>)
 800a548:	0092      	lsls	r2, r2, #2
 800a54a:	58d3      	ldr	r3, [r2, r3]
 800a54c:	0019      	movs	r1, r3
 800a54e:	68b8      	ldr	r0, [r7, #8]
 800a550:	f7f5 fdd8 	bl	8000104 <__udivsi3>
 800a554:	0003      	movs	r3, r0
 800a556:	001a      	movs	r2, r3
 800a558:	6a3b      	ldr	r3, [r7, #32]
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	18d3      	adds	r3, r2, r3
 800a55e:	6a39      	ldr	r1, [r7, #32]
 800a560:	0018      	movs	r0, r3
 800a562:	f7f5 fdcf 	bl	8000104 <__udivsi3>
 800a566:	0003      	movs	r3, r0
 800a568:	b29b      	uxth	r3, r3
 800a56a:	001a      	movs	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	60da      	str	r2, [r3, #12]
}
 800a570:	46c0      	nop			; (mov r8, r8)
 800a572:	46bd      	mov	sp, r7
 800a574:	b006      	add	sp, #24
 800a576:	bd80      	pop	{r7, pc}
 800a578:	0800a7c4 	.word	0x0800a7c4
 800a57c:	0000fff0 	.word	0x0000fff0

0800a580 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a580:	b590      	push	{r4, r7, lr}
 800a582:	b08b      	sub	sp, #44	; 0x2c
 800a584:	af02      	add	r7, sp, #8
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a58a:	231f      	movs	r3, #31
 800a58c:	18fb      	adds	r3, r7, r3
 800a58e:	2201      	movs	r2, #1
 800a590:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a592:	2300      	movs	r3, #0
 800a594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	0018      	movs	r0, r3
 800a59a:	f7ff ff4f 	bl	800a43c <LL_USART_IsEnabled>
 800a59e:	1e03      	subs	r3, r0, #0
 800a5a0:	d16a      	bne.n	800a678 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a38      	ldr	r2, [pc, #224]	; (800a688 <LL_USART_Init+0x108>)
 800a5a8:	401a      	ands	r2, r3
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6899      	ldr	r1, [r3, #8]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	4319      	orrs	r1, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	4319      	orrs	r1, r3
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	0011      	movs	r1, r2
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f7ff ff58 	bl	800a484 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	0011      	movs	r1, r2
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f7ff ff65 	bl	800a4ac <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4a29      	ldr	r2, [pc, #164]	; (800a68c <LL_USART_Init+0x10c>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d105      	bne.n	800a5f6 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800a5ea:	2003      	movs	r0, #3
 800a5ec:	f7ff fe00 	bl	800a1f0 <LL_RCC_GetUSARTClockFreq>
 800a5f0:	0003      	movs	r3, r0
 800a5f2:	61bb      	str	r3, [r7, #24]
 800a5f4:	e022      	b.n	800a63c <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a25      	ldr	r2, [pc, #148]	; (800a690 <LL_USART_Init+0x110>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d105      	bne.n	800a60a <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800a5fe:	200c      	movs	r0, #12
 800a600:	f7ff fdf6 	bl	800a1f0 <LL_RCC_GetUSARTClockFreq>
 800a604:	0003      	movs	r3, r0
 800a606:	61bb      	str	r3, [r7, #24]
 800a608:	e018      	b.n	800a63c <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a21      	ldr	r2, [pc, #132]	; (800a694 <LL_USART_Init+0x114>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d108      	bne.n	800a624 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a612:	240c      	movs	r4, #12
 800a614:	193b      	adds	r3, r7, r4
 800a616:	0018      	movs	r0, r3
 800a618:	f7ff fdcc 	bl	800a1b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a61c:	193b      	adds	r3, r7, r4
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	61bb      	str	r3, [r7, #24]
 800a622:	e00b      	b.n	800a63c <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a1c      	ldr	r2, [pc, #112]	; (800a698 <LL_USART_Init+0x118>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d107      	bne.n	800a63c <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800a62c:	240c      	movs	r4, #12
 800a62e:	193b      	adds	r3, r7, r4
 800a630:	0018      	movs	r0, r3
 800a632:	f7ff fdbf 	bl	800a1b4 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800a636:	193b      	adds	r3, r7, r4
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d013      	beq.n	800a66a <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00f      	beq.n	800a66a <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 800a64a:	231f      	movs	r3, #31
 800a64c:	18fb      	adds	r3, r7, r3
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	69dc      	ldr	r4, [r3, #28]
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	69b9      	ldr	r1, [r7, #24]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	0023      	movs	r3, r4
 800a666:	f7ff ff35 	bl	800a4d4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0011      	movs	r1, r2
 800a672:	0018      	movs	r0, r3
 800a674:	f7ff fef3 	bl	800a45e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a678:	231f      	movs	r3, #31
 800a67a:	18fb      	adds	r3, r7, r3
 800a67c:	781b      	ldrb	r3, [r3, #0]
}
 800a67e:	0018      	movs	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	b009      	add	sp, #36	; 0x24
 800a684:	bd90      	pop	{r4, r7, pc}
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	efff69f3 	.word	0xefff69f3
 800a68c:	40013800 	.word	0x40013800
 800a690:	40004400 	.word	0x40004400
 800a694:	40004800 	.word	0x40004800
 800a698:	40004c00 	.word	0x40004c00

0800a69c <__libc_init_array>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	2600      	movs	r6, #0
 800a6a0:	4d0c      	ldr	r5, [pc, #48]	; (800a6d4 <__libc_init_array+0x38>)
 800a6a2:	4c0d      	ldr	r4, [pc, #52]	; (800a6d8 <__libc_init_array+0x3c>)
 800a6a4:	1b64      	subs	r4, r4, r5
 800a6a6:	10a4      	asrs	r4, r4, #2
 800a6a8:	42a6      	cmp	r6, r4
 800a6aa:	d109      	bne.n	800a6c0 <__libc_init_array+0x24>
 800a6ac:	2600      	movs	r6, #0
 800a6ae:	f000 f821 	bl	800a6f4 <_init>
 800a6b2:	4d0a      	ldr	r5, [pc, #40]	; (800a6dc <__libc_init_array+0x40>)
 800a6b4:	4c0a      	ldr	r4, [pc, #40]	; (800a6e0 <__libc_init_array+0x44>)
 800a6b6:	1b64      	subs	r4, r4, r5
 800a6b8:	10a4      	asrs	r4, r4, #2
 800a6ba:	42a6      	cmp	r6, r4
 800a6bc:	d105      	bne.n	800a6ca <__libc_init_array+0x2e>
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	00b3      	lsls	r3, r6, #2
 800a6c2:	58eb      	ldr	r3, [r5, r3]
 800a6c4:	4798      	blx	r3
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	e7ee      	b.n	800a6a8 <__libc_init_array+0xc>
 800a6ca:	00b3      	lsls	r3, r6, #2
 800a6cc:	58eb      	ldr	r3, [r5, r3]
 800a6ce:	4798      	blx	r3
 800a6d0:	3601      	adds	r6, #1
 800a6d2:	e7f2      	b.n	800a6ba <__libc_init_array+0x1e>
 800a6d4:	0800a7f4 	.word	0x0800a7f4
 800a6d8:	0800a7f4 	.word	0x0800a7f4
 800a6dc:	0800a7f4 	.word	0x0800a7f4
 800a6e0:	0800a7f8 	.word	0x0800a7f8

0800a6e4 <memset>:
 800a6e4:	0003      	movs	r3, r0
 800a6e6:	1882      	adds	r2, r0, r2
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d100      	bne.n	800a6ee <memset+0xa>
 800a6ec:	4770      	bx	lr
 800a6ee:	7019      	strb	r1, [r3, #0]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	e7f9      	b.n	800a6e8 <memset+0x4>

0800a6f4 <_init>:
 800a6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6f6:	46c0      	nop			; (mov r8, r8)
 800a6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6fa:	bc08      	pop	{r3}
 800a6fc:	469e      	mov	lr, r3
 800a6fe:	4770      	bx	lr

0800a700 <_fini>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a706:	bc08      	pop	{r3}
 800a708:	469e      	mov	lr, r3
 800a70a:	4770      	bx	lr
