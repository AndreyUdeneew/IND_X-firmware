
IND_X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000984c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f0  080099f0  00023140  2**0
                  CONTENTS
  4 .ARM          00000000  080099f0  080099f0  00023140  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099f0  080099f0  00023140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00003140  20000000  080099f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20003140  0800cb38  00023140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034c4  0800cb38  000234c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d07  00000000  00000000  00023168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a7  00000000  00000000  0003ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00040318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3f1  00000000  00000000  00043290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d39e  00000000  00000000  0005f681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae1c3  00000000  00000000  0007ca1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012abe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005978  00000000  00000000  0012ac38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20003140 	.word	0x20003140
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080098f0 	.word	0x080098f0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20003144 	.word	0x20003144
 8000100:	080098f0 	.word	0x080098f0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b7f      	cmp	r3, #127	; 0x7f
 800022e:	d809      	bhi.n	8000244 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	231f      	movs	r3, #31
 8000238:	401a      	ands	r2, r3
 800023a:	4b04      	ldr	r3, [pc, #16]	; (800024c <__NVIC_EnableIRQ+0x30>)
 800023c:	2101      	movs	r1, #1
 800023e:	4091      	lsls	r1, r2
 8000240:	000a      	movs	r2, r1
 8000242:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000244:	46c0      	nop			; (mov r8, r8)
 8000246:	46bd      	mov	sp, r7
 8000248:	b002      	add	sp, #8
 800024a:	bd80      	pop	{r7, pc}
 800024c:	e000e100 	.word	0xe000e100

08000250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b7f      	cmp	r3, #127	; 0x7f
 8000264:	d828      	bhi.n	80002b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <__NVIC_SetPriority+0xd4>)
 8000268:	1dfb      	adds	r3, r7, #7
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	b25b      	sxtb	r3, r3
 800026e:	089b      	lsrs	r3, r3, #2
 8000270:	33c0      	adds	r3, #192	; 0xc0
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	589b      	ldr	r3, [r3, r2]
 8000276:	1dfa      	adds	r2, r7, #7
 8000278:	7812      	ldrb	r2, [r2, #0]
 800027a:	0011      	movs	r1, r2
 800027c:	2203      	movs	r2, #3
 800027e:	400a      	ands	r2, r1
 8000280:	00d2      	lsls	r2, r2, #3
 8000282:	21ff      	movs	r1, #255	; 0xff
 8000284:	4091      	lsls	r1, r2
 8000286:	000a      	movs	r2, r1
 8000288:	43d2      	mvns	r2, r2
 800028a:	401a      	ands	r2, r3
 800028c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	019b      	lsls	r3, r3, #6
 8000292:	22ff      	movs	r2, #255	; 0xff
 8000294:	401a      	ands	r2, r3
 8000296:	1dfb      	adds	r3, r7, #7
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	0018      	movs	r0, r3
 800029c:	2303      	movs	r3, #3
 800029e:	4003      	ands	r3, r0
 80002a0:	00db      	lsls	r3, r3, #3
 80002a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002a4:	481f      	ldr	r0, [pc, #124]	; (8000324 <__NVIC_SetPriority+0xd4>)
 80002a6:	1dfb      	adds	r3, r7, #7
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	089b      	lsrs	r3, r3, #2
 80002ae:	430a      	orrs	r2, r1
 80002b0:	33c0      	adds	r3, #192	; 0xc0
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002b6:	e031      	b.n	800031c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <__NVIC_SetPriority+0xd8>)
 80002ba:	1dfb      	adds	r3, r7, #7
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	0019      	movs	r1, r3
 80002c0:	230f      	movs	r3, #15
 80002c2:	400b      	ands	r3, r1
 80002c4:	3b08      	subs	r3, #8
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	3306      	adds	r3, #6
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	18d3      	adds	r3, r2, r3
 80002ce:	3304      	adds	r3, #4
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1dfa      	adds	r2, r7, #7
 80002d4:	7812      	ldrb	r2, [r2, #0]
 80002d6:	0011      	movs	r1, r2
 80002d8:	2203      	movs	r2, #3
 80002da:	400a      	ands	r2, r1
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	21ff      	movs	r1, #255	; 0xff
 80002e0:	4091      	lsls	r1, r2
 80002e2:	000a      	movs	r2, r1
 80002e4:	43d2      	mvns	r2, r2
 80002e6:	401a      	ands	r2, r3
 80002e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	019b      	lsls	r3, r3, #6
 80002ee:	22ff      	movs	r2, #255	; 0xff
 80002f0:	401a      	ands	r2, r3
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	0018      	movs	r0, r3
 80002f8:	2303      	movs	r3, #3
 80002fa:	4003      	ands	r3, r0
 80002fc:	00db      	lsls	r3, r3, #3
 80002fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	4809      	ldr	r0, [pc, #36]	; (8000328 <__NVIC_SetPriority+0xd8>)
 8000302:	1dfb      	adds	r3, r7, #7
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001c      	movs	r4, r3
 8000308:	230f      	movs	r3, #15
 800030a:	4023      	ands	r3, r4
 800030c:	3b08      	subs	r3, #8
 800030e:	089b      	lsrs	r3, r3, #2
 8000310:	430a      	orrs	r2, r1
 8000312:	3306      	adds	r3, #6
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	18c3      	adds	r3, r0, r3
 8000318:	3304      	adds	r3, #4
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b003      	add	sp, #12
 8000322:	bd90      	pop	{r4, r7, pc}
 8000324:	e000e100 	.word	0xe000e100
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2201      	movs	r2, #1
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	46c0      	nop			; (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b002      	add	sp, #8
 8000346:	bd80      	pop	{r7, pc}

08000348 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a03      	ldr	r2, [pc, #12]	; (8000364 <LL_USART_DisableFIFO+0x1c>)
 8000356:	401a      	ands	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b002      	add	sp, #8
 8000362:	bd80      	pop	{r7, pc}
 8000364:	dfffffff 	.word	0xdfffffff

08000368 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	00db      	lsls	r3, r3, #3
 8000378:	08da      	lsrs	r2, r3, #3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	075b      	lsls	r3, r3, #29
 800037e:	431a      	orrs	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	609a      	str	r2, [r3, #8]
}
 8000384:	46c0      	nop			; (mov r8, r8)
 8000386:	46bd      	mov	sp, r7
 8000388:	b002      	add	sp, #8
 800038a:	bd80      	pop	{r7, pc}

0800038c <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <LL_USART_SetRXFIFOThreshold+0x24>)
 800039c:	401a      	ands	r2, r3
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	065b      	lsls	r3, r3, #25
 80003a2:	431a      	orrs	r2, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	609a      	str	r2, [r3, #8]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b002      	add	sp, #8
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	f1ffffff 	.word	0xf1ffffff

080003b4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <LL_USART_ConfigAsyncMode+0x2c>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	222a      	movs	r2, #42	; 0x2a
 80003ce:	4393      	bics	r3, r2
 80003d0:	001a      	movs	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	46bd      	mov	sp, r7
 80003da:	b002      	add	sp, #8
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffb7ff 	.word	0xffffb7ff

080003e4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	69da      	ldr	r2, [r3, #28]
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	039b      	lsls	r3, r3, #14
 80003f4:	401a      	ands	r2, r3
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	039b      	lsls	r3, r3, #14
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <LL_USART_IsActiveFlag_TEACK+0x1e>
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <LL_USART_IsActiveFlag_TEACK+0x20>
 8000402:	2300      	movs	r3, #0
}
 8000404:	0018      	movs	r0, r3
 8000406:	46bd      	mov	sp, r7
 8000408:	b002      	add	sp, #8
 800040a:	bd80      	pop	{r7, pc}

0800040c <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	69da      	ldr	r2, [r3, #28]
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	03db      	lsls	r3, r3, #15
 800041c:	401a      	ands	r2, r3
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	429a      	cmp	r2, r3
 8000424:	d101      	bne.n	800042a <LL_USART_IsActiveFlag_REACK+0x1e>
 8000426:	2301      	movs	r3, #1
 8000428:	e000      	b.n	800042c <LL_USART_IsActiveFlag_REACK+0x20>
 800042a:	2300      	movs	r3, #0
}
 800042c:	0018      	movs	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}

08000434 <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2220      	movs	r2, #32
 8000442:	431a      	orrs	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	601a      	str	r2, [r3, #0]
}
 8000448:	46c0      	nop			; (mov r8, r8)
 800044a:	46bd      	mov	sp, r7
 800044c:	b002      	add	sp, #8
 800044e:	bd80      	pop	{r7, pc}

08000450 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	2201      	movs	r2, #1
 800045e:	431a      	orrs	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}

0800046c <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000478:	b29b      	uxth	r3, r3
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0ddb      	lsrs	r3, r3, #23
 800047e:	b29b      	uxth	r3, r3
}
 8000480:	0018      	movs	r0, r3
 8000482:	46bd      	mov	sp, r7
 8000484:	b002      	add	sp, #8
 8000486:	bd80      	pop	{r7, pc}

08000488 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000492:	6819      	ldr	r1, [r3, #0]
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_SYSCFG_EnableFastModePlus+0x1c>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010000 	.word	0x40010000

080004a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	619a      	str	r2, [r3, #24]
}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b002      	add	sp, #8
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b004      	add	sp, #16
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <LL_IOP_GRP1_EnableClock+0x28>)
 8000502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	4013      	ands	r3, r2
 8000508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b004      	add	sp, #16
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t testINPUT = 0;
 800051e:	2316      	movs	r3, #22
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	801a      	strh	r2, [r3, #0]
	uint16_t testAns = 0;
 8000526:	2314      	movs	r3, #20
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	uint16_t i = 0;
 800052e:	2312      	movs	r3, #18
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2200      	movs	r2, #0
 8000534:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f002 fbbd 	bl	8002cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f869 	bl	8000610 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b2f      	ldr	r3, [pc, #188]	; (80005fc <main+0xe4>)
 8000540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <main+0xe4>)
 8000544:	2101      	movs	r1, #1
 8000546:	430a      	orrs	r2, r1
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
 800054a:	4b2c      	ldr	r3, [pc, #176]	; (80005fc <main+0xe4>)
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	2201      	movs	r2, #1
 8000550:	4013      	ands	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b29      	ldr	r3, [pc, #164]	; (80005fc <main+0xe4>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <main+0xe4>)
 800055c:	2102      	movs	r1, #2
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <main+0xe4>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2202      	movs	r2, #2
 8000568:	4013      	ands	r3, r2
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b23      	ldr	r3, [pc, #140]	; (80005fc <main+0xe4>)
 8000570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <main+0xe4>)
 8000574:	2104      	movs	r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	635a      	str	r2, [r3, #52]	; 0x34
 800057a:	4b20      	ldr	r3, [pc, #128]	; (80005fc <main+0xe4>)
 800057c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057e:	2204      	movs	r2, #4
 8000580:	4013      	ands	r3, r2
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fb95 	bl	8000cb4 <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 fb75 	bl	8000c78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800058e:	f000 fa97 	bl	8000ac0 <MX_USART2_UART_Init>
  MX_COMP1_Init();
 8000592:	f000 f8bd 	bl	8000710 <MX_COMP1_Init>
  MX_TIM1_Init();
 8000596:	f000 f999 	bl	80008cc <MX_TIM1_Init>
  MX_USART3_Init();
 800059a:	f000 fb2f 	bl	8000bfc <MX_USART3_Init>
  MX_I2S1_Init();
 800059e:	f000 f929 	bl	80007f4 <MX_I2S1_Init>
  MX_I2C1_Init();
 80005a2:	f000 f8e7 	bl	8000774 <MX_I2C1_Init>
  MX_SPI2_Init();
 80005a6:	f000 f94f 	bl	8000848 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	HAL_COMP_Start(&hcomp1);
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0xe8>)
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fe4f 	bl	8003250 <HAL_COMP_Start>
	HAL_Delay(100);
 80005b2:	2064      	movs	r0, #100	; 0x64
 80005b4:	f002 fc04 	bl	8002dc0 <HAL_Delay>
	uint8_t I2Cbuf[5];
	MEM_Reset();
 80005b8:	f001 fba6 	bl	8001d08 <MEM_Reset>

	weoInit();
 80005bc:	f000 fda6 	bl	800110c <weoInit>
	weoClear();
 80005c0:	f000 fdfa 	bl	80011b8 <weoClear>

	MEM_GetID();
 80005c4:	f001 fdfc 	bl	80021c0 <MEM_GetID>

	USART2->CR1 |= (USART_CR1_UE | USART_CR1_RE | USART_CR1_TE|USART_CR1_M); // Enable USART, Receive and Transmit
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <main+0xec>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <main+0xec>)
 80005ce:	490e      	ldr	r1, [pc, #56]	; (8000608 <main+0xf0>)
 80005d0:	430a      	orrs	r2, r1
 80005d2:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	LL_USART_EnableIT_RXNE(USART2);
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <main+0xec>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff2c 	bl	8000434 <LL_USART_EnableIT_RXNE_RXFNE>
	LL_USART_EnableIT_ERROR(USART2);
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <main+0xec>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff ff36 	bl	8000450 <LL_USART_EnableIT_ERROR>

	USART2->ICR|=USART_ICR_ORECF;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <main+0xec>)
 80005e6:	6a1a      	ldr	r2, [r3, #32]
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <main+0xec>)
 80005ea:	2108      	movs	r1, #8
 80005ec:	430a      	orrs	r2, r1
 80005ee:	621a      	str	r2, [r3, #32]
//	USART3->CR1 |= USART_CR1_UE;

	while (1) {
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = 0xF0;
		cmdExecute(cmd2Execute);
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <main+0xf4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fe45 	bl	8002284 <cmdExecute>
 80005fa:	e7f9      	b.n	80005f0 <main+0xd8>
 80005fc:	40021000 	.word	0x40021000
 8000600:	20003284 	.word	0x20003284
 8000604:	40004400 	.word	0x40004400
 8000608:	1000100d 	.word	0x1000100d
 800060c:	2000337a 	.word	0x2000337a

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b0a1      	sub	sp, #132	; 0x84
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	2448      	movs	r4, #72	; 0x48
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2338      	movs	r3, #56	; 0x38
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f009 f95d 	bl	80098e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	2338      	movs	r3, #56	; 0x38
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f009 f955 	bl	80098e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	0018      	movs	r0, r3
 800063a:	2334      	movs	r3, #52	; 0x34
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f009 f94e 	bl	80098e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	0018      	movs	r0, r3
 800064a:	f004 fb9d 	bl	8004d88 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2202      	movs	r2, #2
 8000652:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800065c:	0021      	movs	r1, r4
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2202      	movs	r2, #2
 8000674:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2208      	movs	r2, #8
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0292      	lsls	r2, r2, #10
 8000688:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0492      	lsls	r2, r2, #18
 8000690:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2280      	movs	r2, #128	; 0x80
 8000696:	0592      	lsls	r2, r2, #22
 8000698:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	187b      	adds	r3, r7, r1
 800069c:	0018      	movs	r0, r3
 800069e:	f004 fbbf 	bl	8004e20 <HAL_RCC_OscConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006a6:	f001 ff2d 	bl	8002504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	2138      	movs	r1, #56	; 0x38
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2207      	movs	r2, #7
 80006b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2102      	movs	r1, #2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f004 fec9 	bl	8005460 <HAL_RCC_ClockConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d2:	f001 ff17 	bl	8002504 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <SystemClock_Config+0xfc>)
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2S1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	0018      	movs	r0, r3
 80006f8:	f005 f85c 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000700:	f001 ff00 	bl	8002504 <Error_Handler>
  }
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b021      	add	sp, #132	; 0x84
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	00200822 	.word	0x00200822

08000710 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_COMP1_Init+0x5c>)
 8000716:	4a16      	ldr	r2, [pc, #88]	; (8000770 <MX_COMP1_Init+0x60>)
 8000718:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_COMP1_Init+0x5c>)
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	611a      	str	r2, [r3, #16]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_COMP1_Init+0x5c>)
 8000724:	2230      	movs	r2, #48	; 0x30
 8000726:	615a      	str	r2, [r3, #20]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000728:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_COMP1_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  hcomp1.Init.WindowOutput = COMP_WINDOWOUTPUT_EACH_COMP;
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_COMP1_Init+0x5c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <MX_COMP1_Init+0x5c>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_TIM1_OC5;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_COMP1_Init+0x5c>)
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	0392      	lsls	r2, r2, #14
 8000740:	621a      	str	r2, [r3, #32]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <MX_COMP1_Init+0x5c>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_COMP1_Init+0x5c>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_EVENT_RISING;
 800074e:	4b07      	ldr	r3, [pc, #28]	; (800076c <MX_COMP1_Init+0x5c>)
 8000750:	2212      	movs	r2, #18
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_COMP1_Init+0x5c>)
 8000756:	0018      	movs	r0, r3
 8000758:	f002 fc18 	bl	8002f8c <HAL_COMP_Init>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <MX_COMP1_Init+0x54>
  {
    Error_Handler();
 8000760:	f001 fed0 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20003284 	.word	0x20003284
 8000770:	40010200 	.word	0x40010200

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x1094102C;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 f9e3 	bl	8003b7c <HAL_I2C_Init>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f001 fea3 	bl	8002504 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007c0:	2100      	movs	r1, #0
 80007c2:	0018      	movs	r0, r3
 80007c4:	f004 f870 	bl	80048a8 <HAL_I2CEx_ConfigAnalogFilter>
 80007c8:	1e03      	subs	r3, r0, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f001 fe9a 	bl	8002504 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007d2:	2100      	movs	r1, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f004 f8b3 	bl	8004940 <HAL_I2CEx_ConfigDigitalFilter>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f001 fe91 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20003220 	.word	0x20003220
 80007ec:	40005400 	.word	0x40005400
 80007f0:	1094102c 	.word	0x1094102c

080007f4 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_I2S1_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_I2S1_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_I2S1_Init+0x4c>)
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	0092      	lsls	r2, r2, #2
 8000804:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_I2S1_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_I2S1_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_I2S1_Init+0x4c>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0092      	lsls	r2, r2, #2
 8000818:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_I2S1_Init+0x4c>)
 800081c:	22fa      	movs	r2, #250	; 0xfa
 800081e:	0192      	lsls	r2, r2, #6
 8000820:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_I2S1_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <MX_I2S1_Init+0x4c>)
 800082a:	0018      	movs	r0, r3
 800082c:	f004 f8d4 	bl	80049d8 <HAL_I2S_Init>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_I2S1_Init+0x44>
  {
    Error_Handler();
 8000834:	f001 fe66 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	2000337c 	.word	0x2000337c
 8000844:	40013000 	.word	0x40013000

08000848 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_SPI2_Init+0x7c>)
 800084e:	2208      	movs	r2, #8
 8000850:	61da      	str	r2, [r3, #28]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000854:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_SPI2_Init+0x80>)
 8000856:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_SPI2_Init+0x7c>)
 800085a:	2282      	movs	r2, #130	; 0x82
 800085c:	0052      	lsls	r2, r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000868:	22e0      	movs	r2, #224	; 0xe0
 800086a:	00d2      	lsls	r2, r2, #3
 800086c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_SPI2_Init+0x7c>)
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0092      	lsls	r2, r2, #2
 8000880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000884:	2208      	movs	r2, #8
 8000886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI2_Init+0x7c>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI2_Init+0x7c>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_SPI2_Init+0x7c>)
 800089c:	2207      	movs	r2, #7
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI2_Init+0x7c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_SPI2_Init+0x7c>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <MX_SPI2_Init+0x7c>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f005 fc80 	bl	80061b4 <HAL_SPI_Init>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI2_Init+0x74>
  {
    Error_Handler();
 80008b8:	f001 fe24 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	200031a8 	.word	0x200031a8
 80008c8:	40003800 	.word	0x40003800

080008cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09e      	sub	sp, #120	; 0x78
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d2:	2368      	movs	r3, #104	; 0x68
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	0018      	movs	r0, r3
 80008d8:	2310      	movs	r3, #16
 80008da:	001a      	movs	r2, r3
 80008dc:	2100      	movs	r1, #0
 80008de:	f008 ffff 	bl	80098e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	235c      	movs	r3, #92	; 0x5c
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	0018      	movs	r0, r3
 80008e8:	230c      	movs	r3, #12
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f008 fff7 	bl	80098e0 <memset>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80008f2:	2350      	movs	r3, #80	; 0x50
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	0018      	movs	r0, r3
 80008f8:	230c      	movs	r3, #12
 80008fa:	001a      	movs	r2, r3
 80008fc:	2100      	movs	r1, #0
 80008fe:	f008 ffef 	bl	80098e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000902:	2334      	movs	r3, #52	; 0x34
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	0018      	movs	r0, r3
 8000908:	231c      	movs	r3, #28
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f008 ffe7 	bl	80098e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000912:	003b      	movs	r3, r7
 8000914:	0018      	movs	r0, r3
 8000916:	2334      	movs	r3, #52	; 0x34
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f008 ffe0 	bl	80098e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000920:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000922:	4a65      	ldr	r2, [pc, #404]	; (8000ab8 <MX_TIM1_Init+0x1ec>)
 8000924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000926:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 639;
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000934:	4a61      	ldr	r2, [pc, #388]	; (8000abc <MX_TIM1_Init+0x1f0>)
 8000936:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000944:	4b5b      	ldr	r3, [pc, #364]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 800094c:	0018      	movs	r0, r3
 800094e:	f006 fc43 	bl	80071d8 <HAL_TIM_Base_Init>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000956:	f001 fdd5 	bl	8002504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	2168      	movs	r1, #104	; 0x68
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	0152      	lsls	r2, r2, #5
 8000962:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000964:	187a      	adds	r2, r7, r1
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f006 fecc 	bl	8007708 <HAL_TIM_ConfigClockSource>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000974:	f001 fdc6 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000978:	4b4e      	ldr	r3, [pc, #312]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 800097a:	0018      	movs	r0, r3
 800097c:	f006 fc84 	bl	8007288 <HAL_TIM_PWM_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000984:	f001 fdbe 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	215c      	movs	r1, #92	; 0x5c
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800099c:	187a      	adds	r2, r7, r1
 800099e:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f007 fb80 	bl	80080a8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 80009ac:	f001 fdaa 	bl	8002504 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80009b0:	2150      	movs	r1, #80	; 0x50
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	601a      	str	r2, [r3, #0]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2201      	movs	r2, #1
 80009bc:	605a      	str	r2, [r3, #4]
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80009c4:	187a      	adds	r2, r7, r1
 80009c6:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	0018      	movs	r0, r3
 80009cc:	f007 fc80 	bl	80082d0 <HAL_TIMEx_ConfigBreakInput>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80009d4:	f001 fd96 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2134      	movs	r1, #52	; 0x34
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2260      	movs	r2, #96	; 0x60
 80009de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 300;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2296      	movs	r2, #150	; 0x96
 80009e4:	0052      	lsls	r2, r2, #1
 80009e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2204      	movs	r2, #4
 80009f8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	1879      	adds	r1, r7, r1
 8000a08:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f006 fd85 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000a16:	f001 fd75 	bl	8002504 <Error_Handler>
  }
  sConfigOC.Pulse = 50;
 8000a1a:	2134      	movs	r1, #52	; 0x34
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2232      	movs	r2, #50	; 0x32
 8000a20:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000a22:	1879      	adds	r1, r7, r1
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000a26:	2210      	movs	r2, #16
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f006 fd77 	bl	800751c <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x16a>
  {
    Error_Handler();
 8000a32:	f001 fd67 	bl	8002504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a36:	003b      	movs	r3, r7
 8000a38:	2280      	movs	r2, #128	; 0x80
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2280      	movs	r2, #128	; 0x80
 8000a42:	00d2      	lsls	r2, r2, #3
 8000a44:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0152      	lsls	r2, r2, #5
 8000a58:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	0192      	lsls	r2, r2, #6
 8000a60:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 10;
 8000a62:	003b      	movs	r3, r7
 8000a64:	220a      	movs	r2, #10
 8000a66:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2280      	movs	r2, #128	; 0x80
 8000a78:	0492      	lsls	r2, r2, #18
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a7c:	003b      	movs	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a82:	003b      	movs	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2280      	movs	r2, #128	; 0x80
 8000a8c:	01d2      	lsls	r2, r2, #7
 8000a8e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a90:	003a      	movs	r2, r7
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f007 fb74 	bl	8008184 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x1d8>
  {
    Error_Handler();
 8000aa0:	f001 fd30 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <MX_TIM1_Init+0x1e8>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 ff14 	bl	80028d4 <HAL_TIM_MspPostInit>

}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b01e      	add	sp, #120	; 0x78
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000332c 	.word	0x2000332c
 8000ab8:	40012c00 	.word	0x40012c00
 8000abc:	0000027f 	.word	0x0000027f

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b08f      	sub	sp, #60	; 0x3c
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ac6:	2418      	movs	r4, #24
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	0018      	movs	r0, r3
 8000acc:	2320      	movs	r3, #32
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	f008 ff05 	bl	80098e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2318      	movs	r3, #24
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f008 fefe 	bl	80098e0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	029b      	lsls	r3, r3, #10
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fce9 	bl	80004c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fcfc 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000af4:	003b      	movs	r3, r7
 8000af6:	2204      	movs	r2, #4
 8000af8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000afa:	003b      	movs	r3, r7
 8000afc:	2202      	movs	r2, #2
 8000afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b00:	003b      	movs	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b06:	003b      	movs	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2201      	movs	r2, #1
 8000b16:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	003a      	movs	r2, r7
 8000b1a:	23a0      	movs	r3, #160	; 0xa0
 8000b1c:	05db      	lsls	r3, r3, #23
 8000b1e:	0011      	movs	r1, r2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f008 fb5f 	bl	80091e4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000b26:	003b      	movs	r3, r7
 8000b28:	2208      	movs	r2, #8
 8000b2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	2202      	movs	r2, #2
 8000b30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000b44:	003b      	movs	r3, r7
 8000b46:	2201      	movs	r2, #1
 8000b48:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	003a      	movs	r2, r7
 8000b4c:	23a0      	movs	r3, #160	; 0xa0
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f008 fb46 	bl	80091e4 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	201c      	movs	r0, #28
 8000b5c:	f7ff fb78 	bl	8000250 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000b60:	201c      	movs	r0, #28
 8000b62:	f7ff fb5b 	bl	800021c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 57600;
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	22e1      	movs	r2, #225	; 0xe1
 8000b70:	0212      	lsls	r2, r2, #8
 8000b72:	605a      	str	r2, [r3, #4]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_9B;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	0152      	lsls	r2, r2, #5
 8000b7a:	609a      	str	r2, [r3, #8]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b7c:	0021      	movs	r1, r4
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	220c      	movs	r2, #12
 8000b8e:	615a      	str	r2, [r3, #20]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2200      	movs	r2, #0
 8000b9a:	61da      	str	r2, [r3, #28]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	0010      	movs	r0, r2
 8000ba4:	f008 fdea 	bl	800977c <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff fbdb 	bl	8000368 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART2, LL_USART_FIFOTHRESHOLD_1_8);
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fbe8 	bl	800038c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART2);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f7ff fbc2 	bl	8000348 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART2);
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fbf4 	bl	80003b4 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART2 */

  /* USER CODE END WKUPType USART2 */

  LL_USART_Enable(USART2);
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fbac 	bl	800032c <LL_USART_Enable>

  /* Polling USART2 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART2))) || (!(LL_USART_IsActiveFlag_REACK(USART2))))
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fc03 	bl	80003e4 <LL_USART_IsActiveFlag_TEACK>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d0f9      	beq.n	8000bd6 <MX_USART2_UART_Init+0x116>
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <MX_USART2_UART_Init+0x138>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fc11 	bl	800040c <LL_USART_IsActiveFlag_REACK>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d0f3      	beq.n	8000bd6 <MX_USART2_UART_Init+0x116>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b00f      	add	sp, #60	; 0x3c
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */
//	USART3->CR2 &= ~(USART_CR1_UE);
	USART3->CR2|=USART_CR2_MSBFIRST;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_USART3_Init+0x70>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_USART3_Init+0x70>)
 8000c06:	2180      	movs	r1, #128	; 0x80
 8000c08:	0309      	lsls	r1, r1, #12
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <MX_USART3_Init+0x70>)
 8000c12:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 8100000;
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_USART3_Init+0x78>)
 8000c18:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_HIGH;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	00d2      	lsls	r2, r2, #3
 8000c38:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_2EDGE;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	621a      	str	r2, [r3, #32]
  husart3.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  husart3.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_USART3_Init+0x74>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f007 fbd9 	bl	8008410 <HAL_USART_Init>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART3_Init+0x6a>
  {
    Error_Handler();
 8000c62:	f001 fc4f 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	200032bc 	.word	0x200032bc
 8000c74:	007b98a0 	.word	0x007b98a0

08000c78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_DMA_Init+0x38>)
 8000c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_DMA_Init+0x38>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	639a      	str	r2, [r3, #56]	; 0x38
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_DMA_Init+0x38>)
 8000c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2009      	movs	r0, #9
 8000c9c:	f002 fbd6 	bl	800344c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ca0:	2009      	movs	r0, #9
 8000ca2:	f002 fbe8 	bl	8003476 <HAL_NVIC_EnableIRQ>

}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	003b      	movs	r3, r7
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2318      	movs	r3, #24
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f008 fe0c 	bl	80098e0 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff fc0f 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000cce:	2004      	movs	r0, #4
 8000cd0:	f7ff fc0c 	bl	80004ec <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fc09 	bl	80004ec <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(MEM_HOLD_GPIO_Port, MEM_HOLD_Pin);
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4a92      	ldr	r2, [pc, #584]	; (8000f28 <MX_GPIO_Init+0x274>)
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	f7ff fbe0 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_WP_GPIO_Port, MEM_WP_Pin);
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	01db      	lsls	r3, r3, #7
 8000cec:	4a8f      	ldr	r2, [pc, #572]	; (8000f2c <MX_GPIO_Init+0x278>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f7ff fbd9 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(MEM_CS_GPIO_Port, MEM_CS_Pin);
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	4a8c      	ldr	r2, [pc, #560]	; (8000f2c <MX_GPIO_Init+0x278>)
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	0010      	movs	r0, r2
 8000d00:	f7ff fbd2 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_CS_GPIO_Port, DISP_CS_Pin);
 8000d04:	23a0      	movs	r3, #160	; 0xa0
 8000d06:	05db      	lsls	r3, r3, #23
 8000d08:	2140      	movs	r1, #64	; 0x40
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fbcc 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(DISP_D_C_GPIO_Port, DISP_D_C_Pin);
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	2180      	movs	r1, #128	; 0x80
 8000d16:	0018      	movs	r0, r3
 8000d18:	f7ff fbc6 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(BF_GPIO_Port, BF_Pin);
 8000d1c:	4b83      	ldr	r3, [pc, #524]	; (8000f2c <MX_GPIO_Init+0x278>)
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff fbc1 	bl	80004a8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MEM_HOLD_Pin;
 8000d26:	003b      	movs	r3, r7
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d2e:	003b      	movs	r3, r7
 8000d30:	2201      	movs	r2, #1
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d34:	003b      	movs	r3, r7
 8000d36:	2203      	movs	r2, #3
 8000d38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3a:	003b      	movs	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d40:	003b      	movs	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_HOLD_GPIO_Port, &GPIO_InitStruct);
 8000d46:	003b      	movs	r3, r7
 8000d48:	4a77      	ldr	r2, [pc, #476]	; (8000f28 <MX_GPIO_Init+0x274>)
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	f008 fa49 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_WP_Pin;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	01d2      	lsls	r2, r2, #7
 8000d58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d60:	003b      	movs	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d66:	003b      	movs	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d6c:	003b      	movs	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_WP_GPIO_Port, &GPIO_InitStruct);
 8000d72:	003b      	movs	r3, r7
 8000d74:	4a6d      	ldr	r2, [pc, #436]	; (8000f2c <MX_GPIO_Init+0x278>)
 8000d76:	0019      	movs	r1, r3
 8000d78:	0010      	movs	r0, r2
 8000d7a:	f008 fa33 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MEM_CS_Pin;
 8000d7e:	003b      	movs	r3, r7
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	0212      	lsls	r2, r2, #8
 8000d84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d8c:	003b      	movs	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d92:	003b      	movs	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d98:	003b      	movs	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MEM_CS_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	003b      	movs	r3, r7
 8000da0:	4a62      	ldr	r2, [pc, #392]	; (8000f2c <MX_GPIO_Init+0x278>)
 8000da2:	0019      	movs	r1, r3
 8000da4:	0010      	movs	r0, r2
 8000da6:	f008 fa1d 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_1_Pin;
 8000daa:	003b      	movs	r3, r7
 8000dac:	2201      	movs	r2, #1
 8000dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000db0:	003b      	movs	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_1_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	003a      	movs	r2, r7
 8000dbe:	23a0      	movs	r3, #160	; 0xa0
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f008 fa0d 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_2_Pin;
 8000dca:	003b      	movs	r3, r7
 8000dcc:	2202      	movs	r2, #2
 8000dce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2201      	movs	r2, #1
 8000dda:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_2_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	003a      	movs	r2, r7
 8000dde:	23a0      	movs	r3, #160	; 0xa0
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	0011      	movs	r1, r2
 8000de4:	0018      	movs	r0, r3
 8000de6:	f008 f9fd 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KEY_3_Pin;
 8000dea:	003b      	movs	r3, r7
 8000dec:	2210      	movs	r2, #16
 8000dee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2201      	movs	r2, #1
 8000dfa:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(KEY_3_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	003a      	movs	r2, r7
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	05db      	lsls	r3, r3, #23
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f008 f9ed 	bl	80091e4 <LL_GPIO_Init>
  /**/
  	  GPIO_InitStruct.Pin = KEY_4_Pin;
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0192      	lsls	r2, r2, #6
 8000e10:	601a      	str	r2, [r3, #0]
  	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e12:	003b      	movs	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  	  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e18:	003b      	movs	r3, r7
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	611a      	str	r2, [r3, #16]
  	  LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	003a      	movs	r2, r7
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f008 f9dc 	bl	80091e4 <LL_GPIO_Init>
  	  /**/
  	    GPIO_InitStruct.Pin = KEY_5_Pin;
 8000e2c:	003b      	movs	r3, r7
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	01d2      	lsls	r2, r2, #7
 8000e32:	601a      	str	r2, [r3, #0]
  	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	611a      	str	r2, [r3, #16]
  	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
 8000e40:	003a      	movs	r2, r7
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f008 f9cb 	bl	80091e4 <LL_GPIO_Init>
  /**/
  GPIO_InitStruct.Pin = DISP_CS_Pin;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2240      	movs	r2, #64	; 0x40
 8000e52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2201      	movs	r2, #1
 8000e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e60:	003b      	movs	r3, r7
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e66:	003b      	movs	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_CS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	003a      	movs	r2, r7
 8000e6e:	23a0      	movs	r3, #160	; 0xa0
 8000e70:	05db      	lsls	r3, r3, #23
 8000e72:	0011      	movs	r1, r2
 8000e74:	0018      	movs	r0, r3
 8000e76:	f008 f9b5 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DISP_D_C_Pin;
 8000e7a:	003b      	movs	r3, r7
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e80:	003b      	movs	r3, r7
 8000e82:	2201      	movs	r2, #1
 8000e84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	003b      	movs	r3, r7
 8000e88:	2203      	movs	r2, #3
 8000e8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DISP_D_C_GPIO_Port, &GPIO_InitStruct);
 8000e98:	003a      	movs	r2, r7
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	0011      	movs	r1, r2
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f008 f99f 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BF_Pin;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2240      	movs	r2, #64	; 0x40
 8000eaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eac:	003b      	movs	r3, r7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb8:	003b      	movs	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ebe:	003b      	movs	r3, r7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BF_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <MX_GPIO_Init+0x278>)
 8000ec8:	0019      	movs	r1, r3
 8000eca:	0010      	movs	r0, r2
 8000ecc:	f008 f98a 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT1_Pin;
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT1_GPIO_Port, &GPIO_InitStruct);
 8000ee4:	003a      	movs	r2, r7
 8000ee6:	23a0      	movs	r3, #160	; 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	0011      	movs	r1, r2
 8000eec:	0018      	movs	r0, r3
 8000eee:	f008 f979 	bl	80091e4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ACCEL_INT2_Pin;
 8000ef2:	003b      	movs	r3, r7
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	0152      	lsls	r2, r2, #5
 8000ef8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000efa:	003b      	movs	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f00:	003b      	movs	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ACCEL_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f06:	003a      	movs	r2, r7
 8000f08:	23a0      	movs	r3, #160	; 0xa0
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f008 f968 	bl	80091e4 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_EnableFastModePlus(LL_SYSCFG_I2C_FASTMODEPLUS_PB9);
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	031b      	lsls	r3, r3, #12
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fab5 	bl	8000488 <LL_SYSCFG_EnableFastModePlus>

}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b006      	add	sp, #24
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	50000400 	.word	0x50000400
 8000f2c:	50000800 	.word	0x50000800

08000f30 <USART2_RX_Callback>:
//	    GPIO_InitStruct.Pin = KEY_5_Pin;
//	    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
//	    GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
//	    LL_GPIO_Init(KEY_5_GPIO_Port, &GPIO_InitStruct);
void  USART2_RX_Callback(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  dt1 = LL_USART_ReceiveData9(USART2);// LL implementaion of 1 byte receive
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <USART2_RX_Callback+0x60>)
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff fa98 	bl	800046c <LL_USART_ReceiveData9>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	001a      	movs	r2, r3
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <USART2_RX_Callback+0x64>)
 8000f42:	801a      	strh	r2, [r3, #0]
	dt1 = (uint16_t)(USART2->RDR & 0x01FF);//CMSIS implementaion of 1 byte receive
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <USART2_RX_Callback+0x60>)
 8000f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0ddb      	lsrs	r3, r3, #23
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <USART2_RX_Callback+0x64>)
 8000f52:	801a      	strh	r2, [r3, #0]
  ByteReceived=1;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <USART2_RX_Callback+0x68>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
  if(dt1>0xFF){
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <USART2_RX_Callback+0x64>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d90a      	bls.n	8000f78 <USART2_RX_Callback+0x48>
	  cmd[0]=dt1;
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <USART2_RX_Callback+0x64>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <USART2_RX_Callback+0x6c>)
 8000f6a:	701a      	strb	r2, [r3, #0]
	  ind = 0;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <USART2_RX_Callback+0x70>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	801a      	strh	r2, [r3, #0]
	  firstByteReceived=1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <USART2_RX_Callback+0x74>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
//  while (!LL_USART_IsActiveFlag_TXE(USART2)) {}
//  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
  }
//  cmdReceive();
  if(firstByteReceived==1){
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <USART2_RX_Callback+0x74>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d104      	bne.n	8000f8a <USART2_RX_Callback+0x5a>
	  cmdReceive(dt1);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <USART2_RX_Callback+0x64>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f000 f80f 	bl	8000fa8 <cmdReceive>
  }
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40004400 	.word	0x40004400
 8000f94:	2000349c 	.word	0x2000349c
 8000f98:	20003160 	.word	0x20003160
 8000f9c:	200034a4 	.word	0x200034a4
 8000fa0:	20003162 	.word	0x20003162
 8000fa4:	20003161 	.word	0x20003161

08000fa8 <cmdReceive>:
	void cmdReceive (uint16_t dt1)
	{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	801a      	strh	r2, [r3, #0]
//	  uint8_t inputCS=0;
	  uint8_t i=0;
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	  while (!ByteReceived) {}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <cmdReceive+0xc4>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0fb      	beq.n	8000fbe <cmdReceive+0x16>
	  ByteReceived=0;
 8000fc6:	4b29      	ldr	r3, [pc, #164]	; (800106c <cmdReceive+0xc4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	  cmd[ind] = dt1;
 8000fcc:	4b28      	ldr	r3, [pc, #160]	; (8001070 <cmdReceive+0xc8>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	b2d9      	uxtb	r1, r3
 8000fd8:	4b26      	ldr	r3, [pc, #152]	; (8001074 <cmdReceive+0xcc>)
 8000fda:	5499      	strb	r1, [r3, r2]
	  ind++;
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <cmdReceive+0xc8>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <cmdReceive+0xc8>)
 8000fe6:	801a      	strh	r2, [r3, #0]
	  if(ind>=1){
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <cmdReceive+0xc8>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d033      	beq.n	8001058 <cmdReceive+0xb0>
//		  LL_USART_TransmitData9(USART2,(uint16_t*)dt1);
		  if(ind>cmd[1]+1){
 8000ff0:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <cmdReceive+0xc8>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <cmdReceive+0xcc>)
 8000ff8:	785b      	ldrb	r3, [r3, #1]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dd2b      	ble.n	8001058 <cmdReceive+0xb0>
//			  LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 for(i=0;i<(cmd[1]+2);i++){
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e00f      	b.n	800102a <cmdReceive+0x82>
				 inputCS+=cmd[i];
 800100a:	210f      	movs	r1, #15
 800100c:	187b      	adds	r3, r7, r1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <cmdReceive+0xcc>)
 8001012:	5cd2      	ldrb	r2, [r2, r3]
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <cmdReceive+0xd0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	18d3      	adds	r3, r2, r3
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <cmdReceive+0xd0>)
 800101e:	701a      	strb	r2, [r3, #0]
			 for(i=0;i<(cmd[1]+2);i++){
 8001020:	187b      	adds	r3, r7, r1
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	187b      	adds	r3, r7, r1
 8001026:	3201      	adds	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <cmdReceive+0xcc>)
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	210f      	movs	r1, #15
 8001032:	187b      	adds	r3, r7, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	dae7      	bge.n	800100a <cmdReceive+0x62>
			 }
			 if((inputCS==0)&&(i==cmd[1]+2)){
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <cmdReceive+0xd0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10a      	bne.n	8001058 <cmdReceive+0xb0>
 8001042:	187b      	adds	r3, r7, r1
 8001044:	781a      	ldrb	r2, [r3, #0]
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <cmdReceive+0xcc>)
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	3302      	adds	r3, #2
 800104c:	429a      	cmp	r2, r3
 800104e:	d103      	bne.n	8001058 <cmdReceive+0xb0>
//			 	LL_USART_TransmitData9(USART2,(uint16_t*)cmd[2]);
			 	answer2CPU(cmd);
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <cmdReceive+0xcc>)
 8001052:	0018      	movs	r0, r3
 8001054:	f000 fa2e 	bl	80014b4 <answer2CPU>
			 }
		  }
	  }
//	  ind = 0;
	  USART2->ICR|=USART_ICR_ORECF;
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <cmdReceive+0xd4>)
 800105a:	6a1a      	ldr	r2, [r3, #32]
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <cmdReceive+0xd4>)
 800105e:	2108      	movs	r1, #8
 8001060:	430a      	orrs	r2, r1
 8001062:	621a      	str	r2, [r3, #32]
	}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b004      	add	sp, #16
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20003160 	.word	0x20003160
 8001070:	20003162 	.word	0x20003162
 8001074:	200034a4 	.word	0x200034a4
 8001078:	20003164 	.word	0x20003164
 800107c:	40004400 	.word	0x40004400

08001080 <USART_AS_SPI_sendCMD>:
	void USART_AS_SPI_sendCMD(uint8_t byte) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x55) << 1 | (byte & 0xAA) >> 1;
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b25b      	sxtb	r3, r3
 8001094:	2255      	movs	r2, #85	; 0x55
 8001096:	4393      	bics	r3, r2
 8001098:	b25a      	sxtb	r2, r3
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	105b      	asrs	r3, r3, #1
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	2155      	movs	r1, #85	; 0x55
 80010a4:	400b      	ands	r3, r1
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x33) << 2 | (byte & 0xCC) >> 2;
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	2233      	movs	r2, #51	; 0x33
 80010bc:	4393      	bics	r3, r2
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	109b      	asrs	r3, r3, #2
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	2133      	movs	r1, #51	; 0x33
 80010ca:	400b      	ands	r3, r1
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	701a      	strb	r2, [r3, #0]
			byte = (byte & 0x0F) << 4 | (byte & 0xF0) >> 4;
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	b25a      	sxtb	r2, r3
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	701a      	strb	r2, [r3, #0]
	//		GPIOA->ODR &= ~(1 << 6); //reset cs
	//		GPIOA->ODR &= ~(1 << 7); // reset d/c
			HAL_USART_Transmit(&husart3, (uint8_t*) &byte, 1, 10);
 80010f4:	1df9      	adds	r1, r7, #7
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <USART_AS_SPI_sendCMD+0x88>)
 80010f8:	230a      	movs	r3, #10
 80010fa:	2201      	movs	r2, #1
 80010fc:	f007 f9d8 	bl	80084b0 <HAL_USART_Transmit>
//			while(!(USART3->ISR & USART_ISR_TXE)){};
//							USART3->TDR = (uint8_t*)&byte;
	//		GPIOA->ODR |= 1 << 6; //set cs
		}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200032bc 	.word	0x200032bc

0800110c <weoInit>:
//		while(!(USART3->ISR & USART_ISR_TXE)){};
//						USART3->TDR = byte;
//		GPIOA->ODR |= 1 << 6; //set cs

	}
	void weoInit(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
		HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f001 fe55 	bl	8002dc0 <HAL_Delay>
		HAL_Delay(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f001 fe52 	bl	8002dc0 <HAL_Delay>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800111c:	4b25      	ldr	r3, [pc, #148]	; (80011b4 <weoInit+0xa8>)
 800111e:	2100      	movs	r1, #0
 8001120:	0018      	movs	r0, r3
 8001122:	f006 f911 	bl	8007348 <HAL_TIM_PWM_Start>
		HAL_Delay(1);
 8001126:	2001      	movs	r0, #1
 8001128:	f001 fe4a 	bl	8002dc0 <HAL_Delay>
		GPIOA->ODR &= ~(1 << 6);	//reset cs
 800112c:	23a0      	movs	r3, #160	; 0xa0
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	23a0      	movs	r3, #160	; 0xa0
 8001134:	05db      	lsls	r3, r3, #23
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	438a      	bics	r2, r1
 800113a:	615a      	str	r2, [r3, #20]
		GPIOA->ODR &= ~(1 << 7);	// reset dc
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	23a0      	movs	r3, #160	; 0xa0
 8001144:	05db      	lsls	r3, r3, #23
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	438a      	bics	r2, r1
 800114a:	615a      	str	r2, [r3, #20]
		USART_AS_SPI_sendCMD(0xAF);
 800114c:	20af      	movs	r0, #175	; 0xaf
 800114e:	f7ff ff97 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA0);	//Set Re-map
 8001152:	20a0      	movs	r0, #160	; 0xa0
 8001154:	f7ff ff94 	bl	8001080 <USART_AS_SPI_sendCMD>
//		USART_AS_SPI_sendCMD(0x54);
//		USART_AS_SPI_sendCMD(0b00010100);
		USART_AS_SPI_sendCMD(0x51); //	0x51 is a proper remap!
 8001158:	2051      	movs	r0, #81	; 0x51
 800115a:	f7ff ff91 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x81);	//Contrast Level
 800115e:	2081      	movs	r0, #129	; 0x81
 8001160:	f7ff ff8e 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xFF);
 8001164:	20ff      	movs	r0, #255	; 0xff
 8001166:	f7ff ff8b 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA1);	//Set Display Start Line
 800116a:	20a1      	movs	r0, #161	; 0xa1
 800116c:	f7ff ff88 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff ff85 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA2);	//Set Display Offset
 8001176:	20a2      	movs	r0, #162	; 0xa2
 8001178:	f7ff ff82 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff7f 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0xA8);  // Select Multiplex Ratio
 8001182:	20a8      	movs	r0, #168	; 0xa8
 8001184:	f7ff ff7c 	bl	8001080 <USART_AS_SPI_sendCMD>
		USART_AS_SPI_sendCMD(0x7F); // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001188:	207f      	movs	r0, #127	; 0x7f
 800118a:	f7ff ff79 	bl	8001080 <USART_AS_SPI_sendCMD>
		GPIOA->ODR |= 1 << 7;	//set dc
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	23a0      	movs	r3, #160	; 0xa0
 8001196:	05db      	lsls	r3, r3, #23
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	430a      	orrs	r2, r1
 800119c:	615a      	str	r2, [r3, #20]
		GPIOA->ODR |= 1 << 6;	//set cs
 800119e:	23a0      	movs	r3, #160	; 0xa0
 80011a0:	05db      	lsls	r3, r3, #23
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	23a0      	movs	r3, #160	; 0xa0
 80011a6:	05db      	lsls	r3, r3, #23
 80011a8:	2140      	movs	r1, #64	; 0x40
 80011aa:	430a      	orrs	r2, r1
 80011ac:	615a      	str	r2, [r3, #20]
		//=======================================================================================================
	}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000332c 	.word	0x2000332c

080011b8 <weoClear>:
	void weoClear(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
		uint16_t i = 0;
 80011be:	1dbb      	adds	r3, r7, #6
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]

					GPIOA->ODR &= ~(1 << 6);	//reset cs
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	05db      	lsls	r3, r3, #23
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	05db      	lsls	r3, r3, #23
 80011ce:	2140      	movs	r1, #64	; 0x40
 80011d0:	438a      	bics	r2, r1
 80011d2:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 7);	// reset dc
 80011d4:	23a0      	movs	r3, #160	; 0xa0
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	23a0      	movs	r3, #160	; 0xa0
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	438a      	bics	r2, r1
 80011e2:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 80011e4:	2075      	movs	r0, #117	; 0x75
 80011e6:	f7ff ff4b 	bl	8001080 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x00);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f7ff ff48 	bl	8001080 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x7F);
 80011f0:	207f      	movs	r0, #127	; 0x7f
 80011f2:	f7ff ff45 	bl	8001080 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 80011f6:	2015      	movs	r0, #21
 80011f8:	f7ff ff42 	bl	8001080 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x00);
 80011fc:	2000      	movs	r0, #0
 80011fe:	f7ff ff3f 	bl	8001080 <USART_AS_SPI_sendCMD>
							USART_AS_SPI_sendCMD(0x7F);
 8001202:	207f      	movs	r0, #127	; 0x7f
 8001204:	f7ff ff3c 	bl	8001080 <USART_AS_SPI_sendCMD>
					GPIOA->ODR |= 1 << 7;	//set dc
 8001208:	23a0      	movs	r3, #160	; 0xa0
 800120a:	05db      	lsls	r3, r3, #23
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	23a0      	movs	r3, #160	; 0xa0
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	430a      	orrs	r2, r1
 8001216:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001218:	23a0      	movs	r3, #160	; 0xa0
 800121a:	05db      	lsls	r3, r3, #23
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	23a0      	movs	r3, #160	; 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	430a      	orrs	r2, r1
 8001226:	615a      	str	r2, [r3, #20]
					GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001228:	23a0      	movs	r3, #160	; 0xa0
 800122a:	05db      	lsls	r3, r3, #23
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	438a      	bics	r2, r1
 8001236:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 7;	// set dc
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	23a0      	movs	r3, #160	; 0xa0
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	2180      	movs	r1, #128	; 0x80
 8001244:	430a      	orrs	r2, r1
 8001246:	615a      	str	r2, [r3, #20]
					for (i = 0; i <= 8192;i++) {	//fullScreen + small reserve
 8001248:	1dbb      	adds	r3, r7, #6
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]
 800124e:	e00d      	b.n	800126c <weoClear+0xb4>
		//				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
						while(!(USART3->ISR & USART_ISR_TXE)){};
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <weoClear+0xe8>)
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	2280      	movs	r2, #128	; 0x80
 8001258:	4013      	ands	r3, r2
 800125a:	d0fa      	beq.n	8001252 <weoClear+0x9a>
						USART3->TDR = 0x00;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <weoClear+0xe8>)
 800125e:	2200      	movs	r2, #0
 8001260:	629a      	str	r2, [r3, #40]	; 0x28
					for (i = 0; i <= 8192;i++) {	//fullScreen + small reserve
 8001262:	1dbb      	adds	r3, r7, #6
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	1dbb      	adds	r3, r7, #6
 8001268:	3201      	adds	r2, #1
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	881a      	ldrh	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	429a      	cmp	r2, r3
 8001276:	d9eb      	bls.n	8001250 <weoClear+0x98>
					}
					GPIOA->ODR &= ~(1 << 7);	//reset dc
 8001278:	23a0      	movs	r3, #160	; 0xa0
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	695a      	ldr	r2, [r3, #20]
 800127e:	23a0      	movs	r3, #160	; 0xa0
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	438a      	bics	r2, r1
 8001286:	615a      	str	r2, [r3, #20]
					GPIOA->ODR |= 1 << 6;	//set cs
 8001288:	23a0      	movs	r3, #160	; 0xa0
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	430a      	orrs	r2, r1
 8001296:	615a      	str	r2, [r3, #20]
	}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004800 	.word	0x40004800

080012a4 <weoDrawRectangleFilled>:
		}
	}
//========================================================================================================================
	void weoDrawRectangleFilled(unsigned char start_x, unsigned char start_y,
				unsigned char end_x, unsigned char end_y, unsigned char color,
				uint8_t MEM_Buffer[]) {
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0005      	movs	r5, r0
 80012ac:	000c      	movs	r4, r1
 80012ae:	0010      	movs	r0, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	1c2a      	adds	r2, r5, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	1c22      	adds	r2, r4, #0
 80012bc:	701a      	strb	r2, [r3, #0]
 80012be:	1d7b      	adds	r3, r7, #5
 80012c0:	1c02      	adds	r2, r0, #0
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	1c0a      	adds	r2, r1, #0
 80012c8:	701a      	strb	r2, [r3, #0]



			uint16_t i = 0;
 80012ca:	240e      	movs	r4, #14
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	2200      	movs	r2, #0
 80012d0:	801a      	strh	r2, [r3, #0]
			uint8_t start_x_New,start_y_New,end_x_New,end_y_New;
			if (start_x > OLED_DIM_WIDTH || start_y > OLED_DIM_HEIGHT
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25b      	sxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da00      	bge.n	80012de <weoDrawRectangleFilled+0x3a>
 80012dc:	e0e1      	b.n	80014a2 <weoDrawRectangleFilled+0x1fe>
 80012de:	1dbb      	adds	r3, r7, #6
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da00      	bge.n	80012ea <weoDrawRectangleFilled+0x46>
 80012e8:	e0db      	b.n	80014a2 <weoDrawRectangleFilled+0x1fe>
					|| end_x > OLED_DIM_WIDTH || end_y > OLED_DIM_HEIGHT) {
 80012ea:	1d7b      	adds	r3, r7, #5
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da00      	bge.n	80012f6 <weoDrawRectangleFilled+0x52>
 80012f4:	e0d5      	b.n	80014a2 <weoDrawRectangleFilled+0x1fe>
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da00      	bge.n	8001302 <weoDrawRectangleFilled+0x5e>
 8001300:	e0cf      	b.n	80014a2 <weoDrawRectangleFilled+0x1fe>
				return;
			}

			start_x_New=start_x;
 8001302:	250d      	movs	r5, #13
 8001304:	197b      	adds	r3, r7, r5
 8001306:	1dfa      	adds	r2, r7, #7
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	701a      	strb	r2, [r3, #0]
			start_y_New=0x7F-end_y;
 800130c:	260c      	movs	r6, #12
 800130e:	19bb      	adds	r3, r7, r6
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	217f      	movs	r1, #127	; 0x7f
 8001316:	1a8a      	subs	r2, r1, r2
 8001318:	701a      	strb	r2, [r3, #0]
			end_x_New=end_x;
 800131a:	230b      	movs	r3, #11
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	1d7a      	adds	r2, r7, #5
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	701a      	strb	r2, [r3, #0]
			end_y_New=0x7F-start_y;
 8001324:	220a      	movs	r2, #10
 8001326:	18bb      	adds	r3, r7, r2
 8001328:	1dba      	adds	r2, r7, #6
 800132a:	7812      	ldrb	r2, [r2, #0]
 800132c:	217f      	movs	r1, #127	; 0x7f
 800132e:	1a8a      	subs	r2, r1, r2
 8001330:	701a      	strb	r2, [r3, #0]
//		MEM_Buffer[i] = (MEM_Buffer[i] & 0x33) << 2
//				| (MEM_Buffer[i] & 0xCC) >> 2;
//		MEM_Buffer[i] = (MEM_Buffer[i] & 0x0F) << 4
//				| (MEM_Buffer[i] & 0xF0) >> 4;
//			}
			GPIOA->ODR &= ~(1 << 6);	//reset cs
 8001332:	23a0      	movs	r3, #160	; 0xa0
 8001334:	05db      	lsls	r3, r3, #23
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	2140      	movs	r1, #64	; 0x40
 800133e:	438a      	bics	r2, r1
 8001340:	615a      	str	r2, [r3, #20]
			GPIOA->ODR &= ~(1 << 7);	// reset dc
 8001342:	23a0      	movs	r3, #160	; 0xa0
 8001344:	05db      	lsls	r3, r3, #23
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	23a0      	movs	r3, #160	; 0xa0
 800134a:	05db      	lsls	r3, r3, #23
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	438a      	bics	r2, r1
 8001350:	615a      	str	r2, [r3, #20]
					USART_AS_SPI_sendCMD(SET_DISPLAY_ROW_ADD);
 8001352:	2075      	movs	r0, #117	; 0x75
 8001354:	f7ff fe94 	bl	8001080 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_x_New/1);
 8001358:	197b      	adds	r3, r7, r5
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	0018      	movs	r0, r3
 800135e:	f7ff fe8f 	bl	8001080 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_x_New/1);
 8001362:	230b      	movs	r3, #11
 8001364:	18fb      	adds	r3, r7, r3
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff fe89 	bl	8001080 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(SET_DISPLAY_COL_ADD);
 800136e:	2015      	movs	r0, #21
 8001370:	f7ff fe86 	bl	8001080 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(start_y_New/2);
 8001374:	19bb      	adds	r3, r7, r6
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	085b      	lsrs	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff fe7f 	bl	8001080 <USART_AS_SPI_sendCMD>
					USART_AS_SPI_sendCMD(end_y_New/2);
 8001382:	220a      	movs	r2, #10
 8001384:	18bb      	adds	r3, r7, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff fe77 	bl	8001080 <USART_AS_SPI_sendCMD>
			GPIOA->ODR |= 1 << 7;	//set dc
 8001392:	23a0      	movs	r3, #160	; 0xa0
 8001394:	05db      	lsls	r3, r3, #23
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	23a0      	movs	r3, #160	; 0xa0
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	430a      	orrs	r2, r1
 80013a0:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 80013a2:	23a0      	movs	r3, #160	; 0xa0
 80013a4:	05db      	lsls	r3, r3, #23
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	23a0      	movs	r3, #160	; 0xa0
 80013aa:	05db      	lsls	r3, r3, #23
 80013ac:	2140      	movs	r1, #64	; 0x40
 80013ae:	430a      	orrs	r2, r1
 80013b0:	615a      	str	r2, [r3, #20]

			USART3->CR1 &= ~(USART_CR1_UE);
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <weoDrawRectangleFilled+0x208>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <weoDrawRectangleFilled+0x208>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	438a      	bics	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
			USART3->CR2 |= USART_CR2_MSBFIRST;
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <weoDrawRectangleFilled+0x208>)
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <weoDrawRectangleFilled+0x208>)
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	0309      	lsls	r1, r1, #12
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]
			USART3->CR1 |= USART_CR1_UE;
 80013cc:	4b37      	ldr	r3, [pc, #220]	; (80014ac <weoDrawRectangleFilled+0x208>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <weoDrawRectangleFilled+0x208>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]

			GPIOA->ODR &= ~(1 << 6);	//reset cs
 80013d8:	23a0      	movs	r3, #160	; 0xa0
 80013da:	05db      	lsls	r3, r3, #23
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	23a0      	movs	r3, #160	; 0xa0
 80013e0:	05db      	lsls	r3, r3, #23
 80013e2:	2140      	movs	r1, #64	; 0x40
 80013e4:	438a      	bics	r2, r1
 80013e6:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 7;	// set dc
 80013e8:	23a0      	movs	r3, #160	; 0xa0
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	23a0      	movs	r3, #160	; 0xa0
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	430a      	orrs	r2, r1
 80013f6:	615a      	str	r2, [r3, #20]

			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2200      	movs	r2, #0
 80013fc:	801a      	strh	r2, [r3, #0]
 80013fe:	e012      	b.n	8001426 <weoDrawRectangleFilled+0x182>
					i++) {
//				HAL_USART_Transmit(&husart3, (uint8_t*) &MEM_Buffer[i], 1, 1);
				while(!(USART3->ISR & USART_ISR_TXE)){};
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <weoDrawRectangleFilled+0x208>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	4013      	ands	r3, r2
 800140a:	d0fa      	beq.n	8001402 <weoDrawRectangleFilled+0x15e>
				USART3->TDR = MEM_Buffer[i];
 800140c:	210e      	movs	r1, #14
 800140e:	187b      	adds	r3, r7, r1
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001414:	18d3      	adds	r3, r2, r3
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <weoDrawRectangleFilled+0x208>)
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
					i++) {
 800141c:	187b      	adds	r3, r7, r1
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	187b      	adds	r3, r7, r1
 8001422:	3201      	adds	r2, #1
 8001424:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < ((end_x_New/1 - start_x_New/1 + 1) * (end_y_New/2 - start_y_New /2 + 1));
 8001426:	230e      	movs	r3, #14
 8001428:	18fb      	adds	r3, r7, r3
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	230b      	movs	r3, #11
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	7819      	ldrb	r1, [r3, #0]
 8001432:	230d      	movs	r3, #13
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	1acb      	subs	r3, r1, r3
 800143a:	3301      	adds	r3, #1
 800143c:	210a      	movs	r1, #10
 800143e:	1879      	adds	r1, r7, r1
 8001440:	7809      	ldrb	r1, [r1, #0]
 8001442:	0849      	lsrs	r1, r1, #1
 8001444:	b2c9      	uxtb	r1, r1
 8001446:	0008      	movs	r0, r1
 8001448:	210c      	movs	r1, #12
 800144a:	1879      	adds	r1, r7, r1
 800144c:	7809      	ldrb	r1, [r1, #0]
 800144e:	0849      	lsrs	r1, r1, #1
 8001450:	b2c9      	uxtb	r1, r1
 8001452:	1a41      	subs	r1, r0, r1
 8001454:	3101      	adds	r1, #1
 8001456:	434b      	muls	r3, r1
 8001458:	429a      	cmp	r2, r3
 800145a:	dbd1      	blt.n	8001400 <weoDrawRectangleFilled+0x15c>
			}
			GPIOA->ODR &= ~(1 << 7);	//reset dc
 800145c:	23a0      	movs	r3, #160	; 0xa0
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	438a      	bics	r2, r1
 800146a:	615a      	str	r2, [r3, #20]
			GPIOA->ODR |= 1 << 6;	//set cs
 800146c:	23a0      	movs	r3, #160	; 0xa0
 800146e:	05db      	lsls	r3, r3, #23
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	23a0      	movs	r3, #160	; 0xa0
 8001474:	05db      	lsls	r3, r3, #23
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	430a      	orrs	r2, r1
 800147a:	615a      	str	r2, [r3, #20]

			USART3->CR1 &= ~(USART_CR1_UE);
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <weoDrawRectangleFilled+0x208>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <weoDrawRectangleFilled+0x208>)
 8001482:	2101      	movs	r1, #1
 8001484:	438a      	bics	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
			USART3->CR2 &= ~(USART_CR2_MSBFIRST);
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <weoDrawRectangleFilled+0x208>)
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <weoDrawRectangleFilled+0x208>)
 800148e:	4908      	ldr	r1, [pc, #32]	; (80014b0 <weoDrawRectangleFilled+0x20c>)
 8001490:	400a      	ands	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
			USART3->CR1 |= USART_CR1_UE;
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <weoDrawRectangleFilled+0x208>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <weoDrawRectangleFilled+0x208>)
 800149a:	2101      	movs	r1, #1
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e000      	b.n	80014a4 <weoDrawRectangleFilled+0x200>
				return;
 80014a2:	46c0      	nop			; (mov r8, r8)
		}
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b005      	add	sp, #20
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40004800 	.word	0x40004800
 80014b0:	fff7ffff 	.word	0xfff7ffff

080014b4 <answer2CPU>:
		WriteReg_I2C_SOUND(0x3F, 0x90);	//DAC powered up, Soft step 1 per Fs. (P0, R63, D7=1, D5-D4=01, D3-D2=00, D1-D0=00)
		WriteReg_I2C_SOUND(0x41, 0x00);	//DAC digital gain 0dB (P0, R65, D7-D0=00000000)
		WriteReg_I2C_SOUND(0x40, 0x04);	//DAC volume not muted. (P0, R64, D3=0, D2=1)
	}
//=============================================================================================
	uint8_t answer2CPU(uint8_t cmd[]) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
		uint8_t keyboard = 0xFF;
 80014bc:	210f      	movs	r1, #15
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	22ff      	movs	r2, #255	; 0xff
 80014c2:	701a      	strb	r2, [r3, #0]
//		uint16_t ans[10];
		uint8_t i;
		uint8_t myCS = 0;					//   COMMON PART FOR EVERY COMMAND
 80014c4:	230d      	movs	r3, #13
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
		uint8_t myLength;
		uint16_t ind = 0;
 80014cc:	230a      	movs	r3, #10
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	2200      	movs	r2, #0
 80014d2:	801a      	strh	r2, [r3, #0]

		cmd2Execute=0;
 80014d4:	4bc7      	ldr	r3, [pc, #796]	; (80017f4 <answer2CPU+0x340>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
		ans[0] = cmd[0]|0x80;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	4252      	negs	r2, r2
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4bc3      	ldr	r3, [pc, #780]	; (80017f8 <answer2CPU+0x344>)
 80014ea:	801a      	strh	r2, [r3, #0]
//==================================================================================================
			if ((cmd[0] >= 0x10)&&(cmd[0] < 0x16)) { //answer is keyboard + stuff information                  0003
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d800      	bhi.n	80014f6 <answer2CPU+0x42>
 80014f4:	e14f      	b.n	8001796 <answer2CPU+0x2e2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b15      	cmp	r3, #21
 80014fc:	d900      	bls.n	8001500 <answer2CPU+0x4c>
 80014fe:	e14a      	b.n	8001796 <answer2CPU+0x2e2>
				if ((GPIOA->IDR & (1 << 0)) == 0) {
 8001500:	23a0      	movs	r3, #160	; 0xa0
 8001502:	05db      	lsls	r3, r3, #23
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2201      	movs	r2, #1
 8001508:	4013      	ands	r3, r2
 800150a:	d105      	bne.n	8001518 <answer2CPU+0x64>
					keyboard &= 0b11111110;
 800150c:	187b      	adds	r3, r7, r1
 800150e:	187a      	adds	r2, r7, r1
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	2101      	movs	r1, #1
 8001514:	438a      	bics	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 1)) == 0) {
 8001518:	23a0      	movs	r3, #160	; 0xa0
 800151a:	05db      	lsls	r3, r3, #23
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2202      	movs	r2, #2
 8001520:	4013      	ands	r3, r2
 8001522:	d106      	bne.n	8001532 <answer2CPU+0x7e>
					keyboard &= 0b11111101;
 8001524:	220f      	movs	r2, #15
 8001526:	18bb      	adds	r3, r7, r2
 8001528:	18ba      	adds	r2, r7, r2
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	2102      	movs	r1, #2
 800152e:	438a      	bics	r2, r1
 8001530:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 4)) == 0) {
 8001532:	23a0      	movs	r3, #160	; 0xa0
 8001534:	05db      	lsls	r3, r3, #23
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2210      	movs	r2, #16
 800153a:	4013      	ands	r3, r2
 800153c:	d106      	bne.n	800154c <answer2CPU+0x98>
					keyboard &= 0b11111011;
 800153e:	220f      	movs	r2, #15
 8001540:	18bb      	adds	r3, r7, r2
 8001542:	18ba      	adds	r2, r7, r2
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	2104      	movs	r1, #4
 8001548:	438a      	bics	r2, r1
 800154a:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 13)) == 0) {
 800154c:	23a0      	movs	r3, #160	; 0xa0
 800154e:	05db      	lsls	r3, r3, #23
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	019b      	lsls	r3, r3, #6
 8001556:	4013      	ands	r3, r2
 8001558:	d106      	bne.n	8001568 <answer2CPU+0xb4>
					keyboard &= 0b11110111;
 800155a:	220f      	movs	r2, #15
 800155c:	18bb      	adds	r3, r7, r2
 800155e:	18ba      	adds	r2, r7, r2
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	2108      	movs	r1, #8
 8001564:	438a      	bics	r2, r1
 8001566:	701a      	strb	r2, [r3, #0]
				}
				if ((GPIOA->IDR & (1 << 14)) == 0) {
 8001568:	23a0      	movs	r3, #160	; 0xa0
 800156a:	05db      	lsls	r3, r3, #23
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	01db      	lsls	r3, r3, #7
 8001572:	4013      	ands	r3, r2
 8001574:	d106      	bne.n	8001584 <answer2CPU+0xd0>
					keyboard &= 0b11101111;
 8001576:	220f      	movs	r2, #15
 8001578:	18bb      	adds	r3, r7, r2
 800157a:	18ba      	adds	r2, r7, r2
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	2110      	movs	r1, #16
 8001580:	438a      	bics	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
				}

				keyboard = ~keyboard;
 8001584:	210f      	movs	r1, #15
 8001586:	187b      	adds	r3, r7, r1
 8001588:	187a      	adds	r2, r7, r1
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	43d2      	mvns	r2, r2
 800158e:	701a      	strb	r2, [r3, #0]
//				keyboard&=bf;
				myLength = 0x04;
 8001590:	2009      	movs	r0, #9
 8001592:	183b      	adds	r3, r7, r0
 8001594:	2204      	movs	r2, #4
 8001596:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001598:	183b      	adds	r3, r7, r0
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	3b02      	subs	r3, #2
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b95      	ldr	r3, [pc, #596]	; (80017f8 <answer2CPU+0x344>)
 80015a4:	805a      	strh	r2, [r3, #2]
				ans[2] = keyboard;				//			MANAGEMENT COMMANDS
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	4b92      	ldr	r3, [pc, #584]	; (80017f8 <answer2CPU+0x344>)
 80015ae:	809a      	strh	r2, [r3, #4]

				for (i = 0; i < myLength-1; i++) {
 80015b0:	230e      	movs	r3, #14
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e011      	b.n	80015de <answer2CPU+0x12a>
					myCS = myCS + ans[i];
 80015ba:	200e      	movs	r0, #14
 80015bc:	183b      	adds	r3, r7, r0
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <answer2CPU+0x344>)
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	5ad3      	ldrh	r3, [r2, r3]
 80015c6:	b2d9      	uxtb	r1, r3
 80015c8:	220d      	movs	r2, #13
 80015ca:	18bb      	adds	r3, r7, r2
 80015cc:	18ba      	adds	r2, r7, r2
 80015ce:	7812      	ldrb	r2, [r2, #0]
 80015d0:	188a      	adds	r2, r1, r2
 80015d2:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	183b      	adds	r3, r7, r0
 80015da:	3201      	adds	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
 80015de:	200e      	movs	r0, #14
 80015e0:	183b      	adds	r3, r7, r0
 80015e2:	781a      	ldrb	r2, [r3, #0]
 80015e4:	2309      	movs	r3, #9
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbe4      	blt.n	80015ba <answer2CPU+0x106>
				}
				myCS = 0 - myCS;
 80015f0:	210d      	movs	r1, #13
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	187a      	adds	r2, r7, r1
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4252      	negs	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]
				ans[3] = myCS;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b7d      	ldr	r3, [pc, #500]	; (80017f8 <answer2CPU+0x344>)
 8001604:	80da      	strh	r2, [r3, #6]
				i=0;
 8001606:	183b      	adds	r3, r7, r0
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
//======================================================================================================================================
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	4b7b      	ldr	r3, [pc, #492]	; (80017fc <answer2CPU+0x348>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	4013      	ands	r3, r2
 8001616:	d0fa      	beq.n	800160e <answer2CPU+0x15a>
				USART2->TDR = ans[0]|0x0100;
 8001618:	4b77      	ldr	r3, [pc, #476]	; (80017f8 <answer2CPU+0x344>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	4313      	orrs	r3, r2
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b75      	ldr	r3, [pc, #468]	; (80017fc <answer2CPU+0x348>)
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001628:	230e      	movs	r3, #14
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	e013      	b.n	800165a <answer2CPU+0x1a6>
				  {												//answer2cpu was given
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	4b71      	ldr	r3, [pc, #452]	; (80017fc <answer2CPU+0x348>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	4013      	ands	r3, r2
 800163c:	d0fa      	beq.n	8001634 <answer2CPU+0x180>
				    USART2->TDR = (uint8_t)ans[i];
 800163e:	210e      	movs	r1, #14
 8001640:	187b      	adds	r3, r7, r1
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <answer2CPU+0x344>)
 8001646:	0052      	lsls	r2, r2, #1
 8001648:	5ad3      	ldrh	r3, [r2, r3]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b6b      	ldr	r3, [pc, #428]	; (80017fc <answer2CPU+0x348>)
 800164e:	629a      	str	r2, [r3, #40]	; 0x28
				for(i=1;i<myLength;i++)
 8001650:	187b      	adds	r3, r7, r1
 8001652:	781a      	ldrb	r2, [r3, #0]
 8001654:	187b      	adds	r3, r7, r1
 8001656:	3201      	adds	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	230e      	movs	r3, #14
 800165c:	18fa      	adds	r2, r7, r3
 800165e:	2309      	movs	r3, #9
 8001660:	18fb      	adds	r3, r7, r3
 8001662:	7812      	ldrb	r2, [r2, #0]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3e3      	bcc.n	8001632 <answer2CPU+0x17e>
				  }
//=======================================================================================================================================
				if (cmd[0] == 0x11) {             //Show full screen background;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b11      	cmp	r3, #17
 8001670:	d109      	bne.n	8001686 <answer2CPU+0x1d2>
					picNum = cmd[2];
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	789a      	ldrb	r2, [r3, #2]
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <answer2CPU+0x34c>)
 8001678:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x11;
 800167a:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <answer2CPU+0x340>)
 800167c:	2211      	movs	r2, #17
 800167e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001680:	4b60      	ldr	r3, [pc, #384]	; (8001804 <answer2CPU+0x350>)
 8001682:	2200      	movs	r2, #0
 8001684:	701a      	strb	r2, [r3, #0]
				}
//=======================================================================================================================================
				if (cmd[0] == 0x12) {				//show small image
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b12      	cmp	r3, #18
 800168c:	d115      	bne.n	80016ba <answer2CPU+0x206>
					imX = cmd[2];
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3302      	adds	r3, #2
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	001a      	movs	r2, r3
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <answer2CPU+0x354>)
 8001698:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3303      	adds	r3, #3
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	001a      	movs	r2, r3
 80016a2:	4b5a      	ldr	r3, [pc, #360]	; (800180c <answer2CPU+0x358>)
 80016a4:	601a      	str	r2, [r3, #0]
					picNum=cmd[4];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	791a      	ldrb	r2, [r3, #4]
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <answer2CPU+0x34c>)
 80016ac:	701a      	strb	r2, [r3, #0]
//					showSmallImage(dataASCII[i], ASCII_X, ASCII_Y);
					cmd2Execute=0x12;
 80016ae:	4b51      	ldr	r3, [pc, #324]	; (80017f4 <answer2CPU+0x340>)
 80016b0:	2212      	movs	r2, #18
 80016b2:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <answer2CPU+0x350>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x13) {			//show ASCII code(s)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b13      	cmp	r3, #19
 80016c0:	d134      	bne.n	800172c <answer2CPU+0x278>
					imX = cmd[2];
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3302      	adds	r3, #2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	001a      	movs	r2, r3
 80016ca:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <answer2CPU+0x354>)
 80016cc:	601a      	str	r2, [r3, #0]
					imY = cmd[3];
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3303      	adds	r3, #3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	001a      	movs	r2, r3
 80016d6:	4b4d      	ldr	r3, [pc, #308]	; (800180c <answer2CPU+0x358>)
 80016d8:	601a      	str	r2, [r3, #0]
					strLen = cmd[1] -0x03;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3301      	adds	r3, #1
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <answer2CPU+0x35c>)
 80016e6:	701a      	strb	r2, [r3, #0]
					for (i = 0; i <strLen; i++) {
 80016e8:	230e      	movs	r3, #14
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e00f      	b.n	8001712 <answer2CPU+0x25e>
					dataASCII[i] = cmd[i+4];
 80016f2:	200e      	movs	r0, #14
 80016f4:	183b      	adds	r3, r7, r0
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	18d2      	adds	r2, r2, r3
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	7811      	ldrb	r1, [r2, #0]
 8001704:	4a43      	ldr	r2, [pc, #268]	; (8001814 <answer2CPU+0x360>)
 8001706:	54d1      	strb	r1, [r2, r3]
					for (i = 0; i <strLen; i++) {
 8001708:	183b      	adds	r3, r7, r0
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	183b      	adds	r3, r7, r0
 800170e:	3201      	adds	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <answer2CPU+0x35c>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	220e      	movs	r2, #14
 8001718:	18ba      	adds	r2, r7, r2
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3e8      	bcc.n	80016f2 <answer2CPU+0x23e>
				}
					cmd2Execute=0x13;
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <answer2CPU+0x340>)
 8001722:	2213      	movs	r2, #19
 8001724:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <answer2CPU+0x350>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x14) {			//издать звук
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b14      	cmp	r3, #20
 8001732:	d10c      	bne.n	800174e <answer2CPU+0x29a>
					numSound = cmd[3];
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	78da      	ldrb	r2, [r3, #3]
 8001738:	4b37      	ldr	r3, [pc, #220]	; (8001818 <answer2CPU+0x364>)
 800173a:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x14;
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <answer2CPU+0x340>)
 800173e:	2214      	movs	r2, #20
 8001740:	701a      	strb	r2, [r3, #0]
					cmd[0]=0xFF;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	22ff      	movs	r2, #255	; 0xff
 8001746:	701a      	strb	r2, [r3, #0]
					bf4me=0x00; //reset BF flag for me
 8001748:	4b2e      	ldr	r3, [pc, #184]	; (8001804 <answer2CPU+0x350>)
 800174a:	2200      	movs	r2, #0
 800174c:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x15) {
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b15      	cmp	r3, #21
 8001754:	d10d      	bne.n	8001772 <answer2CPU+0x2be>
					volume = cmd[3];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	78da      	ldrb	r2, [r3, #3]
 800175a:	4b30      	ldr	r3, [pc, #192]	; (800181c <answer2CPU+0x368>)
 800175c:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	791a      	ldrb	r2, [r3, #4]
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <answer2CPU+0x36c>)
 8001764:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x15;
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <answer2CPU+0x340>)
 8001768:	2215      	movs	r2, #21
 800176a:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <answer2CPU+0x350>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
				}
				if (cmd[0] == 0x16) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b16      	cmp	r3, #22
 8001778:	d10d      	bne.n	8001796 <answer2CPU+0x2e2>
					volume = cmd[3];
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	78da      	ldrb	r2, [r3, #3]
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <answer2CPU+0x368>)
 8001780:	701a      	strb	r2, [r3, #0]
					contrast = cmd[4];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	791a      	ldrb	r2, [r3, #4]
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <answer2CPU+0x36c>)
 8001788:	701a      	strb	r2, [r3, #0]
					cmd2Execute=0x16;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <answer2CPU+0x340>)
 800178c:	2216      	movs	r2, #22
 800178e:	701a      	strb	r2, [r3, #0]
//					cmd[0]=0xFF;
					bf4me=0x00; //reset BF flag for me
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <answer2CPU+0x350>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
				}
//				weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, Image);
//				USART2->ICR|=USART_ICR_ORECF;
			}
//==========================================================================================================================
			if (cmd[0] == 0x00) { //request of pcb type
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d000      	beq.n	80017a0 <answer2CPU+0x2ec>
 800179e:	e099      	b.n	80018d4 <answer2CPU+0x420>
				myLength = 0x14; //20 bytes length answer
 80017a0:	2109      	movs	r1, #9
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2214      	movs	r2, #20
 80017a6:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	3b02      	subs	r3, #2
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <answer2CPU+0x344>)
 80017b4:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80017b6:	230e      	movs	r3, #14
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e010      	b.n	80017e2 <answer2CPU+0x32e>
					ans[i + 2] = PCB_type[i];
 80017c0:	200e      	movs	r0, #14
 80017c2:	183b      	adds	r3, r7, r0
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4a17      	ldr	r2, [pc, #92]	; (8001824 <answer2CPU+0x370>)
 80017c8:	5cd1      	ldrb	r1, [r2, r3]
 80017ca:	183b      	adds	r3, r7, r0
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	1c9a      	adds	r2, r3, #2
 80017d0:	b289      	uxth	r1, r1
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <answer2CPU+0x344>)
 80017d4:	0052      	lsls	r2, r2, #1
 80017d6:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 80017d8:	183b      	adds	r3, r7, r0
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	183b      	adds	r3, r7, r0
 80017de:	3201      	adds	r2, #1
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	220e      	movs	r2, #14
 80017e4:	18bb      	adds	r3, r7, r2
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d9e9      	bls.n	80017c0 <answer2CPU+0x30c>
				}
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 80017ec:	18bb      	adds	r3, r7, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e02b      	b.n	800184c <answer2CPU+0x398>
 80017f4:	2000337a 	.word	0x2000337a
 80017f8:	200033bc 	.word	0x200033bc
 80017fc:	40004400 	.word	0x40004400
 8001800:	20003379 	.word	0x20003379
 8001804:	200033d0 	.word	0x200033d0
 8001808:	20003280 	.word	0x20003280
 800180c:	200032b8 	.word	0x200032b8
 8001810:	200033b9 	.word	0x200033b9
 8001814:	20003198 	.word	0x20003198
 8001818:	20003438 	.word	0x20003438
 800181c:	2000327e 	.word	0x2000327e
 8001820:	2000331c 	.word	0x2000331c
 8001824:	20003100 	.word	0x20003100
					myCS = myCS + ans[i];
 8001828:	200e      	movs	r0, #14
 800182a:	183b      	adds	r3, r7, r0
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	4bdb      	ldr	r3, [pc, #876]	; (8001b9c <answer2CPU+0x6e8>)
 8001830:	0052      	lsls	r2, r2, #1
 8001832:	5ad3      	ldrh	r3, [r2, r3]
 8001834:	b2d9      	uxtb	r1, r3
 8001836:	220d      	movs	r2, #13
 8001838:	18bb      	adds	r3, r7, r2
 800183a:	18ba      	adds	r2, r7, r2
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	188a      	adds	r2, r1, r2
 8001840:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {	//			PCB TYPE REQUEST
 8001842:	183b      	adds	r3, r7, r0
 8001844:	781a      	ldrb	r2, [r3, #0]
 8001846:	183b      	adds	r3, r7, r0
 8001848:	3201      	adds	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	230e      	movs	r3, #14
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	2009      	movs	r0, #9
 8001854:	183b      	adds	r3, r7, r0
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	3b01      	subs	r3, #1
 800185a:	429a      	cmp	r2, r3
 800185c:	dbe4      	blt.n	8001828 <answer2CPU+0x374>
				}
				myCS = 0 - myCS;
 800185e:	210d      	movs	r1, #13
 8001860:	187b      	adds	r3, r7, r1
 8001862:	187a      	adds	r2, r7, r1
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	4252      	negs	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 800186a:	183b      	adds	r3, r7, r0
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	1e5a      	subs	r2, r3, #1
 8001870:	187b      	adds	r3, r7, r1
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b299      	uxth	r1, r3
 8001876:	4bc9      	ldr	r3, [pc, #804]	; (8001b9c <answer2CPU+0x6e8>)
 8001878:	0052      	lsls	r2, r2, #1
 800187a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	4bc8      	ldr	r3, [pc, #800]	; (8001ba0 <answer2CPU+0x6ec>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2280      	movs	r2, #128	; 0x80
 8001884:	4013      	ands	r3, r2
 8001886:	d0fa      	beq.n	800187e <answer2CPU+0x3ca>
				USART2->TDR = ans[0]|0x0100;
 8001888:	4bc4      	ldr	r3, [pc, #784]	; (8001b9c <answer2CPU+0x6e8>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	0052      	lsls	r2, r2, #1
 8001890:	4313      	orrs	r3, r2
 8001892:	b29a      	uxth	r2, r3
 8001894:	4bc2      	ldr	r3, [pc, #776]	; (8001ba0 <answer2CPU+0x6ec>)
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 8001898:	e014      	b.n	80018c4 <answer2CPU+0x410>
				  {
				    i++;
 800189a:	210e      	movs	r1, #14
 800189c:	187b      	adds	r3, r7, r1
 800189e:	781a      	ldrb	r2, [r3, #0]
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	3201      	adds	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	4bbd      	ldr	r3, [pc, #756]	; (8001ba0 <answer2CPU+0x6ec>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	4013      	ands	r3, r2
 80018b0:	d0fa      	beq.n	80018a8 <answer2CPU+0x3f4>
				    USART2->TDR = (uint8_t)ans[i];
 80018b2:	230e      	movs	r3, #14
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	4bb8      	ldr	r3, [pc, #736]	; (8001b9c <answer2CPU+0x6e8>)
 80018ba:	0052      	lsls	r2, r2, #1
 80018bc:	5ad3      	ldrh	r3, [r2, r3]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4bb7      	ldr	r3, [pc, #732]	; (8001ba0 <answer2CPU+0x6ec>)
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80018c4:	230e      	movs	r3, #14
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4bb4      	ldr	r3, [pc, #720]	; (8001b9c <answer2CPU+0x6e8>)
 80018cc:	0052      	lsls	r2, r2, #1
 80018ce:	5ad3      	ldrh	r3, [r2, r3]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e2      	bne.n	800189a <answer2CPU+0x3e6>
				  }
//				 cmd2Execute=0x00;
			}
//============================================================================================================================
			if (cmd[0] == 0x01) { //request of pcb revision
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d000      	beq.n	80018de <answer2CPU+0x42a>
 80018dc:	e07f      	b.n	80019de <answer2CPU+0x52a>
				myLength = 0x0B; //19 bytes length answer
 80018de:	2109      	movs	r1, #9
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	220b      	movs	r2, #11
 80018e4:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b02      	subs	r3, #2
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4baa      	ldr	r3, [pc, #680]	; (8001b9c <answer2CPU+0x6e8>)
 80018f2:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80018f4:	230e      	movs	r3, #14
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e010      	b.n	8001920 <answer2CPU+0x46c>
					ans[i + 2] = PCB_rev[i];
 80018fe:	200e      	movs	r0, #14
 8001900:	183b      	adds	r3, r7, r0
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4aa7      	ldr	r2, [pc, #668]	; (8001ba4 <answer2CPU+0x6f0>)
 8001906:	5cd1      	ldrb	r1, [r2, r3]
 8001908:	183b      	adds	r3, r7, r0
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	1c9a      	adds	r2, r3, #2
 800190e:	b289      	uxth	r1, r1
 8001910:	4ba2      	ldr	r3, [pc, #648]	; (8001b9c <answer2CPU+0x6e8>)
 8001912:	0052      	lsls	r2, r2, #1
 8001914:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001916:	183b      	adds	r3, r7, r0
 8001918:	781a      	ldrb	r2, [r3, #0]
 800191a:	183b      	adds	r3, r7, r0
 800191c:	3201      	adds	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
 8001920:	220e      	movs	r2, #14
 8001922:	18bb      	adds	r3, r7, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b10      	cmp	r3, #16
 8001928:	d9e9      	bls.n	80018fe <answer2CPU+0x44a>
				}
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 800192a:	18bb      	adds	r3, r7, r2
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
 8001930:	e011      	b.n	8001956 <answer2CPU+0x4a2>
					myCS = myCS + ans[i];
 8001932:	200e      	movs	r0, #14
 8001934:	183b      	adds	r3, r7, r0
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <answer2CPU+0x6e8>)
 800193a:	0052      	lsls	r2, r2, #1
 800193c:	5ad3      	ldrh	r3, [r2, r3]
 800193e:	b2d9      	uxtb	r1, r3
 8001940:	220d      	movs	r2, #13
 8001942:	18bb      	adds	r3, r7, r2
 8001944:	18ba      	adds	r2, r7, r2
 8001946:	7812      	ldrb	r2, [r2, #0]
 8001948:	188a      	adds	r2, r1, r2
 800194a:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			PCB REVISION REQUEST
 800194c:	183b      	adds	r3, r7, r0
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	183b      	adds	r3, r7, r0
 8001952:	3201      	adds	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	230e      	movs	r3, #14
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	2009      	movs	r0, #9
 800195e:	183b      	adds	r3, r7, r0
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	429a      	cmp	r2, r3
 8001966:	dbe4      	blt.n	8001932 <answer2CPU+0x47e>
				}
				myCS = 0 - myCS;
 8001968:	210d      	movs	r1, #13
 800196a:	187b      	adds	r3, r7, r1
 800196c:	187a      	adds	r2, r7, r1
 800196e:	7812      	ldrb	r2, [r2, #0]
 8001970:	4252      	negs	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001974:	183b      	adds	r3, r7, r0
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	187b      	adds	r3, r7, r1
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b299      	uxth	r1, r3
 8001980:	4b86      	ldr	r3, [pc, #536]	; (8001b9c <answer2CPU+0x6e8>)
 8001982:	0052      	lsls	r2, r2, #1
 8001984:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <answer2CPU+0x6ec>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	4013      	ands	r3, r2
 8001990:	d0fa      	beq.n	8001988 <answer2CPU+0x4d4>
				USART2->TDR = ans[0]|0x0100;
 8001992:	4b82      	ldr	r3, [pc, #520]	; (8001b9c <answer2CPU+0x6e8>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	0052      	lsls	r2, r2, #1
 800199a:	4313      	orrs	r3, r2
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <answer2CPU+0x6ec>)
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019a2:	e014      	b.n	80019ce <answer2CPU+0x51a>
					  {
					    i++;
 80019a4:	210e      	movs	r1, #14
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	3201      	adds	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
					    while(!(USART2->ISR & USART_ISR_TXE)){};
 80019b0:	46c0      	nop			; (mov r8, r8)
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <answer2CPU+0x6ec>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0fa      	beq.n	80019b2 <answer2CPU+0x4fe>
					    USART2->TDR = (uint8_t)ans[i];
 80019bc:	230e      	movs	r3, #14
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <answer2CPU+0x6e8>)
 80019c4:	0052      	lsls	r2, r2, #1
 80019c6:	5ad3      	ldrh	r3, [r2, r3]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b75      	ldr	r3, [pc, #468]	; (8001ba0 <answer2CPU+0x6ec>)
 80019cc:	629a      	str	r2, [r3, #40]	; 0x28
				 while(ans[i])
 80019ce:	230e      	movs	r3, #14
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	781a      	ldrb	r2, [r3, #0]
 80019d4:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <answer2CPU+0x6e8>)
 80019d6:	0052      	lsls	r2, r2, #1
 80019d8:	5ad3      	ldrh	r3, [r2, r3]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e2      	bne.n	80019a4 <answer2CPU+0x4f0>
					  }
//				 cmd2Execute=0x01;
			}
//================================================================================================================================
			if (cmd[0] == 0x02) { //request of emitter SN
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d000      	beq.n	80019e8 <answer2CPU+0x534>
 80019e6:	e07f      	b.n	8001ae8 <answer2CPU+0x634>
				myLength = 0x13; //19 bytes length answer
 80019e8:	2109      	movs	r1, #9
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	2213      	movs	r2, #19
 80019ee:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b02      	subs	r3, #2
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <answer2CPU+0x6e8>)
 80019fc:	805a      	strh	r2, [r3, #2]
				for (i = 0; i < 17; i++) {
 80019fe:	230e      	movs	r3, #14
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
 8001a06:	e010      	b.n	8001a2a <answer2CPU+0x576>
					ans[i + 2] = EmitterSN[i];
 8001a08:	200e      	movs	r0, #14
 8001a0a:	183b      	adds	r3, r7, r0
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4a66      	ldr	r2, [pc, #408]	; (8001ba8 <answer2CPU+0x6f4>)
 8001a10:	5cd1      	ldrb	r1, [r2, r3]
 8001a12:	183b      	adds	r3, r7, r0
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	1c9a      	adds	r2, r3, #2
 8001a18:	b289      	uxth	r1, r1
 8001a1a:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <answer2CPU+0x6e8>)
 8001a1c:	0052      	lsls	r2, r2, #1
 8001a1e:	52d1      	strh	r1, [r2, r3]
				for (i = 0; i < 17; i++) {
 8001a20:	183b      	adds	r3, r7, r0
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	183b      	adds	r3, r7, r0
 8001a26:	3201      	adds	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	220e      	movs	r2, #14
 8001a2c:	18bb      	adds	r3, r7, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d9e9      	bls.n	8001a08 <answer2CPU+0x554>
				}
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001a34:	18bb      	adds	r3, r7, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e011      	b.n	8001a60 <answer2CPU+0x5ac>
					myCS = myCS + ans[i];
 8001a3c:	200e      	movs	r0, #14
 8001a3e:	183b      	adds	r3, r7, r0
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <answer2CPU+0x6e8>)
 8001a44:	0052      	lsls	r2, r2, #1
 8001a46:	5ad3      	ldrh	r3, [r2, r3]
 8001a48:	b2d9      	uxtb	r1, r3
 8001a4a:	220d      	movs	r2, #13
 8001a4c:	18bb      	adds	r3, r7, r2
 8001a4e:	18ba      	adds	r2, r7, r2
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	188a      	adds	r2, r1, r2
 8001a54:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {//			EMITTER SN REQUEST
 8001a56:	183b      	adds	r3, r7, r0
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	3201      	adds	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	230e      	movs	r3, #14
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	2009      	movs	r0, #9
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dbe4      	blt.n	8001a3c <answer2CPU+0x588>
				}
				myCS = 0 - myCS;
 8001a72:	210d      	movs	r1, #13
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	187a      	adds	r2, r7, r1
 8001a78:	7812      	ldrb	r2, [r2, #0]
 8001a7a:	4252      	negs	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001a7e:	183b      	adds	r3, r7, r0
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b299      	uxth	r1, r3
 8001a8a:	4b44      	ldr	r3, [pc, #272]	; (8001b9c <answer2CPU+0x6e8>)
 8001a8c:	0052      	lsls	r2, r2, #1
 8001a8e:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <answer2CPU+0x6ec>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d0fa      	beq.n	8001a92 <answer2CPU+0x5de>
				USART2->TDR = ans[0]|0x0100;
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <answer2CPU+0x6e8>)
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	0052      	lsls	r2, r2, #1
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <answer2CPU+0x6ec>)
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001aac:	e014      	b.n	8001ad8 <answer2CPU+0x624>
				  {
				    i++;
 8001aae:	210e      	movs	r1, #14
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	3201      	adds	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
				    while(!(USART2->ISR & USART_ISR_TXE)){};
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <answer2CPU+0x6ec>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0fa      	beq.n	8001abc <answer2CPU+0x608>
				    	USART2->TDR = (uint8_t)ans[i];
 8001ac6:	230e      	movs	r3, #14
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <answer2CPU+0x6e8>)
 8001ace:	0052      	lsls	r2, r2, #1
 8001ad0:	5ad3      	ldrh	r3, [r2, r3]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <answer2CPU+0x6ec>)
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ad8:	230e      	movs	r3, #14
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	781a      	ldrb	r2, [r3, #0]
 8001ade:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <answer2CPU+0x6e8>)
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	5ad3      	ldrh	r3, [r2, r3]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e2      	bne.n	8001aae <answer2CPU+0x5fa>
				  }
//				cmd2Execute=0x02;
			}
//===============================================================================================================================
			if (cmd[0] == 0x03) { //request of current consumption
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d000      	beq.n	8001af2 <answer2CPU+0x63e>
 8001af0:	e07b      	b.n	8001bea <answer2CPU+0x736>
				myLength = 0x04; //4 bytes length answer
 8001af2:	2109      	movs	r1, #9
 8001af4:	187b      	adds	r3, r7, r1
 8001af6:	2204      	movs	r2, #4
 8001af8:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001afa:	187b      	adds	r3, r7, r1
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b02      	subs	r3, #2
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <answer2CPU+0x6e8>)
 8001b06:	805a      	strh	r2, [r3, #2]
				ans[2] = currentConsumption;
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <answer2CPU+0x6f8>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <answer2CPU+0x6e8>)
 8001b10:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001b12:	230d      	movs	r3, #13
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <answer2CPU+0x6e8>)
 8001b1c:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001b1e:	230e      	movs	r3, #14
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e011      	b.n	8001b4c <answer2CPU+0x698>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001b28:	200e      	movs	r0, #14
 8001b2a:	183b      	adds	r3, r7, r0
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <answer2CPU+0x6e8>)
 8001b30:	0052      	lsls	r2, r2, #1
 8001b32:	5ad3      	ldrh	r3, [r2, r3]
 8001b34:	b2d9      	uxtb	r1, r3
 8001b36:	220d      	movs	r2, #13
 8001b38:	18bb      	adds	r3, r7, r2
 8001b3a:	18ba      	adds	r2, r7, r2
 8001b3c:	7812      	ldrb	r2, [r2, #0]
 8001b3e:	188a      	adds	r2, r1, r2
 8001b40:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001b42:	183b      	adds	r3, r7, r0
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	3201      	adds	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	230e      	movs	r3, #14
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	2009      	movs	r0, #9
 8001b54:	183b      	adds	r3, r7, r0
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	dbe4      	blt.n	8001b28 <answer2CPU+0x674>
				}
				myCS = 0 - myCS;
 8001b5e:	210d      	movs	r1, #13
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	187a      	adds	r2, r7, r1
 8001b64:	7812      	ldrb	r2, [r2, #0]
 8001b66:	4252      	negs	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	1e5a      	subs	r2, r3, #1
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b299      	uxth	r1, r3
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <answer2CPU+0x6e8>)
 8001b78:	0052      	lsls	r2, r2, #1
 8001b7a:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <answer2CPU+0x6ec>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2280      	movs	r2, #128	; 0x80
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0fa      	beq.n	8001b7e <answer2CPU+0x6ca>
					USART2->TDR = ans[0]|0x0100;
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <answer2CPU+0x6e8>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0052      	lsls	r2, r2, #1
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b02      	ldr	r3, [pc, #8]	; (8001ba0 <answer2CPU+0x6ec>)
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001b98:	e01f      	b.n	8001bda <answer2CPU+0x726>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	200033bc 	.word	0x200033bc
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	20003114 	.word	0x20003114
 8001ba8:	20003120 	.word	0x20003120
 8001bac:	2000311c 	.word	0x2000311c
						{
						  i++;
 8001bb0:	210e      	movs	r1, #14
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	3201      	adds	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
						  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <answer2CPU+0x844>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d0fa      	beq.n	8001bbe <answer2CPU+0x70a>
						     USART2->TDR = (uint8_t)ans[i];
 8001bc8:	230e      	movs	r3, #14
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <answer2CPU+0x848>)
 8001bd0:	0052      	lsls	r2, r2, #1
 8001bd2:	5ad3      	ldrh	r3, [r2, r3]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <answer2CPU+0x844>)
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
					while(ans[i])
 8001bda:	230e      	movs	r3, #14
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <answer2CPU+0x848>)
 8001be2:	0052      	lsls	r2, r2, #1
 8001be4:	5ad3      	ldrh	r3, [r2, r3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1e2      	bne.n	8001bb0 <answer2CPU+0x6fc>
						}
//					cmd2Execute=0x03;
			}
			if (cmd[0] == 0x04) { //request of current consumption
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d000      	beq.n	8001bf4 <answer2CPU+0x740>
 8001bf2:	e076      	b.n	8001ce2 <answer2CPU+0x82e>
				myLength = 0x04; //4 bytes length answer
 8001bf4:	2109      	movs	r1, #9
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	701a      	strb	r2, [r3, #0]
				ans[1] = myLength-0x02;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b02      	subs	r3, #2
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <answer2CPU+0x848>)
 8001c08:	805a      	strh	r2, [r3, #2]
				uartSpeed = cmd[2];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	001a      	movs	r2, r3
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <answer2CPU+0x84c>)
 8001c14:	601a      	str	r2, [r3, #0]
				ans[2] = currentUARTspeed;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <answer2CPU+0x850>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <answer2CPU+0x848>)
 8001c1e:	809a      	strh	r2, [r3, #4]
				ans[3] = myCS;
 8001c20:	230d      	movs	r3, #13
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <answer2CPU+0x848>)
 8001c2a:	80da      	strh	r2, [r3, #6]
				for (i = 0; i < myLength-1; i++) {
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	e011      	b.n	8001c5a <answer2CPU+0x7a6>
					myCS = myCS + ans[i];     //    CURRENT CONSUMPTION REQUEST
 8001c36:	200e      	movs	r0, #14
 8001c38:	183b      	adds	r3, r7, r0
 8001c3a:	781a      	ldrb	r2, [r3, #0]
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <answer2CPU+0x848>)
 8001c3e:	0052      	lsls	r2, r2, #1
 8001c40:	5ad3      	ldrh	r3, [r2, r3]
 8001c42:	b2d9      	uxtb	r1, r3
 8001c44:	220d      	movs	r2, #13
 8001c46:	18bb      	adds	r3, r7, r2
 8001c48:	18ba      	adds	r2, r7, r2
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	188a      	adds	r2, r1, r2
 8001c4e:	701a      	strb	r2, [r3, #0]
				for (i = 0; i < myLength-1; i++) {
 8001c50:	183b      	adds	r3, r7, r0
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	3201      	adds	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	230e      	movs	r3, #14
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	2009      	movs	r0, #9
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbe4      	blt.n	8001c36 <answer2CPU+0x782>
				}
				myCS = 0 - myCS;
 8001c6c:	210d      	movs	r1, #13
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	187a      	adds	r2, r7, r1
 8001c72:	7812      	ldrb	r2, [r2, #0]
 8001c74:	4252      	negs	r2, r2
 8001c76:	701a      	strb	r2, [r3, #0]
				ans[myLength - 1] = myCS;
 8001c78:	183b      	adds	r3, r7, r0
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	187b      	adds	r3, r7, r1
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <answer2CPU+0x848>)
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	52d1      	strh	r1, [r2, r3]
				while(!(USART2->ISR & USART_ISR_TXE)){};
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <answer2CPU+0x844>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2280      	movs	r2, #128	; 0x80
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0fa      	beq.n	8001c8c <answer2CPU+0x7d8>
				USART2->TDR = ans[0]|0x0100;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <answer2CPU+0x848>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	0052      	lsls	r2, r2, #1
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <answer2CPU+0x844>)
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001ca6:	e014      	b.n	8001cd2 <answer2CPU+0x81e>
				{
				  i++;
 8001ca8:	210e      	movs	r1, #14
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	781a      	ldrb	r2, [r3, #0]
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	3201      	adds	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
				  while(!(USART2->ISR & USART_ISR_TXE)){};
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <answer2CPU+0x844>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0fa      	beq.n	8001cb6 <answer2CPU+0x802>
				  USART2->TDR = (uint8_t)ans[i];
 8001cc0:	230e      	movs	r3, #14
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <answer2CPU+0x848>)
 8001cc8:	0052      	lsls	r2, r2, #1
 8001cca:	5ad3      	ldrh	r3, [r2, r3]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <answer2CPU+0x844>)
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
				while(ans[i])
 8001cd2:	230e      	movs	r3, #14
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <answer2CPU+0x848>)
 8001cda:	0052      	lsls	r2, r2, #1
 8001cdc:	5ad3      	ldrh	r3, [r2, r3]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e2      	bne.n	8001ca8 <answer2CPU+0x7f4>
				}
//				cmd2Execute=0x04;
			}
//			weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, coala);
			USART2->ICR|=USART_ICR_ORECF;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <answer2CPU+0x844>)
 8001ce4:	6a1a      	ldr	r2, [r3, #32]
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <answer2CPU+0x844>)
 8001ce8:	2108      	movs	r1, #8
 8001cea:	430a      	orrs	r2, r1
 8001cec:	621a      	str	r2, [r3, #32]
}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	200033bc 	.word	0x200033bc
 8001d00:	20003320 	.word	0x20003320
 8001d04:	2000327f 	.word	0x2000327f

08001d08 <MEM_Reset>:
//==================================================================================================================================
	void MEM_Reset(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
		uint8_t memCMD;
		HAL_Delay(1); //200 ms by Andrew
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f001 f856 	bl	8002dc0 <HAL_Delay>
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <MEM_Reset+0xb0>)
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <MEM_Reset+0xb0>)
 8001d1a:	4928      	ldr	r1, [pc, #160]	; (8001dbc <MEM_Reset+0xb4>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	615a      	str	r2, [r3, #20]
		memCMD = 0x66;
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	2266      	movs	r2, #102	; 0x66
 8001d24:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001d26:	1df9      	adds	r1, r7, #7
 8001d28:	4825      	ldr	r0, [pc, #148]	; (8001dc0 <MEM_Reset+0xb8>)
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f004 faf9 	bl	8006324 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MEM_Reset+0xb0>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <MEM_Reset+0xb0>)
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	0209      	lsls	r1, r1, #8
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	615a      	str	r2, [r3, #20]
		asm("NOP");
 8001d40:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001d42:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001d44:	46c0      	nop			; (mov r8, r8)
		__NOP();			//May be less NOPs?
 8001d46:	46c0      	nop			; (mov r8, r8)
		asm("NOP");
 8001d48:	46c0      	nop			; (mov r8, r8)
		__NOP();
 8001d4a:	46c0      	nop			; (mov r8, r8)
		GPIOC->ODR &= ~(1 << 15);			//reset cs
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <MEM_Reset+0xb0>)
 8001d4e:	695a      	ldr	r2, [r3, #20]
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <MEM_Reset+0xb0>)
 8001d52:	491a      	ldr	r1, [pc, #104]	; (8001dbc <MEM_Reset+0xb4>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	615a      	str	r2, [r3, #20]
		memCMD = 0x99;
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	2299      	movs	r2, #153	; 0x99
 8001d5c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset memory
 8001d5e:	1df9      	adds	r1, r7, #7
 8001d60:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <MEM_Reset+0xb8>)
 8001d62:	2305      	movs	r3, #5
 8001d64:	2201      	movs	r2, #1
 8001d66:	f004 fadd 	bl	8006324 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MEM_Reset+0xb0>)
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MEM_Reset+0xb0>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0209      	lsls	r1, r1, #8
 8001d74:	430a      	orrs	r2, r1
 8001d76:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f001 f821 	bl	8002dc0 <HAL_Delay>
//=============================================================================================================
		memCMD = 0xB7;												//	Activation 0f 4-bytes address mode
 8001d7e:	1dfb      	adds	r3, r7, #7
 8001d80:	22b7      	movs	r2, #183	; 0xb7
 8001d82:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MEM_Reset+0xb0>)
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MEM_Reset+0xb0>)
 8001d8a:	490c      	ldr	r1, [pc, #48]	; (8001dbc <MEM_Reset+0xb4>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 5); //reset enable
 8001d90:	1df9      	adds	r1, r7, #7
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <MEM_Reset+0xb8>)
 8001d94:	2305      	movs	r3, #5
 8001d96:	2201      	movs	r2, #1
 8001d98:	f004 fac4 	bl	8006324 <HAL_SPI_Transmit>
		GPIOC->ODR |= 1 << 15; // set cs
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MEM_Reset+0xb0>)
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <MEM_Reset+0xb0>)
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	0209      	lsls	r1, r1, #8
 8001da6:	430a      	orrs	r2, r1
 8001da8:	615a      	str	r2, [r3, #20]
		HAL_Delay(1); //200 ms by Andrew
 8001daa:	2001      	movs	r0, #1
 8001dac:	f001 f808 	bl	8002dc0 <HAL_Delay>
	}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	50000800 	.word	0x50000800
 8001dbc:	ffff7fff 	.word	0xffff7fff
 8001dc0:	200031a8 	.word	0x200031a8

08001dc4 <showFullScreen>:
//==================================================================================================================================
	uint8_t showFullScreen(uint8_t picNum) {
 8001dc4:	b5b0      	push	{r4, r5, r7, lr}
 8001dc6:	4c48      	ldr	r4, [pc, #288]	; (8001ee8 <showFullScreen+0x124>)
 8001dc8:	44a5      	add	sp, r4
 8001dca:	af02      	add	r7, sp, #8
 8001dcc:	0002      	movs	r2, r0
 8001dce:	4b47      	ldr	r3, [pc, #284]	; (8001eec <showFullScreen+0x128>)
 8001dd0:	4947      	ldr	r1, [pc, #284]	; (8001ef0 <showFullScreen+0x12c>)
 8001dd2:	468c      	mov	ip, r1
 8001dd4:	44bc      	add	ip, r7
 8001dd6:	4463      	add	r3, ip
 8001dd8:	701a      	strb	r2, [r3, #0]
		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], firstImAddrArray[4],addrArray[4];
		uint16_t i, len;
		uint32_t addrInfo,addr,firstImAddr;
		memCMD = 0x13; //read command with 4-byte address
 8001dda:	4846      	ldr	r0, [pc, #280]	; (8001ef4 <showFullScreen+0x130>)
 8001ddc:	183b      	adds	r3, r7, r0
 8001dde:	2213      	movs	r2, #19
 8001de0:	701a      	strb	r2, [r3, #0]
//		picNum=0x02;
		addr=(picNum)*0x2000;
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <showFullScreen+0x128>)
 8001de4:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <showFullScreen+0x12c>)
 8001de6:	4694      	mov	ip, r2
 8001de8:	44bc      	add	ip, r7
 8001dea:	4463      	add	r3, ip
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	035b      	lsls	r3, r3, #13
 8001df0:	4941      	ldr	r1, [pc, #260]	; (8001ef8 <showFullScreen+0x134>)
 8001df2:	187a      	adds	r2, r7, r1
 8001df4:	6013      	str	r3, [r2, #0]
//		addr=0x00003800;
		addrArray[0]=addr & 0xFF;
 8001df6:	187b      	adds	r3, r7, r1
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <showFullScreen+0x138>)
 8001dfe:	4c3c      	ldr	r4, [pc, #240]	; (8001ef0 <showFullScreen+0x12c>)
 8001e00:	46a4      	mov	ip, r4
 8001e02:	44bc      	add	ip, r7
 8001e04:	4463      	add	r3, ip
 8001e06:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <showFullScreen+0x138>)
 8001e12:	4c37      	ldr	r4, [pc, #220]	; (8001ef0 <showFullScreen+0x12c>)
 8001e14:	46a4      	mov	ip, r4
 8001e16:	44bc      	add	ip, r7
 8001e18:	4463      	add	r3, ip
 8001e1a:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <showFullScreen+0x138>)
 8001e26:	4c32      	ldr	r4, [pc, #200]	; (8001ef0 <showFullScreen+0x12c>)
 8001e28:	46a4      	mov	ip, r4
 8001e2a:	44bc      	add	ip, r7
 8001e2c:	4463      	add	r3, ip
 8001e2e:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e1b      	lsrs	r3, r3, #24
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <showFullScreen+0x138>)
 8001e3a:	492d      	ldr	r1, [pc, #180]	; (8001ef0 <showFullScreen+0x12c>)
 8001e3c:	468c      	mov	ip, r1
 8001e3e:	44bc      	add	ip, r7
 8001e40:	4463      	add	r3, ip
 8001e42:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <showFullScreen+0x13c>)
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <showFullScreen+0x13c>)
 8001e4a:	492e      	ldr	r1, [pc, #184]	; (8001f04 <showFullScreen+0x140>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001e50:	1839      	adds	r1, r7, r0
 8001e52:	482d      	ldr	r0, [pc, #180]	; (8001f08 <showFullScreen+0x144>)
 8001e54:	2332      	movs	r3, #50	; 0x32
 8001e56:	2201      	movs	r2, #1
 8001e58:	f004 fa64 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001e5c:	2408      	movs	r4, #8
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	1cd9      	adds	r1, r3, #3
 8001e62:	4829      	ldr	r0, [pc, #164]	; (8001f08 <showFullScreen+0x144>)
 8001e64:	2332      	movs	r3, #50	; 0x32
 8001e66:	2201      	movs	r2, #1
 8001e68:	f004 fa5c 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001e6c:	193b      	adds	r3, r7, r4
 8001e6e:	1c99      	adds	r1, r3, #2
 8001e70:	4825      	ldr	r0, [pc, #148]	; (8001f08 <showFullScreen+0x144>)
 8001e72:	2332      	movs	r3, #50	; 0x32
 8001e74:	2201      	movs	r2, #1
 8001e76:	f004 fa55 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	4822      	ldr	r0, [pc, #136]	; (8001f08 <showFullScreen+0x144>)
 8001e80:	2332      	movs	r3, #50	; 0x32
 8001e82:	2201      	movs	r2, #1
 8001e84:	f004 fa4e 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8001e88:	1939      	adds	r1, r7, r4
 8001e8a:	481f      	ldr	r0, [pc, #124]	; (8001f08 <showFullScreen+0x144>)
 8001e8c:	2332      	movs	r3, #50	; 0x32
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f004 fa48 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,8192, 5000);
 8001e94:	4c1d      	ldr	r4, [pc, #116]	; (8001f0c <showFullScreen+0x148>)
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	019a      	lsls	r2, r3, #6
 8001e9a:	2510      	movs	r5, #16
 8001e9c:	1979      	adds	r1, r7, r5
 8001e9e:	481a      	ldr	r0, [pc, #104]	; (8001f08 <showFullScreen+0x144>)
 8001ea0:	0023      	movs	r3, r4
 8001ea2:	f004 fb97 	bl	80065d4 <HAL_SPI_Receive>
//		while (!(SPI2->SR & SPI_SR_RXNE)){};
//		for (i=0;i<8192;i++){
//		MEM_Buffer[i] = SPI2->DR;
//		}
		GPIOC->ODR |= 1 << 15; // set cs
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <showFullScreen+0x13c>)
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <showFullScreen+0x13c>)
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	0209      	lsls	r1, r1, #8
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	615a      	str	r2, [r3, #20]
//    HAL_Delay(1);
		weoDrawRectangleFilled(0x00, 0x00, 0x7F, 0x7F, 0xFF, MEM_Buffer); // Здесь ещё работает
 8001eb4:	197b      	adds	r3, r7, r5
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	23ff      	movs	r3, #255	; 0xff
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	237f      	movs	r3, #127	; 0x7f
 8001ebe:	227f      	movs	r2, #127	; 0x7f
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff f9ee 	bl	80012a4 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <showFullScreen+0x13c>)
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <showFullScreen+0x13c>)
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <showFullScreen+0x14c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
	}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <showFullScreen+0x12c>)
 8001ee2:	449d      	add	sp, r3
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	ffffdfe0 	.word	0xffffdfe0
 8001eec:	ffffdfef 	.word	0xffffdfef
 8001ef0:	00002018 	.word	0x00002018
 8001ef4:	00002013 	.word	0x00002013
 8001ef8:	00002014 	.word	0x00002014
 8001efc:	ffffdff0 	.word	0xffffdff0
 8001f00:	50000800 	.word	0x50000800
 8001f04:	ffff7fff 	.word	0xffff7fff
 8001f08:	200031a8 	.word	0x200031a8
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	2000337a 	.word	0x2000337a

08001f14 <showSmallImage>:

		GPIOC->ODR |= 1 << 6;	//set BF
		cmd2Execute=0;
	}
//==========================================================================================================================
	uint8_t showSmallImage(uint8_t picNum, uint8_t imX, uint8_t imY) {
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	4c97      	ldr	r4, [pc, #604]	; (8002174 <showSmallImage+0x260>)
 8001f18:	44a5      	add	sp, r4
 8001f1a:	af02      	add	r7, sp, #8
 8001f1c:	0004      	movs	r4, r0
 8001f1e:	0008      	movs	r0, r1
 8001f20:	0011      	movs	r1, r2
 8001f22:	4b95      	ldr	r3, [pc, #596]	; (8002178 <showSmallImage+0x264>)
 8001f24:	4a95      	ldr	r2, [pc, #596]	; (800217c <showSmallImage+0x268>)
 8001f26:	4694      	mov	ip, r2
 8001f28:	44bc      	add	ip, r7
 8001f2a:	4463      	add	r3, ip
 8001f2c:	1c22      	adds	r2, r4, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	4b93      	ldr	r3, [pc, #588]	; (8002180 <showSmallImage+0x26c>)
 8001f32:	4a92      	ldr	r2, [pc, #584]	; (800217c <showSmallImage+0x268>)
 8001f34:	4694      	mov	ip, r2
 8001f36:	44bc      	add	ip, r7
 8001f38:	4463      	add	r3, ip
 8001f3a:	1c02      	adds	r2, r0, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
 8001f3e:	4b91      	ldr	r3, [pc, #580]	; (8002184 <showSmallImage+0x270>)
 8001f40:	4a8e      	ldr	r2, [pc, #568]	; (800217c <showSmallImage+0x268>)
 8001f42:	4694      	mov	ip, r2
 8001f44:	44bc      	add	ip, r7
 8001f46:	4463      	add	r3, ip
 8001f48:	1c0a      	adds	r2, r1, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

		uint8_t memCMD,width,height,addr_l,addr_L,addr_h,addr_H;
		uint8_t MEM_Buffer[8192], imInfo[2],addrArray[4];
		uint16_t i, len;
		uint32_t addr;
		addr=0x00000000;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	498e      	ldr	r1, [pc, #568]	; (8002188 <showSmallImage+0x274>)
 8001f50:	187a      	adds	r2, r7, r1
 8001f52:	6013      	str	r3, [r2, #0]
		memCMD = 0x13; //read command with 4-byte address
 8001f54:	4d8d      	ldr	r5, [pc, #564]	; (800218c <showSmallImage+0x278>)
 8001f56:	197b      	adds	r3, r7, r5
 8001f58:	2213      	movs	r2, #19
 8001f5a:	701a      	strb	r2, [r3, #0]
		//look at info about image
		addr=(picNum*0x2000)+0x3C000;// the right path is to multiply picNum * image repeat period!
 8001f5c:	4b86      	ldr	r3, [pc, #536]	; (8002178 <showSmallImage+0x264>)
 8001f5e:	4a87      	ldr	r2, [pc, #540]	; (800217c <showSmallImage+0x268>)
 8001f60:	4694      	mov	ip, r2
 8001f62:	44bc      	add	ip, r7
 8001f64:	4463      	add	r3, ip
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	331e      	adds	r3, #30
 8001f6a:	035b      	lsls	r3, r3, #13
 8001f6c:	187a      	adds	r2, r7, r1
 8001f6e:	6013      	str	r3, [r2, #0]

		addrArray[0]=addr & 0xFF;
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b86      	ldr	r3, [pc, #536]	; (8002190 <showSmallImage+0x27c>)
 8001f78:	4880      	ldr	r0, [pc, #512]	; (800217c <showSmallImage+0x268>)
 8001f7a:	4684      	mov	ip, r0
 8001f7c:	44bc      	add	ip, r7
 8001f7e:	4463      	add	r3, ip
 8001f80:	701a      	strb	r2, [r3, #0]
		addrArray[1]=(addr >> 8) & 0xFF;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b81      	ldr	r3, [pc, #516]	; (8002190 <showSmallImage+0x27c>)
 8001f8c:	487b      	ldr	r0, [pc, #492]	; (800217c <showSmallImage+0x268>)
 8001f8e:	4684      	mov	ip, r0
 8001f90:	44bc      	add	ip, r7
 8001f92:	4463      	add	r3, ip
 8001f94:	705a      	strb	r2, [r3, #1]
		addrArray[2]=(addr >> 16) & 0xFF;
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0c1b      	lsrs	r3, r3, #16
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b7c      	ldr	r3, [pc, #496]	; (8002190 <showSmallImage+0x27c>)
 8001fa0:	4876      	ldr	r0, [pc, #472]	; (800217c <showSmallImage+0x268>)
 8001fa2:	4684      	mov	ip, r0
 8001fa4:	44bc      	add	ip, r7
 8001fa6:	4463      	add	r3, ip
 8001fa8:	709a      	strb	r2, [r3, #2]
		addrArray[3]=(addr >> 24) & 0xFF;
 8001faa:	187b      	adds	r3, r7, r1
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e1b      	lsrs	r3, r3, #24
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b77      	ldr	r3, [pc, #476]	; (8002190 <showSmallImage+0x27c>)
 8001fb4:	4971      	ldr	r1, [pc, #452]	; (800217c <showSmallImage+0x268>)
 8001fb6:	468c      	mov	ip, r1
 8001fb8:	44bc      	add	ip, r7
 8001fba:	4463      	add	r3, ip
 8001fbc:	70da      	strb	r2, [r3, #3]

		GPIOC->ODR &= ~(1 << 15); //reset cs
 8001fbe:	4b75      	ldr	r3, [pc, #468]	; (8002194 <showSmallImage+0x280>)
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	4b74      	ldr	r3, [pc, #464]	; (8002194 <showSmallImage+0x280>)
 8001fc4:	4974      	ldr	r1, [pc, #464]	; (8002198 <showSmallImage+0x284>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50); //read command with 4-byte address
 8001fca:	1979      	adds	r1, r7, r5
 8001fcc:	4873      	ldr	r0, [pc, #460]	; (800219c <showSmallImage+0x288>)
 8001fce:	2332      	movs	r3, #50	; 0x32
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f004 f9a7 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3], 1, 50); //send address
 8001fd6:	240c      	movs	r4, #12
 8001fd8:	193b      	adds	r3, r7, r4
 8001fda:	1cd9      	adds	r1, r3, #3
 8001fdc:	486f      	ldr	r0, [pc, #444]	; (800219c <showSmallImage+0x288>)
 8001fde:	2332      	movs	r3, #50	; 0x32
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f004 f99f 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2], 1, 50); //send address
 8001fe6:	193b      	adds	r3, r7, r4
 8001fe8:	1c99      	adds	r1, r3, #2
 8001fea:	486c      	ldr	r0, [pc, #432]	; (800219c <showSmallImage+0x288>)
 8001fec:	2332      	movs	r3, #50	; 0x32
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f004 f998 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1], 1, 50); //send address
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	4868      	ldr	r0, [pc, #416]	; (800219c <showSmallImage+0x288>)
 8001ffa:	2332      	movs	r3, #50	; 0x32
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f004 f991 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0], 1, 50); //send address
 8002002:	1939      	adds	r1, r7, r4
 8002004:	4865      	ldr	r0, [pc, #404]	; (800219c <showSmallImage+0x288>)
 8002006:	2332      	movs	r3, #50	; 0x32
 8002008:	2201      	movs	r2, #1
 800200a:	f004 f98b 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &imInfo,2, 5000);
 800200e:	4b64      	ldr	r3, [pc, #400]	; (80021a0 <showSmallImage+0x28c>)
 8002010:	2210      	movs	r2, #16
 8002012:	18b9      	adds	r1, r7, r2
 8002014:	4861      	ldr	r0, [pc, #388]	; (800219c <showSmallImage+0x288>)
 8002016:	2202      	movs	r2, #2
 8002018:	f004 fadc 	bl	80065d4 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15; // set cs
 800201c:	4b5d      	ldr	r3, [pc, #372]	; (8002194 <showSmallImage+0x280>)
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	4b5c      	ldr	r3, [pc, #368]	; (8002194 <showSmallImage+0x280>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0209      	lsls	r1, r1, #8
 8002026:	430a      	orrs	r2, r1
 8002028:	615a      	str	r2, [r3, #20]

		width=imInfo[0];
 800202a:	4e5e      	ldr	r6, [pc, #376]	; (80021a4 <showSmallImage+0x290>)
 800202c:	19bb      	adds	r3, r7, r6
 800202e:	4a5e      	ldr	r2, [pc, #376]	; (80021a8 <showSmallImage+0x294>)
 8002030:	4952      	ldr	r1, [pc, #328]	; (800217c <showSmallImage+0x268>)
 8002032:	468c      	mov	ip, r1
 8002034:	44bc      	add	ip, r7
 8002036:	4462      	add	r2, ip
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	701a      	strb	r2, [r3, #0]
		height=imInfo[1];
 800203c:	495b      	ldr	r1, [pc, #364]	; (80021ac <showSmallImage+0x298>)
 800203e:	187b      	adds	r3, r7, r1
 8002040:	4a59      	ldr	r2, [pc, #356]	; (80021a8 <showSmallImage+0x294>)
 8002042:	484e      	ldr	r0, [pc, #312]	; (800217c <showSmallImage+0x268>)
 8002044:	4684      	mov	ip, r0
 8002046:	44bc      	add	ip, r7
 8002048:	4462      	add	r2, ip
 800204a:	7852      	ldrb	r2, [r2, #1]
 800204c:	701a      	strb	r2, [r3, #0]

		len=(width*height>>1)+0x20;
 800204e:	19bb      	adds	r3, r7, r6
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	187a      	adds	r2, r7, r1
 8002054:	7812      	ldrb	r2, [r2, #0]
 8002056:	4353      	muls	r3, r2
 8002058:	105b      	asrs	r3, r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <showSmallImage+0x29c>)
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	3220      	adds	r2, #32
 8002062:	801a      	strh	r2, [r3, #0]
		addrArray[0]+=0x02;
 8002064:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <showSmallImage+0x27c>)
 8002066:	4a45      	ldr	r2, [pc, #276]	; (800217c <showSmallImage+0x268>)
 8002068:	4694      	mov	ip, r2
 800206a:	44bc      	add	ip, r7
 800206c:	4463      	add	r3, ip
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	3302      	adds	r3, #2
 8002072:	b2da      	uxtb	r2, r3
 8002074:	4b46      	ldr	r3, [pc, #280]	; (8002190 <showSmallImage+0x27c>)
 8002076:	4841      	ldr	r0, [pc, #260]	; (800217c <showSmallImage+0x268>)
 8002078:	4684      	mov	ip, r0
 800207a:	44bc      	add	ip, r7
 800207c:	4463      	add	r3, ip
 800207e:	701a      	strb	r2, [r3, #0]

		USART2->ICR|=USART_ICR_ORECF;
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <showSmallImage+0x2a0>)
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <showSmallImage+0x2a0>)
 8002086:	2108      	movs	r1, #8
 8002088:	430a      	orrs	r2, r1
 800208a:	621a      	str	r2, [r3, #32]
		memCMD = 0x13; //read command with 4-byte address
 800208c:	197b      	adds	r3, r7, r5
 800208e:	2213      	movs	r2, #19
 8002090:	701a      	strb	r2, [r3, #0]

		GPIOC->ODR &= ~(1 << 15);	//reset cs
 8002092:	4b40      	ldr	r3, [pc, #256]	; (8002194 <showSmallImage+0x280>)
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <showSmallImage+0x280>)
 8002098:	493f      	ldr	r1, [pc, #252]	; (8002198 <showSmallImage+0x284>)
 800209a:	400a      	ands	r2, r1
 800209c:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &memCMD, 1, 50);//read command with 4-byte address
 800209e:	1979      	adds	r1, r7, r5
 80020a0:	483e      	ldr	r0, [pc, #248]	; (800219c <showSmallImage+0x288>)
 80020a2:	2332      	movs	r3, #50	; 0x32
 80020a4:	2201      	movs	r2, #1
 80020a6:	f004 f93d 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[3],1, 50);	//send address
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	1cd9      	adds	r1, r3, #3
 80020ae:	483b      	ldr	r0, [pc, #236]	; (800219c <showSmallImage+0x288>)
 80020b0:	2332      	movs	r3, #50	; 0x32
 80020b2:	2201      	movs	r2, #1
 80020b4:	f004 f936 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[2],1, 50);	//send address
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	1c99      	adds	r1, r3, #2
 80020bc:	4837      	ldr	r0, [pc, #220]	; (800219c <showSmallImage+0x288>)
 80020be:	2332      	movs	r3, #50	; 0x32
 80020c0:	2201      	movs	r2, #1
 80020c2:	f004 f92f 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[1],1, 50);	//send address
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	1c59      	adds	r1, r3, #1
 80020ca:	4834      	ldr	r0, [pc, #208]	; (800219c <showSmallImage+0x288>)
 80020cc:	2332      	movs	r3, #50	; 0x32
 80020ce:	2201      	movs	r2, #1
 80020d0:	f004 f928 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &addrArray[0],1, 50);	//send address
 80020d4:	1939      	adds	r1, r7, r4
 80020d6:	4831      	ldr	r0, [pc, #196]	; (800219c <showSmallImage+0x288>)
 80020d8:	2332      	movs	r3, #50	; 0x32
 80020da:	2201      	movs	r2, #1
 80020dc:	f004 f922 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, (uint8_t*) &MEM_Buffer,len, 5000);// 7 information bits about the image
 80020e0:	4c2f      	ldr	r4, [pc, #188]	; (80021a0 <showSmallImage+0x28c>)
 80020e2:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <showSmallImage+0x29c>)
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	2514      	movs	r5, #20
 80020ea:	1979      	adds	r1, r7, r5
 80020ec:	482b      	ldr	r0, [pc, #172]	; (800219c <showSmallImage+0x288>)
 80020ee:	0023      	movs	r3, r4
 80020f0:	f004 fa70 	bl	80065d4 <HAL_SPI_Receive>
		GPIOC->ODR |= 1 << 15;	// set cs
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <showSmallImage+0x280>)
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	4b26      	ldr	r3, [pc, #152]	; (8002194 <showSmallImage+0x280>)
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	0209      	lsls	r1, r1, #8
 80020fe:	430a      	orrs	r2, r1
 8002100:	615a      	str	r2, [r3, #20]
		weoDrawRectangleFilled(imX, imY, (imX+width-0x01), (imY+height-0x01), 0xFF,MEM_Buffer);	// Здесь ещё работает 0xFF - затычка
 8002102:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <showSmallImage+0x26c>)
 8002104:	481d      	ldr	r0, [pc, #116]	; (800217c <showSmallImage+0x268>)
 8002106:	183a      	adds	r2, r7, r0
 8002108:	18d2      	adds	r2, r2, r3
 800210a:	19bb      	adds	r3, r7, r6
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	18d3      	adds	r3, r2, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b2dc      	uxtb	r4, r3
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <showSmallImage+0x270>)
 800211a:	183a      	adds	r2, r7, r0
 800211c:	18d2      	adds	r2, r2, r3
 800211e:	4923      	ldr	r1, [pc, #140]	; (80021ac <showSmallImage+0x298>)
 8002120:	187b      	adds	r3, r7, r1
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	18d3      	adds	r3, r2, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <showSmallImage+0x270>)
 8002130:	4912      	ldr	r1, [pc, #72]	; (800217c <showSmallImage+0x268>)
 8002132:	468c      	mov	ip, r1
 8002134:	44bc      	add	ip, r7
 8002136:	4463      	add	r3, ip
 8002138:	7819      	ldrb	r1, [r3, #0]
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <showSmallImage+0x26c>)
 800213c:	480f      	ldr	r0, [pc, #60]	; (800217c <showSmallImage+0x268>)
 800213e:	4684      	mov	ip, r0
 8002140:	44bc      	add	ip, r7
 8002142:	4463      	add	r3, ip
 8002144:	7818      	ldrb	r0, [r3, #0]
 8002146:	197b      	adds	r3, r7, r5
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	23ff      	movs	r3, #255	; 0xff
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	0013      	movs	r3, r2
 8002150:	0022      	movs	r2, r4
 8002152:	f7ff f8a7 	bl	80012a4 <weoDrawRectangleFilled>
		GPIOC->ODR |= 1 << 6;	//set BF
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <showSmallImage+0x280>)
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <showSmallImage+0x280>)
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	430a      	orrs	r2, r1
 8002160:	615a      	str	r2, [r3, #20]
		cmd2Execute=0;
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <showSmallImage+0x2a4>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
	}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <showSmallImage+0x2a8>)
 8002170:	449d      	add	sp, r3
 8002172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002174:	ffffdfd4 	.word	0xffffdfd4
 8002178:	ffffdfe7 	.word	0xffffdfe7
 800217c:	00002020 	.word	0x00002020
 8002180:	ffffdfe6 	.word	0xffffdfe6
 8002184:	ffffdfe5 	.word	0xffffdfe5
 8002188:	0000201c 	.word	0x0000201c
 800218c:	00002017 	.word	0x00002017
 8002190:	ffffdfec 	.word	0xffffdfec
 8002194:	50000800 	.word	0x50000800
 8002198:	ffff7fff 	.word	0xffff7fff
 800219c:	200031a8 	.word	0x200031a8
 80021a0:	00001388 	.word	0x00001388
 80021a4:	0000201b 	.word	0x0000201b
 80021a8:	ffffdff0 	.word	0xffffdff0
 80021ac:	0000201a 	.word	0x0000201a
 80021b0:	00002018 	.word	0x00002018
 80021b4:	40004400 	.word	0x40004400
 80021b8:	2000337a 	.word	0x2000337a
 80021bc:	00002024 	.word	0x00002024

080021c0 <MEM_GetID>:
		dat = 0x04;
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 5);//write disable Is it neccessary, if WP pin is used????????????????????????????
		GPIOC->ODR |= 1 << 15;	// set cs
//    GPIOC->ODR &= ~(1 << 14);//Write Disable
	}
	uint32_t MEM_GetID(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
		uint8_t dat;
		uint8_t tmp[1] = { 0x00 };
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4a29      	ldr	r2, [pc, #164]	; (8002270 <MEM_GetID+0xb0>)
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	701a      	strb	r2, [r3, #0]
		dat = 0x9E;
 80021ce:	1dfb      	adds	r3, r7, #7
 80021d0:	229e      	movs	r2, #158	; 0x9e
 80021d2:	701a      	strb	r2, [r3, #0]
		GPIOC->ODR &= ~(1 << 15);	//reset cs
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <MEM_GetID+0xb4>)
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <MEM_GetID+0xb4>)
 80021da:	4927      	ldr	r1, [pc, #156]	; (8002278 <MEM_GetID+0xb8>)
 80021dc:	400a      	ands	r2, r1
 80021de:	615a      	str	r2, [r3, #20]
		HAL_SPI_Transmit(&hspi2, (uint8_t*) &dat, 1, 50);	//read ID command
 80021e0:	1df9      	adds	r1, r7, #7
 80021e2:	4826      	ldr	r0, [pc, #152]	; (800227c <MEM_GetID+0xbc>)
 80021e4:	2332      	movs	r3, #50	; 0x32
 80021e6:	2201      	movs	r2, #1
 80021e8:	f004 f89c 	bl	8006324 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 80021ec:	23fa      	movs	r3, #250	; 0xfa
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	1d39      	adds	r1, r7, #4
 80021f2:	4822      	ldr	r0, [pc, #136]	; (800227c <MEM_GetID+0xbc>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	f004 f9ed 	bl	80065d4 <HAL_SPI_Receive>
		MEM_ID = (uint32_t) tmp[0];
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	001a      	movs	r2, r3
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <MEM_GetID+0xc0>)
 8002202:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;                    			//MSB
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MEM_GetID+0xc0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	021a      	lsls	r2, r3, #8
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MEM_GetID+0xc0>)
 800220c:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 800220e:	23fa      	movs	r3, #250	; 0xfa
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	1d39      	adds	r1, r7, #4
 8002214:	4819      	ldr	r0, [pc, #100]	; (800227c <MEM_GetID+0xbc>)
 8002216:	2201      	movs	r2, #1
 8002218:	f004 f9dc 	bl	80065d4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	001a      	movs	r2, r3
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MEM_GetID+0xc0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	18d2      	adds	r2, r2, r3
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MEM_GetID+0xc0>)
 800222a:	601a      	str	r2, [r3, #0]
		MEM_ID <<= 8;
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MEM_GetID+0xc0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	021a      	lsls	r2, r3, #8
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <MEM_GetID+0xc0>)
 8002234:	601a      	str	r2, [r3, #0]
		HAL_SPI_Receive(&hspi2, tmp, 1, 1000);
 8002236:	23fa      	movs	r3, #250	; 0xfa
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	1d39      	adds	r1, r7, #4
 800223c:	480f      	ldr	r0, [pc, #60]	; (800227c <MEM_GetID+0xbc>)
 800223e:	2201      	movs	r2, #1
 8002240:	f004 f9c8 	bl	80065d4 <HAL_SPI_Receive>
		MEM_ID += (uint32_t) tmp[0];
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	001a      	movs	r2, r3
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <MEM_GetID+0xc0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	18d2      	adds	r2, r2, r3
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <MEM_GetID+0xc0>)
 8002252:	601a      	str	r2, [r3, #0]
		GPIOC->ODR |= 1 << 15;                    			// set cs
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <MEM_GetID+0xb4>)
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MEM_GetID+0xb4>)
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	0209      	lsls	r1, r1, #8
 800225e:	430a      	orrs	r2, r1
 8002260:	615a      	str	r2, [r3, #20]
		return (MEM_ID);
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <MEM_GetID+0xc0>)
 8002264:	681b      	ldr	r3, [r3, #0]
	}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b002      	add	sp, #8
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	08009908 	.word	0x08009908
 8002274:	50000800 	.word	0x50000800
 8002278:	ffff7fff 	.word	0xffff7fff
 800227c:	200031a8 	.word	0x200031a8
 8002280:	2000315c 	.word	0x2000315c

08002284 <cmdExecute>:
//		HAL_Delay(1000);
	}
	uint16_t Scount(void){

	}
	uint8_t cmdExecute(uint8_t cmd2Execute){
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	0002      	movs	r2, r0
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	701a      	strb	r2, [r3, #0]
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <cmdExecute+0x128>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d100      	bne.n	800229a <cmdExecute+0x16>
 8002298:	e081      	b.n	800239e <cmdExecute+0x11a>
//		if(cmd[0]==0xFF){return;}	// protection against false BF resets
//		else{
			if (bf4me!=0x00){return;}	// protection against false BF resets
 800229a:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <cmdExecute+0x12c>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d000      	beq.n	80022a4 <cmdExecute+0x20>
 80022a2:	e07e      	b.n	80023a2 <cmdExecute+0x11e>
//			else{
		USART2->ICR|=USART_ICR_ORECF;
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <cmdExecute+0x130>)
 80022a6:	6a1a      	ldr	r2, [r3, #32]
 80022a8:	4b42      	ldr	r3, [pc, #264]	; (80023b4 <cmdExecute+0x130>)
 80022aa:	2108      	movs	r1, #8
 80022ac:	430a      	orrs	r2, r1
 80022ae:	621a      	str	r2, [r3, #32]
//			dataASCII[0]=0x31;
//			dataASCII[1]=0x32;
//			printASCIIarray(0x00,0x00,0x02,dataASCII);
//			weoDrawRectangleFilled(0x00, 0x00, 0x0E, 0x25, 0xFF, h2);//works
				}
		if(cmd2Execute==0x11){
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b11      	cmp	r3, #17
 80022b6:	d111      	bne.n	80022dc <cmdExecute+0x58>
			bf4me=0x11;	//set BF flag 4 me
 80022b8:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <cmdExecute+0x12c>)
 80022ba:	2211      	movs	r2, #17
 80022bc:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <cmdExecute+0x4e>
 80022c6:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <cmdExecute+0x134>)
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <cmdExecute+0x134>)
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	438a      	bics	r2, r1
 80022d0:	615a      	str	r2, [r3, #20]
			showFullScreen(picNum);
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <cmdExecute+0x138>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7ff fd74 	bl	8001dc4 <showFullScreen>
//			showSmallImage(picNum,0x00,0x00);
				}
		if(cmd2Execute==0x12){
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b12      	cmp	r3, #18
 80022e2:	d117      	bne.n	8002314 <cmdExecute+0x90>
			bf4me=0x12;	//set BF flag 4 me
 80022e4:	4b32      	ldr	r3, [pc, #200]	; (80023b0 <cmdExecute+0x12c>)
 80022e6:	2212      	movs	r2, #18
 80022e8:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <cmdExecute+0x7a>
 80022f2:	4b31      	ldr	r3, [pc, #196]	; (80023b8 <cmdExecute+0x134>)
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <cmdExecute+0x134>)
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	438a      	bics	r2, r1
 80022fc:	615a      	str	r2, [r3, #20]

			showSmallImage(picNum,imX,imY);
 80022fe:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <cmdExecute+0x138>)
 8002300:	7818      	ldrb	r0, [r3, #0]
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <cmdExecute+0x13c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b2d9      	uxtb	r1, r3
 8002308:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <cmdExecute+0x140>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	001a      	movs	r2, r3
 8002310:	f7ff fe00 	bl	8001f14 <showSmallImage>
				}
		if(cmd2Execute==0x13){
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b13      	cmp	r3, #19
 800231a:	d117      	bne.n	800234c <cmdExecute+0xc8>
			bf4me=0x13;	//set BF flag 4 me
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <cmdExecute+0x12c>)
 800231e:	2213      	movs	r2, #19
 8002320:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <cmdExecute+0xb2>
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <cmdExecute+0x134>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <cmdExecute+0x134>)
 8002330:	2140      	movs	r1, #64	; 0x40
 8002332:	438a      	bics	r2, r1
 8002334:	615a      	str	r2, [r3, #20]

//			printASCIIarray_old(imX,imY, strLen,dataASCII);
			printASCIIarray(imX,imY, strLen,dataASCII);
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <cmdExecute+0x13c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	b2d8      	uxtb	r0, r3
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <cmdExecute+0x140>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	b2d9      	uxtb	r1, r3
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <cmdExecute+0x144>)
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <cmdExecute+0x148>)
 8002348:	f000 f842 	bl	80023d0 <printASCIIarray>
				}
		if(cmd2Execute==0x14){
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b14      	cmp	r3, #20
 8002352:	d10c      	bne.n	800236e <cmdExecute+0xea>
			bf4me=0x14;	//set BF flag 4 me
 8002354:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <cmdExecute+0x12c>)
 8002356:	2214      	movs	r2, #20
 8002358:	701a      	strb	r2, [r3, #0]
			if(cmd2Execute!=0){GPIOC->ODR &= ~(1 << 6);}	//reset BF
 800235a:	1dfb      	adds	r3, r7, #7
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <cmdExecute+0xea>
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <cmdExecute+0x134>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <cmdExecute+0x134>)
 8002368:	2140      	movs	r1, #64	; 0x40
 800236a:	438a      	bics	r2, r1
 800236c:	615a      	str	r2, [r3, #20]


				}
		if(cmd2Execute==0x15){
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b15      	cmp	r3, #21
 8002374:	d102      	bne.n	800237c <cmdExecute+0xf8>
			bf4me=0x15;	//set BF flag 4 me
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <cmdExecute+0x12c>)
 8002378:	2215      	movs	r2, #21
 800237a:	701a      	strb	r2, [r3, #0]
				}
		if(cmd2Execute==0x16){
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b16      	cmp	r3, #22
 8002382:	d102      	bne.n	800238a <cmdExecute+0x106>
			bf4me=0x16;	//set BF flag 4 me
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <cmdExecute+0x12c>)
 8002386:	2216      	movs	r2, #22
 8002388:	701a      	strb	r2, [r3, #0]

				}
		if(cmd2Execute==0x00){

				}
		if(cmd2Execute=0x00){
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

				}
//			}
//		}
		USART2->ICR|=USART_ICR_ORECF;
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <cmdExecute+0x130>)
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <cmdExecute+0x130>)
 8002396:	2108      	movs	r1, #8
 8002398:	430a      	orrs	r2, r1
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	e002      	b.n	80023a4 <cmdExecute+0x120>
		if(cmd[0]==0x10){return;}	// protection against short peaks while cmd 10h
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	e000      	b.n	80023a4 <cmdExecute+0x120>
			if (bf4me!=0x00){return;}	// protection against false BF resets
 80023a2:	46c0      	nop			; (mov r8, r8)
	}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200034a4 	.word	0x200034a4
 80023b0:	200033d0 	.word	0x200033d0
 80023b4:	40004400 	.word	0x40004400
 80023b8:	50000800 	.word	0x50000800
 80023bc:	20003379 	.word	0x20003379
 80023c0:	20003280 	.word	0x20003280
 80023c4:	200032b8 	.word	0x200032b8
 80023c8:	200033b9 	.word	0x200033b9
 80023cc:	20003198 	.word	0x20003198

080023d0 <printASCIIarray>:
		for(i=0;i<48;i++){
		weoBuffer[i]=0x00;
		}
		GPIOC->ODR |= 1 << 6;	//set BF
	}
	uint8_t printASCIIarray(uint8_t imX,uint8_t imY,uint8_t strLen,uint8_t dataASCII[]){
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b092      	sub	sp, #72	; 0x48
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	0004      	movs	r4, r0
 80023d8:	0008      	movs	r0, r1
 80023da:	0011      	movs	r1, r2
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	1c22      	adds	r2, r4, #0
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	1dbb      	adds	r3, r7, #6
 80023e6:	1c02      	adds	r2, r0, #0
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	1d7b      	adds	r3, r7, #5
 80023ec:	1c0a      	adds	r2, r1, #0
 80023ee:	701a      	strb	r2, [r3, #0]
			uint8_t j,Y_height,X_width,ASCII_X;
			uint8_t weoBuffer[49];
			uint16_t i;
			ASCII_X=imX;
 80023f0:	233e      	movs	r3, #62	; 0x3e
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	1dfa      	adds	r2, r7, #7
 80023f6:	7812      	ldrb	r2, [r2, #0]
 80023f8:	701a      	strb	r2, [r3, #0]

			for (i=0;i<strLen;i++){
 80023fa:	233c      	movs	r3, #60	; 0x3c
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e04f      	b.n	80024a4 <printASCIIarray+0xd4>
//			if ( dataASCII[i]==0x39 ) {
				for(j=0;j<49;j++){
 8002404:	233f      	movs	r3, #63	; 0x3f
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e01b      	b.n	8002446 <printASCIIarray+0x76>
									weoBuffer[j]=FONT_X[dataASCII[i]][j];
 800240e:	233c      	movs	r3, #60	; 0x3c
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	18d3      	adds	r3, r2, r3
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	001a      	movs	r2, r3
 800241c:	253f      	movs	r5, #63	; 0x3f
 800241e:	197b      	adds	r3, r7, r5
 8002420:	7818      	ldrb	r0, [r3, #0]
 8002422:	197b      	adds	r3, r7, r5
 8002424:	7819      	ldrb	r1, [r3, #0]
 8002426:	4c33      	ldr	r4, [pc, #204]	; (80024f4 <printASCIIarray+0x124>)
 8002428:	0013      	movs	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	00da      	lsls	r2, r3, #3
 8002430:	1ad2      	subs	r2, r2, r3
 8002432:	18a3      	adds	r3, r4, r2
 8002434:	5c1a      	ldrb	r2, [r3, r0]
 8002436:	2308      	movs	r3, #8
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	545a      	strb	r2, [r3, r1]
				for(j=0;j<49;j++){
 800243c:	197b      	adds	r3, r7, r5
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	197b      	adds	r3, r7, r5
 8002442:	3201      	adds	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
 8002446:	233f      	movs	r3, #63	; 0x3f
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b30      	cmp	r3, #48	; 0x30
 800244e:	d9de      	bls.n	800240e <printASCIIarray+0x3e>
									}
			        	weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,weoBuffer);
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <printASCIIarray+0x128>)
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	203e      	movs	r0, #62	; 0x3e
 8002456:	183b      	adds	r3, r7, r0
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	18d3      	adds	r3, r2, r3
 800245c:	b2dc      	uxtb	r4, r3
 800245e:	4b27      	ldr	r3, [pc, #156]	; (80024fc <printASCIIarray+0x12c>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	1dbb      	adds	r3, r7, #6
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	18d3      	adds	r3, r2, r3
 8002468:	b2da      	uxtb	r2, r3
 800246a:	1dbb      	adds	r3, r7, #6
 800246c:	7819      	ldrb	r1, [r3, #0]
 800246e:	0005      	movs	r5, r0
 8002470:	183b      	adds	r3, r7, r0
 8002472:	7818      	ldrb	r0, [r3, #0]
 8002474:	2308      	movs	r3, #8
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	23ff      	movs	r3, #255	; 0xff
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	0013      	movs	r3, r2
 8002480:	0022      	movs	r2, r4
 8002482:	f7fe ff0f 	bl	80012a4 <weoDrawRectangleFilled>
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+X_increment-0,imY+ASCII_height-0,0xFF,FONT_X[dataASCII[i]]);
//				weoDrawRectangleFilled(ASCII_X,imY,ASCII_X+0x06,imY+0x0D,0xFF,weoBuffer);
//			}

				ASCII_X += X_increment+1;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <printASCIIarray+0x128>)
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	197b      	adds	r3, r7, r5
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	18d3      	adds	r3, r2, r3
 8002490:	b2da      	uxtb	r2, r3
 8002492:	197b      	adds	r3, r7, r5
 8002494:	3201      	adds	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
			for (i=0;i<strLen;i++){
 8002498:	213c      	movs	r1, #60	; 0x3c
 800249a:	187b      	adds	r3, r7, r1
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	3201      	adds	r2, #1
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	1d7b      	adds	r3, r7, #5
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	213c      	movs	r1, #60	; 0x3c
 80024ac:	187a      	adds	r2, r7, r1
 80024ae:	8812      	ldrh	r2, [r2, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d3a7      	bcc.n	8002404 <printASCIIarray+0x34>
			}
			for(i=0;i<49;i++){
 80024b4:	187b      	adds	r3, r7, r1
 80024b6:	2200      	movs	r2, #0
 80024b8:	801a      	strh	r2, [r3, #0]
 80024ba:	e00b      	b.n	80024d4 <printASCIIarray+0x104>
			weoBuffer[i]=0x00;
 80024bc:	203c      	movs	r0, #60	; 0x3c
 80024be:	183b      	adds	r3, r7, r0
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	2208      	movs	r2, #8
 80024c4:	18ba      	adds	r2, r7, r2
 80024c6:	2100      	movs	r1, #0
 80024c8:	54d1      	strb	r1, [r2, r3]
			for(i=0;i<49;i++){
 80024ca:	183b      	adds	r3, r7, r0
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	183b      	adds	r3, r7, r0
 80024d0:	3201      	adds	r2, #1
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	233c      	movs	r3, #60	; 0x3c
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	2b30      	cmp	r3, #48	; 0x30
 80024dc:	d9ee      	bls.n	80024bc <printASCIIarray+0xec>
			}
			GPIOC->ODR |= 1 << 6;	//set BF
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <printASCIIarray+0x130>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <printASCIIarray+0x130>)
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	430a      	orrs	r2, r1
 80024e8:	615a      	str	r2, [r3, #20]

		}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b010      	add	sp, #64	; 0x40
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	20000000 	.word	0x20000000
 80024f8:	20003130 	.word	0x20003130
 80024fc:	20003131 	.word	0x20003131
 8002500:	50000800 	.word	0x50000800

08002504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_MspInit+0x4c>)
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_MspInit+0x4c>)
 800251c:	2101      	movs	r1, #1
 800251e:	430a      	orrs	r2, r1
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_MspInit+0x4c>)
 8002530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_MspInit+0x4c>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
 800253c:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_MspInit+0x4c>)
 800253e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE);
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fc5a 	bl	8002e08 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b002      	add	sp, #8
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	240c      	movs	r4, #12
 800256a:	193b      	adds	r3, r7, r4
 800256c:	0018      	movs	r0, r3
 800256e:	2314      	movs	r3, #20
 8002570:	001a      	movs	r2, r3
 8002572:	2100      	movs	r1, #0
 8002574:	f007 f9b4 	bl	80098e0 <memset>
  if(hcomp->Instance==COMP1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <HAL_COMP_MspInit+0x60>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11a      	bne.n	80025b8 <HAL_COMP_MspInit+0x58>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_COMP_MspInit+0x64>)
 8002584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_COMP_MspInit+0x64>)
 8002588:	2102      	movs	r1, #2
 800258a:	430a      	orrs	r2, r1
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <HAL_COMP_MspInit+0x64>)
 8002590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002592:	2202      	movs	r2, #2
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800259a:	193b      	adds	r3, r7, r4
 800259c:	2204      	movs	r2, #4
 800259e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025a0:	193b      	adds	r3, r7, r4
 80025a2:	2203      	movs	r2, #3
 80025a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	4a06      	ldr	r2, [pc, #24]	; (80025c8 <HAL_COMP_MspInit+0x68>)
 80025b0:	0019      	movs	r1, r3
 80025b2:	0010      	movs	r0, r2
 80025b4:	f001 f97e 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b009      	add	sp, #36	; 0x24
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	40010200 	.word	0x40010200
 80025c4:	40021000 	.word	0x40021000
 80025c8:	50000400 	.word	0x50000400

080025cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b08b      	sub	sp, #44	; 0x2c
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	2414      	movs	r4, #20
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	0018      	movs	r0, r3
 80025da:	2314      	movs	r3, #20
 80025dc:	001a      	movs	r2, r3
 80025de:	2100      	movs	r1, #0
 80025e0:	f007 f97e 	bl	80098e0 <memset>
  if(hi2c->Instance==I2C1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a20      	ldr	r2, [pc, #128]	; (800266c <HAL_I2C_MspInit+0xa0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d139      	bne.n	8002662 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_I2C_MspInit+0xa4>)
 80025f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <HAL_I2C_MspInit+0xa4>)
 80025f4:	2101      	movs	r1, #1
 80025f6:	430a      	orrs	r2, r1
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_I2C_MspInit+0xa4>)
 80025fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002606:	193b      	adds	r3, r7, r4
 8002608:	22c0      	movs	r2, #192	; 0xc0
 800260a:	00d2      	lsls	r2, r2, #3
 800260c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	0021      	movs	r1, r4
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2212      	movs	r2, #18
 8002614:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2201      	movs	r2, #1
 800261a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2206      	movs	r2, #6
 8002626:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	187a      	adds	r2, r7, r1
 800262a:	23a0      	movs	r3, #160	; 0xa0
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	0011      	movs	r1, r2
 8002630:	0018      	movs	r0, r3
 8002632:	f001 f93f 	bl	80038b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_I2C_MspInit+0xa4>)
 8002638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <HAL_I2C_MspInit+0xa4>)
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	0389      	lsls	r1, r1, #14
 8002640:	430a      	orrs	r2, r1
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_I2C_MspInit+0xa4>)
 8002646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	039b      	lsls	r3, r3, #14
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	2017      	movs	r0, #23
 8002658:	f000 fef8 	bl	800344c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800265c:	2017      	movs	r0, #23
 800265e:	f000 ff0a 	bl	8003476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b00b      	add	sp, #44	; 0x2c
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	40005400 	.word	0x40005400
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b08b      	sub	sp, #44	; 0x2c
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	2414      	movs	r4, #20
 800267e:	193b      	adds	r3, r7, r4
 8002680:	0018      	movs	r0, r3
 8002682:	2314      	movs	r3, #20
 8002684:	001a      	movs	r2, r3
 8002686:	2100      	movs	r1, #0
 8002688:	f007 f92a 	bl	80098e0 <memset>
  if(hi2s->Instance==SPI1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a46      	ldr	r2, [pc, #280]	; (80027ac <HAL_I2S_MspInit+0x138>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d000      	beq.n	8002698 <HAL_I2S_MspInit+0x24>
 8002696:	e085      	b.n	80027a4 <HAL_I2S_MspInit+0x130>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002698:	4b45      	ldr	r3, [pc, #276]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 800269a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	0149      	lsls	r1, r1, #5
 80026a2:	430a      	orrs	r2, r1
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40
 80026a6:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	4013      	ands	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b8:	4b3d      	ldr	r3, [pc, #244]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	635a      	str	r2, [r3, #52]	; 0x34
 80026c0:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c4:	2201      	movs	r2, #1
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026d2:	2102      	movs	r1, #2
 80026d4:	430a      	orrs	r2, r1
 80026d6:	635a      	str	r2, [r3, #52]	; 0x34
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_I2S_MspInit+0x13c>)
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S1_WS
    PB3     ------> I2S1_CK
    PB4     ------> I2S1_MCK
    PB5     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0212      	lsls	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2202      	movs	r2, #2
 80026f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2200      	movs	r2, #0
 80026f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	2200      	movs	r2, #0
 80026fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	2200      	movs	r2, #0
 8002702:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	193a      	adds	r2, r7, r4
 8002706:	23a0      	movs	r3, #160	; 0xa0
 8002708:	05db      	lsls	r3, r3, #23
 800270a:	0011      	movs	r1, r2
 800270c:	0018      	movs	r0, r3
 800270e:	f001 f8d1 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002712:	0021      	movs	r1, r4
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2238      	movs	r2, #56	; 0x38
 8002718:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2202      	movs	r2, #2
 800271e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	187b      	adds	r3, r7, r1
 8002734:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_I2S_MspInit+0x140>)
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f001 f8bb 	bl	80038b4 <HAL_GPIO_Init>

    /* I2S1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <HAL_I2S_MspInit+0x148>)
 8002742:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002746:	2211      	movs	r2, #17
 8002748:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800274a:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 800274c:	2210      	movs	r2, #16
 800274e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002756:	4b18      	ldr	r3, [pc, #96]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	0052      	lsls	r2, r2, #1
 8002762:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	00d2      	lsls	r2, r2, #3
 800276a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002778:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fe98 	bl	80034b0 <HAL_DMA_Init>
 8002780:	1e03      	subs	r3, r0, #0
 8002782:	d001      	beq.n	8002788 <HAL_I2S_MspInit+0x114>
    {
      Error_Handler();
 8002784:	f7ff febe 	bl	8002504 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi1_tx);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 800278c:	62da      	str	r2, [r3, #44]	; 0x2c
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_I2S_MspInit+0x144>)
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28

    /* I2S1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002794:	2200      	movs	r2, #0
 8002796:	2100      	movs	r1, #0
 8002798:	2019      	movs	r0, #25
 800279a:	f000 fe57 	bl	800344c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800279e:	2019      	movs	r0, #25
 80027a0:	f000 fe69 	bl	8003476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b00b      	add	sp, #44	; 0x2c
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	40013000 	.word	0x40013000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	50000400 	.word	0x50000400
 80027b8:	20003440 	.word	0x20003440
 80027bc:	40020008 	.word	0x40020008

080027c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b08b      	sub	sp, #44	; 0x2c
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	2414      	movs	r4, #20
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	0018      	movs	r0, r3
 80027ce:	2314      	movs	r3, #20
 80027d0:	001a      	movs	r2, r3
 80027d2:	2100      	movs	r1, #0
 80027d4:	f007 f884 	bl	80098e0 <memset>
  if(hspi->Instance==SPI2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_SPI_MspInit+0xc8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d14d      	bne.n	800287e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80027e2:	4b2a      	ldr	r3, [pc, #168]	; (800288c <HAL_SPI_MspInit+0xcc>)
 80027e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e6:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_SPI_MspInit+0xcc>)
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	01c9      	lsls	r1, r1, #7
 80027ec:	430a      	orrs	r2, r1
 80027ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80027f0:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_SPI_MspInit+0xcc>)
 80027f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_SPI_MspInit+0xcc>)
 8002800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_SPI_MspInit+0xcc>)
 8002804:	2102      	movs	r1, #2
 8002806:	430a      	orrs	r2, r1
 8002808:	635a      	str	r2, [r3, #52]	; 0x34
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_SPI_MspInit+0xcc>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	2202      	movs	r2, #2
 8002810:	4013      	ands	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB6     ------> SPI2_MISO
    PB7     ------> SPI2_MOSI
    PB8     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002816:	193b      	adds	r3, r7, r4
 8002818:	2240      	movs	r2, #64	; 0x40
 800281a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2202      	movs	r2, #2
 8002820:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	193b      	adds	r3, r7, r4
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	193b      	adds	r3, r7, r4
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI2;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2204      	movs	r2, #4
 8002832:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	193b      	adds	r3, r7, r4
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_SPI_MspInit+0xd0>)
 8002838:	0019      	movs	r1, r3
 800283a:	0010      	movs	r0, r2
 800283c:	f001 f83a 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002840:	0021      	movs	r1, r4
 8002842:	187b      	adds	r3, r7, r1
 8002844:	22c0      	movs	r2, #192	; 0xc0
 8002846:	0052      	lsls	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2202      	movs	r2, #2
 800284e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	187b      	adds	r3, r7, r1
 8002858:	2200      	movs	r2, #0
 800285a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2201      	movs	r2, #1
 8002860:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	187b      	adds	r3, r7, r1
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_SPI_MspInit+0xd0>)
 8002866:	0019      	movs	r1, r3
 8002868:	0010      	movs	r0, r2
 800286a:	f001 f823 	bl	80038b4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	201a      	movs	r0, #26
 8002874:	f000 fdea 	bl	800344c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002878:	201a      	movs	r0, #26
 800287a:	f000 fdfc 	bl	8003476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b00b      	add	sp, #44	; 0x2c
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40003800 	.word	0x40003800
 800288c:	40021000 	.word	0x40021000
 8002890:	50000400 	.word	0x50000400

08002894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <HAL_TIM_Base_MspInit+0x38>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10d      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_TIM_Base_MspInit+0x3c>)
 80028a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_TIM_Base_MspInit+0x3c>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	0109      	lsls	r1, r1, #4
 80028b0:	430a      	orrs	r2, r1
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_TIM_Base_MspInit+0x3c>)
 80028b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b089      	sub	sp, #36	; 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	240c      	movs	r4, #12
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	0018      	movs	r0, r3
 80028e2:	2314      	movs	r3, #20
 80028e4:	001a      	movs	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	f006 fffa 	bl	80098e0 <memset>
  if(htim->Instance==TIM1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <HAL_TIM_MspPostInit+0x74>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d123      	bne.n	800293e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_TIM_MspPostInit+0x78>)
 80028f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_TIM_MspPostInit+0x78>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	635a      	str	r2, [r3, #52]	; 0x34
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_TIM_MspPostInit+0x78>)
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	2201      	movs	r2, #1
 8002908:	4013      	ands	r3, r2
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	0052      	lsls	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	0021      	movs	r1, r4
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2202      	movs	r2, #2
 800291c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2202      	movs	r2, #2
 8002922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2203      	movs	r2, #3
 8002928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2202      	movs	r2, #2
 800292e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	187a      	adds	r2, r7, r1
 8002932:	23a0      	movs	r3, #160	; 0xa0
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f000 ffbb 	bl	80038b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b009      	add	sp, #36	; 0x24
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	40012c00 	.word	0x40012c00
 800294c:	40021000 	.word	0x40021000

08002950 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b08b      	sub	sp, #44	; 0x2c
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	2414      	movs	r4, #20
 800295a:	193b      	adds	r3, r7, r4
 800295c:	0018      	movs	r0, r3
 800295e:	2314      	movs	r3, #20
 8002960:	001a      	movs	r2, r3
 8002962:	2100      	movs	r1, #0
 8002964:	f006 ffbc 	bl	80098e0 <memset>
  if(husart->Instance==USART3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <HAL_USART_MspInit+0xe0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d159      	bne.n	8002a26 <HAL_USART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002972:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 8002974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	02c9      	lsls	r1, r1, #11
 800297c:	430a      	orrs	r2, r1
 800297e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002980:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 8002982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	02db      	lsls	r3, r3, #11
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 80029a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 80029ac:	2102      	movs	r1, #2
 80029ae:	430a      	orrs	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_USART_MspInit+0xe4>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PA5     ------> USART3_TX
    PB0     ------> USART3_RX
    PB1     ------> USART3_CK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	2220      	movs	r2, #32
 80029c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	193b      	adds	r3, r7, r4
 80029c6:	2202      	movs	r2, #2
 80029c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2203      	movs	r2, #3
 80029d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2204      	movs	r2, #4
 80029da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	193a      	adds	r2, r7, r4
 80029de:	23a0      	movs	r3, #160	; 0xa0
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 ff65 	bl	80038b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ea:	0021      	movs	r1, r4
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2203      	movs	r2, #3
 80029f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2202      	movs	r2, #2
 80029f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2203      	movs	r2, #3
 8002a02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2204      	movs	r2, #4
 8002a08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	; (8002a38 <HAL_USART_MspInit+0xe8>)
 8002a0e:	0019      	movs	r1, r3
 8002a10:	0010      	movs	r0, r2
 8002a12:	f000 ff4f 	bl	80038b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8002a16:	2200      	movs	r2, #0
 8002a18:	2100      	movs	r1, #0
 8002a1a:	201d      	movs	r0, #29
 8002a1c:	f000 fd16 	bl	800344c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8002a20:	201d      	movs	r0, #29
 8002a22:	f000 fd28 	bl	8003476 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b00b      	add	sp, #44	; 0x2c
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	40004800 	.word	0x40004800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	50000400 	.word	0x50000400

08002a3c <LL_USART_IsActiveFlag_FE>:
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d101      	bne.n	8002a54 <LL_USART_IsActiveFlag_FE+0x18>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <LL_USART_IsActiveFlag_FE+0x1a>
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <LL_USART_IsActiveFlag_NE>:
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d101      	bne.n	8002a76 <LL_USART_IsActiveFlag_NE+0x18>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <LL_USART_IsActiveFlag_NE+0x1a>
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <LL_USART_IsActiveFlag_ORE>:
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d101      	bne.n	8002a98 <LL_USART_IsActiveFlag_ORE+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_USART_IsActiveFlag_ORE+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d101      	bne.n	8002aba <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <LL_USART_IsEnabledIT_RXNE_RXFNE>:
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d101      	bne.n	8002adc <LL_USART_IsEnabledIT_RXNE_RXFNE+0x18>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e000      	b.n	8002ade <LL_USART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	0018      	movs	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <HardFault_Handler+0x4>

08002af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b04:	46c0      	nop			; (mov r8, r8)
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0e:	f000 f93b 	bl	8002d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <DMA1_Channel1_IRQHandler+0x14>)
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 fdba 	bl	8003698 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b24:	46c0      	nop			; (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	20003440 	.word	0x20003440

08002b30 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <I2C1_IRQHandler+0x2c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	23e0      	movs	r3, #224	; 0xe0
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d004      	beq.n	8002b4c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <I2C1_IRQHandler+0x2c>)
 8002b44:	0018      	movs	r0, r3
 8002b46:	f001 f8c9 	bl	8003cdc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002b4a:	e003      	b.n	8002b54 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <I2C1_IRQHandler+0x2c>)
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f001 f8aa 	bl	8003ca8 <HAL_I2C_EV_IRQHandler>
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	20003220 	.word	0x20003220

08002b60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s1);
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <SPI1_IRQHandler+0x14>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f002 f82c 	bl	8004bc4 <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	2000337c 	.word	0x2000337c

08002b78 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <SPI2_IRQHandler+0x14>)
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f004 f846 	bl	8006c10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	200031a8 	.word	0x200031a8

08002b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	USART2->ICR|=USART_ICR_ORECF;
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_FECF;
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	621a      	str	r2, [r3, #32]
	USART2->ICR|=USART_ICR_NECF;
 8002bac:	4b1f      	ldr	r3, [pc, #124]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	621a      	str	r2, [r3, #32]
	if(LL_USART_IsActiveFlag_RXNE(USART2) && LL_USART_IsEnabledIT_RXNE(USART2))
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ff71 	bl	8002aa2 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d009      	beq.n	8002bd8 <USART2_IRQHandler+0x48>
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff ff7c 	bl	8002ac4 <LL_USART_IsEnabledIT_RXNE_RXFNE>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d003      	beq.n	8002bd8 <USART2_IRQHandler+0x48>
	  {
	    USART2_RX_Callback();// launching the receiving callback function //LL implentation
 8002bd0:	f7fe f9ae 	bl	8000f30 <USART2_RX_Callback>
	  {
 8002bd4:	46c0      	nop			; (mov r8, r8)
	  }
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bd6:	e025      	b.n	8002c24 <USART2_IRQHandler+0x94>
		  USART2->ICR|=USART_ICR_ORECF;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bda:	6a1a      	ldr	r2, [r3, #32]
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bde:	2108      	movs	r1, #8
 8002be0:	430a      	orrs	r2, r1
 8002be2:	621a      	str	r2, [r3, #32]
	    if(LL_USART_IsActiveFlag_ORE(USART2))//clear the overrun flag by reading from RDR
 8002be4:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff ff4a 	bl	8002a80 <LL_USART_IsActiveFlag_ORE>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d008      	beq.n	8002c02 <USART2_IRQHandler+0x72>
	    	USART2->ICR|=USART_ICR_ORECF;
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bf2:	6a1a      	ldr	r2, [r3, #32]
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bf6:	2108      	movs	r1, #8
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	621a      	str	r2, [r3, #32]
	      (void) USART2->RDR;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c00:	e010      	b.n	8002c24 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_FE(USART2))//clear another flag by reading from RDR
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff ff19 	bl	8002a3c <LL_USART_IsActiveFlag_FE>
 8002c0a:	1e03      	subs	r3, r0, #0
 8002c0c:	d002      	beq.n	8002c14 <USART2_IRQHandler+0x84>
	      (void) USART2->RDR;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c12:	e007      	b.n	8002c24 <USART2_IRQHandler+0x94>
	    else if(LL_USART_IsActiveFlag_NE(USART2))//clear another flag by reading from RDR
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f7ff ff21 	bl	8002a5e <LL_USART_IsActiveFlag_NE>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <USART2_IRQHandler+0x94>
	      (void) USART2->RDR;
 8002c20:	4b02      	ldr	r3, [pc, #8]	; (8002c2c <USART2_IRQHandler+0x9c>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	40004400 	.word	0x40004400

08002c30 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart3);
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <USART3_4_LPUART1_IRQHandler+0x14>)
 8002c36:	0018      	movs	r0, r3
 8002c38:	f005 fcf8 	bl	800862c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	200032bc 	.word	0x200032bc

08002c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <SystemInit+0x14>)
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	0512      	lsls	r2, r2, #20
 8002c52:	609a      	str	r2, [r3, #8]
#endif
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c60:	480d      	ldr	r0, [pc, #52]	; (8002c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c64:	f7ff fff0 	bl	8002c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c68:	480c      	ldr	r0, [pc, #48]	; (8002c9c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c6a:	490d      	ldr	r1, [pc, #52]	; (8002ca0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <LoopForever+0xe>)
  movs r3, #0
 8002c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c70:	e002      	b.n	8002c78 <LoopCopyDataInit>

08002c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c76:	3304      	adds	r3, #4

08002c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c7c:	d3f9      	bcc.n	8002c72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c80:	4c0a      	ldr	r4, [pc, #40]	; (8002cac <LoopForever+0x16>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c84:	e001      	b.n	8002c8a <LoopFillZerobss>

08002c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c88:	3204      	adds	r2, #4

08002c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c8c:	d3fb      	bcc.n	8002c86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c8e:	f006 fe03 	bl	8009898 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c92:	f7fd fc41 	bl	8000518 <main>

08002c96 <LoopForever>:

LoopForever:
  b LoopForever
 8002c96:	e7fe      	b.n	8002c96 <LoopForever>
  ldr   r0, =_estack
 8002c98:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca0:	20003140 	.word	0x20003140
  ldr r2, =_sidata
 8002ca4:	080099f8 	.word	0x080099f8
  ldr r2, =_sbss
 8002ca8:	20003140 	.word	0x20003140
  ldr r4, =_ebss
 8002cac:	200034c4 	.word	0x200034c4

08002cb0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cb0:	e7fe      	b.n	8002cb0 <ADC1_COMP_IRQHandler>
	...

08002cb4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_Init+0x3c>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_Init+0x3c>)
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	0049      	lsls	r1, r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f000 f810 	bl	8002cf4 <HAL_InitTick>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002cd8:	1dfb      	adds	r3, r7, #7
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e001      	b.n	8002ce4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ce0:	f7ff fc16 	bl	8002510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b002      	add	sp, #8
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cfc:	230f      	movs	r3, #15
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_InitTick+0x88>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d02b      	beq.n	8002d64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <HAL_InitTick+0x8c>)
 8002d0e:	681c      	ldr	r4, [r3, #0]
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_InitTick+0x88>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	0019      	movs	r1, r3
 8002d16:	23fa      	movs	r3, #250	; 0xfa
 8002d18:	0098      	lsls	r0, r3, #2
 8002d1a:	f7fd f9f3 	bl	8000104 <__udivsi3>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	0019      	movs	r1, r3
 8002d22:	0020      	movs	r0, r4
 8002d24:	f7fd f9ee 	bl	8000104 <__udivsi3>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fbb3 	bl	8003496 <HAL_SYSTICK_Config>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d112      	bne.n	8002d5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d80a      	bhi.n	8002d50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	425b      	negs	r3, r3
 8002d40:	2200      	movs	r2, #0
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 fb82 	bl	800344c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_InitTick+0x90>)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00d      	b.n	8002d6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d50:	230f      	movs	r3, #15
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e008      	b.n	8002d6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	2201      	movs	r2, #1
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	e003      	b.n	8002d6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d64:	230f      	movs	r3, #15
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	18fb      	adds	r3, r7, r3
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b005      	add	sp, #20
 8002d78:	bd90      	pop	{r4, r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	2000313c 	.word	0x2000313c
 8002d80:	20003134 	.word	0x20003134
 8002d84:	20003138 	.word	0x20003138

08002d88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x1c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	001a      	movs	r2, r3
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_IncTick+0x20>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	18d2      	adds	r2, r2, r3
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <HAL_IncTick+0x20>)
 8002d9a:	601a      	str	r2, [r3, #0]
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	2000313c 	.word	0x2000313c
 8002da8:	200034c0 	.word	0x200034c0

08002dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  return uwTick;
 8002db0:	4b02      	ldr	r3, [pc, #8]	; (8002dbc <HAL_GetTick+0x10>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	200034c0 	.word	0x200034c0

08002dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_GetTick>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	d005      	beq.n	8002de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_Delay+0x44>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	001a      	movs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	f7ff ffe0 	bl	8002dac <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d8f7      	bhi.n	8002de8 <HAL_Delay+0x28>
  {
  }
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	2000313c 	.word	0x2000313c

08002e08 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a06      	ldr	r2, [pc, #24]	; (8002e30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b002      	add	sp, #8
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	fffff9ff 	.word	0xfffff9ff

08002e34 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	58d2      	ldr	r2, [r2, r3]
 8002e42:	4904      	ldr	r1, [pc, #16]	; (8002e54 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	508b      	str	r3, [r1, r2]
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021800 	.word	0x40021800

08002e58 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <LL_EXTI_DisableIT_0_31+0x24>)
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	58d3      	ldr	r3, [r2, r3]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	43d2      	mvns	r2, r2
 8002e6a:	4904      	ldr	r1, [pc, #16]	; (8002e7c <LL_EXTI_DisableIT_0_31+0x24>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	508b      	str	r3, [r1, r2]
}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b002      	add	sp, #8
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40021800 	.word	0x40021800

08002e80 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e88:	4a05      	ldr	r2, [pc, #20]	; (8002ea0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e8a:	2384      	movs	r3, #132	; 0x84
 8002e8c:	58d2      	ldr	r2, [r2, r3]
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	2284      	movs	r2, #132	; 0x84
 8002e96:	508b      	str	r3, [r1, r2]

}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021800 	.word	0x40021800

08002ea4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002eae:	2384      	movs	r3, #132	; 0x84
 8002eb0:	58d3      	ldr	r3, [r2, r3]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	43d2      	mvns	r2, r2
 8002eb6:	4904      	ldr	r1, [pc, #16]	; (8002ec8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2284      	movs	r2, #132	; 0x84
 8002ebc:	508b      	str	r3, [r1, r2]
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	40021800 	.word	0x40021800

08002ecc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021800 	.word	0x40021800

08002eec <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	601a      	str	r2, [r3, #0]

}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b002      	add	sp, #8
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	40021800 	.word	0x40021800

08002f10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002f18:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021800 	.word	0x40021800

08002f30 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002f38:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	43d9      	mvns	r1, r3
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002f42:	400a      	ands	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b002      	add	sp, #8
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	40021800 	.word	0x40021800

08002f54 <LL_EXTI_ClearFallingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFallingFlag_0_31(uint32_t ExtiLine)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <LL_EXTI_ClearFallingFlag_0_31+0x18>)
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	611a      	str	r2, [r3, #16]
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021800 	.word	0x40021800

08002f70 <LL_EXTI_ClearRisingFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_20
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearRisingFlag_0_31(uint32_t ExtiLine)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <LL_EXTI_ClearRisingFlag_0_31+0x18>)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	60da      	str	r2, [r3, #12]
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b002      	add	sp, #8
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	40021800 	.word	0x40021800

08002f8c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	211f      	movs	r1, #31
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t * comp_common_odd;
  __IO uint32_t * comp_common_even;
#endif

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_COMP_Init+0x22>
  {
    status = HAL_ERROR;
 8002fa6:	187b      	adds	r3, r7, r1
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e13d      	b.n	800322a <HAL_COMP_Init+0x29e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0fdb      	lsrs	r3, r3, #31
 8002fb6:	07da      	lsls	r2, r3, #31
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	061b      	lsls	r3, r3, #24
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d104      	bne.n	8002fca <HAL_COMP_Init+0x3e>
  {
    status = HAL_ERROR;
 8002fc0:	231f      	movs	r3, #31
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e12f      	b.n	800322a <HAL_COMP_Init+0x29e>
    if(hcomp->Init.WindowMode != COMP_WINDOWMODE_DISABLE)
    {
      assert_param(IS_COMP_WINDOWOUTPUT(hcomp->Init.WindowOutput));
    }

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2229      	movs	r2, #41	; 0x29
 8002fce:	5c9b      	ldrb	r3, [r3, r2]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <HAL_COMP_Init+0x60>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2228      	movs	r2, #40	; 0x28
 8002fda:	2100      	movs	r1, #0
 8002fdc:	5499      	strb	r1, [r3, r2]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff faba 	bl	8002560 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2230      	movs	r2, #48	; 0x30
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695a      	ldr	r2, [r3, #20]
               | hcomp->Init.InputPlus
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (  hcomp->Init.InputMinus
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a85      	ldr	r2, [pc, #532]	; (8003238 <HAL_COMP_Init+0x2ac>)
 8003024:	4013      	ands	r3, r2
 8003026:	0019      	movs	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(*comp_common_odd, COMP_CSR_WINOUT);
        CLEAR_BIT(*comp_common_even, COMP_CSR_WINOUT);
        break;
    }
#else
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	429a      	cmp	r2, r3
 800303c:	d10d      	bne.n	800305a <HAL_COMP_Init+0xce>
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 800303e:	4b7f      	ldr	r3, [pc, #508]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b7e      	ldr	r3, [pc, #504]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003044:	497e      	ldr	r1, [pc, #504]	; (8003240 <HAL_COMP_Init+0x2b4>)
 8003046:	400a      	ands	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
      SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800304a:	4b7c      	ldr	r3, [pc, #496]	; (800323c <HAL_COMP_Init+0x2b0>)
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4b7b      	ldr	r3, [pc, #492]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	0109      	lsls	r1, r1, #4
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	e01f      	b.n	800309a <HAL_COMP_Init+0x10e>
    }
    else if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP2_INPUT_PLUS_COMMON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	23c0      	movs	r3, #192	; 0xc0
 8003060:	015b      	lsls	r3, r3, #5
 8003062:	429a      	cmp	r2, r3
 8003064:	d10d      	bne.n	8003082 <HAL_COMP_Init+0xf6>
    {
      SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003066:	4b75      	ldr	r3, [pc, #468]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b74      	ldr	r3, [pc, #464]	; (800323c <HAL_COMP_Init+0x2b0>)
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	0109      	lsls	r1, r1, #4
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 8003074:	4b71      	ldr	r3, [pc, #452]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4b70      	ldr	r3, [pc, #448]	; (800323c <HAL_COMP_Init+0x2b0>)
 800307a:	4971      	ldr	r1, [pc, #452]	; (8003240 <HAL_COMP_Init+0x2b4>)
 800307c:	400a      	ands	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	e00b      	b.n	800309a <HAL_COMP_Init+0x10e>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINMODE);
 8003082:	4b6e      	ldr	r3, [pc, #440]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b6d      	ldr	r3, [pc, #436]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003088:	496d      	ldr	r1, [pc, #436]	; (8003240 <HAL_COMP_Init+0x2b4>)
 800308a:	400a      	ands	r2, r1
 800308c:	601a      	str	r2, [r3, #0]
      CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINMODE);
 800308e:	4b6b      	ldr	r3, [pc, #428]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4b6a      	ldr	r3, [pc, #424]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003094:	496a      	ldr	r1, [pc, #424]	; (8003240 <HAL_COMP_Init+0x2b4>)
 8003096:	400a      	ands	r2, r1
 8003098:	605a      	str	r2, [r3, #4]

    /* Set window mode output */
    /* Note: Window mode mode output can also be used when window mode        */
    /*       is disabled, to use comparators in independent mode with their   */
    /*       output connected through exclusive-or circuitry.                 */
    switch (hcomp->Init.WindowOutput)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	22a0      	movs	r2, #160	; 0xa0
 80030a0:	01d2      	lsls	r2, r2, #7
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d017      	beq.n	80030d6 <HAL_COMP_Init+0x14a>
 80030a6:	22a0      	movs	r2, #160	; 0xa0
 80030a8:	01d2      	lsls	r2, r2, #7
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d830      	bhi.n	8003110 <HAL_COMP_Init+0x184>
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d01f      	beq.n	80030f2 <HAL_COMP_Init+0x166>
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	01d2      	lsls	r2, r2, #7
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d12a      	bne.n	8003110 <HAL_COMP_Init+0x184>
    {
      case COMP_WINDOWOUTPUT_COMP1:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030ba:	4b60      	ldr	r3, [pc, #384]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b5f      	ldr	r3, [pc, #380]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	01c9      	lsls	r1, r1, #7
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80030c8:	4b5c      	ldr	r3, [pc, #368]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030ce:	495d      	ldr	r1, [pc, #372]	; (8003244 <HAL_COMP_Init+0x2b8>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	605a      	str	r2, [r3, #4]
        break;
 80030d4:	e029      	b.n	800312a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_COMP2:
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030d6:	4b59      	ldr	r3, [pc, #356]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b58      	ldr	r3, [pc, #352]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030dc:	4959      	ldr	r1, [pc, #356]	; (8003244 <HAL_COMP_Init+0x2b8>)
 80030de:	400a      	ands	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 80030e2:	4b56      	ldr	r3, [pc, #344]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	4b55      	ldr	r3, [pc, #340]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	01c9      	lsls	r1, r1, #7
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
        break;
 80030f0:	e01b      	b.n	800312a <HAL_COMP_Init+0x19e>

      case COMP_WINDOWOUTPUT_BOTH:
        SET_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 80030f2:	4b52      	ldr	r3, [pc, #328]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b51      	ldr	r3, [pc, #324]	; (800323c <HAL_COMP_Init+0x2b0>)
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	01c9      	lsls	r1, r1, #7
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
        SET_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 8003100:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	4b4d      	ldr	r3, [pc, #308]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	01c9      	lsls	r1, r1, #7
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
        break;
 800310e:	e00c      	b.n	800312a <HAL_COMP_Init+0x19e>

      default: /* COMP_WINDOWOUTPUT_EACH_COMP */
        CLEAR_BIT(COMP12_COMMON->CSR_ODD, COMP_CSR_WINOUT);
 8003110:	4b4a      	ldr	r3, [pc, #296]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b49      	ldr	r3, [pc, #292]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003116:	494b      	ldr	r1, [pc, #300]	; (8003244 <HAL_COMP_Init+0x2b8>)
 8003118:	400a      	ands	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(COMP12_COMMON->CSR_EVEN, COMP_CSR_WINOUT);
 800311c:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_COMP_Init+0x2b0>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4b46      	ldr	r3, [pc, #280]	; (800323c <HAL_COMP_Init+0x2b0>)
 8003122:	4948      	ldr	r1, [pc, #288]	; (8003244 <HAL_COMP_Init+0x2b8>)
 8003124:	400a      	ands	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
        break;
 8003128:	46c0      	nop			; (mov r8, r8)
    }
#endif

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, (COMP_CSR_INMSEL_1 | COMP_CSR_INMSEL_0)) != 0UL) &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2230      	movs	r2, #48	; 0x30
 8003132:	4013      	ands	r3, r2
 8003134:	d016      	beq.n	8003164 <HAL_COMP_Init+0x1d8>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d113      	bne.n	8003164 <HAL_COMP_Init+0x1d8>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800313c:	4b42      	ldr	r3, [pc, #264]	; (8003248 <HAL_COMP_Init+0x2bc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4942      	ldr	r1, [pc, #264]	; (800324c <HAL_COMP_Init+0x2c0>)
 8003142:	0018      	movs	r0, r3
 8003144:	f7fc ffde 	bl	8000104 <__udivsi3>
 8003148:	0003      	movs	r3, r0
 800314a:	001a      	movs	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	189b      	adds	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003156:	e002      	b.n	800315e <HAL_COMP_Init+0x1d2>
      {
        wait_loop_index--;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3b01      	subs	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f9      	bne.n	8003158 <HAL_COMP_Init+0x1cc>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a34      	ldr	r2, [pc, #208]	; (800323c <HAL_COMP_Init+0x2b0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d102      	bne.n	8003174 <HAL_COMP_Init+0x1e8>
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	029b      	lsls	r3, r3, #10
 8003172:	e001      	b.n	8003178 <HAL_COMP_Init+0x1ec>
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	02db      	lsls	r3, r3, #11
 8003178:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2203      	movs	r2, #3
 8003180:	4013      	ands	r3, r2
 8003182:	d040      	beq.n	8003206 <HAL_COMP_Init+0x27a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003188:	2210      	movs	r2, #16
 800318a:	4013      	ands	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_COMP_Init+0x20c>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff fe9b 	bl	8002ecc <LL_EXTI_EnableRisingTrig_0_31>
 8003196:	e003      	b.n	80031a0 <HAL_COMP_Init+0x214>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff fea6 	bl	8002eec <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	2220      	movs	r2, #32
 80031a6:	4013      	ands	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_COMP_Init+0x228>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff feaf 	bl	8002f10 <LL_EXTI_EnableFallingTrig_0_31>
 80031b2:	e003      	b.n	80031bc <HAL_COMP_Init+0x230>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	0018      	movs	r0, r3
 80031b8:	f7ff feba 	bl	8002f30 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearRisingFlag_0_31(exti_line);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7ff fed6 	bl	8002f70 <LL_EXTI_ClearRisingFlag_0_31>
      LL_EXTI_ClearFallingFlag_0_31(exti_line);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7ff fec4 	bl	8002f54 <LL_EXTI_ClearFallingFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2202      	movs	r2, #2
 80031d2:	4013      	ands	r3, r2
 80031d4:	d004      	beq.n	80031e0 <HAL_COMP_Init+0x254>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff fe51 	bl	8002e80 <LL_EXTI_EnableEvent_0_31>
 80031de:	e003      	b.n	80031e8 <HAL_COMP_Init+0x25c>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	0018      	movs	r0, r3
 80031e4:	f7ff fe5e 	bl	8002ea4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_COMP_Init+0x270>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7ff fe1d 	bl	8002e34 <LL_EXTI_EnableIT_0_31>
 80031fa:	e00c      	b.n	8003216 <HAL_COMP_Init+0x28a>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7ff fe2a 	bl	8002e58 <LL_EXTI_DisableIT_0_31>
 8003204:	e007      	b.n	8003216 <HAL_COMP_Init+0x28a>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff fe4b 	bl	8002ea4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff fe21 	bl	8002e58 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2229      	movs	r2, #41	; 0x29
 800321a:	5c9b      	ldrb	r3, [r3, r2]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_COMP_Init+0x29e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2229      	movs	r2, #41	; 0x29
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800322a:	231f      	movs	r3, #31
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	781b      	ldrb	r3, [r3, #0]
}
 8003230:	0018      	movs	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	b008      	add	sp, #32
 8003236:	bd80      	pop	{r7, pc}
 8003238:	fe00740f 	.word	0xfe00740f
 800323c:	40010200 	.word	0x40010200
 8003240:	fffff7ff 	.word	0xfffff7ff
 8003244:	ffffbfff 	.word	0xffffbfff
 8003248:	20003134 	.word	0x20003134
 800324c:	00030d40 	.word	0x00030d40

08003250 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800325c:	210f      	movs	r1, #15
 800325e:	187b      	adds	r3, r7, r1
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_COMP_Start+0x22>
  {
    status = HAL_ERROR;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e034      	b.n	80032dc <HAL_COMP_Start+0x8c>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0fdb      	lsrs	r3, r3, #31
 800327a:	07da      	lsls	r2, r3, #31
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	061b      	lsls	r3, r3, #24
 8003280:	429a      	cmp	r2, r3
 8003282:	d104      	bne.n	800328e <HAL_COMP_Start+0x3e>
  {
    status = HAL_ERROR;
 8003284:	230f      	movs	r3, #15
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e026      	b.n	80032dc <HAL_COMP_Start+0x8c>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2229      	movs	r2, #41	; 0x29
 8003292:	5c9b      	ldrb	r3, [r3, r2]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d11c      	bne.n	80032d4 <HAL_COMP_Start+0x84>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	430a      	orrs	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2229      	movs	r2, #41	; 0x29
 80032ae:	2102      	movs	r1, #2
 80032b0:	5499      	strb	r1, [r3, r2]
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_COMP_Start+0x9c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_COMP_Start+0xa0>)
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7fc ff23 	bl	8000104 <__udivsi3>
 80032be:	0003      	movs	r3, r0
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032c4:	e002      	b.n	80032cc <HAL_COMP_Start+0x7c>
      {
        wait_loop_index--;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_COMP_Start+0x76>
 80032d2:	e003      	b.n	80032dc <HAL_COMP_Start+0x8c>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032d4:	230f      	movs	r3, #15
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80032dc:	230f      	movs	r3, #15
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	20003134 	.word	0x20003134
 80032f0:	00030d40 	.word	0x00030d40

080032f4 <__NVIC_EnableIRQ>:
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	0002      	movs	r2, r0
 80032fc:	1dfb      	adds	r3, r7, #7
 80032fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b7f      	cmp	r3, #127	; 0x7f
 8003306:	d809      	bhi.n	800331c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	001a      	movs	r2, r3
 800330e:	231f      	movs	r3, #31
 8003310:	401a      	ands	r2, r3
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_EnableIRQ+0x30>)
 8003314:	2101      	movs	r1, #1
 8003316:	4091      	lsls	r1, r2
 8003318:	000a      	movs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
}
 800331c:	46c0      	nop			; (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	b002      	add	sp, #8
 8003322:	bd80      	pop	{r7, pc}
 8003324:	e000e100 	.word	0xe000e100

08003328 <__NVIC_SetPriority>:
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	0002      	movs	r2, r0
 8003330:	6039      	str	r1, [r7, #0]
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b7f      	cmp	r3, #127	; 0x7f
 800333c:	d828      	bhi.n	8003390 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800333e:	4a2f      	ldr	r2, [pc, #188]	; (80033fc <__NVIC_SetPriority+0xd4>)
 8003340:	1dfb      	adds	r3, r7, #7
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b25b      	sxtb	r3, r3
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	33c0      	adds	r3, #192	; 0xc0
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	589b      	ldr	r3, [r3, r2]
 800334e:	1dfa      	adds	r2, r7, #7
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	0011      	movs	r1, r2
 8003354:	2203      	movs	r2, #3
 8003356:	400a      	ands	r2, r1
 8003358:	00d2      	lsls	r2, r2, #3
 800335a:	21ff      	movs	r1, #255	; 0xff
 800335c:	4091      	lsls	r1, r2
 800335e:	000a      	movs	r2, r1
 8003360:	43d2      	mvns	r2, r2
 8003362:	401a      	ands	r2, r3
 8003364:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	019b      	lsls	r3, r3, #6
 800336a:	22ff      	movs	r2, #255	; 0xff
 800336c:	401a      	ands	r2, r3
 800336e:	1dfb      	adds	r3, r7, #7
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	0018      	movs	r0, r3
 8003374:	2303      	movs	r3, #3
 8003376:	4003      	ands	r3, r0
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800337c:	481f      	ldr	r0, [pc, #124]	; (80033fc <__NVIC_SetPriority+0xd4>)
 800337e:	1dfb      	adds	r3, r7, #7
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	b25b      	sxtb	r3, r3
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	430a      	orrs	r2, r1
 8003388:	33c0      	adds	r3, #192	; 0xc0
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	501a      	str	r2, [r3, r0]
}
 800338e:	e031      	b.n	80033f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003390:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <__NVIC_SetPriority+0xd8>)
 8003392:	1dfb      	adds	r3, r7, #7
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	0019      	movs	r1, r3
 8003398:	230f      	movs	r3, #15
 800339a:	400b      	ands	r3, r1
 800339c:	3b08      	subs	r3, #8
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3306      	adds	r3, #6
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	3304      	adds	r3, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1dfa      	adds	r2, r7, #7
 80033ac:	7812      	ldrb	r2, [r2, #0]
 80033ae:	0011      	movs	r1, r2
 80033b0:	2203      	movs	r2, #3
 80033b2:	400a      	ands	r2, r1
 80033b4:	00d2      	lsls	r2, r2, #3
 80033b6:	21ff      	movs	r1, #255	; 0xff
 80033b8:	4091      	lsls	r1, r2
 80033ba:	000a      	movs	r2, r1
 80033bc:	43d2      	mvns	r2, r2
 80033be:	401a      	ands	r2, r3
 80033c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	019b      	lsls	r3, r3, #6
 80033c6:	22ff      	movs	r2, #255	; 0xff
 80033c8:	401a      	ands	r2, r3
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	0018      	movs	r0, r3
 80033d0:	2303      	movs	r3, #3
 80033d2:	4003      	ands	r3, r0
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033d8:	4809      	ldr	r0, [pc, #36]	; (8003400 <__NVIC_SetPriority+0xd8>)
 80033da:	1dfb      	adds	r3, r7, #7
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	001c      	movs	r4, r3
 80033e0:	230f      	movs	r3, #15
 80033e2:	4023      	ands	r3, r4
 80033e4:	3b08      	subs	r3, #8
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	430a      	orrs	r2, r1
 80033ea:	3306      	adds	r3, #6
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	18c3      	adds	r3, r0, r3
 80033f0:	3304      	adds	r3, #4
 80033f2:	601a      	str	r2, [r3, #0]
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b003      	add	sp, #12
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	e000e100 	.word	0xe000e100
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	1e5a      	subs	r2, r3, #1
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	045b      	lsls	r3, r3, #17
 8003414:	429a      	cmp	r2, r3
 8003416:	d301      	bcc.n	800341c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003418:	2301      	movs	r3, #1
 800341a:	e010      	b.n	800343e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341c:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <SysTick_Config+0x44>)
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	3a01      	subs	r2, #1
 8003422:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003424:	2301      	movs	r3, #1
 8003426:	425b      	negs	r3, r3
 8003428:	2103      	movs	r1, #3
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff ff7c 	bl	8003328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SysTick_Config+0x44>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <SysTick_Config+0x44>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b002      	add	sp, #8
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	210f      	movs	r1, #15
 8003458:	187b      	adds	r3, r7, r1
 800345a:	1c02      	adds	r2, r0, #0
 800345c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	187b      	adds	r3, r7, r1
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b25b      	sxtb	r3, r3
 8003466:	0011      	movs	r1, r2
 8003468:	0018      	movs	r0, r3
 800346a:	f7ff ff5d 	bl	8003328 <__NVIC_SetPriority>
}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	46bd      	mov	sp, r7
 8003472:	b004      	add	sp, #16
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	0002      	movs	r2, r0
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b25b      	sxtb	r3, r3
 8003488:	0018      	movs	r0, r3
 800348a:	f7ff ff33 	bl	80032f4 <__NVIC_EnableIRQ>
}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b082      	sub	sp, #8
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f7ff ffaf 	bl	8003404 <SysTick_Config>
 80034a6:	0003      	movs	r3, r0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e077      	b.n	80035b2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3d      	ldr	r2, [pc, #244]	; (80035bc <HAL_DMA_Init+0x10c>)
 80034c8:	4694      	mov	ip, r2
 80034ca:	4463      	add	r3, ip
 80034cc:	2114      	movs	r1, #20
 80034ce:	0018      	movs	r0, r3
 80034d0:	f7fc fe18 	bl	8000104 <__udivsi3>
 80034d4:	0003      	movs	r3, r0
 80034d6:	009a      	lsls	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2225      	movs	r2, #37	; 0x25
 80034e0:	2102      	movs	r1, #2
 80034e2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4934      	ldr	r1, [pc, #208]	; (80035c0 <HAL_DMA_Init+0x110>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6819      	ldr	r1, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	431a      	orrs	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f000 f971 	bl	8003814 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	01db      	lsls	r3, r3, #7
 800353a:	429a      	cmp	r2, r3
 800353c:	d102      	bne.n	8003544 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354c:	213f      	movs	r1, #63	; 0x3f
 800354e:	400a      	ands	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800355a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <HAL_DMA_Init+0xd8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b04      	cmp	r3, #4
 800356a:	d80d      	bhi.n	8003588 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f97c 	bl	800386c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	e008      	b.n	800359a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2225      	movs	r2, #37	; 0x25
 80035a4:	2101      	movs	r1, #1
 80035a6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	bffdfff8 	.word	0xbffdfff8
 80035c0:	ffff800f 	.word	0xffff800f

080035c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	210f      	movs	r1, #15
 80035ce:	187b      	adds	r3, r7, r1
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2225      	movs	r2, #37	; 0x25
 80035d8:	5c9b      	ldrb	r3, [r3, r2]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d006      	beq.n	80035ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2204      	movs	r2, #4
 80035e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035e6:	187b      	adds	r3, r7, r1
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	e049      	b.n	8003682 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	210e      	movs	r1, #14
 80035fa:	438a      	bics	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	438a      	bics	r2, r1
 800360c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	491d      	ldr	r1, [pc, #116]	; (8003690 <HAL_DMA_Abort_IT+0xcc>)
 800361a:	400a      	ands	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_DMA_Abort_IT+0xd0>)
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	221c      	movs	r2, #28
 8003628:	4013      	ands	r3, r2
 800362a:	2201      	movs	r2, #1
 800362c:	409a      	lsls	r2, r3
 800362e:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_DMA_Abort_IT+0xd0>)
 8003630:	430a      	orrs	r2, r1
 8003632:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800363c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003650:	490f      	ldr	r1, [pc, #60]	; (8003690 <HAL_DMA_Abort_IT+0xcc>)
 8003652:	400a      	ands	r2, r1
 8003654:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800365e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2225      	movs	r2, #37	; 0x25
 8003664:	2101      	movs	r1, #1
 8003666:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	; 0x24
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	0010      	movs	r0, r2
 8003680:	4798      	blx	r3
    }
  }
  return status;
 8003682:	230f      	movs	r3, #15
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	781b      	ldrb	r3, [r3, #0]
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	fffffeff 	.word	0xfffffeff
 8003694:	40020000 	.word	0x40020000

08003698 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80036a0:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	221c      	movs	r2, #28
 80036b4:	4013      	ands	r3, r2
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	0013      	movs	r3, r2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4013      	ands	r3, r2
 80036c0:	d027      	beq.n	8003712 <HAL_DMA_IRQHandler+0x7a>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2204      	movs	r2, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d023      	beq.n	8003712 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2220      	movs	r2, #32
 80036d2:	4013      	ands	r3, r2
 80036d4:	d107      	bne.n	80036e6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2104      	movs	r1, #4
 80036e2:	438a      	bics	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80036e6:	4b44      	ldr	r3, [pc, #272]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	221c      	movs	r2, #28
 80036f0:	4013      	ands	r3, r2
 80036f2:	2204      	movs	r2, #4
 80036f4:	409a      	lsls	r2, r3
 80036f6:	4b40      	ldr	r3, [pc, #256]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	2b00      	cmp	r3, #0
 8003702:	d100      	bne.n	8003706 <HAL_DMA_IRQHandler+0x6e>
 8003704:	e073      	b.n	80037ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	0010      	movs	r0, r2
 800370e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003710:	e06d      	b.n	80037ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	221c      	movs	r2, #28
 8003718:	4013      	ands	r3, r2
 800371a:	2202      	movs	r2, #2
 800371c:	409a      	lsls	r2, r3
 800371e:	0013      	movs	r3, r2
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4013      	ands	r3, r2
 8003724:	d02e      	beq.n	8003784 <HAL_DMA_IRQHandler+0xec>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2202      	movs	r2, #2
 800372a:	4013      	ands	r3, r2
 800372c:	d02a      	beq.n	8003784 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2220      	movs	r2, #32
 8003736:	4013      	ands	r3, r2
 8003738:	d10b      	bne.n	8003752 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	210a      	movs	r1, #10
 8003746:	438a      	bics	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2225      	movs	r2, #37	; 0x25
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	221c      	movs	r2, #28
 800375c:	4013      	ands	r3, r2
 800375e:	2202      	movs	r2, #2
 8003760:	409a      	lsls	r2, r3
 8003762:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03a      	beq.n	80037ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	0010      	movs	r0, r2
 8003780:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003782:	e034      	b.n	80037ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	221c      	movs	r2, #28
 800378a:	4013      	ands	r3, r2
 800378c:	2208      	movs	r2, #8
 800378e:	409a      	lsls	r2, r3
 8003790:	0013      	movs	r3, r2
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4013      	ands	r3, r2
 8003796:	d02b      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x158>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2208      	movs	r2, #8
 800379c:	4013      	ands	r3, r2
 800379e:	d027      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	210e      	movs	r1, #14
 80037ac:	438a      	bics	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	221c      	movs	r2, #28
 80037ba:	4013      	ands	r3, r2
 80037bc:	2201      	movs	r2, #1
 80037be:	409a      	lsls	r2, r3
 80037c0:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <HAL_DMA_IRQHandler+0x160>)
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2225      	movs	r2, #37	; 0x25
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2224      	movs	r2, #36	; 0x24
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	0010      	movs	r0, r2
 80037ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46c0      	nop			; (mov r8, r8)
}
 80037f2:	46bd      	mov	sp, r7
 80037f4:	b004      	add	sp, #16
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40020000 	.word	0x40020000

080037fc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2225      	movs	r2, #37	; 0x25
 8003808:	5c9b      	ldrb	r3, [r3, r2]
 800380a:	b2db      	uxtb	r3, r3
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003824:	4694      	mov	ip, r2
 8003826:	4463      	add	r3, ip
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	001a      	movs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	001a      	movs	r2, r3
 8003836:	23ff      	movs	r3, #255	; 0xff
 8003838:	4013      	ands	r3, r2
 800383a:	3b08      	subs	r3, #8
 800383c:	2114      	movs	r1, #20
 800383e:	0018      	movs	r0, r3
 8003840:	f7fc fc60 	bl	8000104 <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a07      	ldr	r2, [pc, #28]	; (8003868 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800384c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	221f      	movs	r2, #31
 8003852:	4013      	ands	r3, r2
 8003854:	2201      	movs	r2, #1
 8003856:	409a      	lsls	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}
 8003864:	10008200 	.word	0x10008200
 8003868:	40020880 	.word	0x40020880

0800386c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	223f      	movs	r2, #63	; 0x3f
 800387a:	4013      	ands	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4a0a      	ldr	r2, [pc, #40]	; (80038ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003882:	4694      	mov	ip, r2
 8003884:	4463      	add	r3, ip
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	001a      	movs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a07      	ldr	r2, [pc, #28]	; (80038b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003892:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3b01      	subs	r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	4013      	ands	r3, r2
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b004      	add	sp, #16
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	1000823f 	.word	0x1000823f
 80038b0:	40020940 	.word	0x40020940

080038b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c2:	e147      	b.n	8003b54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4091      	lsls	r1, r2
 80038ce:	000a      	movs	r2, r1
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d100      	bne.n	80038dc <HAL_GPIO_Init+0x28>
 80038da:	e138      	b.n	8003b4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d00b      	beq.n	80038fc <HAL_GPIO_Init+0x48>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d007      	beq.n	80038fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038f0:	2b11      	cmp	r3, #17
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b12      	cmp	r3, #18
 80038fa:	d130      	bne.n	800395e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	409a      	lsls	r2, r3
 800390a:	0013      	movs	r3, r2
 800390c:	43da      	mvns	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	409a      	lsls	r2, r3
 800391e:	0013      	movs	r3, r2
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003932:	2201      	movs	r2, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	409a      	lsls	r2, r3
 8003938:	0013      	movs	r3, r2
 800393a:	43da      	mvns	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	2201      	movs	r2, #1
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
 8003950:	0013      	movs	r3, r2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	409a      	lsls	r2, r3
 800396c:	0013      	movs	r3, r2
 800396e:	43da      	mvns	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	409a      	lsls	r2, r3
 8003980:	0013      	movs	r3, r2
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0xea>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b12      	cmp	r3, #18
 800399c:	d123      	bne.n	80039e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3208      	adds	r2, #8
 80039a6:	0092      	lsls	r2, r2, #2
 80039a8:	58d3      	ldr	r3, [r2, r3]
 80039aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2207      	movs	r2, #7
 80039b0:	4013      	ands	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	409a      	lsls	r2, r3
 80039b8:	0013      	movs	r3, r2
 80039ba:	43da      	mvns	r2, r3
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2107      	movs	r1, #7
 80039ca:	400b      	ands	r3, r1
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	08da      	lsrs	r2, r3, #3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3208      	adds	r2, #8
 80039e0:	0092      	lsls	r2, r2, #2
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	2203      	movs	r2, #3
 80039f2:	409a      	lsls	r2, r3
 80039f4:	0013      	movs	r3, r2
 80039f6:	43da      	mvns	r2, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2203      	movs	r2, #3
 8003a04:	401a      	ands	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	055b      	lsls	r3, r3, #21
 8003a22:	4013      	ands	r3, r2
 8003a24:	d100      	bne.n	8003a28 <HAL_GPIO_Init+0x174>
 8003a26:	e092      	b.n	8003b4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a28:	4a50      	ldr	r2, [pc, #320]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	3318      	adds	r3, #24
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	589b      	ldr	r3, [r3, r2]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	220f      	movs	r2, #15
 8003a40:	409a      	lsls	r2, r3
 8003a42:	0013      	movs	r3, r2
 8003a44:	43da      	mvns	r2, r3
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	23a0      	movs	r3, #160	; 0xa0
 8003a50:	05db      	lsls	r3, r3, #23
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d013      	beq.n	8003a7e <HAL_GPIO_Init+0x1ca>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a45      	ldr	r2, [pc, #276]	; (8003b70 <HAL_GPIO_Init+0x2bc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00d      	beq.n	8003a7a <HAL_GPIO_Init+0x1c6>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a44      	ldr	r2, [pc, #272]	; (8003b74 <HAL_GPIO_Init+0x2c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <HAL_GPIO_Init+0x1c2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a43      	ldr	r2, [pc, #268]	; (8003b78 <HAL_GPIO_Init+0x2c4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d101      	bne.n	8003a72 <HAL_GPIO_Init+0x1be>
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e006      	b.n	8003a80 <HAL_GPIO_Init+0x1cc>
 8003a72:	2305      	movs	r3, #5
 8003a74:	e004      	b.n	8003a80 <HAL_GPIO_Init+0x1cc>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_Init+0x1cc>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x1cc>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	2103      	movs	r1, #3
 8003a84:	400a      	ands	r2, r1
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a90:	4936      	ldr	r1, [pc, #216]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3318      	adds	r3, #24
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a9e:	4a33      	ldr	r2, [pc, #204]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	58d3      	ldr	r3, [r2, r3]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	025b      	lsls	r3, r3, #9
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ac4:	4929      	ldr	r1, [pc, #164]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003acc:	4a27      	ldr	r2, [pc, #156]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003ace:	2384      	movs	r3, #132	; 0x84
 8003ad0:	58d3      	ldr	r3, [r2, r3]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	029b      	lsls	r3, r3, #10
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003af2:	491e      	ldr	r1, [pc, #120]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003af4:	2284      	movs	r2, #132	; 0x84
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003afa:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	43da      	mvns	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	035b      	lsls	r3, r3, #13
 8003b12:	4013      	ands	r3, r2
 8003b14:	d003      	beq.n	8003b1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	039b      	lsls	r3, r3, #14
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_GPIO_Init+0x2b8>)
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	3301      	adds	r3, #1
 8003b52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	40da      	lsrs	r2, r3
 8003b5c:	1e13      	subs	r3, r2, #0
 8003b5e:	d000      	beq.n	8003b62 <HAL_GPIO_Init+0x2ae>
 8003b60:	e6b0      	b.n	80038c4 <HAL_GPIO_Init+0x10>
  }
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b006      	add	sp, #24
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021800 	.word	0x40021800
 8003b70:	50000400 	.word	0x50000400
 8003b74:	50000800 	.word	0x50000800
 8003b78:	50000c00 	.word	0x50000c00

08003b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e082      	b.n	8003c94 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2241      	movs	r2, #65	; 0x41
 8003b92:	5c9b      	ldrb	r3, [r3, r2]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d107      	bne.n	8003baa <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2240      	movs	r2, #64	; 0x40
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fe fd11 	bl	80025cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2241      	movs	r2, #65	; 0x41
 8003bae:	2124      	movs	r1, #36	; 0x24
 8003bb0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	438a      	bics	r2, r1
 8003bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4934      	ldr	r1, [pc, #208]	; (8003c9c <HAL_I2C_Init+0x120>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4931      	ldr	r1, [pc, #196]	; (8003ca0 <HAL_I2C_Init+0x124>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d108      	bne.n	8003bfa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	0209      	lsls	r1, r1, #8
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	e007      	b.n	8003c0a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2184      	movs	r1, #132	; 0x84
 8003c04:	0209      	lsls	r1, r1, #8
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d104      	bne.n	8003c1c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	0112      	lsls	r2, r2, #4
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	491f      	ldr	r1, [pc, #124]	; (8003ca4 <HAL_I2C_Init+0x128>)
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	491a      	ldr	r1, [pc, #104]	; (8003ca0 <HAL_I2C_Init+0x124>)
 8003c38:	400a      	ands	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	0011      	movs	r1, r2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69d9      	ldr	r1, [r3, #28]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2241      	movs	r2, #65	; 0x41
 8003c80:	2120      	movs	r1, #32
 8003c82:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2242      	movs	r2, #66	; 0x42
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b002      	add	sp, #8
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	f0ffffff 	.word	0xf0ffffff
 8003ca0:	ffff7fff 	.word	0xffff7fff
 8003ca4:	02008000 	.word	0x02008000

08003ca8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	68f9      	ldr	r1, [r7, #12]
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
  }
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b004      	add	sp, #16
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	001a      	movs	r2, r3
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d010      	beq.n	8003d22 <HAL_I2C_ER_IRQHandler+0x46>
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	09db      	lsrs	r3, r3, #7
 8003d04:	001a      	movs	r2, r3
 8003d06:	2301      	movs	r3, #1
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d00a      	beq.n	8003d22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	2201      	movs	r2, #1
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	0052      	lsls	r2, r2, #1
 8003d20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	0a9b      	lsrs	r3, r3, #10
 8003d26:	001a      	movs	r2, r3
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d010      	beq.n	8003d50 <HAL_I2C_ER_IRQHandler+0x74>
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	09db      	lsrs	r3, r3, #7
 8003d32:	001a      	movs	r2, r3
 8003d34:	2301      	movs	r3, #1
 8003d36:	4013      	ands	r3, r2
 8003d38:	d00a      	beq.n	8003d50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	2208      	movs	r2, #8
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	00d2      	lsls	r2, r2, #3
 8003d4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	0a5b      	lsrs	r3, r3, #9
 8003d54:	001a      	movs	r2, r3
 8003d56:	2301      	movs	r3, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d010      	beq.n	8003d7e <HAL_I2C_ER_IRQHandler+0xa2>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	09db      	lsrs	r3, r3, #7
 8003d60:	001a      	movs	r2, r3
 8003d62:	2301      	movs	r3, #1
 8003d64:	4013      	ands	r3, r2
 8003d66:	d00a      	beq.n	8003d7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	0092      	lsls	r2, r2, #2
 8003d7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	220b      	movs	r2, #11
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d005      	beq.n	8003d98 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0011      	movs	r1, r2
 8003d92:	0018      	movs	r0, r3
 8003d94:	f000 fbd8 	bl	8004548 <I2C_ITError>
  }
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b006      	add	sp, #24
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	0008      	movs	r0, r1
 8003dca:	0011      	movs	r1, r2
 8003dcc:	1cfb      	adds	r3, r7, #3
 8003dce:	1c02      	adds	r2, r0, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	003b      	movs	r3, r7
 8003dd4:	1c0a      	adds	r2, r1, #0
 8003dd6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003de8:	46c0      	nop			; (mov r8, r8)
 8003dea:	46bd      	mov	sp, r7
 8003dec:	b002      	add	sp, #8
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003df8:	46c0      	nop			; (mov r8, r8)
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	b002      	add	sp, #8
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b002      	add	sp, #8
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	5c9b      	ldrb	r3, [r3, r2]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <I2C_Slave_ISR_IT+0x24>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0fa      	b.n	800402a <I2C_Slave_ISR_IT+0x21a>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2240      	movs	r2, #64	; 0x40
 8003e38:	2101      	movs	r1, #1
 8003e3a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	001a      	movs	r2, r3
 8003e42:	2301      	movs	r3, #1
 8003e44:	4013      	ands	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <I2C_Slave_ISR_IT+0x50>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	001a      	movs	r2, r3
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4013      	ands	r3, r2
 8003e52:	d005      	beq.n	8003e60 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0011      	movs	r1, r2
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f000 f9f6 	bl	800424c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	001a      	movs	r2, r3
 8003e66:	2301      	movs	r3, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d054      	beq.n	8003f16 <I2C_Slave_ISR_IT+0x106>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	001a      	movs	r2, r3
 8003e72:	2301      	movs	r3, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	d04e      	beq.n	8003f16 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d12d      	bne.n	8003ede <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2241      	movs	r2, #65	; 0x41
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b28      	cmp	r3, #40	; 0x28
 8003e8c:	d10b      	bne.n	8003ea6 <I2C_Slave_ISR_IT+0x96>
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	049b      	lsls	r3, r3, #18
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d106      	bne.n	8003ea6 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	0011      	movs	r1, r2
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f000 faf8 	bl	8004494 <I2C_ITListenCplt>
 8003ea4:	e036      	b.n	8003f14 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2241      	movs	r2, #65	; 0x41
 8003eaa:	5c9b      	ldrb	r3, [r3, r2]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b29      	cmp	r3, #41	; 0x29
 8003eb0:	d110      	bne.n	8003ed4 <I2C_Slave_ISR_IT+0xc4>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4a5f      	ldr	r2, [pc, #380]	; (8004034 <I2C_Slave_ISR_IT+0x224>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d00c      	beq.n	8003ed4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 fc4a 	bl	800475e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f957 	bl	8004180 <I2C_ITSlaveSeqCplt>
 8003ed2:	e01f      	b.n	8003f14 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003edc:	e09d      	b.n	800401a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	2204      	movs	r2, #4
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <I2C_Slave_ISR_IT+0xf4>
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	045b      	lsls	r3, r3, #17
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d000      	beq.n	8003f04 <I2C_Slave_ISR_IT+0xf4>
 8003f02:	e08a      	b.n	800401a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	0011      	movs	r1, r2
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f000 fb1b 	bl	8004548 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003f12:	e082      	b.n	800401a <I2C_Slave_ISR_IT+0x20a>
 8003f14:	e081      	b.n	800401a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d031      	beq.n	8003f86 <I2C_Slave_ISR_IT+0x176>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	089b      	lsrs	r3, r3, #2
 8003f26:	001a      	movs	r2, r3
 8003f28:	2301      	movs	r3, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d02b      	beq.n	8003f86 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d018      	beq.n	8003f6a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d154      	bne.n	800401e <I2C_Slave_ISR_IT+0x20e>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <I2C_Slave_ISR_IT+0x224>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d050      	beq.n	800401e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 f8fe 	bl	8004180 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f84:	e04b      	b.n	800401e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	08db      	lsrs	r3, r3, #3
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d00c      	beq.n	8003fac <I2C_Slave_ISR_IT+0x19c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	08db      	lsrs	r3, r3, #3
 8003f96:	001a      	movs	r2, r3
 8003f98:	2301      	movs	r3, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d006      	beq.n	8003fac <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f847 	bl	8004038 <I2C_ITAddrCplt>
 8003faa:	e039      	b.n	8004020 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d033      	beq.n	8004020 <I2C_Slave_ISR_IT+0x210>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d02d      	beq.n	8004020 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d018      	beq.n	8004000 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	3b01      	subs	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	; 0x28
 8003ffe:	e00f      	b.n	8004020 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	045b      	lsls	r3, r3, #17
 8004006:	429a      	cmp	r2, r3
 8004008:	d002      	beq.n	8004010 <I2C_Slave_ISR_IT+0x200>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f8b4 	bl	8004180 <I2C_ITSlaveSeqCplt>
 8004018:	e002      	b.n	8004020 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800401a:	46c0      	nop			; (mov r8, r8)
 800401c:	e000      	b.n	8004020 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800401e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b006      	add	sp, #24
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	ffff0000 	.word	0xffff0000

08004038 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2241      	movs	r2, #65	; 0x41
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	001a      	movs	r2, r3
 800404c:	2328      	movs	r3, #40	; 0x28
 800404e:	4013      	ands	r3, r2
 8004050:	2b28      	cmp	r3, #40	; 0x28
 8004052:	d000      	beq.n	8004056 <I2C_ITAddrCplt+0x1e>
 8004054:	e088      	b.n	8004168 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	b2da      	uxtb	r2, r3
 8004060:	250f      	movs	r5, #15
 8004062:	197b      	adds	r3, r7, r5
 8004064:	2101      	movs	r1, #1
 8004066:	400a      	ands	r2, r1
 8004068:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b29a      	uxth	r2, r3
 8004074:	200c      	movs	r0, #12
 8004076:	183b      	adds	r3, r7, r0
 8004078:	21fe      	movs	r1, #254	; 0xfe
 800407a:	400a      	ands	r2, r1
 800407c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	b29a      	uxth	r2, r3
 8004086:	240a      	movs	r4, #10
 8004088:	193b      	adds	r3, r7, r4
 800408a:	0592      	lsls	r2, r2, #22
 800408c:	0d92      	lsrs	r2, r2, #22
 800408e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	b29a      	uxth	r2, r3
 8004098:	2308      	movs	r3, #8
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	21fe      	movs	r1, #254	; 0xfe
 800409e:	400a      	ands	r2, r1
 80040a0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d148      	bne.n	800413c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80040aa:	0021      	movs	r1, r4
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	09db      	lsrs	r3, r3, #7
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	183b      	adds	r3, r7, r0
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	4053      	eors	r3, r2
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	001a      	movs	r2, r3
 80040be:	2306      	movs	r3, #6
 80040c0:	4013      	ands	r3, r2
 80040c2:	d120      	bne.n	8004106 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80040c4:	183b      	adds	r3, r7, r0
 80040c6:	187a      	adds	r2, r7, r1
 80040c8:	8812      	ldrh	r2, [r2, #0]
 80040ca:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d14c      	bne.n	8004178 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2208      	movs	r2, #8
 80040ea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	2100      	movs	r1, #0
 80040f2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80040f4:	183b      	adds	r3, r7, r0
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	197b      	adds	r3, r7, r5
 80040fa:	7819      	ldrb	r1, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff fe5e 	bl	8003dc0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004104:	e038      	b.n	8004178 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004106:	240c      	movs	r4, #12
 8004108:	193b      	adds	r3, r7, r4
 800410a:	2208      	movs	r2, #8
 800410c:	18ba      	adds	r2, r7, r2
 800410e:	8812      	ldrh	r2, [r2, #0]
 8004110:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	021a      	lsls	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0011      	movs	r1, r2
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fb60 	bl	80047e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2240      	movs	r2, #64	; 0x40
 8004124:	2100      	movs	r1, #0
 8004126:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004128:	193b      	adds	r3, r7, r4
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	230f      	movs	r3, #15
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	7819      	ldrb	r1, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7ff fe43 	bl	8003dc0 <HAL_I2C_AddrCallback>
}
 800413a:	e01d      	b.n	8004178 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f000 fb4b 	bl	80047e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2240      	movs	r2, #64	; 0x40
 800414e:	2100      	movs	r1, #0
 8004150:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004152:	230c      	movs	r3, #12
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	881a      	ldrh	r2, [r3, #0]
 8004158:	230f      	movs	r3, #15
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	7819      	ldrb	r1, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fe2d 	bl	8003dc0 <HAL_I2C_AddrCallback>
}
 8004166:	e007      	b.n	8004178 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2208      	movs	r2, #8
 800416e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2240      	movs	r2, #64	; 0x40
 8004174:	2100      	movs	r1, #0
 8004176:	5499      	strb	r1, [r3, r2]
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bdb0      	pop	{r4, r5, r7, pc}

08004180 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2242      	movs	r2, #66	; 0x42
 8004194:	2100      	movs	r1, #0
 8004196:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	0b9b      	lsrs	r3, r3, #14
 800419c:	001a      	movs	r2, r3
 800419e:	2301      	movs	r3, #1
 80041a0:	4013      	ands	r3, r2
 80041a2:	d008      	beq.n	80041b6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4925      	ldr	r1, [pc, #148]	; (8004244 <I2C_ITSlaveSeqCplt+0xc4>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e00d      	b.n	80041d2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	0bdb      	lsrs	r3, r3, #15
 80041ba:	001a      	movs	r2, r3
 80041bc:	2301      	movs	r3, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	d007      	beq.n	80041d2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	491e      	ldr	r1, [pc, #120]	; (8004248 <I2C_ITSlaveSeqCplt+0xc8>)
 80041ce:	400a      	ands	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2241      	movs	r2, #65	; 0x41
 80041d6:	5c9b      	ldrb	r3, [r3, r2]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b29      	cmp	r3, #41	; 0x29
 80041dc:	d114      	bne.n	8004208 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2241      	movs	r2, #65	; 0x41
 80041e2:	2128      	movs	r1, #40	; 0x28
 80041e4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2221      	movs	r2, #33	; 0x21
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2101      	movs	r1, #1
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 faf5 	bl	80047e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2240      	movs	r2, #64	; 0x40
 80041fa:	2100      	movs	r1, #0
 80041fc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff fdcd 	bl	8003da0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004206:	e019      	b.n	800423c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2241      	movs	r2, #65	; 0x41
 800420c:	5c9b      	ldrb	r3, [r3, r2]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b2a      	cmp	r3, #42	; 0x2a
 8004212:	d113      	bne.n	800423c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2241      	movs	r2, #65	; 0x41
 8004218:	2128      	movs	r1, #40	; 0x28
 800421a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2222      	movs	r2, #34	; 0x22
 8004220:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2102      	movs	r1, #2
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fada 	bl	80047e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2240      	movs	r2, #64	; 0x40
 8004230:	2100      	movs	r1, #0
 8004232:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff fdba 	bl	8003db0 <HAL_I2C_SlaveRxCpltCallback>
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}
 8004244:	ffffbfff 	.word	0xffffbfff
 8004248:	ffff7fff 	.word	0xffff7fff

0800424c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004262:	200f      	movs	r0, #15
 8004264:	183b      	adds	r3, r7, r0
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	2141      	movs	r1, #65	; 0x41
 800426a:	5c52      	ldrb	r2, [r2, r1]
 800426c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2220      	movs	r2, #32
 8004274:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004276:	183b      	adds	r3, r7, r0
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b21      	cmp	r3, #33	; 0x21
 800427c:	d003      	beq.n	8004286 <I2C_ITSlaveCplt+0x3a>
 800427e:	183b      	adds	r3, r7, r0
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b29      	cmp	r3, #41	; 0x29
 8004284:	d109      	bne.n	800429a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004286:	4a7d      	ldr	r2, [pc, #500]	; (800447c <I2C_ITSlaveCplt+0x230>)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f000 faa7 	bl	80047e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2221      	movs	r2, #33	; 0x21
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
 8004298:	e011      	b.n	80042be <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800429a:	220f      	movs	r2, #15
 800429c:	18bb      	adds	r3, r7, r2
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b22      	cmp	r3, #34	; 0x22
 80042a2:	d003      	beq.n	80042ac <I2C_ITSlaveCplt+0x60>
 80042a4:	18bb      	adds	r3, r7, r2
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b2a      	cmp	r3, #42	; 0x2a
 80042aa:	d108      	bne.n	80042be <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042ac:	4a74      	ldr	r2, [pc, #464]	; (8004480 <I2C_ITSlaveCplt+0x234>)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0011      	movs	r1, r2
 80042b2:	0018      	movs	r0, r3
 80042b4:	f000 fa94 	bl	80047e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2222      	movs	r2, #34	; 0x22
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	0209      	lsls	r1, r1, #8
 80042cc:	430a      	orrs	r2, r1
 80042ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	496a      	ldr	r1, [pc, #424]	; (8004484 <I2C_ITSlaveCplt+0x238>)
 80042dc:	400a      	ands	r2, r1
 80042de:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	0018      	movs	r0, r3
 80042e4:	f000 fa3b 	bl	800475e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	0b9b      	lsrs	r3, r3, #14
 80042ec:	001a      	movs	r2, r3
 80042ee:	2301      	movs	r3, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	d013      	beq.n	800431c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4962      	ldr	r1, [pc, #392]	; (8004488 <I2C_ITSlaveCplt+0x23c>)
 8004300:	400a      	ands	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a
 800431a:	e018      	b.n	800434e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	0bdb      	lsrs	r3, r3, #15
 8004320:	001a      	movs	r2, r3
 8004322:	2301      	movs	r3, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d012      	beq.n	800434e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4956      	ldr	r1, [pc, #344]	; (800448c <I2C_ITSlaveCplt+0x240>)
 8004334:	400a      	ands	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	001a      	movs	r2, r3
 8004354:	2301      	movs	r3, #1
 8004356:	4013      	ands	r3, r2
 8004358:	d020      	beq.n	800439c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2204      	movs	r2, #4
 800435e:	4393      	bics	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	2204      	movs	r2, #4
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2242      	movs	r2, #66	; 0x42
 80043b6:	2100      	movs	r1, #0
 80043b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0011      	movs	r1, r2
 80043d0:	0018      	movs	r0, r3
 80043d2:	f000 f8b9 	bl	8004548 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2241      	movs	r2, #65	; 0x41
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b28      	cmp	r3, #40	; 0x28
 80043e0:	d147      	bne.n	8004472 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	0011      	movs	r1, r2
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 f853 	bl	8004494 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043ee:	e040      	b.n	8004472 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <I2C_ITSlaveCplt+0x244>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d016      	beq.n	8004428 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff febf 	bl	8004180 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <I2C_ITSlaveCplt+0x244>)
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2241      	movs	r2, #65	; 0x41
 800440c:	2120      	movs	r1, #32
 800440e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2240      	movs	r2, #64	; 0x40
 800441a:	2100      	movs	r1, #0
 800441c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	0018      	movs	r0, r3
 8004422:	f7ff fcdd 	bl	8003de0 <HAL_I2C_ListenCpltCallback>
}
 8004426:	e024      	b.n	8004472 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2241      	movs	r2, #65	; 0x41
 800442c:	5c9b      	ldrb	r3, [r3, r2]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b22      	cmp	r3, #34	; 0x22
 8004432:	d10f      	bne.n	8004454 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2241      	movs	r2, #65	; 0x41
 8004438:	2120      	movs	r1, #32
 800443a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2240      	movs	r2, #64	; 0x40
 8004446:	2100      	movs	r1, #0
 8004448:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0018      	movs	r0, r3
 800444e:	f7ff fcaf 	bl	8003db0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004452:	e00e      	b.n	8004472 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2241      	movs	r2, #65	; 0x41
 8004458:	2120      	movs	r1, #32
 800445a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2240      	movs	r2, #64	; 0x40
 8004466:	2100      	movs	r1, #0
 8004468:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f7ff fc97 	bl	8003da0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	46bd      	mov	sp, r7
 8004476:	b006      	add	sp, #24
 8004478:	bd80      	pop	{r7, pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	00008001 	.word	0x00008001
 8004480:	00008002 	.word	0x00008002
 8004484:	fe00e800 	.word	0xfe00e800
 8004488:	ffffbfff 	.word	0xffffbfff
 800448c:	ffff7fff 	.word	0xffff7fff
 8004490:	ffff0000 	.word	0xffff0000

08004494 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a27      	ldr	r2, [pc, #156]	; (8004540 <I2C_ITListenCplt+0xac>)
 80044a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2241      	movs	r2, #65	; 0x41
 80044ae:	2120      	movs	r1, #32
 80044b0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2242      	movs	r2, #66	; 0x42
 80044b6:	2100      	movs	r1, #0
 80044b8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	001a      	movs	r2, r3
 80044c6:	2301      	movs	r3, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d022      	beq.n	8004512 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	2204      	movs	r2, #4
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004512:	4a0c      	ldr	r2, [pc, #48]	; (8004544 <I2C_ITListenCplt+0xb0>)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0011      	movs	r1, r2
 8004518:	0018      	movs	r0, r3
 800451a:	f000 f961 	bl	80047e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2210      	movs	r2, #16
 8004524:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2240      	movs	r2, #64	; 0x40
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f7ff fc55 	bl	8003de0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	46bd      	mov	sp, r7
 800453a:	b002      	add	sp, #8
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	ffff0000 	.word	0xffff0000
 8004544:	00008003 	.word	0x00008003

08004548 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004552:	200f      	movs	r0, #15
 8004554:	183b      	adds	r3, r7, r0
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	2141      	movs	r1, #65	; 0x41
 800455a:	5c52      	ldrb	r2, [r2, r1]
 800455c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2242      	movs	r2, #66	; 0x42
 8004562:	2100      	movs	r1, #0
 8004564:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a62      	ldr	r2, [pc, #392]	; (80046f4 <I2C_ITError+0x1ac>)
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800457e:	183b      	adds	r3, r7, r0
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b28      	cmp	r3, #40	; 0x28
 8004584:	d007      	beq.n	8004596 <I2C_ITError+0x4e>
 8004586:	183b      	adds	r3, r7, r0
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b29      	cmp	r3, #41	; 0x29
 800458c:	d003      	beq.n	8004596 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800458e:	183b      	adds	r3, r7, r0
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b2a      	cmp	r3, #42	; 0x2a
 8004594:	d10c      	bne.n	80045b0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2103      	movs	r1, #3
 800459a:	0018      	movs	r0, r3
 800459c:	f000 f920 	bl	80047e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2241      	movs	r2, #65	; 0x41
 80045a4:	2128      	movs	r1, #40	; 0x28
 80045a6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a53      	ldr	r2, [pc, #332]	; (80046f8 <I2C_ITError+0x1b0>)
 80045ac:	635a      	str	r2, [r3, #52]	; 0x34
 80045ae:	e012      	b.n	80045d6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045b0:	4a52      	ldr	r2, [pc, #328]	; (80046fc <I2C_ITError+0x1b4>)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	0011      	movs	r1, r2
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f912 	bl	80047e0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2241      	movs	r2, #65	; 0x41
 80045c0:	5c9b      	ldrb	r3, [r3, r2]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d003      	beq.n	80045d0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2241      	movs	r2, #65	; 0x41
 80045cc:	2120      	movs	r1, #32
 80045ce:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d03b      	beq.n	800465c <I2C_ITError+0x114>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b11      	cmp	r3, #17
 80045e8:	d002      	beq.n	80045f0 <I2C_ITError+0xa8>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b21      	cmp	r3, #33	; 0x21
 80045ee:	d135      	bne.n	800465c <I2C_ITError+0x114>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	01db      	lsls	r3, r3, #7
 80045fa:	401a      	ands	r2, r3
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	429a      	cmp	r2, r3
 8004602:	d107      	bne.n	8004614 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	493c      	ldr	r1, [pc, #240]	; (8004700 <I2C_ITError+0x1b8>)
 8004610:	400a      	ands	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff f8ef 	bl	80037fc <HAL_DMA_GetState>
 800461e:	0003      	movs	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d016      	beq.n	8004652 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	4a36      	ldr	r2, [pc, #216]	; (8004704 <I2C_ITError+0x1bc>)
 800462a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2240      	movs	r2, #64	; 0x40
 8004630:	2100      	movs	r1, #0
 8004632:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	0018      	movs	r0, r3
 800463a:	f7fe ffc3 	bl	80035c4 <HAL_DMA_Abort_IT>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d051      	beq.n	80046e6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	0018      	movs	r0, r3
 800464e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004650:	e049      	b.n	80046e6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 f859 	bl	800470c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800465a:	e044      	b.n	80046e6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03b      	beq.n	80046dc <I2C_ITError+0x194>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b12      	cmp	r3, #18
 8004668:	d002      	beq.n	8004670 <I2C_ITError+0x128>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b22      	cmp	r3, #34	; 0x22
 800466e:	d135      	bne.n	80046dc <I2C_ITError+0x194>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	401a      	ands	r2, r3
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	491e      	ldr	r1, [pc, #120]	; (8004708 <I2C_ITError+0x1c0>)
 8004690:	400a      	ands	r2, r1
 8004692:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	0018      	movs	r0, r3
 800469a:	f7ff f8af 	bl	80037fc <HAL_DMA_GetState>
 800469e:	0003      	movs	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d016      	beq.n	80046d2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	4a16      	ldr	r2, [pc, #88]	; (8004704 <I2C_ITError+0x1bc>)
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2240      	movs	r2, #64	; 0x40
 80046b0:	2100      	movs	r1, #0
 80046b2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7fe ff83 	bl	80035c4 <HAL_DMA_Abort_IT>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d013      	beq.n	80046ea <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046cc:	0018      	movs	r0, r3
 80046ce:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046d0:	e00b      	b.n	80046ea <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 f819 	bl	800470c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046da:	e006      	b.n	80046ea <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 f814 	bl	800470c <I2C_TreatErrorCallback>
  }
}
 80046e4:	e002      	b.n	80046ec <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	e000      	b.n	80046ec <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ea:	46c0      	nop			; (mov r8, r8)
}
 80046ec:	46c0      	nop			; (mov r8, r8)
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b004      	add	sp, #16
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	ffff0000 	.word	0xffff0000
 80046f8:	08003e11 	.word	0x08003e11
 80046fc:	00008003 	.word	0x00008003
 8004700:	ffffbfff 	.word	0xffffbfff
 8004704:	080047a3 	.word	0x080047a3
 8004708:	ffff7fff 	.word	0xffff7fff

0800470c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2241      	movs	r2, #65	; 0x41
 8004718:	5c9b      	ldrb	r3, [r3, r2]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d10f      	bne.n	8004740 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2241      	movs	r2, #65	; 0x41
 8004724:	2120      	movs	r1, #32
 8004726:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2240      	movs	r2, #64	; 0x40
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff fb61 	bl	8003e00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800473e:	e00a      	b.n	8004756 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2240      	movs	r2, #64	; 0x40
 800474a:	2100      	movs	r1, #0
 800474c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f7ff fb4d 	bl	8003df0 <HAL_I2C_ErrorCallback>
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b002      	add	sp, #8
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b082      	sub	sp, #8
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2202      	movs	r2, #2
 800476e:	4013      	ands	r3, r2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d103      	bne.n	800477c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2200      	movs	r2, #0
 800477a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2201      	movs	r2, #1
 8004784:	4013      	ands	r3, r2
 8004786:	2b01      	cmp	r3, #1
 8004788:	d007      	beq.n	800479a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699a      	ldr	r2, [r3, #24]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2101      	movs	r1, #1
 8004796:	430a      	orrs	r2, r1
 8004798:	619a      	str	r2, [r3, #24]
  }
}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	2200      	movs	r2, #0
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	2200      	movs	r2, #0
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff ff9a 	bl	800470c <I2C_TreatErrorCallback>
}
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b004      	add	sp, #16
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	000a      	movs	r2, r1
 80047ea:	1cbb      	adds	r3, r7, #2
 80047ec:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047f2:	1cbb      	adds	r3, r7, #2
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	2201      	movs	r2, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d010      	beq.n	800481e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2242      	movs	r2, #66	; 0x42
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2241      	movs	r2, #65	; 0x41
 8004808:	5c9b      	ldrb	r3, [r3, r2]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	001a      	movs	r2, r3
 800480e:	2328      	movs	r3, #40	; 0x28
 8004810:	4013      	ands	r3, r2
 8004812:	2b28      	cmp	r3, #40	; 0x28
 8004814:	d003      	beq.n	800481e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	22b0      	movs	r2, #176	; 0xb0
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800481e:	1cbb      	adds	r3, r7, #2
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	2202      	movs	r2, #2
 8004824:	4013      	ands	r3, r2
 8004826:	d010      	beq.n	800484a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2244      	movs	r2, #68	; 0x44
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2241      	movs	r2, #65	; 0x41
 8004834:	5c9b      	ldrb	r3, [r3, r2]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	001a      	movs	r2, r3
 800483a:	2328      	movs	r3, #40	; 0x28
 800483c:	4013      	ands	r3, r2
 800483e:	2b28      	cmp	r3, #40	; 0x28
 8004840:	d003      	beq.n	800484a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	22b0      	movs	r2, #176	; 0xb0
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800484a:	1cbb      	adds	r3, r7, #2
 800484c:	2200      	movs	r2, #0
 800484e:	5e9b      	ldrsh	r3, [r3, r2]
 8004850:	2b00      	cmp	r3, #0
 8004852:	da03      	bge.n	800485c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	22b8      	movs	r2, #184	; 0xb8
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800485c:	1cbb      	adds	r3, r7, #2
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	2b10      	cmp	r3, #16
 8004862:	d103      	bne.n	800486c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2290      	movs	r2, #144	; 0x90
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800486c:	1cbb      	adds	r3, r7, #2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	2b20      	cmp	r3, #32
 8004872:	d103      	bne.n	800487c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800487c:	1cbb      	adds	r3, r7, #2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d103      	bne.n	800488c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	43d9      	mvns	r1, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	400a      	ands	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	46bd      	mov	sp, r7
 80048a2:	b004      	add	sp, #16
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2241      	movs	r2, #65	; 0x41
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b20      	cmp	r3, #32
 80048bc:	d138      	bne.n	8004930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2240      	movs	r2, #64	; 0x40
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e032      	b.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2240      	movs	r2, #64	; 0x40
 80048d0:	2101      	movs	r1, #1
 80048d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2241      	movs	r2, #65	; 0x41
 80048d8:	2124      	movs	r1, #36	; 0x24
 80048da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2101      	movs	r1, #1
 80048e8:	438a      	bics	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4911      	ldr	r1, [pc, #68]	; (800493c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80048f8:	400a      	ands	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	430a      	orrs	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2241      	movs	r2, #65	; 0x41
 8004920:	2120      	movs	r1, #32
 8004922:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	2100      	movs	r1, #0
 800492a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004930:	2302      	movs	r3, #2
  }
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b002      	add	sp, #8
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	ffffefff 	.word	0xffffefff

08004940 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2241      	movs	r2, #65	; 0x41
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d139      	bne.n	80049ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	5c9b      	ldrb	r3, [r3, r2]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004960:	2302      	movs	r3, #2
 8004962:	e033      	b.n	80049cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2240      	movs	r2, #64	; 0x40
 8004968:	2101      	movs	r1, #1
 800496a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2241      	movs	r2, #65	; 0x41
 8004970:	2124      	movs	r1, #36	; 0x24
 8004972:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2101      	movs	r1, #1
 8004980:	438a      	bics	r2, r1
 8004982:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a11      	ldr	r2, [pc, #68]	; (80049d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004990:	4013      	ands	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2241      	movs	r2, #65	; 0x41
 80049ba:	2120      	movs	r1, #32
 80049bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2240      	movs	r2, #64	; 0x40
 80049c2:	2100      	movs	r1, #0
 80049c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e000      	b.n	80049cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
  }
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b004      	add	sp, #16
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	fffff0ff 	.word	0xfffff0ff

080049d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b088      	sub	sp, #32
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e0e5      	b.n	8004bb6 <HAL_I2S_Init+0x1de>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2235      	movs	r2, #53	; 0x35
 80049ee:	5c9b      	ldrb	r3, [r3, r2]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d107      	bne.n	8004a06 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2234      	movs	r2, #52	; 0x34
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7fd fe37 	bl	8002674 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2235      	movs	r2, #53	; 0x35
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4969      	ldr	r1, [pc, #420]	; (8004bc0 <HAL_I2S_Init+0x1e8>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2202      	movs	r2, #2
 8004a24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d100      	bne.n	8004a30 <HAL_I2S_Init+0x58>
 8004a2e:	e076      	b.n	8004b1e <HAL_I2S_Init+0x146>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a38:	2310      	movs	r3, #16
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e001      	b.n	8004a42 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a3e:	2320      	movs	r3, #32
 8004a40:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d802      	bhi.n	8004a50 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
      /* Get the source clock value: based on System Clock value */
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S2);
    }
#else
    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S1);
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	0018      	movs	r0, r3
 8004a56:	f001 f865 	bl	8005b24 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	60fb      	str	r3, [r7, #12]
#endif
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	2380      	movs	r3, #128	; 0x80
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d131      	bne.n	8004ace <HAL_I2S_Init+0xf6>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <HAL_I2S_Init+0xc8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	0019      	movs	r1, r3
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7fb fb43 	bl	8000104 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	001a      	movs	r2, r3
 8004a82:	0013      	movs	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	0019      	movs	r1, r3
 8004a92:	0010      	movs	r0, r2
 8004a94:	f7fb fb36 	bl	8000104 <__udivsi3>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	3305      	adds	r3, #5
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	e02a      	b.n	8004af6 <HAL_I2S_Init+0x11e>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f7fb fb2c 	bl	8000104 <__udivsi3>
 8004aac:	0003      	movs	r3, r0
 8004aae:	001a      	movs	r2, r3
 8004ab0:	0013      	movs	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	189b      	adds	r3, r3, r2
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	001a      	movs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	0019      	movs	r1, r3
 8004ac0:	0010      	movs	r0, r2
 8004ac2:	f7fb fb1f 	bl	8000104 <__udivsi3>
 8004ac6:	0003      	movs	r3, r0
 8004ac8:	3305      	adds	r3, #5
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e013      	b.n	8004af6 <HAL_I2S_Init+0x11e>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ace:	6979      	ldr	r1, [r7, #20]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7fb fb17 	bl	8000104 <__udivsi3>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	001a      	movs	r2, r3
 8004ada:	0013      	movs	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	189b      	adds	r3, r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	0019      	movs	r1, r3
 8004aea:	0010      	movs	r0, r2
 8004aec:	f7fb fb0a 	bl	8000104 <__udivsi3>
 8004af0:	0003      	movs	r3, r0
 8004af2:	3305      	adds	r3, #5
 8004af4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	210a      	movs	r1, #10
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7fb fb02 	bl	8000104 <__udivsi3>
 8004b00:	0003      	movs	r3, r0
 8004b02:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2201      	movs	r2, #1
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e003      	b.n	8004b26 <HAL_I2S_Init+0x14e>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b1e:	2302      	movs	r3, #2
 8004b20:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d902      	bls.n	8004b32 <HAL_I2S_Init+0x15a>
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	2bff      	cmp	r3, #255	; 0xff
 8004b30:	d907      	bls.n	8004b42 <HAL_I2S_Init+0x16a>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	2210      	movs	r2, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e039      	b.n	8004bb6 <HAL_I2S_Init+0x1de>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <HAL_I2S_Init+0x1e8>)
 8004b5e:	401a      	ands	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4319      	orrs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4319      	orrs	r1, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2180      	movs	r1, #128	; 0x80
 8004b7e:	0109      	lsls	r1, r1, #4
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b30      	cmp	r3, #48	; 0x30
 8004b8a:	d003      	beq.n	8004b94 <HAL_I2S_Init+0x1bc>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2bb0      	cmp	r3, #176	; 0xb0
 8004b92:	d108      	bne.n	8004ba6 <HAL_I2S_Init+0x1ce>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	0149      	lsls	r1, r1, #5
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2235      	movs	r2, #53	; 0x35
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b008      	add	sp, #32
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	46c0      	nop			; (mov r8, r8)
 8004bc0:	fffff040 	.word	0xfffff040

08004bc4 <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hi2s->Instance->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hi2s->Instance->SR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* I2S in mode Receiver ------------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	099b      	lsrs	r3, r3, #6
 8004be0:	001a      	movs	r2, r3
 8004be2:	2301      	movs	r3, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d10e      	bne.n	8004c06 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2201      	movs	r2, #1
 8004bec:	4013      	ands	r3, r2
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) == RESET) &&
 8004bee:	d00a      	beq.n	8004c06 <HAL_I2S_IRQHandler+0x42>
      (I2S_CHECK_FLAG(itflag, I2S_FLAG_RXNE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_RXNE) != RESET))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	099b      	lsrs	r3, r3, #6
 8004bf4:	001a      	movs	r2, r3
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_I2S_IRQHandler+0x42>
  {
    I2S_Receive_IT(hi2s);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 f892 	bl	8004d28 <I2S_Receive_IT>
    return;
 8004c04:	e046      	b.n	8004c94 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S in mode Tramitter -----------------------------------------------*/
  if ((I2S_CHECK_FLAG(itflag, I2S_FLAG_TXE) != RESET) && (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_TXE) != RESET))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d00a      	beq.n	8004c28 <HAL_I2S_IRQHandler+0x64>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	09db      	lsrs	r3, r3, #7
 8004c16:	001a      	movs	r2, r3
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_I2S_IRQHandler+0x64>
  {
    I2S_Transmit_IT(hi2s);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 f852 	bl	8004cca <I2S_Transmit_IT>
    return;
 8004c26:	e035      	b.n	8004c94 <HAL_I2S_IRQHandler+0xd0>
  }

  /* I2S interrupt error -------------------------------------------------*/
  if (I2S_CHECK_IT_SOURCE(itsource, I2S_IT_ERR) != RESET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4013      	ands	r3, r2
 8004c32:	d02f      	beq.n	8004c94 <HAL_I2S_IRQHandler+0xd0>
  {
    /* I2S Overrun error interrupt occurred ---------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_OVR) != RESET)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	099b      	lsrs	r3, r3, #6
 8004c38:	001a      	movs	r2, r3
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d00d      	beq.n	8004c5c <HAL_I2S_IRQHandler+0x98>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2160      	movs	r1, #96	; 0x60
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	2202      	movs	r2, #2
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (I2S_CHECK_FLAG(itflag, I2S_FLAG_UDR) != RESET)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	08db      	lsrs	r3, r3, #3
 8004c60:	001a      	movs	r2, r3
 8004c62:	2301      	movs	r3, #1
 8004c64:	4013      	ands	r3, r2
 8004c66:	d00d      	beq.n	8004c84 <HAL_I2S_IRQHandler+0xc0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	21a0      	movs	r1, #160	; 0xa0
 8004c74:	438a      	bics	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Set the I2S State ready */
    hi2s->State = HAL_I2S_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2235      	movs	r2, #53	; 0x35
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5499      	strb	r1, [r3, r2]

    /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->ErrorCallback(hi2s);
#else
    HAL_I2S_ErrorCallback(hi2s);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 f813 	bl	8004cba <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b004      	add	sp, #16
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b002      	add	sp, #8
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b082      	sub	sp, #8
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	b002      	add	sp, #8
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	881a      	ldrh	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	1c9a      	adds	r2, r3, #2
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	61da      	str	r2, [r3, #28]
  hi2s->TxXferCount--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	845a      	strh	r2, [r3, #34]	; 0x22

  if (hi2s->TxXferCount == 0U)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10f      	bne.n	8004d20 <I2S_Transmit_IT+0x56>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	21a0      	movs	r1, #160	; 0xa0
 8004d0c:	438a      	bics	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2235      	movs	r2, #53	; 0x35
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f7ff ffbd 	bl	8004c9a <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	1c9a      	adds	r2, r3, #2
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->RxXferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->RxXferCount == 0U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10f      	bne.n	8004d80 <I2S_Receive_IT+0x58>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2160      	movs	r1, #96	; 0x60
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2235      	movs	r2, #53	; 0x35
 8004d74:	2101      	movs	r1, #1
 8004d76:	5499      	strb	r1, [r3, r2]
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7ff ff95 	bl	8004caa <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004d90:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d11f      	bne.n	8004dec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8004dac:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	0013      	movs	r3, r2
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4912      	ldr	r1, [pc, #72]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f7fb f9a2 	bl	8000104 <__udivsi3>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dc6:	e008      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e001      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e009      	b.n	8004dee <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	2380      	movs	r3, #128	; 0x80
 8004de0:	00db      	lsls	r3, r3, #3
 8004de2:	401a      	ands	r2, r3
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d0ed      	beq.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b004      	add	sp, #16
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	40007000 	.word	0x40007000
 8004dfc:	fffff9ff 	.word	0xfffff9ff
 8004e00:	20003134 	.word	0x20003134
 8004e04:	000f4240 	.word	0x000f4240

08004e08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <LL_RCC_GetAPB1Prescaler+0x14>)
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	23e0      	movs	r3, #224	; 0xe0
 8004e12:	01db      	lsls	r3, r3, #7
 8004e14:	4013      	ands	r3, r2
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e304      	b.n	800543c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <HAL_RCC_OscConfig+0x1e>
 8004e3c:	e07c      	b.n	8004f38 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3e:	4bc3      	ldr	r3, [pc, #780]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2238      	movs	r2, #56	; 0x38
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e48:	4bc0      	ldr	r3, [pc, #768]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	4013      	ands	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d102      	bne.n	8004e5e <HAL_RCC_OscConfig+0x3e>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d002      	beq.n	8004e64 <HAL_RCC_OscConfig+0x44>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	4bb9      	ldr	r3, [pc, #740]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	029b      	lsls	r3, r3, #10
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d062      	beq.n	8004f36 <HAL_RCC_OscConfig+0x116>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d15e      	bne.n	8004f36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e2df      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	025b      	lsls	r3, r3, #9
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d107      	bne.n	8004e98 <HAL_RCC_OscConfig+0x78>
 8004e88:	4bb0      	ldr	r3, [pc, #704]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4baf      	ldr	r3, [pc, #700]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004e8e:	2180      	movs	r1, #128	; 0x80
 8004e90:	0249      	lsls	r1, r1, #9
 8004e92:	430a      	orrs	r2, r1
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e020      	b.n	8004eda <HAL_RCC_OscConfig+0xba>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	23a0      	movs	r3, #160	; 0xa0
 8004e9e:	02db      	lsls	r3, r3, #11
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d10e      	bne.n	8004ec2 <HAL_RCC_OscConfig+0xa2>
 8004ea4:	4ba9      	ldr	r3, [pc, #676]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4ba8      	ldr	r3, [pc, #672]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004eaa:	2180      	movs	r1, #128	; 0x80
 8004eac:	02c9      	lsls	r1, r1, #11
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	4ba6      	ldr	r3, [pc, #664]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4ba5      	ldr	r3, [pc, #660]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	0249      	lsls	r1, r1, #9
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e00b      	b.n	8004eda <HAL_RCC_OscConfig+0xba>
 8004ec2:	4ba2      	ldr	r3, [pc, #648]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4ba1      	ldr	r3, [pc, #644]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ec8:	49a1      	ldr	r1, [pc, #644]	; (8005150 <HAL_RCC_OscConfig+0x330>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	4b9f      	ldr	r3, [pc, #636]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b9e      	ldr	r3, [pc, #632]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ed4:	499f      	ldr	r1, [pc, #636]	; (8005154 <HAL_RCC_OscConfig+0x334>)
 8004ed6:	400a      	ands	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d014      	beq.n	8004f0c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fd ff63 	bl	8002dac <HAL_GetTick>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fd ff5e 	bl	8002dac <HAL_GetTick>
 8004ef0:	0002      	movs	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e29e      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004efe:	4b93      	ldr	r3, [pc, #588]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	2380      	movs	r3, #128	; 0x80
 8004f04:	029b      	lsls	r3, r3, #10
 8004f06:	4013      	ands	r3, r2
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0xcc>
 8004f0a:	e015      	b.n	8004f38 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0c:	f7fd ff4e 	bl	8002dac <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f16:	f7fd ff49 	bl	8002dac <HAL_GetTick>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b64      	cmp	r3, #100	; 0x64
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e289      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f28:	4b88      	ldr	r3, [pc, #544]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	4013      	ands	r3, r2
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0xf6>
 8004f34:	e000      	b.n	8004f38 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d100      	bne.n	8004f44 <HAL_RCC_OscConfig+0x124>
 8004f42:	e099      	b.n	8005078 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f44:	4b81      	ldr	r3, [pc, #516]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2238      	movs	r2, #56	; 0x38
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4e:	4b7f      	ldr	r3, [pc, #508]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2203      	movs	r2, #3
 8004f54:	4013      	ands	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d102      	bne.n	8004f64 <HAL_RCC_OscConfig+0x144>
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d002      	beq.n	8004f6a <HAL_RCC_OscConfig+0x14a>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d135      	bne.n	8004fd6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f6a:	4b78      	ldr	r3, [pc, #480]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4013      	ands	r3, r2
 8004f74:	d005      	beq.n	8004f82 <HAL_RCC_OscConfig+0x162>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e25c      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f82:	4b72      	ldr	r3, [pc, #456]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4a74      	ldr	r2, [pc, #464]	; (8005158 <HAL_RCC_OscConfig+0x338>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	0019      	movs	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	4b6e      	ldr	r3, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d112      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f9e:	4b6b      	ldr	r3, [pc, #428]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6e      	ldr	r2, [pc, #440]	; (800515c <HAL_RCC_OscConfig+0x33c>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	4b67      	ldr	r3, [pc, #412]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fb2:	4b66      	ldr	r3, [pc, #408]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	0adb      	lsrs	r3, r3, #11
 8004fb8:	2207      	movs	r2, #7
 8004fba:	4013      	ands	r3, r2
 8004fbc:	4a68      	ldr	r2, [pc, #416]	; (8005160 <HAL_RCC_OscConfig+0x340>)
 8004fbe:	40da      	lsrs	r2, r3
 8004fc0:	4b68      	ldr	r3, [pc, #416]	; (8005164 <HAL_RCC_OscConfig+0x344>)
 8004fc2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fc4:	4b68      	ldr	r3, [pc, #416]	; (8005168 <HAL_RCC_OscConfig+0x348>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f7fd fe93 	bl	8002cf4 <HAL_InitTick>
 8004fce:	1e03      	subs	r3, r0, #0
 8004fd0:	d051      	beq.n	8005076 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e232      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d030      	beq.n	8005040 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fde:	4b5b      	ldr	r3, [pc, #364]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a5e      	ldr	r2, [pc, #376]	; (800515c <HAL_RCC_OscConfig+0x33c>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	4b57      	ldr	r3, [pc, #348]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ff2:	4b56      	ldr	r3, [pc, #344]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	4b55      	ldr	r3, [pc, #340]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	0049      	lsls	r1, r1, #1
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd fed4 	bl	8002dac <HAL_GetTick>
 8005004:	0003      	movs	r3, r0
 8005006:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500a:	f7fd fecf 	bl	8002dac <HAL_GetTick>
 800500e:	0002      	movs	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e20f      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4013      	ands	r3, r2
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005028:	4b48      	ldr	r3, [pc, #288]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4a4a      	ldr	r2, [pc, #296]	; (8005158 <HAL_RCC_OscConfig+0x338>)
 800502e:	4013      	ands	r3, r2
 8005030:	0019      	movs	r1, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	4b44      	ldr	r3, [pc, #272]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	e01b      	b.n	8005078 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005040:	4b42      	ldr	r3, [pc, #264]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4b41      	ldr	r3, [pc, #260]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8005046:	4949      	ldr	r1, [pc, #292]	; (800516c <HAL_RCC_OscConfig+0x34c>)
 8005048:	400a      	ands	r2, r1
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fd feae 	bl	8002dac <HAL_GetTick>
 8005050:	0003      	movs	r3, r0
 8005052:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005056:	f7fd fea9 	bl	8002dac <HAL_GetTick>
 800505a:	0002      	movs	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e1e9      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005068:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4013      	ands	r3, r2
 8005072:	d1f0      	bne.n	8005056 <HAL_RCC_OscConfig+0x236>
 8005074:	e000      	b.n	8005078 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005076:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2208      	movs	r2, #8
 800507e:	4013      	ands	r3, r2
 8005080:	d047      	beq.n	8005112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005082:	4b32      	ldr	r3, [pc, #200]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2238      	movs	r2, #56	; 0x38
 8005088:	4013      	ands	r3, r2
 800508a:	2b18      	cmp	r3, #24
 800508c:	d10a      	bne.n	80050a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800508e:	4b2f      	ldr	r3, [pc, #188]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8005090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005092:	2202      	movs	r2, #2
 8005094:	4013      	ands	r3, r2
 8005096:	d03c      	beq.n	8005112 <HAL_RCC_OscConfig+0x2f2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d138      	bne.n	8005112 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e1cb      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d019      	beq.n	80050e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050ac:	4b27      	ldr	r3, [pc, #156]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 80050ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050b0:	4b26      	ldr	r3, [pc, #152]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 80050b2:	2101      	movs	r1, #1
 80050b4:	430a      	orrs	r2, r1
 80050b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fd fe78 	bl	8002dac <HAL_GetTick>
 80050bc:	0003      	movs	r3, r0
 80050be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fd fe73 	bl	8002dac <HAL_GetTick>
 80050c6:	0002      	movs	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e1b3      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050d4:	4b1d      	ldr	r3, [pc, #116]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 80050d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d8:	2202      	movs	r2, #2
 80050da:	4013      	ands	r3, r2
 80050dc:	d0f1      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2a2>
 80050de:	e018      	b.n	8005112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050e0:	4b1a      	ldr	r3, [pc, #104]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 80050e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050e4:	4b19      	ldr	r3, [pc, #100]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 80050e6:	2101      	movs	r1, #1
 80050e8:	438a      	bics	r2, r1
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7fd fe5e 	bl	8002dac <HAL_GetTick>
 80050f0:	0003      	movs	r3, r0
 80050f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f6:	f7fd fe59 	bl	8002dac <HAL_GetTick>
 80050fa:	0002      	movs	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e199      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 800510a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800510c:	2202      	movs	r2, #2
 800510e:	4013      	ands	r3, r2
 8005110:	d1f1      	bne.n	80050f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2204      	movs	r2, #4
 8005118:	4013      	ands	r3, r2
 800511a:	d100      	bne.n	800511e <HAL_RCC_OscConfig+0x2fe>
 800511c:	e0c6      	b.n	80052ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800511e:	231f      	movs	r3, #31
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	2200      	movs	r2, #0
 8005124:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2238      	movs	r2, #56	; 0x38
 800512c:	4013      	ands	r3, r2
 800512e:	2b20      	cmp	r3, #32
 8005130:	d11e      	bne.n	8005170 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <HAL_RCC_OscConfig+0x32c>)
 8005134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005136:	2202      	movs	r2, #2
 8005138:	4013      	ands	r3, r2
 800513a:	d100      	bne.n	800513e <HAL_RCC_OscConfig+0x31e>
 800513c:	e0b6      	b.n	80052ac <HAL_RCC_OscConfig+0x48c>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d000      	beq.n	8005148 <HAL_RCC_OscConfig+0x328>
 8005146:	e0b1      	b.n	80052ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e177      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
 800514c:	40021000 	.word	0x40021000
 8005150:	fffeffff 	.word	0xfffeffff
 8005154:	fffbffff 	.word	0xfffbffff
 8005158:	ffff80ff 	.word	0xffff80ff
 800515c:	ffffc7ff 	.word	0xffffc7ff
 8005160:	00f42400 	.word	0x00f42400
 8005164:	20003134 	.word	0x20003134
 8005168:	20003138 	.word	0x20003138
 800516c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005170:	4bb4      	ldr	r3, [pc, #720]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	055b      	lsls	r3, r3, #21
 8005178:	4013      	ands	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_RCC_OscConfig+0x360>
 800517c:	2301      	movs	r3, #1
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x362>
 8005180:	2300      	movs	r3, #0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d011      	beq.n	80051aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005186:	4baf      	ldr	r3, [pc, #700]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518a:	4bae      	ldr	r3, [pc, #696]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800518c:	2180      	movs	r1, #128	; 0x80
 800518e:	0549      	lsls	r1, r1, #21
 8005190:	430a      	orrs	r2, r1
 8005192:	63da      	str	r2, [r3, #60]	; 0x3c
 8005194:	4bab      	ldr	r3, [pc, #684]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005198:	2380      	movs	r3, #128	; 0x80
 800519a:	055b      	lsls	r3, r3, #21
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80051a2:	231f      	movs	r3, #31
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051aa:	4ba7      	ldr	r3, [pc, #668]	; (8005448 <HAL_RCC_OscConfig+0x628>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	2380      	movs	r3, #128	; 0x80
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4013      	ands	r3, r2
 80051b4:	d11a      	bne.n	80051ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051b6:	4ba4      	ldr	r3, [pc, #656]	; (8005448 <HAL_RCC_OscConfig+0x628>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4ba3      	ldr	r3, [pc, #652]	; (8005448 <HAL_RCC_OscConfig+0x628>)
 80051bc:	2180      	movs	r1, #128	; 0x80
 80051be:	0049      	lsls	r1, r1, #1
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051c4:	f7fd fdf2 	bl	8002dac <HAL_GetTick>
 80051c8:	0003      	movs	r3, r0
 80051ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ce:	f7fd fded 	bl	8002dac <HAL_GetTick>
 80051d2:	0002      	movs	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e12d      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e0:	4b99      	ldr	r3, [pc, #612]	; (8005448 <HAL_RCC_OscConfig+0x628>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4013      	ands	r3, r2
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x3e2>
 80051f4:	4b93      	ldr	r3, [pc, #588]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80051f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051f8:	4b92      	ldr	r3, [pc, #584]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80051fa:	2101      	movs	r1, #1
 80051fc:	430a      	orrs	r2, r1
 80051fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8005200:	e01c      	b.n	800523c <HAL_RCC_OscConfig+0x41c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b05      	cmp	r3, #5
 8005208:	d10c      	bne.n	8005224 <HAL_RCC_OscConfig+0x404>
 800520a:	4b8e      	ldr	r3, [pc, #568]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800520c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800520e:	4b8d      	ldr	r3, [pc, #564]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005210:	2104      	movs	r1, #4
 8005212:	430a      	orrs	r2, r1
 8005214:	65da      	str	r2, [r3, #92]	; 0x5c
 8005216:	4b8b      	ldr	r3, [pc, #556]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005218:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800521a:	4b8a      	ldr	r3, [pc, #552]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800521c:	2101      	movs	r1, #1
 800521e:	430a      	orrs	r2, r1
 8005220:	65da      	str	r2, [r3, #92]	; 0x5c
 8005222:	e00b      	b.n	800523c <HAL_RCC_OscConfig+0x41c>
 8005224:	4b87      	ldr	r3, [pc, #540]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005226:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005228:	4b86      	ldr	r3, [pc, #536]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800522a:	2101      	movs	r1, #1
 800522c:	438a      	bics	r2, r1
 800522e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005230:	4b84      	ldr	r3, [pc, #528]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005232:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005234:	4b83      	ldr	r3, [pc, #524]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005236:	2104      	movs	r1, #4
 8005238:	438a      	bics	r2, r1
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d014      	beq.n	800526e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fd fdb2 	bl	8002dac <HAL_GetTick>
 8005248:	0003      	movs	r3, r0
 800524a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800524c:	e009      	b.n	8005262 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fd fdad 	bl	8002dac <HAL_GetTick>
 8005252:	0002      	movs	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	4a7c      	ldr	r2, [pc, #496]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0ec      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005262:	4b78      	ldr	r3, [pc, #480]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	2202      	movs	r2, #2
 8005268:	4013      	ands	r3, r2
 800526a:	d0f0      	beq.n	800524e <HAL_RCC_OscConfig+0x42e>
 800526c:	e013      	b.n	8005296 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fd fd9d 	bl	8002dac <HAL_GetTick>
 8005272:	0003      	movs	r3, r0
 8005274:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005276:	e009      	b.n	800528c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fd fd98 	bl	8002dac <HAL_GetTick>
 800527c:	0002      	movs	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a72      	ldr	r2, [pc, #456]	; (800544c <HAL_RCC_OscConfig+0x62c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e0d7      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800528c:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	2202      	movs	r2, #2
 8005292:	4013      	ands	r3, r2
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005296:	231f      	movs	r3, #31
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d105      	bne.n	80052ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052a0:	4b68      	ldr	r3, [pc, #416]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80052a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a4:	4b67      	ldr	r3, [pc, #412]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80052a6:	496a      	ldr	r1, [pc, #424]	; (8005450 <HAL_RCC_OscConfig+0x630>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d100      	bne.n	80052b6 <HAL_RCC_OscConfig+0x496>
 80052b4:	e0c1      	b.n	800543a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b6:	4b63      	ldr	r3, [pc, #396]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2238      	movs	r2, #56	; 0x38
 80052bc:	4013      	ands	r3, r2
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d100      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4a4>
 80052c2:	e081      	b.n	80053c8 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d156      	bne.n	800537a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052cc:	4b5d      	ldr	r3, [pc, #372]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b5c      	ldr	r3, [pc, #368]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80052d2:	4960      	ldr	r1, [pc, #384]	; (8005454 <HAL_RCC_OscConfig+0x634>)
 80052d4:	400a      	ands	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d8:	f7fd fd68 	bl	8002dac <HAL_GetTick>
 80052dc:	0003      	movs	r3, r0
 80052de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e2:	f7fd fd63 	bl	8002dac <HAL_GetTick>
 80052e6:	0002      	movs	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e0a3      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f4:	4b53      	ldr	r3, [pc, #332]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	049b      	lsls	r3, r3, #18
 80052fc:	4013      	ands	r3, r2
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005300:	4b50      	ldr	r3, [pc, #320]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	4a54      	ldr	r2, [pc, #336]	; (8005458 <HAL_RCC_OscConfig+0x638>)
 8005306:	4013      	ands	r3, r2
 8005308:	0019      	movs	r1, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	431a      	orrs	r2, r3
 800532e:	4b45      	ldr	r3, [pc, #276]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005330:	430a      	orrs	r2, r1
 8005332:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005334:	4b43      	ldr	r3, [pc, #268]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b42      	ldr	r3, [pc, #264]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	0449      	lsls	r1, r1, #17
 800533e:	430a      	orrs	r2, r1
 8005340:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005342:	4b40      	ldr	r3, [pc, #256]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	4b3f      	ldr	r3, [pc, #252]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005348:	2180      	movs	r1, #128	; 0x80
 800534a:	0549      	lsls	r1, r1, #21
 800534c:	430a      	orrs	r2, r1
 800534e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005350:	f7fd fd2c 	bl	8002dac <HAL_GetTick>
 8005354:	0003      	movs	r3, r0
 8005356:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535a:	f7fd fd27 	bl	8002dac <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e067      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536c:	4b35      	ldr	r3, [pc, #212]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	049b      	lsls	r3, r3, #18
 8005374:	4013      	ands	r3, r2
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x53a>
 8005378:	e05f      	b.n	800543a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537a:	4b32      	ldr	r3, [pc, #200]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	4b31      	ldr	r3, [pc, #196]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005380:	4934      	ldr	r1, [pc, #208]	; (8005454 <HAL_RCC_OscConfig+0x634>)
 8005382:	400a      	ands	r2, r1
 8005384:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005386:	4b2f      	ldr	r3, [pc, #188]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	4b2e      	ldr	r3, [pc, #184]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 800538c:	2103      	movs	r1, #3
 800538e:	438a      	bics	r2, r1
 8005390:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005392:	4b2c      	ldr	r3, [pc, #176]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 8005398:	4930      	ldr	r1, [pc, #192]	; (800545c <HAL_RCC_OscConfig+0x63c>)
 800539a:	400a      	ands	r2, r1
 800539c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539e:	f7fd fd05 	bl	8002dac <HAL_GetTick>
 80053a2:	0003      	movs	r3, r0
 80053a4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fd fd00 	bl	8002dac <HAL_GetTick>
 80053ac:	0002      	movs	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e040      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ba:	4b22      	ldr	r3, [pc, #136]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	049b      	lsls	r3, r3, #18
 80053c2:	4013      	ands	r3, r2
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x588>
 80053c6:	e038      	b.n	800543a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e033      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80053d4:	4b1b      	ldr	r3, [pc, #108]	; (8005444 <HAL_RCC_OscConfig+0x624>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2203      	movs	r2, #3
 80053de:	401a      	ands	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d126      	bne.n	8005436 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2270      	movs	r2, #112	; 0x70
 80053ec:	401a      	ands	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d11f      	bne.n	8005436 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	23fe      	movs	r3, #254	; 0xfe
 80053fa:	01db      	lsls	r3, r3, #7
 80053fc:	401a      	ands	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005404:	429a      	cmp	r2, r3
 8005406:	d116      	bne.n	8005436 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	23f8      	movs	r3, #248	; 0xf8
 800540c:	039b      	lsls	r3, r3, #14
 800540e:	401a      	ands	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d10e      	bne.n	8005436 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	23e0      	movs	r3, #224	; 0xe0
 800541c:	051b      	lsls	r3, r3, #20
 800541e:	401a      	ands	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005424:	429a      	cmp	r2, r3
 8005426:	d106      	bne.n	8005436 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	0f5b      	lsrs	r3, r3, #29
 800542c:	075a      	lsls	r2, r3, #29
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d001      	beq.n	800543a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b008      	add	sp, #32
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
 800544c:	00001388 	.word	0x00001388
 8005450:	efffffff 	.word	0xefffffff
 8005454:	feffffff 	.word	0xfeffffff
 8005458:	11c1808c 	.word	0x11c1808c
 800545c:	eefeffff 	.word	0xeefeffff

08005460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0e9      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005474:	4b76      	ldr	r3, [pc, #472]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2207      	movs	r2, #7
 800547a:	4013      	ands	r3, r2
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d91e      	bls.n	80054c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b73      	ldr	r3, [pc, #460]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2207      	movs	r2, #7
 8005488:	4393      	bics	r3, r2
 800548a:	0019      	movs	r1, r3
 800548c:	4b70      	ldr	r3, [pc, #448]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005494:	f7fd fc8a 	bl	8002dac <HAL_GetTick>
 8005498:	0003      	movs	r3, r0
 800549a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800549c:	e009      	b.n	80054b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549e:	f7fd fc85 	bl	8002dac <HAL_GetTick>
 80054a2:	0002      	movs	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	4a6a      	ldr	r2, [pc, #424]	; (8005654 <HAL_RCC_ClockConfig+0x1f4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e0ca      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054b2:	4b67      	ldr	r3, [pc, #412]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2207      	movs	r2, #7
 80054b8:	4013      	ands	r3, r2
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d1ee      	bne.n	800549e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2202      	movs	r2, #2
 80054c6:	4013      	ands	r3, r2
 80054c8:	d015      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2204      	movs	r2, #4
 80054d0:	4013      	ands	r3, r2
 80054d2:	d006      	beq.n	80054e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054d4:	4b60      	ldr	r3, [pc, #384]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	4b5f      	ldr	r3, [pc, #380]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 80054da:	21e0      	movs	r1, #224	; 0xe0
 80054dc:	01c9      	lsls	r1, r1, #7
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e2:	4b5d      	ldr	r3, [pc, #372]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4a5d      	ldr	r2, [pc, #372]	; (800565c <HAL_RCC_ClockConfig+0x1fc>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	0019      	movs	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 80054f2:	430a      	orrs	r2, r1
 80054f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2201      	movs	r2, #1
 80054fc:	4013      	ands	r3, r2
 80054fe:	d057      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d107      	bne.n	8005518 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005508:	4b53      	ldr	r3, [pc, #332]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	4013      	ands	r3, r2
 8005512:	d12b      	bne.n	800556c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e097      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d107      	bne.n	8005530 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005520:	4b4d      	ldr	r3, [pc, #308]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	049b      	lsls	r3, r3, #18
 8005528:	4013      	ands	r3, r2
 800552a:	d11f      	bne.n	800556c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e08b      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d107      	bne.n	8005548 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005538:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4013      	ands	r3, r2
 8005542:	d113      	bne.n	800556c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e07f      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d106      	bne.n	800555e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005550:	4b41      	ldr	r3, [pc, #260]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 8005552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005554:	2202      	movs	r2, #2
 8005556:	4013      	ands	r3, r2
 8005558:	d108      	bne.n	800556c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e074      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555e:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 8005560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005562:	2202      	movs	r2, #2
 8005564:	4013      	ands	r3, r2
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e06d      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800556c:	4b3a      	ldr	r3, [pc, #232]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	2207      	movs	r2, #7
 8005572:	4393      	bics	r3, r2
 8005574:	0019      	movs	r1, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	4b37      	ldr	r3, [pc, #220]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005580:	f7fd fc14 	bl	8002dac <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005588:	e009      	b.n	800559e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558a:	f7fd fc0f 	bl	8002dac <HAL_GetTick>
 800558e:	0002      	movs	r2, r0
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	4a2f      	ldr	r2, [pc, #188]	; (8005654 <HAL_RCC_ClockConfig+0x1f4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e054      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559e:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2238      	movs	r2, #56	; 0x38
 80055a4:	401a      	ands	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d1ec      	bne.n	800558a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b0:	4b27      	ldr	r3, [pc, #156]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2207      	movs	r2, #7
 80055b6:	4013      	ands	r3, r2
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d21e      	bcs.n	80055fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2207      	movs	r2, #7
 80055c4:	4393      	bics	r3, r2
 80055c6:	0019      	movs	r1, r3
 80055c8:	4b21      	ldr	r3, [pc, #132]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055d0:	f7fd fbec 	bl	8002dac <HAL_GetTick>
 80055d4:	0003      	movs	r3, r0
 80055d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055d8:	e009      	b.n	80055ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055da:	f7fd fbe7 	bl	8002dac <HAL_GetTick>
 80055de:	0002      	movs	r2, r0
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	4a1b      	ldr	r2, [pc, #108]	; (8005654 <HAL_RCC_ClockConfig+0x1f4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e02c      	b.n	8005648 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <HAL_RCC_ClockConfig+0x1f0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2207      	movs	r2, #7
 80055f4:	4013      	ands	r3, r2
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d1ee      	bne.n	80055da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2204      	movs	r2, #4
 8005602:	4013      	ands	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <HAL_RCC_ClockConfig+0x200>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b10      	ldr	r3, [pc, #64]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 8005616:	430a      	orrs	r2, r1
 8005618:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800561a:	f000 f829 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800561e:	0001      	movs	r1, r0
 8005620:	4b0d      	ldr	r3, [pc, #52]	; (8005658 <HAL_RCC_ClockConfig+0x1f8>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	0a1b      	lsrs	r3, r3, #8
 8005626:	220f      	movs	r2, #15
 8005628:	401a      	ands	r2, r3
 800562a:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <HAL_RCC_ClockConfig+0x204>)
 800562c:	0092      	lsls	r2, r2, #2
 800562e:	58d3      	ldr	r3, [r2, r3]
 8005630:	221f      	movs	r2, #31
 8005632:	4013      	ands	r3, r2
 8005634:	000a      	movs	r2, r1
 8005636:	40da      	lsrs	r2, r3
 8005638:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_RCC_ClockConfig+0x208>)
 800563a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_ClockConfig+0x20c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	0018      	movs	r0, r3
 8005642:	f7fd fb57 	bl	8002cf4 <HAL_InitTick>
 8005646:	0003      	movs	r3, r0
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b004      	add	sp, #16
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40022000 	.word	0x40022000
 8005654:	00001388 	.word	0x00001388
 8005658:	40021000 	.word	0x40021000
 800565c:	fffff0ff 	.word	0xfffff0ff
 8005660:	ffff8fff 	.word	0xffff8fff
 8005664:	0800990c 	.word	0x0800990c
 8005668:	20003134 	.word	0x20003134
 800566c:	20003138 	.word	0x20003138

08005670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005676:	4b3c      	ldr	r3, [pc, #240]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2238      	movs	r2, #56	; 0x38
 800567c:	4013      	ands	r3, r2
 800567e:	d10f      	bne.n	80056a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005680:	4b39      	ldr	r3, [pc, #228]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	0adb      	lsrs	r3, r3, #11
 8005686:	2207      	movs	r2, #7
 8005688:	4013      	ands	r3, r2
 800568a:	2201      	movs	r2, #1
 800568c:	409a      	lsls	r2, r3
 800568e:	0013      	movs	r3, r2
 8005690:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005692:	6839      	ldr	r1, [r7, #0]
 8005694:	4835      	ldr	r0, [pc, #212]	; (800576c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005696:	f7fa fd35 	bl	8000104 <__udivsi3>
 800569a:	0003      	movs	r3, r0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	e05d      	b.n	800575c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056a0:	4b31      	ldr	r3, [pc, #196]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2238      	movs	r2, #56	; 0x38
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d102      	bne.n	80056b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056ac:	4b30      	ldr	r3, [pc, #192]	; (8005770 <HAL_RCC_GetSysClockFreq+0x100>)
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	e054      	b.n	800575c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056b2:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2238      	movs	r2, #56	; 0x38
 80056b8:	4013      	ands	r3, r2
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d138      	bne.n	8005730 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2203      	movs	r2, #3
 80056c4:	4013      	ands	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c8:	4b27      	ldr	r3, [pc, #156]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	091b      	lsrs	r3, r3, #4
 80056ce:	2207      	movs	r2, #7
 80056d0:	4013      	ands	r3, r2
 80056d2:	3301      	adds	r3, #1
 80056d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d10d      	bne.n	80056f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	4824      	ldr	r0, [pc, #144]	; (8005770 <HAL_RCC_GetSysClockFreq+0x100>)
 80056e0:	f7fa fd10 	bl	8000104 <__udivsi3>
 80056e4:	0003      	movs	r3, r0
 80056e6:	0019      	movs	r1, r3
 80056e8:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	227f      	movs	r2, #127	; 0x7f
 80056f0:	4013      	ands	r3, r2
 80056f2:	434b      	muls	r3, r1
 80056f4:	617b      	str	r3, [r7, #20]
        break;
 80056f6:	e00d      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	481c      	ldr	r0, [pc, #112]	; (800576c <HAL_RCC_GetSysClockFreq+0xfc>)
 80056fc:	f7fa fd02 	bl	8000104 <__udivsi3>
 8005700:	0003      	movs	r3, r0
 8005702:	0019      	movs	r1, r3
 8005704:	4b18      	ldr	r3, [pc, #96]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	0a1b      	lsrs	r3, r3, #8
 800570a:	227f      	movs	r2, #127	; 0x7f
 800570c:	4013      	ands	r3, r2
 800570e:	434b      	muls	r3, r1
 8005710:	617b      	str	r3, [r7, #20]
        break;
 8005712:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005714:	4b14      	ldr	r3, [pc, #80]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	0f5b      	lsrs	r3, r3, #29
 800571a:	2207      	movs	r2, #7
 800571c:	4013      	ands	r3, r2
 800571e:	3301      	adds	r3, #1
 8005720:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f7fa fced 	bl	8000104 <__udivsi3>
 800572a:	0003      	movs	r3, r0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	e015      	b.n	800575c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2238      	movs	r2, #56	; 0x38
 8005736:	4013      	ands	r3, r2
 8005738:	2b20      	cmp	r3, #32
 800573a:	d103      	bne.n	8005744 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	021b      	lsls	r3, r3, #8
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	e00b      	b.n	800575c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2238      	movs	r2, #56	; 0x38
 800574a:	4013      	ands	r3, r2
 800574c:	2b18      	cmp	r3, #24
 800574e:	d103      	bne.n	8005758 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005750:	23fa      	movs	r3, #250	; 0xfa
 8005752:	01db      	lsls	r3, r3, #7
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e001      	b.n	800575c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800575c:	693b      	ldr	r3, [r7, #16]
}
 800575e:	0018      	movs	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	b006      	add	sp, #24
 8005764:	bd80      	pop	{r7, pc}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	40021000 	.word	0x40021000
 800576c:	00f42400 	.word	0x00f42400
 8005770:	007a1200 	.word	0x007a1200

08005774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b02      	ldr	r3, [pc, #8]	; (8005784 <HAL_RCC_GetHCLKFreq+0x10>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	0018      	movs	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	20003134 	.word	0x20003134

08005788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005788:	b5b0      	push	{r4, r5, r7, lr}
 800578a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800578c:	f7ff fff2 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 8005790:	0004      	movs	r4, r0
 8005792:	f7ff fb39 	bl	8004e08 <LL_RCC_GetAPB1Prescaler>
 8005796:	0003      	movs	r3, r0
 8005798:	0b1a      	lsrs	r2, r3, #12
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800579c:	0092      	lsls	r2, r2, #2
 800579e:	58d3      	ldr	r3, [r2, r3]
 80057a0:	221f      	movs	r2, #31
 80057a2:	4013      	ands	r3, r2
 80057a4:	40dc      	lsrs	r4, r3
 80057a6:	0023      	movs	r3, r4
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bdb0      	pop	{r4, r5, r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	0800994c 	.word	0x0800994c

080057b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80057bc:	2313      	movs	r3, #19
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057c4:	2312      	movs	r3, #18
 80057c6:	18fb      	adds	r3, r7, r3
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	2380      	movs	r3, #128	; 0x80
 80057d2:	029b      	lsls	r3, r3, #10
 80057d4:	4013      	ands	r3, r2
 80057d6:	d100      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x26>
 80057d8:	e0a3      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057da:	2011      	movs	r0, #17
 80057dc:	183b      	adds	r3, r7, r0
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057e2:	4bc3      	ldr	r3, [pc, #780]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	055b      	lsls	r3, r3, #21
 80057ea:	4013      	ands	r3, r2
 80057ec:	d110      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057ee:	4bc0      	ldr	r3, [pc, #768]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f2:	4bbf      	ldr	r3, [pc, #764]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057f4:	2180      	movs	r1, #128	; 0x80
 80057f6:	0549      	lsls	r1, r1, #21
 80057f8:	430a      	orrs	r2, r1
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80057fc:	4bbc      	ldr	r3, [pc, #752]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80057fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005800:	2380      	movs	r3, #128	; 0x80
 8005802:	055b      	lsls	r3, r3, #21
 8005804:	4013      	ands	r3, r2
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800580a:	183b      	adds	r3, r7, r0
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005810:	4bb8      	ldr	r3, [pc, #736]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4bb7      	ldr	r3, [pc, #732]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	0049      	lsls	r1, r1, #1
 800581a:	430a      	orrs	r2, r1
 800581c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800581e:	f7fd fac5 	bl	8002dac <HAL_GetTick>
 8005822:	0003      	movs	r3, r0
 8005824:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005826:	e00b      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005828:	f7fd fac0 	bl	8002dac <HAL_GetTick>
 800582c:	0002      	movs	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d904      	bls.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005836:	2313      	movs	r3, #19
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2203      	movs	r2, #3
 800583c:	701a      	strb	r2, [r3, #0]
        break;
 800583e:	e005      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005840:	4bac      	ldr	r3, [pc, #688]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	2380      	movs	r3, #128	; 0x80
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4013      	ands	r3, r2
 800584a:	d0ed      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800584c:	2313      	movs	r3, #19
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d154      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005856:	4ba6      	ldr	r3, [pc, #664]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005858:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800585a:	23c0      	movs	r3, #192	; 0xc0
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4013      	ands	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d019      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	429a      	cmp	r2, r3
 8005870:	d014      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005872:	4b9f      	ldr	r3, [pc, #636]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005876:	4aa0      	ldr	r2, [pc, #640]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005878:	4013      	ands	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800587c:	4b9c      	ldr	r3, [pc, #624]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800587e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005880:	4b9b      	ldr	r3, [pc, #620]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	0249      	lsls	r1, r1, #9
 8005886:	430a      	orrs	r2, r1
 8005888:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800588a:	4b99      	ldr	r3, [pc, #612]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800588c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800588e:	4b98      	ldr	r3, [pc, #608]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005890:	499a      	ldr	r1, [pc, #616]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005892:	400a      	ands	r2, r1
 8005894:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005896:	4b96      	ldr	r3, [pc, #600]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2201      	movs	r2, #1
 80058a0:	4013      	ands	r3, r2
 80058a2:	d016      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fd fa82 	bl	8002dac <HAL_GetTick>
 80058a8:	0003      	movs	r3, r0
 80058aa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ac:	e00c      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fd fa7d 	bl	8002dac <HAL_GetTick>
 80058b2:	0002      	movs	r2, r0
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	4a91      	ldr	r2, [pc, #580]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d904      	bls.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80058be:	2313      	movs	r3, #19
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2203      	movs	r2, #3
 80058c4:	701a      	strb	r2, [r3, #0]
            break;
 80058c6:	e004      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c8:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	2202      	movs	r2, #2
 80058ce:	4013      	ands	r3, r2
 80058d0:	d0ed      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80058d2:	2313      	movs	r3, #19
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058dc:	4b84      	ldr	r3, [pc, #528]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	4a85      	ldr	r2, [pc, #532]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	0019      	movs	r1, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ea:	4b81      	ldr	r3, [pc, #516]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80058ec:	430a      	orrs	r2, r1
 80058ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80058f0:	e00c      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058f2:	2312      	movs	r3, #18
 80058f4:	18fb      	adds	r3, r7, r3
 80058f6:	2213      	movs	r2, #19
 80058f8:	18ba      	adds	r2, r7, r2
 80058fa:	7812      	ldrb	r2, [r2, #0]
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e005      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	2312      	movs	r3, #18
 8005902:	18fb      	adds	r3, r7, r3
 8005904:	2213      	movs	r2, #19
 8005906:	18ba      	adds	r2, r7, r2
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800590c:	2311      	movs	r3, #17
 800590e:	18fb      	adds	r3, r7, r3
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d105      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005916:	4b76      	ldr	r3, [pc, #472]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800591a:	4b75      	ldr	r3, [pc, #468]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800591c:	4979      	ldr	r1, [pc, #484]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800591e:	400a      	ands	r2, r1
 8005920:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	4013      	ands	r3, r2
 800592a:	d009      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800592c:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800592e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005930:	2203      	movs	r2, #3
 8005932:	4393      	bics	r3, r2
 8005934:	0019      	movs	r1, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	4b6d      	ldr	r3, [pc, #436]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800593c:	430a      	orrs	r2, r1
 800593e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2202      	movs	r2, #2
 8005946:	4013      	ands	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800594a:	4b69      	ldr	r3, [pc, #420]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	220c      	movs	r2, #12
 8005950:	4393      	bics	r3, r2
 8005952:	0019      	movs	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	4b65      	ldr	r3, [pc, #404]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800595a:	430a      	orrs	r2, r1
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2210      	movs	r2, #16
 8005964:	4013      	ands	r3, r2
 8005966:	d009      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005968:	4b61      	ldr	r3, [pc, #388]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800596a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596c:	4a66      	ldr	r2, [pc, #408]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800596e:	4013      	ands	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	4b5e      	ldr	r3, [pc, #376]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005978:	430a      	orrs	r2, r1
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4013      	ands	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005988:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	4a5f      	ldr	r2, [pc, #380]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800598e:	4013      	ands	r3, r2
 8005990:	0019      	movs	r1, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	4b56      	ldr	r3, [pc, #344]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005998:	430a      	orrs	r2, r1
 800599a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4013      	ands	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059a8:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	4a58      	ldr	r2, [pc, #352]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	0019      	movs	r1, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059b8:	430a      	orrs	r2, r1
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2220      	movs	r2, #32
 80059c2:	4013      	ands	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059c6:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	4a52      	ldr	r2, [pc, #328]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	0019      	movs	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691a      	ldr	r2, [r3, #16]
 80059d4:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059d6:	430a      	orrs	r2, r1
 80059d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	01db      	lsls	r3, r3, #7
 80059e2:	4013      	ands	r3, r2
 80059e4:	d015      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059e6:	4b42      	ldr	r3, [pc, #264]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	0899      	lsrs	r1, r3, #2
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	4b3f      	ldr	r3, [pc, #252]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d106      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005a04:	4b3a      	ldr	r3, [pc, #232]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	4b39      	ldr	r3, [pc, #228]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	0249      	lsls	r1, r1, #9
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	2380      	movs	r3, #128	; 0x80
 8005a18:	031b      	lsls	r3, r3, #12
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a1e:	4b34      	ldr	r3, [pc, #208]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a22:	2240      	movs	r2, #64	; 0x40
 8005a24:	4393      	bics	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a2c:	4b30      	ldr	r3, [pc, #192]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	039b      	lsls	r3, r3, #14
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d016      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	4a35      	ldr	r2, [pc, #212]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	0019      	movs	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a4c:	4b28      	ldr	r3, [pc, #160]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	03db      	lsls	r3, r3, #15
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d106      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	4b23      	ldr	r3, [pc, #140]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a64:	2180      	movs	r1, #128	; 0x80
 8005a66:	0449      	lsls	r1, r1, #17
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	03db      	lsls	r3, r3, #15
 8005a74:	4013      	ands	r3, r2
 8005a76:	d016      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005a78:	4b1d      	ldr	r3, [pc, #116]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8005a7e:	4013      	ands	r3, r2
 8005a80:	0019      	movs	r1, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	4b1a      	ldr	r3, [pc, #104]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	045b      	lsls	r3, r3, #17
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a98:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a9a:	68da      	ldr	r2, [r3, #12]
 8005a9c:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	0449      	lsls	r1, r1, #17
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	2380      	movs	r3, #128	; 0x80
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	4013      	ands	r3, r2
 8005ab0:	d016      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005ab8:	4013      	ands	r3, r2
 8005aba:	0019      	movs	r1, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	4b0b      	ldr	r3, [pc, #44]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	2380      	movs	r3, #128	; 0x80
 8005acc:	01db      	lsls	r3, r3, #7
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d106      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ad2:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005ad8:	2180      	movs	r1, #128	; 0x80
 8005ada:	0249      	lsls	r1, r1, #9
 8005adc:	430a      	orrs	r2, r1
 8005ade:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005ae0:	2312      	movs	r3, #18
 8005ae2:	18fb      	adds	r3, r7, r3
 8005ae4:	781b      	ldrb	r3, [r3, #0]
}
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	b006      	add	sp, #24
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	40021000 	.word	0x40021000
 8005af4:	40007000 	.word	0x40007000
 8005af8:	fffffcff 	.word	0xfffffcff
 8005afc:	fffeffff 	.word	0xfffeffff
 8005b00:	00001388 	.word	0x00001388
 8005b04:	efffffff 	.word	0xefffffff
 8005b08:	fffff3ff 	.word	0xfffff3ff
 8005b0c:	fff3ffff 	.word	0xfff3ffff
 8005b10:	ffcfffff 	.word	0xffcfffff
 8005b14:	ffffcfff 	.word	0xffffcfff
 8005b18:	ffbfffff 	.word	0xffbfffff
 8005b1c:	feffffff 	.word	0xfeffffff
 8005b20:	ffff3fff 	.word	0xffff3fff

08005b24 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @note   (1) Peripheral not available on all devices
  * @note   (2) Peripheral Clock configuration not available on all devices
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  uint32_t rngdiv;
#endif /* RCC_CCIPR_RNGSEL */
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	029b      	lsls	r3, r3, #10
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d136      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005b3a:	4bcd      	ldr	r3, [pc, #820]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b3e:	23c0      	movs	r3, #192	; 0xc0
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4013      	ands	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005b46:	4bca      	ldr	r3, [pc, #808]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d108      	bne.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d103      	bne.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e31c      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005b64:	4bc2      	ldr	r3, [pc, #776]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	2202      	movs	r2, #2
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d108      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	2380      	movs	r3, #128	; 0x80
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d103      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
    {
      frequency = LSI_VALUE;
 8005b7a:	23fa      	movs	r3, #250	; 0xfa
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e30d      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005b82:	4bbb      	ldr	r3, [pc, #748]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	029b      	lsls	r3, r3, #10
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d000      	beq.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 8005b94:	e303      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	23c0      	movs	r3, #192	; 0xc0
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d000      	beq.n	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
 8005ba0:	e2fd      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
    {
      frequency = HSE_VALUE / 32U;
 8005ba2:	4bb4      	ldr	r3, [pc, #720]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e2fa      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)  /* HSI ? */
 8005ba8:	4bb1      	ldr	r3, [pc, #708]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2203      	movs	r2, #3
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d102      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
    {
      pllvco = HSI_VALUE;
 8005bb4:	4bb0      	ldr	r3, [pc, #704]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)  /* HSE ? */
 8005bba:	4bad      	ldr	r3, [pc, #692]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	2203      	movs	r2, #3
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d102      	bne.n	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      pllvco = HSE_VALUE;
 8005bc6:	4bad      	ldr	r3, [pc, #692]	; (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8005bc8:	613b      	str	r3, [r7, #16]
 8005bca:	e001      	b.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
    }
    else /* No source */
    {
      pllvco = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	613b      	str	r3, [r7, #16]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005bd0:	4ba7      	ldr	r3, [pc, #668]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	091b      	lsrs	r3, r3, #4
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	4013      	ands	r3, r2
 8005bda:	3301      	adds	r3, #1
 8005bdc:	0019      	movs	r1, r3
 8005bde:	6938      	ldr	r0, [r7, #16]
 8005be0:	f7fa fa90 	bl	8000104 <__udivsi3>
 8005be4:	0003      	movs	r3, r0
 8005be6:	613b      	str	r3, [r7, #16]

    switch (PeriphClk)
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	2380      	movs	r3, #128	; 0x80
 8005bec:	03db      	lsls	r3, r3, #15
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d100      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
 8005bf2:	e28e      	b.n	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	03db      	lsls	r3, r3, #15
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d900      	bls.n	8005c00 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8005bfe:	e2b7      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	039b      	lsls	r3, r3, #14
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d100      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005c0a:	e253      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	2380      	movs	r3, #128	; 0x80
 8005c10:	039b      	lsls	r3, r3, #14
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d900      	bls.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005c16:	e2ab      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	2380      	movs	r3, #128	; 0x80
 8005c1c:	031b      	lsls	r3, r3, #12
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d100      	bne.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005c22:	e0b2      	b.n	8005d8a <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	2380      	movs	r3, #128	; 0x80
 8005c28:	031b      	lsls	r3, r3, #12
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d900      	bls.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8005c2e:	e29f      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	01db      	lsls	r3, r3, #7
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d100      	bne.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x118>
 8005c3a:	e103      	b.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	2380      	movs	r3, #128	; 0x80
 8005c40:	01db      	lsls	r3, r3, #7
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d900      	bls.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005c46:	e293      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	011b      	lsls	r3, r3, #4
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d100      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8005c52:	e165      	b.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d900      	bls.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8005c5e:	e287      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	2380      	movs	r3, #128	; 0x80
 8005c64:	00db      	lsls	r3, r3, #3
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d100      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8005c6a:	e1e3      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d900      	bls.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8005c76:	e27b      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d100      	bne.n	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005c82:	e197      	b.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	2380      	movs	r3, #128	; 0x80
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d900      	bls.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8005c8e:	e26f      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b20      	cmp	r3, #32
 8005c94:	d100      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8005c96:	e118      	b.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d900      	bls.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
 8005c9e:	e267      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d100      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8005ca6:	e093      	b.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b10      	cmp	r3, #16
 8005cac:	d900      	bls.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8005cae:	e25f      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d003      	beq.n	8005cbe <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d033      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        }
        break;
#endif /* RCC_CCIPR2_FDCANSEL */

      default:
        break;
 8005cbc:	e258      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005cbe:	4b6c      	ldr	r3, [pc, #432]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART1CLKSOURCE_PCLK1)            /* PCLK1 ? */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005cce:	f7ff fd5b 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8005cd2:	0003      	movs	r3, r0
 8005cd4:	617b      	str	r3, [r7, #20]
        break;
 8005cd6:	e24d      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)     /* SYSCLK ? */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d104      	bne.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
          frequency = HAL_RCC_GetSysClockFreq();
 8005cde:	f7ff fcc7 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	617b      	str	r3, [r7, #20]
        break;
 8005ce6:	e245      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ce8:	4b61      	ldr	r3, [pc, #388]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	401a      	ands	r2, r3
 8005cf2:	2380      	movs	r3, #128	; 0x80
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d105      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
          frequency = HSI_VALUE;
 8005d00:	4b5d      	ldr	r3, [pc, #372]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005d02:	617b      	str	r3, [r7, #20]
        break;
 8005d04:	e236      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005d06:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d000      	beq.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
 8005d12:	e22f      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d000      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8005d1a:	e22b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          frequency = LSE_VALUE;
 8005d1c:	2380      	movs	r3, #128	; 0x80
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	617b      	str	r3, [r7, #20]
        break;
 8005d22:	e227      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005d24:	4b52      	ldr	r3, [pc, #328]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	220c      	movs	r2, #12
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d34:	f7ff fd28 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	617b      	str	r3, [r7, #20]
        break;
 8005d3c:	e21c      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d104      	bne.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005d44:	f7ff fc94 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005d48:	0003      	movs	r3, r0
 8005d4a:	617b      	str	r3, [r7, #20]
        break;
 8005d4c:	e214      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d4e:	4b48      	ldr	r3, [pc, #288]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	2380      	movs	r3, #128	; 0x80
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	401a      	ands	r2, r3
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d105      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d102      	bne.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
          frequency = HSI_VALUE;
 8005d66:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005d68:	617b      	str	r3, [r7, #20]
        break;
 8005d6a:	e205      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005d6c:	4b40      	ldr	r3, [pc, #256]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	2202      	movs	r2, #2
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d000      	beq.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8005d78:	e1fe      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2b0c      	cmp	r3, #12
 8005d7e:	d000      	beq.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8005d80:	e1fa      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
          frequency = LSE_VALUE;
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	617b      	str	r3, [r7, #20]
        break;
 8005d88:	e1f6      	b.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005d8a:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8e:	2240      	movs	r2, #64	; 0x40
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_CECCLKSOURCE_HSI_DIV488))
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	401a      	ands	r2, r3
 8005d9e:	2380      	movs	r3, #128	; 0x80
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d105      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <HAL_RCCEx_GetPeriphCLKFreq+0x28e>
          frequency = (HSI_VALUE / 488U);
 8005dac:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8005dae:	617b      	str	r3, [r7, #20]
        break;
 8005db0:	e1e4      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8005db2:	4b2f      	ldr	r3, [pc, #188]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db6:	2202      	movs	r2, #2
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d000      	beq.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8005dbe:	e1dd      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d000      	beq.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
 8005dc6:	e1d9      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
          frequency = LSE_VALUE;
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	617b      	str	r3, [r7, #20]
        break;
 8005dce:	e1d5      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005dd0:	4b27      	ldr	r3, [pc, #156]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd4:	23c0      	movs	r3, #192	; 0xc0
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	4013      	ands	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005de2:	f7ff fcd1 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8005de6:	0003      	movs	r3, r0
 8005de8:	617b      	str	r3, [r7, #20]
        break;
 8005dea:	e1c9      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	2380      	movs	r3, #128	; 0x80
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d104      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8005df6:	f7ff fc3b 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	617b      	str	r3, [r7, #20]
        break;
 8005dfe:	e1bf      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	00db      	lsls	r3, r3, #3
 8005e08:	401a      	ands	r2, r3
 8005e0a:	2380      	movs	r3, #128	; 0x80
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d107      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d102      	bne.n	8005e22 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
          frequency = HSI_VALUE;
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e1e:	617b      	str	r3, [r7, #20]
        break;
 8005e20:	e1ae      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e26:	2202      	movs	r2, #2
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d000      	beq.n	8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005e2e:	e1a7      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	23c0      	movs	r3, #192	; 0xc0
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d000      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005e3a:	e1a1      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
          frequency = LSE_VALUE;
 8005e3c:	2380      	movs	r3, #128	; 0x80
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	617b      	str	r3, [r7, #20]
        break;
 8005e42:	e19d      	b.n	8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005e44:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	0f9b      	lsrs	r3, r3, #30
 8005e4a:	079b      	lsls	r3, r3, #30
 8005e4c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d104      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005e54:	f7ff fc0c 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005e58:	0003      	movs	r3, r0
 8005e5a:	617b      	str	r3, [r7, #20]
        break;
 8005e5c:	e192      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if (srcclk == RCC_ADCCLKSOURCE_HSI)
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	061b      	lsls	r3, r3, #24
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d10d      	bne.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
          frequency = HSI_VALUE;
 8005e68:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x354>)
 8005e6a:	617b      	str	r3, [r7, #20]
        break;
 8005e6c:	e18a      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0003d090 	.word	0x0003d090
 8005e78:	00f42400 	.word	0x00f42400
 8005e7c:	007a1200 	.word	0x007a1200
 8005e80:	00008012 	.word	0x00008012
        else if (srcclk == RCC_ADCCLKSOURCE_PLLADC)
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	2380      	movs	r3, #128	; 0x80
 8005e88:	05db      	lsls	r3, r3, #23
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d000      	beq.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
 8005e8e:	e179      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005e90:	4bc5      	ldr	r3, [pc, #788]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	025b      	lsls	r3, r3, #9
 8005e98:	4013      	ands	r3, r2
 8005e9a:	d100      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005e9c:	e172      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005e9e:	4bc2      	ldr	r3, [pc, #776]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	0a1b      	lsrs	r3, r3, #8
 8005ea4:	227f      	movs	r2, #127	; 0x7f
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	435a      	muls	r2, r3
 8005eb0:	4bbd      	ldr	r3, [pc, #756]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	0c5b      	lsrs	r3, r3, #17
 8005eb6:	211f      	movs	r1, #31
 8005eb8:	400b      	ands	r3, r1
 8005eba:	3301      	adds	r3, #1
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	0010      	movs	r0, r2
 8005ec0:	f7fa f920 	bl	8000104 <__udivsi3>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	617b      	str	r3, [r7, #20]
        break;
 8005ec8:	e15c      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005eca:	4bb7      	ldr	r3, [pc, #732]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005ecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ece:	23c0      	movs	r3, #192	; 0xc0
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005edc:	f7ff fc54 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8005ee0:	0003      	movs	r3, r0
 8005ee2:	617b      	str	r3, [r7, #20]
        break;
 8005ee4:	e150      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	015b      	lsls	r3, r3, #5
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d104      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ef0:	f7ff fbbe 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005ef4:	0003      	movs	r3, r0
 8005ef6:	617b      	str	r3, [r7, #20]
        break;
 8005ef8:	e146      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005efa:	4bab      	ldr	r3, [pc, #684]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	401a      	ands	r2, r3
 8005f04:	2380      	movs	r3, #128	; 0x80
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d000      	beq.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 8005f0c:	e13c      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	2380      	movs	r3, #128	; 0x80
 8005f12:	019b      	lsls	r3, r3, #6
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d000      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8005f18:	e136      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HSI_VALUE;
 8005f1a:	4ba4      	ldr	r3, [pc, #656]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8005f1c:	617b      	str	r3, [r7, #20]
        break;
 8005f1e:	e133      	b.n	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        srcclk = __HAL_RCC_GET_I2S1_SOURCE();
 8005f20:	4ba1      	ldr	r3, [pc, #644]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f24:	23c0      	movs	r3, #192	; 0xc0
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_I2S1CLKSOURCE_PLL)
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d11c      	bne.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLPCLK) != 0U)
 8005f36:	4b9c      	ldr	r3, [pc, #624]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	2380      	movs	r3, #128	; 0x80
 8005f3c:	025b      	lsls	r3, r3, #9
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d100      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8005f42:	e123      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005f44:	4b98      	ldr	r3, [pc, #608]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	0a1b      	lsrs	r3, r3, #8
 8005f4a:	227f      	movs	r2, #127	; 0x7f
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	435a      	muls	r2, r3
 8005f56:	4b94      	ldr	r3, [pc, #592]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	0c5b      	lsrs	r3, r3, #17
 8005f5c:	211f      	movs	r1, #31
 8005f5e:	400b      	ands	r3, r1
 8005f60:	3301      	adds	r3, #1
 8005f62:	0019      	movs	r1, r3
 8005f64:	0010      	movs	r0, r2
 8005f66:	f7fa f8cd 	bl	8000104 <__udivsi3>
 8005f6a:	0003      	movs	r3, r0
 8005f6c:	617b      	str	r3, [r7, #20]
        break;
 8005f6e:	e10d      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_SYSCLK)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d104      	bne.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005f76:	f7ff fb7b 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	617b      	str	r3, [r7, #20]
        break;
 8005f7e:	e105      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2S1CLKSOURCE_HSI))
 8005f80:	4b89      	ldr	r3, [pc, #548]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	2380      	movs	r3, #128	; 0x80
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	401a      	ands	r2, r3
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d107      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d102      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          frequency = HSI_VALUE;
 8005f9c:	4b83      	ldr	r3, [pc, #524]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 8005f9e:	617b      	str	r3, [r7, #20]
        break;
 8005fa0:	e0f4      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        else if (srcclk == RCC_I2S1CLKSOURCE_EXT)
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	23c0      	movs	r3, #192	; 0xc0
 8005fa6:	021b      	lsls	r3, r3, #8
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d000      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005fac:	e0ee      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = EXTERNAL_I2S1_CLOCK_VALUE;
 8005fae:	4b80      	ldr	r3, [pc, #512]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8005fb0:	617b      	str	r3, [r7, #20]
        break;
 8005fb2:	e0eb      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005fb4:	4b7c      	ldr	r3, [pc, #496]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb8:	23c0      	movs	r3, #192	; 0xc0
 8005fba:	031b      	lsls	r3, r3, #12
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fc6:	f7ff fbdf 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8005fca:	0003      	movs	r3, r0
 8005fcc:	617b      	str	r3, [r7, #20]
        break;
 8005fce:	e0df      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005fd0:	4b75      	ldr	r3, [pc, #468]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d108      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	2380      	movs	r3, #128	; 0x80
 8005fe0:	02db      	lsls	r3, r3, #11
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d103      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          frequency = LSI_VALUE;
 8005fe6:	23fa      	movs	r3, #250	; 0xfa
 8005fe8:	01db      	lsls	r3, r3, #7
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e021      	b.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005fee:	4b6e      	ldr	r3, [pc, #440]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d107      	bne.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	429a      	cmp	r2, r3
 8006008:	d102      	bne.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          frequency = HSI_VALUE;
 800600a:	4b68      	ldr	r3, [pc, #416]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e010      	b.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006010:	4b65      	ldr	r3, [pc, #404]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006014:	2202      	movs	r2, #2
 8006016:	4013      	ands	r3, r2
 8006018:	2b02      	cmp	r3, #2
 800601a:	d000      	beq.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800601c:	e0b8      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	23c0      	movs	r3, #192	; 0xc0
 8006022:	031b      	lsls	r3, r3, #12
 8006024:	429a      	cmp	r2, r3
 8006026:	d000      	beq.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006028:	e0b2      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          frequency = LSE_VALUE;
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
        break;
 8006030:	e0ae      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8006032:	e0ad      	b.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006034:	4b5c      	ldr	r3, [pc, #368]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006036:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006038:	23c0      	movs	r3, #192	; 0xc0
 800603a:	039b      	lsls	r3, r3, #14
 800603c:	4013      	ands	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006046:	f7ff fb9f 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 800604a:	0003      	movs	r3, r0
 800604c:	617b      	str	r3, [r7, #20]
        break;
 800604e:	e0a1      	b.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006050:	4b55      	ldr	r3, [pc, #340]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006054:	2202      	movs	r2, #2
 8006056:	4013      	ands	r3, r2
 8006058:	2b02      	cmp	r3, #2
 800605a:	d108      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	035b      	lsls	r3, r3, #13
 8006062:	429a      	cmp	r2, r3
 8006064:	d103      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = LSI_VALUE;
 8006066:	23fa      	movs	r3, #250	; 0xfa
 8006068:	01db      	lsls	r3, r3, #7
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e021      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800606e:	4b4e      	ldr	r3, [pc, #312]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	2380      	movs	r3, #128	; 0x80
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	401a      	ands	r2, r3
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	429a      	cmp	r2, r3
 800607e:	d107      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	2380      	movs	r3, #128	; 0x80
 8006084:	039b      	lsls	r3, r3, #14
 8006086:	429a      	cmp	r2, r3
 8006088:	d102      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
          frequency = HSI_VALUE;
 800608a:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e010      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006090:	4b45      	ldr	r3, [pc, #276]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006094:	2202      	movs	r2, #2
 8006096:	4013      	ands	r3, r2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d000      	beq.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800609c:	e07a      	b.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	23c0      	movs	r3, #192	; 0xc0
 80060a2:	039b      	lsls	r3, r3, #14
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d000      	beq.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x586>
 80060a8:	e074      	b.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          frequency = LSE_VALUE;
 80060aa:	2380      	movs	r3, #128	; 0x80
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	617b      	str	r3, [r7, #20]
        break;
 80060b0:	e070      	b.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 80060b2:	e06f      	b.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM1SEL);
 80060b4:	4b3c      	ldr	r3, [pc, #240]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	03db      	lsls	r3, r3, #15
 80060bc:	4013      	ands	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM1CLKSOURCE_PLL) /* PLL ? */
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	03db      	lsls	r3, r3, #15
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d11b      	bne.n	8006102 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 80060ca:	4b37      	ldr	r3, [pc, #220]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	2380      	movs	r3, #128	; 0x80
 80060d0:	045b      	lsls	r3, r3, #17
 80060d2:	4013      	ands	r3, r2
 80060d4:	d060      	beq.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060d6:	4b34      	ldr	r3, [pc, #208]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	227f      	movs	r2, #127	; 0x7f
 80060de:	4013      	ands	r3, r2
 80060e0:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	435a      	muls	r2, r3
 80060e8:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	0e5b      	lsrs	r3, r3, #25
 80060ee:	2107      	movs	r1, #7
 80060f0:	400b      	ands	r3, r1
 80060f2:	3301      	adds	r3, #1
 80060f4:	0019      	movs	r1, r3
 80060f6:	0010      	movs	r0, r2
 80060f8:	f7fa f804 	bl	8000104 <__udivsi3>
 80060fc:	0003      	movs	r3, r0
 80060fe:	617b      	str	r3, [r7, #20]
        break;
 8006100:	e04a      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if (srcclk == RCC_TIM1CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d147      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006108:	f7ff fb3e 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 800610c:	0003      	movs	r3, r0
 800610e:	617b      	str	r3, [r7, #20]
        break;
 8006110:	e042      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_TIM15SEL);
 8006112:	4b25      	ldr	r3, [pc, #148]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006116:	2380      	movs	r3, #128	; 0x80
 8006118:	045b      	lsls	r3, r3, #17
 800611a:	4013      	ands	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_TIM15CLKSOURCE_PLL) /* PLL ? */
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	045b      	lsls	r3, r3, #17
 8006124:	429a      	cmp	r2, r3
 8006126:	d11b      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
          if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLLQCLK) != 0U)
 8006128:	4b1f      	ldr	r3, [pc, #124]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	045b      	lsls	r3, r3, #17
 8006130:	4013      	ands	r3, r2
 8006132:	d033      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	227f      	movs	r2, #127	; 0x7f
 800613c:	4013      	ands	r3, r2
 800613e:	60bb      	str	r3, [r7, #8]
            frequency = (pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	435a      	muls	r2, r3
 8006146:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	0e5b      	lsrs	r3, r3, #25
 800614c:	2107      	movs	r1, #7
 800614e:	400b      	ands	r3, r1
 8006150:	3301      	adds	r3, #1
 8006152:	0019      	movs	r1, r3
 8006154:	0010      	movs	r0, r2
 8006156:	f7f9 ffd5 	bl	8000104 <__udivsi3>
 800615a:	0003      	movs	r3, r0
 800615c:	617b      	str	r3, [r7, #20]
        break;
 800615e:	e01d      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        else if (srcclk == RCC_TIM15CLKSOURCE_PCLK1) /* PCLK1 ? */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d11a      	bne.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006166:	f7ff fb0f 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 800616a:	0003      	movs	r3, r0
 800616c:	617b      	str	r3, [r7, #20]
        break;
 800616e:	e015      	b.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        break;
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	e014      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006174:	46c0      	nop			; (mov r8, r8)
 8006176:	e012      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006178:	46c0      	nop			; (mov r8, r8)
 800617a:	e010      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800617c:	46c0      	nop			; (mov r8, r8)
 800617e:	e00e      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006180:	46c0      	nop			; (mov r8, r8)
 8006182:	e00c      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	e00a      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	e008      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800618c:	46c0      	nop			; (mov r8, r8)
 800618e:	e006      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006190:	46c0      	nop			; (mov r8, r8)
 8006192:	e004      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006194:	46c0      	nop			; (mov r8, r8)
 8006196:	e002      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 8006198:	46c0      	nop			; (mov r8, r8)
 800619a:	e000      	b.n	800619e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
        break;
 800619c:	46c0      	nop			; (mov r8, r8)
    }
  }

  return (frequency);
 800619e:	697b      	ldr	r3, [r7, #20]
}
 80061a0:	0018      	movs	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b006      	add	sp, #24
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40021000 	.word	0x40021000
 80061ac:	00f42400 	.word	0x00f42400
 80061b0:	0000bb80 	.word	0x0000bb80

080061b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0a8      	b.n	8006318 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	2382      	movs	r3, #130	; 0x82
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d009      	beq.n	80061ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	61da      	str	r2, [r3, #28]
 80061e0:	e005      	b.n	80061ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	225d      	movs	r2, #93	; 0x5d
 80061f8:	5c9b      	ldrb	r3, [r3, r2]
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d107      	bne.n	8006210 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	225c      	movs	r2, #92	; 0x5c
 8006204:	2100      	movs	r1, #0
 8006206:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	0018      	movs	r0, r3
 800620c:	f7fc fad8 	bl	80027c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	225d      	movs	r2, #93	; 0x5d
 8006214:	2102      	movs	r1, #2
 8006216:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2140      	movs	r1, #64	; 0x40
 8006224:	438a      	bics	r2, r1
 8006226:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	23e0      	movs	r3, #224	; 0xe0
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	429a      	cmp	r2, r3
 8006232:	d902      	bls.n	800623a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e002      	b.n	8006240 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800623a:	2380      	movs	r3, #128	; 0x80
 800623c:	015b      	lsls	r3, r3, #5
 800623e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	23f0      	movs	r3, #240	; 0xf0
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	429a      	cmp	r2, r3
 800624a:	d008      	beq.n	800625e <HAL_SPI_Init+0xaa>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	23e0      	movs	r3, #224	; 0xe0
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	429a      	cmp	r2, r3
 8006256:	d002      	beq.n	800625e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	2382      	movs	r3, #130	; 0x82
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	401a      	ands	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6899      	ldr	r1, [r3, #8]
 800626c:	2384      	movs	r3, #132	; 0x84
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	400b      	ands	r3, r1
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2102      	movs	r1, #2
 800627a:	400b      	ands	r3, r1
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	2101      	movs	r1, #1
 8006284:	400b      	ands	r3, r1
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6999      	ldr	r1, [r3, #24]
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	400b      	ands	r3, r1
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	2138      	movs	r1, #56	; 0x38
 800629a:	400b      	ands	r3, r1
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	400b      	ands	r3, r1
 80062a6:	431a      	orrs	r2, r3
 80062a8:	0011      	movs	r1, r2
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ae:	2380      	movs	r3, #128	; 0x80
 80062b0:	019b      	lsls	r3, r3, #6
 80062b2:	401a      	ands	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	2204      	movs	r2, #4
 80062c4:	401a      	ands	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2110      	movs	r1, #16
 80062cc:	400b      	ands	r3, r1
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d4:	2108      	movs	r1, #8
 80062d6:	400b      	ands	r3, r1
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	23f0      	movs	r3, #240	; 0xf0
 80062e0:	011b      	lsls	r3, r3, #4
 80062e2:	400b      	ands	r3, r1
 80062e4:	431a      	orrs	r2, r3
 80062e6:	0011      	movs	r1, r2
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	2380      	movs	r3, #128	; 0x80
 80062ec:	015b      	lsls	r3, r3, #5
 80062ee:	401a      	ands	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	69da      	ldr	r2, [r3, #28]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4907      	ldr	r1, [pc, #28]	; (8006320 <HAL_SPI_Init+0x16c>)
 8006304:	400a      	ands	r2, r1
 8006306:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	225d      	movs	r2, #93	; 0x5d
 8006312:	2101      	movs	r1, #1
 8006314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}
 8006320:	fffff7ff 	.word	0xfffff7ff

08006324 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	1dbb      	adds	r3, r7, #6
 8006332:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006334:	231f      	movs	r3, #31
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	2200      	movs	r2, #0
 800633a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	225c      	movs	r2, #92	; 0x5c
 8006340:	5c9b      	ldrb	r3, [r3, r2]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_SPI_Transmit+0x26>
 8006346:	2302      	movs	r3, #2
 8006348:	e140      	b.n	80065cc <HAL_SPI_Transmit+0x2a8>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	225c      	movs	r2, #92	; 0x5c
 800634e:	2101      	movs	r1, #1
 8006350:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006352:	f7fc fd2b 	bl	8002dac <HAL_GetTick>
 8006356:	0003      	movs	r3, r0
 8006358:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800635a:	2316      	movs	r3, #22
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	1dba      	adds	r2, r7, #6
 8006360:	8812      	ldrh	r2, [r2, #0]
 8006362:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	225d      	movs	r2, #93	; 0x5d
 8006368:	5c9b      	ldrb	r3, [r3, r2]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d004      	beq.n	800637a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006370:	231f      	movs	r3, #31
 8006372:	18fb      	adds	r3, r7, r3
 8006374:	2202      	movs	r2, #2
 8006376:	701a      	strb	r2, [r3, #0]
    goto error;
 8006378:	e11d      	b.n	80065b6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <HAL_SPI_Transmit+0x64>
 8006380:	1dbb      	adds	r3, r7, #6
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006388:	231f      	movs	r3, #31
 800638a:	18fb      	adds	r3, r7, r3
 800638c:	2201      	movs	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006390:	e111      	b.n	80065b6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	225d      	movs	r2, #93	; 0x5d
 8006396:	2103      	movs	r1, #3
 8006398:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	1dba      	adds	r2, r7, #6
 80063aa:	8812      	ldrh	r2, [r2, #0]
 80063ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1dba      	adds	r2, r7, #6
 80063b2:	8812      	ldrh	r2, [r2, #0]
 80063b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2244      	movs	r2, #68	; 0x44
 80063c0:	2100      	movs	r1, #0
 80063c2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2246      	movs	r2, #70	; 0x46
 80063c8:	2100      	movs	r1, #0
 80063ca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d110      	bne.n	8006406 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2140      	movs	r1, #64	; 0x40
 80063f0:	438a      	bics	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2180      	movs	r1, #128	; 0x80
 8006400:	01c9      	lsls	r1, r1, #7
 8006402:	430a      	orrs	r2, r1
 8006404:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2240      	movs	r2, #64	; 0x40
 800640e:	4013      	ands	r3, r2
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d007      	beq.n	8006424 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2140      	movs	r1, #64	; 0x40
 8006420:	430a      	orrs	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68da      	ldr	r2, [r3, #12]
 8006428:	23e0      	movs	r3, #224	; 0xe0
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	429a      	cmp	r2, r3
 800642e:	d94e      	bls.n	80064ce <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <HAL_SPI_Transmit+0x11e>
 8006438:	2316      	movs	r3, #22
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d13f      	bne.n	80064c2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	881a      	ldrh	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006466:	e02c      	b.n	80064c2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2202      	movs	r2, #2
 8006470:	4013      	ands	r3, r2
 8006472:	2b02      	cmp	r3, #2
 8006474:	d112      	bne.n	800649c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	881a      	ldrh	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	1c9a      	adds	r2, r3, #2
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800649a:	e012      	b.n	80064c2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649c:	f7fc fc86 	bl	8002dac <HAL_GetTick>
 80064a0:	0002      	movs	r2, r0
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d802      	bhi.n	80064b2 <HAL_SPI_Transmit+0x18e>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	3301      	adds	r3, #1
 80064b0:	d102      	bne.n	80064b8 <HAL_SPI_Transmit+0x194>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80064b8:	231f      	movs	r3, #31
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	2203      	movs	r2, #3
 80064be:	701a      	strb	r2, [r3, #0]
          goto error;
 80064c0:	e079      	b.n	80065b6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1cd      	bne.n	8006468 <HAL_SPI_Transmit+0x144>
 80064cc:	e04f      	b.n	800656e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <HAL_SPI_Transmit+0x1bc>
 80064d6:	2316      	movs	r3, #22
 80064d8:	18fb      	adds	r3, r7, r3
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d141      	bne.n	8006564 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	330c      	adds	r3, #12
 80064ea:	7812      	ldrb	r2, [r2, #0]
 80064ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006506:	e02d      	b.n	8006564 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	2202      	movs	r2, #2
 8006510:	4013      	ands	r3, r2
 8006512:	2b02      	cmp	r3, #2
 8006514:	d113      	bne.n	800653e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	330c      	adds	r3, #12
 8006520:	7812      	ldrb	r2, [r2, #0]
 8006522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800653c:	e012      	b.n	8006564 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800653e:	f7fc fc35 	bl	8002dac <HAL_GetTick>
 8006542:	0002      	movs	r2, r0
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d802      	bhi.n	8006554 <HAL_SPI_Transmit+0x230>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3301      	adds	r3, #1
 8006552:	d102      	bne.n	800655a <HAL_SPI_Transmit+0x236>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d104      	bne.n	8006564 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800655a:	231f      	movs	r3, #31
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	2203      	movs	r2, #3
 8006560:	701a      	strb	r2, [r3, #0]
          goto error;
 8006562:	e028      	b.n	80065b6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1cc      	bne.n	8006508 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	0018      	movs	r0, r3
 8006576:	f000 fde9 	bl	800714c <SPI_EndRxTxTransaction>
 800657a:	1e03      	subs	r3, r0, #0
 800657c:	d002      	beq.n	8006584 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	613b      	str	r3, [r7, #16]
 80065a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80065aa:	231f      	movs	r3, #31
 80065ac:	18fb      	adds	r3, r7, r3
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e000      	b.n	80065b6 <HAL_SPI_Transmit+0x292>
  }

error:
 80065b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	225d      	movs	r2, #93	; 0x5d
 80065ba:	2101      	movs	r1, #1
 80065bc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	225c      	movs	r2, #92	; 0x5c
 80065c2:	2100      	movs	r1, #0
 80065c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065c6:	231f      	movs	r3, #31
 80065c8:	18fb      	adds	r3, r7, r3
 80065ca:	781b      	ldrb	r3, [r3, #0]
}
 80065cc:	0018      	movs	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b008      	add	sp, #32
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b089      	sub	sp, #36	; 0x24
 80065d8:	af02      	add	r7, sp, #8
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	1dbb      	adds	r3, r7, #6
 80065e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065e4:	2317      	movs	r3, #23
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	2200      	movs	r2, #0
 80065ea:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	2382      	movs	r3, #130	; 0x82
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d113      	bne.n	8006620 <HAL_SPI_Receive+0x4c>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10f      	bne.n	8006620 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	225d      	movs	r2, #93	; 0x5d
 8006604:	2104      	movs	r1, #4
 8006606:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006608:	1dbb      	adds	r3, r7, #6
 800660a:	881c      	ldrh	r4, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	0023      	movs	r3, r4
 8006618:	f000 f928 	bl	800686c <HAL_SPI_TransmitReceive>
 800661c:	0003      	movs	r3, r0
 800661e:	e11c      	b.n	800685a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	225c      	movs	r2, #92	; 0x5c
 8006624:	5c9b      	ldrb	r3, [r3, r2]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_SPI_Receive+0x5a>
 800662a:	2302      	movs	r3, #2
 800662c:	e115      	b.n	800685a <HAL_SPI_Receive+0x286>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	225c      	movs	r2, #92	; 0x5c
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006636:	f7fc fbb9 	bl	8002dac <HAL_GetTick>
 800663a:	0003      	movs	r3, r0
 800663c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	225d      	movs	r2, #93	; 0x5d
 8006642:	5c9b      	ldrb	r3, [r3, r2]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	d004      	beq.n	8006654 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800664a:	2317      	movs	r3, #23
 800664c:	18fb      	adds	r3, r7, r3
 800664e:	2202      	movs	r2, #2
 8006650:	701a      	strb	r2, [r3, #0]
    goto error;
 8006652:	e0f7      	b.n	8006844 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_SPI_Receive+0x8e>
 800665a:	1dbb      	adds	r3, r7, #6
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8006662:	2317      	movs	r3, #23
 8006664:	18fb      	adds	r3, r7, r3
 8006666:	2201      	movs	r2, #1
 8006668:	701a      	strb	r2, [r3, #0]
    goto error;
 800666a:	e0eb      	b.n	8006844 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	225d      	movs	r2, #93	; 0x5d
 8006670:	2104      	movs	r1, #4
 8006672:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1dba      	adds	r2, r7, #6
 8006684:	2144      	movs	r1, #68	; 0x44
 8006686:	8812      	ldrh	r2, [r2, #0]
 8006688:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1dba      	adds	r2, r7, #6
 800668e:	2146      	movs	r1, #70	; 0x46
 8006690:	8812      	ldrh	r2, [r2, #0]
 8006692:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	23e0      	movs	r3, #224	; 0xe0
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d908      	bls.n	80066d0 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4966      	ldr	r1, [pc, #408]	; (8006864 <HAL_SPI_Receive+0x290>)
 80066ca:	400a      	ands	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	e008      	b.n	80066e2 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	0149      	lsls	r1, r1, #5
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d10f      	bne.n	800670e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2140      	movs	r1, #64	; 0x40
 80066fa:	438a      	bics	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4957      	ldr	r1, [pc, #348]	; (8006868 <HAL_SPI_Receive+0x294>)
 800670a:	400a      	ands	r2, r1
 800670c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2240      	movs	r2, #64	; 0x40
 8006716:	4013      	ands	r3, r2
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d007      	beq.n	800672c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2140      	movs	r1, #64	; 0x40
 8006728:	430a      	orrs	r2, r1
 800672a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	23e0      	movs	r3, #224	; 0xe0
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	429a      	cmp	r2, r3
 8006736:	d900      	bls.n	800673a <HAL_SPI_Receive+0x166>
 8006738:	e069      	b.n	800680e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800673a:	e031      	b.n	80067a0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2201      	movs	r2, #1
 8006744:	4013      	ands	r3, r2
 8006746:	2b01      	cmp	r3, #1
 8006748:	d117      	bne.n	800677a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	001a      	movs	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	7812      	ldrb	r2, [r2, #0]
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2246      	movs	r2, #70	; 0x46
 800676a:	5a9b      	ldrh	r3, [r3, r2]
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b299      	uxth	r1, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2246      	movs	r2, #70	; 0x46
 8006776:	5299      	strh	r1, [r3, r2]
 8006778:	e012      	b.n	80067a0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800677a:	f7fc fb17 	bl	8002dac <HAL_GetTick>
 800677e:	0002      	movs	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	429a      	cmp	r2, r3
 8006788:	d802      	bhi.n	8006790 <HAL_SPI_Receive+0x1bc>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	3301      	adds	r3, #1
 800678e:	d102      	bne.n	8006796 <HAL_SPI_Receive+0x1c2>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d104      	bne.n	80067a0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8006796:	2317      	movs	r3, #23
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2203      	movs	r2, #3
 800679c:	701a      	strb	r2, [r3, #0]
          goto error;
 800679e:	e051      	b.n	8006844 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2246      	movs	r2, #70	; 0x46
 80067a4:	5a9b      	ldrh	r3, [r3, r2]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1c7      	bne.n	800673c <HAL_SPI_Receive+0x168>
 80067ac:	e035      	b.n	800681a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	2201      	movs	r2, #1
 80067b6:	4013      	ands	r3, r2
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d115      	bne.n	80067e8 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	b292      	uxth	r2, r2
 80067c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	1c9a      	adds	r2, r3, #2
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2246      	movs	r2, #70	; 0x46
 80067d8:	5a9b      	ldrh	r3, [r3, r2]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	3b01      	subs	r3, #1
 80067de:	b299      	uxth	r1, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2246      	movs	r2, #70	; 0x46
 80067e4:	5299      	strh	r1, [r3, r2]
 80067e6:	e012      	b.n	800680e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e8:	f7fc fae0 	bl	8002dac <HAL_GetTick>
 80067ec:	0002      	movs	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d802      	bhi.n	80067fe <HAL_SPI_Receive+0x22a>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_SPI_Receive+0x230>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d104      	bne.n	800680e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8006804:	2317      	movs	r3, #23
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	2203      	movs	r2, #3
 800680a:	701a      	strb	r2, [r3, #0]
          goto error;
 800680c:	e01a      	b.n	8006844 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2246      	movs	r2, #70	; 0x46
 8006812:	5a9b      	ldrh	r3, [r3, r2]
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1c9      	bne.n	80067ae <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 fc35 	bl	8007090 <SPI_EndRxTransaction>
 8006826:	1e03      	subs	r3, r0, #0
 8006828:	d002      	beq.n	8006830 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8006838:	2317      	movs	r3, #23
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	e000      	b.n	8006844 <HAL_SPI_Receive+0x270>
  }

error :
 8006842:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	225d      	movs	r2, #93	; 0x5d
 8006848:	2101      	movs	r1, #1
 800684a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	225c      	movs	r2, #92	; 0x5c
 8006850:	2100      	movs	r1, #0
 8006852:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006854:	2317      	movs	r3, #23
 8006856:	18fb      	adds	r3, r7, r3
 8006858:	781b      	ldrb	r3, [r3, #0]
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b007      	add	sp, #28
 8006860:	bd90      	pop	{r4, r7, pc}
 8006862:	46c0      	nop			; (mov r8, r8)
 8006864:	ffffefff 	.word	0xffffefff
 8006868:	ffffbfff 	.word	0xffffbfff

0800686c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	001a      	movs	r2, r3
 800687a:	1cbb      	adds	r3, r7, #2
 800687c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800687e:	2301      	movs	r3, #1
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006882:	2323      	movs	r3, #35	; 0x23
 8006884:	18fb      	adds	r3, r7, r3
 8006886:	2200      	movs	r2, #0
 8006888:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	225c      	movs	r2, #92	; 0x5c
 800688e:	5c9b      	ldrb	r3, [r3, r2]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_SPI_TransmitReceive+0x2c>
 8006894:	2302      	movs	r3, #2
 8006896:	e1b5      	b.n	8006c04 <HAL_SPI_TransmitReceive+0x398>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	225c      	movs	r2, #92	; 0x5c
 800689c:	2101      	movs	r1, #1
 800689e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068a0:	f7fc fa84 	bl	8002dac <HAL_GetTick>
 80068a4:	0003      	movs	r3, r0
 80068a6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80068a8:	201b      	movs	r0, #27
 80068aa:	183b      	adds	r3, r7, r0
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	215d      	movs	r1, #93	; 0x5d
 80068b0:	5c52      	ldrb	r2, [r2, r1]
 80068b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80068ba:	2312      	movs	r3, #18
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	1cba      	adds	r2, r7, #2
 80068c0:	8812      	ldrh	r2, [r2, #0]
 80068c2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80068c4:	183b      	adds	r3, r7, r0
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d011      	beq.n	80068f0 <HAL_SPI_TransmitReceive+0x84>
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	2382      	movs	r3, #130	; 0x82
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d107      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <HAL_SPI_TransmitReceive+0x7a>
 80068de:	183b      	adds	r3, r7, r0
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d004      	beq.n	80068f0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80068e6:	2323      	movs	r3, #35	; 0x23
 80068e8:	18fb      	adds	r3, r7, r3
 80068ea:	2202      	movs	r2, #2
 80068ec:	701a      	strb	r2, [r3, #0]
    goto error;
 80068ee:	e17e      	b.n	8006bee <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d006      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x98>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x98>
 80068fc:	1cbb      	adds	r3, r7, #2
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d104      	bne.n	800690e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006904:	2323      	movs	r3, #35	; 0x23
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
    goto error;
 800690c:	e16f      	b.n	8006bee <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	225d      	movs	r2, #93	; 0x5d
 8006912:	5c9b      	ldrb	r3, [r3, r2]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b04      	cmp	r3, #4
 8006918:	d003      	beq.n	8006922 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	225d      	movs	r2, #93	; 0x5d
 800691e:	2105      	movs	r1, #5
 8006920:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1cba      	adds	r2, r7, #2
 8006932:	2146      	movs	r1, #70	; 0x46
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1cba      	adds	r2, r7, #2
 800693c:	2144      	movs	r1, #68	; 0x44
 800693e:	8812      	ldrh	r2, [r2, #0]
 8006940:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1cba      	adds	r2, r7, #2
 800694c:	8812      	ldrh	r2, [r2, #0]
 800694e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	1cba      	adds	r2, r7, #2
 8006954:	8812      	ldrh	r2, [r2, #0]
 8006956:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	23e0      	movs	r3, #224	; 0xe0
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	429a      	cmp	r2, r3
 800696e:	d908      	bls.n	8006982 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	49a4      	ldr	r1, [pc, #656]	; (8006c0c <HAL_SPI_TransmitReceive+0x3a0>)
 800697c:	400a      	ands	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
 8006980:	e008      	b.n	8006994 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	0149      	lsls	r1, r1, #5
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2240      	movs	r2, #64	; 0x40
 800699c:	4013      	ands	r3, r2
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d007      	beq.n	80069b2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2140      	movs	r1, #64	; 0x40
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	23e0      	movs	r3, #224	; 0xe0
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d800      	bhi.n	80069c0 <HAL_SPI_TransmitReceive+0x154>
 80069be:	e07f      	b.n	8006ac0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d005      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x168>
 80069c8:	2312      	movs	r3, #18
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d000      	beq.n	80069d4 <HAL_SPI_TransmitReceive+0x168>
 80069d2:	e069      	b.n	8006aa8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	881a      	ldrh	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f8:	e056      	b.n	8006aa8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2202      	movs	r2, #2
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d11b      	bne.n	8006a40 <HAL_SPI_TransmitReceive+0x1d4>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d016      	beq.n	8006a40 <HAL_SPI_TransmitReceive+0x1d4>
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d113      	bne.n	8006a40 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	881a      	ldrh	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	1c9a      	adds	r2, r3, #2
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	2201      	movs	r2, #1
 8006a48:	4013      	ands	r3, r2
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d11c      	bne.n	8006a88 <HAL_SPI_TransmitReceive+0x21c>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2246      	movs	r2, #70	; 0x46
 8006a52:	5a9b      	ldrh	r3, [r3, r2]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	b292      	uxth	r2, r2
 8006a66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	1c9a      	adds	r2, r3, #2
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2246      	movs	r2, #70	; 0x46
 8006a76:	5a9b      	ldrh	r3, [r3, r2]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b299      	uxth	r1, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2246      	movs	r2, #70	; 0x46
 8006a82:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a84:	2301      	movs	r3, #1
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a88:	f7fc f990 	bl	8002dac <HAL_GetTick>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d807      	bhi.n	8006aa8 <HAL_SPI_TransmitReceive+0x23c>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	d004      	beq.n	8006aa8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006a9e:	2323      	movs	r3, #35	; 0x23
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	2203      	movs	r2, #3
 8006aa4:	701a      	strb	r2, [r3, #0]
        goto error;
 8006aa6:	e0a2      	b.n	8006bee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1a3      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x18e>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2246      	movs	r2, #70	; 0x46
 8006ab6:	5a9b      	ldrh	r3, [r3, r2]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d19d      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x18e>
 8006abe:	e085      	b.n	8006bcc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_SPI_TransmitReceive+0x268>
 8006ac8:	2312      	movs	r3, #18
 8006aca:	18fb      	adds	r3, r7, r3
 8006acc:	881b      	ldrh	r3, [r3, #0]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d000      	beq.n	8006ad4 <HAL_SPI_TransmitReceive+0x268>
 8006ad2:	e070      	b.n	8006bb6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006afa:	e05c      	b.n	8006bb6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	2202      	movs	r2, #2
 8006b04:	4013      	ands	r3, r2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d11c      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x2d8>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <HAL_SPI_TransmitReceive+0x2d8>
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d114      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d11e      	bne.n	8006b90 <HAL_SPI_TransmitReceive+0x324>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2246      	movs	r2, #70	; 0x46
 8006b56:	5a9b      	ldrh	r3, [r3, r2]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d018      	beq.n	8006b90 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	001a      	movs	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	7812      	ldrb	r2, [r2, #0]
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2246      	movs	r2, #70	; 0x46
 8006b7e:	5a9b      	ldrh	r3, [r3, r2]
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b299      	uxth	r1, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2246      	movs	r2, #70	; 0x46
 8006b8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b90:	f7fc f90c 	bl	8002dac <HAL_GetTick>
 8006b94:	0002      	movs	r2, r0
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d802      	bhi.n	8006ba6 <HAL_SPI_TransmitReceive+0x33a>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	d102      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x340>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006bac:	2323      	movs	r3, #35	; 0x23
 8006bae:	18fb      	adds	r3, r7, r3
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	701a      	strb	r2, [r3, #0]
        goto error;
 8006bb4:	e01b      	b.n	8006bee <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d19d      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x290>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2246      	movs	r2, #70	; 0x46
 8006bc4:	5a9b      	ldrh	r3, [r3, r2]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d197      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 faba 	bl	800714c <SPI_EndRxTxTransaction>
 8006bd8:	1e03      	subs	r3, r0, #0
 8006bda:	d007      	beq.n	8006bec <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006bdc:	2323      	movs	r3, #35	; 0x23
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	2201      	movs	r2, #1
 8006be2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	661a      	str	r2, [r3, #96]	; 0x60
 8006bea:	e000      	b.n	8006bee <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006bec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	225d      	movs	r2, #93	; 0x5d
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	225c      	movs	r2, #92	; 0x5c
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006bfe:	2323      	movs	r3, #35	; 0x23
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	781b      	ldrb	r3, [r3, #0]
}
 8006c04:	0018      	movs	r0, r3
 8006c06:	46bd      	mov	sp, r7
 8006c08:	b00a      	add	sp, #40	; 0x28
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	ffffefff 	.word	0xffffefff

08006c10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	099b      	lsrs	r3, r3, #6
 8006c2c:	001a      	movs	r2, r3
 8006c2e:	2301      	movs	r3, #1
 8006c30:	4013      	ands	r3, r2
 8006c32:	d10f      	bne.n	8006c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	2201      	movs	r2, #1
 8006c38:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c3a:	d00b      	beq.n	8006c54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	099b      	lsrs	r3, r3, #6
 8006c40:	001a      	movs	r2, r3
 8006c42:	2301      	movs	r3, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	d005      	beq.n	8006c54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	0010      	movs	r0, r2
 8006c50:	4798      	blx	r3
    return;
 8006c52:	e0d5      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	085b      	lsrs	r3, r3, #1
 8006c58:	001a      	movs	r2, r3
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <HAL_SPI_IRQHandler+0x68>
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	001a      	movs	r2, r3
 8006c66:	2301      	movs	r3, #1
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d005      	beq.n	8006c78 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	0010      	movs	r0, r2
 8006c74:	4798      	blx	r3
    return;
 8006c76:	e0c3      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	001a      	movs	r2, r3
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4013      	ands	r3, r2
 8006c82:	d10c      	bne.n	8006c9e <HAL_SPI_IRQHandler+0x8e>
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	001a      	movs	r2, r3
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d106      	bne.n	8006c9e <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	001a      	movs	r2, r3
 8006c96:	2301      	movs	r3, #1
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <HAL_SPI_IRQHandler+0x8e>
 8006c9c:	e0b0      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f0>
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	001a      	movs	r2, r3
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d100      	bne.n	8006cac <HAL_SPI_IRQHandler+0x9c>
 8006caa:	e0a9      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	099b      	lsrs	r3, r3, #6
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d023      	beq.n	8006d00 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	225d      	movs	r2, #93	; 0x5d
 8006cbc:	5c9b      	ldrb	r3, [r3, r2]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d011      	beq.n	8006ce8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	2204      	movs	r2, #4
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	617b      	str	r3, [r7, #20]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	e00b      	b.n	8006d00 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
        return;
 8006cfe:	e07f      	b.n	8006e00 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	001a      	movs	r2, r3
 8006d06:	2301      	movs	r3, #1
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d014      	beq.n	8006d36 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d10:	2201      	movs	r2, #1
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2140      	movs	r1, #64	; 0x40
 8006d30:	438a      	bics	r2, r1
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d00c      	beq.n	8006d5c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d46:	2208      	movs	r2, #8
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d04c      	beq.n	8006dfe <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	21e0      	movs	r1, #224	; 0xe0
 8006d70:	438a      	bics	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	225d      	movs	r2, #93	; 0x5d
 8006d78:	2101      	movs	r1, #1
 8006d7a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	4013      	ands	r3, r2
 8006d82:	d103      	bne.n	8006d8c <HAL_SPI_IRQHandler+0x17c>
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	2201      	movs	r2, #1
 8006d88:	4013      	ands	r3, r2
 8006d8a:	d032      	beq.n	8006df2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2103      	movs	r1, #3
 8006d98:	438a      	bics	r2, r1
 8006d9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d010      	beq.n	8006dc6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <HAL_SPI_IRQHandler+0x1f8>)
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	0018      	movs	r0, r3
 8006db2:	f7fc fc07 	bl	80035c4 <HAL_DMA_Abort_IT>
 8006db6:	1e03      	subs	r3, r0, #0
 8006db8:	d005      	beq.n	8006dc6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dbe:	2240      	movs	r2, #64	; 0x40
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d016      	beq.n	8006dfc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	4a0d      	ldr	r2, [pc, #52]	; (8006e08 <HAL_SPI_IRQHandler+0x1f8>)
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f7fc fbf2 	bl	80035c4 <HAL_DMA_Abort_IT>
 8006de0:	1e03      	subs	r3, r0, #0
 8006de2:	d00b      	beq.n	8006dfc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de8:	2240      	movs	r2, #64	; 0x40
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006df0:	e004      	b.n	8006dfc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	0018      	movs	r0, r3
 8006df6:	f000 f809 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006dfa:	e000      	b.n	8006dfe <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006dfc:	46c0      	nop			; (mov r8, r8)
    return;
 8006dfe:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b008      	add	sp, #32
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			; (mov r8, r8)
 8006e08:	08006e1d 	.word	0x08006e1d

08006e0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e14:	46c0      	nop			; (mov r8, r8)
 8006e16:	46bd      	mov	sp, r7
 8006e18:	b002      	add	sp, #8
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2246      	movs	r2, #70	; 0x46
 8006e2e:	2100      	movs	r1, #0
 8006e30:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f7ff ffe6 	bl	8006e0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e40:	46c0      	nop			; (mov r8, r8)
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b004      	add	sp, #16
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	1dfb      	adds	r3, r7, #7
 8006e56:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e58:	f7fb ffa8 	bl	8002dac <HAL_GetTick>
 8006e5c:	0002      	movs	r2, r0
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e68:	f7fb ffa0 	bl	8002dac <HAL_GetTick>
 8006e6c:	0003      	movs	r3, r0
 8006e6e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e70:	4b3a      	ldr	r3, [pc, #232]	; (8006f5c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	015b      	lsls	r3, r3, #5
 8006e76:	0d1b      	lsrs	r3, r3, #20
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	4353      	muls	r3, r2
 8006e7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e7e:	e058      	b.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	d055      	beq.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e86:	f7fb ff91 	bl	8002dac <HAL_GetTick>
 8006e8a:	0002      	movs	r2, r0
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d902      	bls.n	8006e9c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d142      	bne.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	21e0      	movs	r1, #224	; 0xe0
 8006ea8:	438a      	bics	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	2382      	movs	r3, #130	; 0x82
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d113      	bne.n	8006ee0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d005      	beq.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d107      	bne.n	8006ee0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2140      	movs	r1, #64	; 0x40
 8006edc:	438a      	bics	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ee4:	2380      	movs	r3, #128	; 0x80
 8006ee6:	019b      	lsls	r3, r3, #6
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d110      	bne.n	8006f0e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	491a      	ldr	r1, [pc, #104]	; (8006f60 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006ef8:	400a      	ands	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2180      	movs	r1, #128	; 0x80
 8006f08:	0189      	lsls	r1, r1, #6
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	225d      	movs	r2, #93	; 0x5d
 8006f12:	2101      	movs	r1, #1
 8006f14:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	225c      	movs	r2, #92	; 0x5c
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e017      	b.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	425a      	negs	r2, r3
 8006f42:	4153      	adcs	r3, r2
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	001a      	movs	r2, r3
 8006f48:	1dfb      	adds	r3, r7, #7
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d197      	bne.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	0018      	movs	r0, r3
 8006f54:	46bd      	mov	sp, r7
 8006f56:	b008      	add	sp, #32
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	46c0      	nop			; (mov r8, r8)
 8006f5c:	20003134 	.word	0x20003134
 8006f60:	ffffdfff 	.word	0xffffdfff

08006f64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f72:	f7fb ff1b 	bl	8002dac <HAL_GetTick>
 8006f76:	0002      	movs	r2, r0
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	18d3      	adds	r3, r2, r3
 8006f80:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f82:	f7fb ff13 	bl	8002dac <HAL_GetTick>
 8006f86:	0003      	movs	r3, r0
 8006f88:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f8a:	4b3f      	ldr	r3, [pc, #252]	; (8007088 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	0013      	movs	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	00da      	lsls	r2, r3, #3
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	0d1b      	lsrs	r3, r3, #20
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	4353      	muls	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fa0:	e064      	b.n	800706c <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	23c0      	movs	r3, #192	; 0xc0
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d106      	bne.n	8006fba <SPI_WaitFifoStateUntilTimeout+0x56>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d103      	bne.n	8006fba <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	d055      	beq.n	800706c <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fc0:	f7fb fef4 	bl	8002dac <HAL_GetTick>
 8006fc4:	0002      	movs	r2, r0
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d902      	bls.n	8006fd6 <SPI_WaitFifoStateUntilTimeout+0x72>
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d142      	bne.n	800705c <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	21e0      	movs	r1, #224	; 0xe0
 8006fe2:	438a      	bics	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	2382      	movs	r3, #130	; 0x82
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d113      	bne.n	800701a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	2380      	movs	r3, #128	; 0x80
 8006ff8:	021b      	lsls	r3, r3, #8
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d005      	beq.n	800700a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	429a      	cmp	r2, r3
 8007008:	d107      	bne.n	800701a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2140      	movs	r1, #64	; 0x40
 8007016:	438a      	bics	r2, r1
 8007018:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800701e:	2380      	movs	r3, #128	; 0x80
 8007020:	019b      	lsls	r3, r3, #6
 8007022:	429a      	cmp	r2, r3
 8007024:	d110      	bne.n	8007048 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4916      	ldr	r1, [pc, #88]	; (800708c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007032:	400a      	ands	r2, r1
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2180      	movs	r1, #128	; 0x80
 8007042:	0189      	lsls	r1, r1, #6
 8007044:	430a      	orrs	r2, r1
 8007046:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	225d      	movs	r2, #93	; 0x5d
 800704c:	2101      	movs	r1, #1
 800704e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	225c      	movs	r2, #92	; 0x5c
 8007054:	2100      	movs	r1, #0
 8007056:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e010      	b.n	800707e <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	3b01      	subs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4013      	ands	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d192      	bne.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	0018      	movs	r0, r3
 8007080:	46bd      	mov	sp, r7
 8007082:	b008      	add	sp, #32
 8007084:	bd80      	pop	{r7, pc}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	20003134 	.word	0x20003134
 800708c:	ffffdfff 	.word	0xffffdfff

08007090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	2382      	movs	r3, #130	; 0x82
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d113      	bne.n	80070d0 <SPI_EndRxTransaction+0x40>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d005      	beq.n	80070c0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	429a      	cmp	r2, r3
 80070be:	d107      	bne.n	80070d0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2140      	movs	r1, #64	; 0x40
 80070cc:	438a      	bics	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	0013      	movs	r3, r2
 80070da:	2200      	movs	r2, #0
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	f7ff feb3 	bl	8006e48 <SPI_WaitFlagStateUntilTimeout>
 80070e2:	1e03      	subs	r3, r0, #0
 80070e4:	d007      	beq.n	80070f6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	2220      	movs	r2, #32
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e026      	b.n	8007144 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	2382      	movs	r3, #130	; 0x82
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	429a      	cmp	r2, r3
 8007100:	d11f      	bne.n	8007142 <SPI_EndRxTransaction+0xb2>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	2380      	movs	r3, #128	; 0x80
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	429a      	cmp	r2, r3
 800710c:	d005      	beq.n	800711a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	2380      	movs	r3, #128	; 0x80
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	429a      	cmp	r2, r3
 8007118:	d113      	bne.n	8007142 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	23c0      	movs	r3, #192	; 0xc0
 800711e:	00d9      	lsls	r1, r3, #3
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	0013      	movs	r3, r2
 8007128:	2200      	movs	r2, #0
 800712a:	f7ff ff1b 	bl	8006f64 <SPI_WaitFifoStateUntilTimeout>
 800712e:	1e03      	subs	r3, r0, #0
 8007130:	d007      	beq.n	8007142 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	2220      	movs	r2, #32
 8007138:	431a      	orrs	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e000      	b.n	8007144 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	0018      	movs	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	b004      	add	sp, #16
 800714a:	bd80      	pop	{r7, pc}

0800714c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	23c0      	movs	r3, #192	; 0xc0
 800715c:	0159      	lsls	r1, r3, #5
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	0013      	movs	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	f7ff fefc 	bl	8006f64 <SPI_WaitFifoStateUntilTimeout>
 800716c:	1e03      	subs	r3, r0, #0
 800716e:	d007      	beq.n	8007180 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007174:	2220      	movs	r2, #32
 8007176:	431a      	orrs	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e027      	b.n	80071d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	0013      	movs	r3, r2
 800718a:	2200      	movs	r2, #0
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	f7ff fe5b 	bl	8006e48 <SPI_WaitFlagStateUntilTimeout>
 8007192:	1e03      	subs	r3, r0, #0
 8007194:	d007      	beq.n	80071a6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	2220      	movs	r2, #32
 800719c:	431a      	orrs	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e014      	b.n	80071d0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	23c0      	movs	r3, #192	; 0xc0
 80071aa:	00d9      	lsls	r1, r3, #3
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	0013      	movs	r3, r2
 80071b4:	2200      	movs	r2, #0
 80071b6:	f7ff fed5 	bl	8006f64 <SPI_WaitFifoStateUntilTimeout>
 80071ba:	1e03      	subs	r3, r0, #0
 80071bc:	d007      	beq.n	80071ce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	2220      	movs	r2, #32
 80071c4:	431a      	orrs	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e000      	b.n	80071d0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	0018      	movs	r0, r3
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b004      	add	sp, #16
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e04a      	b.n	8007280 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	223d      	movs	r2, #61	; 0x3d
 80071ee:	5c9b      	ldrb	r3, [r3, r2]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d107      	bne.n	8007206 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	223c      	movs	r2, #60	; 0x3c
 80071fa:	2100      	movs	r1, #0
 80071fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	0018      	movs	r0, r3
 8007202:	f7fb fb47 	bl	8002894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	223d      	movs	r2, #61	; 0x3d
 800720a:	2102      	movs	r1, #2
 800720c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3304      	adds	r3, #4
 8007216:	0019      	movs	r1, r3
 8007218:	0010      	movs	r0, r2
 800721a:	f000 fb41 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2248      	movs	r2, #72	; 0x48
 8007222:	2101      	movs	r1, #1
 8007224:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	223e      	movs	r2, #62	; 0x3e
 800722a:	2101      	movs	r1, #1
 800722c:	5499      	strb	r1, [r3, r2]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	223f      	movs	r2, #63	; 0x3f
 8007232:	2101      	movs	r1, #1
 8007234:	5499      	strb	r1, [r3, r2]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2240      	movs	r2, #64	; 0x40
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2241      	movs	r2, #65	; 0x41
 8007242:	2101      	movs	r1, #1
 8007244:	5499      	strb	r1, [r3, r2]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2242      	movs	r2, #66	; 0x42
 800724a:	2101      	movs	r1, #1
 800724c:	5499      	strb	r1, [r3, r2]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2243      	movs	r2, #67	; 0x43
 8007252:	2101      	movs	r1, #1
 8007254:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2244      	movs	r2, #68	; 0x44
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2245      	movs	r2, #69	; 0x45
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2246      	movs	r2, #70	; 0x46
 800726a:	2101      	movs	r1, #1
 800726c:	5499      	strb	r1, [r3, r2]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2247      	movs	r2, #71	; 0x47
 8007272:	2101      	movs	r1, #1
 8007274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	223d      	movs	r2, #61	; 0x3d
 800727a:	2101      	movs	r1, #1
 800727c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	0018      	movs	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	b002      	add	sp, #8
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e04a      	b.n	8007330 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223d      	movs	r2, #61	; 0x3d
 800729e:	5c9b      	ldrb	r3, [r3, r2]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d107      	bne.n	80072b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	223c      	movs	r2, #60	; 0x3c
 80072aa:	2100      	movs	r1, #0
 80072ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0018      	movs	r0, r3
 80072b2:	f000 f841 	bl	8007338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	223d      	movs	r2, #61	; 0x3d
 80072ba:	2102      	movs	r1, #2
 80072bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3304      	adds	r3, #4
 80072c6:	0019      	movs	r1, r3
 80072c8:	0010      	movs	r0, r2
 80072ca:	f000 fae9 	bl	80078a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2248      	movs	r2, #72	; 0x48
 80072d2:	2101      	movs	r1, #1
 80072d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	223e      	movs	r2, #62	; 0x3e
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	223f      	movs	r2, #63	; 0x3f
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2240      	movs	r2, #64	; 0x40
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2241      	movs	r2, #65	; 0x41
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2242      	movs	r2, #66	; 0x42
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2243      	movs	r2, #67	; 0x43
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2244      	movs	r2, #68	; 0x44
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2245      	movs	r2, #69	; 0x45
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2246      	movs	r2, #70	; 0x46
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2247      	movs	r2, #71	; 0x47
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	223d      	movs	r2, #61	; 0x3d
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007340:	46c0      	nop			; (mov r8, r8)
 8007342:	46bd      	mov	sp, r7
 8007344:	b002      	add	sp, #8
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d108      	bne.n	800736a <HAL_TIM_PWM_Start+0x22>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	223e      	movs	r2, #62	; 0x3e
 800735c:	5c9b      	ldrb	r3, [r3, r2]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	1e5a      	subs	r2, r3, #1
 8007364:	4193      	sbcs	r3, r2
 8007366:	b2db      	uxtb	r3, r3
 8007368:	e037      	b.n	80073da <HAL_TIM_PWM_Start+0x92>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b04      	cmp	r3, #4
 800736e:	d108      	bne.n	8007382 <HAL_TIM_PWM_Start+0x3a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	223f      	movs	r2, #63	; 0x3f
 8007374:	5c9b      	ldrb	r3, [r3, r2]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	1e5a      	subs	r2, r3, #1
 800737c:	4193      	sbcs	r3, r2
 800737e:	b2db      	uxtb	r3, r3
 8007380:	e02b      	b.n	80073da <HAL_TIM_PWM_Start+0x92>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b08      	cmp	r3, #8
 8007386:	d108      	bne.n	800739a <HAL_TIM_PWM_Start+0x52>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2240      	movs	r2, #64	; 0x40
 800738c:	5c9b      	ldrb	r3, [r3, r2]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	1e5a      	subs	r2, r3, #1
 8007394:	4193      	sbcs	r3, r2
 8007396:	b2db      	uxtb	r3, r3
 8007398:	e01f      	b.n	80073da <HAL_TIM_PWM_Start+0x92>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b0c      	cmp	r3, #12
 800739e:	d108      	bne.n	80073b2 <HAL_TIM_PWM_Start+0x6a>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2241      	movs	r2, #65	; 0x41
 80073a4:	5c9b      	ldrb	r3, [r3, r2]
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	1e5a      	subs	r2, r3, #1
 80073ac:	4193      	sbcs	r3, r2
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	e013      	b.n	80073da <HAL_TIM_PWM_Start+0x92>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d108      	bne.n	80073ca <HAL_TIM_PWM_Start+0x82>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2242      	movs	r2, #66	; 0x42
 80073bc:	5c9b      	ldrb	r3, [r3, r2]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	1e5a      	subs	r2, r3, #1
 80073c4:	4193      	sbcs	r3, r2
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	e007      	b.n	80073da <HAL_TIM_PWM_Start+0x92>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2243      	movs	r2, #67	; 0x43
 80073ce:	5c9b      	ldrb	r3, [r3, r2]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	1e5a      	subs	r2, r3, #1
 80073d6:	4193      	sbcs	r3, r2
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e08b      	b.n	80074fa <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <HAL_TIM_PWM_Start+0xaa>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	223e      	movs	r2, #62	; 0x3e
 80073ec:	2102      	movs	r1, #2
 80073ee:	5499      	strb	r1, [r3, r2]
 80073f0:	e023      	b.n	800743a <HAL_TIM_PWM_Start+0xf2>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start+0xba>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	223f      	movs	r2, #63	; 0x3f
 80073fc:	2102      	movs	r1, #2
 80073fe:	5499      	strb	r1, [r3, r2]
 8007400:	e01b      	b.n	800743a <HAL_TIM_PWM_Start+0xf2>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d104      	bne.n	8007412 <HAL_TIM_PWM_Start+0xca>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2240      	movs	r2, #64	; 0x40
 800740c:	2102      	movs	r1, #2
 800740e:	5499      	strb	r1, [r3, r2]
 8007410:	e013      	b.n	800743a <HAL_TIM_PWM_Start+0xf2>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b0c      	cmp	r3, #12
 8007416:	d104      	bne.n	8007422 <HAL_TIM_PWM_Start+0xda>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2241      	movs	r2, #65	; 0x41
 800741c:	2102      	movs	r1, #2
 800741e:	5499      	strb	r1, [r3, r2]
 8007420:	e00b      	b.n	800743a <HAL_TIM_PWM_Start+0xf2>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b10      	cmp	r3, #16
 8007426:	d104      	bne.n	8007432 <HAL_TIM_PWM_Start+0xea>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2242      	movs	r2, #66	; 0x42
 800742c:	2102      	movs	r1, #2
 800742e:	5499      	strb	r1, [r3, r2]
 8007430:	e003      	b.n	800743a <HAL_TIM_PWM_Start+0xf2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2243      	movs	r2, #67	; 0x43
 8007436:	2102      	movs	r1, #2
 8007438:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	2201      	movs	r2, #1
 8007442:	0018      	movs	r0, r3
 8007444:	f000 fe0c 	bl	8008060 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2d      	ldr	r2, [pc, #180]	; (8007504 <HAL_TIM_PWM_Start+0x1bc>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_TIM_PWM_Start+0x128>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a2c      	ldr	r2, [pc, #176]	; (8007508 <HAL_TIM_PWM_Start+0x1c0>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_TIM_PWM_Start+0x128>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2a      	ldr	r2, [pc, #168]	; (800750c <HAL_TIM_PWM_Start+0x1c4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_TIM_PWM_Start+0x128>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a29      	ldr	r2, [pc, #164]	; (8007510 <HAL_TIM_PWM_Start+0x1c8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <HAL_TIM_PWM_Start+0x12c>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_TIM_PWM_Start+0x12e>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	0209      	lsls	r1, r1, #8
 8007488:	430a      	orrs	r2, r1
 800748a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1c      	ldr	r2, [pc, #112]	; (8007504 <HAL_TIM_PWM_Start+0x1bc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00f      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x16e>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	2380      	movs	r3, #128	; 0x80
 800749c:	05db      	lsls	r3, r3, #23
 800749e:	429a      	cmp	r2, r3
 80074a0:	d009      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x16e>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1b      	ldr	r2, [pc, #108]	; (8007514 <HAL_TIM_PWM_Start+0x1cc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_TIM_PWM_Start+0x16e>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a15      	ldr	r2, [pc, #84]	; (8007508 <HAL_TIM_PWM_Start+0x1c0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d116      	bne.n	80074e4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4a16      	ldr	r2, [pc, #88]	; (8007518 <HAL_TIM_PWM_Start+0x1d0>)
 80074be:	4013      	ands	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b06      	cmp	r3, #6
 80074c6:	d016      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x1ae>
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	2380      	movs	r3, #128	; 0x80
 80074cc:	025b      	lsls	r3, r3, #9
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d011      	beq.n	80074f6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2101      	movs	r1, #1
 80074de:	430a      	orrs	r2, r1
 80074e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074e2:	e008      	b.n	80074f6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2101      	movs	r1, #1
 80074f0:	430a      	orrs	r2, r1
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e000      	b.n	80074f8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b004      	add	sp, #16
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	40012c00 	.word	0x40012c00
 8007508:	40014000 	.word	0x40014000
 800750c:	40014400 	.word	0x40014400
 8007510:	40014800 	.word	0x40014800
 8007514:	40000400 	.word	0x40000400
 8007518:	00010007 	.word	0x00010007

0800751c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	223c      	movs	r2, #60	; 0x3c
 800752c:	5c9b      	ldrb	r3, [r3, r2]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007532:	2302      	movs	r3, #2
 8007534:	e0df      	b.n	80076f6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	223c      	movs	r2, #60	; 0x3c
 800753a:	2101      	movs	r1, #1
 800753c:	5499      	strb	r1, [r3, r2]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b14      	cmp	r3, #20
 8007542:	d900      	bls.n	8007546 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8007544:	e0d1      	b.n	80076ea <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	009a      	lsls	r2, r3, #2
 800754a:	4b6d      	ldr	r3, [pc, #436]	; (8007700 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800754c:	18d3      	adds	r3, r2, r3
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	0011      	movs	r1, r2
 800755a:	0018      	movs	r0, r3
 800755c:	f000 fa20 	bl	80079a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2108      	movs	r1, #8
 800756c:	430a      	orrs	r2, r1
 800756e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2104      	movs	r1, #4
 800757c:	438a      	bics	r2, r1
 800757e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6999      	ldr	r1, [r3, #24]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	691a      	ldr	r2, [r3, #16]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	619a      	str	r2, [r3, #24]
      break;
 8007592:	e0ab      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	0011      	movs	r1, r2
 800759c:	0018      	movs	r0, r3
 800759e:	f000 fa89 	bl	8007ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	699a      	ldr	r2, [r3, #24]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	0109      	lsls	r1, r1, #4
 80075b0:	430a      	orrs	r2, r1
 80075b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699a      	ldr	r2, [r3, #24]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4951      	ldr	r1, [pc, #324]	; (8007704 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80075c0:	400a      	ands	r2, r1
 80075c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6999      	ldr	r1, [r3, #24]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	021a      	lsls	r2, r3, #8
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	619a      	str	r2, [r3, #24]
      break;
 80075d8:	e088      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0011      	movs	r1, r2
 80075e2:	0018      	movs	r0, r3
 80075e4:	f000 faea 	bl	8007bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	69da      	ldr	r2, [r3, #28]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2108      	movs	r1, #8
 80075f4:	430a      	orrs	r2, r1
 80075f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2104      	movs	r1, #4
 8007604:	438a      	bics	r2, r1
 8007606:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69d9      	ldr	r1, [r3, #28]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	691a      	ldr	r2, [r3, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	61da      	str	r2, [r3, #28]
      break;
 800761a:	e067      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	0011      	movs	r1, r2
 8007624:	0018      	movs	r0, r3
 8007626:	f000 fb51 	bl	8007ccc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2180      	movs	r1, #128	; 0x80
 8007636:	0109      	lsls	r1, r1, #4
 8007638:	430a      	orrs	r2, r1
 800763a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	492f      	ldr	r1, [pc, #188]	; (8007704 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8007648:	400a      	ands	r2, r1
 800764a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69d9      	ldr	r1, [r3, #28]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	021a      	lsls	r2, r3, #8
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	61da      	str	r2, [r3, #28]
      break;
 8007660:	e044      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68ba      	ldr	r2, [r7, #8]
 8007668:	0011      	movs	r1, r2
 800766a:	0018      	movs	r0, r3
 800766c:	f000 fb98 	bl	8007da0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2108      	movs	r1, #8
 800767c:	430a      	orrs	r2, r1
 800767e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2104      	movs	r1, #4
 800768c:	438a      	bics	r2, r1
 800768e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076a2:	e023      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	0011      	movs	r1, r2
 80076ac:	0018      	movs	r0, r3
 80076ae:	f000 fbd7 	bl	8007e60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2180      	movs	r1, #128	; 0x80
 80076be:	0109      	lsls	r1, r1, #4
 80076c0:	430a      	orrs	r2, r1
 80076c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	490d      	ldr	r1, [pc, #52]	; (8007704 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80076d0:	400a      	ands	r2, r1
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	021a      	lsls	r2, r3, #8
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80076e8:	e000      	b.n	80076ec <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80076ea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	223c      	movs	r2, #60	; 0x3c
 80076f0:	2100      	movs	r1, #0
 80076f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	0018      	movs	r0, r3
 80076f8:	46bd      	mov	sp, r7
 80076fa:	b004      	add	sp, #16
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	0800996c 	.word	0x0800996c
 8007704:	fffffbff 	.word	0xfffffbff

08007708 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	223c      	movs	r2, #60	; 0x3c
 8007716:	5c9b      	ldrb	r3, [r3, r2]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_TIM_ConfigClockSource+0x18>
 800771c:	2302      	movs	r3, #2
 800771e:	e0b7      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x188>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	223c      	movs	r2, #60	; 0x3c
 8007724:	2101      	movs	r1, #1
 8007726:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	223d      	movs	r2, #61	; 0x3d
 800772c:	2102      	movs	r1, #2
 800772e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4a57      	ldr	r2, [pc, #348]	; (8007898 <HAL_TIM_ConfigClockSource+0x190>)
 800773c:	4013      	ands	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a56      	ldr	r2, [pc, #344]	; (800789c <HAL_TIM_ConfigClockSource+0x194>)
 8007744:	4013      	ands	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2280      	movs	r2, #128	; 0x80
 8007756:	0192      	lsls	r2, r2, #6
 8007758:	4293      	cmp	r3, r2
 800775a:	d040      	beq.n	80077de <HAL_TIM_ConfigClockSource+0xd6>
 800775c:	2280      	movs	r2, #128	; 0x80
 800775e:	0192      	lsls	r2, r2, #6
 8007760:	4293      	cmp	r3, r2
 8007762:	d900      	bls.n	8007766 <HAL_TIM_ConfigClockSource+0x5e>
 8007764:	e088      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 8007766:	2280      	movs	r2, #128	; 0x80
 8007768:	0152      	lsls	r2, r2, #5
 800776a:	4293      	cmp	r3, r2
 800776c:	d100      	bne.n	8007770 <HAL_TIM_ConfigClockSource+0x68>
 800776e:	e085      	b.n	800787c <HAL_TIM_ConfigClockSource+0x174>
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	0152      	lsls	r2, r2, #5
 8007774:	4293      	cmp	r3, r2
 8007776:	d900      	bls.n	800777a <HAL_TIM_ConfigClockSource+0x72>
 8007778:	e07e      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 800777a:	2b70      	cmp	r3, #112	; 0x70
 800777c:	d018      	beq.n	80077b0 <HAL_TIM_ConfigClockSource+0xa8>
 800777e:	d900      	bls.n	8007782 <HAL_TIM_ConfigClockSource+0x7a>
 8007780:	e07a      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 8007782:	2b60      	cmp	r3, #96	; 0x60
 8007784:	d04f      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0x11e>
 8007786:	d900      	bls.n	800778a <HAL_TIM_ConfigClockSource+0x82>
 8007788:	e076      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 800778a:	2b50      	cmp	r3, #80	; 0x50
 800778c:	d03b      	beq.n	8007806 <HAL_TIM_ConfigClockSource+0xfe>
 800778e:	d900      	bls.n	8007792 <HAL_TIM_ConfigClockSource+0x8a>
 8007790:	e072      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 8007792:	2b40      	cmp	r3, #64	; 0x40
 8007794:	d057      	beq.n	8007846 <HAL_TIM_ConfigClockSource+0x13e>
 8007796:	d900      	bls.n	800779a <HAL_TIM_ConfigClockSource+0x92>
 8007798:	e06e      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d063      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x15e>
 800779e:	d86b      	bhi.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d060      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x15e>
 80077a4:	d868      	bhi.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05d      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x15e>
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d05b      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80077ae:	e063      	b.n	8007878 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6818      	ldr	r0, [r3, #0]
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	6899      	ldr	r1, [r3, #8]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f000 fc2e 	bl	8008020 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2277      	movs	r2, #119	; 0x77
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	609a      	str	r2, [r3, #8]
      break;
 80077dc:	e04f      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	6899      	ldr	r1, [r3, #8]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f000 fc17 	bl	8008020 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2180      	movs	r1, #128	; 0x80
 80077fe:	01c9      	lsls	r1, r1, #7
 8007800:	430a      	orrs	r2, r1
 8007802:	609a      	str	r2, [r3, #8]
      break;
 8007804:	e03b      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6818      	ldr	r0, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	6859      	ldr	r1, [r3, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	001a      	movs	r2, r3
 8007814:	f000 fb88 	bl	8007f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2150      	movs	r1, #80	; 0x50
 800781e:	0018      	movs	r0, r3
 8007820:	f000 fbe2 	bl	8007fe8 <TIM_ITRx_SetConfig>
      break;
 8007824:	e02b      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6859      	ldr	r1, [r3, #4]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	001a      	movs	r2, r3
 8007834:	f000 fba6 	bl	8007f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2160      	movs	r1, #96	; 0x60
 800783e:	0018      	movs	r0, r3
 8007840:	f000 fbd2 	bl	8007fe8 <TIM_ITRx_SetConfig>
      break;
 8007844:	e01b      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	6859      	ldr	r1, [r3, #4]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	001a      	movs	r2, r3
 8007854:	f000 fb68 	bl	8007f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2140      	movs	r1, #64	; 0x40
 800785e:	0018      	movs	r0, r3
 8007860:	f000 fbc2 	bl	8007fe8 <TIM_ITRx_SetConfig>
      break;
 8007864:	e00b      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	0019      	movs	r1, r3
 8007870:	0010      	movs	r0, r2
 8007872:	f000 fbb9 	bl	8007fe8 <TIM_ITRx_SetConfig>
        break;
 8007876:	e002      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007878:	46c0      	nop			; (mov r8, r8)
 800787a:	e000      	b.n	800787e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800787c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223d      	movs	r2, #61	; 0x3d
 8007882:	2101      	movs	r1, #1
 8007884:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	223c      	movs	r2, #60	; 0x3c
 800788a:	2100      	movs	r1, #0
 800788c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	0018      	movs	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	b004      	add	sp, #16
 8007896:	bd80      	pop	{r7, pc}
 8007898:	ffceff88 	.word	0xffceff88
 800789c:	ffff00ff 	.word	0xffff00ff

080078a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a34      	ldr	r2, [pc, #208]	; (8007984 <TIM_Base_SetConfig+0xe4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d008      	beq.n	80078ca <TIM_Base_SetConfig+0x2a>
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	2380      	movs	r3, #128	; 0x80
 80078bc:	05db      	lsls	r3, r3, #23
 80078be:	429a      	cmp	r2, r3
 80078c0:	d003      	beq.n	80078ca <TIM_Base_SetConfig+0x2a>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a30      	ldr	r2, [pc, #192]	; (8007988 <TIM_Base_SetConfig+0xe8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d108      	bne.n	80078dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2270      	movs	r2, #112	; 0x70
 80078ce:	4393      	bics	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a29      	ldr	r2, [pc, #164]	; (8007984 <TIM_Base_SetConfig+0xe4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d018      	beq.n	8007916 <TIM_Base_SetConfig+0x76>
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	05db      	lsls	r3, r3, #23
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d013      	beq.n	8007916 <TIM_Base_SetConfig+0x76>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a25      	ldr	r2, [pc, #148]	; (8007988 <TIM_Base_SetConfig+0xe8>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d00f      	beq.n	8007916 <TIM_Base_SetConfig+0x76>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a24      	ldr	r2, [pc, #144]	; (800798c <TIM_Base_SetConfig+0xec>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00b      	beq.n	8007916 <TIM_Base_SetConfig+0x76>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a23      	ldr	r2, [pc, #140]	; (8007990 <TIM_Base_SetConfig+0xf0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d007      	beq.n	8007916 <TIM_Base_SetConfig+0x76>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a22      	ldr	r2, [pc, #136]	; (8007994 <TIM_Base_SetConfig+0xf4>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d003      	beq.n	8007916 <TIM_Base_SetConfig+0x76>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a21      	ldr	r2, [pc, #132]	; (8007998 <TIM_Base_SetConfig+0xf8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d108      	bne.n	8007928 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4a20      	ldr	r2, [pc, #128]	; (800799c <TIM_Base_SetConfig+0xfc>)
 800791a:	4013      	ands	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2280      	movs	r2, #128	; 0x80
 800792c:	4393      	bics	r3, r2
 800792e:	001a      	movs	r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <TIM_Base_SetConfig+0xe4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00b      	beq.n	800796e <TIM_Base_SetConfig+0xce>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a0d      	ldr	r2, [pc, #52]	; (8007990 <TIM_Base_SetConfig+0xf0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_Base_SetConfig+0xce>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <TIM_Base_SetConfig+0xf4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_Base_SetConfig+0xce>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a0b      	ldr	r2, [pc, #44]	; (8007998 <TIM_Base_SetConfig+0xf8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d103      	bne.n	8007976 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	691a      	ldr	r2, [r3, #16]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	615a      	str	r2, [r3, #20]
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	46bd      	mov	sp, r7
 8007980:	b004      	add	sp, #16
 8007982:	bd80      	pop	{r7, pc}
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40002000 	.word	0x40002000
 8007990:	40014000 	.word	0x40014000
 8007994:	40014400 	.word	0x40014400
 8007998:	40014800 	.word	0x40014800
 800799c:	fffffcff 	.word	0xfffffcff

080079a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	2201      	movs	r2, #1
 80079b0:	4393      	bics	r3, r2
 80079b2:	001a      	movs	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a32      	ldr	r2, [pc, #200]	; (8007a98 <TIM_OC1_SetConfig+0xf8>)
 80079ce:	4013      	ands	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2203      	movs	r2, #3
 80079d6:	4393      	bics	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2202      	movs	r2, #2
 80079e8:	4393      	bics	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a28      	ldr	r2, [pc, #160]	; (8007a9c <TIM_OC1_SetConfig+0xfc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d00b      	beq.n	8007a16 <TIM_OC1_SetConfig+0x76>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a27      	ldr	r2, [pc, #156]	; (8007aa0 <TIM_OC1_SetConfig+0x100>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d007      	beq.n	8007a16 <TIM_OC1_SetConfig+0x76>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <TIM_OC1_SetConfig+0x104>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d003      	beq.n	8007a16 <TIM_OC1_SetConfig+0x76>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a25      	ldr	r2, [pc, #148]	; (8007aa8 <TIM_OC1_SetConfig+0x108>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d10c      	bne.n	8007a30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2208      	movs	r2, #8
 8007a1a:	4393      	bics	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	4393      	bics	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1a      	ldr	r2, [pc, #104]	; (8007a9c <TIM_OC1_SetConfig+0xfc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00b      	beq.n	8007a50 <TIM_OC1_SetConfig+0xb0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a19      	ldr	r2, [pc, #100]	; (8007aa0 <TIM_OC1_SetConfig+0x100>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d007      	beq.n	8007a50 <TIM_OC1_SetConfig+0xb0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <TIM_OC1_SetConfig+0x104>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d003      	beq.n	8007a50 <TIM_OC1_SetConfig+0xb0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a17      	ldr	r2, [pc, #92]	; (8007aa8 <TIM_OC1_SetConfig+0x108>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d111      	bne.n	8007a74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	4a16      	ldr	r2, [pc, #88]	; (8007aac <TIM_OC1_SetConfig+0x10c>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <TIM_OC1_SetConfig+0x110>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	699b      	ldr	r3, [r3, #24]
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	621a      	str	r2, [r3, #32]
}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b006      	add	sp, #24
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	fffeff8f 	.word	0xfffeff8f
 8007a9c:	40012c00 	.word	0x40012c00
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	fffffeff 	.word	0xfffffeff
 8007ab0:	fffffdff 	.word	0xfffffdff

08007ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	2210      	movs	r2, #16
 8007ac4:	4393      	bics	r3, r2
 8007ac6:	001a      	movs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	4a2e      	ldr	r2, [pc, #184]	; (8007b9c <TIM_OC2_SetConfig+0xe8>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <TIM_OC2_SetConfig+0xec>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2220      	movs	r2, #32
 8007afe:	4393      	bics	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a24      	ldr	r2, [pc, #144]	; (8007ba4 <TIM_OC2_SetConfig+0xf0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10d      	bne.n	8007b32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2280      	movs	r2, #128	; 0x80
 8007b1a:	4393      	bics	r3, r2
 8007b1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	2240      	movs	r2, #64	; 0x40
 8007b2e:	4393      	bics	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1b      	ldr	r2, [pc, #108]	; (8007ba4 <TIM_OC2_SetConfig+0xf0>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d00b      	beq.n	8007b52 <TIM_OC2_SetConfig+0x9e>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <TIM_OC2_SetConfig+0xf4>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d007      	beq.n	8007b52 <TIM_OC2_SetConfig+0x9e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a19      	ldr	r2, [pc, #100]	; (8007bac <TIM_OC2_SetConfig+0xf8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d003      	beq.n	8007b52 <TIM_OC2_SetConfig+0x9e>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a18      	ldr	r2, [pc, #96]	; (8007bb0 <TIM_OC2_SetConfig+0xfc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d113      	bne.n	8007b7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	4a17      	ldr	r2, [pc, #92]	; (8007bb4 <TIM_OC2_SetConfig+0x100>)
 8007b56:	4013      	ands	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4a16      	ldr	r2, [pc, #88]	; (8007bb8 <TIM_OC2_SetConfig+0x104>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	621a      	str	r2, [r3, #32]
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b006      	add	sp, #24
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	feff8fff 	.word	0xfeff8fff
 8007ba0:	fffffcff 	.word	0xfffffcff
 8007ba4:	40012c00 	.word	0x40012c00
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	fffffbff 	.word	0xfffffbff
 8007bb8:	fffff7ff 	.word	0xfffff7ff

08007bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	4a35      	ldr	r2, [pc, #212]	; (8007ca0 <TIM_OC3_SetConfig+0xe4>)
 8007bcc:	401a      	ands	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4a2f      	ldr	r2, [pc, #188]	; (8007ca4 <TIM_OC3_SetConfig+0xe8>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2203      	movs	r2, #3
 8007bf0:	4393      	bics	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	4a29      	ldr	r2, [pc, #164]	; (8007ca8 <TIM_OC3_SetConfig+0xec>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a25      	ldr	r2, [pc, #148]	; (8007cac <TIM_OC3_SetConfig+0xf0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	4a24      	ldr	r2, [pc, #144]	; (8007cb0 <TIM_OC3_SetConfig+0xf4>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	4a20      	ldr	r2, [pc, #128]	; (8007cb4 <TIM_OC3_SetConfig+0xf8>)
 8007c32:	4013      	ands	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <TIM_OC3_SetConfig+0xf0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d00b      	beq.n	8007c56 <TIM_OC3_SetConfig+0x9a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a1d      	ldr	r2, [pc, #116]	; (8007cb8 <TIM_OC3_SetConfig+0xfc>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d007      	beq.n	8007c56 <TIM_OC3_SetConfig+0x9a>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a1c      	ldr	r2, [pc, #112]	; (8007cbc <TIM_OC3_SetConfig+0x100>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d003      	beq.n	8007c56 <TIM_OC3_SetConfig+0x9a>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a1b      	ldr	r2, [pc, #108]	; (8007cc0 <TIM_OC3_SetConfig+0x104>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d113      	bne.n	8007c7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	4a1a      	ldr	r2, [pc, #104]	; (8007cc4 <TIM_OC3_SetConfig+0x108>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <TIM_OC3_SetConfig+0x10c>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	46c0      	nop			; (mov r8, r8)
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	b006      	add	sp, #24
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	fffffeff 	.word	0xfffffeff
 8007ca4:	fffeff8f 	.word	0xfffeff8f
 8007ca8:	fffffdff 	.word	0xfffffdff
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	fffff7ff 	.word	0xfffff7ff
 8007cb4:	fffffbff 	.word	0xfffffbff
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	40014400 	.word	0x40014400
 8007cc0:	40014800 	.word	0x40014800
 8007cc4:	ffffefff 	.word	0xffffefff
 8007cc8:	ffffdfff 	.word	0xffffdfff

08007ccc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	4a28      	ldr	r2, [pc, #160]	; (8007d7c <TIM_OC4_SetConfig+0xb0>)
 8007cdc:	401a      	ands	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <TIM_OC4_SetConfig+0xb4>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4a21      	ldr	r2, [pc, #132]	; (8007d84 <TIM_OC4_SetConfig+0xb8>)
 8007d00:	4013      	ands	r3, r2
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	021b      	lsls	r3, r3, #8
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4a1d      	ldr	r2, [pc, #116]	; (8007d88 <TIM_OC4_SetConfig+0xbc>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	031b      	lsls	r3, r3, #12
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <TIM_OC4_SetConfig+0xc0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00b      	beq.n	8007d44 <TIM_OC4_SetConfig+0x78>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <TIM_OC4_SetConfig+0xc4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d007      	beq.n	8007d44 <TIM_OC4_SetConfig+0x78>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a17      	ldr	r2, [pc, #92]	; (8007d94 <TIM_OC4_SetConfig+0xc8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d003      	beq.n	8007d44 <TIM_OC4_SetConfig+0x78>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a16      	ldr	r2, [pc, #88]	; (8007d98 <TIM_OC4_SetConfig+0xcc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d109      	bne.n	8007d58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <TIM_OC4_SetConfig+0xd0>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	019b      	lsls	r3, r3, #6
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	621a      	str	r2, [r3, #32]
}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b006      	add	sp, #24
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	ffffefff 	.word	0xffffefff
 8007d80:	feff8fff 	.word	0xfeff8fff
 8007d84:	fffffcff 	.word	0xfffffcff
 8007d88:	ffffdfff 	.word	0xffffdfff
 8007d8c:	40012c00 	.word	0x40012c00
 8007d90:	40014000 	.word	0x40014000
 8007d94:	40014400 	.word	0x40014400
 8007d98:	40014800 	.word	0x40014800
 8007d9c:	ffffbfff 	.word	0xffffbfff

08007da0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	4a25      	ldr	r2, [pc, #148]	; (8007e44 <TIM_OC5_SetConfig+0xa4>)
 8007db0:	401a      	ands	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4a1f      	ldr	r2, [pc, #124]	; (8007e48 <TIM_OC5_SetConfig+0xa8>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	4a1b      	ldr	r2, [pc, #108]	; (8007e4c <TIM_OC5_SetConfig+0xac>)
 8007dde:	4013      	ands	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a17      	ldr	r2, [pc, #92]	; (8007e50 <TIM_OC5_SetConfig+0xb0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d00b      	beq.n	8007e0e <TIM_OC5_SetConfig+0x6e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <TIM_OC5_SetConfig+0xb4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d007      	beq.n	8007e0e <TIM_OC5_SetConfig+0x6e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a15      	ldr	r2, [pc, #84]	; (8007e58 <TIM_OC5_SetConfig+0xb8>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d003      	beq.n	8007e0e <TIM_OC5_SetConfig+0x6e>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a14      	ldr	r2, [pc, #80]	; (8007e5c <TIM_OC5_SetConfig+0xbc>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d109      	bne.n	8007e22 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <TIM_OC5_SetConfig+0xa4>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685a      	ldr	r2, [r3, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	621a      	str	r2, [r3, #32]
}
 8007e3c:	46c0      	nop			; (mov r8, r8)
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	b006      	add	sp, #24
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	fffeffff 	.word	0xfffeffff
 8007e48:	fffeff8f 	.word	0xfffeff8f
 8007e4c:	fffdffff 	.word	0xfffdffff
 8007e50:	40012c00 	.word	0x40012c00
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800

08007e60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	4a26      	ldr	r2, [pc, #152]	; (8007f08 <TIM_OC6_SetConfig+0xa8>)
 8007e70:	401a      	ands	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a20      	ldr	r2, [pc, #128]	; (8007f0c <TIM_OC6_SetConfig+0xac>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	021b      	lsls	r3, r3, #8
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	4a1c      	ldr	r2, [pc, #112]	; (8007f10 <TIM_OC6_SetConfig+0xb0>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	051b      	lsls	r3, r3, #20
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a18      	ldr	r2, [pc, #96]	; (8007f14 <TIM_OC6_SetConfig+0xb4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00b      	beq.n	8007ed0 <TIM_OC6_SetConfig+0x70>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a17      	ldr	r2, [pc, #92]	; (8007f18 <TIM_OC6_SetConfig+0xb8>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d007      	beq.n	8007ed0 <TIM_OC6_SetConfig+0x70>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a16      	ldr	r2, [pc, #88]	; (8007f1c <TIM_OC6_SetConfig+0xbc>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d003      	beq.n	8007ed0 <TIM_OC6_SetConfig+0x70>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a15      	ldr	r2, [pc, #84]	; (8007f20 <TIM_OC6_SetConfig+0xc0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d109      	bne.n	8007ee4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <TIM_OC6_SetConfig+0xc4>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	029b      	lsls	r3, r3, #10
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	46c0      	nop			; (mov r8, r8)
 8007f00:	46bd      	mov	sp, r7
 8007f02:	b006      	add	sp, #24
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	46c0      	nop			; (mov r8, r8)
 8007f08:	ffefffff 	.word	0xffefffff
 8007f0c:	feff8fff 	.word	0xfeff8fff
 8007f10:	ffdfffff 	.word	0xffdfffff
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40014000 	.word	0x40014000
 8007f1c:	40014400 	.word	0x40014400
 8007f20:	40014800 	.word	0x40014800
 8007f24:	fffbffff 	.word	0xfffbffff

08007f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4393      	bics	r3, r2
 8007f42:	001a      	movs	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	22f0      	movs	r2, #240	; 0xf0
 8007f52:	4393      	bics	r3, r2
 8007f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	220a      	movs	r2, #10
 8007f64:	4393      	bics	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	621a      	str	r2, [r3, #32]
}
 8007f7c:	46c0      	nop			; (mov r8, r8)
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	b006      	add	sp, #24
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	2210      	movs	r2, #16
 8007f96:	4393      	bics	r3, r2
 8007f98:	001a      	movs	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	4a0d      	ldr	r2, [pc, #52]	; (8007fe4 <TIM_TI2_ConfigInputStage+0x60>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	031b      	lsls	r3, r3, #12
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	22a0      	movs	r2, #160	; 0xa0
 8007fc0:	4393      	bics	r3, r2
 8007fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	b006      	add	sp, #24
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	46c0      	nop			; (mov r8, r8)
 8007fe4:	ffff0fff 	.word	0xffff0fff

08007fe8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4a08      	ldr	r2, [pc, #32]	; (800801c <TIM_ITRx_SetConfig+0x34>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008000:	683a      	ldr	r2, [r7, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4313      	orrs	r3, r2
 8008006:	2207      	movs	r2, #7
 8008008:	4313      	orrs	r3, r2
 800800a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	609a      	str	r2, [r3, #8]
}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	46bd      	mov	sp, r7
 8008016:	b004      	add	sp, #16
 8008018:	bd80      	pop	{r7, pc}
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	ffcfff8f 	.word	0xffcfff8f

08008020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b086      	sub	sp, #24
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	607a      	str	r2, [r7, #4]
 800802c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	4a09      	ldr	r2, [pc, #36]	; (800805c <TIM_ETR_SetConfig+0x3c>)
 8008038:	4013      	ands	r3, r2
 800803a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	431a      	orrs	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	4313      	orrs	r3, r2
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	609a      	str	r2, [r3, #8]
}
 8008054:	46c0      	nop			; (mov r8, r8)
 8008056:	46bd      	mov	sp, r7
 8008058:	b006      	add	sp, #24
 800805a:	bd80      	pop	{r7, pc}
 800805c:	ffff00ff 	.word	0xffff00ff

08008060 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	221f      	movs	r2, #31
 8008070:	4013      	ands	r3, r2
 8008072:	2201      	movs	r2, #1
 8008074:	409a      	lsls	r2, r3
 8008076:	0013      	movs	r3, r2
 8008078:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	43d2      	mvns	r2, r2
 8008082:	401a      	ands	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1a      	ldr	r2, [r3, #32]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	211f      	movs	r1, #31
 8008090:	400b      	ands	r3, r1
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4099      	lsls	r1, r3
 8008096:	000b      	movs	r3, r1
 8008098:	431a      	orrs	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	46c0      	nop			; (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b006      	add	sp, #24
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	223c      	movs	r2, #60	; 0x3c
 80080b6:	5c9b      	ldrb	r3, [r3, r2]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080bc:	2302      	movs	r3, #2
 80080be:	e055      	b.n	800816c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	223c      	movs	r2, #60	; 0x3c
 80080c4:	2101      	movs	r1, #1
 80080c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	223d      	movs	r2, #61	; 0x3d
 80080cc:	2102      	movs	r1, #2
 80080ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a23      	ldr	r2, [pc, #140]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d108      	bne.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4a22      	ldr	r2, [pc, #136]	; (8008178 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2270      	movs	r2, #112	; 0x70
 8008100:	4393      	bics	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a16      	ldr	r2, [pc, #88]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00f      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	2380      	movs	r3, #128	; 0x80
 8008126:	05db      	lsls	r3, r3, #23
 8008128:	429a      	cmp	r2, r3
 800812a:	d009      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a12      	ldr	r2, [pc, #72]	; (800817c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a11      	ldr	r2, [pc, #68]	; (8008180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d10c      	bne.n	800815a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2280      	movs	r2, #128	; 0x80
 8008144:	4393      	bics	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	4313      	orrs	r3, r2
 8008150:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	223d      	movs	r2, #61	; 0x3d
 800815e:	2101      	movs	r1, #1
 8008160:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	223c      	movs	r2, #60	; 0x3c
 8008166:	2100      	movs	r1, #0
 8008168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b004      	add	sp, #16
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40012c00 	.word	0x40012c00
 8008178:	ff0fffff 	.word	0xff0fffff
 800817c:	40000400 	.word	0x40000400
 8008180:	40014000 	.word	0x40014000

08008184 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	223c      	movs	r2, #60	; 0x3c
 8008196:	5c9b      	ldrb	r3, [r3, r2]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800819c:	2302      	movs	r3, #2
 800819e:	e079      	b.n	8008294 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	223c      	movs	r2, #60	; 0x3c
 80081a4:	2101      	movs	r1, #1
 80081a6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	22ff      	movs	r2, #255	; 0xff
 80081ac:	4393      	bics	r3, r2
 80081ae:	001a      	movs	r2, r3
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4a38      	ldr	r2, [pc, #224]	; (800829c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80081bc:	401a      	ands	r2, r3
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4a35      	ldr	r2, [pc, #212]	; (80082a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80081ca:	401a      	ands	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4a33      	ldr	r2, [pc, #204]	; (80082a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80081d8:	401a      	ands	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4a30      	ldr	r2, [pc, #192]	; (80082a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80081e6:	401a      	ands	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4a2e      	ldr	r2, [pc, #184]	; (80082ac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80081f4:	401a      	ands	r2, r3
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4a2b      	ldr	r2, [pc, #172]	; (80082b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008202:	401a      	ands	r2, r3
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4a29      	ldr	r2, [pc, #164]	; (80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008210:	401a      	ands	r2, r3
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	041b      	lsls	r3, r3, #16
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a25      	ldr	r2, [pc, #148]	; (80082b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d106      	bne.n	8008234 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	4a24      	ldr	r2, [pc, #144]	; (80082bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800822a:	401a      	ands	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d121      	bne.n	8008282 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a1f      	ldr	r2, [pc, #124]	; (80082c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008242:	401a      	ands	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	051b      	lsls	r3, r3, #20
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4a1c      	ldr	r2, [pc, #112]	; (80082c4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008252:	401a      	ands	r2, r3
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a1a      	ldr	r2, [pc, #104]	; (80082c8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008260:	401a      	ands	r2, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a12      	ldr	r2, [pc, #72]	; (80082b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d106      	bne.n	8008282 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4a15      	ldr	r2, [pc, #84]	; (80082cc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008278:	401a      	ands	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	223c      	movs	r2, #60	; 0x3c
 800828e:	2100      	movs	r1, #0
 8008290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	0018      	movs	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	b004      	add	sp, #16
 800829a:	bd80      	pop	{r7, pc}
 800829c:	fffffcff 	.word	0xfffffcff
 80082a0:	fffffbff 	.word	0xfffffbff
 80082a4:	fffff7ff 	.word	0xfffff7ff
 80082a8:	ffffefff 	.word	0xffffefff
 80082ac:	ffffdfff 	.word	0xffffdfff
 80082b0:	ffffbfff 	.word	0xffffbfff
 80082b4:	fff0ffff 	.word	0xfff0ffff
 80082b8:	40012c00 	.word	0x40012c00
 80082bc:	efffffff 	.word	0xefffffff
 80082c0:	ff0fffff 	.word	0xff0fffff
 80082c4:	feffffff 	.word	0xfeffffff
 80082c8:	fdffffff 	.word	0xfdffffff
 80082cc:	dfffffff 	.word	0xdfffffff

080082d0 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	223c      	movs	r2, #60	; 0x3c
 80082e0:	5c9b      	ldrb	r3, [r3, r2]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_TIMEx_ConfigBreakInput+0x1a>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e08e      	b.n	8008408 <HAL_TIMEx_ConfigBreakInput+0x138>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	223c      	movs	r2, #60	; 0x3c
 80082ee:	2101      	movs	r1, #1
 80082f0:	5499      	strb	r1, [r3, r2]

  switch (sBreakInputConfig->Source)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d019      	beq.n	800832e <HAL_TIMEx_ConfigBreakInput+0x5e>
 80082fa:	d822      	bhi.n	8008342 <HAL_TIMEx_ConfigBreakInput+0x72>
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d002      	beq.n	8008306 <HAL_TIMEx_ConfigBreakInput+0x36>
 8008300:	2b02      	cmp	r3, #2
 8008302:	d00a      	beq.n	800831a <HAL_TIMEx_ConfigBreakInput+0x4a>
 8008304:	e01d      	b.n	8008342 <HAL_TIMEx_ConfigBreakInput+0x72>
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8008306:	2301      	movs	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800830e:	2380      	movs	r3, #128	; 0x80
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8008314:	2309      	movs	r3, #9
 8008316:	61bb      	str	r3, [r7, #24]
      break;
 8008318:	e01c      	b.n	8008354 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#if defined(COMP1) && defined(COMP2)
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800831a:	2302      	movs	r3, #2
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800831e:	2301      	movs	r3, #1
 8008320:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8008322:	2380      	movs	r3, #128	; 0x80
 8008324:	00db      	lsls	r3, r3, #3
 8008326:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8008328:	230a      	movs	r3, #10
 800832a:	61bb      	str	r3, [r7, #24]
      break;
 800832c:	e012      	b.n	8008354 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800832e:	2304      	movs	r3, #4
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8008332:	2302      	movs	r3, #2
 8008334:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8008336:	2380      	movs	r3, #128	; 0x80
 8008338:	011b      	lsls	r3, r3, #4
 800833a:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800833c:	230b      	movs	r3, #11
 800833e:	61bb      	str	r3, [r7, #24]
      break;
 8008340:	e008      	b.n	8008354 <HAL_TIMEx_ConfigBreakInput+0x84>
    }
#endif /* COMP3 */

    default:
    {
      bkin_enable_mask = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	61bb      	str	r3, [r7, #24]
      break;
 8008352:	46c0      	nop			; (mov r8, r8)
    }
  }

  switch (BreakInput)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d003      	beq.n	8008362 <HAL_TIMEx_ConfigBreakInput+0x92>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d027      	beq.n	80083b0 <HAL_TIMEx_ConfigBreakInput+0xe0>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8008360:	e04d      	b.n	80083fe <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF1;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008368:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	43da      	mvns	r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	4013      	ands	r3, r2
 8008372:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	409a      	lsls	r2, r3
 800837c:	0013      	movs	r3, r2
 800837e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008380:	4013      	ands	r3, r2
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	43da      	mvns	r2, r3
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4013      	ands	r3, r2
 8008390:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	409a      	lsls	r2, r3
 800839a:	0013      	movs	r3, r2
 800839c:	6a3a      	ldr	r2, [r7, #32]
 800839e:	4013      	ands	r3, r2
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 80083ae:	e026      	b.n	80083fe <HAL_TIMEx_ConfigBreakInput+0x12e>
      tmporx = htim->Instance->AF2;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b6:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	43da      	mvns	r2, r3
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	4013      	ands	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	409a      	lsls	r2, r3
 80083ca:	0013      	movs	r3, r2
 80083cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ce:	4013      	ands	r3, r2
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 80083d6:	6a3b      	ldr	r3, [r7, #32]
 80083d8:	43da      	mvns	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	4013      	ands	r3, r2
 80083de:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689a      	ldr	r2, [r3, #8]
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	409a      	lsls	r2, r3
 80083e8:	0013      	movs	r3, r2
 80083ea:	6a3a      	ldr	r2, [r7, #32]
 80083ec:	4013      	ands	r3, r2
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80083fc:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	223c      	movs	r2, #60	; 0x3c
 8008402:	2100      	movs	r1, #0
 8008404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	0018      	movs	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	b00a      	add	sp, #40	; 0x28
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e03f      	b.n	80084a2 <HAL_USART_Init+0x92>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2259      	movs	r2, #89	; 0x59
 8008426:	5c9b      	ldrb	r3, [r3, r2]
 8008428:	b2db      	uxtb	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <HAL_USART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2258      	movs	r2, #88	; 0x58
 8008432:	2100      	movs	r1, #0
 8008434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	f7fa fa89 	bl	8002950 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2259      	movs	r2, #89	; 0x59
 8008442:	2102      	movs	r1, #2
 8008444:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2101      	movs	r1, #1
 8008452:	438a      	bics	r2, r1
 8008454:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	0018      	movs	r0, r3
 800845a:	f000 fad7 	bl	8008a0c <USART_SetConfig>
 800845e:	0003      	movs	r3, r0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_USART_Init+0x58>
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e01c      	b.n	80084a2 <HAL_USART_Init+0x92>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	490e      	ldr	r1, [pc, #56]	; (80084ac <HAL_USART_Init+0x9c>)
 8008474:	400a      	ands	r2, r1
 8008476:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	212a      	movs	r1, #42	; 0x2a
 8008484:	438a      	bics	r2, r1
 8008486:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2101      	movs	r1, #1
 8008494:	430a      	orrs	r2, r1
 8008496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0018      	movs	r0, r3
 800849c:	f000 fd52 	bl	8008f44 <USART_CheckIdleState>
 80084a0:	0003      	movs	r3, r0
}
 80084a2:	0018      	movs	r0, r3
 80084a4:	46bd      	mov	sp, r7
 80084a6:	b002      	add	sp, #8
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	ffffbfff 	.word	0xffffbfff

080084b0 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	1dbb      	adds	r3, r7, #6
 80084be:	801a      	strh	r2, [r3, #0]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2259      	movs	r2, #89	; 0x59
 80084c4:	5c9b      	ldrb	r3, [r3, r2]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d000      	beq.n	80084ce <HAL_USART_Transmit+0x1e>
 80084cc:	e0a9      	b.n	8008622 <HAL_USART_Transmit+0x172>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d003      	beq.n	80084dc <HAL_USART_Transmit+0x2c>
 80084d4:	1dbb      	adds	r3, r7, #6
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <HAL_USART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0a1      	b.n	8008624 <HAL_USART_Transmit+0x174>
    }

    /* In case of 9bits/No Parity transfer, pTxData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	015b      	lsls	r3, r3, #5
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d109      	bne.n	8008500 <HAL_USART_Transmit+0x50>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d105      	bne.n	8008500 <HAL_USART_Transmit+0x50>
    {
      if ((((uint32_t)pTxData) & 1U) != 0U)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2201      	movs	r2, #1
 80084f8:	4013      	ands	r3, r2
 80084fa:	d001      	beq.n	8008500 <HAL_USART_Transmit+0x50>
      {
        return  HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e091      	b.n	8008624 <HAL_USART_Transmit+0x174>
      }
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2258      	movs	r2, #88	; 0x58
 8008504:	5c9b      	ldrb	r3, [r3, r2]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_USART_Transmit+0x5e>
 800850a:	2302      	movs	r3, #2
 800850c:	e08a      	b.n	8008624 <HAL_USART_Transmit+0x174>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2258      	movs	r2, #88	; 0x58
 8008512:	2101      	movs	r1, #1
 8008514:	5499      	strb	r1, [r3, r2]

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	65da      	str	r2, [r3, #92]	; 0x5c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2259      	movs	r2, #89	; 0x59
 8008520:	2112      	movs	r1, #18
 8008522:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008524:	f7fa fc42 	bl	8002dac <HAL_GetTick>
 8008528:	0003      	movs	r3, r0
 800852a:	617b      	str	r3, [r7, #20]

    husart->TxXferSize = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	1dba      	adds	r2, r7, #6
 8008530:	8812      	ldrh	r2, [r2, #0]
 8008532:	859a      	strh	r2, [r3, #44]	; 0x2c
    husart->TxXferCount = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	1dba      	adds	r2, r7, #6
 8008538:	8812      	ldrh	r2, [r2, #0]
 800853a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	015b      	lsls	r3, r3, #5
 8008544:	429a      	cmp	r2, r3
 8008546:	d108      	bne.n	800855a <HAL_USART_Transmit+0xaa>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d104      	bne.n	800855a <HAL_USART_Transmit+0xaa>
    {
      ptxdata8bits  = NULL;
 8008550:	2300      	movs	r3, #0
 8008552:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	e003      	b.n	8008562 <HAL_USART_Transmit+0xb2>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8008562:	e02a      	b.n	80085ba <HAL_USART_Transmit+0x10a>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	0013      	movs	r3, r2
 800856e:	2200      	movs	r2, #0
 8008570:	2180      	movs	r1, #128	; 0x80
 8008572:	f000 fa16 	bl	80089a2 <USART_WaitOnFlagUntilTimeout>
 8008576:	1e03      	subs	r3, r0, #0
 8008578:	d001      	beq.n	800857e <HAL_USART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800857a:	2303      	movs	r3, #3
 800857c:	e052      	b.n	8008624 <HAL_USART_Transmit+0x174>
      }
      if (ptxdata8bits == NULL)
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10b      	bne.n	800859c <HAL_USART_Transmit+0xec>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	001a      	movs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	05d2      	lsls	r2, r2, #23
 8008590:	0dd2      	lsrs	r2, r2, #23
 8008592:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	3302      	adds	r3, #2
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	e007      	b.n	80085ac <HAL_USART_Transmit+0xfc>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	3301      	adds	r3, #1
 80085aa:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (husart->TxXferCount > 0U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085be:	b29b      	uxth	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1cf      	bne.n	8008564 <HAL_USART_Transmit+0xb4>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	0013      	movs	r3, r2
 80085ce:	2200      	movs	r2, #0
 80085d0:	2140      	movs	r1, #64	; 0x40
 80085d2:	f000 f9e6 	bl	80089a2 <USART_WaitOnFlagUntilTimeout>
 80085d6:	1e03      	subs	r3, r0, #0
 80085d8:	d001      	beq.n	80085de <HAL_USART_Transmit+0x12e>
    {
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e022      	b.n	8008624 <HAL_USART_Transmit+0x174>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2240      	movs	r2, #64	; 0x40
 80085e4:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2208      	movs	r2, #8
 80085ec:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2108      	movs	r1, #8
 80085fa:	430a      	orrs	r2, r1
 80085fc:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2110      	movs	r1, #16
 800860a:	430a      	orrs	r2, r1
 800860c:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2259      	movs	r2, #89	; 0x59
 8008612:	2101      	movs	r1, #1
 8008614:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2258      	movs	r2, #88	; 0x58
 800861a:	2100      	movs	r1, #0
 800861c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e000      	b.n	8008624 <HAL_USART_Transmit+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008622:	2302      	movs	r3, #2
  }
}
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	b008      	add	sp, #32
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_UDR));
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4aab      	ldr	r2, [pc, #684]	; (80088fc <HAL_USART_IRQHandler+0x2d0>)
 8008650:	4013      	ands	r3, r2
 8008652:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d117      	bne.n	800868a <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2220      	movs	r2, #32
 800865e:	4013      	ands	r3, r2
 8008660:	d013      	beq.n	800868a <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2220      	movs	r2, #32
 8008666:	4013      	ands	r3, r2
 8008668:	d104      	bne.n	8008674 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	055b      	lsls	r3, r3, #21
 8008670:	4013      	ands	r3, r2
 8008672:	d00a      	beq.n	800868a <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008678:	2b00      	cmp	r3, #0
 800867a:	d100      	bne.n	800867e <HAL_USART_IRQHandler+0x52>
 800867c:	e135      	b.n	80088ea <HAL_USART_IRQHandler+0x2be>
      {
        husart->RxISR(husart);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	0010      	movs	r0, r2
 8008686:	4798      	blx	r3
      }
      return;
 8008688:	e12f      	b.n	80088ea <HAL_USART_IRQHandler+0x2be>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d100      	bne.n	8008692 <HAL_USART_IRQHandler+0x66>
 8008690:	e0eb      	b.n	800886a <HAL_USART_IRQHandler+0x23e>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	4a9a      	ldr	r2, [pc, #616]	; (8008900 <HAL_USART_IRQHandler+0x2d4>)
 8008696:	4013      	ands	r3, r2
 8008698:	d105      	bne.n	80086a6 <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	2390      	movs	r3, #144	; 0x90
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4013      	ands	r3, r2
 80086a2:	d100      	bne.n	80086a6 <HAL_USART_IRQHandler+0x7a>
 80086a4:	e0e1      	b.n	800886a <HAL_USART_IRQHandler+0x23e>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	2201      	movs	r2, #1
 80086aa:	4013      	ands	r3, r2
 80086ac:	d00e      	beq.n	80086cc <HAL_USART_IRQHandler+0xa0>
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	2380      	movs	r3, #128	; 0x80
 80086b2:	005b      	lsls	r3, r3, #1
 80086b4:	4013      	ands	r3, r2
 80086b6:	d009      	beq.n	80086cc <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2201      	movs	r2, #1
 80086be:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c4:	2201      	movs	r2, #1
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	2202      	movs	r2, #2
 80086d0:	4013      	ands	r3, r2
 80086d2:	d00d      	beq.n	80086f0 <HAL_USART_IRQHandler+0xc4>
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2201      	movs	r2, #1
 80086d8:	4013      	ands	r3, r2
 80086da:	d009      	beq.n	80086f0 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2202      	movs	r2, #2
 80086e2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e8:	2204      	movs	r2, #4
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2204      	movs	r2, #4
 80086f4:	4013      	ands	r3, r2
 80086f6:	d00d      	beq.n	8008714 <HAL_USART_IRQHandler+0xe8>
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	2201      	movs	r2, #1
 80086fc:	4013      	ands	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2204      	movs	r2, #4
 8008706:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870c:	2202      	movs	r2, #2
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	2208      	movs	r2, #8
 8008718:	4013      	ands	r3, r2
 800871a:	d011      	beq.n	8008740 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2220      	movs	r2, #32
 8008720:	4013      	ands	r3, r2
 8008722:	d103      	bne.n	800872c <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	4a76      	ldr	r2, [pc, #472]	; (8008900 <HAL_USART_IRQHandler+0x2d4>)
 8008728:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800872a:	d009      	beq.n	8008740 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2208      	movs	r2, #8
 8008732:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008738:	2208      	movs	r2, #8
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	2380      	movs	r3, #128	; 0x80
 8008744:	019b      	lsls	r3, r3, #6
 8008746:	4013      	ands	r3, r2
 8008748:	d01a      	beq.n	8008780 <HAL_USART_IRQHandler+0x154>
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	2201      	movs	r2, #1
 800874e:	4013      	ands	r3, r2
 8008750:	d016      	beq.n	8008780 <HAL_USART_IRQHandler+0x154>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2259      	movs	r2, #89	; 0x59
 8008756:	5c9b      	ldrb	r3, [r3, r2]
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b22      	cmp	r3, #34	; 0x22
 800875c:	d105      	bne.n	800876a <HAL_USART_IRQHandler+0x13e>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2280      	movs	r2, #128	; 0x80
 8008764:	0192      	lsls	r2, r2, #6
 8008766:	621a      	str	r2, [r3, #32]
        return;
 8008768:	e0c4      	b.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2280      	movs	r2, #128	; 0x80
 8008770:	0192      	lsls	r2, r2, #6
 8008772:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008778:	2220      	movs	r2, #32
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d100      	bne.n	800878a <HAL_USART_IRQHandler+0x15e>
 8008788:	e0b1      	b.n	80088ee <HAL_USART_IRQHandler+0x2c2>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	2220      	movs	r2, #32
 800878e:	4013      	ands	r3, r2
 8008790:	d011      	beq.n	80087b6 <HAL_USART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2220      	movs	r2, #32
 8008796:	4013      	ands	r3, r2
 8008798:	d104      	bne.n	80087a4 <HAL_USART_IRQHandler+0x178>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	2380      	movs	r3, #128	; 0x80
 800879e:	055b      	lsls	r3, r3, #21
 80087a0:	4013      	ands	r3, r2
 80087a2:	d008      	beq.n	80087b6 <HAL_USART_IRQHandler+0x18a>
      {
        if (husart->RxISR != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <HAL_USART_IRQHandler+0x18a>
        {
          husart->RxISR(husart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	0010      	movs	r0, r2
 80087b4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ba:	2208      	movs	r2, #8
 80087bc:	4013      	ands	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	2240      	movs	r2, #64	; 0x40
 80087c8:	4013      	ands	r3, r2
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d002      	beq.n	80087d4 <HAL_USART_IRQHandler+0x1a8>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d040      	beq.n	8008856 <HAL_USART_IRQHandler+0x22a>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	0018      	movs	r0, r3
 80087d8:	f000 f8ae 	bl	8008938 <USART_EndTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2240      	movs	r2, #64	; 0x40
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b40      	cmp	r3, #64	; 0x40
 80087e8:	d130      	bne.n	800884c <HAL_USART_IRQHandler+0x220>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2140      	movs	r1, #64	; 0x40
 80087f6:	438a      	bics	r2, r1
 80087f8:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d008      	beq.n	8008814 <HAL_USART_IRQHandler+0x1e8>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008806:	2200      	movs	r2, #0
 8008808:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800880e:	0018      	movs	r0, r3
 8008810:	f7fa fed8 	bl	80035c4 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008818:	2b00      	cmp	r3, #0
 800881a:	d012      	beq.n	8008842 <HAL_USART_IRQHandler+0x216>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008820:	4a38      	ldr	r2, [pc, #224]	; (8008904 <HAL_USART_IRQHandler+0x2d8>)
 8008822:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008828:	0018      	movs	r0, r3
 800882a:	f7fa fecb 	bl	80035c4 <HAL_DMA_Abort_IT>
 800882e:	1e03      	subs	r3, r0, #0
 8008830:	d019      	beq.n	8008866 <HAL_USART_IRQHandler+0x23a>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883c:	0018      	movs	r0, r3
 800883e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008840:	e011      	b.n	8008866 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	0018      	movs	r0, r3
 8008846:	f000 f86f 	bl	8008928 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 800884a:	e00c      	b.n	8008866 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	0018      	movs	r0, r3
 8008850:	f000 f86a 	bl	8008928 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008854:	e007      	b.n	8008866 <HAL_USART_IRQHandler+0x23a>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	0018      	movs	r0, r3
 800885a:	f000 f865 	bl	8008928 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }
    return;
 8008864:	e043      	b.n	80088ee <HAL_USART_IRQHandler+0x2c2>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8008866:	46c0      	nop			; (mov r8, r8)
    return;
 8008868:	e041      	b.n	80088ee <HAL_USART_IRQHandler+0x2c2>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	2280      	movs	r2, #128	; 0x80
 800886e:	4013      	ands	r3, r2
 8008870:	d012      	beq.n	8008898 <HAL_USART_IRQHandler+0x26c>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	2280      	movs	r2, #128	; 0x80
 8008876:	4013      	ands	r3, r2
 8008878:	d104      	bne.n	8008884 <HAL_USART_IRQHandler+0x258>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	2380      	movs	r3, #128	; 0x80
 800887e:	041b      	lsls	r3, r3, #16
 8008880:	4013      	ands	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_USART_IRQHandler+0x26c>
  {
    if (husart->TxISR != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d032      	beq.n	80088f2 <HAL_USART_IRQHandler+0x2c6>
    {
      husart->TxISR(husart);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	0010      	movs	r0, r2
 8008894:	4798      	blx	r3
    }
    return;
 8008896:	e02c      	b.n	80088f2 <HAL_USART_IRQHandler+0x2c6>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2240      	movs	r2, #64	; 0x40
 800889c:	4013      	ands	r3, r2
 800889e:	d008      	beq.n	80088b2 <HAL_USART_IRQHandler+0x286>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2240      	movs	r2, #64	; 0x40
 80088a4:	4013      	ands	r3, r2
 80088a6:	d004      	beq.n	80088b2 <HAL_USART_IRQHandler+0x286>
  {
    USART_EndTransmit_IT(husart);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	0018      	movs	r0, r3
 80088ac:	f000 fb8e 	bl	8008fcc <USART_EndTransmit_IT>
    return;
 80088b0:	e020      	b.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	4013      	ands	r3, r2
 80088ba:	d009      	beq.n	80088d0 <HAL_USART_IRQHandler+0x2a4>
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	2380      	movs	r3, #128	; 0x80
 80088c0:	05db      	lsls	r3, r3, #23
 80088c2:	4013      	ands	r3, r2
 80088c4:	d004      	beq.n	80088d0 <HAL_USART_IRQHandler+0x2a4>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 fbca 	bl	8009062 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80088ce:	e011      	b.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	2380      	movs	r3, #128	; 0x80
 80088d4:	045b      	lsls	r3, r3, #17
 80088d6:	4013      	ands	r3, r2
 80088d8:	d00c      	beq.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	da09      	bge.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	0018      	movs	r0, r3
 80088e4:	f000 fbb5 	bl	8009052 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
 80088e8:	e004      	b.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
      return;
 80088ea:	46c0      	nop			; (mov r8, r8)
 80088ec:	e002      	b.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
    return;
 80088ee:	46c0      	nop			; (mov r8, r8)
 80088f0:	e000      	b.n	80088f4 <HAL_USART_IRQHandler+0x2c8>
    return;
 80088f2:	46c0      	nop			; (mov r8, r8)
  }
}
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b008      	add	sp, #32
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	46c0      	nop			; (mov r8, r8)
 80088fc:	0000200f 	.word	0x0000200f
 8008900:	10000001 	.word	0x10000001
 8008904:	08008979 	.word	0x08008979

08008908 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
 8008910:	46c0      	nop			; (mov r8, r8)
 8008912:	46bd      	mov	sp, r7
 8008914:	b002      	add	sp, #8
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
 8008920:	46c0      	nop			; (mov r8, r8)
 8008922:	46bd      	mov	sp, r7
 8008924:	b002      	add	sp, #8
 8008926:	bd80      	pop	{r7, pc}

08008928 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
 8008930:	46c0      	nop			; (mov r8, r8)
 8008932:	46bd      	mov	sp, r7
 8008934:	b002      	add	sp, #8
 8008936:	bd80      	pop	{r7, pc}

08008938 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4909      	ldr	r1, [pc, #36]	; (8008970 <USART_EndTransfer+0x38>)
 800894c:	400a      	ands	r2, r1
 800894e:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689a      	ldr	r2, [r3, #8]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4906      	ldr	r1, [pc, #24]	; (8008974 <USART_EndTransfer+0x3c>)
 800895c:	400a      	ands	r2, r1
 800895e:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2259      	movs	r2, #89	; 0x59
 8008964:	2101      	movs	r1, #1
 8008966:	5499      	strb	r1, [r3, r2]
}
 8008968:	46c0      	nop			; (mov r8, r8)
 800896a:	46bd      	mov	sp, r7
 800896c:	b002      	add	sp, #8
 800896e:	bd80      	pop	{r7, pc}
 8008970:	fffffe1f 	.word	0xfffffe1f
 8008974:	ef7ffffe 	.word	0xef7ffffe

08008978 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	86da      	strh	r2, [r3, #54]	; 0x36
  husart->TxXferCount = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	85da      	strh	r2, [r3, #46]	; 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	0018      	movs	r0, r3
 8008996:	f7ff ffc7 	bl	8008928 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	46bd      	mov	sp, r7
 800899e:	b004      	add	sp, #16
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	60f8      	str	r0, [r7, #12]
 80089aa:	60b9      	str	r1, [r7, #8]
 80089ac:	603b      	str	r3, [r7, #0]
 80089ae:	1dfb      	adds	r3, r7, #7
 80089b0:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80089b2:	e017      	b.n	80089e4 <USART_WaitOnFlagUntilTimeout+0x42>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	3301      	adds	r3, #1
 80089b8:	d014      	beq.n	80089e4 <USART_WaitOnFlagUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7fa f9f7 	bl	8002dac <HAL_GetTick>
 80089be:	0002      	movs	r2, r0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <USART_WaitOnFlagUntilTimeout+0x2e>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d109      	bne.n	80089e4 <USART_WaitOnFlagUntilTimeout+0x42>
      {
        husart->State = HAL_USART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2259      	movs	r2, #89	; 0x59
 80089d4:	2101      	movs	r1, #1
 80089d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2258      	movs	r2, #88	; 0x58
 80089dc:	2100      	movs	r1, #0
 80089de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e00f      	b.n	8008a04 <USART_WaitOnFlagUntilTimeout+0x62>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4013      	ands	r3, r2
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	425a      	negs	r2, r3
 80089f4:	4153      	adcs	r3, r2
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	001a      	movs	r2, r3
 80089fa:	1dfb      	adds	r3, r7, #7
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d0d8      	beq.n	80089b4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	0018      	movs	r0, r3
 8008a06:	46bd      	mov	sp, r7
 8008a08:	b004      	add	sp, #16
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008a14:	231e      	movs	r3, #30
 8008a16:	18fb      	adds	r3, r7, r3
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	2280      	movs	r2, #128	; 0x80
 8008a32:	0212      	lsls	r2, r2, #8
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4ab1      	ldr	r2, [pc, #708]	; (8008d04 <USART_SetConfig+0x2f8>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	0019      	movs	r1, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	697a      	ldr	r2, [r7, #20]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	601a      	str	r2, [r3, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a1b      	ldr	r3, [r3, #32]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699a      	ldr	r2, [r3, #24]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	4aa2      	ldr	r2, [pc, #648]	; (8008d08 <USART_SetConfig+0x2fc>)
 8008a80:	4013      	ands	r3, r2
 8008a82:	0019      	movs	r1, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	220f      	movs	r2, #15
 8008a96:	4393      	bics	r3, r2
 8008a98:	0019      	movs	r1, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a98      	ldr	r2, [pc, #608]	; (8008d0c <USART_SetConfig+0x300>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d127      	bne.n	8008b00 <USART_SetConfig+0xf4>
 8008ab0:	4b97      	ldr	r3, [pc, #604]	; (8008d10 <USART_SetConfig+0x304>)
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d017      	beq.n	8008aec <USART_SetConfig+0xe0>
 8008abc:	d81b      	bhi.n	8008af6 <USART_SetConfig+0xea>
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d00a      	beq.n	8008ad8 <USART_SetConfig+0xcc>
 8008ac2:	d818      	bhi.n	8008af6 <USART_SetConfig+0xea>
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <USART_SetConfig+0xc2>
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d00a      	beq.n	8008ae2 <USART_SetConfig+0xd6>
 8008acc:	e013      	b.n	8008af6 <USART_SetConfig+0xea>
 8008ace:	231f      	movs	r3, #31
 8008ad0:	18fb      	adds	r3, r7, r3
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e058      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008ad8:	231f      	movs	r3, #31
 8008ada:	18fb      	adds	r3, r7, r3
 8008adc:	2202      	movs	r2, #2
 8008ade:	701a      	strb	r2, [r3, #0]
 8008ae0:	e053      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008ae2:	231f      	movs	r3, #31
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	2204      	movs	r2, #4
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e04e      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008aec:	231f      	movs	r3, #31
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	2208      	movs	r2, #8
 8008af2:	701a      	strb	r2, [r3, #0]
 8008af4:	e049      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008af6:	231f      	movs	r3, #31
 8008af8:	18fb      	adds	r3, r7, r3
 8008afa:	2210      	movs	r2, #16
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e044      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a83      	ldr	r2, [pc, #524]	; (8008d14 <USART_SetConfig+0x308>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d127      	bne.n	8008b5a <USART_SetConfig+0x14e>
 8008b0a:	4b81      	ldr	r3, [pc, #516]	; (8008d10 <USART_SetConfig+0x304>)
 8008b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b0e:	220c      	movs	r2, #12
 8008b10:	4013      	ands	r3, r2
 8008b12:	2b0c      	cmp	r3, #12
 8008b14:	d017      	beq.n	8008b46 <USART_SetConfig+0x13a>
 8008b16:	d81b      	bhi.n	8008b50 <USART_SetConfig+0x144>
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d00a      	beq.n	8008b32 <USART_SetConfig+0x126>
 8008b1c:	d818      	bhi.n	8008b50 <USART_SetConfig+0x144>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d002      	beq.n	8008b28 <USART_SetConfig+0x11c>
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d00a      	beq.n	8008b3c <USART_SetConfig+0x130>
 8008b26:	e013      	b.n	8008b50 <USART_SetConfig+0x144>
 8008b28:	231f      	movs	r3, #31
 8008b2a:	18fb      	adds	r3, r7, r3
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	701a      	strb	r2, [r3, #0]
 8008b30:	e02b      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b32:	231f      	movs	r3, #31
 8008b34:	18fb      	adds	r3, r7, r3
 8008b36:	2202      	movs	r2, #2
 8008b38:	701a      	strb	r2, [r3, #0]
 8008b3a:	e026      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b3c:	231f      	movs	r3, #31
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	2204      	movs	r2, #4
 8008b42:	701a      	strb	r2, [r3, #0]
 8008b44:	e021      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b46:	231f      	movs	r3, #31
 8008b48:	18fb      	adds	r3, r7, r3
 8008b4a:	2208      	movs	r2, #8
 8008b4c:	701a      	strb	r2, [r3, #0]
 8008b4e:	e01c      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b50:	231f      	movs	r3, #31
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	2210      	movs	r2, #16
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e017      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a6e      	ldr	r2, [pc, #440]	; (8008d18 <USART_SetConfig+0x30c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d104      	bne.n	8008b6e <USART_SetConfig+0x162>
 8008b64:	231f      	movs	r3, #31
 8008b66:	18fb      	adds	r3, r7, r3
 8008b68:	2200      	movs	r2, #0
 8008b6a:	701a      	strb	r2, [r3, #0]
 8008b6c:	e00d      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a6a      	ldr	r2, [pc, #424]	; (8008d1c <USART_SetConfig+0x310>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d104      	bne.n	8008b82 <USART_SetConfig+0x176>
 8008b78:	231f      	movs	r3, #31
 8008b7a:	18fb      	adds	r3, r7, r3
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
 8008b80:	e003      	b.n	8008b8a <USART_SetConfig+0x17e>
 8008b82:	231f      	movs	r3, #31
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	2210      	movs	r2, #16
 8008b88:	701a      	strb	r2, [r3, #0]

  switch (clocksource)
 8008b8a:	231f      	movs	r3, #31
 8008b8c:	18fb      	adds	r3, r7, r3
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d100      	bne.n	8008b96 <USART_SetConfig+0x18a>
 8008b94:	e139      	b.n	8008e0a <USART_SetConfig+0x3fe>
 8008b96:	dd00      	ble.n	8008b9a <USART_SetConfig+0x18e>
 8008b98:	e195      	b.n	8008ec6 <USART_SetConfig+0x4ba>
 8008b9a:	2b04      	cmp	r3, #4
 8008b9c:	d100      	bne.n	8008ba0 <USART_SetConfig+0x194>
 8008b9e:	e0d3      	b.n	8008d48 <USART_SetConfig+0x33c>
 8008ba0:	dd00      	ble.n	8008ba4 <USART_SetConfig+0x198>
 8008ba2:	e190      	b.n	8008ec6 <USART_SetConfig+0x4ba>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <USART_SetConfig+0x1a4>
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d100      	bne.n	8008bae <USART_SetConfig+0x1a2>
 8008bac:	e061      	b.n	8008c72 <USART_SetConfig+0x266>
 8008bae:	e18a      	b.n	8008ec6 <USART_SetConfig+0x4ba>
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bb0:	f7fc fdea 	bl	8005788 <HAL_RCC_GetPCLK1Freq>
 8008bb4:	0003      	movs	r3, r0
 8008bb6:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d044      	beq.n	8008c4a <USART_SetConfig+0x23e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d03e      	beq.n	8008c46 <USART_SetConfig+0x23a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d038      	beq.n	8008c42 <USART_SetConfig+0x236>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d032      	beq.n	8008c3e <USART_SetConfig+0x232>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d02c      	beq.n	8008c3a <USART_SetConfig+0x22e>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b05      	cmp	r3, #5
 8008be6:	d026      	beq.n	8008c36 <USART_SetConfig+0x22a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	2b06      	cmp	r3, #6
 8008bee:	d020      	beq.n	8008c32 <USART_SetConfig+0x226>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2b07      	cmp	r3, #7
 8008bf6:	d01a      	beq.n	8008c2e <USART_SetConfig+0x222>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d014      	beq.n	8008c2a <USART_SetConfig+0x21e>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	2b09      	cmp	r3, #9
 8008c06:	d00e      	beq.n	8008c26 <USART_SetConfig+0x21a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	2b0a      	cmp	r3, #10
 8008c0e:	d008      	beq.n	8008c22 <USART_SetConfig+0x216>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b0b      	cmp	r3, #11
 8008c16:	d102      	bne.n	8008c1e <USART_SetConfig+0x212>
 8008c18:	2380      	movs	r3, #128	; 0x80
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	e016      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e014      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	e012      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c26:	2340      	movs	r3, #64	; 0x40
 8008c28:	e010      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c2a:	2320      	movs	r3, #32
 8008c2c:	e00e      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c2e:	2310      	movs	r3, #16
 8008c30:	e00c      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c32:	230c      	movs	r3, #12
 8008c34:	e00a      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c36:	230a      	movs	r3, #10
 8008c38:	e008      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c3a:	2308      	movs	r3, #8
 8008c3c:	e006      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c3e:	2306      	movs	r3, #6
 8008c40:	e004      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c42:	2304      	movs	r3, #4
 8008c44:	e002      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e000      	b.n	8008c4c <USART_SetConfig+0x240>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	0019      	movs	r1, r3
 8008c4e:	6938      	ldr	r0, [r7, #16]
 8008c50:	f7f7 fa58 	bl	8000104 <__udivsi3>
 8008c54:	0003      	movs	r3, r0
 8008c56:	005a      	lsls	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	085b      	lsrs	r3, r3, #1
 8008c5e:	18d2      	adds	r2, r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	0019      	movs	r1, r3
 8008c66:	0010      	movs	r0, r2
 8008c68:	f7f7 fa4c 	bl	8000104 <__udivsi3>
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	61bb      	str	r3, [r7, #24]
      break;
 8008c70:	e12e      	b.n	8008ed0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d052      	beq.n	8008d20 <USART_SetConfig+0x314>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d03e      	beq.n	8008d00 <USART_SetConfig+0x2f4>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d038      	beq.n	8008cfc <USART_SetConfig+0x2f0>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d032      	beq.n	8008cf8 <USART_SetConfig+0x2ec>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d02c      	beq.n	8008cf4 <USART_SetConfig+0x2e8>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d026      	beq.n	8008cf0 <USART_SetConfig+0x2e4>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b06      	cmp	r3, #6
 8008ca8:	d020      	beq.n	8008cec <USART_SetConfig+0x2e0>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b07      	cmp	r3, #7
 8008cb0:	d01a      	beq.n	8008ce8 <USART_SetConfig+0x2dc>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b08      	cmp	r3, #8
 8008cb8:	d014      	beq.n	8008ce4 <USART_SetConfig+0x2d8>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d00e      	beq.n	8008ce0 <USART_SetConfig+0x2d4>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2b0a      	cmp	r3, #10
 8008cc8:	d008      	beq.n	8008cdc <USART_SetConfig+0x2d0>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b0b      	cmp	r3, #11
 8008cd0:	d102      	bne.n	8008cd8 <USART_SetConfig+0x2cc>
 8008cd2:	2380      	movs	r3, #128	; 0x80
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	e024      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e022      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cdc:	2380      	movs	r3, #128	; 0x80
 8008cde:	e020      	b.n	8008d22 <USART_SetConfig+0x316>
 8008ce0:	2340      	movs	r3, #64	; 0x40
 8008ce2:	e01e      	b.n	8008d22 <USART_SetConfig+0x316>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	e01c      	b.n	8008d22 <USART_SetConfig+0x316>
 8008ce8:	2310      	movs	r3, #16
 8008cea:	e01a      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cec:	230c      	movs	r3, #12
 8008cee:	e018      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cf0:	230a      	movs	r3, #10
 8008cf2:	e016      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	e014      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cf8:	2306      	movs	r3, #6
 8008cfa:	e012      	b.n	8008d22 <USART_SetConfig+0x316>
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	e010      	b.n	8008d22 <USART_SetConfig+0x316>
 8008d00:	2302      	movs	r3, #2
 8008d02:	e00e      	b.n	8008d22 <USART_SetConfig+0x316>
 8008d04:	cfff69f3 	.word	0xcfff69f3
 8008d08:	ffffc0f6 	.word	0xffffc0f6
 8008d0c:	40013800 	.word	0x40013800
 8008d10:	40021000 	.word	0x40021000
 8008d14:	40004400 	.word	0x40004400
 8008d18:	40004800 	.word	0x40004800
 8008d1c:	40004c00 	.word	0x40004c00
 8008d20:	2301      	movs	r3, #1
 8008d22:	0019      	movs	r1, r3
 8008d24:	4886      	ldr	r0, [pc, #536]	; (8008f40 <USART_SetConfig+0x534>)
 8008d26:	f7f7 f9ed 	bl	8000104 <__udivsi3>
 8008d2a:	0003      	movs	r3, r0
 8008d2c:	005a      	lsls	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	18d2      	adds	r2, r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	0019      	movs	r1, r3
 8008d3c:	0010      	movs	r0, r2
 8008d3e:	f7f7 f9e1 	bl	8000104 <__udivsi3>
 8008d42:	0003      	movs	r3, r0
 8008d44:	61bb      	str	r3, [r7, #24]
      break;
 8008d46:	e0c3      	b.n	8008ed0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8008d48:	f7fc fc92 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 8008d4c:	0003      	movs	r3, r0
 8008d4e:	613b      	str	r3, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d044      	beq.n	8008de2 <USART_SetConfig+0x3d6>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d03e      	beq.n	8008dde <USART_SetConfig+0x3d2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d038      	beq.n	8008dda <USART_SetConfig+0x3ce>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d032      	beq.n	8008dd6 <USART_SetConfig+0x3ca>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d02c      	beq.n	8008dd2 <USART_SetConfig+0x3c6>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d026      	beq.n	8008dce <USART_SetConfig+0x3c2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b06      	cmp	r3, #6
 8008d86:	d020      	beq.n	8008dca <USART_SetConfig+0x3be>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2b07      	cmp	r3, #7
 8008d8e:	d01a      	beq.n	8008dc6 <USART_SetConfig+0x3ba>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	d014      	beq.n	8008dc2 <USART_SetConfig+0x3b6>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b09      	cmp	r3, #9
 8008d9e:	d00e      	beq.n	8008dbe <USART_SetConfig+0x3b2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b0a      	cmp	r3, #10
 8008da6:	d008      	beq.n	8008dba <USART_SetConfig+0x3ae>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b0b      	cmp	r3, #11
 8008dae:	d102      	bne.n	8008db6 <USART_SetConfig+0x3aa>
 8008db0:	2380      	movs	r3, #128	; 0x80
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	e016      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e014      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dba:	2380      	movs	r3, #128	; 0x80
 8008dbc:	e012      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	e010      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	e00e      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e00c      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	e00a      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dce:	230a      	movs	r3, #10
 8008dd0:	e008      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	e006      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dd6:	2306      	movs	r3, #6
 8008dd8:	e004      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dda:	2304      	movs	r3, #4
 8008ddc:	e002      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e000      	b.n	8008de4 <USART_SetConfig+0x3d8>
 8008de2:	2301      	movs	r3, #1
 8008de4:	0019      	movs	r1, r3
 8008de6:	6938      	ldr	r0, [r7, #16]
 8008de8:	f7f7 f98c 	bl	8000104 <__udivsi3>
 8008dec:	0003      	movs	r3, r0
 8008dee:	005a      	lsls	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	18d2      	adds	r2, r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	0019      	movs	r1, r3
 8008dfe:	0010      	movs	r0, r2
 8008e00:	f7f7 f980 	bl	8000104 <__udivsi3>
 8008e04:	0003      	movs	r3, r0
 8008e06:	61bb      	str	r3, [r7, #24]
      break;
 8008e08:	e062      	b.n	8008ed0 <USART_SetConfig+0x4c4>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8((uint32_t)LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d044      	beq.n	8008e9c <USART_SetConfig+0x490>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d03e      	beq.n	8008e98 <USART_SetConfig+0x48c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d038      	beq.n	8008e94 <USART_SetConfig+0x488>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d032      	beq.n	8008e90 <USART_SetConfig+0x484>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d02c      	beq.n	8008e8c <USART_SetConfig+0x480>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	2b05      	cmp	r3, #5
 8008e38:	d026      	beq.n	8008e88 <USART_SetConfig+0x47c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b06      	cmp	r3, #6
 8008e40:	d020      	beq.n	8008e84 <USART_SetConfig+0x478>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b07      	cmp	r3, #7
 8008e48:	d01a      	beq.n	8008e80 <USART_SetConfig+0x474>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b08      	cmp	r3, #8
 8008e50:	d014      	beq.n	8008e7c <USART_SetConfig+0x470>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2b09      	cmp	r3, #9
 8008e58:	d00e      	beq.n	8008e78 <USART_SetConfig+0x46c>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b0a      	cmp	r3, #10
 8008e60:	d008      	beq.n	8008e74 <USART_SetConfig+0x468>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2b0b      	cmp	r3, #11
 8008e68:	d102      	bne.n	8008e70 <USART_SetConfig+0x464>
 8008e6a:	2380      	movs	r3, #128	; 0x80
 8008e6c:	005b      	lsls	r3, r3, #1
 8008e6e:	e016      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e70:	2301      	movs	r3, #1
 8008e72:	e014      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e74:	2380      	movs	r3, #128	; 0x80
 8008e76:	e012      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	e010      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e7c:	2320      	movs	r3, #32
 8008e7e:	e00e      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e80:	2310      	movs	r3, #16
 8008e82:	e00c      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e84:	230c      	movs	r3, #12
 8008e86:	e00a      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e88:	230a      	movs	r3, #10
 8008e8a:	e008      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e8c:	2308      	movs	r3, #8
 8008e8e:	e006      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e90:	2306      	movs	r3, #6
 8008e92:	e004      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e94:	2304      	movs	r3, #4
 8008e96:	e002      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e000      	b.n	8008e9e <USART_SetConfig+0x492>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	0019      	movs	r1, r3
 8008ea0:	2380      	movs	r3, #128	; 0x80
 8008ea2:	0218      	lsls	r0, r3, #8
 8008ea4:	f7f7 f92e 	bl	8000104 <__udivsi3>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	005a      	lsls	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	18d2      	adds	r2, r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	0019      	movs	r1, r3
 8008eba:	0010      	movs	r0, r2
 8008ebc:	f7f7 f922 	bl	8000104 <__udivsi3>
 8008ec0:	0003      	movs	r3, r0
 8008ec2:	61bb      	str	r3, [r7, #24]
      break;
 8008ec4:	e004      	b.n	8008ed0 <USART_SetConfig+0x4c4>
    default:
      ret = HAL_ERROR;
 8008ec6:	231e      	movs	r3, #30
 8008ec8:	18fb      	adds	r3, r7, r3
 8008eca:	2201      	movs	r2, #1
 8008ecc:	701a      	strb	r2, [r3, #0]
      break;
 8008ece:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b0f      	cmp	r3, #15
 8008ed4:	d91c      	bls.n	8008f10 <USART_SetConfig+0x504>
 8008ed6:	69ba      	ldr	r2, [r7, #24]
 8008ed8:	2380      	movs	r3, #128	; 0x80
 8008eda:	025b      	lsls	r3, r3, #9
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d217      	bcs.n	8008f10 <USART_SetConfig+0x504>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	200e      	movs	r0, #14
 8008ee6:	183b      	adds	r3, r7, r0
 8008ee8:	210f      	movs	r1, #15
 8008eea:	438a      	bics	r2, r1
 8008eec:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2207      	movs	r2, #7
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	b299      	uxth	r1, r3
 8008efa:	183b      	adds	r3, r7, r0
 8008efc:	183a      	adds	r2, r7, r0
 8008efe:	8812      	ldrh	r2, [r2, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	801a      	strh	r2, [r3, #0]
    husart->Instance->BRR = brrtemp;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	183a      	adds	r2, r7, r0
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	60da      	str	r2, [r3, #12]
 8008f0e:	e003      	b.n	8008f18 <USART_SetConfig+0x50c>
  }
  else
  {
    ret = HAL_ERROR;
 8008f10:	231e      	movs	r3, #30
 8008f12:	18fb      	adds	r3, r7, r3
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008f30:	231e      	movs	r3, #30
 8008f32:	18fb      	adds	r3, r7, r3
 8008f34:	781b      	ldrb	r3, [r3, #0]
}
 8008f36:	0018      	movs	r0, r3
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b008      	add	sp, #32
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	00f42400 	.word	0x00f42400

08008f44 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f52:	f7f9 ff2b 	bl	8002dac <HAL_GetTick>
 8008f56:	0003      	movs	r3, r0
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2208      	movs	r2, #8
 8008f62:	4013      	ands	r3, r2
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d10e      	bne.n	8008f86 <USART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	2380      	movs	r3, #128	; 0x80
 8008f6c:	0399      	lsls	r1, r3, #14
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	23fa      	movs	r3, #250	; 0xfa
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	0013      	movs	r3, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f7ff fd12 	bl	80089a2 <USART_WaitOnFlagUntilTimeout>
 8008f7e:	1e03      	subs	r3, r0, #0
 8008f80:	d001      	beq.n	8008f86 <USART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e01e      	b.n	8008fc4 <USART_CheckIdleState+0x80>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2204      	movs	r2, #4
 8008f8e:	4013      	ands	r3, r2
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d10e      	bne.n	8008fb2 <USART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	2380      	movs	r3, #128	; 0x80
 8008f98:	03d9      	lsls	r1, r3, #15
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	23fa      	movs	r3, #250	; 0xfa
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	0013      	movs	r3, r2
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f7ff fcfc 	bl	80089a2 <USART_WaitOnFlagUntilTimeout>
 8008faa:	1e03      	subs	r3, r0, #0
 8008fac:	d001      	beq.n	8008fb2 <USART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e008      	b.n	8008fc4 <USART_CheckIdleState+0x80>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2259      	movs	r2, #89	; 0x59
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2258      	movs	r2, #88	; 0x58
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b004      	add	sp, #16
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2140      	movs	r1, #64	; 0x40
 8008fe0:	438a      	bics	r2, r1
 8008fe2:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2101      	movs	r1, #1
 8008ff0:	438a      	bics	r2, r1
 8008ff2:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	64da      	str	r2, [r3, #76]	; 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2259      	movs	r2, #89	; 0x59
 8008ffe:	5c9b      	ldrb	r3, [r3, r2]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b12      	cmp	r3, #18
 8009004:	d114      	bne.n	8009030 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2208      	movs	r2, #8
 800900c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	699a      	ldr	r2, [r3, #24]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2108      	movs	r1, #8
 800901a:	430a      	orrs	r2, r1
 800901c:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2259      	movs	r2, #89	; 0x59
 8009022:	2101      	movs	r1, #1
 8009024:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	0018      	movs	r0, r3
 800902a:	f7ff fc6d 	bl	8008908 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800902e:	e00c      	b.n	800904a <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d107      	bne.n	800904a <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2259      	movs	r2, #89	; 0x59
 800903e:	2101      	movs	r1, #1
 8009040:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	0018      	movs	r0, r3
 8009046:	f7ff fc67 	bl	8008918 <HAL_USART_TxRxCpltCallback>
}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	46bd      	mov	sp, r7
 800904e:	b002      	add	sp, #8
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	46bd      	mov	sp, r7
 800905e:	b002      	add	sp, #8
 8009060:	bd80      	pop	{r7, pc}

08009062 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	46bd      	mov	sp, r7
 800906e:	b002      	add	sp, #8
 8009070:	bd80      	pop	{r7, pc}

08009072 <LL_GPIO_SetPinMode>:
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6819      	ldr	r1, [r3, #0]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	435b      	muls	r3, r3
 8009086:	001a      	movs	r2, r3
 8009088:	0013      	movs	r3, r2
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	189b      	adds	r3, r3, r2
 800908e:	43db      	mvns	r3, r3
 8009090:	400b      	ands	r3, r1
 8009092:	001a      	movs	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	435b      	muls	r3, r3
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	434b      	muls	r3, r1
 800909c:	431a      	orrs	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	601a      	str	r2, [r3, #0]
}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	46bd      	mov	sp, r7
 80090a6:	b004      	add	sp, #16
 80090a8:	bd80      	pop	{r7, pc}

080090aa <LL_GPIO_SetPinOutputType>:
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	43d2      	mvns	r2, r2
 80090be:	401a      	ands	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	6879      	ldr	r1, [r7, #4]
 80090c4:	434b      	muls	r3, r1
 80090c6:	431a      	orrs	r2, r3
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	605a      	str	r2, [r3, #4]
}
 80090cc:	46c0      	nop			; (mov r8, r8)
 80090ce:	46bd      	mov	sp, r7
 80090d0:	b004      	add	sp, #16
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <LL_GPIO_SetPinSpeed>:
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6899      	ldr	r1, [r3, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	435b      	muls	r3, r3
 80090e8:	001a      	movs	r2, r3
 80090ea:	0013      	movs	r3, r2
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	189b      	adds	r3, r3, r2
 80090f0:	43db      	mvns	r3, r3
 80090f2:	400b      	ands	r3, r1
 80090f4:	001a      	movs	r2, r3
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	435b      	muls	r3, r3
 80090fa:	6879      	ldr	r1, [r7, #4]
 80090fc:	434b      	muls	r3, r1
 80090fe:	431a      	orrs	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	609a      	str	r2, [r3, #8]
}
 8009104:	46c0      	nop			; (mov r8, r8)
 8009106:	46bd      	mov	sp, r7
 8009108:	b004      	add	sp, #16
 800910a:	bd80      	pop	{r7, pc}

0800910c <LL_GPIO_SetPinPull>:
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	68d9      	ldr	r1, [r3, #12]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	435b      	muls	r3, r3
 8009120:	001a      	movs	r2, r3
 8009122:	0013      	movs	r3, r2
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	189b      	adds	r3, r3, r2
 8009128:	43db      	mvns	r3, r3
 800912a:	400b      	ands	r3, r1
 800912c:	001a      	movs	r2, r3
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	435b      	muls	r3, r3
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	434b      	muls	r3, r1
 8009136:	431a      	orrs	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	60da      	str	r2, [r3, #12]
}
 800913c:	46c0      	nop			; (mov r8, r8)
 800913e:	46bd      	mov	sp, r7
 8009140:	b004      	add	sp, #16
 8009142:	bd80      	pop	{r7, pc}

08009144 <LL_GPIO_SetAFPin_0_7>:
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a19      	ldr	r1, [r3, #32]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	435b      	muls	r3, r3
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	4353      	muls	r3, r2
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	435a      	muls	r2, r3
 8009160:	0013      	movs	r3, r2
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	43db      	mvns	r3, r3
 8009168:	400b      	ands	r3, r1
 800916a:	001a      	movs	r2, r3
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	435b      	muls	r3, r3
 8009170:	68b9      	ldr	r1, [r7, #8]
 8009172:	434b      	muls	r3, r1
 8009174:	68b9      	ldr	r1, [r7, #8]
 8009176:	434b      	muls	r3, r1
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	434b      	muls	r3, r1
 800917c:	431a      	orrs	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	621a      	str	r2, [r3, #32]
}
 8009182:	46c0      	nop			; (mov r8, r8)
 8009184:	46bd      	mov	sp, r7
 8009186:	b004      	add	sp, #16
 8009188:	bd80      	pop	{r7, pc}

0800918a <LL_GPIO_SetAFPin_8_15>:
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	60b9      	str	r1, [r7, #8]
 8009194:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	0a1b      	lsrs	r3, r3, #8
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	0a12      	lsrs	r2, r2, #8
 80091a2:	4353      	muls	r3, r2
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	0a12      	lsrs	r2, r2, #8
 80091a8:	4353      	muls	r3, r2
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	0a12      	lsrs	r2, r2, #8
 80091ae:	435a      	muls	r2, r3
 80091b0:	0013      	movs	r3, r2
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	1a9b      	subs	r3, r3, r2
 80091b6:	43db      	mvns	r3, r3
 80091b8:	400b      	ands	r3, r1
 80091ba:	001a      	movs	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	0a09      	lsrs	r1, r1, #8
 80091c4:	434b      	muls	r3, r1
 80091c6:	68b9      	ldr	r1, [r7, #8]
 80091c8:	0a09      	lsrs	r1, r1, #8
 80091ca:	434b      	muls	r3, r1
 80091cc:	68b9      	ldr	r1, [r7, #8]
 80091ce:	0a09      	lsrs	r1, r1, #8
 80091d0:	434b      	muls	r3, r1
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	434b      	muls	r3, r1
 80091d6:	431a      	orrs	r2, r3
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80091dc:	46c0      	nop			; (mov r8, r8)
 80091de:	46bd      	mov	sp, r7
 80091e0:	b004      	add	sp, #16
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80091f2:	e047      	b.n	8009284 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2101      	movs	r1, #1
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4091      	lsls	r1, r2
 80091fe:	000a      	movs	r2, r1
 8009200:	4013      	ands	r3, r2
 8009202:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d039      	beq.n	800927e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d003      	beq.n	800921a <LL_GPIO_Init+0x36>
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	2b02      	cmp	r3, #2
 8009218:	d10d      	bne.n	8009236 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	0018      	movs	r0, r3
 8009224:	f7ff ff56 	bl	80090d4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	68b9      	ldr	r1, [r7, #8]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	0018      	movs	r0, r3
 8009232:	f7ff ff3a 	bl	80090aa <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	691a      	ldr	r2, [r3, #16]
 800923a:	68b9      	ldr	r1, [r7, #8]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	0018      	movs	r0, r3
 8009240:	f7ff ff64 	bl	800910c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d111      	bne.n	8009270 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2bff      	cmp	r3, #255	; 0xff
 8009250:	d807      	bhi.n	8009262 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	695a      	ldr	r2, [r3, #20]
 8009256:	68b9      	ldr	r1, [r7, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	0018      	movs	r0, r3
 800925c:	f7ff ff72 	bl	8009144 <LL_GPIO_SetAFPin_0_7>
 8009260:	e006      	b.n	8009270 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	695a      	ldr	r2, [r3, #20]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	0018      	movs	r0, r3
 800926c:	f7ff ff8d 	bl	800918a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	0018      	movs	r0, r3
 800927a:	f7ff fefa 	bl	8009072 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	40da      	lsrs	r2, r3
 800928c:	1e13      	subs	r3, r2, #0
 800928e:	d1b1      	bne.n	80091f4 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8009290:	2300      	movs	r3, #0
}
 8009292:	0018      	movs	r0, r3
 8009294:	46bd      	mov	sp, r7
 8009296:	b004      	add	sp, #16
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <LL_RCC_HSI_IsReady>:
{
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <LL_RCC_HSI_IsReady+0x24>)
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	2380      	movs	r3, #128	; 0x80
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	401a      	ands	r2, r3
 80092aa:	2380      	movs	r3, #128	; 0x80
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d101      	bne.n	80092b6 <LL_RCC_HSI_IsReady+0x1a>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e000      	b.n	80092b8 <LL_RCC_HSI_IsReady+0x1c>
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	0018      	movs	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	40021000 	.word	0x40021000

080092c4 <LL_RCC_LSE_IsReady>:
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80092c8:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <LL_RCC_LSE_IsReady+0x1c>)
 80092ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092cc:	2202      	movs	r2, #2
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d101      	bne.n	80092d8 <LL_RCC_LSE_IsReady+0x14>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <LL_RCC_LSE_IsReady+0x16>
 80092d8:	2300      	movs	r3, #0
}
 80092da:	0018      	movs	r0, r3
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	40021000 	.word	0x40021000

080092e4 <LL_RCC_GetSysClkSource>:
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80092e8:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <LL_RCC_GetSysClkSource+0x14>)
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2238      	movs	r2, #56	; 0x38
 80092ee:	4013      	ands	r3, r2
}
 80092f0:	0018      	movs	r0, r3
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	46c0      	nop			; (mov r8, r8)
 80092f8:	40021000 	.word	0x40021000

080092fc <LL_RCC_GetAHBPrescaler>:
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009300:	4b03      	ldr	r3, [pc, #12]	; (8009310 <LL_RCC_GetAHBPrescaler+0x14>)
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	23f0      	movs	r3, #240	; 0xf0
 8009306:	011b      	lsls	r3, r3, #4
 8009308:	4013      	ands	r3, r2
}
 800930a:	0018      	movs	r0, r3
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	40021000 	.word	0x40021000

08009314 <LL_RCC_GetAPB1Prescaler>:
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009318:	4b03      	ldr	r3, [pc, #12]	; (8009328 <LL_RCC_GetAPB1Prescaler+0x14>)
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	23e0      	movs	r3, #224	; 0xe0
 800931e:	01db      	lsls	r3, r3, #7
 8009320:	4013      	ands	r3, r2
}
 8009322:	0018      	movs	r0, r3
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	40021000 	.word	0x40021000

0800932c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  * (*) feature not available on all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8009334:	4b05      	ldr	r3, [pc, #20]	; (800934c <LL_RCC_GetUSARTClockSource+0x20>)
 8009336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	401a      	ands	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	4313      	orrs	r3, r2
}
 8009342:	0018      	movs	r0, r3
 8009344:	46bd      	mov	sp, r7
 8009346:	b002      	add	sp, #8
 8009348:	bd80      	pop	{r7, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	40021000 	.word	0x40021000

08009350 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009354:	4b03      	ldr	r3, [pc, #12]	; (8009364 <LL_RCC_PLL_GetN+0x14>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	227f      	movs	r2, #127	; 0x7f
 800935c:	4013      	ands	r3, r2
}
 800935e:	0018      	movs	r0, r3
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40021000 	.word	0x40021000

08009368 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800936c:	4b03      	ldr	r3, [pc, #12]	; (800937c <LL_RCC_PLL_GetR+0x14>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	0f5b      	lsrs	r3, r3, #29
 8009372:	075b      	lsls	r3, r3, #29
}
 8009374:	0018      	movs	r0, r3
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	40021000 	.word	0x40021000

08009380 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009384:	4b03      	ldr	r3, [pc, #12]	; (8009394 <LL_RCC_PLL_GetMainSource+0x14>)
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	2203      	movs	r2, #3
 800938a:	4013      	ands	r3, r2
}
 800938c:	0018      	movs	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	40021000 	.word	0x40021000

08009398 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800939c:	4b03      	ldr	r3, [pc, #12]	; (80093ac <LL_RCC_PLL_GetDivider+0x14>)
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	2270      	movs	r2, #112	; 0x70
 80093a2:	4013      	ands	r3, r2
}
 80093a4:	0018      	movs	r0, r3
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	40021000 	.word	0x40021000

080093b0 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80093b8:	f000 f8a8 	bl	800950c <RCC_GetSystemClockFreq>
 80093bc:	0002      	movs	r2, r0
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	0018      	movs	r0, r3
 80093c8:	f000 f8ce 	bl	8009568 <RCC_GetHCLKClockFreq>
 80093cc:	0002      	movs	r2, r0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	0018      	movs	r0, r3
 80093d8:	f000 f8de 	bl	8009598 <RCC_GetPCLK1ClockFreq>
 80093dc:	0002      	movs	r2, r0
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	609a      	str	r2, [r3, #8]
}
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	46bd      	mov	sp, r7
 80093e6:	b002      	add	sp, #8
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d134      	bne.n	8009468 <LL_RCC_GetUSARTClockFreq+0x7c>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	0018      	movs	r0, r3
 8009402:	f7ff ff93 	bl	800932c <LL_RCC_GetUSARTClockSource>
 8009406:	0003      	movs	r3, r0
 8009408:	4a39      	ldr	r2, [pc, #228]	; (80094f0 <LL_RCC_GetUSARTClockFreq+0x104>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d016      	beq.n	800943c <LL_RCC_GetUSARTClockFreq+0x50>
 800940e:	4a38      	ldr	r2, [pc, #224]	; (80094f0 <LL_RCC_GetUSARTClockFreq+0x104>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d81c      	bhi.n	800944e <LL_RCC_GetUSARTClockFreq+0x62>
 8009414:	4a37      	ldr	r2, [pc, #220]	; (80094f4 <LL_RCC_GetUSARTClockFreq+0x108>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d003      	beq.n	8009422 <LL_RCC_GetUSARTClockFreq+0x36>
 800941a:	4a37      	ldr	r2, [pc, #220]	; (80094f8 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d005      	beq.n	800942c <LL_RCC_GetUSARTClockFreq+0x40>
 8009420:	e015      	b.n	800944e <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009422:	f000 f873 	bl	800950c <RCC_GetSystemClockFreq>
 8009426:	0003      	movs	r3, r0
 8009428:	60fb      	str	r3, [r7, #12]
        break;
 800942a:	e05c      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800942c:	f7ff ff36 	bl	800929c <LL_RCC_HSI_IsReady>
 8009430:	0003      	movs	r3, r0
 8009432:	2b01      	cmp	r3, #1
 8009434:	d150      	bne.n	80094d8 <LL_RCC_GetUSARTClockFreq+0xec>
        {
          usart_frequency = HSI_VALUE;
 8009436:	4b31      	ldr	r3, [pc, #196]	; (80094fc <LL_RCC_GetUSARTClockFreq+0x110>)
 8009438:	60fb      	str	r3, [r7, #12]
        }
        break;
 800943a:	e04d      	b.n	80094d8 <LL_RCC_GetUSARTClockFreq+0xec>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 800943c:	f7ff ff42 	bl	80092c4 <LL_RCC_LSE_IsReady>
 8009440:	0003      	movs	r3, r0
 8009442:	2b01      	cmp	r3, #1
 8009444:	d14a      	bne.n	80094dc <LL_RCC_GetUSARTClockFreq+0xf0>
        {
          usart_frequency = LSE_VALUE;
 8009446:	2380      	movs	r3, #128	; 0x80
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800944c:	e046      	b.n	80094dc <LL_RCC_GetUSARTClockFreq+0xf0>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800944e:	f000 f85d 	bl	800950c <RCC_GetSystemClockFreq>
 8009452:	0003      	movs	r3, r0
 8009454:	0018      	movs	r0, r3
 8009456:	f000 f887 	bl	8009568 <RCC_GetHCLKClockFreq>
 800945a:	0003      	movs	r3, r0
 800945c:	0018      	movs	r0, r3
 800945e:	f000 f89b 	bl	8009598 <RCC_GetPCLK1ClockFreq>
 8009462:	0003      	movs	r3, r0
 8009464:	60fb      	str	r3, [r7, #12]
        break;
 8009466:	e03e      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>
    }
  }
#if defined(RCC_CCIPR_USART2SEL)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b0c      	cmp	r3, #12
 800946c:	d13b      	bne.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	0018      	movs	r0, r3
 8009472:	f7ff ff5b 	bl	800932c <LL_RCC_GetUSARTClockSource>
 8009476:	0003      	movs	r3, r0
 8009478:	4a21      	ldr	r2, [pc, #132]	; (8009500 <LL_RCC_GetUSARTClockFreq+0x114>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d016      	beq.n	80094ac <LL_RCC_GetUSARTClockFreq+0xc0>
 800947e:	4a20      	ldr	r2, [pc, #128]	; (8009500 <LL_RCC_GetUSARTClockFreq+0x114>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d81c      	bhi.n	80094be <LL_RCC_GetUSARTClockFreq+0xd2>
 8009484:	4a1f      	ldr	r2, [pc, #124]	; (8009504 <LL_RCC_GetUSARTClockFreq+0x118>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d003      	beq.n	8009492 <LL_RCC_GetUSARTClockFreq+0xa6>
 800948a:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <LL_RCC_GetUSARTClockFreq+0x11c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d005      	beq.n	800949c <LL_RCC_GetUSARTClockFreq+0xb0>
 8009490:	e015      	b.n	80094be <LL_RCC_GetUSARTClockFreq+0xd2>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8009492:	f000 f83b 	bl	800950c <RCC_GetSystemClockFreq>
 8009496:	0003      	movs	r3, r0
 8009498:	60fb      	str	r3, [r7, #12]
        break;
 800949a:	e024      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 800949c:	f7ff fefe 	bl	800929c <LL_RCC_HSI_IsReady>
 80094a0:	0003      	movs	r3, r0
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d11c      	bne.n	80094e0 <LL_RCC_GetUSARTClockFreq+0xf4>
        {
          usart_frequency = HSI_VALUE;
 80094a6:	4b15      	ldr	r3, [pc, #84]	; (80094fc <LL_RCC_GetUSARTClockFreq+0x110>)
 80094a8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094aa:	e019      	b.n	80094e0 <LL_RCC_GetUSARTClockFreq+0xf4>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80094ac:	f7ff ff0a 	bl	80092c4 <LL_RCC_LSE_IsReady>
 80094b0:	0003      	movs	r3, r0
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d116      	bne.n	80094e4 <LL_RCC_GetUSARTClockFreq+0xf8>
        {
          usart_frequency = LSE_VALUE;
 80094b6:	2380      	movs	r3, #128	; 0x80
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80094bc:	e012      	b.n	80094e4 <LL_RCC_GetUSARTClockFreq+0xf8>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80094be:	f000 f825 	bl	800950c <RCC_GetSystemClockFreq>
 80094c2:	0003      	movs	r3, r0
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 f84f 	bl	8009568 <RCC_GetHCLKClockFreq>
 80094ca:	0003      	movs	r3, r0
 80094cc:	0018      	movs	r0, r3
 80094ce:	f000 f863 	bl	8009598 <RCC_GetPCLK1ClockFreq>
 80094d2:	0003      	movs	r3, r0
 80094d4:	60fb      	str	r3, [r7, #12]
        break;
 80094d6:	e006      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80094d8:	46c0      	nop			; (mov r8, r8)
 80094da:	e004      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80094dc:	46c0      	nop			; (mov r8, r8)
 80094de:	e002      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80094e0:	46c0      	nop			; (mov r8, r8)
 80094e2:	e000      	b.n	80094e6 <LL_RCC_GetUSARTClockFreq+0xfa>
        break;
 80094e4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART3SEL */
  else
  {
    /* nothing to do */
  }
  return usart_frequency;
 80094e6:	68fb      	ldr	r3, [r7, #12]
}
 80094e8:	0018      	movs	r0, r3
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b004      	add	sp, #16
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	00030003 	.word	0x00030003
 80094f4:	00030001 	.word	0x00030001
 80094f8:	00030002 	.word	0x00030002
 80094fc:	00f42400 	.word	0x00f42400
 8009500:	000c000c 	.word	0x000c000c
 8009504:	000c0004 	.word	0x000c0004
 8009508:	000c0008 	.word	0x000c0008

0800950c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
  uint32_t frequency;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009512:	f7ff fee7 	bl	80092e4 <LL_RCC_GetSysClkSource>
 8009516:	0003      	movs	r3, r0
 8009518:	2b08      	cmp	r3, #8
 800951a:	d002      	beq.n	8009522 <RCC_GetSystemClockFreq+0x16>
 800951c:	2b10      	cmp	r3, #16
 800951e:	d003      	beq.n	8009528 <RCC_GetSystemClockFreq+0x1c>
 8009520:	e007      	b.n	8009532 <RCC_GetSystemClockFreq+0x26>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009522:	4b0e      	ldr	r3, [pc, #56]	; (800955c <RCC_GetSystemClockFreq+0x50>)
 8009524:	607b      	str	r3, [r7, #4]
      break;
 8009526:	e014      	b.n	8009552 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8009528:	f000 f84c 	bl	80095c4 <RCC_PLL_GetFreqDomain_SYS>
 800952c:	0003      	movs	r3, r0
 800952e:	607b      	str	r3, [r7, #4]
      break;
 8009530:	e00f      	b.n	8009552 <RCC_GetSystemClockFreq+0x46>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
    default:
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009532:	4b0b      	ldr	r3, [pc, #44]	; (8009560 <RCC_GetSystemClockFreq+0x54>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	0adb      	lsrs	r3, r3, #11
 8009538:	2207      	movs	r2, #7
 800953a:	4013      	ands	r3, r2
 800953c:	2201      	movs	r2, #1
 800953e:	409a      	lsls	r2, r3
 8009540:	0013      	movs	r3, r2
 8009542:	603b      	str	r3, [r7, #0]
      frequency = (HSI_VALUE / hsidiv);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	4807      	ldr	r0, [pc, #28]	; (8009564 <RCC_GetSystemClockFreq+0x58>)
 8009548:	f7f6 fddc 	bl	8000104 <__udivsi3>
 800954c:	0003      	movs	r3, r0
 800954e:	607b      	str	r3, [r7, #4]
      break;
 8009550:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8009552:	687b      	ldr	r3, [r7, #4]
}
 8009554:	0018      	movs	r0, r3
 8009556:	46bd      	mov	sp, r7
 8009558:	b002      	add	sp, #8
 800955a:	bd80      	pop	{r7, pc}
 800955c:	007a1200 	.word	0x007a1200
 8009560:	40021000 	.word	0x40021000
 8009564:	00f42400 	.word	0x00f42400

08009568 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009570:	f7ff fec4 	bl	80092fc <LL_RCC_GetAHBPrescaler>
 8009574:	0003      	movs	r3, r0
 8009576:	0a1b      	lsrs	r3, r3, #8
 8009578:	220f      	movs	r2, #15
 800957a:	401a      	ands	r2, r3
 800957c:	4b05      	ldr	r3, [pc, #20]	; (8009594 <RCC_GetHCLKClockFreq+0x2c>)
 800957e:	0092      	lsls	r2, r2, #2
 8009580:	58d3      	ldr	r3, [r2, r3]
 8009582:	221f      	movs	r2, #31
 8009584:	4013      	ands	r3, r2
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	40da      	lsrs	r2, r3
 800958a:	0013      	movs	r3, r2
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b002      	add	sp, #8
 8009592:	bd80      	pop	{r7, pc}
 8009594:	0800990c 	.word	0x0800990c

08009598 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80095a0:	f7ff feb8 	bl	8009314 <LL_RCC_GetAPB1Prescaler>
 80095a4:	0003      	movs	r3, r0
 80095a6:	0b1a      	lsrs	r2, r3, #12
 80095a8:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <RCC_GetPCLK1ClockFreq+0x28>)
 80095aa:	0092      	lsls	r2, r2, #2
 80095ac:	58d3      	ldr	r3, [r2, r3]
 80095ae:	221f      	movs	r2, #31
 80095b0:	4013      	ands	r3, r2
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	40da      	lsrs	r2, r3
 80095b6:	0013      	movs	r3, r2
}
 80095b8:	0018      	movs	r0, r3
 80095ba:	46bd      	mov	sp, r7
 80095bc:	b002      	add	sp, #8
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	0800994c 	.word	0x0800994c

080095c4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80095c4:	b590      	push	{r4, r7, lr}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80095ca:	f7ff fed9 	bl	8009380 <LL_RCC_PLL_GetMainSource>
 80095ce:	0003      	movs	r3, r0
 80095d0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d003      	beq.n	80095e0 <RCC_PLL_GetFreqDomain_SYS+0x1c>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d003      	beq.n	80095e6 <RCC_PLL_GetFreqDomain_SYS+0x22>
 80095de:	e005      	b.n	80095ec <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80095e0:	4b13      	ldr	r3, [pc, #76]	; (8009630 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80095e2:	607b      	str	r3, [r7, #4]
      break;
 80095e4:	e005      	b.n	80095f2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80095e6:	4b13      	ldr	r3, [pc, #76]	; (8009634 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 80095e8:	607b      	str	r3, [r7, #4]
      break;
 80095ea:	e002      	b.n	80095f2 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:
      pllinputfreq = HSI_VALUE;
 80095ec:	4b10      	ldr	r3, [pc, #64]	; (8009630 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80095ee:	607b      	str	r3, [r7, #4]
      break;
 80095f0:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80095f2:	f7ff fead 	bl	8009350 <LL_RCC_PLL_GetN>
 80095f6:	0002      	movs	r2, r0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4353      	muls	r3, r2
 80095fc:	001c      	movs	r4, r3
 80095fe:	f7ff fecb 	bl	8009398 <LL_RCC_PLL_GetDivider>
 8009602:	0003      	movs	r3, r0
 8009604:	091b      	lsrs	r3, r3, #4
 8009606:	3301      	adds	r3, #1
 8009608:	0019      	movs	r1, r3
 800960a:	0020      	movs	r0, r4
 800960c:	f7f6 fd7a 	bl	8000104 <__udivsi3>
 8009610:	0003      	movs	r3, r0
 8009612:	001c      	movs	r4, r3
 8009614:	f7ff fea8 	bl	8009368 <LL_RCC_PLL_GetR>
 8009618:	0003      	movs	r3, r0
 800961a:	0f5b      	lsrs	r3, r3, #29
 800961c:	3301      	adds	r3, #1
 800961e:	0019      	movs	r1, r3
 8009620:	0020      	movs	r0, r4
 8009622:	f7f6 fd6f 	bl	8000104 <__udivsi3>
 8009626:	0003      	movs	r3, r0
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009628:	0018      	movs	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	b003      	add	sp, #12
 800962e:	bd90      	pop	{r4, r7, pc}
 8009630:	00f42400 	.word	0x00f42400
 8009634:	007a1200 	.word	0x007a1200

08009638 <LL_USART_IsEnabled>:
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2201      	movs	r2, #1
 8009646:	4013      	ands	r3, r2
 8009648:	2b01      	cmp	r3, #1
 800964a:	d101      	bne.n	8009650 <LL_USART_IsEnabled+0x18>
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <LL_USART_IsEnabled+0x1a>
 8009650:	2300      	movs	r3, #0
}
 8009652:	0018      	movs	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	b002      	add	sp, #8
 8009658:	bd80      	pop	{r7, pc}

0800965a <LL_USART_SetPrescaler>:
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009668:	220f      	movs	r2, #15
 800966a:	4393      	bics	r3, r2
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	b292      	uxth	r2, r2
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009676:	46c0      	nop			; (mov r8, r8)
 8009678:	46bd      	mov	sp, r7
 800967a:	b002      	add	sp, #8
 800967c:	bd80      	pop	{r7, pc}
	...

08009680 <LL_USART_SetStopBitsLength>:
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	4a05      	ldr	r2, [pc, #20]	; (80096a4 <LL_USART_SetStopBitsLength+0x24>)
 8009690:	401a      	ands	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	605a      	str	r2, [r3, #4]
}
 800969a:	46c0      	nop			; (mov r8, r8)
 800969c:	46bd      	mov	sp, r7
 800969e:	b002      	add	sp, #8
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	46c0      	nop			; (mov r8, r8)
 80096a4:	ffffcfff 	.word	0xffffcfff

080096a8 <LL_USART_SetHWFlowCtrl>:
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	4a05      	ldr	r2, [pc, #20]	; (80096cc <LL_USART_SetHWFlowCtrl+0x24>)
 80096b8:	401a      	ands	r2, r3
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	609a      	str	r2, [r3, #8]
}
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	46bd      	mov	sp, r7
 80096c6:	b002      	add	sp, #8
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	fffffcff 	.word	0xfffffcff

080096d0 <LL_USART_SetBaudRate>:
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b0b      	cmp	r3, #11
 80096e2:	d843      	bhi.n	800976c <LL_USART_SetBaudRate+0x9c>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	2380      	movs	r3, #128	; 0x80
 80096e8:	021b      	lsls	r3, r3, #8
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d126      	bne.n	800973c <LL_USART_SetBaudRate+0x6c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	001a      	movs	r2, r3
 80096f4:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <LL_USART_SetBaudRate+0xa4>)
 80096f6:	0092      	lsls	r2, r2, #2
 80096f8:	58d3      	ldr	r3, [r2, r3]
 80096fa:	0019      	movs	r1, r3
 80096fc:	68b8      	ldr	r0, [r7, #8]
 80096fe:	f7f6 fd01 	bl	8000104 <__udivsi3>
 8009702:	0003      	movs	r3, r0
 8009704:	005a      	lsls	r2, r3, #1
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	085b      	lsrs	r3, r3, #1
 800970a:	18d3      	adds	r3, r2, r3
 800970c:	6a39      	ldr	r1, [r7, #32]
 800970e:	0018      	movs	r0, r3
 8009710:	f7f6 fcf8 	bl	8000104 <__udivsi3>
 8009714:	0003      	movs	r3, r0
 8009716:	b29b      	uxth	r3, r3
 8009718:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	4a16      	ldr	r2, [pc, #88]	; (8009778 <LL_USART_SetBaudRate+0xa8>)
 800971e:	4013      	ands	r3, r2
 8009720:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	085b      	lsrs	r3, r3, #1
 8009726:	b29b      	uxth	r3, r3
 8009728:	001a      	movs	r2, r3
 800972a:	2307      	movs	r3, #7
 800972c:	4013      	ands	r3, r2
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	60da      	str	r2, [r3, #12]
}
 800973a:	e017      	b.n	800976c <LL_USART_SetBaudRate+0x9c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	001a      	movs	r2, r3
 8009742:	4b0c      	ldr	r3, [pc, #48]	; (8009774 <LL_USART_SetBaudRate+0xa4>)
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	58d3      	ldr	r3, [r2, r3]
 8009748:	0019      	movs	r1, r3
 800974a:	68b8      	ldr	r0, [r7, #8]
 800974c:	f7f6 fcda 	bl	8000104 <__udivsi3>
 8009750:	0003      	movs	r3, r0
 8009752:	001a      	movs	r2, r3
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	18d3      	adds	r3, r2, r3
 800975a:	6a39      	ldr	r1, [r7, #32]
 800975c:	0018      	movs	r0, r3
 800975e:	f7f6 fcd1 	bl	8000104 <__udivsi3>
 8009762:	0003      	movs	r3, r0
 8009764:	b29b      	uxth	r3, r3
 8009766:	001a      	movs	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	60da      	str	r2, [r3, #12]
}
 800976c:	46c0      	nop			; (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b006      	add	sp, #24
 8009772:	bd80      	pop	{r7, pc}
 8009774:	080099c0 	.word	0x080099c0
 8009778:	0000fff0 	.word	0x0000fff0

0800977c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b08b      	sub	sp, #44	; 0x2c
 8009780:	af02      	add	r7, sp, #8
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009786:	231f      	movs	r3, #31
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2201      	movs	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800978e:	2300      	movs	r3, #0
 8009790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	0018      	movs	r0, r3
 8009796:	f7ff ff4f 	bl	8009638 <LL_USART_IsEnabled>
 800979a:	1e03      	subs	r3, r0, #0
 800979c:	d16a      	bne.n	8009874 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a38      	ldr	r2, [pc, #224]	; (8009884 <LL_USART_Init+0x108>)
 80097a4:	401a      	ands	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	4319      	orrs	r1, r3
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	695b      	ldr	r3, [r3, #20]
 80097b4:	4319      	orrs	r1, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	430b      	orrs	r3, r1
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	0011      	movs	r1, r2
 80097ca:	0018      	movs	r0, r3
 80097cc:	f7ff ff58 	bl	8009680 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	699a      	ldr	r2, [r3, #24]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	0011      	movs	r1, r2
 80097d8:	0018      	movs	r0, r3
 80097da:	f7ff ff65 	bl	80096a8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a29      	ldr	r2, [pc, #164]	; (8009888 <LL_USART_Init+0x10c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d105      	bne.n	80097f2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80097e6:	2003      	movs	r0, #3
 80097e8:	f7ff fe00 	bl	80093ec <LL_RCC_GetUSARTClockFreq>
 80097ec:	0003      	movs	r3, r0
 80097ee:	61bb      	str	r3, [r7, #24]
 80097f0:	e022      	b.n	8009838 <LL_USART_Init+0xbc>
    }
    else if (USARTx == USART2)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a25      	ldr	r2, [pc, #148]	; (800988c <LL_USART_Init+0x110>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d105      	bne.n	8009806 <LL_USART_Init+0x8a>
    {
#if defined(RCC_CCIPR_USART2SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80097fa:	200c      	movs	r0, #12
 80097fc:	f7ff fdf6 	bl	80093ec <LL_RCC_GetUSARTClockFreq>
 8009800:	0003      	movs	r3, r0
 8009802:	61bb      	str	r3, [r7, #24]
 8009804:	e018      	b.n	8009838 <LL_USART_Init+0xbc>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* RCC_CCIPR_USART2SEL */
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a21      	ldr	r2, [pc, #132]	; (8009890 <LL_USART_Init+0x114>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d108      	bne.n	8009820 <LL_USART_Init+0xa4>
    {
#if defined(RCC_CCIPR_USART3SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800980e:	240c      	movs	r4, #12
 8009810:	193b      	adds	r3, r7, r4
 8009812:	0018      	movs	r0, r3
 8009814:	f7ff fdcc 	bl	80093b0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8009818:	193b      	adds	r3, r7, r4
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	e00b      	b.n	8009838 <LL_USART_Init+0xbc>
#endif /* RCC_CCIPR_USART3SEL */
    }
#endif /* USART3 */
#if defined(USART4)
    else if (USARTx == USART4)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a1c      	ldr	r2, [pc, #112]	; (8009894 <LL_USART_Init+0x118>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d107      	bne.n	8009838 <LL_USART_Init+0xbc>
    {
#if defined(RCC_CCIPR_USART4SEL)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART4_CLKSOURCE);
#else
      /* USART4 clock is PCLK1 */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8009828:	240c      	movs	r4, #12
 800982a:	193b      	adds	r3, r7, r4
 800982c:	0018      	movs	r0, r3
 800982e:	f7ff fdbf 	bl	80093b0 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8009832:	193b      	adds	r3, r7, r4
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	61bb      	str	r3, [r7, #24]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d013      	beq.n	8009866 <LL_USART_Init+0xea>
        && (USART_InitStruct->BaudRate != 0U))
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00f      	beq.n	8009866 <LL_USART_Init+0xea>
    {
      status = SUCCESS;
 8009846:	231f      	movs	r3, #31
 8009848:	18fb      	adds	r3, r7, r3
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	69dc      	ldr	r4, [r3, #28]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	69b9      	ldr	r1, [r7, #24]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	0023      	movs	r3, r4
 8009862:	f7ff ff35 	bl	80096d0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	0011      	movs	r1, r2
 800986e:	0018      	movs	r0, r3
 8009870:	f7ff fef3 	bl	800965a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8009874:	231f      	movs	r3, #31
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	781b      	ldrb	r3, [r3, #0]
}
 800987a:	0018      	movs	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	b009      	add	sp, #36	; 0x24
 8009880:	bd90      	pop	{r4, r7, pc}
 8009882:	46c0      	nop			; (mov r8, r8)
 8009884:	efff69f3 	.word	0xefff69f3
 8009888:	40013800 	.word	0x40013800
 800988c:	40004400 	.word	0x40004400
 8009890:	40004800 	.word	0x40004800
 8009894:	40004c00 	.word	0x40004c00

08009898 <__libc_init_array>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	2600      	movs	r6, #0
 800989c:	4d0c      	ldr	r5, [pc, #48]	; (80098d0 <__libc_init_array+0x38>)
 800989e:	4c0d      	ldr	r4, [pc, #52]	; (80098d4 <__libc_init_array+0x3c>)
 80098a0:	1b64      	subs	r4, r4, r5
 80098a2:	10a4      	asrs	r4, r4, #2
 80098a4:	42a6      	cmp	r6, r4
 80098a6:	d109      	bne.n	80098bc <__libc_init_array+0x24>
 80098a8:	2600      	movs	r6, #0
 80098aa:	f000 f821 	bl	80098f0 <_init>
 80098ae:	4d0a      	ldr	r5, [pc, #40]	; (80098d8 <__libc_init_array+0x40>)
 80098b0:	4c0a      	ldr	r4, [pc, #40]	; (80098dc <__libc_init_array+0x44>)
 80098b2:	1b64      	subs	r4, r4, r5
 80098b4:	10a4      	asrs	r4, r4, #2
 80098b6:	42a6      	cmp	r6, r4
 80098b8:	d105      	bne.n	80098c6 <__libc_init_array+0x2e>
 80098ba:	bd70      	pop	{r4, r5, r6, pc}
 80098bc:	00b3      	lsls	r3, r6, #2
 80098be:	58eb      	ldr	r3, [r5, r3]
 80098c0:	4798      	blx	r3
 80098c2:	3601      	adds	r6, #1
 80098c4:	e7ee      	b.n	80098a4 <__libc_init_array+0xc>
 80098c6:	00b3      	lsls	r3, r6, #2
 80098c8:	58eb      	ldr	r3, [r5, r3]
 80098ca:	4798      	blx	r3
 80098cc:	3601      	adds	r6, #1
 80098ce:	e7f2      	b.n	80098b6 <__libc_init_array+0x1e>
 80098d0:	080099f0 	.word	0x080099f0
 80098d4:	080099f0 	.word	0x080099f0
 80098d8:	080099f0 	.word	0x080099f0
 80098dc:	080099f4 	.word	0x080099f4

080098e0 <memset>:
 80098e0:	0003      	movs	r3, r0
 80098e2:	1882      	adds	r2, r0, r2
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d100      	bne.n	80098ea <memset+0xa>
 80098e8:	4770      	bx	lr
 80098ea:	7019      	strb	r1, [r3, #0]
 80098ec:	3301      	adds	r3, #1
 80098ee:	e7f9      	b.n	80098e4 <memset+0x4>

080098f0 <_init>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr

080098fc <_fini>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr
